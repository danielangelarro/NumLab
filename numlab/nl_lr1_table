0
while
1
0
decorators
2
0
[
3
0
small_stmt
4
0
{
5
0
atom_expr
6
0
expr
7
0
NUMBER
8
0
True
9
0
factor
10
0
class
11
0
shift_expr
12
0
atom
13
0
xor_expr
14
0
term
15
0
if
16
0
try
17
0
with
18
0
decorated
19
0
and_test
20
0
and_expr
21
0
for_stmt
22
0
False
23
0
def
24
0
or_test
25
0
with_stmt
26
0
funcdef
27
0
lambda
28
0
None
29
0
+
30
0
if_stmt
31
0
arith_expr
32
0
test
33
0
(
34
0
compound_stmt
35
0
-
36
0
NAME
37
0
try_stmt
38
0
while_stmt
39
0
not_test
40
0
lambdef
41
0
for
42
0
STRING
43
0
~
44
0
simple_stmt
45
0
classdef
46
0
power
47
0
comparison
48
0
continue
49
0
expr_stmt
50
0
not
51
0
$
program -> 
0
del_stmt
52
0
yield_stmt
53
0
@
54
0
decorator
55
0
yield
56
0
assert_stmt
57
0
break_stmt
58
0
return
59
0
pass
60
0
continue_stmt
61
0
test_list
62
0
break
63
0
del
64
0
pass_stmt
65
0
nonlocal
66
0
assert
67
0
global_stmt
68
0
raise
69
0
raise_stmt
70
0
global
71
0
nonlocal_stmt
72
0
stmt
73
0
program
74
0
return_stmt
75
0
flow_stmt
76
0
NEWLINE
77
1
test
78
1
atom_expr
79
1
and_expr
80
1
term
81
1
factor
82
1
shift_expr
83
1
arith_expr
84
1
NUMBER
85
1
NAME
86
1
[
87
1
{
88
1
expr
89
1
False
90
1
xor_expr
91
1
STRING
92
1
+
93
1
True
94
1
(
95
1
None
96
1
-
97
1
atom
98
1
power
99
1
~
100
1
lambda
101
1
not_test
102
1
not
103
1
comparison
104
1
and_test
105
1
lambdef
106
1
or_test
107
2
def
24
2
funcdef
108
2
class
11
2
classdef
109
3
and_test
110
3
atom_expr
111
3
and_expr
112
3
term
113
3
factor
114
3
shift_expr
115
3
arith_expr
116
3
NUMBER
117
3
NAME
118
3
[
119
3
test_list_comp
120
3
{
121
3
expr
122
3
not_test
123
3
False
124
3
xor_expr
125
3
atom
126
3
STRING
127
3
+
128
3
(
129
3
]
130
3
True
131
3
-
132
3
None
133
3
comparison
134
3
or_test
135
3
test
136
3
power
137
3
~
138
3
lambda
139
3
lambdef
140
3
not
141
3
test_list
142
4
NEWLINE
143
5
}
144
6
**
145
6
>>=
power -> atom_expr
6
!=
power -> atom_expr
6
|
power -> atom_expr
6
&=
power -> atom_expr
6
/
power -> atom_expr
6
&
power -> atom_expr
6
<<=
power -> atom_expr
6
not
power -> atom_expr
6
-=
power -> atom_expr
6
<=
power -> atom_expr
6
and
power -> atom_expr
6
>>
power -> atom_expr
6
*=
power -> atom_expr
6
:
power -> atom_expr
6
>
power -> atom_expr
6
NEWLINE
power -> atom_expr
6
@=
power -> atom_expr
6
*
power -> atom_expr
6
if
power -> atom_expr
6
/=
power -> atom_expr
6
,
power -> atom_expr
6
in
power -> atom_expr
6
is
power -> atom_expr
6
+=
power -> atom_expr
6
<<
power -> atom_expr
6
^=
power -> atom_expr
6
**=
power -> atom_expr
6
^
power -> atom_expr
6
+
power -> atom_expr
6
or
power -> atom_expr
6
==
power -> atom_expr
6
<
power -> atom_expr
6
=
power -> atom_expr
6
|=
power -> atom_expr
6
%
power -> atom_expr
6
@
power -> atom_expr
6
//=
power -> atom_expr
6
-
power -> atom_expr
6
>=
power -> atom_expr
6
%=
power -> atom_expr
6
//
power -> atom_expr
7
comp_op
146
7
in
147
7
<
148
7
>=
149
7
not
150
7
!=
151
7
|=
comparison -> expr
7
>
152
7
==
153
7
is
154
7
<=
155
7
=
comparison -> expr
7
%=
comparison -> expr
7
*=
comparison -> expr
7
&=
comparison -> expr
7
<<=
comparison -> expr
7
-=
comparison -> expr
7
NEWLINE
comparison -> expr
7
@=
comparison -> expr
7
//=
comparison -> expr
7
>>=
comparison -> expr
7
or
comparison -> expr
7
,
comparison -> expr
7
**=
comparison -> expr
7
and
comparison -> expr
7
+=
comparison -> expr
7
:
comparison -> expr
7
if
comparison -> expr
7
/=
comparison -> expr
7
^=
comparison -> expr
8
%=
atom -> NUMBER
8
^=
atom -> NUMBER
8
<=
atom -> NUMBER
8
==
atom -> NUMBER
8
<<
atom -> NUMBER
8
&=
atom -> NUMBER
8
/
atom -> NUMBER
8
^
atom -> NUMBER
8
if
atom -> NUMBER
8
.
atom -> NUMBER
8
**
atom -> NUMBER
8
or
atom -> NUMBER
8
+
atom -> NUMBER
8
**=
atom -> NUMBER
8
%
atom -> NUMBER
8
-
atom -> NUMBER
8
-=
atom -> NUMBER
8
//=
atom -> NUMBER
8
&
atom -> NUMBER
8
@
atom -> NUMBER
8
<<=
atom -> NUMBER
8
*
atom -> NUMBER
8
>>
atom -> NUMBER
8
=
atom -> NUMBER
8
<
atom -> NUMBER
8
is
atom -> NUMBER
8
(
atom -> NUMBER
8
@=
atom -> NUMBER
8
and
atom -> NUMBER
8
not
atom -> NUMBER
8
/=
atom -> NUMBER
8
+=
atom -> NUMBER
8
>>=
atom -> NUMBER
8
!=
atom -> NUMBER
8
|
atom -> NUMBER
8
|=
atom -> NUMBER
8
in
atom -> NUMBER
8
*=
atom -> NUMBER
8
>
atom -> NUMBER
8
NEWLINE
atom -> NUMBER
8
:
atom -> NUMBER
8
>=
atom -> NUMBER
8
//
atom -> NUMBER
8
,
atom -> NUMBER
8
[
atom -> NUMBER
9
:
atom -> True
9
+=
atom -> True
9
is
atom -> True
9
!=
atom -> True
9
>>=
atom -> True
9
//
atom -> True
9
-=
atom -> True
9
<=
atom -> True
9
|
atom -> True
9
<<=
atom -> True
9
^
atom -> True
9
%
atom -> True
9
*=
atom -> True
9
&=
atom -> True
9
@
atom -> True
9
**
atom -> True
9
(
atom -> True
9
not
atom -> True
9
NEWLINE
atom -> True
9
>>
atom -> True
9
<
atom -> True
9
^=
atom -> True
9
|=
atom -> True
9
==
atom -> True
9
and
atom -> True
9
=
atom -> True
9
in
atom -> True
9
&
atom -> True
9
.
atom -> True
9
%=
atom -> True
9
<<
atom -> True
9
**=
atom -> True
9
/=
atom -> True
9
/
atom -> True
9
//=
atom -> True
9
*
atom -> True
9
>
atom -> True
9
,
atom -> True
9
+
atom -> True
9
>=
atom -> True
9
@=
atom -> True
9
or
atom -> True
9
-
atom -> True
9
[
atom -> True
9
if
atom -> True
10
*
156
10
/
157
10
//
158
10
%
159
10
*=
term -> factor
10
|=
term -> factor
10
and
term -> factor
10
&=
term -> factor
10
@
160
10
==
term -> factor
10
>=
term -> factor
10
+
term -> factor
10
<<=
term -> factor
10
/=
term -> factor
10
<=
term -> factor
10
or
term -> factor
10
<<
term -> factor
10
not
term -> factor
10
,
term -> factor
10
<
term -> factor
10
-
term -> factor
10
=
term -> factor
10
in
term -> factor
10
+=
term -> factor
10
!=
term -> factor
10
%=
term -> factor
10
is
term -> factor
10
>>
term -> factor
10
:
term -> factor
10
NEWLINE
term -> factor
10
^
term -> factor
10
|
term -> factor
10
@=
term -> factor
10
**=
term -> factor
10
>
term -> factor
10
>>=
term -> factor
10
//=
term -> factor
10
^=
term -> factor
10
-=
term -> factor
10
if
term -> factor
10
&
term -> factor
11
NAME
161
12
if
and_expr -> shift_expr
12
&
162
12
/=
and_expr -> shift_expr
12
in
and_expr -> shift_expr
12
//=
and_expr -> shift_expr
12
|
and_expr -> shift_expr
12
is
and_expr -> shift_expr
12
>=
and_expr -> shift_expr
12
<
and_expr -> shift_expr
12
!=
and_expr -> shift_expr
12
and
and_expr -> shift_expr
12
&=
and_expr -> shift_expr
12
not
and_expr -> shift_expr
12
or
and_expr -> shift_expr
12
^=
and_expr -> shift_expr
12
,
and_expr -> shift_expr
12
+=
and_expr -> shift_expr
12
=
and_expr -> shift_expr
12
NEWLINE
and_expr -> shift_expr
12
:
and_expr -> shift_expr
12
%=
and_expr -> shift_expr
12
==
and_expr -> shift_expr
12
@=
and_expr -> shift_expr
12
<=
and_expr -> shift_expr
12
^
and_expr -> shift_expr
12
|=
and_expr -> shift_expr
12
>>=
and_expr -> shift_expr
12
-=
and_expr -> shift_expr
12
*=
and_expr -> shift_expr
12
**=
and_expr -> shift_expr
12
<<=
and_expr -> shift_expr
12
>
and_expr -> shift_expr
13
[
163
13
(
164
13
trailer_expr
165
13
.
166
13
trailer
167
13
%=
trailer_expr -> 
13
@
trailer_expr -> 
13
!=
trailer_expr -> 
13
<
trailer_expr -> 
13
NEWLINE
trailer_expr -> 
13
<<=
trailer_expr -> 
13
^=
trailer_expr -> 
13
&
trailer_expr -> 
13
>=
trailer_expr -> 
13
or
trailer_expr -> 
13
in
trailer_expr -> 
13
=
trailer_expr -> 
13
+=
trailer_expr -> 
13
not
trailer_expr -> 
13
>
trailer_expr -> 
13
>>=
trailer_expr -> 
13
:
trailer_expr -> 
13
-=
trailer_expr -> 
13
//=
trailer_expr -> 
13
,
trailer_expr -> 
13
|
trailer_expr -> 
13
**=
trailer_expr -> 
13
&=
trailer_expr -> 
13
<<
trailer_expr -> 
13
|=
trailer_expr -> 
13
*=
trailer_expr -> 
13
-
trailer_expr -> 
13
^
trailer_expr -> 
13
@=
trailer_expr -> 
13
/
trailer_expr -> 
13
is
trailer_expr -> 
13
==
trailer_expr -> 
13
*
trailer_expr -> 
13
**
trailer_expr -> 
13
<=
trailer_expr -> 
13
+
trailer_expr -> 
13
//
trailer_expr -> 
13
%
trailer_expr -> 
13
/=
trailer_expr -> 
13
if
trailer_expr -> 
13
>>
trailer_expr -> 
13
and
trailer_expr -> 
14
:
expr -> xor_expr
14
|
168
14
not
expr -> xor_expr
14
=
expr -> xor_expr
14
/=
expr -> xor_expr
14
^=
expr -> xor_expr
14
<<=
expr -> xor_expr
14
in
expr -> xor_expr
14
==
expr -> xor_expr
14
if
expr -> xor_expr
14
>
expr -> xor_expr
14
&=
expr -> xor_expr
14
%=
expr -> xor_expr
14
@=
expr -> xor_expr
14
//=
expr -> xor_expr
14
or
expr -> xor_expr
14
|=
expr -> xor_expr
14
-=
expr -> xor_expr
14
**=
expr -> xor_expr
14
NEWLINE
expr -> xor_expr
14
<=
expr -> xor_expr
14
<
expr -> xor_expr
14
is
expr -> xor_expr
14
+=
expr -> xor_expr
14
>=
expr -> xor_expr
14
!=
expr -> xor_expr
14
,
expr -> xor_expr
14
*=
expr -> xor_expr
14
and
expr -> xor_expr
14
>>=
expr -> xor_expr
15
+
169
15
if
arith_expr -> term
15
<
arith_expr -> term
15
^
arith_expr -> term
15
<=
arith_expr -> term
15
is
arith_expr -> term
15
+=
arith_expr -> term
15
-
170
15
or
arith_expr -> term
15
%=
arith_expr -> term
15
|=
arith_expr -> term
15
>=
arith_expr -> term
15
<<
arith_expr -> term
15
not
arith_expr -> term
15
//=
arith_expr -> term
15
,
arith_expr -> term
15
-=
arith_expr -> term
15
^=
arith_expr -> term
15
/=
arith_expr -> term
15
*=
arith_expr -> term
15
&
arith_expr -> term
15
>>=
arith_expr -> term
15
@=
arith_expr -> term
15
in
arith_expr -> term
15
|
arith_expr -> term
15
**=
arith_expr -> term
15
>
arith_expr -> term
15
<<=
arith_expr -> term
15
:
arith_expr -> term
15
NEWLINE
arith_expr -> term
15
=
arith_expr -> term
15
==
arith_expr -> term
15
>>
arith_expr -> term
15
and
arith_expr -> term
15
&=
arith_expr -> term
15
!=
arith_expr -> term
16
atom_expr
79
16
and_expr
80
16
term
81
16
factor
82
16
shift_expr
83
16
arith_expr
84
16
NUMBER
85
16
NAME
86
16
test
171
16
[
87
16
{
88
16
expr
89
16
False
90
16
xor_expr
91
16
STRING
92
16
+
93
16
True
94
16
(
95
16
None
96
16
-
97
16
atom
98
16
power
99
16
~
100
16
lambda
101
16
not_test
102
16
not
103
16
comparison
104
16
and_test
105
16
lambdef
106
16
or_test
107
17
:
172
18
atom_expr
173
18
and_expr
174
18
term
175
18
factor
176
18
shift_expr
177
18
arith_expr
178
18
NUMBER
179
18
or_test
180
18
NAME
181
18
[
182
18
{
183
18
expr
184
18
not_test
185
18
False
186
18
xor_expr
187
18
STRING
188
18
atom
189
18
+
190
18
True
191
18
(
192
18
with_item
193
18
-
194
18
None
195
18
with_items
196
18
test
197
18
and_test
198
18
power
199
18
~
200
18
lambda
201
18
not
202
18
comparison
203
18
lambdef
204
19
assert
compound_stmt -> decorated
19
class
compound_stmt -> decorated
19
def
compound_stmt -> decorated
19
try
compound_stmt -> decorated
19
(
compound_stmt -> decorated
19
pass
compound_stmt -> decorated
19
STRING
compound_stmt -> decorated
19
with
compound_stmt -> decorated
19
{
compound_stmt -> decorated
19
if
compound_stmt -> decorated
19
while
compound_stmt -> decorated
19
None
compound_stmt -> decorated
19
@
compound_stmt -> decorated
19
nonlocal
compound_stmt -> decorated
19
NUMBER
compound_stmt -> decorated
19
continue
compound_stmt -> decorated
19
-
compound_stmt -> decorated
19
NEWLINE
compound_stmt -> decorated
19
return
compound_stmt -> decorated
19
NAME
compound_stmt -> decorated
19
for
compound_stmt -> decorated
19
lambda
compound_stmt -> decorated
19
False
compound_stmt -> decorated
19
~
compound_stmt -> decorated
19
global
compound_stmt -> decorated
19
raise
compound_stmt -> decorated
19
[
compound_stmt -> decorated
19
True
compound_stmt -> decorated
19
yield
compound_stmt -> decorated
19
del
compound_stmt -> decorated
19
+
compound_stmt -> decorated
19
break
compound_stmt -> decorated
19
not
compound_stmt -> decorated
19
$
compound_stmt -> decorated
20
NEWLINE
or_test -> and_test
20
or
205
20
**=
or_test -> and_test
20
&=
or_test -> and_test
20
,
or_test -> and_test
20
@=
or_test -> and_test
20
+=
or_test -> and_test
20
//=
or_test -> and_test
20
*=
or_test -> and_test
20
^=
or_test -> and_test
20
<<=
or_test -> and_test
20
|=
or_test -> and_test
20
:
or_test -> and_test
20
-=
or_test -> and_test
20
/=
or_test -> and_test
20
%=
or_test -> and_test
20
>>=
or_test -> and_test
20
=
or_test -> and_test
20
if
or_test -> and_test
21
,
xor_expr -> and_expr
21
>>=
xor_expr -> and_expr
21
^
206
21
|=
xor_expr -> and_expr
21
&=
xor_expr -> and_expr
21
not
xor_expr -> and_expr
21
-=
xor_expr -> and_expr
21
=
xor_expr -> and_expr
21
+=
xor_expr -> and_expr
21
//=
xor_expr -> and_expr
21
>=
xor_expr -> and_expr
21
:
xor_expr -> and_expr
21
and
xor_expr -> and_expr
21
%=
xor_expr -> and_expr
21
@=
xor_expr -> and_expr
21
^=
xor_expr -> and_expr
21
/=
xor_expr -> and_expr
21
is
xor_expr -> and_expr
21
or
xor_expr -> and_expr
21
|
xor_expr -> and_expr
21
in
xor_expr -> and_expr
21
*=
xor_expr -> and_expr
21
<
xor_expr -> and_expr
21
if
xor_expr -> and_expr
21
>
xor_expr -> and_expr
21
==
xor_expr -> and_expr
21
!=
xor_expr -> and_expr
21
<=
xor_expr -> and_expr
21
NEWLINE
xor_expr -> and_expr
21
<<=
xor_expr -> and_expr
21
**=
xor_expr -> and_expr
22
not
compound_stmt -> for_stmt
22
{
compound_stmt -> for_stmt
22
break
compound_stmt -> for_stmt
22
None
compound_stmt -> for_stmt
22
nonlocal
compound_stmt -> for_stmt
22
global
compound_stmt -> for_stmt
22
class
compound_stmt -> for_stmt
22
~
compound_stmt -> for_stmt
22
False
compound_stmt -> for_stmt
22
+
compound_stmt -> for_stmt
22
def
compound_stmt -> for_stmt
22
NUMBER
compound_stmt -> for_stmt
22
(
compound_stmt -> for_stmt
22
assert
compound_stmt -> for_stmt
22
if
compound_stmt -> for_stmt
22
yield
compound_stmt -> for_stmt
22
with
compound_stmt -> for_stmt
22
@
compound_stmt -> for_stmt
22
del
compound_stmt -> for_stmt
22
$
compound_stmt -> for_stmt
22
pass
compound_stmt -> for_stmt
22
True
compound_stmt -> for_stmt
22
raise
compound_stmt -> for_stmt
22
return
compound_stmt -> for_stmt
22
continue
compound_stmt -> for_stmt
22
NAME
compound_stmt -> for_stmt
22
try
compound_stmt -> for_stmt
22
for
compound_stmt -> for_stmt
22
NEWLINE
compound_stmt -> for_stmt
22
-
compound_stmt -> for_stmt
22
while
compound_stmt -> for_stmt
22
lambda
compound_stmt -> for_stmt
22
[
compound_stmt -> for_stmt
22
STRING
compound_stmt -> for_stmt
23
//=
atom -> False
23
%=
atom -> False
23
*=
atom -> False
23
<<=
atom -> False
23
@
atom -> False
23
*
atom -> False
23
^=
atom -> False
23
<
atom -> False
23
|=
atom -> False
23
or
atom -> False
23
**=
atom -> False
23
is
atom -> False
23
>>
atom -> False
23
[
atom -> False
23
/
atom -> False
23
-=
atom -> False
23
%
atom -> False
23
+=
atom -> False
23
.
atom -> False
23
(
atom -> False
23
in
atom -> False
23
&=
atom -> False
23
/=
atom -> False
23
**
atom -> False
23
==
atom -> False
23
//
atom -> False
23
:
atom -> False
23
+
atom -> False
23
,
atom -> False
23
=
atom -> False
23
NEWLINE
atom -> False
23
<<
atom -> False
23
!=
atom -> False
23
<=
atom -> False
23
>
atom -> False
23
@=
atom -> False
23
^
atom -> False
23
>>=
atom -> False
23
if
atom -> False
23
&
atom -> False
23
and
atom -> False
23
|
atom -> False
23
-
atom -> False
23
not
atom -> False
23
>=
atom -> False
24
NAME
207
25
@=
test -> or_test
25
if
208
25
+=
test -> or_test
25
%=
test -> or_test
25
^=
test -> or_test
25
//=
test -> or_test
25
**=
test -> or_test
25
<<=
test -> or_test
25
&=
test -> or_test
25
>>=
test -> or_test
25
=
test -> or_test
25
:
test -> or_test
25
*=
test -> or_test
25
,
test -> or_test
25
NEWLINE
test -> or_test
25
/=
test -> or_test
25
|=
test -> or_test
25
-=
test -> or_test
26
yield
compound_stmt -> with_stmt
26
with
compound_stmt -> with_stmt
26
while
compound_stmt -> with_stmt
26
pass
compound_stmt -> with_stmt
26
NEWLINE
compound_stmt -> with_stmt
26
try
compound_stmt -> with_stmt
26
NAME
compound_stmt -> with_stmt
26
global
compound_stmt -> with_stmt
26
break
compound_stmt -> with_stmt
26
return
compound_stmt -> with_stmt
26
$
compound_stmt -> with_stmt
26
lambda
compound_stmt -> with_stmt
26
True
compound_stmt -> with_stmt
26
def
compound_stmt -> with_stmt
26
{
compound_stmt -> with_stmt
26
+
compound_stmt -> with_stmt
26
continue
compound_stmt -> with_stmt
26
del
compound_stmt -> with_stmt
26
[
compound_stmt -> with_stmt
26
STRING
compound_stmt -> with_stmt
26
assert
compound_stmt -> with_stmt
26
NUMBER
compound_stmt -> with_stmt
26
None
compound_stmt -> with_stmt
26
nonlocal
compound_stmt -> with_stmt
26
(
compound_stmt -> with_stmt
26
not
compound_stmt -> with_stmt
26
@
compound_stmt -> with_stmt
26
if
compound_stmt -> with_stmt
26
for
compound_stmt -> with_stmt
26
raise
compound_stmt -> with_stmt
26
~
compound_stmt -> with_stmt
26
class
compound_stmt -> with_stmt
26
-
compound_stmt -> with_stmt
26
False
compound_stmt -> with_stmt
27
$
compound_stmt -> funcdef
27
assert
compound_stmt -> funcdef
27
{
compound_stmt -> funcdef
27
if
compound_stmt -> funcdef
27
None
compound_stmt -> funcdef
27
class
compound_stmt -> funcdef
27
-
compound_stmt -> funcdef
27
not
compound_stmt -> funcdef
27
while
compound_stmt -> funcdef
27
~
compound_stmt -> funcdef
27
[
compound_stmt -> funcdef
27
del
compound_stmt -> funcdef
27
NUMBER
compound_stmt -> funcdef
27
NAME
compound_stmt -> funcdef
27
True
compound_stmt -> funcdef
27
NEWLINE
compound_stmt -> funcdef
27
global
compound_stmt -> funcdef
27
with
compound_stmt -> funcdef
27
def
compound_stmt -> funcdef
27
lambda
compound_stmt -> funcdef
27
@
compound_stmt -> funcdef
27
break
compound_stmt -> funcdef
27
nonlocal
compound_stmt -> funcdef
27
False
compound_stmt -> funcdef
27
+
compound_stmt -> funcdef
27
for
compound_stmt -> funcdef
27
pass
compound_stmt -> funcdef
27
try
compound_stmt -> funcdef
27
return
compound_stmt -> funcdef
27
continue
compound_stmt -> funcdef
27
yield
compound_stmt -> funcdef
27
(
compound_stmt -> funcdef
27
STRING
compound_stmt -> funcdef
27
raise
compound_stmt -> funcdef
28
varargslist
209
28
:
210
28
NAME
211
28
vfpdef
212
29
!=
atom -> None
29
>>=
atom -> None
29
|=
atom -> None
29
//
atom -> None
29
^
atom -> None
29
>=
atom -> None
29
&
atom -> None
29
**
atom -> None
29
NEWLINE
atom -> None
29
=
atom -> None
29
//=
atom -> None
29
,
atom -> None
29
<
atom -> None
29
*
atom -> None
29
if
atom -> None
29
>
atom -> None
29
^=
atom -> None
29
@
atom -> None
29
|
atom -> None
29
**=
atom -> None
29
-
atom -> None
29
%
atom -> None
29
&=
atom -> None
29
-=
atom -> None
29
<<
atom -> None
29
:
atom -> None
29
not
atom -> None
29
==
atom -> None
29
in
atom -> None
29
/
atom -> None
29
@=
atom -> None
29
or
atom -> None
29
*=
atom -> None
29
and
atom -> None
29
+=
atom -> None
29
+
atom -> None
29
(
atom -> None
29
<<=
atom -> None
29
>>
atom -> None
29
is
atom -> None
29
[
atom -> None
29
<=
atom -> None
29
%=
atom -> None
29
/=
atom -> None
29
.
atom -> None
30
atom_expr
6
30
[
3
30
STRING
43
30
NUMBER
8
30
NAME
37
30
{
5
30
False
23
30
True
9
30
atom
13
30
+
30
30
factor
213
30
(
34
30
None
29
30
-
36
30
power
47
30
~
44
31
@
compound_stmt -> if_stmt
31
None
compound_stmt -> if_stmt
31
return
compound_stmt -> if_stmt
31
global
compound_stmt -> if_stmt
31
STRING
compound_stmt -> if_stmt
31
if
compound_stmt -> if_stmt
31
for
compound_stmt -> if_stmt
31
~
compound_stmt -> if_stmt
31
[
compound_stmt -> if_stmt
31
nonlocal
compound_stmt -> if_stmt
31
-
compound_stmt -> if_stmt
31
continue
compound_stmt -> if_stmt
31
NUMBER
compound_stmt -> if_stmt
31
not
compound_stmt -> if_stmt
31
+
compound_stmt -> if_stmt
31
NEWLINE
compound_stmt -> if_stmt
31
False
compound_stmt -> if_stmt
31
while
compound_stmt -> if_stmt
31
{
compound_stmt -> if_stmt
31
assert
compound_stmt -> if_stmt
31
break
compound_stmt -> if_stmt
31
True
compound_stmt -> if_stmt
31
yield
compound_stmt -> if_stmt
31
with
compound_stmt -> if_stmt
31
def
compound_stmt -> if_stmt
31
try
compound_stmt -> if_stmt
31
(
compound_stmt -> if_stmt
31
raise
compound_stmt -> if_stmt
31
$
compound_stmt -> if_stmt
31
pass
compound_stmt -> if_stmt
31
NAME
compound_stmt -> if_stmt
31
del
compound_stmt -> if_stmt
31
lambda
compound_stmt -> if_stmt
31
class
compound_stmt -> if_stmt
32
>>
214
32
<<
215
32
&=
shift_expr -> arith_expr
32
and
shift_expr -> arith_expr
32
,
shift_expr -> arith_expr
32
in
shift_expr -> arith_expr
32
+=
shift_expr -> arith_expr
32
if
shift_expr -> arith_expr
32
//=
shift_expr -> arith_expr
32
>>=
shift_expr -> arith_expr
32
<=
shift_expr -> arith_expr
32
==
shift_expr -> arith_expr
32
^
shift_expr -> arith_expr
32
>
shift_expr -> arith_expr
32
<
shift_expr -> arith_expr
32
**=
shift_expr -> arith_expr
32
=
shift_expr -> arith_expr
32
|=
shift_expr -> arith_expr
32
or
shift_expr -> arith_expr
32
*=
shift_expr -> arith_expr
32
<<=
shift_expr -> arith_expr
32
%=
shift_expr -> arith_expr
32
-=
shift_expr -> arith_expr
32
!=
shift_expr -> arith_expr
32
|
shift_expr -> arith_expr
32
/=
shift_expr -> arith_expr
32
is
shift_expr -> arith_expr
32
@=
shift_expr -> arith_expr
32
:
shift_expr -> arith_expr
32
NEWLINE
shift_expr -> arith_expr
32
&
shift_expr -> arith_expr
32
not
shift_expr -> arith_expr
32
^=
shift_expr -> arith_expr
32
>=
shift_expr -> arith_expr
33
=
test_list -> test
33
+=
test_list -> test
33
-=
test_list -> test
33
,
216
33
NEWLINE
test_list -> test
33
<<=
test_list -> test
33
**=
test_list -> test
33
@=
test_list -> test
33
*=
test_list -> test
33
%=
test_list -> test
33
&=
test_list -> test
33
|=
test_list -> test
33
//=
test_list -> test
33
:
test_list -> test
33
/=
test_list -> test
33
>>=
test_list -> test
33
^=
test_list -> test
34
and_test
217
34
atom_expr
218
34
and_expr
219
34
term
220
34
factor
221
34
shift_expr
222
34
arith_expr
223
34
NUMBER
224
34
NAME
225
34
not
226
34
[
227
34
{
228
34
expr
229
34
test_list_comp
230
34
not_test
231
34
False
232
34
)
233
34
xor_expr
234
34
STRING
235
34
lambda
236
34
atom
237
34
+
238
34
True
239
34
-
240
34
(
241
34
None
242
34
comparison
243
34
power
244
34
~
245
34
or_test
246
34
test
247
34
lambdef
248
34
test_list
249
35
$
stmt -> compound_stmt
35
NEWLINE
stmt -> compound_stmt
35
del
stmt -> compound_stmt
35
STRING
stmt -> compound_stmt
35
+
stmt -> compound_stmt
35
nonlocal
stmt -> compound_stmt
35
yield
stmt -> compound_stmt
35
-
stmt -> compound_stmt
35
True
stmt -> compound_stmt
35
pass
stmt -> compound_stmt
35
raise
stmt -> compound_stmt
35
[
stmt -> compound_stmt
35
class
stmt -> compound_stmt
35
@
stmt -> compound_stmt
35
None
stmt -> compound_stmt
35
NAME
stmt -> compound_stmt
35
NUMBER
stmt -> compound_stmt
35
lambda
stmt -> compound_stmt
35
~
stmt -> compound_stmt
35
def
stmt -> compound_stmt
35
for
stmt -> compound_stmt
35
{
stmt -> compound_stmt
35
not
stmt -> compound_stmt
35
if
stmt -> compound_stmt
35
return
stmt -> compound_stmt
35
(
stmt -> compound_stmt
35
False
stmt -> compound_stmt
35
with
stmt -> compound_stmt
35
assert
stmt -> compound_stmt
35
break
stmt -> compound_stmt
35
continue
stmt -> compound_stmt
35
global
stmt -> compound_stmt
35
try
stmt -> compound_stmt
35
while
stmt -> compound_stmt
36
atom_expr
6
36
[
3
36
STRING
43
36
NUMBER
8
36
NAME
37
36
{
5
36
factor
250
36
False
23
36
True
9
36
atom
13
36
+
30
36
(
34
36
None
29
36
-
36
36
power
47
36
~
44
37
//=
atom -> NAME
37
or
atom -> NAME
37
>>=
atom -> NAME
37
in
atom -> NAME
37
^
atom -> NAME
37
[
atom -> NAME
37
==
atom -> NAME
37
<<
atom -> NAME
37
**
atom -> NAME
37
,
atom -> NAME
37
NEWLINE
atom -> NAME
37
*=
atom -> NAME
37
&=
atom -> NAME
37
!=
atom -> NAME
37
%
atom -> NAME
37
@
atom -> NAME
37
not
atom -> NAME
37
>
atom -> NAME
37
<<=
atom -> NAME
37
>=
atom -> NAME
37
&
atom -> NAME
37
+=
atom -> NAME
37
*
atom -> NAME
37
<
atom -> NAME
37
**=
atom -> NAME
37
-
atom -> NAME
37
(
atom -> NAME
37
>>
atom -> NAME
37
+
atom -> NAME
37
|=
atom -> NAME
37
%=
atom -> NAME
37
=
atom -> NAME
37
//
atom -> NAME
37
/=
atom -> NAME
37
and
atom -> NAME
37
@=
atom -> NAME
37
<=
atom -> NAME
37
is
atom -> NAME
37
if
atom -> NAME
37
/
atom -> NAME
37
-=
atom -> NAME
37
.
atom -> NAME
37
:
atom -> NAME
37
|
atom -> NAME
37
^=
atom -> NAME
38
True
compound_stmt -> try_stmt
38
if
compound_stmt -> try_stmt
38
with
compound_stmt -> try_stmt
38
nonlocal
compound_stmt -> try_stmt
38
STRING
compound_stmt -> try_stmt
38
return
compound_stmt -> try_stmt
38
$
compound_stmt -> try_stmt
38
class
compound_stmt -> try_stmt
38
raise
compound_stmt -> try_stmt
38
[
compound_stmt -> try_stmt
38
not
compound_stmt -> try_stmt
38
None
compound_stmt -> try_stmt
38
{
compound_stmt -> try_stmt
38
del
compound_stmt -> try_stmt
38
break
compound_stmt -> try_stmt
38
for
compound_stmt -> try_stmt
38
NAME
compound_stmt -> try_stmt
38
def
compound_stmt -> try_stmt
38
pass
compound_stmt -> try_stmt
38
lambda
compound_stmt -> try_stmt
38
while
compound_stmt -> try_stmt
38
-
compound_stmt -> try_stmt
38
False
compound_stmt -> try_stmt
38
continue
compound_stmt -> try_stmt
38
@
compound_stmt -> try_stmt
38
assert
compound_stmt -> try_stmt
38
try
compound_stmt -> try_stmt
38
+
compound_stmt -> try_stmt
38
NEWLINE
compound_stmt -> try_stmt
38
NUMBER
compound_stmt -> try_stmt
38
global
compound_stmt -> try_stmt
38
(
compound_stmt -> try_stmt
38
yield
compound_stmt -> try_stmt
38
~
compound_stmt -> try_stmt
39
return
compound_stmt -> while_stmt
39
{
compound_stmt -> while_stmt
39
~
compound_stmt -> while_stmt
39
False
compound_stmt -> while_stmt
39
global
compound_stmt -> while_stmt
39
None
compound_stmt -> while_stmt
39
True
compound_stmt -> while_stmt
39
pass
compound_stmt -> while_stmt
39
class
compound_stmt -> while_stmt
39
$
compound_stmt -> while_stmt
39
break
compound_stmt -> while_stmt
39
NAME
compound_stmt -> while_stmt
39
NUMBER
compound_stmt -> while_stmt
39
del
compound_stmt -> while_stmt
39
while
compound_stmt -> while_stmt
39
for
compound_stmt -> while_stmt
39
-
compound_stmt -> while_stmt
39
assert
compound_stmt -> while_stmt
39
yield
compound_stmt -> while_stmt
39
if
compound_stmt -> while_stmt
39
continue
compound_stmt -> while_stmt
39
with
compound_stmt -> while_stmt
39
[
compound_stmt -> while_stmt
39
nonlocal
compound_stmt -> while_stmt
39
try
compound_stmt -> while_stmt
39
NEWLINE
compound_stmt -> while_stmt
39
not
compound_stmt -> while_stmt
39
STRING
compound_stmt -> while_stmt
39
+
compound_stmt -> while_stmt
39
def
compound_stmt -> while_stmt
39
raise
compound_stmt -> while_stmt
39
@
compound_stmt -> while_stmt
39
lambda
compound_stmt -> while_stmt
39
(
compound_stmt -> while_stmt
40
-=
and_test -> not_test
40
and
251
40
**=
and_test -> not_test
40
^=
and_test -> not_test
40
or
and_test -> not_test
40
NEWLINE
and_test -> not_test
40
%=
and_test -> not_test
40
//=
and_test -> not_test
40
<<=
and_test -> not_test
40
+=
and_test -> not_test
40
,
and_test -> not_test
40
*=
and_test -> not_test
40
/=
and_test -> not_test
40
:
and_test -> not_test
40
|=
and_test -> not_test
40
@=
and_test -> not_test
40
=
and_test -> not_test
40
>>=
and_test -> not_test
40
&=
and_test -> not_test
40
if
and_test -> not_test
41
<<=
test -> lambdef
41
NEWLINE
test -> lambdef
41
=
test -> lambdef
41
+=
test -> lambdef
41
|=
test -> lambdef
41
/=
test -> lambdef
41
%=
test -> lambdef
41
**=
test -> lambdef
41
@=
test -> lambdef
41
:
test -> lambdef
41
^=
test -> lambdef
41
,
test -> lambdef
41
*=
test -> lambdef
41
&=
test -> lambdef
41
-=
test -> lambdef
41
//=
test -> lambdef
41
>>=
test -> lambdef
42
atom_expr
252
42
True
253
42
and_expr
254
42
(
255
42
NUMBER
256
42
expr_list
257
42
NAME
258
42
{
259
42
False
260
42
arith_expr
261
42
STRING
262
42
power
263
42
[
264
42
factor
265
42
~
266
42
atom
267
42
+
268
42
term
269
42
None
270
42
shift_expr
271
42
xor_expr
272
42
expr
273
42
-
274
43
<<=
atom -> STRING
43
@=
atom -> STRING
43
&
atom -> STRING
43
//=
atom -> STRING
43
>>=
atom -> STRING
43
**
atom -> STRING
43
%
atom -> STRING
43
+=
atom -> STRING
43
**=
atom -> STRING
43
|=
atom -> STRING
43
^=
atom -> STRING
43
NEWLINE
atom -> STRING
43
@
atom -> STRING
43
/
atom -> STRING
43
/=
atom -> STRING
43
*
atom -> STRING
43
^
atom -> STRING
43
if
atom -> STRING
43
<
atom -> STRING
43
:
atom -> STRING
43
&=
atom -> STRING
43
>>
atom -> STRING
43
*=
atom -> STRING
43
.
atom -> STRING
43
//
atom -> STRING
43
,
atom -> STRING
43
+
atom -> STRING
43
=
atom -> STRING
43
<<
atom -> STRING
43
and
atom -> STRING
43
[
atom -> STRING
43
or
atom -> STRING
43
in
atom -> STRING
43
not
atom -> STRING
43
>
atom -> STRING
43
(
atom -> STRING
43
!=
atom -> STRING
43
-=
atom -> STRING
43
<=
atom -> STRING
43
is
atom -> STRING
43
==
atom -> STRING
43
-
atom -> STRING
43
|
atom -> STRING
43
%=
atom -> STRING
43
>=
atom -> STRING
44
atom_expr
6
44
[
3
44
STRING
43
44
NUMBER
8
44
NAME
37
44
{
5
44
factor
275
44
False
23
44
True
9
44
atom
13
44
+
30
44
(
34
44
None
29
44
-
36
44
power
47
44
~
44
45
-
stmt -> simple_stmt
45
while
stmt -> simple_stmt
45
del
stmt -> simple_stmt
45
lambda
stmt -> simple_stmt
45
class
stmt -> simple_stmt
45
with
stmt -> simple_stmt
45
not
stmt -> simple_stmt
45
NEWLINE
stmt -> simple_stmt
45
break
stmt -> simple_stmt
45
(
stmt -> simple_stmt
45
True
stmt -> simple_stmt
45
NUMBER
stmt -> simple_stmt
45
NAME
stmt -> simple_stmt
45
def
stmt -> simple_stmt
45
yield
stmt -> simple_stmt
45
return
stmt -> simple_stmt
45
continue
stmt -> simple_stmt
45
pass
stmt -> simple_stmt
45
+
stmt -> simple_stmt
45
None
stmt -> simple_stmt
45
$
stmt -> simple_stmt
45
raise
stmt -> simple_stmt
45
try
stmt -> simple_stmt
45
assert
stmt -> simple_stmt
45
global
stmt -> simple_stmt
45
[
stmt -> simple_stmt
45
~
stmt -> simple_stmt
45
for
stmt -> simple_stmt
45
if
stmt -> simple_stmt
45
{
stmt -> simple_stmt
45
STRING
stmt -> simple_stmt
45
@
stmt -> simple_stmt
45
nonlocal
stmt -> simple_stmt
45
False
stmt -> simple_stmt
46
return
compound_stmt -> classdef
46
+
compound_stmt -> classdef
46
[
compound_stmt -> classdef
46
global
compound_stmt -> classdef
46
nonlocal
compound_stmt -> classdef
46
NEWLINE
compound_stmt -> classdef
46
pass
compound_stmt -> classdef
46
(
compound_stmt -> classdef
46
False
compound_stmt -> classdef
46
@
compound_stmt -> classdef
46
def
compound_stmt -> classdef
46
lambda
compound_stmt -> classdef
46
-
compound_stmt -> classdef
46
NUMBER
compound_stmt -> classdef
46
~
compound_stmt -> classdef
46
for
compound_stmt -> classdef
46
continue
compound_stmt -> classdef
46
not
compound_stmt -> classdef
46
break
compound_stmt -> classdef
46
assert
compound_stmt -> classdef
46
while
compound_stmt -> classdef
46
if
compound_stmt -> classdef
46
True
compound_stmt -> classdef
46
{
compound_stmt -> classdef
46
class
compound_stmt -> classdef
46
$
compound_stmt -> classdef
46
yield
compound_stmt -> classdef
46
del
compound_stmt -> classdef
46
None
compound_stmt -> classdef
46
raise
compound_stmt -> classdef
46
try
compound_stmt -> classdef
46
NAME
compound_stmt -> classdef
46
with
compound_stmt -> classdef
46
STRING
compound_stmt -> classdef
47
*
factor -> power
47
>>
factor -> power
47
>>=
factor -> power
47
/=
factor -> power
47
:
factor -> power
47
%=
factor -> power
47
<<=
factor -> power
47
>=
factor -> power
47
<
factor -> power
47
-=
factor -> power
47
&=
factor -> power
47
&
factor -> power
47
,
factor -> power
47
|
factor -> power
47
@
factor -> power
47
*=
factor -> power
47
!=
factor -> power
47
^=
factor -> power
47
<=
factor -> power
47
//
factor -> power
47
in
factor -> power
47
and
factor -> power
47
+
factor -> power
47
>
factor -> power
47
-
factor -> power
47
+=
factor -> power
47
not
factor -> power
47
==
factor -> power
47
is
factor -> power
47
**=
factor -> power
47
%
factor -> power
47
=
factor -> power
47
|=
factor -> power
47
^
factor -> power
47
NEWLINE
factor -> power
47
if
factor -> power
47
or
factor -> power
47
@=
factor -> power
47
<<
factor -> power
47
/
factor -> power
47
//=
factor -> power
48
if
not_test -> comparison
48
+=
not_test -> comparison
48
@=
not_test -> comparison
48
&=
not_test -> comparison
48
/=
not_test -> comparison
48
^=
not_test -> comparison
48
=
not_test -> comparison
48
-=
not_test -> comparison
48
,
not_test -> comparison
48
>>=
not_test -> comparison
48
//=
not_test -> comparison
48
and
not_test -> comparison
48
or
not_test -> comparison
48
*=
not_test -> comparison
48
:
not_test -> comparison
48
<<=
not_test -> comparison
48
%=
not_test -> comparison
48
|=
not_test -> comparison
48
**=
not_test -> comparison
48
NEWLINE
not_test -> comparison
49
NEWLINE
continue_stmt -> continue
50
NEWLINE
small_stmt -> expr_stmt
51
atom_expr
6
51
factor
10
51
[
3
51
term
15
51
STRING
43
51
arith_expr
32
51
NUMBER
8
51
NAME
37
51
{
5
51
expr
7
51
not
51
51
True
9
51
shift_expr
12
51
atom
13
51
xor_expr
14
51
(
34
51
None
29
51
and_expr
21
51
False
23
51
+
30
51
-
36
51
power
47
51
not_test
276
51
~
44
51
comparison
48
52
NEWLINE
small_stmt -> del_stmt
53
NEWLINE
flow_stmt -> yield_stmt
54
NAME
277
54
dotted_name
278
55
decorator
55
55
class
decorators -> decorator
55
decorators
279
55
@
54
55
def
decorators -> decorator
56
atom_expr
280
56
True
281
56
and_expr
282
56
(
283
56
NUMBER
284
56
NAME
285
56
{
286
56
power
287
56
[
288
56
factor
289
56
~
290
56
atom
291
56
+
292
56
term
293
56
arith_expr
294
56
None
295
56
shift_expr
296
56
STRING
297
56
False
298
56
-
299
56
xor_expr
300
56
expr_list
301
56
NEWLINE
yield_stmt -> yield
56
expr
302
57
NEWLINE
small_stmt -> assert_stmt
58
NEWLINE
flow_stmt -> break_stmt
59
atom_expr
280
59
True
281
59
and_expr
282
59
(
283
59
NUMBER
284
59
NAME
285
59
{
286
59
power
287
59
[
288
59
factor
289
59
~
290
59
atom
291
59
+
292
59
term
293
59
arith_expr
294
59
None
295
59
shift_expr
296
59
STRING
297
59
False
298
59
-
299
59
xor_expr
300
59
NEWLINE
return_stmt -> return
59
expr
302
59
expr_list
303
60
NEWLINE
pass_stmt -> pass
61
NEWLINE
flow_stmt -> continue_stmt
62
+=
304
62
@=
305
62
*=
306
62
/=
307
62
&=
308
62
<<=
309
62
//=
310
62
|=
311
62
%=
312
62
-=
313
62
>>=
314
62
**=
315
62
NEWLINE
assign -> 
62
^=
316
62
=
317
62
assign
318
62
augassign
319
62
annassign
320
62
:
321
63
NEWLINE
break_stmt -> break
64
atom_expr
280
64
True
281
64
and_expr
282
64
expr_list
322
64
(
283
64
NUMBER
284
64
NAME
285
64
{
286
64
power
287
64
[
288
64
factor
289
64
~
290
64
atom
291
64
+
292
64
term
293
64
arith_expr
294
64
None
295
64
shift_expr
296
64
STRING
297
64
False
298
64
-
299
64
xor_expr
300
64
expr
302
65
NEWLINE
small_stmt -> pass_stmt
66
NAME
323
66
namelist
324
67
atom_expr
325
67
and_expr
326
67
term
327
67
factor
328
67
shift_expr
329
67
arith_expr
330
67
NUMBER
331
67
NAME
332
67
[
333
67
{
334
67
expr
335
67
not_test
336
67
False
337
67
xor_expr
338
67
STRING
339
67
atom
340
67
+
341
67
True
342
67
-
343
67
test
344
67
(
345
67
None
346
67
lambda
347
67
or_test
348
67
and_test
349
67
power
350
67
~
351
67
lambdef
352
67
comparison
353
67
not
354
67
test_list
355
68
NEWLINE
small_stmt -> global_stmt
69
atom_expr
356
69
and_expr
357
69
term
358
69
factor
359
69
shift_expr
360
69
arith_expr
361
69
NUMBER
362
69
NAME
363
69
[
364
69
atom
365
69
{
366
69
expr
367
69
False
368
69
xor_expr
369
69
True
370
69
STRING
371
69
+
372
69
-
373
69
(
374
69
None
375
69
lambda
376
69
not_test
377
69
comparison
378
69
or_test
379
69
test
380
69
power
381
69
~
382
69
lambdef
383
69
and_test
384
69
NEWLINE
raise_stmt -> raise
69
not
385
70
NEWLINE
flow_stmt -> raise_stmt
71
NAME
323
71
namelist
386
72
NEWLINE
small_stmt -> nonlocal_stmt
73
while
1
73
decorators
2
73
[
3
73
small_stmt
4
73
{
5
73
atom_expr
6
73
expr
7
73
NUMBER
8
73
True
9
73
factor
10
73
class
11
73
shift_expr
12
73
atom
13
73
xor_expr
14
73
term
15
73
if
16
73
try
17
73
with
18
73
decorated
19
73
and_test
20
73
and_expr
21
73
for_stmt
22
73
False
23
73
def
24
73
or_test
25
73
with_stmt
26
73
funcdef
27
73
lambda
28
73
None
29
73
+
30
73
if_stmt
31
73
arith_expr
32
73
test
33
73
(
34
73
compound_stmt
35
73
-
36
73
NAME
37
73
try_stmt
38
73
while_stmt
39
73
not_test
40
73
lambdef
41
73
for
42
73
STRING
43
73
~
44
73
simple_stmt
45
73
classdef
46
73
power
47
73
comparison
48
73
continue
49
73
expr_stmt
50
73
not
51
73
$
program -> 
73
del_stmt
52
73
yield_stmt
53
73
@
54
73
decorator
55
73
yield
56
73
assert_stmt
57
73
break_stmt
58
73
return
59
73
pass
60
73
continue_stmt
61
73
test_list
62
73
break
63
73
del
64
73
pass_stmt
65
73
nonlocal
66
73
assert
67
73
global_stmt
68
73
raise
69
73
raise_stmt
70
73
global
71
73
program
387
73
nonlocal_stmt
72
73
stmt
73
73
return_stmt
75
73
flow_stmt
76
73
NEWLINE
77
74
$
OK
75
NEWLINE
flow_stmt -> return_stmt
76
NEWLINE
small_stmt -> flow_stmt
77
while
1
77
decorators
2
77
[
3
77
small_stmt
4
77
{
5
77
atom_expr
6
77
expr
7
77
NUMBER
8
77
True
9
77
factor
10
77
class
11
77
shift_expr
12
77
atom
13
77
xor_expr
14
77
term
15
77
if
16
77
try
17
77
with
18
77
decorated
19
77
and_test
20
77
and_expr
21
77
for_stmt
22
77
False
23
77
def
24
77
or_test
25
77
with_stmt
26
77
funcdef
27
77
lambda
28
77
None
29
77
+
30
77
if_stmt
31
77
arith_expr
32
77
test
33
77
(
34
77
compound_stmt
35
77
-
36
77
NAME
37
77
try_stmt
38
77
while_stmt
39
77
not_test
40
77
lambdef
41
77
for
42
77
STRING
43
77
~
44
77
simple_stmt
45
77
classdef
46
77
power
47
77
comparison
48
77
continue
49
77
expr_stmt
50
77
not
51
77
$
program -> 
77
del_stmt
52
77
yield_stmt
53
77
@
54
77
decorator
55
77
yield
56
77
assert_stmt
57
77
break_stmt
58
77
return
59
77
pass
60
77
continue_stmt
61
77
program
388
77
test_list
62
77
break
63
77
del
64
77
pass_stmt
65
77
nonlocal
66
77
assert
67
77
global_stmt
68
77
raise
69
77
raise_stmt
70
77
global
71
77
nonlocal_stmt
72
77
stmt
73
77
return_stmt
75
77
flow_stmt
76
77
NEWLINE
77
78
:
389
79
**
390
79
!=
power -> atom_expr
79
|
power -> atom_expr
79
:
power -> atom_expr
79
>
power -> atom_expr
79
/
power -> atom_expr
79
^
power -> atom_expr
79
&
power -> atom_expr
79
<
power -> atom_expr
79
not
power -> atom_expr
79
<=
power -> atom_expr
79
%
power -> atom_expr
79
and
power -> atom_expr
79
*
power -> atom_expr
79
@
power -> atom_expr
79
>>
power -> atom_expr
79
if
power -> atom_expr
79
+
power -> atom_expr
79
in
power -> atom_expr
79
is
power -> atom_expr
79
//
power -> atom_expr
79
or
power -> atom_expr
79
<<
power -> atom_expr
79
-
power -> atom_expr
79
==
power -> atom_expr
79
>=
power -> atom_expr
80
^
391
80
not
xor_expr -> and_expr
80
>=
xor_expr -> and_expr
80
:
xor_expr -> and_expr
80
and
xor_expr -> and_expr
80
is
xor_expr -> and_expr
80
or
xor_expr -> and_expr
80
|
xor_expr -> and_expr
80
in
xor_expr -> and_expr
80
==
xor_expr -> and_expr
80
>
xor_expr -> and_expr
80
<
xor_expr -> and_expr
80
if
xor_expr -> and_expr
80
<=
xor_expr -> and_expr
80
!=
xor_expr -> and_expr
81
+
392
81
in
arith_expr -> term
81
if
arith_expr -> term
81
|
arith_expr -> term
81
==
arith_expr -> term
81
<
arith_expr -> term
81
-
393
81
<=
arith_expr -> term
81
^
arith_expr -> term
81
is
arith_expr -> term
81
>>
arith_expr -> term
81
or
arith_expr -> term
81
&
arith_expr -> term
81
>
arith_expr -> term
81
>=
arith_expr -> term
81
<<
arith_expr -> term
81
and
arith_expr -> term
81
:
arith_expr -> term
81
not
arith_expr -> term
81
!=
arith_expr -> term
82
*
394
82
%
395
82
//
396
82
/
397
82
and
term -> factor
82
@
398
82
==
term -> factor
82
>=
term -> factor
82
+
term -> factor
82
<=
term -> factor
82
or
term -> factor
82
<<
term -> factor
82
not
term -> factor
82
<
term -> factor
82
-
term -> factor
82
in
term -> factor
82
!=
term -> factor
82
is
term -> factor
82
>>
term -> factor
82
:
term -> factor
82
^
term -> factor
82
|
term -> factor
82
>
term -> factor
82
if
term -> factor
82
&
term -> factor
83
if
and_expr -> shift_expr
83
&
399
83
in
and_expr -> shift_expr
83
is
and_expr -> shift_expr
83
|
and_expr -> shift_expr
83
>=
and_expr -> shift_expr
83
<
and_expr -> shift_expr
83
!=
and_expr -> shift_expr
83
and
and_expr -> shift_expr
83
not
and_expr -> shift_expr
83
or
and_expr -> shift_expr
83
:
and_expr -> shift_expr
83
==
and_expr -> shift_expr
83
<=
and_expr -> shift_expr
83
^
and_expr -> shift_expr
83
>
and_expr -> shift_expr
84
<<
400
84
>>
401
84
<
shift_expr -> arith_expr
84
>
shift_expr -> arith_expr
84
&
shift_expr -> arith_expr
84
and
shift_expr -> arith_expr
84
in
shift_expr -> arith_expr
84
!=
shift_expr -> arith_expr
84
|
shift_expr -> arith_expr
84
if
shift_expr -> arith_expr
84
not
shift_expr -> arith_expr
84
<=
shift_expr -> arith_expr
84
is
shift_expr -> arith_expr
84
==
shift_expr -> arith_expr
84
or
shift_expr -> arith_expr
84
:
shift_expr -> arith_expr
84
>=
shift_expr -> arith_expr
84
^
shift_expr -> arith_expr
85
==
atom -> NUMBER
85
<=
atom -> NUMBER
85
<<
atom -> NUMBER
85
/
atom -> NUMBER
85
^
atom -> NUMBER
85
if
atom -> NUMBER
85
.
atom -> NUMBER
85
or
atom -> NUMBER
85
**
atom -> NUMBER
85
+
atom -> NUMBER
85
%
atom -> NUMBER
85
-
atom -> NUMBER
85
&
atom -> NUMBER
85
@
atom -> NUMBER
85
*
atom -> NUMBER
85
>>
atom -> NUMBER
85
<
atom -> NUMBER
85
is
atom -> NUMBER
85
(
atom -> NUMBER
85
and
atom -> NUMBER
85
not
atom -> NUMBER
85
!=
atom -> NUMBER
85
|
atom -> NUMBER
85
in
atom -> NUMBER
85
>
atom -> NUMBER
85
:
atom -> NUMBER
85
>=
atom -> NUMBER
85
//
atom -> NUMBER
85
[
atom -> NUMBER
86
or
atom -> NAME
86
in
atom -> NAME
86
^
atom -> NAME
86
[
atom -> NAME
86
==
atom -> NAME
86
<<
atom -> NAME
86
**
atom -> NAME
86
!=
atom -> NAME
86
%
atom -> NAME
86
@
atom -> NAME
86
not
atom -> NAME
86
>
atom -> NAME
86
>=
atom -> NAME
86
*
atom -> NAME
86
&
atom -> NAME
86
<
atom -> NAME
86
-
atom -> NAME
86
(
atom -> NAME
86
>>
atom -> NAME
86
+
atom -> NAME
86
//
atom -> NAME
86
and
atom -> NAME
86
<=
atom -> NAME
86
is
atom -> NAME
86
if
atom -> NAME
86
/
atom -> NAME
86
.
atom -> NAME
86
:
atom -> NAME
86
|
atom -> NAME
87
and_test
110
87
atom_expr
111
87
and_expr
112
87
term
113
87
factor
114
87
shift_expr
115
87
arith_expr
116
87
NUMBER
117
87
NAME
118
87
[
119
87
test_list_comp
402
87
{
121
87
expr
122
87
not_test
123
87
False
124
87
xor_expr
125
87
atom
126
87
STRING
127
87
+
128
87
(
129
87
True
131
87
-
132
87
]
403
87
None
133
87
comparison
134
87
or_test
135
87
test
136
87
power
137
87
~
138
87
lambda
139
87
lambdef
140
87
not
141
87
test_list
142
88
}
404
89
in
147
89
<
148
89
>=
149
89
not
150
89
comp_op
405
89
!=
151
89
>
152
89
==
153
89
is
154
89
<=
155
89
or
comparison -> expr
89
and
comparison -> expr
89
:
comparison -> expr
89
if
comparison -> expr
90
*
atom -> False
90
@
atom -> False
90
<
atom -> False
90
or
atom -> False
90
is
atom -> False
90
>>
atom -> False
90
[
atom -> False
90
/
atom -> False
90
%
atom -> False
90
.
atom -> False
90
(
atom -> False
90
in
atom -> False
90
**
atom -> False
90
==
atom -> False
90
//
atom -> False
90
:
atom -> False
90
+
atom -> False
90
<<
atom -> False
90
!=
atom -> False
90
<=
atom -> False
90
>
atom -> False
90
^
atom -> False
90
if
atom -> False
90
&
atom -> False
90
and
atom -> False
90
|
atom -> False
90
-
atom -> False
90
not
atom -> False
90
>=
atom -> False
91
:
expr -> xor_expr
91
not
expr -> xor_expr
91
|
406
91
==
expr -> xor_expr
91
in
expr -> xor_expr
91
if
expr -> xor_expr
91
>
expr -> xor_expr
91
or
expr -> xor_expr
91
<=
expr -> xor_expr
91
<
expr -> xor_expr
91
is
expr -> xor_expr
91
>=
expr -> xor_expr
91
!=
expr -> xor_expr
91
and
expr -> xor_expr
92
&
atom -> STRING
92
**
atom -> STRING
92
%
atom -> STRING
92
@
atom -> STRING
92
/
atom -> STRING
92
*
atom -> STRING
92
^
atom -> STRING
92
>=
atom -> STRING
92
if
atom -> STRING
92
<
atom -> STRING
92
:
atom -> STRING
92
>>
atom -> STRING
92
.
atom -> STRING
92
//
atom -> STRING
92
+
atom -> STRING
92
<<
atom -> STRING
92
and
atom -> STRING
92
[
atom -> STRING
92
or
atom -> STRING
92
in
atom -> STRING
92
not
atom -> STRING
92
>
atom -> STRING
92
(
atom -> STRING
92
!=
atom -> STRING
92
is
atom -> STRING
92
==
atom -> STRING
92
-
atom -> STRING
92
|
atom -> STRING
92
<=
atom -> STRING
93
atom_expr
79
93
NUMBER
85
93
NAME
86
93
[
87
93
{
88
93
False
90
93
STRING
92
93
+
93
93
True
94
93
(
95
93
None
96
93
-
97
93
atom
98
93
factor
407
93
power
99
93
~
100
94
!=
atom -> True
94
:
atom -> True
94
is
atom -> True
94
|
atom -> True
94
<=
atom -> True
94
^
atom -> True
94
%
atom -> True
94
@
atom -> True
94
**
atom -> True
94
(
atom -> True
94
not
atom -> True
94
>>
atom -> True
94
<
atom -> True
94
==
atom -> True
94
and
atom -> True
94
in
atom -> True
94
&
atom -> True
94
.
atom -> True
94
<<
atom -> True
94
/
atom -> True
94
*
atom -> True
94
>
atom -> True
94
+
atom -> True
94
>=
atom -> True
94
or
atom -> True
94
[
atom -> True
94
-
atom -> True
94
//
atom -> True
94
if
atom -> True
95
and_test
217
95
atom_expr
218
95
and_expr
219
95
term
220
95
factor
221
95
shift_expr
222
95
arith_expr
223
95
NUMBER
224
95
NAME
225
95
not
226
95
[
227
95
{
228
95
expr
229
95
test_list_comp
408
95
not_test
231
95
False
232
95
xor_expr
234
95
STRING
235
95
lambda
236
95
atom
237
95
+
238
95
True
239
95
-
240
95
(
241
95
None
242
95
comparison
243
95
power
244
95
)
409
95
~
245
95
or_test
246
95
test
247
95
lambdef
248
95
test_list
249
96
!=
atom -> None
96
//
atom -> None
96
^
atom -> None
96
>=
atom -> None
96
&
atom -> None
96
**
atom -> None
96
<
atom -> None
96
if
atom -> None
96
*
atom -> None
96
>
atom -> None
96
@
atom -> None
96
|
atom -> None
96
-
atom -> None
96
%
atom -> None
96
:
atom -> None
96
not
atom -> None
96
==
atom -> None
96
in
atom -> None
96
/
atom -> None
96
or
atom -> None
96
and
atom -> None
96
+
atom -> None
96
(
atom -> None
96
>>
atom -> None
96
is
atom -> None
96
[
atom -> None
96
<=
atom -> None
96
<<
atom -> None
96
.
atom -> None
97
atom_expr
79
97
NUMBER
85
97
NAME
86
97
[
87
97
factor
410
97
{
88
97
False
90
97
STRING
92
97
+
93
97
True
94
97
(
95
97
None
96
97
-
97
97
atom
98
97
power
99
97
~
100
98
[
411
98
(
412
98
.
413
98
trailer
414
98
<<
trailer_expr -> 
98
trailer_expr
415
98
@
trailer_expr -> 
98
!=
trailer_expr -> 
98
-
trailer_expr -> 
98
^
trailer_expr -> 
98
<
trailer_expr -> 
98
/
trailer_expr -> 
98
is
trailer_expr -> 
98
==
trailer_expr -> 
98
&
trailer_expr -> 
98
>=
trailer_expr -> 
98
or
trailer_expr -> 
98
in
trailer_expr -> 
98
*
trailer_expr -> 
98
not
trailer_expr -> 
98
**
trailer_expr -> 
98
<=
trailer_expr -> 
98
+
trailer_expr -> 
98
//
trailer_expr -> 
98
%
trailer_expr -> 
98
>
trailer_expr -> 
98
:
trailer_expr -> 
98
|
trailer_expr -> 
98
if
trailer_expr -> 
98
>>
trailer_expr -> 
98
and
trailer_expr -> 
99
*
factor -> power
99
>>
factor -> power
99
>=
factor -> power
99
<
factor -> power
99
&
factor -> power
99
|
factor -> power
99
@
factor -> power
99
!=
factor -> power
99
<=
factor -> power
99
//
factor -> power
99
in
factor -> power
99
and
factor -> power
99
+
factor -> power
99
>
factor -> power
99
-
factor -> power
99
not
factor -> power
99
is
factor -> power
99
==
factor -> power
99
%
factor -> power
99
if
factor -> power
99
or
factor -> power
99
^
factor -> power
99
<<
factor -> power
99
/
factor -> power
99
:
factor -> power
100
atom_expr
79
100
NUMBER
85
100
NAME
86
100
[
87
100
factor
416
100
{
88
100
False
90
100
STRING
92
100
+
93
100
True
94
100
(
95
100
None
96
100
-
97
100
atom
98
100
power
99
100
~
100
101
varargslist
417
101
vfpdef
212
101
:
418
101
NAME
211
102
and
419
102
or
and_test -> not_test
102
:
and_test -> not_test
102
if
and_test -> not_test
103
atom_expr
79
103
and_expr
80
103
term
81
103
factor
82
103
shift_expr
83
103
arith_expr
84
103
NUMBER
85
103
NAME
86
103
[
87
103
{
88
103
expr
89
103
False
90
103
xor_expr
91
103
STRING
92
103
+
93
103
True
94
103
(
95
103
None
96
103
-
97
103
atom
98
103
power
99
103
~
100
103
not
103
103
comparison
104
103
not_test
420
104
if
not_test -> comparison
104
or
not_test -> comparison
104
and
not_test -> comparison
104
:
not_test -> comparison
105
if
or_test -> and_test
105
or
421
105
:
or_test -> and_test
106
:
test -> lambdef
107
if
422
107
:
test -> or_test
108
@
decorated -> decorators funcdef
108
raise
decorated -> decorators funcdef
108
del
decorated -> decorators funcdef
108
None
decorated -> decorators funcdef
108
try
decorated -> decorators funcdef
108
True
decorated -> decorators funcdef
108
(
decorated -> decorators funcdef
108
def
decorated -> decorators funcdef
108
with
decorated -> decorators funcdef
108
{
decorated -> decorators funcdef
108
for
decorated -> decorators funcdef
108
NUMBER
decorated -> decorators funcdef
108
$
decorated -> decorators funcdef
108
~
decorated -> decorators funcdef
108
assert
decorated -> decorators funcdef
108
STRING
decorated -> decorators funcdef
108
NAME
decorated -> decorators funcdef
108
break
decorated -> decorators funcdef
108
if
decorated -> decorators funcdef
108
NEWLINE
decorated -> decorators funcdef
108
not
decorated -> decorators funcdef
108
yield
decorated -> decorators funcdef
108
lambda
decorated -> decorators funcdef
108
class
decorated -> decorators funcdef
108
False
decorated -> decorators funcdef
108
-
decorated -> decorators funcdef
108
[
decorated -> decorators funcdef
108
+
decorated -> decorators funcdef
108
pass
decorated -> decorators funcdef
108
while
decorated -> decorators funcdef
108
continue
decorated -> decorators funcdef
108
return
decorated -> decorators funcdef
108
nonlocal
decorated -> decorators funcdef
108
global
decorated -> decorators funcdef
109
with
decorated -> decorators classdef
109
[
decorated -> decorators classdef
109
break
decorated -> decorators classdef
109
nonlocal
decorated -> decorators classdef
109
for
decorated -> decorators classdef
109
NUMBER
decorated -> decorators classdef
109
continue
decorated -> decorators classdef
109
STRING
decorated -> decorators classdef
109
return
decorated -> decorators classdef
109
try
decorated -> decorators classdef
109
raise
decorated -> decorators classdef
109
NAME
decorated -> decorators classdef
109
class
decorated -> decorators classdef
109
pass
decorated -> decorators classdef
109
def
decorated -> decorators classdef
109
if
decorated -> decorators classdef
109
not
decorated -> decorators classdef
109
global
decorated -> decorators classdef
109
-
decorated -> decorators classdef
109
True
decorated -> decorators classdef
109
$
decorated -> decorators classdef
109
NEWLINE
decorated -> decorators classdef
109
(
decorated -> decorators classdef
109
False
decorated -> decorators classdef
109
yield
decorated -> decorators classdef
109
del
decorated -> decorators classdef
109
assert
decorated -> decorators classdef
109
lambda
decorated -> decorators classdef
109
~
decorated -> decorators classdef
109
@
decorated -> decorators classdef
109
+
decorated -> decorators classdef
109
None
decorated -> decorators classdef
109
{
decorated -> decorators classdef
109
while
decorated -> decorators classdef
110
or
423
110
]
or_test -> and_test
110
if
or_test -> and_test
110
,
or_test -> and_test
110
for
or_test -> and_test
111
**
424
111
!=
power -> atom_expr
111
|
power -> atom_expr
111
>
power -> atom_expr
111
/
power -> atom_expr
111
^
power -> atom_expr
111
&
power -> atom_expr
111
<
power -> atom_expr
111
not
power -> atom_expr
111
]
power -> atom_expr
111
<=
power -> atom_expr
111
%
power -> atom_expr
111
and
power -> atom_expr
111
*
power -> atom_expr
111
@
power -> atom_expr
111
>>
power -> atom_expr
111
if
power -> atom_expr
111
+
power -> atom_expr
111
,
power -> atom_expr
111
in
power -> atom_expr
111
for
power -> atom_expr
111
is
power -> atom_expr
111
//
power -> atom_expr
111
or
power -> atom_expr
111
<<
power -> atom_expr
111
-
power -> atom_expr
111
==
power -> atom_expr
111
>=
power -> atom_expr
112
,
xor_expr -> and_expr
112
^
425
112
not
xor_expr -> and_expr
112
]
xor_expr -> and_expr
112
>=
xor_expr -> and_expr
112
for
xor_expr -> and_expr
112
and
xor_expr -> and_expr
112
is
xor_expr -> and_expr
112
or
xor_expr -> and_expr
112
|
xor_expr -> and_expr
112
in
xor_expr -> and_expr
112
==
xor_expr -> and_expr
112
>
xor_expr -> and_expr
112
<
xor_expr -> and_expr
112
if
xor_expr -> and_expr
112
<=
xor_expr -> and_expr
112
!=
xor_expr -> and_expr
113
+
426
113
in
arith_expr -> term
113
if
arith_expr -> term
113
|
arith_expr -> term
113
-
427
113
<
arith_expr -> term
113
==
arith_expr -> term
113
<=
arith_expr -> term
113
^
arith_expr -> term
113
is
arith_expr -> term
113
>>
arith_expr -> term
113
for
arith_expr -> term
113
]
arith_expr -> term
113
or
arith_expr -> term
113
&
arith_expr -> term
113
>
arith_expr -> term
113
>=
arith_expr -> term
113
<<
arith_expr -> term
113
and
arith_expr -> term
113
not
arith_expr -> term
113
,
arith_expr -> term
113
!=
arith_expr -> term
114
*
428
114
%
429
114
//
430
114
/
431
114
and
term -> factor
114
==
term -> factor
114
@
432
114
>=
term -> factor
114
+
term -> factor
114
<=
term -> factor
114
or
term -> factor
114
<<
term -> factor
114
not
term -> factor
114
,
term -> factor
114
<
term -> factor
114
-
term -> factor
114
in
term -> factor
114
for
term -> factor
114
!=
term -> factor
114
is
term -> factor
114
>>
term -> factor
114
^
term -> factor
114
|
term -> factor
114
>
term -> factor
114
]
term -> factor
114
if
term -> factor
114
&
term -> factor
115
if
and_expr -> shift_expr
115
&
433
115
in
and_expr -> shift_expr
115
is
and_expr -> shift_expr
115
|
and_expr -> shift_expr
115
>=
and_expr -> shift_expr
115
<
and_expr -> shift_expr
115
!=
and_expr -> shift_expr
115
and
and_expr -> shift_expr
115
]
and_expr -> shift_expr
115
not
and_expr -> shift_expr
115
or
and_expr -> shift_expr
115
,
and_expr -> shift_expr
115
==
and_expr -> shift_expr
115
<=
and_expr -> shift_expr
115
^
and_expr -> shift_expr
115
for
and_expr -> shift_expr
115
>
and_expr -> shift_expr
116
<<
434
116
>>
435
116
<
shift_expr -> arith_expr
116
>
shift_expr -> arith_expr
116
for
shift_expr -> arith_expr
116
&
shift_expr -> arith_expr
116
and
shift_expr -> arith_expr
116
,
shift_expr -> arith_expr
116
in
shift_expr -> arith_expr
116
!=
shift_expr -> arith_expr
116
|
shift_expr -> arith_expr
116
if
shift_expr -> arith_expr
116
not
shift_expr -> arith_expr
116
<=
shift_expr -> arith_expr
116
is
shift_expr -> arith_expr
116
==
shift_expr -> arith_expr
116
or
shift_expr -> arith_expr
116
]
shift_expr -> arith_expr
116
>=
shift_expr -> arith_expr
116
^
shift_expr -> arith_expr
117
==
atom -> NUMBER
117
<=
atom -> NUMBER
117
<<
atom -> NUMBER
117
/
atom -> NUMBER
117
^
atom -> NUMBER
117
if
atom -> NUMBER
117
]
atom -> NUMBER
117
.
atom -> NUMBER
117
or
atom -> NUMBER
117
**
atom -> NUMBER
117
for
atom -> NUMBER
117
+
atom -> NUMBER
117
%
atom -> NUMBER
117
-
atom -> NUMBER
117
&
atom -> NUMBER
117
@
atom -> NUMBER
117
*
atom -> NUMBER
117
>>
atom -> NUMBER
117
<
atom -> NUMBER
117
is
atom -> NUMBER
117
(
atom -> NUMBER
117
and
atom -> NUMBER
117
not
atom -> NUMBER
117
!=
atom -> NUMBER
117
|
atom -> NUMBER
117
in
atom -> NUMBER
117
>
atom -> NUMBER
117
>=
atom -> NUMBER
117
//
atom -> NUMBER
117
,
atom -> NUMBER
117
[
atom -> NUMBER
118
or
atom -> NAME
118
in
atom -> NAME
118
^
atom -> NAME
118
[
atom -> NAME
118
==
atom -> NAME
118
for
atom -> NAME
118
<<
atom -> NAME
118
**
atom -> NAME
118
,
atom -> NAME
118
!=
atom -> NAME
118
%
atom -> NAME
118
@
atom -> NAME
118
not
atom -> NAME
118
>
atom -> NAME
118
>=
atom -> NAME
118
&
atom -> NAME
118
*
atom -> NAME
118
<
atom -> NAME
118
-
atom -> NAME
118
(
atom -> NAME
118
>>
atom -> NAME
118
+
atom -> NAME
118
]
atom -> NAME
118
//
atom -> NAME
118
and
atom -> NAME
118
<=
atom -> NAME
118
is
atom -> NAME
118
if
atom -> NAME
118
/
atom -> NAME
118
.
atom -> NAME
118
|
atom -> NAME
119
and_test
110
119
atom_expr
111
119
and_expr
112
119
term
113
119
factor
114
119
shift_expr
115
119
arith_expr
116
119
NUMBER
117
119
NAME
118
119
[
119
119
test_list_comp
436
119
{
121
119
expr
122
119
not_test
123
119
False
124
119
xor_expr
125
119
atom
126
119
STRING
127
119
]
437
119
+
128
119
(
129
119
True
131
119
-
132
119
None
133
119
comparison
134
119
or_test
135
119
test
136
119
power
137
119
~
138
119
lambda
139
119
lambdef
140
119
not
141
119
test_list
142
120
]
438
121
}
439
122
in
147
122
<
148
122
>=
149
122
not
150
122
comp_op
440
122
!=
151
122
>
152
122
==
153
122
is
154
122
<=
155
122
]
comparison -> expr
122
or
comparison -> expr
122
,
comparison -> expr
122
and
comparison -> expr
122
for
comparison -> expr
122
if
comparison -> expr
123
and
441
123
,
and_test -> not_test
123
]
and_test -> not_test
123
or
and_test -> not_test
123
if
and_test -> not_test
123
for
and_test -> not_test
124
*
atom -> False
124
@
atom -> False
124
<
atom -> False
124
or
atom -> False
124
is
atom -> False
124
>>
atom -> False
124
[
atom -> False
124
/
atom -> False
124
%
atom -> False
124
.
atom -> False
124
(
atom -> False
124
in
atom -> False
124
**
atom -> False
124
==
atom -> False
124
//
atom -> False
124
+
atom -> False
124
,
atom -> False
124
<<
atom -> False
124
!=
atom -> False
124
<=
atom -> False
124
>
atom -> False
124
^
atom -> False
124
]
atom -> False
124
if
atom -> False
124
&
atom -> False
124
and
atom -> False
124
for
atom -> False
124
|
atom -> False
124
-
atom -> False
124
not
atom -> False
124
>=
atom -> False
125
for
expr -> xor_expr
125
not
expr -> xor_expr
125
|
442
125
==
expr -> xor_expr
125
in
expr -> xor_expr
125
if
expr -> xor_expr
125
>
expr -> xor_expr
125
or
expr -> xor_expr
125
]
expr -> xor_expr
125
<=
expr -> xor_expr
125
<
expr -> xor_expr
125
is
expr -> xor_expr
125
>=
expr -> xor_expr
125
!=
expr -> xor_expr
125
,
expr -> xor_expr
125
and
expr -> xor_expr
126
[
443
126
(
444
126
.
445
126
trailer
446
126
<<
trailer_expr -> 
126
trailer_expr
447
126
@
trailer_expr -> 
126
!=
trailer_expr -> 
126
-
trailer_expr -> 
126
]
trailer_expr -> 
126
^
trailer_expr -> 
126
<
trailer_expr -> 
126
for
trailer_expr -> 
126
/
trailer_expr -> 
126
is
trailer_expr -> 
126
==
trailer_expr -> 
126
&
trailer_expr -> 
126
>=
trailer_expr -> 
126
or
trailer_expr -> 
126
in
trailer_expr -> 
126
*
trailer_expr -> 
126
not
trailer_expr -> 
126
**
trailer_expr -> 
126
<=
trailer_expr -> 
126
+
trailer_expr -> 
126
//
trailer_expr -> 
126
%
trailer_expr -> 
126
>
trailer_expr -> 
126
,
trailer_expr -> 
126
|
trailer_expr -> 
126
if
trailer_expr -> 
126
>>
trailer_expr -> 
126
and
trailer_expr -> 
127
&
atom -> STRING
127
**
atom -> STRING
127
%
atom -> STRING
127
]
atom -> STRING
127
@
atom -> STRING
127
/
atom -> STRING
127
*
atom -> STRING
127
^
atom -> STRING
127
>=
atom -> STRING
127
if
atom -> STRING
127
<
atom -> STRING
127
>>
atom -> STRING
127
.
atom -> STRING
127
for
atom -> STRING
127
//
atom -> STRING
127
,
atom -> STRING
127
+
atom -> STRING
127
<<
atom -> STRING
127
and
atom -> STRING
127
[
atom -> STRING
127
or
atom -> STRING
127
in
atom -> STRING
127
not
atom -> STRING
127
>
atom -> STRING
127
(
atom -> STRING
127
!=
atom -> STRING
127
is
atom -> STRING
127
==
atom -> STRING
127
-
atom -> STRING
127
|
atom -> STRING
127
<=
atom -> STRING
128
atom_expr
111
128
NUMBER
117
128
NAME
118
128
[
119
128
{
121
128
False
124
128
atom
126
128
STRING
127
128
+
128
128
(
129
128
True
131
128
-
132
128
None
133
128
factor
448
128
power
137
128
~
138
129
and_test
217
129
atom_expr
218
129
and_expr
219
129
term
220
129
factor
221
129
shift_expr
222
129
arith_expr
223
129
NUMBER
224
129
NAME
225
129
not
226
129
[
227
129
{
228
129
expr
229
129
test_list_comp
449
129
not_test
231
129
False
232
129
xor_expr
234
129
STRING
235
129
lambda
236
129
atom
237
129
+
238
129
True
239
129
-
240
129
(
241
129
None
242
129
comparison
243
129
power
244
129
)
450
129
~
245
129
or_test
246
129
test
247
129
lambdef
248
129
test_list
249
130
|=
atom -> [ ]
130
>>=
atom -> [ ]
130
in
atom -> [ ]
130
>=
atom -> [ ]
130
%
atom -> [ ]
130
+=
atom -> [ ]
130
:
atom -> [ ]
130
is
atom -> [ ]
130
^
atom -> [ ]
130
//
atom -> [ ]
130
NEWLINE
atom -> [ ]
130
-=
atom -> [ ]
130
or
atom -> [ ]
130
<<=
atom -> [ ]
130
not
atom -> [ ]
130
**=
atom -> [ ]
130
[
atom -> [ ]
130
and
atom -> [ ]
130
/
atom -> [ ]
130
!=
atom -> [ ]
130
/=
atom -> [ ]
130
^=
atom -> [ ]
130
@=
atom -> [ ]
130
>
atom -> [ ]
130
=
atom -> [ ]
130
//=
atom -> [ ]
130
&
atom -> [ ]
130
**
atom -> [ ]
130
@
atom -> [ ]
130
==
atom -> [ ]
130
<<
atom -> [ ]
130
if
atom -> [ ]
130
%=
atom -> [ ]
130
<
atom -> [ ]
130
,
atom -> [ ]
130
(
atom -> [ ]
130
<=
atom -> [ ]
130
*
atom -> [ ]
130
.
atom -> [ ]
130
*=
atom -> [ ]
130
>>
atom -> [ ]
130
|
atom -> [ ]
130
&=
atom -> [ ]
130
-
atom -> [ ]
130
+
atom -> [ ]
131
!=
atom -> True
131
is
atom -> True
131
|
atom -> True
131
<=
atom -> True
131
^
atom -> True
131
%
atom -> True
131
@
atom -> True
131
**
atom -> True
131
(
atom -> True
131
not
atom -> True
131
>>
atom -> True
131
<
atom -> True
131
==
atom -> True
131
and
atom -> True
131
in
atom -> True
131
&
atom -> True
131
.
atom -> True
131
<<
atom -> True
131
/
atom -> True
131
*
atom -> True
131
>
atom -> True
131
,
atom -> True
131
+
atom -> True
131
>=
atom -> True
131
or
atom -> True
131
[
atom -> True
131
-
atom -> True
131
for
atom -> True
131
]
atom -> True
131
//
atom -> True
131
if
atom -> True
132
atom_expr
111
132
NUMBER
117
132
NAME
118
132
[
119
132
factor
451
132
{
121
132
False
124
132
atom
126
132
STRING
127
132
+
128
132
(
129
132
True
131
132
-
132
132
None
133
132
power
137
132
~
138
133
!=
atom -> None
133
//
atom -> None
133
^
atom -> None
133
>=
atom -> None
133
&
atom -> None
133
**
atom -> None
133
,
atom -> None
133
<
atom -> None
133
if
atom -> None
133
*
atom -> None
133
>
atom -> None
133
@
atom -> None
133
|
atom -> None
133
-
atom -> None
133
%
atom -> None
133
not
atom -> None
133
==
atom -> None
133
in
atom -> None
133
/
atom -> None
133
or
atom -> None
133
]
atom -> None
133
and
atom -> None
133
+
atom -> None
133
(
atom -> None
133
>>
atom -> None
133
is
atom -> None
133
for
atom -> None
133
[
atom -> None
133
<=
atom -> None
133
<<
atom -> None
133
.
atom -> None
134
for
not_test -> comparison
134
or
not_test -> comparison
134
if
not_test -> comparison
134
,
not_test -> comparison
134
]
not_test -> comparison
134
and
not_test -> comparison
135
]
test -> or_test
135
if
452
135
for
test -> or_test
135
,
test -> or_test
136
]
test_list -> test
136
,
453
136
comp_for
454
136
for
455
137
*
factor -> power
137
>>
factor -> power
137
>=
factor -> power
137
<
factor -> power
137
&
factor -> power
137
for
factor -> power
137
]
factor -> power
137
,
factor -> power
137
@
factor -> power
137
|
factor -> power
137
!=
factor -> power
137
<=
factor -> power
137
//
factor -> power
137
in
factor -> power
137
and
factor -> power
137
+
factor -> power
137
>
factor -> power
137
-
factor -> power
137
not
factor -> power
137
is
factor -> power
137
==
factor -> power
137
%
factor -> power
137
if
factor -> power
137
or
factor -> power
137
^
factor -> power
137
<<
factor -> power
137
/
factor -> power
138
atom_expr
111
138
NUMBER
117
138
NAME
118
138
[
119
138
factor
456
138
{
121
138
False
124
138
atom
126
138
STRING
127
138
+
128
138
(
129
138
True
131
138
-
132
138
None
133
138
power
137
138
~
138
139
:
457
139
varargslist
458
139
vfpdef
212
139
NAME
211
140
for
test -> lambdef
140
,
test -> lambdef
140
]
test -> lambdef
141
atom_expr
111
141
and_expr
112
141
term
113
141
factor
114
141
shift_expr
115
141
arith_expr
116
141
NUMBER
117
141
NAME
118
141
[
119
141
{
121
141
expr
122
141
False
124
141
xor_expr
125
141
atom
126
141
STRING
127
141
+
128
141
(
129
141
True
131
141
-
132
141
None
133
141
comparison
134
141
power
137
141
~
138
141
not_test
459
141
not
141
142
]
test_list_comp -> test_list
143
lambda
simple_stmt -> small_stmt NEWLINE
143
yield
simple_stmt -> small_stmt NEWLINE
143
NEWLINE
simple_stmt -> small_stmt NEWLINE
143
NAME
simple_stmt -> small_stmt NEWLINE
143
STRING
simple_stmt -> small_stmt NEWLINE
143
pass
simple_stmt -> small_stmt NEWLINE
143
None
simple_stmt -> small_stmt NEWLINE
143
(
simple_stmt -> small_stmt NEWLINE
143
assert
simple_stmt -> small_stmt NEWLINE
143
@
simple_stmt -> small_stmt NEWLINE
143
def
simple_stmt -> small_stmt NEWLINE
143
if
simple_stmt -> small_stmt NEWLINE
143
+
simple_stmt -> small_stmt NEWLINE
143
continue
simple_stmt -> small_stmt NEWLINE
143
not
simple_stmt -> small_stmt NEWLINE
143
try
simple_stmt -> small_stmt NEWLINE
143
False
simple_stmt -> small_stmt NEWLINE
143
with
simple_stmt -> small_stmt NEWLINE
143
global
simple_stmt -> small_stmt NEWLINE
143
return
simple_stmt -> small_stmt NEWLINE
143
raise
simple_stmt -> small_stmt NEWLINE
143
True
simple_stmt -> small_stmt NEWLINE
143
-
simple_stmt -> small_stmt NEWLINE
143
del
simple_stmt -> small_stmt NEWLINE
143
NUMBER
simple_stmt -> small_stmt NEWLINE
143
{
simple_stmt -> small_stmt NEWLINE
143
for
simple_stmt -> small_stmt NEWLINE
143
class
simple_stmt -> small_stmt NEWLINE
143
break
simple_stmt -> small_stmt NEWLINE
143
[
simple_stmt -> small_stmt NEWLINE
143
nonlocal
simple_stmt -> small_stmt NEWLINE
143
while
simple_stmt -> small_stmt NEWLINE
143
$
simple_stmt -> small_stmt NEWLINE
143
~
simple_stmt -> small_stmt NEWLINE
144
<<
atom -> { }
144
+=
atom -> { }
144
//
atom -> { }
144
is
atom -> { }
144
<<=
atom -> { }
144
+
atom -> { }
144
>=
atom -> { }
144
@=
atom -> { }
144
|=
atom -> { }
144
<=
atom -> { }
144
>
atom -> { }
144
*
atom -> { }
144
/=
atom -> { }
144
^
atom -> { }
144
%
atom -> { }
144
>>
atom -> { }
144
:
atom -> { }
144
%=
atom -> { }
144
.
atom -> { }
144
not
atom -> { }
144
==
atom -> { }
144
if
atom -> { }
144
in
atom -> { }
144
<
atom -> { }
144
|
atom -> { }
144
&=
atom -> { }
144
(
atom -> { }
144
**=
atom -> { }
144
/
atom -> { }
144
>>=
atom -> { }
144
*=
atom -> { }
144
and
atom -> { }
144
**
atom -> { }
144
@
atom -> { }
144
=
atom -> { }
144
-
atom -> { }
144
-=
atom -> { }
144
^=
atom -> { }
144
&
atom -> { }
144
NEWLINE
atom -> { }
144
,
atom -> { }
144
!=
atom -> { }
144
or
atom -> { }
144
[
atom -> { }
144
//=
atom -> { }
145
atom_expr
6
145
[
3
145
STRING
43
145
NUMBER
8
145
NAME
37
145
{
5
145
False
23
145
True
9
145
atom
13
145
+
30
145
(
34
145
None
29
145
-
36
145
factor
460
145
power
47
145
~
44
146
atom_expr
6
146
factor
10
146
[
3
146
term
15
146
STRING
43
146
arith_expr
32
146
NUMBER
8
146
NAME
37
146
{
5
146
expr
7
146
True
9
146
comparison
461
146
shift_expr
12
146
atom
13
146
xor_expr
14
146
(
34
146
None
29
146
and_expr
21
146
False
23
146
+
30
146
-
36
146
power
47
146
~
44
147
+
comp_op -> in
147
NUMBER
comp_op -> in
147
True
comp_op -> in
147
-
comp_op -> in
147
{
comp_op -> in
147
None
comp_op -> in
147
~
comp_op -> in
147
STRING
comp_op -> in
147
[
comp_op -> in
147
NAME
comp_op -> in
147
False
comp_op -> in
147
(
comp_op -> in
148
-
comp_op -> <
148
[
comp_op -> <
148
NAME
comp_op -> <
148
False
comp_op -> <
148
STRING
comp_op -> <
148
(
comp_op -> <
148
~
comp_op -> <
148
+
comp_op -> <
148
NUMBER
comp_op -> <
148
None
comp_op -> <
148
{
comp_op -> <
148
True
comp_op -> <
149
~
comp_op -> >=
149
NAME
comp_op -> >=
149
NUMBER
comp_op -> >=
149
-
comp_op -> >=
149
True
comp_op -> >=
149
STRING
comp_op -> >=
149
{
comp_op -> >=
149
False
comp_op -> >=
149
+
comp_op -> >=
149
None
comp_op -> >=
149
(
comp_op -> >=
149
[
comp_op -> >=
150
in
462
151
-
comp_op -> !=
151
NAME
comp_op -> !=
151
(
comp_op -> !=
151
True
comp_op -> !=
151
[
comp_op -> !=
151
None
comp_op -> !=
151
~
comp_op -> !=
151
NUMBER
comp_op -> !=
151
{
comp_op -> !=
151
+
comp_op -> !=
151
STRING
comp_op -> !=
151
False
comp_op -> !=
152
~
comp_op -> >
152
[
comp_op -> >
152
None
comp_op -> >
152
STRING
comp_op -> >
152
NAME
comp_op -> >
152
-
comp_op -> >
152
NUMBER
comp_op -> >
152
+
comp_op -> >
152
False
comp_op -> >
152
(
comp_op -> >
152
{
comp_op -> >
152
True
comp_op -> >
153
+
comp_op -> ==
153
[
comp_op -> ==
153
False
comp_op -> ==
153
NAME
comp_op -> ==
153
{
comp_op -> ==
153
NUMBER
comp_op -> ==
153
~
comp_op -> ==
153
STRING
comp_op -> ==
153
(
comp_op -> ==
153
-
comp_op -> ==
153
None
comp_op -> ==
153
True
comp_op -> ==
154
not
463
154
NAME
comp_op -> is
154
-
comp_op -> is
154
STRING
comp_op -> is
154
(
comp_op -> is
154
~
comp_op -> is
154
True
comp_op -> is
154
None
comp_op -> is
154
False
comp_op -> is
154
NUMBER
comp_op -> is
154
[
comp_op -> is
154
+
comp_op -> is
154
{
comp_op -> is
155
{
comp_op -> <=
155
STRING
comp_op -> <=
155
[
comp_op -> <=
155
NAME
comp_op -> <=
155
None
comp_op -> <=
155
False
comp_op -> <=
155
-
comp_op -> <=
155
~
comp_op -> <=
155
(
comp_op -> <=
155
NUMBER
comp_op -> <=
155
+
comp_op -> <=
155
True
comp_op -> <=
156
atom_expr
6
156
factor
10
156
[
3
156
STRING
43
156
NUMBER
8
156
NAME
37
156
{
5
156
True
9
156
atom
13
156
term
464
156
(
34
156
None
29
156
False
23
156
+
30
156
-
36
156
power
47
156
~
44
157
atom_expr
6
157
factor
10
157
[
3
157
STRING
43
157
NUMBER
8
157
NAME
37
157
{
5
157
True
9
157
atom
13
157
(
34
157
None
29
157
False
23
157
+
30
157
term
465
157
-
36
157
power
47
157
~
44
158
atom_expr
6
158
factor
10
158
[
3
158
STRING
43
158
NUMBER
8
158
NAME
37
158
{
5
158
True
9
158
atom
13
158
term
466
158
(
34
158
None
29
158
False
23
158
+
30
158
-
36
158
power
47
158
~
44
159
atom_expr
6
159
factor
10
159
term
467
159
[
3
159
STRING
43
159
NUMBER
8
159
NAME
37
159
{
5
159
True
9
159
atom
13
159
(
34
159
None
29
159
False
23
159
+
30
159
-
36
159
power
47
159
~
44
160
atom_expr
6
160
factor
10
160
[
3
160
STRING
43
160
NUMBER
8
160
NAME
37
160
{
5
160
True
9
160
atom
13
160
(
34
160
None
29
160
False
23
160
+
30
160
-
36
160
power
47
160
~
44
160
term
468
161
:
469
161
(
470
162
atom_expr
6
162
factor
10
162
[
3
162
term
15
162
STRING
43
162
arith_expr
32
162
NUMBER
8
162
NAME
37
162
{
5
162
True
9
162
and_expr
471
162
shift_expr
12
162
atom
13
162
(
34
162
None
29
162
False
23
162
+
30
162
-
36
162
power
47
162
~
44
163
atom_expr
472
163
and_expr
473
163
term
474
163
factor
475
163
shift_expr
476
163
arith_expr
477
163
NUMBER
478
163
NAME
479
163
[
480
163
{
481
163
expr
482
163
not_test
483
163
False
484
163
xor_expr
485
163
subscriptlist
486
163
atom
487
163
STRING
488
163
+
489
163
(
490
163
True
491
163
-
492
163
None
493
163
or_test
494
163
and_test
495
163
power
496
163
~
497
163
lambda
498
163
:
maybe_test -> 
163
maybe_test
499
163
test
500
163
not
501
163
comparison
502
163
lambdef
503
163
subscript
504
164
and_test
505
164
atom_expr
506
164
and_expr
507
164
term
508
164
factor
509
164
shift_expr
510
164
arith_expr
511
164
NUMBER
512
164
NAME
513
164
not
514
164
[
515
164
{
516
164
expr
517
164
)
518
164
not_test
519
164
False
520
164
xor_expr
521
164
STRING
522
164
lambda
523
164
arglist
524
164
atom
525
164
+
526
164
True
527
164
-
528
164
or_test
529
164
(
530
164
None
531
164
comparison
532
164
power
533
164
test
534
164
~
535
164
*
536
164
lambdef
537
164
**
538
164
argument
539
165
==
atom_expr -> atom trailer_expr
165
%
atom_expr -> atom trailer_expr
165
+
atom_expr -> atom trailer_expr
165
>>=
atom_expr -> atom trailer_expr
165
:
atom_expr -> atom trailer_expr
165
-=
atom_expr -> atom trailer_expr
165
not
atom_expr -> atom trailer_expr
165
or
atom_expr -> atom trailer_expr
165
//
atom_expr -> atom trailer_expr
165
*=
atom_expr -> atom trailer_expr
165
and
atom_expr -> atom trailer_expr
165
!=
atom_expr -> atom trailer_expr
165
<<
atom_expr -> atom trailer_expr
165
NEWLINE
atom_expr -> atom trailer_expr
165
^=
atom_expr -> atom trailer_expr
165
if
atom_expr -> atom trailer_expr
165
-
atom_expr -> atom trailer_expr
165
=
atom_expr -> atom trailer_expr
165
/=
atom_expr -> atom trailer_expr
165
>>
atom_expr -> atom trailer_expr
165
|=
atom_expr -> atom trailer_expr
165
**
atom_expr -> atom trailer_expr
165
@=
atom_expr -> atom trailer_expr
165
%=
atom_expr -> atom trailer_expr
165
/
atom_expr -> atom trailer_expr
165
<
atom_expr -> atom trailer_expr
165
in
atom_expr -> atom trailer_expr
165
&
atom_expr -> atom trailer_expr
165
is
atom_expr -> atom trailer_expr
165
|
atom_expr -> atom trailer_expr
165
>
atom_expr -> atom trailer_expr
165
&=
atom_expr -> atom trailer_expr
165
>=
atom_expr -> atom trailer_expr
165
<=
atom_expr -> atom trailer_expr
165
@
atom_expr -> atom trailer_expr
165
*
atom_expr -> atom trailer_expr
165
+=
atom_expr -> atom trailer_expr
165
,
atom_expr -> atom trailer_expr
165
**=
atom_expr -> atom trailer_expr
165
<<=
atom_expr -> atom trailer_expr
165
//=
atom_expr -> atom trailer_expr
165
^
atom_expr -> atom trailer_expr
166
NAME
540
167
[
163
167
(
164
167
.
166
167
trailer
167
167
%=
trailer_expr -> 
167
trailer_expr
541
167
@
trailer_expr -> 
167
!=
trailer_expr -> 
167
<
trailer_expr -> 
167
NEWLINE
trailer_expr -> 
167
<<=
trailer_expr -> 
167
^=
trailer_expr -> 
167
&
trailer_expr -> 
167
>=
trailer_expr -> 
167
or
trailer_expr -> 
167
in
trailer_expr -> 
167
=
trailer_expr -> 
167
+=
trailer_expr -> 
167
not
trailer_expr -> 
167
>
trailer_expr -> 
167
>>=
trailer_expr -> 
167
:
trailer_expr -> 
167
-=
trailer_expr -> 
167
//=
trailer_expr -> 
167
,
trailer_expr -> 
167
|
trailer_expr -> 
167
**=
trailer_expr -> 
167
&=
trailer_expr -> 
167
<<
trailer_expr -> 
167
|=
trailer_expr -> 
167
*=
trailer_expr -> 
167
-
trailer_expr -> 
167
^
trailer_expr -> 
167
@=
trailer_expr -> 
167
/
trailer_expr -> 
167
is
trailer_expr -> 
167
==
trailer_expr -> 
167
*
trailer_expr -> 
167
**
trailer_expr -> 
167
<=
trailer_expr -> 
167
+
trailer_expr -> 
167
//
trailer_expr -> 
167
%
trailer_expr -> 
167
/=
trailer_expr -> 
167
if
trailer_expr -> 
167
and
trailer_expr -> 
167
>>
trailer_expr -> 
168
atom_expr
6
168
factor
10
168
[
3
168
term
15
168
STRING
43
168
arith_expr
32
168
NUMBER
8
168
NAME
37
168
{
5
168
True
9
168
shift_expr
12
168
atom
13
168
xor_expr
14
168
(
34
168
None
29
168
and_expr
21
168
False
23
168
+
30
168
expr
542
168
-
36
168
power
47
168
~
44
169
atom_expr
6
169
factor
10
169
[
3
169
term
15
169
STRING
43
169
NUMBER
8
169
NAME
37
169
{
5
169
False
23
169
True
9
169
atom
13
169
+
30
169
(
34
169
None
29
169
-
36
169
arith_expr
543
169
power
47
169
~
44
170
atom_expr
6
170
factor
10
170
[
3
170
term
15
170
STRING
43
170
NUMBER
8
170
NAME
37
170
{
5
170
False
23
170
True
9
170
atom
13
170
+
30
170
(
34
170
None
29
170
-
36
170
arith_expr
544
170
power
47
170
~
44
171
:
545
172
atom_expr
6
172
factor
10
172
[
3
172
term
15
172
STRING
43
172
arith_expr
32
172
NUMBER
8
172
NAME
37
172
{
5
172
expr
7
172
not
51
172
True
9
172
shift_expr
12
172
atom
13
172
xor_expr
14
172
(
34
172
None
29
172
and_test
20
172
and_expr
21
172
False
23
172
suite
546
172
or_test
25
172
test
33
172
lambda
28
172
+
30
172
nonlocal
66
172
-
36
172
not_test
40
172
power
47
172
lambdef
41
172
~
44
172
comparison
48
172
assert
67
172
simple_stmt
547
172
global_stmt
68
172
continue
49
172
expr_stmt
50
172
test_list
62
172
raise
69
172
del_stmt
52
172
yield_stmt
53
172
NEWLINE
548
172
raise_stmt
70
172
yield
56
172
assert_stmt
57
172
global
71
172
nonlocal_stmt
72
172
small_stmt
549
172
break_stmt
58
172
return_stmt
75
172
return
59
172
pass
60
172
continue_stmt
61
172
flow_stmt
76
172
break
63
172
del
64
172
pass_stmt
65
173
**
550
173
!=
power -> atom_expr
173
|
power -> atom_expr
173
:
power -> atom_expr
173
as
power -> atom_expr
173
>
power -> atom_expr
173
/
power -> atom_expr
173
^
power -> atom_expr
173
&
power -> atom_expr
173
<
power -> atom_expr
173
not
power -> atom_expr
173
<=
power -> atom_expr
173
%
power -> atom_expr
173
and
power -> atom_expr
173
*
power -> atom_expr
173
@
power -> atom_expr
173
>>
power -> atom_expr
173
if
power -> atom_expr
173
+
power -> atom_expr
173
,
power -> atom_expr
173
in
power -> atom_expr
173
is
power -> atom_expr
173
//
power -> atom_expr
173
or
power -> atom_expr
173
<<
power -> atom_expr
173
-
power -> atom_expr
173
==
power -> atom_expr
173
>=
power -> atom_expr
174
as
xor_expr -> and_expr
174
,
xor_expr -> and_expr
174
^
551
174
not
xor_expr -> and_expr
174
>=
xor_expr -> and_expr
174
:
xor_expr -> and_expr
174
and
xor_expr -> and_expr
174
is
xor_expr -> and_expr
174
or
xor_expr -> and_expr
174
|
xor_expr -> and_expr
174
in
xor_expr -> and_expr
174
==
xor_expr -> and_expr
174
>
xor_expr -> and_expr
174
<
xor_expr -> and_expr
174
if
xor_expr -> and_expr
174
<=
xor_expr -> and_expr
174
!=
xor_expr -> and_expr
175
+
552
175
in
arith_expr -> term
175
if
arith_expr -> term
175
|
arith_expr -> term
175
==
arith_expr -> term
175
<
arith_expr -> term
175
-
553
175
<=
arith_expr -> term
175
^
arith_expr -> term
175
is
arith_expr -> term
175
>>
arith_expr -> term
175
or
arith_expr -> term
175
&
arith_expr -> term
175
>
arith_expr -> term
175
>=
arith_expr -> term
175
<<
arith_expr -> term
175
and
arith_expr -> term
175
:
arith_expr -> term
175
not
arith_expr -> term
175
as
arith_expr -> term
175
,
arith_expr -> term
175
!=
arith_expr -> term
176
*
554
176
%
555
176
//
556
176
/
557
176
and
term -> factor
176
@
558
176
==
term -> factor
176
>=
term -> factor
176
+
term -> factor
176
<=
term -> factor
176
or
term -> factor
176
<<
term -> factor
176
not
term -> factor
176
,
term -> factor
176
<
term -> factor
176
-
term -> factor
176
in
term -> factor
176
!=
term -> factor
176
is
term -> factor
176
>>
term -> factor
176
:
term -> factor
176
^
term -> factor
176
as
term -> factor
176
|
term -> factor
176
>
term -> factor
176
if
term -> factor
176
&
term -> factor
177
&
559
177
if
and_expr -> shift_expr
177
as
and_expr -> shift_expr
177
in
and_expr -> shift_expr
177
is
and_expr -> shift_expr
177
|
and_expr -> shift_expr
177
>=
and_expr -> shift_expr
177
<
and_expr -> shift_expr
177
!=
and_expr -> shift_expr
177
and
and_expr -> shift_expr
177
not
and_expr -> shift_expr
177
or
and_expr -> shift_expr
177
,
and_expr -> shift_expr
177
:
and_expr -> shift_expr
177
==
and_expr -> shift_expr
177
<=
and_expr -> shift_expr
177
^
and_expr -> shift_expr
177
>
and_expr -> shift_expr
178
<<
560
178
>>
561
178
<
shift_expr -> arith_expr
178
>
shift_expr -> arith_expr
178
&
shift_expr -> arith_expr
178
and
shift_expr -> arith_expr
178
,
shift_expr -> arith_expr
178
in
shift_expr -> arith_expr
178
!=
shift_expr -> arith_expr
178
|
shift_expr -> arith_expr
178
if
shift_expr -> arith_expr
178
not
shift_expr -> arith_expr
178
<=
shift_expr -> arith_expr
178
is
shift_expr -> arith_expr
178
==
shift_expr -> arith_expr
178
or
shift_expr -> arith_expr
178
:
shift_expr -> arith_expr
178
as
shift_expr -> arith_expr
178
>=
shift_expr -> arith_expr
178
^
shift_expr -> arith_expr
179
==
atom -> NUMBER
179
<=
atom -> NUMBER
179
<<
atom -> NUMBER
179
/
atom -> NUMBER
179
as
atom -> NUMBER
179
^
atom -> NUMBER
179
if
atom -> NUMBER
179
.
atom -> NUMBER
179
or
atom -> NUMBER
179
**
atom -> NUMBER
179
+
atom -> NUMBER
179
%
atom -> NUMBER
179
-
atom -> NUMBER
179
&
atom -> NUMBER
179
@
atom -> NUMBER
179
*
atom -> NUMBER
179
>>
atom -> NUMBER
179
<
atom -> NUMBER
179
is
atom -> NUMBER
179
(
atom -> NUMBER
179
and
atom -> NUMBER
179
not
atom -> NUMBER
179
!=
atom -> NUMBER
179
|
atom -> NUMBER
179
in
atom -> NUMBER
179
>
atom -> NUMBER
179
:
atom -> NUMBER
179
>=
atom -> NUMBER
179
//
atom -> NUMBER
179
,
atom -> NUMBER
179
[
atom -> NUMBER
180
if
562
180
:
test -> or_test
180
as
test -> or_test
180
,
test -> or_test
181
or
atom -> NAME
181
as
atom -> NAME
181
in
atom -> NAME
181
^
atom -> NAME
181
[
atom -> NAME
181
==
atom -> NAME
181
<<
atom -> NAME
181
**
atom -> NAME
181
,
atom -> NAME
181
!=
atom -> NAME
181
%
atom -> NAME
181
@
atom -> NAME
181
not
atom -> NAME
181
>
atom -> NAME
181
>=
atom -> NAME
181
*
atom -> NAME
181
&
atom -> NAME
181
<
atom -> NAME
181
-
atom -> NAME
181
(
atom -> NAME
181
>>
atom -> NAME
181
+
atom -> NAME
181
//
atom -> NAME
181
and
atom -> NAME
181
<=
atom -> NAME
181
is
atom -> NAME
181
if
atom -> NAME
181
/
atom -> NAME
181
.
atom -> NAME
181
:
atom -> NAME
181
|
atom -> NAME
182
and_test
110
182
atom_expr
111
182
and_expr
112
182
term
113
182
factor
114
182
shift_expr
115
182
arith_expr
116
182
NUMBER
117
182
NAME
118
182
[
119
182
test_list_comp
563
182
{
121
182
expr
122
182
not_test
123
182
False
124
182
xor_expr
125
182
atom
126
182
STRING
127
182
+
128
182
(
129
182
True
131
182
-
132
182
]
564
182
None
133
182
comparison
134
182
or_test
135
182
test
136
182
power
137
182
~
138
182
lambda
139
182
lambdef
140
182
not
141
182
test_list
142
183
}
565
184
in
147
184
<
148
184
>=
149
184
not
150
184
comp_op
566
184
!=
151
184
>
152
184
==
153
184
is
154
184
<=
155
184
as
comparison -> expr
184
or
comparison -> expr
184
,
comparison -> expr
184
and
comparison -> expr
184
:
comparison -> expr
184
if
comparison -> expr
185
and
567
185
,
and_test -> not_test
185
as
and_test -> not_test
185
or
and_test -> not_test
185
:
and_test -> not_test
185
if
and_test -> not_test
186
*
atom -> False
186
@
atom -> False
186
<
atom -> False
186
or
atom -> False
186
is
atom -> False
186
>>
atom -> False
186
[
atom -> False
186
/
atom -> False
186
%
atom -> False
186
.
atom -> False
186
(
atom -> False
186
in
atom -> False
186
**
atom -> False
186
==
atom -> False
186
as
atom -> False
186
//
atom -> False
186
:
atom -> False
186
+
atom -> False
186
,
atom -> False
186
<<
atom -> False
186
!=
atom -> False
186
<=
atom -> False
186
>
atom -> False
186
^
atom -> False
186
if
atom -> False
186
&
atom -> False
186
and
atom -> False
186
|
atom -> False
186
-
atom -> False
186
not
atom -> False
186
>=
atom -> False
187
:
expr -> xor_expr
187
not
expr -> xor_expr
187
|
568
187
as
expr -> xor_expr
187
==
expr -> xor_expr
187
in
expr -> xor_expr
187
if
expr -> xor_expr
187
>
expr -> xor_expr
187
or
expr -> xor_expr
187
<=
expr -> xor_expr
187
<
expr -> xor_expr
187
is
expr -> xor_expr
187
>=
expr -> xor_expr
187
!=
expr -> xor_expr
187
,
expr -> xor_expr
187
and
expr -> xor_expr
188
&
atom -> STRING
188
**
atom -> STRING
188
%
atom -> STRING
188
@
atom -> STRING
188
/
atom -> STRING
188
*
atom -> STRING
188
^
atom -> STRING
188
>=
atom -> STRING
188
if
atom -> STRING
188
<
atom -> STRING
188
:
atom -> STRING
188
>>
atom -> STRING
188
.
atom -> STRING
188
//
atom -> STRING
188
,
atom -> STRING
188
+
atom -> STRING
188
as
atom -> STRING
188
<<
atom -> STRING
188
and
atom -> STRING
188
[
atom -> STRING
188
or
atom -> STRING
188
in
atom -> STRING
188
not
atom -> STRING
188
>
atom -> STRING
188
(
atom -> STRING
188
!=
atom -> STRING
188
is
atom -> STRING
188
==
atom -> STRING
188
-
atom -> STRING
188
|
atom -> STRING
188
<=
atom -> STRING
189
[
569
189
(
570
189
.
571
189
trailer
572
189
<<
trailer_expr -> 
189
trailer_expr
573
189
@
trailer_expr -> 
189
!=
trailer_expr -> 
189
-
trailer_expr -> 
189
^
trailer_expr -> 
189
<
trailer_expr -> 
189
/
trailer_expr -> 
189
is
trailer_expr -> 
189
==
trailer_expr -> 
189
&
trailer_expr -> 
189
>=
trailer_expr -> 
189
or
trailer_expr -> 
189
in
trailer_expr -> 
189
*
trailer_expr -> 
189
not
trailer_expr -> 
189
**
trailer_expr -> 
189
<=
trailer_expr -> 
189
+
trailer_expr -> 
189
as
trailer_expr -> 
189
//
trailer_expr -> 
189
%
trailer_expr -> 
189
>
trailer_expr -> 
189
:
trailer_expr -> 
189
,
trailer_expr -> 
189
|
trailer_expr -> 
189
if
trailer_expr -> 
189
>>
trailer_expr -> 
189
and
trailer_expr -> 
190
atom_expr
173
190
NUMBER
179
190
NAME
181
190
[
182
190
{
183
190
False
186
190
STRING
188
190
atom
189
190
+
190
190
True
191
190
(
192
190
None
195
190
-
194
190
factor
574
190
power
199
190
~
200
191
!=
atom -> True
191
:
atom -> True
191
is
atom -> True
191
//
atom -> True
191
|
atom -> True
191
<=
atom -> True
191
^
atom -> True
191
%
atom -> True
191
@
atom -> True
191
**
atom -> True
191
as
atom -> True
191
(
atom -> True
191
not
atom -> True
191
>>
atom -> True
191
<
atom -> True
191
==
atom -> True
191
and
atom -> True
191
in
atom -> True
191
&
atom -> True
191
.
atom -> True
191
<<
atom -> True
191
/
atom -> True
191
*
atom -> True
191
>
atom -> True
191
,
atom -> True
191
+
atom -> True
191
>=
atom -> True
191
or
atom -> True
191
-
atom -> True
191
[
atom -> True
191
if
atom -> True
192
and_test
217
192
atom_expr
218
192
and_expr
219
192
term
220
192
factor
221
192
shift_expr
222
192
arith_expr
223
192
NUMBER
224
192
NAME
225
192
not
226
192
[
227
192
{
228
192
expr
229
192
test_list_comp
575
192
not_test
231
192
False
232
192
xor_expr
234
192
STRING
235
192
lambda
236
192
atom
237
192
+
238
192
True
239
192
-
240
192
(
241
192
None
242
192
comparison
243
192
power
244
192
)
576
192
~
245
192
or_test
246
192
test
247
192
lambdef
248
192
test_list
249
193
:
with_items -> with_item
193
,
577
194
atom_expr
173
194
NUMBER
179
194
NAME
181
194
[
182
194
factor
578
194
{
183
194
False
186
194
STRING
188
194
atom
189
194
+
190
194
True
191
194
(
192
194
None
195
194
-
194
194
power
199
194
~
200
195
!=
atom -> None
195
//
atom -> None
195
^
atom -> None
195
>=
atom -> None
195
&
atom -> None
195
**
atom -> None
195
,
atom -> None
195
<
atom -> None
195
if
atom -> None
195
*
atom -> None
195
>
atom -> None
195
@
atom -> None
195
|
atom -> None
195
-
atom -> None
195
%
atom -> None
195
:
atom -> None
195
not
atom -> None
195
==
atom -> None
195
in
atom -> None
195
/
atom -> None
195
or
atom -> None
195
and
atom -> None
195
+
atom -> None
195
(
atom -> None
195
as
atom -> None
195
>>
atom -> None
195
is
atom -> None
195
[
atom -> None
195
<=
atom -> None
195
<<
atom -> None
195
.
atom -> None
196
:
579
197
:
with_item -> test
197
as
580
197
,
with_item -> test
198
or
581
198
as
or_test -> and_test
198
if
or_test -> and_test
198
,
or_test -> and_test
198
:
or_test -> and_test
199
*
factor -> power
199
>>
factor -> power
199
>=
factor -> power
199
<
factor -> power
199
&
factor -> power
199
,
factor -> power
199
@
factor -> power
199
|
factor -> power
199
!=
factor -> power
199
as
factor -> power
199
<=
factor -> power
199
//
factor -> power
199
in
factor -> power
199
and
factor -> power
199
+
factor -> power
199
>
factor -> power
199
-
factor -> power
199
not
factor -> power
199
is
factor -> power
199
==
factor -> power
199
%
factor -> power
199
if
factor -> power
199
or
factor -> power
199
^
factor -> power
199
<<
factor -> power
199
/
factor -> power
199
:
factor -> power
200
atom_expr
173
200
NUMBER
179
200
NAME
181
200
[
182
200
factor
582
200
{
183
200
False
186
200
STRING
188
200
atom
189
200
+
190
200
True
191
200
(
192
200
None
195
200
-
194
200
power
199
200
~
200
201
varargslist
583
201
:
584
201
vfpdef
212
201
NAME
211
202
atom_expr
173
202
and_expr
174
202
term
175
202
factor
176
202
shift_expr
177
202
arith_expr
178
202
NUMBER
179
202
NAME
181
202
[
182
202
{
183
202
expr
184
202
False
186
202
xor_expr
187
202
STRING
188
202
atom
189
202
+
190
202
True
191
202
(
192
202
None
195
202
-
194
202
power
199
202
~
200
202
not_test
585
202
not
202
202
comparison
203
203
or
not_test -> comparison
203
if
not_test -> comparison
203
as
not_test -> comparison
203
:
not_test -> comparison
203
,
not_test -> comparison
203
and
not_test -> comparison
204
as
test -> lambdef
204
:
test -> lambdef
204
,
test -> lambdef
205
atom_expr
6
205
factor
10
205
[
3
205
term
15
205
STRING
43
205
arith_expr
32
205
NUMBER
8
205
NAME
37
205
{
5
205
expr
7
205
not
51
205
True
9
205
shift_expr
12
205
atom
13
205
xor_expr
14
205
(
34
205
None
29
205
and_test
20
205
and_expr
21
205
False
23
205
+
30
205
-
36
205
not_test
40
205
power
47
205
~
44
205
comparison
48
205
or_test
586
206
atom_expr
6
206
factor
10
206
[
3
206
term
15
206
STRING
43
206
arith_expr
32
206
NUMBER
8
206
NAME
37
206
{
5
206
True
9
206
xor_expr
587
206
shift_expr
12
206
atom
13
206
(
34
206
None
29
206
and_expr
21
206
False
23
206
+
30
206
-
36
206
power
47
206
~
44
207
(
588
208
or_test
589
208
atom_expr
590
208
and_expr
591
208
term
592
208
[
593
208
shift_expr
594
208
arith_expr
595
208
NUMBER
596
208
NAME
597
208
factor
598
208
{
599
208
expr
600
208
False
601
208
xor_expr
602
208
STRING
603
208
+
604
208
True
605
208
-
606
208
(
607
208
None
608
208
atom
609
208
power
610
208
~
611
208
not_test
612
208
not
613
208
comparison
614
208
and_test
615
209
:
616
210
atom_expr
6
210
factor
10
210
[
3
210
term
15
210
STRING
43
210
arith_expr
32
210
NUMBER
8
210
NAME
37
210
{
5
210
expr
7
210
not
51
210
True
9
210
shift_expr
12
210
atom
13
210
xor_expr
14
210
(
34
210
None
29
210
and_test
20
210
and_expr
21
210
False
23
210
or_test
25
210
lambda
28
210
+
30
210
-
36
210
not_test
40
210
power
47
210
lambdef
41
210
~
44
210
comparison
48
210
test
617
211
:
vfpdef -> NAME
211
,
vfpdef -> NAME
212
,
618
212
:
varargslist -> vfpdef
213
<<
factor -> + factor
213
,
factor -> + factor
213
*=
factor -> + factor
213
&
factor -> + factor
213
-=
factor -> + factor
213
>
factor -> + factor
213
if
factor -> + factor
213
not
factor -> + factor
213
+
factor -> + factor
213
^
factor -> + factor
213
%=
factor -> + factor
213
==
factor -> + factor
213
/
factor -> + factor
213
|=
factor -> + factor
213
|
factor -> + factor
213
>=
factor -> + factor
213
NEWLINE
factor -> + factor
213
//=
factor -> + factor
213
%
factor -> + factor
213
>>=
factor -> + factor
213
+=
factor -> + factor
213
/=
factor -> + factor
213
**=
factor -> + factor
213
<<=
factor -> + factor
213
<
factor -> + factor
213
^=
factor -> + factor
213
is
factor -> + factor
213
or
factor -> + factor
213
@=
factor -> + factor
213
@
factor -> + factor
213
//
factor -> + factor
213
and
factor -> + factor
213
=
factor -> + factor
213
-
factor -> + factor
213
in
factor -> + factor
213
&=
factor -> + factor
213
*
factor -> + factor
213
:
factor -> + factor
213
!=
factor -> + factor
213
>>
factor -> + factor
213
<=
factor -> + factor
214
atom_expr
6
214
factor
10
214
[
3
214
term
15
214
STRING
43
214
arith_expr
32
214
NUMBER
8
214
NAME
37
214
{
5
214
shift_expr
619
214
True
9
214
atom
13
214
(
34
214
None
29
214
False
23
214
+
30
214
-
36
214
power
47
214
~
44
215
shift_expr
620
215
atom_expr
6
215
factor
10
215
[
3
215
term
15
215
STRING
43
215
arith_expr
32
215
NUMBER
8
215
NAME
37
215
{
5
215
True
9
215
atom
13
215
(
34
215
None
29
215
False
23
215
+
30
215
-
36
215
power
47
215
~
44
216
atom_expr
6
216
factor
10
216
[
3
216
term
15
216
STRING
43
216
arith_expr
32
216
NUMBER
8
216
NAME
37
216
{
5
216
expr
7
216
not
51
216
True
9
216
test_list
621
216
shift_expr
12
216
atom
13
216
xor_expr
14
216
(
34
216
None
29
216
and_test
20
216
and_expr
21
216
False
23
216
or_test
25
216
test
33
216
lambda
28
216
+
30
216
-
36
216
not_test
40
216
power
47
216
lambdef
41
216
~
44
216
comparison
48
217
or
622
217
)
or_test -> and_test
217
if
or_test -> and_test
217
,
or_test -> and_test
217
for
or_test -> and_test
218
**
623
218
!=
power -> atom_expr
218
|
power -> atom_expr
218
>
power -> atom_expr
218
/
power -> atom_expr
218
^
power -> atom_expr
218
&
power -> atom_expr
218
<
power -> atom_expr
218
not
power -> atom_expr
218
)
power -> atom_expr
218
<=
power -> atom_expr
218
%
power -> atom_expr
218
and
power -> atom_expr
218
*
power -> atom_expr
218
@
power -> atom_expr
218
>>
power -> atom_expr
218
if
power -> atom_expr
218
+
power -> atom_expr
218
,
power -> atom_expr
218
in
power -> atom_expr
218
for
power -> atom_expr
218
is
power -> atom_expr
218
//
power -> atom_expr
218
or
power -> atom_expr
218
<<
power -> atom_expr
218
-
power -> atom_expr
218
==
power -> atom_expr
218
>=
power -> atom_expr
219
,
xor_expr -> and_expr
219
^
624
219
)
xor_expr -> and_expr
219
not
xor_expr -> and_expr
219
>=
xor_expr -> and_expr
219
for
xor_expr -> and_expr
219
and
xor_expr -> and_expr
219
is
xor_expr -> and_expr
219
or
xor_expr -> and_expr
219
|
xor_expr -> and_expr
219
in
xor_expr -> and_expr
219
==
xor_expr -> and_expr
219
>
xor_expr -> and_expr
219
<
xor_expr -> and_expr
219
if
xor_expr -> and_expr
219
<=
xor_expr -> and_expr
219
!=
xor_expr -> and_expr
220
+
625
220
in
arith_expr -> term
220
if
arith_expr -> term
220
|
arith_expr -> term
220
-
626
220
<
arith_expr -> term
220
==
arith_expr -> term
220
<=
arith_expr -> term
220
^
arith_expr -> term
220
is
arith_expr -> term
220
>>
arith_expr -> term
220
for
arith_expr -> term
220
or
arith_expr -> term
220
&
arith_expr -> term
220
>
arith_expr -> term
220
>=
arith_expr -> term
220
<<
arith_expr -> term
220
and
arith_expr -> term
220
)
arith_expr -> term
220
not
arith_expr -> term
220
,
arith_expr -> term
220
!=
arith_expr -> term
221
//
627
221
*
628
221
%
629
221
/
630
221
and
term -> factor
221
==
term -> factor
221
@
631
221
>=
term -> factor
221
+
term -> factor
221
<=
term -> factor
221
or
term -> factor
221
<<
term -> factor
221
not
term -> factor
221
,
term -> factor
221
<
term -> factor
221
-
term -> factor
221
in
term -> factor
221
for
term -> factor
221
!=
term -> factor
221
is
term -> factor
221
>>
term -> factor
221
^
term -> factor
221
|
term -> factor
221
>
term -> factor
221
)
term -> factor
221
if
term -> factor
221
&
term -> factor
222
)
and_expr -> shift_expr
222
if
and_expr -> shift_expr
222
&
632
222
in
and_expr -> shift_expr
222
is
and_expr -> shift_expr
222
|
and_expr -> shift_expr
222
>=
and_expr -> shift_expr
222
<
and_expr -> shift_expr
222
!=
and_expr -> shift_expr
222
and
and_expr -> shift_expr
222
not
and_expr -> shift_expr
222
or
and_expr -> shift_expr
222
,
and_expr -> shift_expr
222
==
and_expr -> shift_expr
222
<=
and_expr -> shift_expr
222
^
and_expr -> shift_expr
222
for
and_expr -> shift_expr
222
>
and_expr -> shift_expr
223
<<
633
223
>>
634
223
<
shift_expr -> arith_expr
223
>
shift_expr -> arith_expr
223
for
shift_expr -> arith_expr
223
&
shift_expr -> arith_expr
223
and
shift_expr -> arith_expr
223
,
shift_expr -> arith_expr
223
in
shift_expr -> arith_expr
223
!=
shift_expr -> arith_expr
223
|
shift_expr -> arith_expr
223
if
shift_expr -> arith_expr
223
not
shift_expr -> arith_expr
223
<=
shift_expr -> arith_expr
223
is
shift_expr -> arith_expr
223
==
shift_expr -> arith_expr
223
)
shift_expr -> arith_expr
223
or
shift_expr -> arith_expr
223
>=
shift_expr -> arith_expr
223
^
shift_expr -> arith_expr
224
)
atom -> NUMBER
224
==
atom -> NUMBER
224
<=
atom -> NUMBER
224
<<
atom -> NUMBER
224
/
atom -> NUMBER
224
^
atom -> NUMBER
224
if
atom -> NUMBER
224
.
atom -> NUMBER
224
or
atom -> NUMBER
224
**
atom -> NUMBER
224
for
atom -> NUMBER
224
+
atom -> NUMBER
224
%
atom -> NUMBER
224
-
atom -> NUMBER
224
&
atom -> NUMBER
224
@
atom -> NUMBER
224
*
atom -> NUMBER
224
>>
atom -> NUMBER
224
<
atom -> NUMBER
224
is
atom -> NUMBER
224
(
atom -> NUMBER
224
and
atom -> NUMBER
224
not
atom -> NUMBER
224
!=
atom -> NUMBER
224
|
atom -> NUMBER
224
in
atom -> NUMBER
224
>
atom -> NUMBER
224
>=
atom -> NUMBER
224
//
atom -> NUMBER
224
,
atom -> NUMBER
224
[
atom -> NUMBER
225
or
atom -> NAME
225
)
atom -> NAME
225
in
atom -> NAME
225
^
atom -> NAME
225
[
atom -> NAME
225
==
atom -> NAME
225
for
atom -> NAME
225
<<
atom -> NAME
225
**
atom -> NAME
225
,
atom -> NAME
225
!=
atom -> NAME
225
%
atom -> NAME
225
@
atom -> NAME
225
not
atom -> NAME
225
>
atom -> NAME
225
>=
atom -> NAME
225
*
atom -> NAME
225
&
atom -> NAME
225
<
atom -> NAME
225
-
atom -> NAME
225
(
atom -> NAME
225
>>
atom -> NAME
225
+
atom -> NAME
225
//
atom -> NAME
225
and
atom -> NAME
225
<=
atom -> NAME
225
is
atom -> NAME
225
if
atom -> NAME
225
/
atom -> NAME
225
.
atom -> NAME
225
|
atom -> NAME
226
atom_expr
218
226
and_expr
219
226
term
220
226
factor
221
226
shift_expr
222
226
arith_expr
223
226
NUMBER
224
226
NAME
225
226
not
226
226
[
227
226
{
228
226
expr
229
226
False
232
226
xor_expr
234
226
STRING
235
226
atom
237
226
+
238
226
True
239
226
-
240
226
(
241
226
None
242
226
comparison
243
226
power
244
226
~
245
226
not_test
635
227
and_test
110
227
atom_expr
111
227
and_expr
112
227
term
113
227
factor
114
227
shift_expr
115
227
arith_expr
116
227
NUMBER
117
227
NAME
118
227
[
119
227
test_list_comp
636
227
{
121
227
expr
122
227
not_test
123
227
False
124
227
xor_expr
125
227
atom
126
227
STRING
127
227
+
128
227
(
129
227
True
131
227
-
132
227
]
637
227
None
133
227
comparison
134
227
or_test
135
227
test
136
227
power
137
227
~
138
227
lambda
139
227
lambdef
140
227
not
141
227
test_list
142
228
}
638
229
in
147
229
<
148
229
>=
149
229
not
150
229
comp_op
639
229
!=
151
229
>
152
229
==
153
229
is
154
229
<=
155
229
)
comparison -> expr
229
or
comparison -> expr
229
,
comparison -> expr
229
and
comparison -> expr
229
for
comparison -> expr
229
if
comparison -> expr
230
)
640
231
and
641
231
,
and_test -> not_test
231
or
and_test -> not_test
231
)
and_test -> not_test
231
if
and_test -> not_test
231
for
and_test -> not_test
232
*
atom -> False
232
@
atom -> False
232
<
atom -> False
232
or
atom -> False
232
is
atom -> False
232
>>
atom -> False
232
[
atom -> False
232
/
atom -> False
232
)
atom -> False
232
%
atom -> False
232
.
atom -> False
232
(
atom -> False
232
in
atom -> False
232
**
atom -> False
232
==
atom -> False
232
//
atom -> False
232
+
atom -> False
232
,
atom -> False
232
<<
atom -> False
232
!=
atom -> False
232
<=
atom -> False
232
>
atom -> False
232
^
atom -> False
232
if
atom -> False
232
&
atom -> False
232
and
atom -> False
232
for
atom -> False
232
|
atom -> False
232
-
atom -> False
232
not
atom -> False
232
>=
atom -> False
233
-=
atom -> ( )
233
>=
atom -> ( )
233
>>
atom -> ( )
233
NEWLINE
atom -> ( )
233
not
atom -> ( )
233
if
atom -> ( )
233
&
atom -> ( )
233
^
atom -> ( )
233
.
atom -> ( )
233
/
atom -> ( )
233
in
atom -> ( )
233
&=
atom -> ( )
233
^=
atom -> ( )
233
>>=
atom -> ( )
233
**=
atom -> ( )
233
:
atom -> ( )
233
//=
atom -> ( )
233
>
atom -> ( )
233
*=
atom -> ( )
233
%
atom -> ( )
233
<<=
atom -> ( )
233
(
atom -> ( )
233
==
atom -> ( )
233
|=
atom -> ( )
233
,
atom -> ( )
233
[
atom -> ( )
233
%=
atom -> ( )
233
<=
atom -> ( )
233
+
atom -> ( )
233
/=
atom -> ( )
233
|
atom -> ( )
233
-
atom -> ( )
233
or
atom -> ( )
233
=
atom -> ( )
233
@
atom -> ( )
233
@=
atom -> ( )
233
<<
atom -> ( )
233
+=
atom -> ( )
233
is
atom -> ( )
233
**
atom -> ( )
233
*
atom -> ( )
233
and
atom -> ( )
233
<
atom -> ( )
233
!=
atom -> ( )
233
//
atom -> ( )
234
for
expr -> xor_expr
234
not
expr -> xor_expr
234
|
642
234
==
expr -> xor_expr
234
in
expr -> xor_expr
234
if
expr -> xor_expr
234
>
expr -> xor_expr
234
or
expr -> xor_expr
234
<=
expr -> xor_expr
234
<
expr -> xor_expr
234
is
expr -> xor_expr
234
)
expr -> xor_expr
234
>=
expr -> xor_expr
234
!=
expr -> xor_expr
234
,
expr -> xor_expr
234
and
expr -> xor_expr
235
&
atom -> STRING
235
**
atom -> STRING
235
%
atom -> STRING
235
@
atom -> STRING
235
/
atom -> STRING
235
*
atom -> STRING
235
^
atom -> STRING
235
>=
atom -> STRING
235
if
atom -> STRING
235
<
atom -> STRING
235
>>
atom -> STRING
235
.
atom -> STRING
235
for
atom -> STRING
235
//
atom -> STRING
235
,
atom -> STRING
235
+
atom -> STRING
235
<<
atom -> STRING
235
and
atom -> STRING
235
[
atom -> STRING
235
or
atom -> STRING
235
in
atom -> STRING
235
not
atom -> STRING
235
>
atom -> STRING
235
(
atom -> STRING
235
!=
atom -> STRING
235
is
atom -> STRING
235
==
atom -> STRING
235
-
atom -> STRING
235
|
atom -> STRING
235
<=
atom -> STRING
235
)
atom -> STRING
236
:
643
236
NAME
211
236
vfpdef
212
236
varargslist
644
237
[
645
237
(
646
237
.
647
237
trailer
648
237
<<
trailer_expr -> 
237
trailer_expr
649
237
@
trailer_expr -> 
237
!=
trailer_expr -> 
237
-
trailer_expr -> 
237
^
trailer_expr -> 
237
<
trailer_expr -> 
237
for
trailer_expr -> 
237
/
trailer_expr -> 
237
is
trailer_expr -> 
237
==
trailer_expr -> 
237
&
trailer_expr -> 
237
>=
trailer_expr -> 
237
or
trailer_expr -> 
237
in
trailer_expr -> 
237
*
trailer_expr -> 
237
not
trailer_expr -> 
237
)
trailer_expr -> 
237
**
trailer_expr -> 
237
<=
trailer_expr -> 
237
+
trailer_expr -> 
237
//
trailer_expr -> 
237
%
trailer_expr -> 
237
>
trailer_expr -> 
237
,
trailer_expr -> 
237
|
trailer_expr -> 
237
if
trailer_expr -> 
237
>>
trailer_expr -> 
237
and
trailer_expr -> 
238
atom_expr
218
238
NUMBER
224
238
NAME
225
238
[
227
238
{
228
238
False
232
238
STRING
235
238
atom
237
238
+
238
238
True
239
238
-
240
238
(
241
238
None
242
238
power
244
238
factor
650
238
~
245
239
!=
atom -> True
239
is
atom -> True
239
//
atom -> True
239
|
atom -> True
239
<=
atom -> True
239
^
atom -> True
239
%
atom -> True
239
@
atom -> True
239
**
atom -> True
239
(
atom -> True
239
not
atom -> True
239
>>
atom -> True
239
<
atom -> True
239
==
atom -> True
239
and
atom -> True
239
in
atom -> True
239
&
atom -> True
239
.
atom -> True
239
<<
atom -> True
239
/
atom -> True
239
)
atom -> True
239
*
atom -> True
239
>
atom -> True
239
,
atom -> True
239
+
atom -> True
239
>=
atom -> True
239
or
atom -> True
239
for
atom -> True
239
-
atom -> True
239
[
atom -> True
239
if
atom -> True
240
atom_expr
218
240
NUMBER
224
240
NAME
225
240
[
227
240
factor
651
240
{
228
240
False
232
240
STRING
235
240
atom
237
240
+
238
240
True
239
240
-
240
240
(
241
240
None
242
240
power
244
240
~
245
241
and_test
217
241
atom_expr
218
241
and_expr
219
241
term
220
241
factor
221
241
shift_expr
222
241
arith_expr
223
241
NUMBER
224
241
NAME
225
241
not
226
241
[
227
241
{
228
241
expr
229
241
test_list_comp
652
241
not_test
231
241
False
232
241
xor_expr
234
241
STRING
235
241
lambda
236
241
atom
237
241
+
238
241
True
239
241
-
240
241
(
241
241
None
242
241
comparison
243
241
power
244
241
)
653
241
~
245
241
or_test
246
241
test
247
241
lambdef
248
241
test_list
249
242
!=
atom -> None
242
//
atom -> None
242
^
atom -> None
242
>=
atom -> None
242
&
atom -> None
242
**
atom -> None
242
,
atom -> None
242
<
atom -> None
242
if
atom -> None
242
*
atom -> None
242
>
atom -> None
242
@
atom -> None
242
|
atom -> None
242
-
atom -> None
242
%
atom -> None
242
)
atom -> None
242
not
atom -> None
242
==
atom -> None
242
in
atom -> None
242
/
atom -> None
242
or
atom -> None
242
and
atom -> None
242
+
atom -> None
242
(
atom -> None
242
>>
atom -> None
242
is
atom -> None
242
for
atom -> None
242
[
atom -> None
242
<=
atom -> None
242
<<
atom -> None
242
.
atom -> None
243
for
not_test -> comparison
243
or
not_test -> comparison
243
if
not_test -> comparison
243
,
not_test -> comparison
243
and
not_test -> comparison
243
)
not_test -> comparison
244
*
factor -> power
244
>>
factor -> power
244
>=
factor -> power
244
<
factor -> power
244
&
factor -> power
244
for
factor -> power
244
,
factor -> power
244
@
factor -> power
244
|
factor -> power
244
!=
factor -> power
244
<=
factor -> power
244
//
factor -> power
244
in
factor -> power
244
and
factor -> power
244
+
factor -> power
244
>
factor -> power
244
-
factor -> power
244
not
factor -> power
244
is
factor -> power
244
==
factor -> power
244
%
factor -> power
244
if
factor -> power
244
or
factor -> power
244
^
factor -> power
244
)
factor -> power
244
<<
factor -> power
244
/
factor -> power
245
atom_expr
218
245
NUMBER
224
245
NAME
225
245
[
227
245
factor
654
245
{
228
245
False
232
245
STRING
235
245
atom
237
245
+
238
245
True
239
245
-
240
245
(
241
245
None
242
245
power
244
245
~
245
246
if
655
246
for
test -> or_test
246
,
test -> or_test
246
)
test -> or_test
247
for
656
247
)
test_list -> test
247
comp_for
657
247
,
658
248
for
test -> lambdef
248
,
test -> lambdef
248
)
test -> lambdef
249
)
test_list_comp -> test_list
250
/=
factor -> - factor
250
<<=
factor -> - factor
250
@
factor -> - factor
250
*=
factor -> - factor
250
^
factor -> - factor
250
==
factor -> - factor
250
**=
factor -> - factor
250
in
factor -> - factor
250
>>
factor -> - factor
250
|=
factor -> - factor
250
,
factor -> - factor
250
//
factor -> - factor
250
and
factor -> - factor
250
>>=
factor -> - factor
250
-=
factor -> - factor
250
:
factor -> - factor
250
<=
factor -> - factor
250
!=
factor -> - factor
250
^=
factor -> - factor
250
-
factor -> - factor
250
//=
factor -> - factor
250
&
factor -> - factor
250
&=
factor -> - factor
250
=
factor -> - factor
250
NEWLINE
factor -> - factor
250
+=
factor -> - factor
250
not
factor -> - factor
250
>
factor -> - factor
250
@=
factor -> - factor
250
*
factor -> - factor
250
%=
factor -> - factor
250
%
factor -> - factor
250
/
factor -> - factor
250
<
factor -> - factor
250
|
factor -> - factor
250
+
factor -> - factor
250
if
factor -> - factor
250
<<
factor -> - factor
250
is
factor -> - factor
250
or
factor -> - factor
250
>=
factor -> - factor
251
atom_expr
6
251
factor
10
251
[
3
251
term
15
251
STRING
43
251
arith_expr
32
251
NUMBER
8
251
NAME
37
251
{
5
251
expr
7
251
not
51
251
True
9
251
shift_expr
12
251
atom
13
251
xor_expr
14
251
(
34
251
None
29
251
and_expr
21
251
False
23
251
+
30
251
-
36
251
and_test
659
251
not_test
40
251
power
47
251
~
44
251
comparison
48
252
**
660
252
|
power -> atom_expr
252
/
power -> atom_expr
252
^
power -> atom_expr
252
&
power -> atom_expr
252
%
power -> atom_expr
252
*
power -> atom_expr
252
@
power -> atom_expr
252
>>
power -> atom_expr
252
+
power -> atom_expr
252
,
power -> atom_expr
252
in
power -> atom_expr
252
<<
power -> atom_expr
252
-
power -> atom_expr
252
//
power -> atom_expr
253
in
atom -> True
253
&
atom -> True
253
//
atom -> True
253
.
atom -> True
253
(
atom -> True
253
<<
atom -> True
253
>>
atom -> True
253
|
atom -> True
253
^
atom -> True
253
/
atom -> True
253
-
atom -> True
253
%
atom -> True
253
*
atom -> True
253
@
atom -> True
253
[
atom -> True
253
**
atom -> True
253
,
atom -> True
253
+
atom -> True
254
,
xor_expr -> and_expr
254
^
661
254
|
xor_expr -> and_expr
254
in
xor_expr -> and_expr
255
and_test
217
255
atom_expr
218
255
and_expr
219
255
term
220
255
factor
221
255
shift_expr
222
255
arith_expr
223
255
NUMBER
224
255
NAME
225
255
not
226
255
[
227
255
{
228
255
expr
229
255
not_test
231
255
False
232
255
xor_expr
234
255
STRING
235
255
test_list_comp
662
255
lambda
236
255
atom
237
255
+
238
255
True
239
255
-
240
255
(
241
255
None
242
255
comparison
243
255
power
244
255
)
663
255
~
245
255
or_test
246
255
test
247
255
lambdef
248
255
test_list
249
256
+
atom -> NUMBER
256
-
atom -> NUMBER
256
%
atom -> NUMBER
256
in
atom -> NUMBER
256
&
atom -> NUMBER
256
(
atom -> NUMBER
256
<<
atom -> NUMBER
256
@
atom -> NUMBER
256
/
atom -> NUMBER
256
.
atom -> NUMBER
256
//
atom -> NUMBER
256
,
atom -> NUMBER
256
^
atom -> NUMBER
256
[
atom -> NUMBER
256
*
atom -> NUMBER
256
>>
atom -> NUMBER
256
**
atom -> NUMBER
256
|
atom -> NUMBER
257
in
664
258
&
atom -> NAME
258
//
atom -> NAME
258
-
atom -> NAME
258
(
atom -> NAME
258
|
atom -> NAME
258
in
atom -> NAME
258
%
atom -> NAME
258
^
atom -> NAME
258
[
atom -> NAME
258
@
atom -> NAME
258
>>
atom -> NAME
258
/
atom -> NAME
258
<<
atom -> NAME
258
.
atom -> NAME
258
+
atom -> NAME
258
**
atom -> NAME
258
,
atom -> NAME
258
*
atom -> NAME
259
}
665
260
[
atom -> False
260
/
atom -> False
260
//
atom -> False
260
%
atom -> False
260
(
atom -> False
260
^
atom -> False
260
.
atom -> False
260
@
atom -> False
260
*
atom -> False
260
in
atom -> False
260
&
atom -> False
260
**
atom -> False
260
+
atom -> False
260
|
atom -> False
260
,
atom -> False
260
-
atom -> False
260
>>
atom -> False
260
<<
atom -> False
261
,
shift_expr -> arith_expr
261
>>
666
261
<<
667
261
in
shift_expr -> arith_expr
261
|
shift_expr -> arith_expr
261
&
shift_expr -> arith_expr
261
^
shift_expr -> arith_expr
262
>>
atom -> STRING
262
(
atom -> STRING
262
.
atom -> STRING
262
@
atom -> STRING
262
<<
atom -> STRING
262
&
atom -> STRING
262
/
atom -> STRING
262
-
atom -> STRING
262
//
atom -> STRING
262
,
atom -> STRING
262
+
atom -> STRING
262
*
atom -> STRING
262
^
atom -> STRING
262
|
atom -> STRING
262
[
atom -> STRING
262
in
atom -> STRING
262
**
atom -> STRING
262
%
atom -> STRING
263
*
factor -> power
263
%
factor -> power
263
+
factor -> power
263
>>
factor -> power
263
//
factor -> power
263
in
factor -> power
263
&
factor -> power
263
^
factor -> power
263
|
factor -> power
263
,
factor -> power
263
-
factor -> power
263
<<
factor -> power
263
@
factor -> power
263
/
factor -> power
264
and_test
110
264
atom_expr
111
264
and_expr
112
264
term
113
264
factor
114
264
shift_expr
115
264
arith_expr
116
264
NUMBER
117
264
NAME
118
264
[
119
264
{
121
264
expr
122
264
not_test
123
264
test_list_comp
668
264
False
124
264
xor_expr
125
264
atom
126
264
STRING
127
264
+
128
264
(
129
264
True
131
264
-
132
264
]
669
264
None
133
264
comparison
134
264
or_test
135
264
test
136
264
power
137
264
~
138
264
lambda
139
264
lambdef
140
264
not
141
264
test_list
142
265
//
670
265
/
671
265
%
672
265
@
673
265
*
674
265
>>
term -> factor
265
<<
term -> factor
265
,
term -> factor
265
^
term -> factor
265
+
term -> factor
265
-
term -> factor
265
|
term -> factor
265
in
term -> factor
265
&
term -> factor
266
atom_expr
252
266
True
253
266
(
255
266
NUMBER
256
266
NAME
258
266
{
259
266
factor
675
266
False
260
266
STRING
262
266
power
263
266
[
264
266
~
266
266
atom
267
266
+
268
266
None
270
266
-
274
267
[
676
267
(
677
267
trailer
678
267
trailer_expr
679
267
in
trailer_expr -> 
267
.
680
267
<<
trailer_expr -> 
267
*
trailer_expr -> 
267
@
trailer_expr -> 
267
**
trailer_expr -> 
267
-
trailer_expr -> 
267
+
trailer_expr -> 
267
^
trailer_expr -> 
267
//
trailer_expr -> 
267
%
trailer_expr -> 
267
/
trailer_expr -> 
267
,
trailer_expr -> 
267
|
trailer_expr -> 
267
&
trailer_expr -> 
267
>>
trailer_expr -> 
268
atom_expr
252
268
True
253
268
(
255
268
NUMBER
256
268
NAME
258
268
{
259
268
False
260
268
STRING
262
268
power
263
268
[
264
268
factor
681
268
~
266
268
atom
267
268
+
268
268
None
270
268
-
274
269
in
arith_expr -> term
269
|
arith_expr -> term
269
^
arith_expr -> term
269
>>
arith_expr -> term
269
+
682
269
-
683
269
&
arith_expr -> term
269
<<
arith_expr -> term
269
,
arith_expr -> term
270
+
atom -> None
270
(
atom -> None
270
,
atom -> None
270
*
atom -> None
270
//
atom -> None
270
^
atom -> None
270
@
atom -> None
270
|
atom -> None
270
>>
atom -> None
270
in
atom -> None
270
/
atom -> None
270
%
atom -> None
270
**
atom -> None
270
[
atom -> None
270
&
atom -> None
270
-
atom -> None
270
<<
atom -> None
270
.
atom -> None
271
&
684
271
,
and_expr -> shift_expr
271
^
and_expr -> shift_expr
271
in
and_expr -> shift_expr
271
|
and_expr -> shift_expr
272
|
685
272
,
expr -> xor_expr
272
in
expr -> xor_expr
273
,
686
273
in
expr_list -> expr
274
atom_expr
252
274
True
253
274
(
255
274
NUMBER
256
274
NAME
258
274
factor
687
274
{
259
274
False
260
274
STRING
262
274
power
263
274
[
264
274
~
266
274
atom
267
274
+
268
274
None
270
274
-
274
275
=
factor -> ~ factor
275
<<
factor -> ~ factor
275
<<=
factor -> ~ factor
275
*=
factor -> ~ factor
275
in
factor -> ~ factor
275
<=
factor -> ~ factor
275
if
factor -> ~ factor
275
>>=
factor -> ~ factor
275
^=
factor -> ~ factor
275
|
factor -> ~ factor
275
+=
factor -> ~ factor
275
<
factor -> ~ factor
275
>>
factor -> ~ factor
275
**=
factor -> ~ factor
275
==
factor -> ~ factor
275
>=
factor -> ~ factor
275
!=
factor -> ~ factor
275
,
factor -> ~ factor
275
/=
factor -> ~ factor
275
//
factor -> ~ factor
275
*
factor -> ~ factor
275
/
factor -> ~ factor
275
NEWLINE
factor -> ~ factor
275
+
factor -> ~ factor
275
is
factor -> ~ factor
275
not
factor -> ~ factor
275
and
factor -> ~ factor
275
^
factor -> ~ factor
275
&=
factor -> ~ factor
275
|=
factor -> ~ factor
275
%=
factor -> ~ factor
275
@
factor -> ~ factor
275
:
factor -> ~ factor
275
//=
factor -> ~ factor
275
>
factor -> ~ factor
275
-
factor -> ~ factor
275
@=
factor -> ~ factor
275
or
factor -> ~ factor
275
&
factor -> ~ factor
275
-=
factor -> ~ factor
275
%
factor -> ~ factor
276
if
not_test -> not not_test
276
+=
not_test -> not not_test
276
-=
not_test -> not not_test
276
&=
not_test -> not not_test
276
^=
not_test -> not not_test
276
or
not_test -> not not_test
276
@=
not_test -> not not_test
276
|=
not_test -> not not_test
276
:
not_test -> not not_test
276
*=
not_test -> not not_test
276
<<=
not_test -> not not_test
276
,
not_test -> not not_test
276
=
not_test -> not not_test
276
/=
not_test -> not not_test
276
//=
not_test -> not not_test
276
%=
not_test -> not not_test
276
>>=
not_test -> not not_test
276
**=
not_test -> not not_test
276
NEWLINE
not_test -> not not_test
276
and
not_test -> not not_test
277
.
688
277
NEWLINE
dotted_name -> NAME
277
(
dotted_name -> NAME
278
NEWLINE
689
278
(
690
279
def
decorators -> decorator decorators
279
class
decorators -> decorator decorators
280
**
691
280
|
power -> atom_expr
280
/
power -> atom_expr
280
^
power -> atom_expr
280
&
power -> atom_expr
280
NEWLINE
power -> atom_expr
280
%
power -> atom_expr
280
*
power -> atom_expr
280
@
power -> atom_expr
280
>>
power -> atom_expr
280
+
power -> atom_expr
280
,
power -> atom_expr
280
<<
power -> atom_expr
280
-
power -> atom_expr
280
//
power -> atom_expr
281
NEWLINE
atom -> True
281
&
atom -> True
281
//
atom -> True
281
.
atom -> True
281
(
atom -> True
281
<<
atom -> True
281
>>
atom -> True
281
|
atom -> True
281
^
atom -> True
281
/
atom -> True
281
-
atom -> True
281
%
atom -> True
281
*
atom -> True
281
@
atom -> True
281
[
atom -> True
281
**
atom -> True
281
,
atom -> True
281
+
atom -> True
282
,
xor_expr -> and_expr
282
^
692
282
NEWLINE
xor_expr -> and_expr
282
|
xor_expr -> and_expr
283
and_test
217
283
atom_expr
218
283
and_expr
219
283
term
220
283
factor
221
283
shift_expr
222
283
arith_expr
223
283
NUMBER
224
283
NAME
225
283
not
226
283
[
227
283
{
228
283
expr
229
283
not_test
231
283
False
232
283
xor_expr
234
283
STRING
235
283
test_list_comp
693
283
lambda
236
283
atom
237
283
+
238
283
True
239
283
-
240
283
(
241
283
None
242
283
comparison
243
283
power
244
283
)
694
283
~
245
283
or_test
246
283
test
247
283
lambdef
248
283
test_list
249
284
+
atom -> NUMBER
284
-
atom -> NUMBER
284
%
atom -> NUMBER
284
&
atom -> NUMBER
284
NEWLINE
atom -> NUMBER
284
(
atom -> NUMBER
284
<<
atom -> NUMBER
284
@
atom -> NUMBER
284
/
atom -> NUMBER
284
.
atom -> NUMBER
284
//
atom -> NUMBER
284
,
atom -> NUMBER
284
^
atom -> NUMBER
284
[
atom -> NUMBER
284
*
atom -> NUMBER
284
>>
atom -> NUMBER
284
**
atom -> NUMBER
284
|
atom -> NUMBER
285
&
atom -> NAME
285
//
atom -> NAME
285
-
atom -> NAME
285
(
atom -> NAME
285
|
atom -> NAME
285
%
atom -> NAME
285
^
atom -> NAME
285
[
atom -> NAME
285
@
atom -> NAME
285
>>
atom -> NAME
285
/
atom -> NAME
285
NEWLINE
atom -> NAME
285
<<
atom -> NAME
285
.
atom -> NAME
285
+
atom -> NAME
285
**
atom -> NAME
285
,
atom -> NAME
285
*
atom -> NAME
286
}
695
287
*
factor -> power
287
%
factor -> power
287
+
factor -> power
287
>>
factor -> power
287
//
factor -> power
287
&
factor -> power
287
^
factor -> power
287
|
factor -> power
287
NEWLINE
factor -> power
287
,
factor -> power
287
-
factor -> power
287
<<
factor -> power
287
@
factor -> power
287
/
factor -> power
288
and_test
110
288
atom_expr
111
288
and_expr
112
288
term
113
288
factor
114
288
shift_expr
115
288
arith_expr
116
288
NUMBER
117
288
NAME
118
288
[
119
288
{
121
288
expr
122
288
not_test
123
288
test_list_comp
696
288
False
124
288
xor_expr
125
288
atom
126
288
STRING
127
288
+
128
288
(
129
288
True
131
288
-
132
288
]
697
288
None
133
288
comparison
134
288
or_test
135
288
test
136
288
power
137
288
~
138
288
lambda
139
288
lambdef
140
288
not
141
288
test_list
142
289
//
698
289
/
699
289
%
700
289
@
701
289
*
702
289
>>
term -> factor
289
<<
term -> factor
289
NEWLINE
term -> factor
289
,
term -> factor
289
^
term -> factor
289
+
term -> factor
289
-
term -> factor
289
|
term -> factor
289
&
term -> factor
290
atom_expr
280
290
True
281
290
(
283
290
NUMBER
284
290
NAME
285
290
{
286
290
factor
703
290
power
287
290
[
288
290
~
290
290
atom
291
290
+
292
290
None
295
290
STRING
297
290
False
298
290
-
299
291
[
704
291
(
705
291
trailer
706
291
trailer_expr
707
291
.
708
291
<<
trailer_expr -> 
291
*
trailer_expr -> 
291
@
trailer_expr -> 
291
**
trailer_expr -> 
291
-
trailer_expr -> 
291
+
trailer_expr -> 
291
^
trailer_expr -> 
291
//
trailer_expr -> 
291
%
trailer_expr -> 
291
NEWLINE
trailer_expr -> 
291
/
trailer_expr -> 
291
,
trailer_expr -> 
291
|
trailer_expr -> 
291
&
trailer_expr -> 
291
>>
trailer_expr -> 
292
atom_expr
280
292
True
281
292
(
283
292
NUMBER
284
292
NAME
285
292
{
286
292
power
287
292
[
288
292
factor
709
292
~
290
292
atom
291
292
+
292
292
None
295
292
STRING
297
292
False
298
292
-
299
293
|
arith_expr -> term
293
^
arith_expr -> term
293
>>
arith_expr -> term
293
-
710
293
+
711
293
&
arith_expr -> term
293
<<
arith_expr -> term
293
NEWLINE
arith_expr -> term
293
,
arith_expr -> term
294
,
shift_expr -> arith_expr
294
>>
712
294
<<
713
294
NEWLINE
shift_expr -> arith_expr
294
|
shift_expr -> arith_expr
294
&
shift_expr -> arith_expr
294
^
shift_expr -> arith_expr
295
+
atom -> None
295
(
atom -> None
295
,
atom -> None
295
*
atom -> None
295
//
atom -> None
295
^
atom -> None
295
@
atom -> None
295
|
atom -> None
295
>>
atom -> None
295
&
atom -> None
295
/
atom -> None
295
%
atom -> None
295
**
atom -> None
295
[
atom -> None
295
-
atom -> None
295
<<
atom -> None
295
.
atom -> None
295
NEWLINE
atom -> None
296
&
714
296
,
and_expr -> shift_expr
296
^
and_expr -> shift_expr
296
NEWLINE
and_expr -> shift_expr
296
|
and_expr -> shift_expr
297
>>
atom -> STRING
297
(
atom -> STRING
297
.
atom -> STRING
297
NEWLINE
atom -> STRING
297
@
atom -> STRING
297
&
atom -> STRING
297
/
atom -> STRING
297
-
atom -> STRING
297
//
atom -> STRING
297
,
atom -> STRING
297
+
atom -> STRING
297
*
atom -> STRING
297
^
atom -> STRING
297
|
atom -> STRING
297
<<
atom -> STRING
297
[
atom -> STRING
297
**
atom -> STRING
297
%
atom -> STRING
298
[
atom -> False
298
/
atom -> False
298
//
atom -> False
298
%
atom -> False
298
,
atom -> False
298
(
atom -> False
298
^
atom -> False
298
.
atom -> False
298
@
atom -> False
298
*
atom -> False
298
&
atom -> False
298
**
atom -> False
298
+
atom -> False
298
|
atom -> False
298
NEWLINE
atom -> False
298
-
atom -> False
298
>>
atom -> False
298
<<
atom -> False
299
atom_expr
280
299
True
281
299
(
283
299
NUMBER
284
299
NAME
285
299
factor
715
299
{
286
299
power
287
299
[
288
299
~
290
299
atom
291
299
+
292
299
None
295
299
STRING
297
299
False
298
299
-
299
300
|
716
300
NEWLINE
expr -> xor_expr
300
,
expr -> xor_expr
301
NEWLINE
yield_stmt -> yield expr_list
302
,
717
302
NEWLINE
expr_list -> expr
303
NEWLINE
return_stmt -> return expr_list
304
-
augassign -> +=
304
STRING
augassign -> +=
304
NUMBER
augassign -> +=
304
yield
augassign -> +=
304
NAME
augassign -> +=
304
(
augassign -> +=
304
True
augassign -> +=
304
{
augassign -> +=
304
+
augassign -> +=
304
~
augassign -> +=
304
False
augassign -> +=
304
lambda
augassign -> +=
304
[
augassign -> +=
304
None
augassign -> +=
304
not
augassign -> +=
305
+
augassign -> @=
305
NUMBER
augassign -> @=
305
-
augassign -> @=
305
(
augassign -> @=
305
NAME
augassign -> @=
305
lambda
augassign -> @=
305
False
augassign -> @=
305
yield
augassign -> @=
305
None
augassign -> @=
305
{
augassign -> @=
305
True
augassign -> @=
305
STRING
augassign -> @=
305
~
augassign -> @=
305
[
augassign -> @=
305
not
augassign -> @=
306
yield
augassign -> *=
306
lambda
augassign -> *=
306
True
augassign -> *=
306
(
augassign -> *=
306
-
augassign -> *=
306
NUMBER
augassign -> *=
306
~
augassign -> *=
306
not
augassign -> *=
306
False
augassign -> *=
306
STRING
augassign -> *=
306
[
augassign -> *=
306
+
augassign -> *=
306
NAME
augassign -> *=
306
{
augassign -> *=
306
None
augassign -> *=
307
lambda
augassign -> /=
307
not
augassign -> /=
307
+
augassign -> /=
307
-
augassign -> /=
307
True
augassign -> /=
307
NUMBER
augassign -> /=
307
(
augassign -> /=
307
[
augassign -> /=
307
STRING
augassign -> /=
307
~
augassign -> /=
307
None
augassign -> /=
307
{
augassign -> /=
307
NAME
augassign -> /=
307
False
augassign -> /=
307
yield
augassign -> /=
308
[
augassign -> &=
308
False
augassign -> &=
308
NAME
augassign -> &=
308
+
augassign -> &=
308
{
augassign -> &=
308
~
augassign -> &=
308
(
augassign -> &=
308
STRING
augassign -> &=
308
lambda
augassign -> &=
308
True
augassign -> &=
308
yield
augassign -> &=
308
NUMBER
augassign -> &=
308
-
augassign -> &=
308
not
augassign -> &=
308
None
augassign -> &=
309
(
augassign -> <<=
309
False
augassign -> <<=
309
+
augassign -> <<=
309
NAME
augassign -> <<=
309
None
augassign -> <<=
309
[
augassign -> <<=
309
-
augassign -> <<=
309
True
augassign -> <<=
309
NUMBER
augassign -> <<=
309
{
augassign -> <<=
309
not
augassign -> <<=
309
STRING
augassign -> <<=
309
~
augassign -> <<=
309
lambda
augassign -> <<=
309
yield
augassign -> <<=
310
not
augassign -> //=
310
~
augassign -> //=
310
{
augassign -> //=
310
None
augassign -> //=
310
yield
augassign -> //=
310
-
augassign -> //=
310
NAME
augassign -> //=
310
STRING
augassign -> //=
310
(
augassign -> //=
310
+
augassign -> //=
310
lambda
augassign -> //=
310
NUMBER
augassign -> //=
310
[
augassign -> //=
310
False
augassign -> //=
310
True
augassign -> //=
311
yield
augassign -> |=
311
+
augassign -> |=
311
STRING
augassign -> |=
311
None
augassign -> |=
311
{
augassign -> |=
311
False
augassign -> |=
311
[
augassign -> |=
311
~
augassign -> |=
311
-
augassign -> |=
311
not
augassign -> |=
311
True
augassign -> |=
311
lambda
augassign -> |=
311
NAME
augassign -> |=
311
(
augassign -> |=
311
NUMBER
augassign -> |=
312
[
augassign -> %=
312
+
augassign -> %=
312
(
augassign -> %=
312
None
augassign -> %=
312
lambda
augassign -> %=
312
not
augassign -> %=
312
True
augassign -> %=
312
yield
augassign -> %=
312
NUMBER
augassign -> %=
312
-
augassign -> %=
312
NAME
augassign -> %=
312
{
augassign -> %=
312
False
augassign -> %=
312
~
augassign -> %=
312
STRING
augassign -> %=
313
NAME
augassign -> -=
313
NUMBER
augassign -> -=
313
~
augassign -> -=
313
None
augassign -> -=
313
{
augassign -> -=
313
(
augassign -> -=
313
yield
augassign -> -=
313
-
augassign -> -=
313
False
augassign -> -=
313
not
augassign -> -=
313
STRING
augassign -> -=
313
True
augassign -> -=
313
+
augassign -> -=
313
lambda
augassign -> -=
313
[
augassign -> -=
314
+
augassign -> >>=
314
NAME
augassign -> >>=
314
None
augassign -> >>=
314
-
augassign -> >>=
314
not
augassign -> >>=
314
{
augassign -> >>=
314
NUMBER
augassign -> >>=
314
yield
augassign -> >>=
314
~
augassign -> >>=
314
lambda
augassign -> >>=
314
False
augassign -> >>=
314
(
augassign -> >>=
314
[
augassign -> >>=
314
True
augassign -> >>=
314
STRING
augassign -> >>=
315
not
augassign -> **=
315
NUMBER
augassign -> **=
315
STRING
augassign -> **=
315
(
augassign -> **=
315
True
augassign -> **=
315
[
augassign -> **=
315
None
augassign -> **=
315
~
augassign -> **=
315
{
augassign -> **=
315
lambda
augassign -> **=
315
+
augassign -> **=
315
NAME
augassign -> **=
315
-
augassign -> **=
315
yield
augassign -> **=
315
False
augassign -> **=
316
-
augassign -> ^=
316
lambda
augassign -> ^=
316
False
augassign -> ^=
316
NAME
augassign -> ^=
316
not
augassign -> ^=
316
NUMBER
augassign -> ^=
316
{
augassign -> ^=
316
(
augassign -> ^=
316
~
augassign -> ^=
316
None
augassign -> ^=
316
[
augassign -> ^=
316
STRING
augassign -> ^=
316
True
augassign -> ^=
316
yield
augassign -> ^=
316
+
augassign -> ^=
317
atom_expr
718
317
and_expr
719
317
term
720
317
factor
721
317
shift_expr
722
317
arith_expr
723
317
NUMBER
724
317
NAME
725
317
[
726
317
{
727
317
expr
728
317
not_test
729
317
False
730
317
xor_expr
731
317
STRING
732
317
yield
733
317
atom
734
317
+
735
317
True
736
317
-
737
317
and_test
738
317
test
739
317
or_test
740
317
(
741
317
None
742
317
lambda
743
317
power
744
317
~
745
317
lambdef
746
317
comparison
747
317
test_list
748
317
not
749
317
yield_expr
750
318
NEWLINE
expr_stmt -> test_list assign
319
atom_expr
325
319
and_expr
326
319
term
327
319
factor
328
319
shift_expr
329
319
arith_expr
330
319
NUMBER
331
319
NAME
332
319
[
333
319
{
334
319
expr
335
319
not_test
336
319
False
337
319
xor_expr
338
319
STRING
339
319
atom
340
319
+
341
319
True
342
319
-
343
319
test
344
319
(
345
319
None
346
319
lambda
347
319
or_test
348
319
and_test
349
319
power
350
319
~
351
319
lambdef
352
319
yield_expr
751
319
comparison
353
319
test_list
752
319
yield
753
319
not
354
319
yield_or_testlist
754
320
NEWLINE
expr_stmt -> test_list annassign
321
atom_expr
755
321
and_expr
756
321
term
757
321
factor
758
321
shift_expr
759
321
arith_expr
760
321
NUMBER
761
321
NAME
762
321
[
763
321
{
764
321
expr
765
321
False
766
321
xor_expr
767
321
STRING
768
321
+
769
321
True
770
321
-
771
321
and_test
772
321
or_test
773
321
(
774
321
None
775
321
atom
776
321
power
777
321
~
778
321
not_test
779
321
comparison
780
321
lambda
781
321
not
782
321
test
783
321
lambdef
784
322
NEWLINE
del_stmt -> del expr_list
323
NEWLINE
namelist -> NAME
323
,
785
324
NEWLINE
nonlocal_stmt -> nonlocal namelist
325
**
786
325
!=
power -> atom_expr
325
|
power -> atom_expr
325
>
power -> atom_expr
325
/
power -> atom_expr
325
^
power -> atom_expr
325
&
power -> atom_expr
325
<
power -> atom_expr
325
not
power -> atom_expr
325
NEWLINE
power -> atom_expr
325
<=
power -> atom_expr
325
%
power -> atom_expr
325
and
power -> atom_expr
325
*
power -> atom_expr
325
@
power -> atom_expr
325
>>
power -> atom_expr
325
if
power -> atom_expr
325
+
power -> atom_expr
325
,
power -> atom_expr
325
in
power -> atom_expr
325
is
power -> atom_expr
325
//
power -> atom_expr
325
or
power -> atom_expr
325
<<
power -> atom_expr
325
-
power -> atom_expr
325
==
power -> atom_expr
325
>=
power -> atom_expr
326
,
xor_expr -> and_expr
326
^
787
326
not
xor_expr -> and_expr
326
>=
xor_expr -> and_expr
326
and
xor_expr -> and_expr
326
is
xor_expr -> and_expr
326
or
xor_expr -> and_expr
326
|
xor_expr -> and_expr
326
in
xor_expr -> and_expr
326
==
xor_expr -> and_expr
326
>
xor_expr -> and_expr
326
<
xor_expr -> and_expr
326
if
xor_expr -> and_expr
326
<=
xor_expr -> and_expr
326
!=
xor_expr -> and_expr
326
NEWLINE
xor_expr -> and_expr
327
+
788
327
in
arith_expr -> term
327
if
arith_expr -> term
327
|
arith_expr -> term
327
==
arith_expr -> term
327
<
arith_expr -> term
327
-
789
327
<=
arith_expr -> term
327
^
arith_expr -> term
327
is
arith_expr -> term
327
>>
arith_expr -> term
327
or
arith_expr -> term
327
&
arith_expr -> term
327
>
arith_expr -> term
327
>=
arith_expr -> term
327
<<
arith_expr -> term
327
and
arith_expr -> term
327
NEWLINE
arith_expr -> term
327
not
arith_expr -> term
327
,
arith_expr -> term
327
!=
arith_expr -> term
328
*
790
328
%
791
328
//
792
328
/
793
328
and
term -> factor
328
==
term -> factor
328
@
794
328
>=
term -> factor
328
+
term -> factor
328
<=
term -> factor
328
or
term -> factor
328
<<
term -> factor
328
not
term -> factor
328
,
term -> factor
328
<
term -> factor
328
-
term -> factor
328
in
term -> factor
328
!=
term -> factor
328
is
term -> factor
328
>>
term -> factor
328
NEWLINE
term -> factor
328
^
term -> factor
328
|
term -> factor
328
>
term -> factor
328
if
term -> factor
328
&
term -> factor
329
if
and_expr -> shift_expr
329
&
795
329
in
and_expr -> shift_expr
329
is
and_expr -> shift_expr
329
|
and_expr -> shift_expr
329
>=
and_expr -> shift_expr
329
<
and_expr -> shift_expr
329
!=
and_expr -> shift_expr
329
and
and_expr -> shift_expr
329
not
and_expr -> shift_expr
329
or
and_expr -> shift_expr
329
,
and_expr -> shift_expr
329
==
and_expr -> shift_expr
329
<=
and_expr -> shift_expr
329
^
and_expr -> shift_expr
329
>
and_expr -> shift_expr
329
NEWLINE
and_expr -> shift_expr
330
<<
796
330
>>
797
330
<
shift_expr -> arith_expr
330
>
shift_expr -> arith_expr
330
&
shift_expr -> arith_expr
330
and
shift_expr -> arith_expr
330
,
shift_expr -> arith_expr
330
in
shift_expr -> arith_expr
330
!=
shift_expr -> arith_expr
330
|
shift_expr -> arith_expr
330
if
shift_expr -> arith_expr
330
not
shift_expr -> arith_expr
330
<=
shift_expr -> arith_expr
330
is
shift_expr -> arith_expr
330
==
shift_expr -> arith_expr
330
or
shift_expr -> arith_expr
330
NEWLINE
shift_expr -> arith_expr
330
>=
shift_expr -> arith_expr
330
^
shift_expr -> arith_expr
331
==
atom -> NUMBER
331
<=
atom -> NUMBER
331
<<
atom -> NUMBER
331
/
atom -> NUMBER
331
^
atom -> NUMBER
331
if
atom -> NUMBER
331
.
atom -> NUMBER
331
or
atom -> NUMBER
331
**
atom -> NUMBER
331
+
atom -> NUMBER
331
%
atom -> NUMBER
331
-
atom -> NUMBER
331
&
atom -> NUMBER
331
@
atom -> NUMBER
331
*
atom -> NUMBER
331
>>
atom -> NUMBER
331
<
atom -> NUMBER
331
is
atom -> NUMBER
331
(
atom -> NUMBER
331
and
atom -> NUMBER
331
not
atom -> NUMBER
331
!=
atom -> NUMBER
331
|
atom -> NUMBER
331
in
atom -> NUMBER
331
>
atom -> NUMBER
331
NEWLINE
atom -> NUMBER
331
>=
atom -> NUMBER
331
//
atom -> NUMBER
331
,
atom -> NUMBER
331
[
atom -> NUMBER
332
or
atom -> NAME
332
in
atom -> NAME
332
^
atom -> NAME
332
[
atom -> NAME
332
==
atom -> NAME
332
<<
atom -> NAME
332
**
atom -> NAME
332
NEWLINE
atom -> NAME
332
,
atom -> NAME
332
!=
atom -> NAME
332
%
atom -> NAME
332
@
atom -> NAME
332
not
atom -> NAME
332
>
atom -> NAME
332
>=
atom -> NAME
332
*
atom -> NAME
332
&
atom -> NAME
332
<
atom -> NAME
332
-
atom -> NAME
332
(
atom -> NAME
332
>>
atom -> NAME
332
+
atom -> NAME
332
//
atom -> NAME
332
and
atom -> NAME
332
<=
atom -> NAME
332
is
atom -> NAME
332
if
atom -> NAME
332
/
atom -> NAME
332
.
atom -> NAME
332
|
atom -> NAME
333
and_test
110
333
atom_expr
111
333
and_expr
112
333
term
113
333
factor
114
333
shift_expr
115
333
arith_expr
116
333
NUMBER
117
333
NAME
118
333
[
119
333
test_list_comp
798
333
{
121
333
expr
122
333
not_test
123
333
False
124
333
xor_expr
125
333
atom
126
333
STRING
127
333
+
128
333
(
129
333
True
131
333
-
132
333
]
799
333
None
133
333
comparison
134
333
or_test
135
333
test
136
333
power
137
333
~
138
333
lambda
139
333
lambdef
140
333
not
141
333
test_list
142
334
}
800
335
in
147
335
<
148
335
>=
149
335
not
150
335
comp_op
801
335
!=
151
335
>
152
335
==
153
335
is
154
335
<=
155
335
NEWLINE
comparison -> expr
335
or
comparison -> expr
335
,
comparison -> expr
335
and
comparison -> expr
335
if
comparison -> expr
336
and
802
336
,
and_test -> not_test
336
or
and_test -> not_test
336
if
and_test -> not_test
336
NEWLINE
and_test -> not_test
337
*
atom -> False
337
@
atom -> False
337
<
atom -> False
337
or
atom -> False
337
is
atom -> False
337
>>
atom -> False
337
[
atom -> False
337
/
atom -> False
337
%
atom -> False
337
.
atom -> False
337
(
atom -> False
337
in
atom -> False
337
**
atom -> False
337
==
atom -> False
337
//
atom -> False
337
+
atom -> False
337
,
atom -> False
337
<<
atom -> False
337
NEWLINE
atom -> False
337
!=
atom -> False
337
<=
atom -> False
337
>
atom -> False
337
^
atom -> False
337
if
atom -> False
337
&
atom -> False
337
and
atom -> False
337
|
atom -> False
337
-
atom -> False
337
not
atom -> False
337
>=
atom -> False
338
not
expr -> xor_expr
338
|
803
338
==
expr -> xor_expr
338
in
expr -> xor_expr
338
if
expr -> xor_expr
338
>
expr -> xor_expr
338
or
expr -> xor_expr
338
NEWLINE
expr -> xor_expr
338
<=
expr -> xor_expr
338
<
expr -> xor_expr
338
is
expr -> xor_expr
338
>=
expr -> xor_expr
338
!=
expr -> xor_expr
338
,
expr -> xor_expr
338
and
expr -> xor_expr
339
&
atom -> STRING
339
**
atom -> STRING
339
%
atom -> STRING
339
NEWLINE
atom -> STRING
339
@
atom -> STRING
339
/
atom -> STRING
339
*
atom -> STRING
339
^
atom -> STRING
339
>=
atom -> STRING
339
if
atom -> STRING
339
<
atom -> STRING
339
>>
atom -> STRING
339
.
atom -> STRING
339
//
atom -> STRING
339
,
atom -> STRING
339
+
atom -> STRING
339
<<
atom -> STRING
339
and
atom -> STRING
339
[
atom -> STRING
339
or
atom -> STRING
339
in
atom -> STRING
339
not
atom -> STRING
339
>
atom -> STRING
339
(
atom -> STRING
339
!=
atom -> STRING
339
is
atom -> STRING
339
==
atom -> STRING
339
-
atom -> STRING
339
|
atom -> STRING
339
<=
atom -> STRING
340
[
804
340
(
805
340
.
806
340
trailer
807
340
<<
trailer_expr -> 
340
trailer_expr
808
340
@
trailer_expr -> 
340
!=
trailer_expr -> 
340
-
trailer_expr -> 
340
^
trailer_expr -> 
340
<
trailer_expr -> 
340
NEWLINE
trailer_expr -> 
340
/
trailer_expr -> 
340
is
trailer_expr -> 
340
==
trailer_expr -> 
340
&
trailer_expr -> 
340
>=
trailer_expr -> 
340
or
trailer_expr -> 
340
in
trailer_expr -> 
340
*
trailer_expr -> 
340
not
trailer_expr -> 
340
**
trailer_expr -> 
340
<=
trailer_expr -> 
340
+
trailer_expr -> 
340
//
trailer_expr -> 
340
%
trailer_expr -> 
340
>
trailer_expr -> 
340
,
trailer_expr -> 
340
|
trailer_expr -> 
340
if
trailer_expr -> 
340
>>
trailer_expr -> 
340
and
trailer_expr -> 
341
atom_expr
325
341
NUMBER
331
341
NAME
332
341
[
333
341
{
334
341
False
337
341
STRING
339
341
atom
340
341
+
341
341
True
342
341
-
343
341
(
345
341
None
346
341
factor
809
341
power
350
341
~
351
342
!=
atom -> True
342
is
atom -> True
342
//
atom -> True
342
|
atom -> True
342
<=
atom -> True
342
^
atom -> True
342
%
atom -> True
342
@
atom -> True
342
**
atom -> True
342
(
atom -> True
342
NEWLINE
atom -> True
342
not
atom -> True
342
>>
atom -> True
342
<
atom -> True
342
==
atom -> True
342
and
atom -> True
342
in
atom -> True
342
&
atom -> True
342
.
atom -> True
342
<<
atom -> True
342
/
atom -> True
342
*
atom -> True
342
>
atom -> True
342
,
atom -> True
342
+
atom -> True
342
>=
atom -> True
342
or
atom -> True
342
-
atom -> True
342
[
atom -> True
342
if
atom -> True
343
atom_expr
325
343
NUMBER
331
343
NAME
332
343
[
333
343
factor
810
343
{
334
343
False
337
343
STRING
339
343
atom
340
343
+
341
343
True
342
343
-
343
343
(
345
343
None
346
343
power
350
343
~
351
344
,
811
344
NEWLINE
test_list -> test
345
and_test
217
345
atom_expr
218
345
and_expr
219
345
term
220
345
factor
221
345
shift_expr
222
345
arith_expr
223
345
NUMBER
224
345
NAME
225
345
not
226
345
[
227
345
{
228
345
expr
229
345
test_list_comp
812
345
not_test
231
345
False
232
345
xor_expr
234
345
STRING
235
345
lambda
236
345
atom
237
345
+
238
345
True
239
345
-
240
345
(
241
345
None
242
345
comparison
243
345
power
244
345
)
813
345
~
245
345
or_test
246
345
test
247
345
lambdef
248
345
test_list
249
346
!=
atom -> None
346
//
atom -> None
346
^
atom -> None
346
>=
atom -> None
346
&
atom -> None
346
**
atom -> None
346
NEWLINE
atom -> None
346
,
atom -> None
346
<
atom -> None
346
if
atom -> None
346
*
atom -> None
346
>
atom -> None
346
@
atom -> None
346
|
atom -> None
346
-
atom -> None
346
%
atom -> None
346
not
atom -> None
346
==
atom -> None
346
in
atom -> None
346
/
atom -> None
346
or
atom -> None
346
and
atom -> None
346
+
atom -> None
346
(
atom -> None
346
>>
atom -> None
346
is
atom -> None
346
[
atom -> None
346
<=
atom -> None
346
<<
atom -> None
346
.
atom -> None
347
vfpdef
212
347
:
814
347
NAME
211
347
varargslist
815
348
if
816
348
NEWLINE
test -> or_test
348
,
test -> or_test
349
NEWLINE
or_test -> and_test
349
or
817
349
,
or_test -> and_test
349
if
or_test -> and_test
350
*
factor -> power
350
>>
factor -> power
350
>=
factor -> power
350
<
factor -> power
350
&
factor -> power
350
,
factor -> power
350
@
factor -> power
350
|
factor -> power
350
!=
factor -> power
350
<=
factor -> power
350
//
factor -> power
350
in
factor -> power
350
and
factor -> power
350
+
factor -> power
350
>
factor -> power
350
-
factor -> power
350
not
factor -> power
350
is
factor -> power
350
==
factor -> power
350
%
factor -> power
350
if
factor -> power
350
or
factor -> power
350
^
factor -> power
350
NEWLINE
factor -> power
350
<<
factor -> power
350
/
factor -> power
351
atom_expr
325
351
NUMBER
331
351
NAME
332
351
[
333
351
factor
818
351
{
334
351
False
337
351
STRING
339
351
atom
340
351
+
341
351
True
342
351
-
343
351
(
345
351
None
346
351
power
350
351
~
351
352
NEWLINE
test -> lambdef
352
,
test -> lambdef
353
or
not_test -> comparison
353
if
not_test -> comparison
353
,
not_test -> comparison
353
NEWLINE
not_test -> comparison
353
and
not_test -> comparison
354
atom_expr
325
354
and_expr
326
354
term
327
354
factor
328
354
shift_expr
329
354
arith_expr
330
354
NUMBER
331
354
NAME
332
354
[
333
354
{
334
354
expr
335
354
False
337
354
xor_expr
338
354
STRING
339
354
atom
340
354
+
341
354
True
342
354
-
343
354
(
345
354
None
346
354
power
350
354
~
351
354
comparison
353
354
not
354
354
not_test
819
355
NEWLINE
assert_stmt -> assert test_list
356
**
820
356
!=
power -> atom_expr
356
from
power -> atom_expr
356
|
power -> atom_expr
356
>
power -> atom_expr
356
/
power -> atom_expr
356
^
power -> atom_expr
356
&
power -> atom_expr
356
<
power -> atom_expr
356
not
power -> atom_expr
356
NEWLINE
power -> atom_expr
356
<=
power -> atom_expr
356
%
power -> atom_expr
356
and
power -> atom_expr
356
*
power -> atom_expr
356
@
power -> atom_expr
356
>>
power -> atom_expr
356
if
power -> atom_expr
356
+
power -> atom_expr
356
in
power -> atom_expr
356
is
power -> atom_expr
356
//
power -> atom_expr
356
or
power -> atom_expr
356
<<
power -> atom_expr
356
-
power -> atom_expr
356
==
power -> atom_expr
356
>=
power -> atom_expr
357
^
821
357
from
xor_expr -> and_expr
357
not
xor_expr -> and_expr
357
>=
xor_expr -> and_expr
357
and
xor_expr -> and_expr
357
is
xor_expr -> and_expr
357
or
xor_expr -> and_expr
357
|
xor_expr -> and_expr
357
in
xor_expr -> and_expr
357
==
xor_expr -> and_expr
357
>
xor_expr -> and_expr
357
<
xor_expr -> and_expr
357
if
xor_expr -> and_expr
357
<=
xor_expr -> and_expr
357
!=
xor_expr -> and_expr
357
NEWLINE
xor_expr -> and_expr
358
+
822
358
in
arith_expr -> term
358
if
arith_expr -> term
358
|
arith_expr -> term
358
==
arith_expr -> term
358
<
arith_expr -> term
358
-
823
358
<=
arith_expr -> term
358
^
arith_expr -> term
358
is
arith_expr -> term
358
>>
arith_expr -> term
358
or
arith_expr -> term
358
&
arith_expr -> term
358
>
arith_expr -> term
358
>=
arith_expr -> term
358
<<
arith_expr -> term
358
and
arith_expr -> term
358
from
arith_expr -> term
358
NEWLINE
arith_expr -> term
358
not
arith_expr -> term
358
!=
arith_expr -> term
359
*
824
359
%
825
359
//
826
359
/
827
359
and
term -> factor
359
==
term -> factor
359
@
828
359
>=
term -> factor
359
+
term -> factor
359
from
term -> factor
359
<=
term -> factor
359
or
term -> factor
359
<<
term -> factor
359
not
term -> factor
359
<
term -> factor
359
-
term -> factor
359
in
term -> factor
359
!=
term -> factor
359
is
term -> factor
359
>>
term -> factor
359
NEWLINE
term -> factor
359
^
term -> factor
359
|
term -> factor
359
>
term -> factor
359
if
term -> factor
359
&
term -> factor
360
if
and_expr -> shift_expr
360
&
829
360
in
and_expr -> shift_expr
360
is
and_expr -> shift_expr
360
|
and_expr -> shift_expr
360
>=
and_expr -> shift_expr
360
<
and_expr -> shift_expr
360
!=
and_expr -> shift_expr
360
and
and_expr -> shift_expr
360
from
and_expr -> shift_expr
360
not
and_expr -> shift_expr
360
or
and_expr -> shift_expr
360
==
and_expr -> shift_expr
360
<=
and_expr -> shift_expr
360
^
and_expr -> shift_expr
360
>
and_expr -> shift_expr
360
NEWLINE
and_expr -> shift_expr
361
<<
830
361
from
shift_expr -> arith_expr
361
>>
831
361
<
shift_expr -> arith_expr
361
>
shift_expr -> arith_expr
361
&
shift_expr -> arith_expr
361
and
shift_expr -> arith_expr
361
in
shift_expr -> arith_expr
361
!=
shift_expr -> arith_expr
361
|
shift_expr -> arith_expr
361
if
shift_expr -> arith_expr
361
not
shift_expr -> arith_expr
361
<=
shift_expr -> arith_expr
361
is
shift_expr -> arith_expr
361
==
shift_expr -> arith_expr
361
or
shift_expr -> arith_expr
361
NEWLINE
shift_expr -> arith_expr
361
>=
shift_expr -> arith_expr
361
^
shift_expr -> arith_expr
362
==
atom -> NUMBER
362
<=
atom -> NUMBER
362
<<
atom -> NUMBER
362
/
atom -> NUMBER
362
^
atom -> NUMBER
362
if
atom -> NUMBER
362
.
atom -> NUMBER
362
or
atom -> NUMBER
362
**
atom -> NUMBER
362
+
atom -> NUMBER
362
%
atom -> NUMBER
362
-
atom -> NUMBER
362
&
atom -> NUMBER
362
@
atom -> NUMBER
362
*
atom -> NUMBER
362
>>
atom -> NUMBER
362
<
atom -> NUMBER
362
is
atom -> NUMBER
362
(
atom -> NUMBER
362
and
atom -> NUMBER
362
not
atom -> NUMBER
362
!=
atom -> NUMBER
362
|
atom -> NUMBER
362
from
atom -> NUMBER
362
in
atom -> NUMBER
362
>
atom -> NUMBER
362
NEWLINE
atom -> NUMBER
362
>=
atom -> NUMBER
362
//
atom -> NUMBER
362
[
atom -> NUMBER
363
or
atom -> NAME
363
in
atom -> NAME
363
^
atom -> NAME
363
[
atom -> NAME
363
==
atom -> NAME
363
<<
atom -> NAME
363
**
atom -> NAME
363
NEWLINE
atom -> NAME
363
from
atom -> NAME
363
!=
atom -> NAME
363
%
atom -> NAME
363
@
atom -> NAME
363
not
atom -> NAME
363
>
atom -> NAME
363
>=
atom -> NAME
363
*
atom -> NAME
363
&
atom -> NAME
363
<
atom -> NAME
363
-
atom -> NAME
363
(
atom -> NAME
363
>>
atom -> NAME
363
+
atom -> NAME
363
//
atom -> NAME
363
and
atom -> NAME
363
<=
atom -> NAME
363
is
atom -> NAME
363
if
atom -> NAME
363
/
atom -> NAME
363
.
atom -> NAME
363
|
atom -> NAME
364
and_test
110
364
atom_expr
111
364
and_expr
112
364
term
113
364
factor
114
364
shift_expr
115
364
arith_expr
116
364
NUMBER
117
364
NAME
118
364
[
119
364
test_list_comp
832
364
{
121
364
expr
122
364
not_test
123
364
False
124
364
xor_expr
125
364
atom
126
364
STRING
127
364
+
128
364
(
129
364
True
131
364
-
132
364
]
833
364
None
133
364
comparison
134
364
or_test
135
364
test
136
364
power
137
364
~
138
364
lambda
139
364
lambdef
140
364
not
141
364
test_list
142
365
[
834
365
(
835
365
.
836
365
trailer
837
365
<<
trailer_expr -> 
365
trailer_expr
838
365
@
trailer_expr -> 
365
!=
trailer_expr -> 
365
-
trailer_expr -> 
365
from
trailer_expr -> 
365
^
trailer_expr -> 
365
<
trailer_expr -> 
365
NEWLINE
trailer_expr -> 
365
/
trailer_expr -> 
365
is
trailer_expr -> 
365
==
trailer_expr -> 
365
&
trailer_expr -> 
365
>=
trailer_expr -> 
365
or
trailer_expr -> 
365
in
trailer_expr -> 
365
*
trailer_expr -> 
365
not
trailer_expr -> 
365
**
trailer_expr -> 
365
<=
trailer_expr -> 
365
+
trailer_expr -> 
365
//
trailer_expr -> 
365
%
trailer_expr -> 
365
>
trailer_expr -> 
365
|
trailer_expr -> 
365
if
trailer_expr -> 
365
>>
trailer_expr -> 
365
and
trailer_expr -> 
366
}
839
367
in
147
367
from
comparison -> expr
367
<
148
367
>=
149
367
not
150
367
comp_op
840
367
!=
151
367
>
152
367
==
153
367
is
154
367
<=
155
367
NEWLINE
comparison -> expr
367
or
comparison -> expr
367
and
comparison -> expr
367
if
comparison -> expr
368
*
atom -> False
368
@
atom -> False
368
<
atom -> False
368
or
atom -> False
368
is
atom -> False
368
>>
atom -> False
368
[
atom -> False
368
/
atom -> False
368
%
atom -> False
368
.
atom -> False
368
(
atom -> False
368
in
atom -> False
368
**
atom -> False
368
==
atom -> False
368
//
atom -> False
368
from
atom -> False
368
+
atom -> False
368
<<
atom -> False
368
NEWLINE
atom -> False
368
!=
atom -> False
368
<=
atom -> False
368
>
atom -> False
368
^
atom -> False
368
if
atom -> False
368
&
atom -> False
368
and
atom -> False
368
|
atom -> False
368
-
atom -> False
368
not
atom -> False
368
>=
atom -> False
369
not
expr -> xor_expr
369
|
841
369
==
expr -> xor_expr
369
in
expr -> xor_expr
369
if
expr -> xor_expr
369
>
expr -> xor_expr
369
or
expr -> xor_expr
369
NEWLINE
expr -> xor_expr
369
from
expr -> xor_expr
369
<=
expr -> xor_expr
369
<
expr -> xor_expr
369
is
expr -> xor_expr
369
>=
expr -> xor_expr
369
!=
expr -> xor_expr
369
and
expr -> xor_expr
370
!=
atom -> True
370
is
atom -> True
370
//
atom -> True
370
|
atom -> True
370
<=
atom -> True
370
^
atom -> True
370
%
atom -> True
370
@
atom -> True
370
**
atom -> True
370
(
atom -> True
370
NEWLINE
atom -> True
370
not
atom -> True
370
>>
atom -> True
370
<
atom -> True
370
==
atom -> True
370
and
atom -> True
370
in
atom -> True
370
&
atom -> True
370
.
atom -> True
370
<<
atom -> True
370
from
atom -> True
370
/
atom -> True
370
*
atom -> True
370
>
atom -> True
370
+
atom -> True
370
>=
atom -> True
370
or
atom -> True
370
-
atom -> True
370
[
atom -> True
370
if
atom -> True
371
&
atom -> STRING
371
**
atom -> STRING
371
%
atom -> STRING
371
NEWLINE
atom -> STRING
371
@
atom -> STRING
371
from
atom -> STRING
371
/
atom -> STRING
371
*
atom -> STRING
371
^
atom -> STRING
371
>=
atom -> STRING
371
if
atom -> STRING
371
<
atom -> STRING
371
>>
atom -> STRING
371
.
atom -> STRING
371
//
atom -> STRING
371
+
atom -> STRING
371
<<
atom -> STRING
371
and
atom -> STRING
371
[
atom -> STRING
371
or
atom -> STRING
371
in
atom -> STRING
371
not
atom -> STRING
371
>
atom -> STRING
371
(
atom -> STRING
371
!=
atom -> STRING
371
is
atom -> STRING
371
==
atom -> STRING
371
-
atom -> STRING
371
|
atom -> STRING
371
<=
atom -> STRING
372
atom_expr
356
372
NUMBER
362
372
NAME
363
372
[
364
372
atom
365
372
{
366
372
False
368
372
True
370
372
STRING
371
372
+
372
372
-
373
372
(
374
372
None
375
372
factor
842
372
power
381
372
~
382
373
atom_expr
356
373
NUMBER
362
373
NAME
363
373
[
364
373
atom
365
373
factor
843
373
{
366
373
False
368
373
True
370
373
STRING
371
373
+
372
373
-
373
373
(
374
373
None
375
373
power
381
373
~
382
374
and_test
217
374
atom_expr
218
374
and_expr
219
374
term
220
374
factor
221
374
shift_expr
222
374
arith_expr
223
374
NUMBER
224
374
NAME
225
374
not
226
374
[
227
374
{
228
374
expr
229
374
test_list_comp
844
374
not_test
231
374
False
232
374
xor_expr
234
374
STRING
235
374
)
845
374
lambda
236
374
atom
237
374
+
238
374
True
239
374
-
240
374
(
241
374
None
242
374
comparison
243
374
power
244
374
~
245
374
or_test
246
374
test
247
374
lambdef
248
374
test_list
249
375
!=
atom -> None
375
//
atom -> None
375
^
atom -> None
375
>=
atom -> None
375
&
atom -> None
375
**
atom -> None
375
NEWLINE
atom -> None
375
<
atom -> None
375
if
atom -> None
375
*
atom -> None
375
>
atom -> None
375
@
atom -> None
375
|
atom -> None
375
-
atom -> None
375
%
atom -> None
375
not
atom -> None
375
from
atom -> None
375
==
atom -> None
375
in
atom -> None
375
/
atom -> None
375
or
atom -> None
375
and
atom -> None
375
+
atom -> None
375
(
atom -> None
375
>>
atom -> None
375
is
atom -> None
375
[
atom -> None
375
<=
atom -> None
375
<<
atom -> None
375
.
atom -> None
376
:
846
376
vfpdef
212
376
varargslist
847
376
NAME
211
377
and
848
377
from
and_test -> not_test
377
or
and_test -> not_test
377
if
and_test -> not_test
377
NEWLINE
and_test -> not_test
378
or
not_test -> comparison
378
from
not_test -> comparison
378
if
not_test -> comparison
378
NEWLINE
not_test -> comparison
378
and
not_test -> comparison
379
if
849
379
from
test -> or_test
379
NEWLINE
test -> or_test
380
from
850
380
NEWLINE
raise_stmt -> raise test
381
*
factor -> power
381
>>
factor -> power
381
>=
factor -> power
381
<
factor -> power
381
&
factor -> power
381
|
factor -> power
381
@
factor -> power
381
!=
factor -> power
381
<=
factor -> power
381
//
factor -> power
381
in
factor -> power
381
and
factor -> power
381
+
factor -> power
381
>
factor -> power
381
-
factor -> power
381
not
factor -> power
381
is
factor -> power
381
==
factor -> power
381
%
factor -> power
381
if
factor -> power
381
or
factor -> power
381
^
factor -> power
381
from
factor -> power
381
NEWLINE
factor -> power
381
<<
factor -> power
381
/
factor -> power
382
atom_expr
356
382
NUMBER
362
382
NAME
363
382
[
364
382
atom
365
382
factor
851
382
{
366
382
False
368
382
True
370
382
STRING
371
382
+
372
382
-
373
382
(
374
382
None
375
382
power
381
382
~
382
383
NEWLINE
test -> lambdef
383
from
test -> lambdef
384
NEWLINE
or_test -> and_test
384
or
852
384
from
or_test -> and_test
384
if
or_test -> and_test
385
atom_expr
356
385
and_expr
357
385
term
358
385
factor
359
385
shift_expr
360
385
arith_expr
361
385
NUMBER
362
385
NAME
363
385
[
364
385
atom
365
385
{
366
385
expr
367
385
False
368
385
xor_expr
369
385
True
370
385
STRING
371
385
+
372
385
-
373
385
(
374
385
None
375
385
comparison
378
385
power
381
385
~
382
385
not_test
853
385
not
385
386
NEWLINE
global_stmt -> global namelist
387
$
program -> stmt program
388
$
program -> NEWLINE program
389
suite
854
389
factor
10
389
atom_expr
6
389
[
3
389
term
15
389
STRING
43
389
arith_expr
32
389
NUMBER
8
389
small_stmt
855
389
NAME
37
389
{
5
389
expr
7
389
not
51
389
True
9
389
shift_expr
12
389
atom
13
389
xor_expr
14
389
NEWLINE
856
389
(
34
389
None
29
389
and_test
20
389
and_expr
21
389
False
23
389
or_test
25
389
test
33
389
lambda
28
389
+
30
389
simple_stmt
857
389
nonlocal
66
389
-
36
389
not_test
40
389
power
47
389
lambdef
41
389
~
44
389
comparison
48
389
assert
67
389
global_stmt
68
389
continue
49
389
expr_stmt
50
389
test_list
62
389
raise
69
389
del_stmt
52
389
yield_stmt
53
389
raise_stmt
70
389
yield
56
389
assert_stmt
57
389
global
71
389
nonlocal_stmt
72
389
break_stmt
58
389
return_stmt
75
389
return
59
389
pass
60
389
continue_stmt
61
389
flow_stmt
76
389
break
63
389
del
64
389
pass_stmt
65
390
atom_expr
79
390
NUMBER
85
390
NAME
86
390
[
87
390
{
88
390
False
90
390
STRING
92
390
+
93
390
True
94
390
(
95
390
None
96
390
-
97
390
atom
98
390
power
99
390
~
100
390
factor
858
391
atom_expr
79
391
and_expr
80
391
term
81
391
factor
82
391
shift_expr
83
391
arith_expr
84
391
NUMBER
85
391
NAME
86
391
[
87
391
{
88
391
False
90
391
STRING
92
391
xor_expr
859
391
+
93
391
True
94
391
(
95
391
None
96
391
-
97
391
atom
98
391
power
99
391
~
100
392
atom_expr
79
392
factor
82
392
term
81
392
NUMBER
85
392
NAME
86
392
[
87
392
{
88
392
False
90
392
STRING
92
392
+
93
392
True
94
392
(
95
392
None
96
392
-
97
392
arith_expr
860
392
atom
98
392
power
99
392
~
100
393
atom_expr
79
393
factor
82
393
term
81
393
NUMBER
85
393
NAME
86
393
[
87
393
{
88
393
False
90
393
STRING
92
393
+
93
393
True
94
393
(
95
393
None
96
393
-
97
393
arith_expr
861
393
atom
98
393
power
99
393
~
100
394
atom_expr
79
394
factor
82
394
NUMBER
85
394
NAME
86
394
[
87
394
{
88
394
False
90
394
STRING
92
394
+
93
394
term
862
394
True
94
394
(
95
394
None
96
394
-
97
394
atom
98
394
power
99
394
~
100
395
atom_expr
79
395
factor
82
395
NUMBER
85
395
NAME
86
395
[
87
395
{
88
395
term
863
395
False
90
395
STRING
92
395
+
93
395
True
94
395
(
95
395
None
96
395
-
97
395
atom
98
395
power
99
395
~
100
396
atom_expr
79
396
factor
82
396
NUMBER
85
396
NAME
86
396
[
87
396
{
88
396
False
90
396
STRING
92
396
+
93
396
term
864
396
True
94
396
(
95
396
None
96
396
-
97
396
atom
98
396
power
99
396
~
100
397
atom_expr
79
397
factor
82
397
NUMBER
85
397
NAME
86
397
[
87
397
{
88
397
False
90
397
STRING
92
397
+
93
397
True
94
397
(
95
397
None
96
397
-
97
397
term
865
397
atom
98
397
power
99
397
~
100
398
atom_expr
79
398
term
866
398
factor
82
398
NUMBER
85
398
NAME
86
398
[
87
398
{
88
398
False
90
398
STRING
92
398
+
93
398
True
94
398
(
95
398
None
96
398
-
97
398
atom
98
398
power
99
398
~
100
399
atom_expr
79
399
factor
82
399
term
81
399
shift_expr
83
399
arith_expr
84
399
NUMBER
85
399
NAME
86
399
[
87
399
{
88
399
False
90
399
STRING
92
399
+
93
399
True
94
399
(
95
399
None
96
399
-
97
399
atom
98
399
power
99
399
~
100
399
and_expr
867
400
atom_expr
79
400
factor
82
400
term
81
400
arith_expr
84
400
NUMBER
85
400
NAME
86
400
[
87
400
{
88
400
False
90
400
STRING
92
400
+
93
400
True
94
400
(
95
400
None
96
400
-
97
400
atom
98
400
power
99
400
~
100
400
shift_expr
868
401
atom_expr
79
401
factor
82
401
term
81
401
arith_expr
84
401
NUMBER
85
401
NAME
86
401
[
87
401
{
88
401
False
90
401
STRING
92
401
+
93
401
shift_expr
869
401
True
94
401
(
95
401
-
97
401
None
96
401
atom
98
401
power
99
401
~
100
402
]
870
403
in
atom -> [ ]
403
>=
atom -> [ ]
403
%
atom -> [ ]
403
:
atom -> [ ]
403
is
atom -> [ ]
403
^
atom -> [ ]
403
//
atom -> [ ]
403
or
atom -> [ ]
403
not
atom -> [ ]
403
[
atom -> [ ]
403
and
atom -> [ ]
403
/
atom -> [ ]
403
!=
atom -> [ ]
403
>
atom -> [ ]
403
&
atom -> [ ]
403
**
atom -> [ ]
403
@
atom -> [ ]
403
==
atom -> [ ]
403
<<
atom -> [ ]
403
if
atom -> [ ]
403
<
atom -> [ ]
403
(
atom -> [ ]
403
<=
atom -> [ ]
403
*
atom -> [ ]
403
.
atom -> [ ]
403
>>
atom -> [ ]
403
|
atom -> [ ]
403
-
atom -> [ ]
403
+
atom -> [ ]
404
<<
atom -> { }
404
+
atom -> { }
404
//
atom -> { }
404
is
atom -> { }
404
>=
atom -> { }
404
<=
atom -> { }
404
>
atom -> { }
404
*
atom -> { }
404
^
atom -> { }
404
%
atom -> { }
404
>>
atom -> { }
404
:
atom -> { }
404
.
atom -> { }
404
not
atom -> { }
404
==
atom -> { }
404
if
atom -> { }
404
in
atom -> { }
404
<
atom -> { }
404
|
atom -> { }
404
(
atom -> { }
404
/
atom -> { }
404
and
atom -> { }
404
**
atom -> { }
404
@
atom -> { }
404
-
atom -> { }
404
&
atom -> { }
404
!=
atom -> { }
404
or
atom -> { }
404
[
atom -> { }
405
atom_expr
79
405
and_expr
80
405
term
81
405
factor
82
405
shift_expr
83
405
arith_expr
84
405
NUMBER
85
405
NAME
86
405
[
87
405
{
88
405
expr
89
405
False
90
405
xor_expr
91
405
STRING
92
405
comparison
871
405
+
93
405
True
94
405
(
95
405
None
96
405
-
97
405
atom
98
405
power
99
405
~
100
406
atom_expr
79
406
and_expr
80
406
term
81
406
factor
82
406
shift_expr
83
406
arith_expr
84
406
NUMBER
85
406
NAME
86
406
[
87
406
{
88
406
False
90
406
xor_expr
91
406
STRING
92
406
+
93
406
True
94
406
(
95
406
None
96
406
-
97
406
expr
872
406
atom
98
406
power
99
406
~
100
407
<<
factor -> + factor
407
&
factor -> + factor
407
>
factor -> + factor
407
if
factor -> + factor
407
not
factor -> + factor
407
+
factor -> + factor
407
^
factor -> + factor
407
==
factor -> + factor
407
/
factor -> + factor
407
|
factor -> + factor
407
>=
factor -> + factor
407
%
factor -> + factor
407
<
factor -> + factor
407
is
factor -> + factor
407
or
factor -> + factor
407
@
factor -> + factor
407
//
factor -> + factor
407
and
factor -> + factor
407
-
factor -> + factor
407
in
factor -> + factor
407
*
factor -> + factor
407
:
factor -> + factor
407
!=
factor -> + factor
407
>>
factor -> + factor
407
<=
factor -> + factor
408
)
873
409
>=
atom -> ( )
409
>>
atom -> ( )
409
not
atom -> ( )
409
if
atom -> ( )
409
&
atom -> ( )
409
^
atom -> ( )
409
.
atom -> ( )
409
/
atom -> ( )
409
in
atom -> ( )
409
:
atom -> ( )
409
>
atom -> ( )
409
%
atom -> ( )
409
(
atom -> ( )
409
==
atom -> ( )
409
[
atom -> ( )
409
<=
atom -> ( )
409
+
atom -> ( )
409
|
atom -> ( )
409
-
atom -> ( )
409
or
atom -> ( )
409
@
atom -> ( )
409
<<
atom -> ( )
409
is
atom -> ( )
409
**
atom -> ( )
409
*
atom -> ( )
409
and
atom -> ( )
409
<
atom -> ( )
409
!=
atom -> ( )
409
//
atom -> ( )
410
@
factor -> - factor
410
^
factor -> - factor
410
==
factor -> - factor
410
in
factor -> - factor
410
>>
factor -> - factor
410
//
factor -> - factor
410
and
factor -> - factor
410
:
factor -> - factor
410
<=
factor -> - factor
410
!=
factor -> - factor
410
-
factor -> - factor
410
&
factor -> - factor
410
not
factor -> - factor
410
>
factor -> - factor
410
*
factor -> - factor
410
%
factor -> - factor
410
/
factor -> - factor
410
<
factor -> - factor
410
|
factor -> - factor
410
+
factor -> - factor
410
if
factor -> - factor
410
<<
factor -> - factor
410
is
factor -> - factor
410
or
factor -> - factor
410
>=
factor -> - factor
411
atom_expr
472
411
and_expr
473
411
term
474
411
factor
475
411
shift_expr
476
411
arith_expr
477
411
NUMBER
478
411
NAME
479
411
[
480
411
{
481
411
expr
482
411
not_test
483
411
False
484
411
xor_expr
485
411
atom
487
411
STRING
488
411
+
489
411
(
490
411
True
491
411
-
492
411
None
493
411
subscriptlist
874
411
or_test
494
411
and_test
495
411
power
496
411
~
497
411
lambda
498
411
:
maybe_test -> 
411
maybe_test
499
411
test
500
411
not
501
411
comparison
502
411
lambdef
503
411
subscript
504
412
and_test
505
412
atom_expr
506
412
and_expr
507
412
term
508
412
factor
509
412
shift_expr
510
412
arith_expr
511
412
NUMBER
512
412
NAME
513
412
not
514
412
[
515
412
{
516
412
expr
517
412
not_test
519
412
False
520
412
xor_expr
521
412
STRING
522
412
lambda
523
412
arglist
875
412
atom
525
412
)
876
412
+
526
412
True
527
412
-
528
412
or_test
529
412
(
530
412
None
531
412
comparison
532
412
power
533
412
test
534
412
~
535
412
*
536
412
lambdef
537
412
**
538
412
argument
539
413
NAME
877
414
trailer_expr
878
414
[
411
414
(
412
414
.
413
414
trailer
414
414
<<
trailer_expr -> 
414
@
trailer_expr -> 
414
!=
trailer_expr -> 
414
-
trailer_expr -> 
414
^
trailer_expr -> 
414
<
trailer_expr -> 
414
/
trailer_expr -> 
414
is
trailer_expr -> 
414
==
trailer_expr -> 
414
&
trailer_expr -> 
414
>=
trailer_expr -> 
414
or
trailer_expr -> 
414
in
trailer_expr -> 
414
*
trailer_expr -> 
414
not
trailer_expr -> 
414
**
trailer_expr -> 
414
<=
trailer_expr -> 
414
+
trailer_expr -> 
414
//
trailer_expr -> 
414
%
trailer_expr -> 
414
>
trailer_expr -> 
414
:
trailer_expr -> 
414
|
trailer_expr -> 
414
if
trailer_expr -> 
414
and
trailer_expr -> 
414
>>
trailer_expr -> 
415
==
atom_expr -> atom trailer_expr
415
%
atom_expr -> atom trailer_expr
415
+
atom_expr -> atom trailer_expr
415
:
atom_expr -> atom trailer_expr
415
not
atom_expr -> atom trailer_expr
415
or
atom_expr -> atom trailer_expr
415
//
atom_expr -> atom trailer_expr
415
and
atom_expr -> atom trailer_expr
415
!=
atom_expr -> atom trailer_expr
415
<<
atom_expr -> atom trailer_expr
415
if
atom_expr -> atom trailer_expr
415
-
atom_expr -> atom trailer_expr
415
>>
atom_expr -> atom trailer_expr
415
**
atom_expr -> atom trailer_expr
415
/
atom_expr -> atom trailer_expr
415
<
atom_expr -> atom trailer_expr
415
in
atom_expr -> atom trailer_expr
415
&
atom_expr -> atom trailer_expr
415
is
atom_expr -> atom trailer_expr
415
|
atom_expr -> atom trailer_expr
415
>
atom_expr -> atom trailer_expr
415
>=
atom_expr -> atom trailer_expr
415
<=
atom_expr -> atom trailer_expr
415
@
atom_expr -> atom trailer_expr
415
*
atom_expr -> atom trailer_expr
415
^
atom_expr -> atom trailer_expr
416
<<
factor -> ~ factor
416
in
factor -> ~ factor
416
<=
factor -> ~ factor
416
if
factor -> ~ factor
416
|
factor -> ~ factor
416
<
factor -> ~ factor
416
>>
factor -> ~ factor
416
==
factor -> ~ factor
416
>=
factor -> ~ factor
416
!=
factor -> ~ factor
416
//
factor -> ~ factor
416
*
factor -> ~ factor
416
/
factor -> ~ factor
416
+
factor -> ~ factor
416
is
factor -> ~ factor
416
not
factor -> ~ factor
416
and
factor -> ~ factor
416
^
factor -> ~ factor
416
@
factor -> ~ factor
416
:
factor -> ~ factor
416
>
factor -> ~ factor
416
-
factor -> ~ factor
416
or
factor -> ~ factor
416
&
factor -> ~ factor
416
%
factor -> ~ factor
417
:
879
418
atom_expr
79
418
and_expr
80
418
term
81
418
factor
82
418
shift_expr
83
418
arith_expr
84
418
NUMBER
85
418
NAME
86
418
[
87
418
{
88
418
expr
89
418
False
90
418
xor_expr
91
418
STRING
92
418
+
93
418
True
94
418
(
95
418
None
96
418
-
97
418
atom
98
418
power
99
418
~
100
418
lambda
101
418
test
880
418
not_test
102
418
not
103
418
comparison
104
418
and_test
105
418
lambdef
106
418
or_test
107
419
atom_expr
79
419
and_expr
80
419
term
81
419
factor
82
419
shift_expr
83
419
arith_expr
84
419
NUMBER
85
419
NAME
86
419
[
87
419
{
88
419
expr
89
419
False
90
419
xor_expr
91
419
STRING
92
419
+
93
419
True
94
419
(
95
419
None
96
419
-
97
419
atom
98
419
power
99
419
~
100
419
and_test
881
419
not_test
102
419
not
103
419
comparison
104
420
if
not_test -> not not_test
420
and
not_test -> not not_test
420
or
not_test -> not not_test
420
:
not_test -> not not_test
421
atom_expr
79
421
and_expr
80
421
term
81
421
factor
82
421
shift_expr
83
421
arith_expr
84
421
NUMBER
85
421
NAME
86
421
[
87
421
{
88
421
expr
89
421
False
90
421
xor_expr
91
421
STRING
92
421
+
93
421
True
94
421
(
95
421
None
96
421
-
97
421
atom
98
421
power
99
421
~
100
421
not_test
102
421
or_test
882
421
not
103
421
comparison
104
421
and_test
105
422
atom_expr
590
422
and_expr
591
422
term
592
422
[
593
422
shift_expr
594
422
arith_expr
595
422
NUMBER
596
422
NAME
597
422
factor
598
422
{
599
422
expr
600
422
False
601
422
xor_expr
602
422
STRING
603
422
+
604
422
True
605
422
-
606
422
(
607
422
None
608
422
atom
609
422
power
610
422
~
611
422
not_test
612
422
or_test
883
422
not
613
422
comparison
614
422
and_test
615
423
and_test
110
423
atom_expr
111
423
and_expr
112
423
term
113
423
factor
114
423
shift_expr
115
423
arith_expr
116
423
NUMBER
117
423
NAME
118
423
[
119
423
{
121
423
expr
122
423
not_test
123
423
False
124
423
xor_expr
125
423
atom
126
423
STRING
127
423
+
128
423
(
129
423
True
131
423
-
132
423
None
133
423
comparison
134
423
power
137
423
~
138
423
not
141
423
or_test
884
424
atom_expr
111
424
NUMBER
117
424
NAME
118
424
[
119
424
{
121
424
False
124
424
atom
126
424
STRING
127
424
+
128
424
(
129
424
True
131
424
-
132
424
None
133
424
power
137
424
~
138
424
factor
885
425
atom_expr
111
425
and_expr
112
425
term
113
425
factor
114
425
shift_expr
115
425
arith_expr
116
425
NUMBER
117
425
NAME
118
425
[
119
425
{
121
425
False
124
425
atom
126
425
STRING
127
425
xor_expr
886
425
+
128
425
(
129
425
True
131
425
-
132
425
None
133
425
power
137
425
~
138
426
atom_expr
111
426
factor
114
426
term
113
426
NUMBER
117
426
NAME
118
426
[
119
426
{
121
426
False
124
426
atom
126
426
STRING
127
426
+
128
426
(
129
426
True
131
426
-
132
426
None
133
426
arith_expr
887
426
power
137
426
~
138
427
atom_expr
111
427
factor
114
427
term
113
427
NUMBER
117
427
NAME
118
427
[
119
427
{
121
427
False
124
427
atom
126
427
STRING
127
427
+
128
427
(
129
427
True
131
427
-
132
427
arith_expr
888
427
None
133
427
power
137
427
~
138
428
atom_expr
111
428
factor
114
428
NUMBER
117
428
NAME
118
428
[
119
428
{
121
428
False
124
428
atom
126
428
STRING
127
428
+
128
428
(
129
428
term
889
428
True
131
428
-
132
428
None
133
428
power
137
428
~
138
429
atom_expr
111
429
factor
114
429
NUMBER
117
429
NAME
118
429
[
119
429
{
121
429
term
890
429
False
124
429
atom
126
429
STRING
127
429
+
128
429
(
129
429
True
131
429
-
132
429
None
133
429
power
137
429
~
138
430
atom_expr
111
430
factor
114
430
NUMBER
117
430
NAME
118
430
[
119
430
{
121
430
False
124
430
atom
126
430
STRING
127
430
+
128
430
term
891
430
(
129
430
True
131
430
-
132
430
None
133
430
power
137
430
~
138
431
atom_expr
111
431
factor
114
431
NUMBER
117
431
NAME
118
431
[
119
431
{
121
431
False
124
431
atom
126
431
STRING
127
431
+
128
431
(
129
431
True
131
431
-
132
431
None
133
431
term
892
431
power
137
431
~
138
432
atom_expr
111
432
factor
114
432
NUMBER
117
432
NAME
118
432
[
119
432
{
121
432
False
124
432
atom
126
432
STRING
127
432
+
128
432
(
129
432
True
131
432
-
132
432
None
133
432
term
893
432
power
137
432
~
138
433
atom_expr
111
433
factor
114
433
term
113
433
shift_expr
115
433
arith_expr
116
433
NUMBER
117
433
NAME
118
433
[
119
433
{
121
433
False
124
433
atom
126
433
STRING
127
433
+
128
433
(
129
433
True
131
433
-
132
433
None
133
433
power
137
433
~
138
433
and_expr
894
434
atom_expr
111
434
factor
114
434
term
113
434
arith_expr
116
434
NUMBER
117
434
NAME
118
434
[
119
434
{
121
434
False
124
434
atom
126
434
STRING
127
434
+
128
434
(
129
434
True
131
434
-
132
434
None
133
434
power
137
434
~
138
434
shift_expr
895
435
atom_expr
111
435
factor
114
435
term
113
435
arith_expr
116
435
NUMBER
117
435
NAME
118
435
[
119
435
{
121
435
False
124
435
atom
126
435
STRING
127
435
+
128
435
shift_expr
896
435
(
129
435
True
131
435
-
132
435
None
133
435
power
137
435
~
138
436
]
897
437
in
atom -> [ ]
437
>=
atom -> [ ]
437
%
atom -> [ ]
437
is
atom -> [ ]
437
^
atom -> [ ]
437
//
atom -> [ ]
437
or
atom -> [ ]
437
not
atom -> [ ]
437
[
atom -> [ ]
437
and
atom -> [ ]
437
/
atom -> [ ]
437
!=
atom -> [ ]
437
>
atom -> [ ]
437
]
atom -> [ ]
437
&
atom -> [ ]
437
**
atom -> [ ]
437
@
atom -> [ ]
437
==
atom -> [ ]
437
<<
atom -> [ ]
437
if
atom -> [ ]
437
<
atom -> [ ]
437
,
atom -> [ ]
437
(
atom -> [ ]
437
<=
atom -> [ ]
437
*
atom -> [ ]
437
.
atom -> [ ]
437
>>
atom -> [ ]
437
|
atom -> [ ]
437
-
atom -> [ ]
437
+
atom -> [ ]
437
for
atom -> [ ]
438
**=
atom -> [ test_list_comp ]
438
and
atom -> [ test_list_comp ]
438
<=
atom -> [ test_list_comp ]
438
%=
atom -> [ test_list_comp ]
438
@=
atom -> [ test_list_comp ]
438
<<=
atom -> [ test_list_comp ]
438
**
atom -> [ test_list_comp ]
438
^
atom -> [ test_list_comp ]
438
*=
atom -> [ test_list_comp ]
438
|=
atom -> [ test_list_comp ]
438
NEWLINE
atom -> [ test_list_comp ]
438
&=
atom -> [ test_list_comp ]
438
[
atom -> [ test_list_comp ]
438
,
atom -> [ test_list_comp ]
438
!=
atom -> [ test_list_comp ]
438
<
atom -> [ test_list_comp ]
438
/
atom -> [ test_list_comp ]
438
-
atom -> [ test_list_comp ]
438
+=
atom -> [ test_list_comp ]
438
>=
atom -> [ test_list_comp ]
438
if
atom -> [ test_list_comp ]
438
%
atom -> [ test_list_comp ]
438
-=
atom -> [ test_list_comp ]
438
is
atom -> [ test_list_comp ]
438
+
atom -> [ test_list_comp ]
438
&
atom -> [ test_list_comp ]
438
@
atom -> [ test_list_comp ]
438
or
atom -> [ test_list_comp ]
438
in
atom -> [ test_list_comp ]
438
/=
atom -> [ test_list_comp ]
438
==
atom -> [ test_list_comp ]
438
not
atom -> [ test_list_comp ]
438
^=
atom -> [ test_list_comp ]
438
.
atom -> [ test_list_comp ]
438
|
atom -> [ test_list_comp ]
438
=
atom -> [ test_list_comp ]
438
>
atom -> [ test_list_comp ]
438
>>=
atom -> [ test_list_comp ]
438
<<
atom -> [ test_list_comp ]
438
//
atom -> [ test_list_comp ]
438
(
atom -> [ test_list_comp ]
438
*
atom -> [ test_list_comp ]
438
//=
atom -> [ test_list_comp ]
438
:
atom -> [ test_list_comp ]
438
>>
atom -> [ test_list_comp ]
439
<<
atom -> { }
439
+
atom -> { }
439
//
atom -> { }
439
is
atom -> { }
439
>=
atom -> { }
439
<=
atom -> { }
439
>
atom -> { }
439
*
atom -> { }
439
^
atom -> { }
439
%
atom -> { }
439
>>
atom -> { }
439
.
atom -> { }
439
not
atom -> { }
439
==
atom -> { }
439
if
atom -> { }
439
in
atom -> { }
439
<
atom -> { }
439
|
atom -> { }
439
]
atom -> { }
439
(
atom -> { }
439
/
atom -> { }
439
for
atom -> { }
439
and
atom -> { }
439
**
atom -> { }
439
@
atom -> { }
439
-
atom -> { }
439
&
atom -> { }
439
,
atom -> { }
439
!=
atom -> { }
439
or
atom -> { }
439
[
atom -> { }
440
atom_expr
111
440
and_expr
112
440
term
113
440
factor
114
440
shift_expr
115
440
arith_expr
116
440
NUMBER
117
440
NAME
118
440
[
119
440
{
121
440
expr
122
440
False
124
440
xor_expr
125
440
atom
126
440
STRING
127
440
comparison
898
440
+
128
440
(
129
440
True
131
440
-
132
440
None
133
440
power
137
440
~
138
441
atom_expr
111
441
and_expr
112
441
term
113
441
factor
114
441
shift_expr
115
441
arith_expr
116
441
NUMBER
117
441
NAME
118
441
[
119
441
{
121
441
expr
122
441
not_test
123
441
False
124
441
xor_expr
125
441
atom
126
441
STRING
127
441
+
128
441
(
129
441
True
131
441
-
132
441
None
133
441
comparison
134
441
and_test
899
441
power
137
441
~
138
441
not
141
442
atom_expr
111
442
and_expr
112
442
term
113
442
factor
114
442
shift_expr
115
442
expr
900
442
arith_expr
116
442
NUMBER
117
442
NAME
118
442
[
119
442
{
121
442
False
124
442
xor_expr
125
442
atom
126
442
STRING
127
442
+
128
442
(
129
442
True
131
442
-
132
442
None
133
442
power
137
442
~
138
443
atom_expr
472
443
and_expr
473
443
term
474
443
factor
475
443
shift_expr
476
443
arith_expr
477
443
NUMBER
478
443
NAME
479
443
[
480
443
{
481
443
expr
482
443
not_test
483
443
False
484
443
xor_expr
485
443
atom
487
443
STRING
488
443
+
489
443
(
490
443
True
491
443
-
492
443
None
493
443
subscriptlist
901
443
or_test
494
443
and_test
495
443
power
496
443
~
497
443
lambda
498
443
:
maybe_test -> 
443
maybe_test
499
443
test
500
443
not
501
443
comparison
502
443
lambdef
503
443
subscript
504
444
and_test
505
444
atom_expr
506
444
and_expr
507
444
term
508
444
factor
509
444
shift_expr
510
444
arith_expr
511
444
NUMBER
512
444
NAME
513
444
not
514
444
[
515
444
{
516
444
expr
517
444
)
902
444
not_test
519
444
False
520
444
xor_expr
521
444
STRING
522
444
lambda
523
444
arglist
903
444
atom
525
444
+
526
444
True
527
444
-
528
444
or_test
529
444
(
530
444
None
531
444
comparison
532
444
power
533
444
test
534
444
~
535
444
*
536
444
lambdef
537
444
**
538
444
argument
539
445
NAME
904
446
trailer_expr
905
446
[
443
446
(
444
446
.
445
446
trailer
446
446
<<
trailer_expr -> 
446
@
trailer_expr -> 
446
!=
trailer_expr -> 
446
-
trailer_expr -> 
446
]
trailer_expr -> 
446
^
trailer_expr -> 
446
<
trailer_expr -> 
446
for
trailer_expr -> 
446
/
trailer_expr -> 
446
is
trailer_expr -> 
446
==
trailer_expr -> 
446
&
trailer_expr -> 
446
>=
trailer_expr -> 
446
or
trailer_expr -> 
446
in
trailer_expr -> 
446
*
trailer_expr -> 
446
not
trailer_expr -> 
446
**
trailer_expr -> 
446
<=
trailer_expr -> 
446
+
trailer_expr -> 
446
//
trailer_expr -> 
446
%
trailer_expr -> 
446
>
trailer_expr -> 
446
,
trailer_expr -> 
446
|
trailer_expr -> 
446
if
trailer_expr -> 
446
and
trailer_expr -> 
446
>>
trailer_expr -> 
447
==
atom_expr -> atom trailer_expr
447
%
atom_expr -> atom trailer_expr
447
+
atom_expr -> atom trailer_expr
447
not
atom_expr -> atom trailer_expr
447
or
atom_expr -> atom trailer_expr
447
//
atom_expr -> atom trailer_expr
447
and
atom_expr -> atom trailer_expr
447
!=
atom_expr -> atom trailer_expr
447
<<
atom_expr -> atom trailer_expr
447
for
atom_expr -> atom trailer_expr
447
if
atom_expr -> atom trailer_expr
447
-
atom_expr -> atom trailer_expr
447
>>
atom_expr -> atom trailer_expr
447
**
atom_expr -> atom trailer_expr
447
/
atom_expr -> atom trailer_expr
447
<
atom_expr -> atom trailer_expr
447
in
atom_expr -> atom trailer_expr
447
&
atom_expr -> atom trailer_expr
447
is
atom_expr -> atom trailer_expr
447
|
atom_expr -> atom trailer_expr
447
]
atom_expr -> atom trailer_expr
447
>
atom_expr -> atom trailer_expr
447
>=
atom_expr -> atom trailer_expr
447
<=
atom_expr -> atom trailer_expr
447
@
atom_expr -> atom trailer_expr
447
*
atom_expr -> atom trailer_expr
447
,
atom_expr -> atom trailer_expr
447
^
atom_expr -> atom trailer_expr
448
<<
factor -> + factor
448
,
factor -> + factor
448
&
factor -> + factor
448
>
factor -> + factor
448
if
factor -> + factor
448
not
factor -> + factor
448
+
factor -> + factor
448
^
factor -> + factor
448
==
factor -> + factor
448
/
factor -> + factor
448
|
factor -> + factor
448
>=
factor -> + factor
448
for
factor -> + factor
448
%
factor -> + factor
448
<
factor -> + factor
448
is
factor -> + factor
448
]
factor -> + factor
448
or
factor -> + factor
448
@
factor -> + factor
448
//
factor -> + factor
448
and
factor -> + factor
448
-
factor -> + factor
448
in
factor -> + factor
448
*
factor -> + factor
448
!=
factor -> + factor
448
>>
factor -> + factor
448
<=
factor -> + factor
449
)
906
450
>=
atom -> ( )
450
]
atom -> ( )
450
>>
atom -> ( )
450
not
atom -> ( )
450
if
atom -> ( )
450
&
atom -> ( )
450
^
atom -> ( )
450
.
atom -> ( )
450
for
atom -> ( )
450
/
atom -> ( )
450
in
atom -> ( )
450
>
atom -> ( )
450
%
atom -> ( )
450
(
atom -> ( )
450
==
atom -> ( )
450
,
atom -> ( )
450
[
atom -> ( )
450
<=
atom -> ( )
450
+
atom -> ( )
450
|
atom -> ( )
450
-
atom -> ( )
450
or
atom -> ( )
450
@
atom -> ( )
450
<<
atom -> ( )
450
is
atom -> ( )
450
**
atom -> ( )
450
*
atom -> ( )
450
and
atom -> ( )
450
<
atom -> ( )
450
!=
atom -> ( )
450
//
atom -> ( )
451
@
factor -> - factor
451
^
factor -> - factor
451
==
factor -> - factor
451
]
factor -> - factor
451
in
factor -> - factor
451
>>
factor -> - factor
451
,
factor -> - factor
451
//
factor -> - factor
451
and
factor -> - factor
451
for
factor -> - factor
451
<=
factor -> - factor
451
!=
factor -> - factor
451
-
factor -> - factor
451
&
factor -> - factor
451
not
factor -> - factor
451
>
factor -> - factor
451
*
factor -> - factor
451
%
factor -> - factor
451
/
factor -> - factor
451
<
factor -> - factor
451
|
factor -> - factor
451
+
factor -> - factor
451
if
factor -> - factor
451
<<
factor -> - factor
451
is
factor -> - factor
451
or
factor -> - factor
451
>=
factor -> - factor
452
atom_expr
590
452
and_expr
591
452
term
592
452
[
593
452
shift_expr
594
452
arith_expr
595
452
NUMBER
596
452
NAME
597
452
factor
598
452
{
599
452
expr
600
452
False
601
452
xor_expr
602
452
STRING
603
452
+
604
452
True
605
452
-
606
452
(
607
452
None
608
452
atom
609
452
power
610
452
~
611
452
not_test
612
452
not
613
452
comparison
614
452
or_test
907
452
and_test
615
453
atom_expr
908
453
and_expr
909
453
term
910
453
factor
911
453
shift_expr
912
453
arith_expr
913
453
NUMBER
914
453
NAME
915
453
[
916
453
{
917
453
expr
918
453
not_test
919
453
False
920
453
xor_expr
921
453
atom
922
453
STRING
923
453
+
924
453
(
925
453
True
926
453
-
927
453
None
928
453
or_test
929
453
test
930
453
and_test
931
453
power
932
453
~
933
453
lambda
934
453
not
935
453
comparison
936
453
test_list
937
453
lambdef
938
454
]
test_list_comp -> test comp_for
455
atom_expr
252
455
True
253
455
and_expr
254
455
(
255
455
NUMBER
256
455
NAME
258
455
{
259
455
False
260
455
arith_expr
261
455
STRING
262
455
power
263
455
[
264
455
factor
265
455
~
266
455
atom
267
455
+
268
455
term
269
455
None
270
455
shift_expr
271
455
xor_expr
272
455
expr
273
455
-
274
455
expr_list
939
456
for
factor -> ~ factor
456
<<
factor -> ~ factor
456
in
factor -> ~ factor
456
<=
factor -> ~ factor
456
if
factor -> ~ factor
456
|
factor -> ~ factor
456
<
factor -> ~ factor
456
>>
factor -> ~ factor
456
==
factor -> ~ factor
456
>=
factor -> ~ factor
456
!=
factor -> ~ factor
456
,
factor -> ~ factor
456
//
factor -> ~ factor
456
*
factor -> ~ factor
456
/
factor -> ~ factor
456
+
factor -> ~ factor
456
]
factor -> ~ factor
456
is
factor -> ~ factor
456
not
factor -> ~ factor
456
and
factor -> ~ factor
456
^
factor -> ~ factor
456
@
factor -> ~ factor
456
>
factor -> ~ factor
456
-
factor -> ~ factor
456
or
factor -> ~ factor
456
&
factor -> ~ factor
456
%
factor -> ~ factor
457
and_test
110
457
atom_expr
111
457
and_expr
112
457
term
113
457
factor
114
457
shift_expr
115
457
arith_expr
116
457
NUMBER
117
457
NAME
118
457
[
119
457
{
121
457
expr
122
457
not_test
123
457
False
124
457
xor_expr
125
457
atom
126
457
STRING
127
457
+
128
457
(
129
457
True
131
457
-
132
457
test
940
457
None
133
457
comparison
134
457
or_test
135
457
power
137
457
~
138
457
lambda
139
457
lambdef
140
457
not
141
458
:
941
459
for
not_test -> not not_test
459
if
not_test -> not not_test
459
]
not_test -> not not_test
459
,
not_test -> not not_test
459
or
not_test -> not not_test
459
and
not_test -> not not_test
460
*
power -> atom_expr ** factor
460
/=
power -> atom_expr ** factor
460
:
power -> atom_expr ** factor
460
in
power -> atom_expr ** factor
460
<
power -> atom_expr ** factor
460
if
power -> atom_expr ** factor
460
+=
power -> atom_expr ** factor
460
-
power -> atom_expr ** factor
460
>>
power -> atom_expr ** factor
460
>>=
power -> atom_expr ** factor
460
//=
power -> atom_expr ** factor
460
<=
power -> atom_expr ** factor
460
and
power -> atom_expr ** factor
460
==
power -> atom_expr ** factor
460
^=
power -> atom_expr ** factor
460
NEWLINE
power -> atom_expr ** factor
460
/
power -> atom_expr ** factor
460
=
power -> atom_expr ** factor
460
%
power -> atom_expr ** factor
460
*=
power -> atom_expr ** factor
460
@=
power -> atom_expr ** factor
460
-=
power -> atom_expr ** factor
460
^
power -> atom_expr ** factor
460
<<
power -> atom_expr ** factor
460
,
power -> atom_expr ** factor
460
>
power -> atom_expr ** factor
460
//
power -> atom_expr ** factor
460
is
power -> atom_expr ** factor
460
@
power -> atom_expr ** factor
460
+
power -> atom_expr ** factor
460
%=
power -> atom_expr ** factor
460
&=
power -> atom_expr ** factor
460
<<=
power -> atom_expr ** factor
460
|
power -> atom_expr ** factor
460
!=
power -> atom_expr ** factor
460
|=
power -> atom_expr ** factor
460
**=
power -> atom_expr ** factor
460
>=
power -> atom_expr ** factor
460
or
power -> atom_expr ** factor
460
&
power -> atom_expr ** factor
460
not
power -> atom_expr ** factor
461
if
comparison -> expr comp_op comparison
461
&=
comparison -> expr comp_op comparison
461
/=
comparison -> expr comp_op comparison
461
:
comparison -> expr comp_op comparison
461
>>=
comparison -> expr comp_op comparison
461
+=
comparison -> expr comp_op comparison
461
<<=
comparison -> expr comp_op comparison
461
//=
comparison -> expr comp_op comparison
461
**=
comparison -> expr comp_op comparison
461
-=
comparison -> expr comp_op comparison
461
and
comparison -> expr comp_op comparison
461
or
comparison -> expr comp_op comparison
461
^=
comparison -> expr comp_op comparison
461
%=
comparison -> expr comp_op comparison
461
*=
comparison -> expr comp_op comparison
461
=
comparison -> expr comp_op comparison
461
|=
comparison -> expr comp_op comparison
461
NEWLINE
comparison -> expr comp_op comparison
461
@=
comparison -> expr comp_op comparison
461
,
comparison -> expr comp_op comparison
462
[
comp_op -> not in
462
-
comp_op -> not in
462
STRING
comp_op -> not in
462
None
comp_op -> not in
462
(
comp_op -> not in
462
False
comp_op -> not in
462
NAME
comp_op -> not in
462
NUMBER
comp_op -> not in
462
True
comp_op -> not in
462
{
comp_op -> not in
462
~
comp_op -> not in
462
+
comp_op -> not in
463
NAME
comp_op -> is not
463
True
comp_op -> is not
463
[
comp_op -> is not
463
None
comp_op -> is not
463
STRING
comp_op -> is not
463
{
comp_op -> is not
463
+
comp_op -> is not
463
(
comp_op -> is not
463
False
comp_op -> is not
463
-
comp_op -> is not
463
NUMBER
comp_op -> is not
463
~
comp_op -> is not
464
^=
term -> factor * term
464
|
term -> factor * term
464
*=
term -> factor * term
464
-
term -> factor * term
464
in
term -> factor * term
464
and
term -> factor * term
464
@=
term -> factor * term
464
NEWLINE
term -> factor * term
464
<<
term -> factor * term
464
>=
term -> factor * term
464
if
term -> factor * term
464
/=
term -> factor * term
464
<<=
term -> factor * term
464
or
term -> factor * term
464
+=
term -> factor * term
464
<=
term -> factor * term
464
-=
term -> factor * term
464
is
term -> factor * term
464
**=
term -> factor * term
464
:
term -> factor * term
464
^
term -> factor * term
464
!=
term -> factor * term
464
|=
term -> factor * term
464
=
term -> factor * term
464
==
term -> factor * term
464
,
term -> factor * term
464
&
term -> factor * term
464
>
term -> factor * term
464
&=
term -> factor * term
464
not
term -> factor * term
464
<
term -> factor * term
464
//=
term -> factor * term
464
+
term -> factor * term
464
>>
term -> factor * term
464
%=
term -> factor * term
464
>>=
term -> factor * term
465
>=
term -> factor / term
465
!=
term -> factor / term
465
+=
term -> factor / term
465
^=
term -> factor / term
465
^
term -> factor / term
465
not
term -> factor / term
465
in
term -> factor / term
465
and
term -> factor / term
465
<<
term -> factor / term
465
,
term -> factor / term
465
@=
term -> factor / term
465
*=
term -> factor / term
465
/=
term -> factor / term
465
+
term -> factor / term
465
>
term -> factor / term
465
or
term -> factor / term
465
|
term -> factor / term
465
if
term -> factor / term
465
>>
term -> factor / term
465
NEWLINE
term -> factor / term
465
>>=
term -> factor / term
465
-=
term -> factor / term
465
**=
term -> factor / term
465
<
term -> factor / term
465
%=
term -> factor / term
465
&
term -> factor / term
465
-
term -> factor / term
465
|=
term -> factor / term
465
is
term -> factor / term
465
==
term -> factor / term
465
//=
term -> factor / term
465
<=
term -> factor / term
465
:
term -> factor / term
465
<<=
term -> factor / term
465
&=
term -> factor / term
465
=
term -> factor / term
466
is
term -> factor // term
466
&=
term -> factor // term
466
**=
term -> factor // term
466
if
term -> factor // term
466
/=
term -> factor // term
466
>
term -> factor // term
466
==
term -> factor // term
466
>>=
term -> factor // term
466
+
term -> factor // term
466
+=
term -> factor // term
466
^
term -> factor // term
466
<<=
term -> factor // term
466
-
term -> factor // term
466
^=
term -> factor // term
466
-=
term -> factor // term
466
,
term -> factor // term
466
*=
term -> factor // term
466
in
term -> factor // term
466
>>
term -> factor // term
466
NEWLINE
term -> factor // term
466
|
term -> factor // term
466
=
term -> factor // term
466
!=
term -> factor // term
466
<<
term -> factor // term
466
&
term -> factor // term
466
//=
term -> factor // term
466
@=
term -> factor // term
466
not
term -> factor // term
466
<=
term -> factor // term
466
%=
term -> factor // term
466
<
term -> factor // term
466
:
term -> factor // term
466
and
term -> factor // term
466
>=
term -> factor // term
466
or
term -> factor // term
466
|=
term -> factor // term
467
**=
term -> factor % term
467
<<=
term -> factor % term
467
!=
term -> factor % term
467
>>
term -> factor % term
467
&=
term -> factor % term
467
==
term -> factor % term
467
+=
term -> factor % term
467
%=
term -> factor % term
467
>=
term -> factor % term
467
//=
term -> factor % term
467
,
term -> factor % term
467
^
term -> factor % term
467
not
term -> factor % term
467
or
term -> factor % term
467
if
term -> factor % term
467
<=
term -> factor % term
467
-=
term -> factor % term
467
:
term -> factor % term
467
/=
term -> factor % term
467
<
term -> factor % term
467
^=
term -> factor % term
467
is
term -> factor % term
467
-
term -> factor % term
467
+
term -> factor % term
467
@=
term -> factor % term
467
=
term -> factor % term
467
in
term -> factor % term
467
>>=
term -> factor % term
467
>
term -> factor % term
467
<<
term -> factor % term
467
and
term -> factor % term
467
NEWLINE
term -> factor % term
467
|=
term -> factor % term
467
|
term -> factor % term
467
*=
term -> factor % term
467
&
term -> factor % term
468
=
term -> factor @ term
468
-
term -> factor @ term
468
%=
term -> factor @ term
468
>>=
term -> factor @ term
468
&
term -> factor @ term
468
^=
term -> factor @ term
468
**=
term -> factor @ term
468
*=
term -> factor @ term
468
^
term -> factor @ term
468
@=
term -> factor @ term
468
:
term -> factor @ term
468
//=
term -> factor @ term
468
NEWLINE
term -> factor @ term
468
!=
term -> factor @ term
468
<<
term -> factor @ term
468
is
term -> factor @ term
468
<=
term -> factor @ term
468
and
term -> factor @ term
468
==
term -> factor @ term
468
+
term -> factor @ term
468
,
term -> factor @ term
468
>
term -> factor @ term
468
if
term -> factor @ term
468
not
term -> factor @ term
468
>>
term -> factor @ term
468
-=
term -> factor @ term
468
|=
term -> factor @ term
468
|
term -> factor @ term
468
>=
term -> factor @ term
468
<<=
term -> factor @ term
468
in
term -> factor @ term
468
+=
term -> factor @ term
468
<
term -> factor @ term
468
or
term -> factor @ term
468
/=
term -> factor @ term
468
&=
term -> factor @ term
469
atom_expr
6
469
factor
10
469
[
3
469
term
15
469
STRING
43
469
arith_expr
32
469
NUMBER
8
469
small_stmt
4
469
NAME
37
469
{
5
469
expr
7
469
not
51
469
True
9
469
shift_expr
12
469
atom
13
469
xor_expr
14
469
NEWLINE
942
469
(
34
469
None
29
469
and_test
20
469
and_expr
21
469
False
23
469
or_test
25
469
test
33
469
lambda
28
469
+
30
469
simple_stmt
943
469
suite
944
469
nonlocal
66
469
-
36
469
not_test
40
469
power
47
469
lambdef
41
469
~
44
469
comparison
48
469
assert
67
469
global_stmt
68
469
continue
49
469
expr_stmt
50
469
test_list
62
469
raise
69
469
del_stmt
52
469
yield_stmt
53
469
raise_stmt
70
469
yield
56
469
assert_stmt
57
469
global
71
469
nonlocal_stmt
72
469
break_stmt
58
469
return_stmt
75
469
return
59
469
pass
60
469
continue_stmt
61
469
flow_stmt
76
469
break
63
469
del
64
469
pass_stmt
65
470
and_test
505
470
atom_expr
506
470
and_expr
507
470
term
508
470
factor
509
470
shift_expr
510
470
arith_expr
511
470
NUMBER
512
470
NAME
513
470
not
514
470
[
515
470
{
516
470
expr
517
470
arglist
945
470
not_test
519
470
False
520
470
xor_expr
521
470
STRING
522
470
lambda
523
470
atom
525
470
+
526
470
True
527
470
-
528
470
or_test
529
470
(
530
470
None
531
470
comparison
532
470
power
533
470
)
946
470
test
534
470
~
535
470
*
536
470
lambdef
537
470
**
538
470
argument
539
471
%=
and_expr -> shift_expr & and_expr
471
^
and_expr -> shift_expr & and_expr
471
is
and_expr -> shift_expr & and_expr
471
<=
and_expr -> shift_expr & and_expr
471
+=
and_expr -> shift_expr & and_expr
471
,
and_expr -> shift_expr & and_expr
471
//=
and_expr -> shift_expr & and_expr
471
|=
and_expr -> shift_expr & and_expr
471
&=
and_expr -> shift_expr & and_expr
471
@=
and_expr -> shift_expr & and_expr
471
or
and_expr -> shift_expr & and_expr
471
>
and_expr -> shift_expr & and_expr
471
in
and_expr -> shift_expr & and_expr
471
==
and_expr -> shift_expr & and_expr
471
NEWLINE
and_expr -> shift_expr & and_expr
471
<
and_expr -> shift_expr & and_expr
471
^=
and_expr -> shift_expr & and_expr
471
>=
and_expr -> shift_expr & and_expr
471
if
and_expr -> shift_expr & and_expr
471
not
and_expr -> shift_expr & and_expr
471
/=
and_expr -> shift_expr & and_expr
471
>>=
and_expr -> shift_expr & and_expr
471
and
and_expr -> shift_expr & and_expr
471
:
and_expr -> shift_expr & and_expr
471
!=
and_expr -> shift_expr & and_expr
471
<<=
and_expr -> shift_expr & and_expr
471
=
and_expr -> shift_expr & and_expr
471
*=
and_expr -> shift_expr & and_expr
471
|
and_expr -> shift_expr & and_expr
471
**=
and_expr -> shift_expr & and_expr
471
-=
and_expr -> shift_expr & and_expr
472
**
947
472
!=
power -> atom_expr
472
|
power -> atom_expr
472
:
power -> atom_expr
472
>
power -> atom_expr
472
/
power -> atom_expr
472
^
power -> atom_expr
472
&
power -> atom_expr
472
<
power -> atom_expr
472
not
power -> atom_expr
472
]
power -> atom_expr
472
<=
power -> atom_expr
472
%
power -> atom_expr
472
and
power -> atom_expr
472
*
power -> atom_expr
472
@
power -> atom_expr
472
>>
power -> atom_expr
472
if
power -> atom_expr
472
+
power -> atom_expr
472
,
power -> atom_expr
472
in
power -> atom_expr
472
is
power -> atom_expr
472
//
power -> atom_expr
472
or
power -> atom_expr
472
<<
power -> atom_expr
472
-
power -> atom_expr
472
==
power -> atom_expr
472
>=
power -> atom_expr
473
,
xor_expr -> and_expr
473
^
948
473
not
xor_expr -> and_expr
473
]
xor_expr -> and_expr
473
>=
xor_expr -> and_expr
473
:
xor_expr -> and_expr
473
and
xor_expr -> and_expr
473
is
xor_expr -> and_expr
473
or
xor_expr -> and_expr
473
|
xor_expr -> and_expr
473
in
xor_expr -> and_expr
473
==
xor_expr -> and_expr
473
>
xor_expr -> and_expr
473
<
xor_expr -> and_expr
473
if
xor_expr -> and_expr
473
<=
xor_expr -> and_expr
473
!=
xor_expr -> and_expr
474
+
949
474
in
arith_expr -> term
474
if
arith_expr -> term
474
|
arith_expr -> term
474
==
arith_expr -> term
474
<
arith_expr -> term
474
-
950
474
<=
arith_expr -> term
474
^
arith_expr -> term
474
is
arith_expr -> term
474
>>
arith_expr -> term
474
]
arith_expr -> term
474
or
arith_expr -> term
474
&
arith_expr -> term
474
>
arith_expr -> term
474
>=
arith_expr -> term
474
<<
arith_expr -> term
474
and
arith_expr -> term
474
:
arith_expr -> term
474
not
arith_expr -> term
474
,
arith_expr -> term
474
!=
arith_expr -> term
475
*
951
475
%
952
475
//
953
475
/
954
475
and
term -> factor
475
@
955
475
==
term -> factor
475
>=
term -> factor
475
+
term -> factor
475
<=
term -> factor
475
or
term -> factor
475
<<
term -> factor
475
not
term -> factor
475
,
term -> factor
475
<
term -> factor
475
-
term -> factor
475
in
term -> factor
475
!=
term -> factor
475
is
term -> factor
475
>>
term -> factor
475
:
term -> factor
475
^
term -> factor
475
|
term -> factor
475
>
term -> factor
475
]
term -> factor
475
if
term -> factor
475
&
term -> factor
476
if
and_expr -> shift_expr
476
&
956
476
in
and_expr -> shift_expr
476
is
and_expr -> shift_expr
476
|
and_expr -> shift_expr
476
>=
and_expr -> shift_expr
476
<
and_expr -> shift_expr
476
!=
and_expr -> shift_expr
476
and
and_expr -> shift_expr
476
]
and_expr -> shift_expr
476
not
and_expr -> shift_expr
476
or
and_expr -> shift_expr
476
,
and_expr -> shift_expr
476
:
and_expr -> shift_expr
476
==
and_expr -> shift_expr
476
<=
and_expr -> shift_expr
476
^
and_expr -> shift_expr
476
>
and_expr -> shift_expr
477
<<
957
477
>>
958
477
<
shift_expr -> arith_expr
477
>
shift_expr -> arith_expr
477
&
shift_expr -> arith_expr
477
and
shift_expr -> arith_expr
477
,
shift_expr -> arith_expr
477
in
shift_expr -> arith_expr
477
!=
shift_expr -> arith_expr
477
|
shift_expr -> arith_expr
477
if
shift_expr -> arith_expr
477
not
shift_expr -> arith_expr
477
<=
shift_expr -> arith_expr
477
is
shift_expr -> arith_expr
477
==
shift_expr -> arith_expr
477
or
shift_expr -> arith_expr
477
:
shift_expr -> arith_expr
477
]
shift_expr -> arith_expr
477
>=
shift_expr -> arith_expr
477
^
shift_expr -> arith_expr
478
==
atom -> NUMBER
478
<=
atom -> NUMBER
478
<<
atom -> NUMBER
478
/
atom -> NUMBER
478
^
atom -> NUMBER
478
if
atom -> NUMBER
478
]
atom -> NUMBER
478
.
atom -> NUMBER
478
or
atom -> NUMBER
478
**
atom -> NUMBER
478
+
atom -> NUMBER
478
%
atom -> NUMBER
478
-
atom -> NUMBER
478
&
atom -> NUMBER
478
@
atom -> NUMBER
478
*
atom -> NUMBER
478
>>
atom -> NUMBER
478
<
atom -> NUMBER
478
is
atom -> NUMBER
478
(
atom -> NUMBER
478
and
atom -> NUMBER
478
not
atom -> NUMBER
478
!=
atom -> NUMBER
478
|
atom -> NUMBER
478
in
atom -> NUMBER
478
>
atom -> NUMBER
478
:
atom -> NUMBER
478
>=
atom -> NUMBER
478
//
atom -> NUMBER
478
,
atom -> NUMBER
478
[
atom -> NUMBER
479
or
atom -> NAME
479
in
atom -> NAME
479
^
atom -> NAME
479
[
atom -> NAME
479
==
atom -> NAME
479
<<
atom -> NAME
479
**
atom -> NAME
479
,
atom -> NAME
479
!=
atom -> NAME
479
%
atom -> NAME
479
@
atom -> NAME
479
not
atom -> NAME
479
>
atom -> NAME
479
>=
atom -> NAME
479
&
atom -> NAME
479
*
atom -> NAME
479
<
atom -> NAME
479
-
atom -> NAME
479
(
atom -> NAME
479
>>
atom -> NAME
479
+
atom -> NAME
479
]
atom -> NAME
479
//
atom -> NAME
479
and
atom -> NAME
479
<=
atom -> NAME
479
is
atom -> NAME
479
if
atom -> NAME
479
/
atom -> NAME
479
.
atom -> NAME
479
:
atom -> NAME
479
|
atom -> NAME
480
and_test
110
480
atom_expr
111
480
and_expr
112
480
term
113
480
factor
114
480
shift_expr
115
480
arith_expr
116
480
NUMBER
117
480
NAME
118
480
[
119
480
test_list_comp
959
480
{
121
480
expr
122
480
not_test
123
480
False
124
480
xor_expr
125
480
atom
126
480
STRING
127
480
]
960
480
+
128
480
(
129
480
True
131
480
-
132
480
None
133
480
comparison
134
480
or_test
135
480
test
136
480
power
137
480
~
138
480
lambda
139
480
lambdef
140
480
not
141
480
test_list
142
481
}
961
482
in
147
482
<
148
482
>=
149
482
not
150
482
comp_op
962
482
!=
151
482
>
152
482
==
153
482
is
154
482
<=
155
482
]
comparison -> expr
482
or
comparison -> expr
482
,
comparison -> expr
482
and
comparison -> expr
482
:
comparison -> expr
482
if
comparison -> expr
483
and
963
483
,
and_test -> not_test
483
]
and_test -> not_test
483
or
and_test -> not_test
483
:
and_test -> not_test
483
if
and_test -> not_test
484
*
atom -> False
484
@
atom -> False
484
<
atom -> False
484
or
atom -> False
484
is
atom -> False
484
>>
atom -> False
484
[
atom -> False
484
/
atom -> False
484
%
atom -> False
484
.
atom -> False
484
(
atom -> False
484
in
atom -> False
484
**
atom -> False
484
==
atom -> False
484
//
atom -> False
484
:
atom -> False
484
+
atom -> False
484
,
atom -> False
484
<<
atom -> False
484
!=
atom -> False
484
<=
atom -> False
484
>
atom -> False
484
^
atom -> False
484
]
atom -> False
484
if
atom -> False
484
&
atom -> False
484
and
atom -> False
484
|
atom -> False
484
-
atom -> False
484
not
atom -> False
484
>=
atom -> False
485
:
expr -> xor_expr
485
not
expr -> xor_expr
485
|
964
485
==
expr -> xor_expr
485
in
expr -> xor_expr
485
if
expr -> xor_expr
485
>
expr -> xor_expr
485
or
expr -> xor_expr
485
]
expr -> xor_expr
485
<=
expr -> xor_expr
485
<
expr -> xor_expr
485
is
expr -> xor_expr
485
>=
expr -> xor_expr
485
!=
expr -> xor_expr
485
,
expr -> xor_expr
485
and
expr -> xor_expr
486
]
965
487
[
966
487
(
967
487
.
968
487
trailer
969
487
<<
trailer_expr -> 
487
trailer_expr
970
487
@
trailer_expr -> 
487
!=
trailer_expr -> 
487
-
trailer_expr -> 
487
]
trailer_expr -> 
487
^
trailer_expr -> 
487
<
trailer_expr -> 
487
/
trailer_expr -> 
487
is
trailer_expr -> 
487
==
trailer_expr -> 
487
&
trailer_expr -> 
487
>=
trailer_expr -> 
487
or
trailer_expr -> 
487
in
trailer_expr -> 
487
*
trailer_expr -> 
487
not
trailer_expr -> 
487
**
trailer_expr -> 
487
<=
trailer_expr -> 
487
+
trailer_expr -> 
487
//
trailer_expr -> 
487
%
trailer_expr -> 
487
>
trailer_expr -> 
487
:
trailer_expr -> 
487
,
trailer_expr -> 
487
|
trailer_expr -> 
487
if
trailer_expr -> 
487
>>
trailer_expr -> 
487
and
trailer_expr -> 
488
&
atom -> STRING
488
**
atom -> STRING
488
%
atom -> STRING
488
]
atom -> STRING
488
@
atom -> STRING
488
/
atom -> STRING
488
*
atom -> STRING
488
^
atom -> STRING
488
>=
atom -> STRING
488
if
atom -> STRING
488
<
atom -> STRING
488
:
atom -> STRING
488
>>
atom -> STRING
488
.
atom -> STRING
488
//
atom -> STRING
488
,
atom -> STRING
488
+
atom -> STRING
488
<<
atom -> STRING
488
and
atom -> STRING
488
[
atom -> STRING
488
or
atom -> STRING
488
in
atom -> STRING
488
not
atom -> STRING
488
>
atom -> STRING
488
(
atom -> STRING
488
!=
atom -> STRING
488
is
atom -> STRING
488
==
atom -> STRING
488
-
atom -> STRING
488
|
atom -> STRING
488
<=
atom -> STRING
489
atom_expr
472
489
NUMBER
478
489
NAME
479
489
[
480
489
{
481
489
False
484
489
atom
487
489
STRING
488
489
+
489
489
(
490
489
True
491
489
None
493
489
-
492
489
factor
971
489
power
496
489
~
497
490
and_test
217
490
atom_expr
218
490
and_expr
219
490
term
220
490
factor
221
490
shift_expr
222
490
arith_expr
223
490
NUMBER
224
490
NAME
225
490
not
226
490
[
227
490
{
228
490
expr
229
490
test_list_comp
972
490
not_test
231
490
False
232
490
xor_expr
234
490
STRING
235
490
lambda
236
490
atom
237
490
+
238
490
True
239
490
-
240
490
(
241
490
None
242
490
comparison
243
490
power
244
490
)
973
490
~
245
490
or_test
246
490
test
247
490
lambdef
248
490
test_list
249
491
!=
atom -> True
491
:
atom -> True
491
is
atom -> True
491
|
atom -> True
491
<=
atom -> True
491
^
atom -> True
491
%
atom -> True
491
@
atom -> True
491
**
atom -> True
491
(
atom -> True
491
not
atom -> True
491
>>
atom -> True
491
<
atom -> True
491
==
atom -> True
491
and
atom -> True
491
in
atom -> True
491
&
atom -> True
491
.
atom -> True
491
<<
atom -> True
491
/
atom -> True
491
*
atom -> True
491
>
atom -> True
491
,
atom -> True
491
+
atom -> True
491
>=
atom -> True
491
or
atom -> True
491
[
atom -> True
491
-
atom -> True
491
]
atom -> True
491
//
atom -> True
491
if
atom -> True
492
atom_expr
472
492
NUMBER
478
492
NAME
479
492
[
480
492
factor
974
492
{
481
492
False
484
492
atom
487
492
STRING
488
492
+
489
492
(
490
492
True
491
492
None
493
492
-
492
492
power
496
492
~
497
493
!=
atom -> None
493
//
atom -> None
493
^
atom -> None
493
>=
atom -> None
493
&
atom -> None
493
**
atom -> None
493
,
atom -> None
493
<
atom -> None
493
if
atom -> None
493
*
atom -> None
493
>
atom -> None
493
@
atom -> None
493
|
atom -> None
493
-
atom -> None
493
%
atom -> None
493
:
atom -> None
493
not
atom -> None
493
==
atom -> None
493
in
atom -> None
493
/
atom -> None
493
or
atom -> None
493
]
atom -> None
493
and
atom -> None
493
+
atom -> None
493
(
atom -> None
493
>>
atom -> None
493
is
atom -> None
493
[
atom -> None
493
<=
atom -> None
493
<<
atom -> None
493
.
atom -> None
494
if
975
494
]
test -> or_test
494
:
test -> or_test
494
,
test -> or_test
495
or
976
495
]
or_test -> and_test
495
if
or_test -> and_test
495
,
or_test -> and_test
495
:
or_test -> and_test
496
*
factor -> power
496
>>
factor -> power
496
>=
factor -> power
496
<
factor -> power
496
&
factor -> power
496
]
factor -> power
496
,
factor -> power
496
@
factor -> power
496
|
factor -> power
496
!=
factor -> power
496
<=
factor -> power
496
//
factor -> power
496
in
factor -> power
496
and
factor -> power
496
+
factor -> power
496
>
factor -> power
496
-
factor -> power
496
not
factor -> power
496
is
factor -> power
496
==
factor -> power
496
%
factor -> power
496
if
factor -> power
496
or
factor -> power
496
^
factor -> power
496
<<
factor -> power
496
/
factor -> power
496
:
factor -> power
497
atom_expr
472
497
NUMBER
478
497
NAME
479
497
[
480
497
factor
977
497
{
481
497
False
484
497
atom
487
497
STRING
488
497
+
489
497
(
490
497
True
491
497
None
493
497
-
492
497
power
496
497
~
497
498
varargslist
978
498
vfpdef
212
498
NAME
211
498
:
979
499
:
980
500
,
subscript -> test
500
]
subscript -> test
500
:
maybe_test -> test
501
atom_expr
472
501
and_expr
473
501
term
474
501
factor
475
501
shift_expr
476
501
arith_expr
477
501
NUMBER
478
501
NAME
479
501
[
480
501
{
481
501
expr
482
501
False
484
501
xor_expr
485
501
atom
487
501
STRING
488
501
+
489
501
(
490
501
True
491
501
None
493
501
-
492
501
power
496
501
~
497
501
not
501
501
comparison
502
501
not_test
981
502
or
not_test -> comparison
502
if
not_test -> comparison
502
:
not_test -> comparison
502
,
not_test -> comparison
502
]
not_test -> comparison
502
and
not_test -> comparison
503
:
test -> lambdef
503
]
test -> lambdef
503
,
test -> lambdef
504
]
subscriptlist -> subscript
504
,
982
505
or
983
505
)
or_test -> and_test
505
if
or_test -> and_test
505
,
or_test -> and_test
505
=
or_test -> and_test
505
for
or_test -> and_test
506
**
984
506
!=
power -> atom_expr
506
|
power -> atom_expr
506
>
power -> atom_expr
506
/
power -> atom_expr
506
^
power -> atom_expr
506
&
power -> atom_expr
506
=
power -> atom_expr
506
<
power -> atom_expr
506
not
power -> atom_expr
506
)
power -> atom_expr
506
<=
power -> atom_expr
506
%
power -> atom_expr
506
and
power -> atom_expr
506
*
power -> atom_expr
506
@
power -> atom_expr
506
>>
power -> atom_expr
506
if
power -> atom_expr
506
+
power -> atom_expr
506
,
power -> atom_expr
506
in
power -> atom_expr
506
for
power -> atom_expr
506
is
power -> atom_expr
506
//
power -> atom_expr
506
or
power -> atom_expr
506
<<
power -> atom_expr
506
-
power -> atom_expr
506
==
power -> atom_expr
506
>=
power -> atom_expr
507
,
xor_expr -> and_expr
507
^
985
507
)
xor_expr -> and_expr
507
not
xor_expr -> and_expr
507
=
xor_expr -> and_expr
507
>=
xor_expr -> and_expr
507
for
xor_expr -> and_expr
507
and
xor_expr -> and_expr
507
is
xor_expr -> and_expr
507
or
xor_expr -> and_expr
507
|
xor_expr -> and_expr
507
in
xor_expr -> and_expr
507
==
xor_expr -> and_expr
507
>
xor_expr -> and_expr
507
<
xor_expr -> and_expr
507
if
xor_expr -> and_expr
507
<=
xor_expr -> and_expr
507
!=
xor_expr -> and_expr
508
+
986
508
in
arith_expr -> term
508
if
arith_expr -> term
508
|
arith_expr -> term
508
-
987
508
<
arith_expr -> term
508
==
arith_expr -> term
508
<=
arith_expr -> term
508
^
arith_expr -> term
508
is
arith_expr -> term
508
>>
arith_expr -> term
508
for
arith_expr -> term
508
or
arith_expr -> term
508
&
arith_expr -> term
508
>
arith_expr -> term
508
>=
arith_expr -> term
508
<<
arith_expr -> term
508
and
arith_expr -> term
508
)
arith_expr -> term
508
not
arith_expr -> term
508
,
arith_expr -> term
508
!=
arith_expr -> term
508
=
arith_expr -> term
509
//
988
509
/
989
509
*
990
509
%
991
509
and
term -> factor
509
==
term -> factor
509
@
992
509
>=
term -> factor
509
+
term -> factor
509
<=
term -> factor
509
or
term -> factor
509
<<
term -> factor
509
not
term -> factor
509
,
term -> factor
509
<
term -> factor
509
-
term -> factor
509
=
term -> factor
509
in
term -> factor
509
for
term -> factor
509
!=
term -> factor
509
is
term -> factor
509
>>
term -> factor
509
^
term -> factor
509
|
term -> factor
509
>
term -> factor
509
)
term -> factor
509
if
term -> factor
509
&
term -> factor
510
)
and_expr -> shift_expr
510
if
and_expr -> shift_expr
510
&
993
510
in
and_expr -> shift_expr
510
is
and_expr -> shift_expr
510
|
and_expr -> shift_expr
510
>=
and_expr -> shift_expr
510
<
and_expr -> shift_expr
510
!=
and_expr -> shift_expr
510
and
and_expr -> shift_expr
510
not
and_expr -> shift_expr
510
or
and_expr -> shift_expr
510
,
and_expr -> shift_expr
510
=
and_expr -> shift_expr
510
==
and_expr -> shift_expr
510
<=
and_expr -> shift_expr
510
^
and_expr -> shift_expr
510
for
and_expr -> shift_expr
510
>
and_expr -> shift_expr
511
<<
994
511
>>
995
511
<
shift_expr -> arith_expr
511
>
shift_expr -> arith_expr
511
for
shift_expr -> arith_expr
511
&
shift_expr -> arith_expr
511
and
shift_expr -> arith_expr
511
,
shift_expr -> arith_expr
511
=
shift_expr -> arith_expr
511
in
shift_expr -> arith_expr
511
!=
shift_expr -> arith_expr
511
|
shift_expr -> arith_expr
511
if
shift_expr -> arith_expr
511
not
shift_expr -> arith_expr
511
<=
shift_expr -> arith_expr
511
is
shift_expr -> arith_expr
511
==
shift_expr -> arith_expr
511
)
shift_expr -> arith_expr
511
or
shift_expr -> arith_expr
511
>=
shift_expr -> arith_expr
511
^
shift_expr -> arith_expr
512
)
atom -> NUMBER
512
==
atom -> NUMBER
512
<=
atom -> NUMBER
512
<<
atom -> NUMBER
512
/
atom -> NUMBER
512
^
atom -> NUMBER
512
if
atom -> NUMBER
512
.
atom -> NUMBER
512
or
atom -> NUMBER
512
**
atom -> NUMBER
512
for
atom -> NUMBER
512
+
atom -> NUMBER
512
%
atom -> NUMBER
512
-
atom -> NUMBER
512
&
atom -> NUMBER
512
@
atom -> NUMBER
512
*
atom -> NUMBER
512
>>
atom -> NUMBER
512
=
atom -> NUMBER
512
<
atom -> NUMBER
512
is
atom -> NUMBER
512
(
atom -> NUMBER
512
and
atom -> NUMBER
512
not
atom -> NUMBER
512
!=
atom -> NUMBER
512
|
atom -> NUMBER
512
in
atom -> NUMBER
512
>
atom -> NUMBER
512
>=
atom -> NUMBER
512
//
atom -> NUMBER
512
,
atom -> NUMBER
512
[
atom -> NUMBER
513
or
atom -> NAME
513
)
atom -> NAME
513
in
atom -> NAME
513
^
atom -> NAME
513
[
atom -> NAME
513
==
atom -> NAME
513
for
atom -> NAME
513
<<
atom -> NAME
513
**
atom -> NAME
513
,
atom -> NAME
513
!=
atom -> NAME
513
%
atom -> NAME
513
@
atom -> NAME
513
not
atom -> NAME
513
>
atom -> NAME
513
>=
atom -> NAME
513
*
atom -> NAME
513
&
atom -> NAME
513
<
atom -> NAME
513
-
atom -> NAME
513
(
atom -> NAME
513
>>
atom -> NAME
513
+
atom -> NAME
513
=
atom -> NAME
513
//
atom -> NAME
513
and
atom -> NAME
513
<=
atom -> NAME
513
is
atom -> NAME
513
if
atom -> NAME
513
/
atom -> NAME
513
.
atom -> NAME
513
|
atom -> NAME
514
atom_expr
506
514
and_expr
507
514
term
508
514
factor
509
514
shift_expr
510
514
arith_expr
511
514
NUMBER
512
514
NAME
513
514
not
514
514
[
515
514
{
516
514
expr
517
514
False
520
514
xor_expr
521
514
STRING
522
514
atom
525
514
+
526
514
True
527
514
-
528
514
(
530
514
None
531
514
comparison
532
514
power
533
514
~
535
514
not_test
996
515
and_test
110
515
atom_expr
111
515
and_expr
112
515
term
113
515
factor
114
515
shift_expr
115
515
arith_expr
116
515
NUMBER
117
515
NAME
118
515
[
119
515
test_list_comp
997
515
{
121
515
expr
122
515
not_test
123
515
False
124
515
xor_expr
125
515
atom
126
515
STRING
127
515
+
128
515
(
129
515
True
131
515
-
132
515
]
998
515
None
133
515
comparison
134
515
or_test
135
515
test
136
515
power
137
515
~
138
515
lambda
139
515
lambdef
140
515
not
141
515
test_list
142
516
}
999
517
in
147
517
<
148
517
>=
149
517
not
150
517
comp_op
1000
517
!=
151
517
>
152
517
==
153
517
is
154
517
<=
155
517
=
comparison -> expr
517
)
comparison -> expr
517
or
comparison -> expr
517
,
comparison -> expr
517
and
comparison -> expr
517
for
comparison -> expr
517
if
comparison -> expr
518
<
trailer -> ( )
518
.
trailer -> ( )
518
*
trailer -> ( )
518
or
trailer -> ( )
518
is
trailer -> ( )
518
:
trailer -> ( )
518
&=
trailer -> ( )
518
=
trailer -> ( )
518
/=
trailer -> ( )
518
/
trailer -> ( )
518
+
trailer -> ( )
518
@
trailer -> ( )
518
>
trailer -> ( )
518
//
trailer -> ( )
518
//=
trailer -> ( )
518
|=
trailer -> ( )
518
|
trailer -> ( )
518
!=
trailer -> ( )
518
&
trailer -> ( )
518
**=
trailer -> ( )
518
^
trailer -> ( )
518
<=
trailer -> ( )
518
%
trailer -> ( )
518
>>
trailer -> ( )
518
**
trailer -> ( )
518
@=
trailer -> ( )
518
and
trailer -> ( )
518
(
trailer -> ( )
518
+=
trailer -> ( )
518
^=
trailer -> ( )
518
,
trailer -> ( )
518
==
trailer -> ( )
518
if
trailer -> ( )
518
%=
trailer -> ( )
518
-=
trailer -> ( )
518
[
trailer -> ( )
518
>>=
trailer -> ( )
518
<<
trailer -> ( )
518
*=
trailer -> ( )
518
in
trailer -> ( )
518
-
trailer -> ( )
518
<<=
trailer -> ( )
518
NEWLINE
trailer -> ( )
518
not
trailer -> ( )
518
>=
trailer -> ( )
519
and
1001
519
,
and_test -> not_test
519
=
and_test -> not_test
519
or
and_test -> not_test
519
)
and_test -> not_test
519
if
and_test -> not_test
519
for
and_test -> not_test
520
*
atom -> False
520
@
atom -> False
520
<
atom -> False
520
or
atom -> False
520
is
atom -> False
520
>>
atom -> False
520
[
atom -> False
520
/
atom -> False
520
)
atom -> False
520
%
atom -> False
520
.
atom -> False
520
(
atom -> False
520
in
atom -> False
520
**
atom -> False
520
==
atom -> False
520
//
atom -> False
520
+
atom -> False
520
,
atom -> False
520
=
atom -> False
520
<<
atom -> False
520
!=
atom -> False
520
<=
atom -> False
520
>
atom -> False
520
^
atom -> False
520
if
atom -> False
520
&
atom -> False
520
and
atom -> False
520
for
atom -> False
520
|
atom -> False
520
-
atom -> False
520
not
atom -> False
520
>=
atom -> False
521
for
expr -> xor_expr
521
not
expr -> xor_expr
521
=
expr -> xor_expr
521
|
1002
521
==
expr -> xor_expr
521
in
expr -> xor_expr
521
if
expr -> xor_expr
521
>
expr -> xor_expr
521
or
expr -> xor_expr
521
<=
expr -> xor_expr
521
<
expr -> xor_expr
521
is
expr -> xor_expr
521
)
expr -> xor_expr
521
>=
expr -> xor_expr
521
!=
expr -> xor_expr
521
,
expr -> xor_expr
521
and
expr -> xor_expr
522
&
atom -> STRING
522
**
atom -> STRING
522
%
atom -> STRING
522
@
atom -> STRING
522
/
atom -> STRING
522
*
atom -> STRING
522
^
atom -> STRING
522
>=
atom -> STRING
522
if
atom -> STRING
522
<
atom -> STRING
522
>>
atom -> STRING
522
.
atom -> STRING
522
for
atom -> STRING
522
//
atom -> STRING
522
,
atom -> STRING
522
+
atom -> STRING
522
=
atom -> STRING
522
<<
atom -> STRING
522
and
atom -> STRING
522
[
atom -> STRING
522
or
atom -> STRING
522
in
atom -> STRING
522
not
atom -> STRING
522
>
atom -> STRING
522
(
atom -> STRING
522
!=
atom -> STRING
522
is
atom -> STRING
522
==
atom -> STRING
522
-
atom -> STRING
522
|
atom -> STRING
522
<=
atom -> STRING
522
)
atom -> STRING
523
:
1003
523
NAME
211
523
vfpdef
212
523
varargslist
1004
524
)
1005
525
[
1006
525
(
1007
525
.
1008
525
trailer
1009
525
<<
trailer_expr -> 
525
trailer_expr
1010
525
@
trailer_expr -> 
525
!=
trailer_expr -> 
525
-
trailer_expr -> 
525
^
trailer_expr -> 
525
<
trailer_expr -> 
525
for
trailer_expr -> 
525
/
trailer_expr -> 
525
is
trailer_expr -> 
525
==
trailer_expr -> 
525
&
trailer_expr -> 
525
>=
trailer_expr -> 
525
or
trailer_expr -> 
525
in
trailer_expr -> 
525
=
trailer_expr -> 
525
*
trailer_expr -> 
525
not
trailer_expr -> 
525
)
trailer_expr -> 
525
**
trailer_expr -> 
525
<=
trailer_expr -> 
525
+
trailer_expr -> 
525
//
trailer_expr -> 
525
%
trailer_expr -> 
525
>
trailer_expr -> 
525
,
trailer_expr -> 
525
|
trailer_expr -> 
525
if
trailer_expr -> 
525
>>
trailer_expr -> 
525
and
trailer_expr -> 
526
atom_expr
506
526
NUMBER
512
526
NAME
513
526
[
515
526
{
516
526
False
520
526
STRING
522
526
atom
525
526
+
526
526
True
527
526
-
528
526
(
530
526
None
531
526
power
533
526
factor
1011
526
~
535
527
!=
atom -> True
527
is
atom -> True
527
//
atom -> True
527
|
atom -> True
527
<=
atom -> True
527
^
atom -> True
527
%
atom -> True
527
@
atom -> True
527
**
atom -> True
527
(
atom -> True
527
not
atom -> True
527
>>
atom -> True
527
<
atom -> True
527
==
atom -> True
527
and
atom -> True
527
=
atom -> True
527
in
atom -> True
527
&
atom -> True
527
.
atom -> True
527
<<
atom -> True
527
/
atom -> True
527
)
atom -> True
527
*
atom -> True
527
>
atom -> True
527
,
atom -> True
527
+
atom -> True
527
>=
atom -> True
527
or
atom -> True
527
for
atom -> True
527
-
atom -> True
527
[
atom -> True
527
if
atom -> True
528
atom_expr
506
528
NUMBER
512
528
NAME
513
528
[
515
528
factor
1012
528
{
516
528
False
520
528
STRING
522
528
atom
525
528
+
526
528
True
527
528
-
528
528
(
530
528
None
531
528
power
533
528
~
535
529
if
1013
529
for
test -> or_test
529
,
test -> or_test
529
)
test -> or_test
529
=
test -> or_test
530
and_test
217
530
atom_expr
218
530
and_expr
219
530
term
220
530
factor
221
530
shift_expr
222
530
arith_expr
223
530
NUMBER
224
530
NAME
225
530
not
226
530
[
227
530
{
228
530
expr
229
530
test_list_comp
1014
530
not_test
231
530
False
232
530
)
1015
530
xor_expr
234
530
STRING
235
530
lambda
236
530
atom
237
530
+
238
530
True
239
530
-
240
530
(
241
530
None
242
530
comparison
243
530
power
244
530
~
245
530
or_test
246
530
test
247
530
lambdef
248
530
test_list
249
531
!=
atom -> None
531
//
atom -> None
531
^
atom -> None
531
>=
atom -> None
531
&
atom -> None
531
**
atom -> None
531
=
atom -> None
531
,
atom -> None
531
<
atom -> None
531
if
atom -> None
531
*
atom -> None
531
>
atom -> None
531
@
atom -> None
531
|
atom -> None
531
-
atom -> None
531
%
atom -> None
531
)
atom -> None
531
not
atom -> None
531
==
atom -> None
531
in
atom -> None
531
/
atom -> None
531
or
atom -> None
531
and
atom -> None
531
+
atom -> None
531
(
atom -> None
531
>>
atom -> None
531
is
atom -> None
531
for
atom -> None
531
[
atom -> None
531
<=
atom -> None
531
<<
atom -> None
531
.
atom -> None
532
for
not_test -> comparison
532
or
not_test -> comparison
532
=
not_test -> comparison
532
if
not_test -> comparison
532
,
not_test -> comparison
532
and
not_test -> comparison
532
)
not_test -> comparison
533
*
factor -> power
533
>>
factor -> power
533
>=
factor -> power
533
<
factor -> power
533
&
factor -> power
533
for
factor -> power
533
,
factor -> power
533
@
factor -> power
533
|
factor -> power
533
!=
factor -> power
533
<=
factor -> power
533
//
factor -> power
533
in
factor -> power
533
and
factor -> power
533
+
factor -> power
533
>
factor -> power
533
-
factor -> power
533
not
factor -> power
533
is
factor -> power
533
==
factor -> power
533
%
factor -> power
533
=
factor -> power
533
if
factor -> power
533
or
factor -> power
533
^
factor -> power
533
)
factor -> power
533
<<
factor -> power
533
/
factor -> power
534
)
argument -> test
534
=
1016
534
,
argument -> test
534
comp_for
1017
534
for
1018
535
atom_expr
506
535
NUMBER
512
535
NAME
513
535
[
515
535
factor
1019
535
{
516
535
False
520
535
STRING
522
535
atom
525
535
+
526
535
True
527
535
-
528
535
(
530
535
None
531
535
power
533
535
~
535
536
atom_expr
1020
536
and_expr
1021
536
term
1022
536
factor
1023
536
shift_expr
1024
536
arith_expr
1025
536
NUMBER
1026
536
NAME
1027
536
not
1028
536
[
1029
536
{
1030
536
expr
1031
536
not_test
1032
536
False
1033
536
xor_expr
1034
536
STRING
1035
536
lambda
1036
536
atom
1037
536
+
1038
536
True
1039
536
-
1040
536
(
1041
536
None
1042
536
power
1043
536
and_test
1044
536
~
1045
536
test
1046
536
or_test
1047
536
comparison
1048
536
lambdef
1049
537
for
test -> lambdef
537
=
test -> lambdef
537
,
test -> lambdef
537
)
test -> lambdef
538
atom_expr
1020
538
and_expr
1021
538
term
1022
538
factor
1023
538
shift_expr
1024
538
arith_expr
1025
538
NUMBER
1026
538
NAME
1027
538
not
1028
538
[
1029
538
{
1030
538
expr
1031
538
not_test
1032
538
False
1033
538
xor_expr
1034
538
STRING
1035
538
lambda
1036
538
atom
1037
538
+
1038
538
True
1039
538
-
1040
538
(
1041
538
None
1042
538
power
1043
538
and_test
1044
538
~
1045
538
test
1050
538
or_test
1047
538
comparison
1048
538
lambdef
1049
539
,
1051
539
)
arglist -> argument
540
|
trailer -> . NAME
540
%=
trailer -> . NAME
540
NEWLINE
trailer -> . NAME
540
@
trailer -> . NAME
540
^
trailer -> . NAME
540
>
trailer -> . NAME
540
+
trailer -> . NAME
540
.
trailer -> . NAME
540
**=
trailer -> . NAME
540
:
trailer -> . NAME
540
!=
trailer -> . NAME
540
<<
trailer -> . NAME
540
<=
trailer -> . NAME
540
[
trailer -> . NAME
540
*
trailer -> . NAME
540
(
trailer -> . NAME
540
@=
trailer -> . NAME
540
/=
trailer -> . NAME
540
//
trailer -> . NAME
540
**
trailer -> . NAME
540
-
trailer -> . NAME
540
in
trailer -> . NAME
540
>=
trailer -> . NAME
540
^=
trailer -> . NAME
540
=
trailer -> . NAME
540
,
trailer -> . NAME
540
&=
trailer -> . NAME
540
+=
trailer -> . NAME
540
==
trailer -> . NAME
540
>>=
trailer -> . NAME
540
-=
trailer -> . NAME
540
or
trailer -> . NAME
540
and
trailer -> . NAME
540
%
trailer -> . NAME
540
is
trailer -> . NAME
540
|=
trailer -> . NAME
540
<<=
trailer -> . NAME
540
<
trailer -> . NAME
540
not
trailer -> . NAME
540
/
trailer -> . NAME
540
*=
trailer -> . NAME
540
if
trailer -> . NAME
540
//=
trailer -> . NAME
540
&
trailer -> . NAME
540
>>
trailer -> . NAME
541
&
trailer_expr -> trailer trailer_expr
541
>>=
trailer_expr -> trailer trailer_expr
541
not
trailer_expr -> trailer trailer_expr
541
-=
trailer_expr -> trailer trailer_expr
541
|=
trailer_expr -> trailer trailer_expr
541
and
trailer_expr -> trailer trailer_expr
541
**=
trailer_expr -> trailer trailer_expr
541
/=
trailer_expr -> trailer trailer_expr
541
+
trailer_expr -> trailer trailer_expr
541
@=
trailer_expr -> trailer trailer_expr
541
==
trailer_expr -> trailer trailer_expr
541
*=
trailer_expr -> trailer trailer_expr
541
/
trailer_expr -> trailer trailer_expr
541
=
trailer_expr -> trailer trailer_expr
541
**
trailer_expr -> trailer trailer_expr
541
^=
trailer_expr -> trailer trailer_expr
541
+=
trailer_expr -> trailer trailer_expr
541
,
trailer_expr -> trailer trailer_expr
541
>
trailer_expr -> trailer trailer_expr
541
^
trailer_expr -> trailer trailer_expr
541
*
trailer_expr -> trailer trailer_expr
541
NEWLINE
trailer_expr -> trailer trailer_expr
541
//
trailer_expr -> trailer trailer_expr
541
>>
trailer_expr -> trailer trailer_expr
541
<<
trailer_expr -> trailer trailer_expr
541
>=
trailer_expr -> trailer trailer_expr
541
:
trailer_expr -> trailer trailer_expr
541
%=
trailer_expr -> trailer trailer_expr
541
&=
trailer_expr -> trailer trailer_expr
541
<=
trailer_expr -> trailer trailer_expr
541
-
trailer_expr -> trailer trailer_expr
541
is
trailer_expr -> trailer trailer_expr
541
in
trailer_expr -> trailer trailer_expr
541
//=
trailer_expr -> trailer trailer_expr
541
<<=
trailer_expr -> trailer trailer_expr
541
<
trailer_expr -> trailer trailer_expr
541
|
trailer_expr -> trailer trailer_expr
541
if
trailer_expr -> trailer trailer_expr
541
%
trailer_expr -> trailer trailer_expr
541
@
trailer_expr -> trailer trailer_expr
541
!=
trailer_expr -> trailer trailer_expr
541
or
trailer_expr -> trailer trailer_expr
542
>
expr -> xor_expr | expr
542
//=
expr -> xor_expr | expr
542
in
expr -> xor_expr | expr
542
<=
expr -> xor_expr | expr
542
+=
expr -> xor_expr | expr
542
not
expr -> xor_expr | expr
542
>=
expr -> xor_expr | expr
542
if
expr -> xor_expr | expr
542
|=
expr -> xor_expr | expr
542
:
expr -> xor_expr | expr
542
&=
expr -> xor_expr | expr
542
*=
expr -> xor_expr | expr
542
==
expr -> xor_expr | expr
542
=
expr -> xor_expr | expr
542
NEWLINE
expr -> xor_expr | expr
542
is
expr -> xor_expr | expr
542
<<=
expr -> xor_expr | expr
542
>>=
expr -> xor_expr | expr
542
^=
expr -> xor_expr | expr
542
@=
expr -> xor_expr | expr
542
<
expr -> xor_expr | expr
542
or
expr -> xor_expr | expr
542
/=
expr -> xor_expr | expr
542
and
expr -> xor_expr | expr
542
!=
expr -> xor_expr | expr
542
-=
expr -> xor_expr | expr
542
**=
expr -> xor_expr | expr
542
,
expr -> xor_expr | expr
542
%=
expr -> xor_expr | expr
543
<=
arith_expr -> term + arith_expr
543
NEWLINE
arith_expr -> term + arith_expr
543
&
arith_expr -> term + arith_expr
543
>
arith_expr -> term + arith_expr
543
/=
arith_expr -> term + arith_expr
543
,
arith_expr -> term + arith_expr
543
**=
arith_expr -> term + arith_expr
543
>=
arith_expr -> term + arith_expr
543
*=
arith_expr -> term + arith_expr
543
^=
arith_expr -> term + arith_expr
543
&=
arith_expr -> term + arith_expr
543
//=
arith_expr -> term + arith_expr
543
@=
arith_expr -> term + arith_expr
543
not
arith_expr -> term + arith_expr
543
|
arith_expr -> term + arith_expr
543
in
arith_expr -> term + arith_expr
543
:
arith_expr -> term + arith_expr
543
|=
arith_expr -> term + arith_expr
543
>>=
arith_expr -> term + arith_expr
543
if
arith_expr -> term + arith_expr
543
>>
arith_expr -> term + arith_expr
543
is
arith_expr -> term + arith_expr
543
^
arith_expr -> term + arith_expr
543
+=
arith_expr -> term + arith_expr
543
<<
arith_expr -> term + arith_expr
543
<
arith_expr -> term + arith_expr
543
%=
arith_expr -> term + arith_expr
543
==
arith_expr -> term + arith_expr
543
-=
arith_expr -> term + arith_expr
543
!=
arith_expr -> term + arith_expr
543
or
arith_expr -> term + arith_expr
543
=
arith_expr -> term + arith_expr
543
<<=
arith_expr -> term + arith_expr
543
and
arith_expr -> term + arith_expr
544
<=
arith_expr -> term - arith_expr
544
if
arith_expr -> term - arith_expr
544
not
arith_expr -> term - arith_expr
544
+=
arith_expr -> term - arith_expr
544
>>=
arith_expr -> term - arith_expr
544
<<=
arith_expr -> term - arith_expr
544
|
arith_expr -> term - arith_expr
544
,
arith_expr -> term - arith_expr
544
>>
arith_expr -> term - arith_expr
544
^=
arith_expr -> term - arith_expr
544
NEWLINE
arith_expr -> term - arith_expr
544
@=
arith_expr -> term - arith_expr
544
/=
arith_expr -> term - arith_expr
544
:
arith_expr -> term - arith_expr
544
>=
arith_expr -> term - arith_expr
544
&=
arith_expr -> term - arith_expr
544
<<
arith_expr -> term - arith_expr
544
//=
arith_expr -> term - arith_expr
544
%=
arith_expr -> term - arith_expr
544
=
arith_expr -> term - arith_expr
544
is
arith_expr -> term - arith_expr
544
!=
arith_expr -> term - arith_expr
544
in
arith_expr -> term - arith_expr
544
*=
arith_expr -> term - arith_expr
544
<
arith_expr -> term - arith_expr
544
-=
arith_expr -> term - arith_expr
544
|=
arith_expr -> term - arith_expr
544
or
arith_expr -> term - arith_expr
544
==
arith_expr -> term - arith_expr
544
and
arith_expr -> term - arith_expr
544
&
arith_expr -> term - arith_expr
544
^
arith_expr -> term - arith_expr
544
>
arith_expr -> term - arith_expr
544
**=
arith_expr -> term - arith_expr
545
atom_expr
6
545
factor
10
545
[
3
545
term
15
545
STRING
43
545
arith_expr
32
545
NUMBER
8
545
small_stmt
1052
545
NAME
37
545
{
5
545
expr
7
545
not
51
545
True
9
545
shift_expr
12
545
atom
13
545
xor_expr
14
545
NEWLINE
1053
545
(
34
545
None
29
545
and_test
20
545
and_expr
21
545
False
23
545
or_test
25
545
test
33
545
lambda
28
545
+
30
545
simple_stmt
1054
545
suite
1055
545
nonlocal
66
545
-
36
545
not_test
40
545
power
47
545
lambdef
41
545
~
44
545
comparison
48
545
assert
67
545
global_stmt
68
545
continue
49
545
expr_stmt
50
545
test_list
62
545
raise
69
545
del_stmt
52
545
yield_stmt
53
545
raise_stmt
70
545
yield
56
545
assert_stmt
57
545
global
71
545
nonlocal_stmt
72
545
break_stmt
58
545
return_stmt
75
545
return
59
545
pass
60
545
continue_stmt
61
545
flow_stmt
76
545
break
63
545
del
64
545
pass_stmt
65
546
except_clause
1056
546
except
1057
547
except
suite -> simple_stmt
548
INDENT
1058
549
NEWLINE
1059
550
atom_expr
173
550
NUMBER
179
550
NAME
181
550
[
182
550
{
183
550
False
186
550
STRING
188
550
atom
189
550
+
190
550
True
191
550
(
192
550
None
195
550
-
194
550
power
199
550
~
200
550
factor
1060
551
atom_expr
173
551
and_expr
174
551
term
175
551
factor
176
551
shift_expr
177
551
arith_expr
178
551
NUMBER
179
551
NAME
181
551
[
182
551
{
183
551
False
186
551
STRING
188
551
xor_expr
1061
551
atom
189
551
+
190
551
True
191
551
(
192
551
None
195
551
-
194
551
power
199
551
~
200
552
atom_expr
173
552
factor
176
552
term
175
552
NUMBER
179
552
NAME
181
552
[
182
552
{
183
552
False
186
552
STRING
188
552
atom
189
552
+
190
552
True
191
552
(
192
552
None
195
552
-
194
552
arith_expr
1062
552
power
199
552
~
200
553
atom_expr
173
553
factor
176
553
term
175
553
NUMBER
179
553
NAME
181
553
[
182
553
{
183
553
False
186
553
STRING
188
553
atom
189
553
+
190
553
True
191
553
(
192
553
None
195
553
-
194
553
arith_expr
1063
553
power
199
553
~
200
554
atom_expr
173
554
factor
176
554
NUMBER
179
554
NAME
181
554
[
182
554
{
183
554
False
186
554
STRING
188
554
atom
189
554
+
190
554
term
1064
554
True
191
554
(
192
554
None
195
554
-
194
554
power
199
554
~
200
555
atom_expr
173
555
factor
176
555
NUMBER
179
555
NAME
181
555
[
182
555
{
183
555
term
1065
555
False
186
555
STRING
188
555
atom
189
555
+
190
555
True
191
555
(
192
555
None
195
555
-
194
555
power
199
555
~
200
556
atom_expr
173
556
factor
176
556
NUMBER
179
556
NAME
181
556
[
182
556
{
183
556
False
186
556
STRING
188
556
atom
189
556
+
190
556
term
1066
556
True
191
556
(
192
556
None
195
556
-
194
556
power
199
556
~
200
557
atom_expr
173
557
factor
176
557
NUMBER
179
557
NAME
181
557
[
182
557
{
183
557
False
186
557
STRING
188
557
atom
189
557
+
190
557
True
191
557
(
192
557
None
195
557
-
194
557
term
1067
557
power
199
557
~
200
558
atom_expr
173
558
term
1068
558
factor
176
558
NUMBER
179
558
NAME
181
558
[
182
558
{
183
558
False
186
558
STRING
188
558
atom
189
558
+
190
558
True
191
558
(
192
558
None
195
558
-
194
558
power
199
558
~
200
559
atom_expr
173
559
factor
176
559
term
175
559
shift_expr
177
559
arith_expr
178
559
NUMBER
179
559
NAME
181
559
[
182
559
{
183
559
False
186
559
STRING
188
559
atom
189
559
+
190
559
True
191
559
(
192
559
None
195
559
-
194
559
and_expr
1069
559
power
199
559
~
200
560
atom_expr
173
560
factor
176
560
term
175
560
arith_expr
178
560
NUMBER
179
560
NAME
181
560
[
182
560
{
183
560
False
186
560
STRING
188
560
atom
189
560
+
190
560
True
191
560
(
192
560
None
195
560
-
194
560
power
199
560
~
200
560
shift_expr
1070
561
atom_expr
173
561
factor
176
561
term
175
561
arith_expr
178
561
NUMBER
179
561
NAME
181
561
[
182
561
{
183
561
False
186
561
STRING
188
561
atom
189
561
+
190
561
shift_expr
1071
561
True
191
561
(
192
561
-
194
561
None
195
561
power
199
561
~
200
562
atom_expr
590
562
and_expr
591
562
term
592
562
[
593
562
shift_expr
594
562
arith_expr
595
562
NUMBER
596
562
NAME
597
562
factor
598
562
{
599
562
expr
600
562
False
601
562
xor_expr
602
562
STRING
603
562
+
604
562
True
605
562
-
606
562
(
607
562
None
608
562
atom
609
562
power
610
562
~
611
562
not_test
612
562
or_test
1072
562
not
613
562
comparison
614
562
and_test
615
563
]
1073
564
in
atom -> [ ]
564
>=
atom -> [ ]
564
%
atom -> [ ]
564
:
atom -> [ ]
564
is
atom -> [ ]
564
^
atom -> [ ]
564
//
atom -> [ ]
564
or
atom -> [ ]
564
not
atom -> [ ]
564
[
atom -> [ ]
564
and
atom -> [ ]
564
/
atom -> [ ]
564
!=
atom -> [ ]
564
>
atom -> [ ]
564
&
atom -> [ ]
564
**
atom -> [ ]
564
@
atom -> [ ]
564
==
atom -> [ ]
564
<<
atom -> [ ]
564
if
atom -> [ ]
564
<
atom -> [ ]
564
,
atom -> [ ]
564
(
atom -> [ ]
564
as
atom -> [ ]
564
<=
atom -> [ ]
564
*
atom -> [ ]
564
.
atom -> [ ]
564
>>
atom -> [ ]
564
|
atom -> [ ]
564
-
atom -> [ ]
564
+
atom -> [ ]
565
<<
atom -> { }
565
+
atom -> { }
565
//
atom -> { }
565
is
atom -> { }
565
>=
atom -> { }
565
<=
atom -> { }
565
>
atom -> { }
565
*
atom -> { }
565
^
atom -> { }
565
%
atom -> { }
565
>>
atom -> { }
565
:
atom -> { }
565
.
atom -> { }
565
not
atom -> { }
565
==
atom -> { }
565
if
atom -> { }
565
in
atom -> { }
565
<
atom -> { }
565
|
atom -> { }
565
(
atom -> { }
565
/
atom -> { }
565
as
atom -> { }
565
and
atom -> { }
565
**
atom -> { }
565
@
atom -> { }
565
-
atom -> { }
565
&
atom -> { }
565
,
atom -> { }
565
!=
atom -> { }
565
or
atom -> { }
565
[
atom -> { }
566
atom_expr
173
566
and_expr
174
566
term
175
566
factor
176
566
shift_expr
177
566
arith_expr
178
566
NUMBER
179
566
NAME
181
566
[
182
566
{
183
566
expr
184
566
False
186
566
xor_expr
187
566
STRING
188
566
comparison
1074
566
atom
189
566
+
190
566
True
191
566
(
192
566
None
195
566
-
194
566
power
199
566
~
200
567
atom_expr
173
567
and_expr
174
567
term
175
567
factor
176
567
shift_expr
177
567
arith_expr
178
567
NUMBER
179
567
NAME
181
567
[
182
567
{
183
567
expr
184
567
not_test
185
567
False
186
567
xor_expr
187
567
STRING
188
567
atom
189
567
+
190
567
True
191
567
(
192
567
None
195
567
-
194
567
power
199
567
~
200
567
and_test
1075
567
not
202
567
comparison
203
568
atom_expr
173
568
and_expr
174
568
term
175
568
factor
176
568
shift_expr
177
568
arith_expr
178
568
NUMBER
179
568
NAME
181
568
[
182
568
{
183
568
False
186
568
xor_expr
187
568
STRING
188
568
atom
189
568
+
190
568
True
191
568
(
192
568
None
195
568
-
194
568
expr
1076
568
power
199
568
~
200
569
atom_expr
472
569
and_expr
473
569
term
474
569
factor
475
569
shift_expr
476
569
arith_expr
477
569
NUMBER
478
569
NAME
479
569
[
480
569
{
481
569
expr
482
569
not_test
483
569
False
484
569
xor_expr
485
569
atom
487
569
STRING
488
569
+
489
569
(
490
569
True
491
569
-
492
569
None
493
569
subscriptlist
1077
569
or_test
494
569
and_test
495
569
power
496
569
~
497
569
lambda
498
569
:
maybe_test -> 
569
maybe_test
499
569
test
500
569
not
501
569
comparison
502
569
lambdef
503
569
subscript
504
570
and_test
505
570
atom_expr
506
570
and_expr
507
570
term
508
570
factor
509
570
shift_expr
510
570
arith_expr
511
570
NUMBER
512
570
NAME
513
570
not
514
570
[
515
570
{
516
570
expr
517
570
)
1078
570
not_test
519
570
False
520
570
xor_expr
521
570
STRING
522
570
lambda
523
570
arglist
1079
570
atom
525
570
+
526
570
True
527
570
-
528
570
or_test
529
570
(
530
570
None
531
570
comparison
532
570
power
533
570
test
534
570
~
535
570
*
536
570
lambdef
537
570
**
538
570
argument
539
571
NAME
1080
572
trailer_expr
1081
572
[
569
572
(
570
572
.
571
572
trailer
572
572
<<
trailer_expr -> 
572
@
trailer_expr -> 
572
!=
trailer_expr -> 
572
-
trailer_expr -> 
572
^
trailer_expr -> 
572
<
trailer_expr -> 
572
/
trailer_expr -> 
572
is
trailer_expr -> 
572
==
trailer_expr -> 
572
&
trailer_expr -> 
572
>=
trailer_expr -> 
572
or
trailer_expr -> 
572
in
trailer_expr -> 
572
*
trailer_expr -> 
572
not
trailer_expr -> 
572
**
trailer_expr -> 
572
<=
trailer_expr -> 
572
+
trailer_expr -> 
572
as
trailer_expr -> 
572
//
trailer_expr -> 
572
%
trailer_expr -> 
572
>
trailer_expr -> 
572
:
trailer_expr -> 
572
,
trailer_expr -> 
572
|
trailer_expr -> 
572
if
trailer_expr -> 
572
and
trailer_expr -> 
572
>>
trailer_expr -> 
573
==
atom_expr -> atom trailer_expr
573
%
atom_expr -> atom trailer_expr
573
+
atom_expr -> atom trailer_expr
573
:
atom_expr -> atom trailer_expr
573
not
atom_expr -> atom trailer_expr
573
or
atom_expr -> atom trailer_expr
573
//
atom_expr -> atom trailer_expr
573
and
atom_expr -> atom trailer_expr
573
!=
atom_expr -> atom trailer_expr
573
<<
atom_expr -> atom trailer_expr
573
if
atom_expr -> atom trailer_expr
573
-
atom_expr -> atom trailer_expr
573
>>
atom_expr -> atom trailer_expr
573
**
atom_expr -> atom trailer_expr
573
/
atom_expr -> atom trailer_expr
573
<
atom_expr -> atom trailer_expr
573
in
atom_expr -> atom trailer_expr
573
&
atom_expr -> atom trailer_expr
573
is
atom_expr -> atom trailer_expr
573
as
atom_expr -> atom trailer_expr
573
|
atom_expr -> atom trailer_expr
573
>
atom_expr -> atom trailer_expr
573
>=
atom_expr -> atom trailer_expr
573
<=
atom_expr -> atom trailer_expr
573
@
atom_expr -> atom trailer_expr
573
*
atom_expr -> atom trailer_expr
573
,
atom_expr -> atom trailer_expr
573
^
atom_expr -> atom trailer_expr
574
<<
factor -> + factor
574
,
factor -> + factor
574
&
factor -> + factor
574
>
factor -> + factor
574
if
factor -> + factor
574
not
factor -> + factor
574
as
factor -> + factor
574
+
factor -> + factor
574
^
factor -> + factor
574
==
factor -> + factor
574
/
factor -> + factor
574
|
factor -> + factor
574
>=
factor -> + factor
574
%
factor -> + factor
574
<
factor -> + factor
574
is
factor -> + factor
574
or
factor -> + factor
574
@
factor -> + factor
574
//
factor -> + factor
574
and
factor -> + factor
574
-
factor -> + factor
574
in
factor -> + factor
574
*
factor -> + factor
574
:
factor -> + factor
574
!=
factor -> + factor
574
>>
factor -> + factor
574
<=
factor -> + factor
575
)
1082
576
>=
atom -> ( )
576
>>
atom -> ( )
576
not
atom -> ( )
576
if
atom -> ( )
576
&
atom -> ( )
576
^
atom -> ( )
576
.
atom -> ( )
576
/
atom -> ( )
576
in
atom -> ( )
576
:
atom -> ( )
576
>
atom -> ( )
576
%
atom -> ( )
576
(
atom -> ( )
576
==
atom -> ( )
576
,
atom -> ( )
576
[
atom -> ( )
576
<=
atom -> ( )
576
+
atom -> ( )
576
|
atom -> ( )
576
-
atom -> ( )
576
or
atom -> ( )
576
as
atom -> ( )
576
@
atom -> ( )
576
<<
atom -> ( )
576
is
atom -> ( )
576
**
atom -> ( )
576
*
atom -> ( )
576
and
atom -> ( )
576
<
atom -> ( )
576
!=
atom -> ( )
576
//
atom -> ( )
577
atom_expr
173
577
and_expr
174
577
term
175
577
factor
176
577
shift_expr
177
577
arith_expr
178
577
NUMBER
179
577
or_test
180
577
NAME
181
577
[
182
577
{
183
577
expr
184
577
not_test
185
577
False
186
577
xor_expr
187
577
STRING
188
577
atom
189
577
+
190
577
True
191
577
(
192
577
with_item
193
577
-
194
577
None
195
577
test
197
577
and_test
198
577
power
199
577
~
200
577
lambda
201
577
not
202
577
comparison
203
577
with_items
1083
577
lambdef
204
578
@
factor -> - factor
578
^
factor -> - factor
578
==
factor -> - factor
578
in
factor -> - factor
578
>>
factor -> - factor
578
,
factor -> - factor
578
//
factor -> - factor
578
and
factor -> - factor
578
:
factor -> - factor
578
<=
factor -> - factor
578
!=
factor -> - factor
578
-
factor -> - factor
578
&
factor -> - factor
578
as
factor -> - factor
578
not
factor -> - factor
578
>
factor -> - factor
578
*
factor -> - factor
578
%
factor -> - factor
578
/
factor -> - factor
578
<
factor -> - factor
578
|
factor -> - factor
578
+
factor -> - factor
578
if
factor -> - factor
578
<<
factor -> - factor
578
is
factor -> - factor
578
or
factor -> - factor
578
>=
factor -> - factor
579
atom_expr
6
579
factor
10
579
[
3
579
term
15
579
STRING
43
579
arith_expr
32
579
NUMBER
8
579
small_stmt
4
579
NAME
37
579
{
5
579
expr
7
579
not
51
579
True
9
579
shift_expr
12
579
atom
13
579
xor_expr
14
579
NEWLINE
942
579
(
34
579
None
29
579
and_test
20
579
and_expr
21
579
False
23
579
or_test
25
579
test
33
579
lambda
28
579
+
30
579
simple_stmt
943
579
nonlocal
66
579
-
36
579
not_test
40
579
power
47
579
suite
1084
579
lambdef
41
579
~
44
579
comparison
48
579
assert
67
579
global_stmt
68
579
continue
49
579
expr_stmt
50
579
test_list
62
579
raise
69
579
del_stmt
52
579
yield_stmt
53
579
raise_stmt
70
579
yield
56
579
assert_stmt
57
579
global
71
579
nonlocal_stmt
72
579
break_stmt
58
579
return_stmt
75
579
return
59
579
pass
60
579
continue_stmt
61
579
flow_stmt
76
579
break
63
579
del
64
579
pass_stmt
65
580
atom_expr
1085
580
True
1086
580
and_expr
1087
580
(
1088
580
NUMBER
1089
580
NAME
1090
580
{
1091
580
term
1092
580
power
1093
580
[
1094
580
factor
1095
580
~
1096
580
atom
1097
580
+
1098
580
None
1099
580
arith_expr
1100
580
shift_expr
1101
580
STRING
1102
580
False
1103
580
xor_expr
1104
580
-
1105
580
expr
1106
581
atom_expr
173
581
and_expr
174
581
term
175
581
factor
176
581
shift_expr
177
581
arith_expr
178
581
NUMBER
179
581
NAME
181
581
[
182
581
{
183
581
expr
184
581
not_test
185
581
False
186
581
xor_expr
187
581
STRING
188
581
atom
189
581
+
190
581
True
191
581
(
192
581
None
195
581
-
194
581
and_test
198
581
power
199
581
~
200
581
or_test
1107
581
not
202
581
comparison
203
582
<<
factor -> ~ factor
582
in
factor -> ~ factor
582
<=
factor -> ~ factor
582
if
factor -> ~ factor
582
|
factor -> ~ factor
582
<
factor -> ~ factor
582
>>
factor -> ~ factor
582
==
factor -> ~ factor
582
>=
factor -> ~ factor
582
!=
factor -> ~ factor
582
,
factor -> ~ factor
582
//
factor -> ~ factor
582
*
factor -> ~ factor
582
/
factor -> ~ factor
582
+
factor -> ~ factor
582
is
factor -> ~ factor
582
not
factor -> ~ factor
582
and
factor -> ~ factor
582
^
factor -> ~ factor
582
@
factor -> ~ factor
582
:
factor -> ~ factor
582
as
factor -> ~ factor
582
>
factor -> ~ factor
582
-
factor -> ~ factor
582
or
factor -> ~ factor
582
&
factor -> ~ factor
582
%
factor -> ~ factor
583
:
1108
584
atom_expr
173
584
and_expr
174
584
term
175
584
factor
176
584
shift_expr
177
584
arith_expr
178
584
NUMBER
179
584
or_test
180
584
NAME
181
584
[
182
584
{
183
584
expr
184
584
not_test
185
584
False
186
584
xor_expr
187
584
STRING
188
584
atom
189
584
+
190
584
True
191
584
(
192
584
None
195
584
-
194
584
and_test
198
584
power
199
584
~
200
584
test
1109
584
lambda
201
584
not
202
584
comparison
203
584
lambdef
204
585
if
not_test -> not not_test
585
:
not_test -> not not_test
585
,
not_test -> not not_test
585
or
not_test -> not not_test
585
and
not_test -> not not_test
585
as
not_test -> not not_test
586
*=
or_test -> and_test or or_test
586
:
or_test -> and_test or or_test
586
if
or_test -> and_test or or_test
586
NEWLINE
or_test -> and_test or or_test
586
^=
or_test -> and_test or or_test
586
|=
or_test -> and_test or or_test
586
**=
or_test -> and_test or or_test
586
>>=
or_test -> and_test or or_test
586
,
or_test -> and_test or or_test
586
//=
or_test -> and_test or or_test
586
-=
or_test -> and_test or or_test
586
+=
or_test -> and_test or or_test
586
/=
or_test -> and_test or or_test
586
=
or_test -> and_test or or_test
586
&=
or_test -> and_test or or_test
586
%=
or_test -> and_test or or_test
586
@=
or_test -> and_test or or_test
586
<<=
or_test -> and_test or or_test
587
&=
xor_expr -> and_expr ^ xor_expr
587
>
xor_expr -> and_expr ^ xor_expr
587
%=
xor_expr -> and_expr ^ xor_expr
587
not
xor_expr -> and_expr ^ xor_expr
587
:
xor_expr -> and_expr ^ xor_expr
587
or
xor_expr -> and_expr ^ xor_expr
587
if
xor_expr -> and_expr ^ xor_expr
587
is
xor_expr -> and_expr ^ xor_expr
587
>>=
xor_expr -> and_expr ^ xor_expr
587
!=
xor_expr -> and_expr ^ xor_expr
587
,
xor_expr -> and_expr ^ xor_expr
587
+=
xor_expr -> and_expr ^ xor_expr
587
//=
xor_expr -> and_expr ^ xor_expr
587
^=
xor_expr -> and_expr ^ xor_expr
587
|=
xor_expr -> and_expr ^ xor_expr
587
**=
xor_expr -> and_expr ^ xor_expr
587
in
xor_expr -> and_expr ^ xor_expr
587
|
xor_expr -> and_expr ^ xor_expr
587
=
xor_expr -> and_expr ^ xor_expr
587
/=
xor_expr -> and_expr ^ xor_expr
587
>=
xor_expr -> and_expr ^ xor_expr
587
and
xor_expr -> and_expr ^ xor_expr
587
<
xor_expr -> and_expr ^ xor_expr
587
-=
xor_expr -> and_expr ^ xor_expr
587
@=
xor_expr -> and_expr ^ xor_expr
587
<<=
xor_expr -> and_expr ^ xor_expr
587
<=
xor_expr -> and_expr ^ xor_expr
587
NEWLINE
xor_expr -> and_expr ^ xor_expr
587
==
xor_expr -> and_expr ^ xor_expr
587
*=
xor_expr -> and_expr ^ xor_expr
588
parameters
1110
588
)
1111
588
**
1112
588
NAME
1113
588
*
1114
588
param
1115
588
tfpdef
1116
589
else
1117
590
**
1118
590
else
power -> atom_expr
590
!=
power -> atom_expr
590
|
power -> atom_expr
590
>
power -> atom_expr
590
/
power -> atom_expr
590
^
power -> atom_expr
590
&
power -> atom_expr
590
<
power -> atom_expr
590
not
power -> atom_expr
590
<=
power -> atom_expr
590
%
power -> atom_expr
590
and
power -> atom_expr
590
*
power -> atom_expr
590
@
power -> atom_expr
590
>>
power -> atom_expr
590
+
power -> atom_expr
590
in
power -> atom_expr
590
is
power -> atom_expr
590
//
power -> atom_expr
590
or
power -> atom_expr
590
<<
power -> atom_expr
590
-
power -> atom_expr
590
==
power -> atom_expr
590
>=
power -> atom_expr
591
^
1119
591
not
xor_expr -> and_expr
591
>=
xor_expr -> and_expr
591
and
xor_expr -> and_expr
591
else
xor_expr -> and_expr
591
is
xor_expr -> and_expr
591
or
xor_expr -> and_expr
591
|
xor_expr -> and_expr
591
in
xor_expr -> and_expr
591
==
xor_expr -> and_expr
591
>
xor_expr -> and_expr
591
<
xor_expr -> and_expr
591
<=
xor_expr -> and_expr
591
!=
xor_expr -> and_expr
592
in
arith_expr -> term
592
|
arith_expr -> term
592
==
arith_expr -> term
592
<
arith_expr -> term
592
-
1120
592
+
1121
592
<=
arith_expr -> term
592
^
arith_expr -> term
592
is
arith_expr -> term
592
else
arith_expr -> term
592
>>
arith_expr -> term
592
or
arith_expr -> term
592
&
arith_expr -> term
592
>
arith_expr -> term
592
>=
arith_expr -> term
592
and
arith_expr -> term
592
<<
arith_expr -> term
592
not
arith_expr -> term
592
!=
arith_expr -> term
593
and_test
110
593
atom_expr
111
593
and_expr
112
593
term
113
593
factor
114
593
shift_expr
115
593
arith_expr
116
593
NUMBER
117
593
NAME
118
593
[
119
593
test_list_comp
1122
593
{
121
593
expr
122
593
not_test
123
593
False
124
593
xor_expr
125
593
atom
126
593
STRING
127
593
+
128
593
(
129
593
True
131
593
-
132
593
]
1123
593
None
133
593
comparison
134
593
or_test
135
593
test
136
593
power
137
593
~
138
593
lambda
139
593
lambdef
140
593
not
141
593
test_list
142
594
&
1124
594
in
and_expr -> shift_expr
594
|
and_expr -> shift_expr
594
is
and_expr -> shift_expr
594
>=
and_expr -> shift_expr
594
<
and_expr -> shift_expr
594
!=
and_expr -> shift_expr
594
and
and_expr -> shift_expr
594
not
and_expr -> shift_expr
594
or
and_expr -> shift_expr
594
==
and_expr -> shift_expr
594
<=
and_expr -> shift_expr
594
^
and_expr -> shift_expr
594
else
and_expr -> shift_expr
594
>
and_expr -> shift_expr
595
<<
1125
595
>>
1126
595
<
shift_expr -> arith_expr
595
>
shift_expr -> arith_expr
595
&
shift_expr -> arith_expr
595
and
shift_expr -> arith_expr
595
else
shift_expr -> arith_expr
595
in
shift_expr -> arith_expr
595
!=
shift_expr -> arith_expr
595
|
shift_expr -> arith_expr
595
not
shift_expr -> arith_expr
595
<=
shift_expr -> arith_expr
595
is
shift_expr -> arith_expr
595
==
shift_expr -> arith_expr
595
or
shift_expr -> arith_expr
595
>=
shift_expr -> arith_expr
595
^
shift_expr -> arith_expr
596
==
atom -> NUMBER
596
<=
atom -> NUMBER
596
<<
atom -> NUMBER
596
/
atom -> NUMBER
596
^
atom -> NUMBER
596
.
atom -> NUMBER
596
or
atom -> NUMBER
596
**
atom -> NUMBER
596
else
atom -> NUMBER
596
+
atom -> NUMBER
596
%
atom -> NUMBER
596
-
atom -> NUMBER
596
&
atom -> NUMBER
596
@
atom -> NUMBER
596
*
atom -> NUMBER
596
>>
atom -> NUMBER
596
<
atom -> NUMBER
596
is
atom -> NUMBER
596
(
atom -> NUMBER
596
and
atom -> NUMBER
596
not
atom -> NUMBER
596
!=
atom -> NUMBER
596
|
atom -> NUMBER
596
in
atom -> NUMBER
596
>
atom -> NUMBER
596
>=
atom -> NUMBER
596
//
atom -> NUMBER
596
[
atom -> NUMBER
597
or
atom -> NAME
597
in
atom -> NAME
597
^
atom -> NAME
597
[
atom -> NAME
597
==
atom -> NAME
597
<<
atom -> NAME
597
**
atom -> NAME
597
!=
atom -> NAME
597
%
atom -> NAME
597
@
atom -> NAME
597
not
atom -> NAME
597
>
atom -> NAME
597
>=
atom -> NAME
597
*
atom -> NAME
597
&
atom -> NAME
597
<
atom -> NAME
597
-
atom -> NAME
597
(
atom -> NAME
597
>>
atom -> NAME
597
+
atom -> NAME
597
//
atom -> NAME
597
and
atom -> NAME
597
|
atom -> NAME
597
<=
atom -> NAME
597
is
atom -> NAME
597
/
atom -> NAME
597
.
atom -> NAME
597
else
atom -> NAME
598
*
1127
598
%
1128
598
//
1129
598
/
1130
598
and
term -> factor
598
==
term -> factor
598
@
1131
598
>=
term -> factor
598
+
term -> factor
598
<=
term -> factor
598
or
term -> factor
598
else
term -> factor
598
<<
term -> factor
598
not
term -> factor
598
<
term -> factor
598
-
term -> factor
598
in
term -> factor
598
!=
term -> factor
598
is
term -> factor
598
>>
term -> factor
598
^
term -> factor
598
|
term -> factor
598
>
term -> factor
598
&
term -> factor
599
}
1132
600
is
154
600
in
147
600
<
148
600
>=
149
600
!=
151
600
==
153
600
not
150
600
comp_op
1133
600
>
152
600
<=
155
600
or
comparison -> expr
600
else
comparison -> expr
600
and
comparison -> expr
601
else
atom -> False
601
*
atom -> False
601
@
atom -> False
601
<
atom -> False
601
or
atom -> False
601
is
atom -> False
601
>>
atom -> False
601
[
atom -> False
601
/
atom -> False
601
%
atom -> False
601
.
atom -> False
601
(
atom -> False
601
in
atom -> False
601
**
atom -> False
601
==
atom -> False
601
//
atom -> False
601
+
atom -> False
601
<<
atom -> False
601
!=
atom -> False
601
<=
atom -> False
601
>
atom -> False
601
^
atom -> False
601
&
atom -> False
601
and
atom -> False
601
|
atom -> False
601
-
atom -> False
601
not
atom -> False
601
>=
atom -> False
602
not
expr -> xor_expr
602
else
expr -> xor_expr
602
|
1134
602
==
expr -> xor_expr
602
in
expr -> xor_expr
602
>
expr -> xor_expr
602
or
expr -> xor_expr
602
<=
expr -> xor_expr
602
<
expr -> xor_expr
602
is
expr -> xor_expr
602
>=
expr -> xor_expr
602
!=
expr -> xor_expr
602
and
expr -> xor_expr
603
&
atom -> STRING
603
**
atom -> STRING
603
%
atom -> STRING
603
else
atom -> STRING
603
@
atom -> STRING
603
/
atom -> STRING
603
*
atom -> STRING
603
^
atom -> STRING
603
>=
atom -> STRING
603
<
atom -> STRING
603
>>
atom -> STRING
603
.
atom -> STRING
603
//
atom -> STRING
603
+
atom -> STRING
603
<<
atom -> STRING
603
and
atom -> STRING
603
[
atom -> STRING
603
or
atom -> STRING
603
in
atom -> STRING
603
not
atom -> STRING
603
>
atom -> STRING
603
(
atom -> STRING
603
!=
atom -> STRING
603
is
atom -> STRING
603
==
atom -> STRING
603
-
atom -> STRING
603
|
atom -> STRING
603
<=
atom -> STRING
604
atom_expr
590
604
True
605
604
NAME
597
604
[
593
604
(
607
604
NUMBER
596
604
-
606
604
factor
1135
604
{
599
604
False
601
604
STRING
603
604
power
610
604
atom
609
604
+
604
604
~
611
604
None
608
605
!=
atom -> True
605
is
atom -> True
605
//
atom -> True
605
|
atom -> True
605
<=
atom -> True
605
^
atom -> True
605
%
atom -> True
605
@
atom -> True
605
**
atom -> True
605
(
atom -> True
605
not
atom -> True
605
>>
atom -> True
605
<
atom -> True
605
==
atom -> True
605
and
atom -> True
605
else
atom -> True
605
in
atom -> True
605
&
atom -> True
605
.
atom -> True
605
<<
atom -> True
605
/
atom -> True
605
*
atom -> True
605
>
atom -> True
605
+
atom -> True
605
>=
atom -> True
605
or
atom -> True
605
-
atom -> True
605
[
atom -> True
606
atom_expr
590
606
True
605
606
NAME
597
606
[
593
606
(
607
606
NUMBER
596
606
-
606
606
factor
1136
606
{
599
606
False
601
606
STRING
603
606
power
610
606
atom
609
606
+
604
606
~
611
606
None
608
607
and_test
217
607
atom_expr
218
607
and_expr
219
607
term
220
607
factor
221
607
shift_expr
222
607
arith_expr
223
607
NUMBER
224
607
NAME
225
607
not
226
607
[
227
607
{
228
607
expr
229
607
test_list_comp
1137
607
not_test
231
607
False
232
607
xor_expr
234
607
STRING
235
607
lambda
236
607
atom
237
607
+
238
607
True
239
607
-
240
607
(
241
607
None
242
607
comparison
243
607
power
244
607
)
1138
607
~
245
607
or_test
246
607
test
247
607
lambdef
248
607
test_list
249
608
!=
atom -> None
608
//
atom -> None
608
^
atom -> None
608
>=
atom -> None
608
&
atom -> None
608
**
atom -> None
608
<
atom -> None
608
*
atom -> None
608
>
atom -> None
608
@
atom -> None
608
|
atom -> None
608
-
atom -> None
608
%
atom -> None
608
not
atom -> None
608
==
atom -> None
608
in
atom -> None
608
/
atom -> None
608
or
atom -> None
608
and
atom -> None
608
+
atom -> None
608
(
atom -> None
608
else
atom -> None
608
>>
atom -> None
608
is
atom -> None
608
[
atom -> None
608
<=
atom -> None
608
<<
atom -> None
608
.
atom -> None
609
[
1139
609
(
1140
609
trailer
1141
609
.
1142
609
<<
trailer_expr -> 
609
trailer_expr
1143
609
@
trailer_expr -> 
609
!=
trailer_expr -> 
609
-
trailer_expr -> 
609
^
trailer_expr -> 
609
<
trailer_expr -> 
609
/
trailer_expr -> 
609
is
trailer_expr -> 
609
==
trailer_expr -> 
609
&
trailer_expr -> 
609
>=
trailer_expr -> 
609
or
trailer_expr -> 
609
in
trailer_expr -> 
609
*
trailer_expr -> 
609
not
trailer_expr -> 
609
**
trailer_expr -> 
609
<=
trailer_expr -> 
609
+
trailer_expr -> 
609
//
trailer_expr -> 
609
%
trailer_expr -> 
609
>
trailer_expr -> 
609
else
trailer_expr -> 
609
|
trailer_expr -> 
609
>>
trailer_expr -> 
609
and
trailer_expr -> 
610
*
factor -> power
610
else
factor -> power
610
>>
factor -> power
610
>=
factor -> power
610
<
factor -> power
610
&
factor -> power
610
|
factor -> power
610
@
factor -> power
610
!=
factor -> power
610
<=
factor -> power
610
//
factor -> power
610
in
factor -> power
610
and
factor -> power
610
>
factor -> power
610
+
factor -> power
610
-
factor -> power
610
not
factor -> power
610
is
factor -> power
610
==
factor -> power
610
%
factor -> power
610
or
factor -> power
610
^
factor -> power
610
<<
factor -> power
610
/
factor -> power
611
atom_expr
590
611
True
605
611
NAME
597
611
[
593
611
(
607
611
NUMBER
596
611
-
606
611
factor
1144
611
{
599
611
False
601
611
STRING
603
611
power
610
611
atom
609
611
+
604
611
~
611
611
None
608
612
else
and_test -> not_test
612
or
and_test -> not_test
612
and
1145
613
atom_expr
590
613
and_expr
591
613
term
592
613
[
593
613
shift_expr
594
613
arith_expr
595
613
NUMBER
596
613
NAME
597
613
factor
598
613
{
599
613
expr
600
613
False
601
613
xor_expr
602
613
STRING
603
613
+
604
613
True
605
613
-
606
613
(
607
613
None
608
613
atom
609
613
not_test
1146
613
power
610
613
~
611
613
not
613
613
comparison
614
614
or
not_test -> comparison
614
and
not_test -> comparison
614
else
not_test -> comparison
615
else
or_test -> and_test
615
or
1147
616
atom_expr
6
616
factor
10
616
[
3
616
term
15
616
STRING
43
616
arith_expr
32
616
NUMBER
8
616
NAME
37
616
{
5
616
expr
7
616
not
51
616
True
9
616
shift_expr
12
616
atom
13
616
xor_expr
14
616
(
34
616
None
29
616
and_test
20
616
and_expr
21
616
False
23
616
or_test
25
616
lambda
28
616
+
30
616
-
36
616
not_test
40
616
power
47
616
lambdef
41
616
~
44
616
test
1148
616
comparison
48
617
|=
lambdef -> lambda : test
617
=
lambdef -> lambda : test
617
>>=
lambdef -> lambda : test
617
@=
lambdef -> lambda : test
617
^=
lambdef -> lambda : test
617
:
lambdef -> lambda : test
617
%=
lambdef -> lambda : test
617
//=
lambdef -> lambda : test
617
,
lambdef -> lambda : test
617
**=
lambdef -> lambda : test
617
-=
lambdef -> lambda : test
617
+=
lambdef -> lambda : test
617
/=
lambdef -> lambda : test
617
&=
lambdef -> lambda : test
617
*=
lambdef -> lambda : test
617
<<=
lambdef -> lambda : test
617
NEWLINE
lambdef -> lambda : test
618
vfpdef
212
618
NAME
211
618
varargslist
1149
619
and
shift_expr -> arith_expr >> shift_expr
619
//=
shift_expr -> arith_expr >> shift_expr
619
+=
shift_expr -> arith_expr >> shift_expr
619
^
shift_expr -> arith_expr >> shift_expr
619
==
shift_expr -> arith_expr >> shift_expr
619
!=
shift_expr -> arith_expr >> shift_expr
619
|
shift_expr -> arith_expr >> shift_expr
619
not
shift_expr -> arith_expr >> shift_expr
619
:
shift_expr -> arith_expr >> shift_expr
619
in
shift_expr -> arith_expr >> shift_expr
619
-=
shift_expr -> arith_expr >> shift_expr
619
*=
shift_expr -> arith_expr >> shift_expr
619
,
shift_expr -> arith_expr >> shift_expr
619
>=
shift_expr -> arith_expr >> shift_expr
619
or
shift_expr -> arith_expr >> shift_expr
619
@=
shift_expr -> arith_expr >> shift_expr
619
/=
shift_expr -> arith_expr >> shift_expr
619
<<=
shift_expr -> arith_expr >> shift_expr
619
<=
shift_expr -> arith_expr >> shift_expr
619
>>=
shift_expr -> arith_expr >> shift_expr
619
^=
shift_expr -> arith_expr >> shift_expr
619
is
shift_expr -> arith_expr >> shift_expr
619
>
shift_expr -> arith_expr >> shift_expr
619
|=
shift_expr -> arith_expr >> shift_expr
619
&
shift_expr -> arith_expr >> shift_expr
619
NEWLINE
shift_expr -> arith_expr >> shift_expr
619
%=
shift_expr -> arith_expr >> shift_expr
619
<
shift_expr -> arith_expr >> shift_expr
619
&=
shift_expr -> arith_expr >> shift_expr
619
if
shift_expr -> arith_expr >> shift_expr
619
=
shift_expr -> arith_expr >> shift_expr
619
**=
shift_expr -> arith_expr >> shift_expr
620
:
shift_expr -> arith_expr << shift_expr
620
&=
shift_expr -> arith_expr << shift_expr
620
in
shift_expr -> arith_expr << shift_expr
620
==
shift_expr -> arith_expr << shift_expr
620
>=
shift_expr -> arith_expr << shift_expr
620
if
shift_expr -> arith_expr << shift_expr
620
=
shift_expr -> arith_expr << shift_expr
620
!=
shift_expr -> arith_expr << shift_expr
620
NEWLINE
shift_expr -> arith_expr << shift_expr
620
-=
shift_expr -> arith_expr << shift_expr
620
is
shift_expr -> arith_expr << shift_expr
620
|=
shift_expr -> arith_expr << shift_expr
620
<<=
shift_expr -> arith_expr << shift_expr
620
|
shift_expr -> arith_expr << shift_expr
620
or
shift_expr -> arith_expr << shift_expr
620
%=
shift_expr -> arith_expr << shift_expr
620
+=
shift_expr -> arith_expr << shift_expr
620
@=
shift_expr -> arith_expr << shift_expr
620
>>=
shift_expr -> arith_expr << shift_expr
620
<
shift_expr -> arith_expr << shift_expr
620
not
shift_expr -> arith_expr << shift_expr
620
//=
shift_expr -> arith_expr << shift_expr
620
>
shift_expr -> arith_expr << shift_expr
620
^=
shift_expr -> arith_expr << shift_expr
620
,
shift_expr -> arith_expr << shift_expr
620
^
shift_expr -> arith_expr << shift_expr
620
**=
shift_expr -> arith_expr << shift_expr
620
&
shift_expr -> arith_expr << shift_expr
620
/=
shift_expr -> arith_expr << shift_expr
620
and
shift_expr -> arith_expr << shift_expr
620
<=
shift_expr -> arith_expr << shift_expr
620
*=
shift_expr -> arith_expr << shift_expr
621
<<=
test_list -> test , test_list
621
//=
test_list -> test , test_list
621
/=
test_list -> test , test_list
621
^=
test_list -> test , test_list
621
%=
test_list -> test , test_list
621
-=
test_list -> test , test_list
621
+=
test_list -> test , test_list
621
=
test_list -> test , test_list
621
NEWLINE
test_list -> test , test_list
621
|=
test_list -> test , test_list
621
@=
test_list -> test , test_list
621
**=
test_list -> test , test_list
621
:
test_list -> test , test_list
621
*=
test_list -> test , test_list
621
&=
test_list -> test , test_list
621
>>=
test_list -> test , test_list
622
and_test
217
622
atom_expr
218
622
and_expr
219
622
term
220
622
factor
221
622
shift_expr
222
622
arith_expr
223
622
NUMBER
224
622
NAME
225
622
not
226
622
[
227
622
{
228
622
expr
229
622
not_test
231
622
False
232
622
xor_expr
234
622
STRING
235
622
atom
237
622
+
238
622
True
239
622
-
240
622
(
241
622
None
242
622
comparison
243
622
power
244
622
~
245
622
or_test
1150
623
atom_expr
218
623
NUMBER
224
623
NAME
225
623
[
227
623
{
228
623
False
232
623
STRING
235
623
atom
237
623
+
238
623
True
239
623
-
240
623
(
241
623
None
242
623
power
244
623
~
245
623
factor
1151
624
atom_expr
218
624
and_expr
219
624
term
220
624
factor
221
624
shift_expr
222
624
arith_expr
223
624
NUMBER
224
624
NAME
225
624
[
227
624
{
228
624
False
232
624
STRING
235
624
xor_expr
1152
624
atom
237
624
+
238
624
True
239
624
-
240
624
(
241
624
None
242
624
power
244
624
~
245
625
atom_expr
218
625
factor
221
625
term
220
625
NUMBER
224
625
NAME
225
625
[
227
625
{
228
625
False
232
625
STRING
235
625
atom
237
625
+
238
625
True
239
625
-
240
625
(
241
625
None
242
625
power
244
625
arith_expr
1153
625
~
245
626
atom_expr
218
626
factor
221
626
term
220
626
NUMBER
224
626
NAME
225
626
[
227
626
{
228
626
False
232
626
STRING
235
626
atom
237
626
+
238
626
True
239
626
-
240
626
arith_expr
1154
626
(
241
626
None
242
626
power
244
626
~
245
627
atom_expr
218
627
factor
221
627
NUMBER
224
627
NAME
225
627
[
227
627
{
228
627
False
232
627
STRING
235
627
atom
237
627
+
238
627
term
1155
627
True
239
627
-
240
627
(
241
627
None
242
627
power
244
627
~
245
628
atom_expr
218
628
factor
221
628
NUMBER
224
628
NAME
225
628
[
227
628
{
228
628
False
232
628
STRING
235
628
atom
237
628
+
238
628
term
1156
628
True
239
628
-
240
628
(
241
628
None
242
628
power
244
628
~
245
629
atom_expr
218
629
factor
221
629
NUMBER
224
629
NAME
225
629
[
227
629
{
228
629
term
1157
629
False
232
629
STRING
235
629
atom
237
629
+
238
629
True
239
629
-
240
629
(
241
629
None
242
629
power
244
629
~
245
630
atom_expr
218
630
factor
221
630
NUMBER
224
630
NAME
225
630
[
227
630
{
228
630
False
232
630
STRING
235
630
atom
237
630
+
238
630
True
239
630
-
240
630
(
241
630
None
242
630
power
244
630
term
1158
630
~
245
631
atom_expr
218
631
factor
221
631
NUMBER
224
631
NAME
225
631
[
227
631
{
228
631
False
232
631
STRING
235
631
atom
237
631
+
238
631
True
239
631
-
240
631
(
241
631
None
242
631
term
1159
631
power
244
631
~
245
632
atom_expr
218
632
factor
221
632
term
220
632
shift_expr
222
632
arith_expr
223
632
NUMBER
224
632
NAME
225
632
[
227
632
{
228
632
False
232
632
STRING
235
632
atom
237
632
+
238
632
True
239
632
-
240
632
(
241
632
None
242
632
power
244
632
~
245
632
and_expr
1160
633
atom_expr
218
633
factor
221
633
term
220
633
arith_expr
223
633
NUMBER
224
633
NAME
225
633
[
227
633
{
228
633
False
232
633
STRING
235
633
atom
237
633
+
238
633
True
239
633
-
240
633
(
241
633
None
242
633
power
244
633
~
245
633
shift_expr
1161
634
atom_expr
218
634
factor
221
634
term
220
634
arith_expr
223
634
NUMBER
224
634
NAME
225
634
[
227
634
{
228
634
False
232
634
STRING
235
634
shift_expr
1162
634
atom
237
634
+
238
634
True
239
634
-
240
634
(
241
634
None
242
634
power
244
634
~
245
635
for
not_test -> not not_test
635
if
not_test -> not not_test
635
)
not_test -> not not_test
635
,
not_test -> not not_test
635
or
not_test -> not not_test
635
and
not_test -> not not_test
636
]
1163
637
in
atom -> [ ]
637
>=
atom -> [ ]
637
%
atom -> [ ]
637
is
atom -> [ ]
637
^
atom -> [ ]
637
//
atom -> [ ]
637
or
atom -> [ ]
637
not
atom -> [ ]
637
[
atom -> [ ]
637
and
atom -> [ ]
637
/
atom -> [ ]
637
!=
atom -> [ ]
637
>
atom -> [ ]
637
&
atom -> [ ]
637
**
atom -> [ ]
637
@
atom -> [ ]
637
==
atom -> [ ]
637
<<
atom -> [ ]
637
if
atom -> [ ]
637
<
atom -> [ ]
637
,
atom -> [ ]
637
(
atom -> [ ]
637
<=
atom -> [ ]
637
*
atom -> [ ]
637
.
atom -> [ ]
637
>>
atom -> [ ]
637
|
atom -> [ ]
637
)
atom -> [ ]
637
-
atom -> [ ]
637
+
atom -> [ ]
637
for
atom -> [ ]
638
<<
atom -> { }
638
+
atom -> { }
638
//
atom -> { }
638
is
atom -> { }
638
>=
atom -> { }
638
<=
atom -> { }
638
>
atom -> { }
638
*
atom -> { }
638
^
atom -> { }
638
%
atom -> { }
638
>>
atom -> { }
638
)
atom -> { }
638
.
atom -> { }
638
not
atom -> { }
638
==
atom -> { }
638
if
atom -> { }
638
in
atom -> { }
638
<
atom -> { }
638
|
atom -> { }
638
(
atom -> { }
638
/
atom -> { }
638
for
atom -> { }
638
and
atom -> { }
638
**
atom -> { }
638
@
atom -> { }
638
-
atom -> { }
638
&
atom -> { }
638
,
atom -> { }
638
!=
atom -> { }
638
or
atom -> { }
638
[
atom -> { }
639
atom_expr
218
639
and_expr
219
639
term
220
639
factor
221
639
shift_expr
222
639
arith_expr
223
639
NUMBER
224
639
NAME
225
639
[
227
639
{
228
639
expr
229
639
False
232
639
xor_expr
234
639
STRING
235
639
comparison
1164
639
atom
237
639
+
238
639
True
239
639
-
240
639
(
241
639
None
242
639
power
244
639
~
245
640
^=
atom -> ( test_list_comp )
640
NEWLINE
atom -> ( test_list_comp )
640
if
atom -> ( test_list_comp )
640
or
atom -> ( test_list_comp )
640
*
atom -> ( test_list_comp )
640
+=
atom -> ( test_list_comp )
640
|
atom -> ( test_list_comp )
640
>>
atom -> ( test_list_comp )
640
%
atom -> ( test_list_comp )
640
not
atom -> ( test_list_comp )
640
&=
atom -> ( test_list_comp )
640
//
atom -> ( test_list_comp )
640
+
atom -> ( test_list_comp )
640
/=
atom -> ( test_list_comp )
640
and
atom -> ( test_list_comp )
640
%=
atom -> ( test_list_comp )
640
>
atom -> ( test_list_comp )
640
[
atom -> ( test_list_comp )
640
^
atom -> ( test_list_comp )
640
:
atom -> ( test_list_comp )
640
!=
atom -> ( test_list_comp )
640
<<
atom -> ( test_list_comp )
640
**
atom -> ( test_list_comp )
640
is
atom -> ( test_list_comp )
640
<=
atom -> ( test_list_comp )
640
-
atom -> ( test_list_comp )
640
&
atom -> ( test_list_comp )
640
(
atom -> ( test_list_comp )
640
,
atom -> ( test_list_comp )
640
>>=
atom -> ( test_list_comp )
640
in
atom -> ( test_list_comp )
640
@
atom -> ( test_list_comp )
640
.
atom -> ( test_list_comp )
640
//=
atom -> ( test_list_comp )
640
@=
atom -> ( test_list_comp )
640
<<=
atom -> ( test_list_comp )
640
<
atom -> ( test_list_comp )
640
/
atom -> ( test_list_comp )
640
==
atom -> ( test_list_comp )
640
>=
atom -> ( test_list_comp )
640
**=
atom -> ( test_list_comp )
640
*=
atom -> ( test_list_comp )
640
-=
atom -> ( test_list_comp )
640
=
atom -> ( test_list_comp )
640
|=
atom -> ( test_list_comp )
641
atom_expr
218
641
and_expr
219
641
term
220
641
factor
221
641
shift_expr
222
641
arith_expr
223
641
NUMBER
224
641
NAME
225
641
not
226
641
[
227
641
{
228
641
expr
229
641
not_test
231
641
False
232
641
xor_expr
234
641
STRING
235
641
atom
237
641
+
238
641
True
239
641
-
240
641
(
241
641
None
242
641
comparison
243
641
power
244
641
and_test
1165
641
~
245
642
atom_expr
218
642
and_expr
219
642
term
220
642
factor
221
642
shift_expr
222
642
expr
1166
642
arith_expr
223
642
NUMBER
224
642
NAME
225
642
[
227
642
{
228
642
False
232
642
xor_expr
234
642
STRING
235
642
atom
237
642
+
238
642
True
239
642
-
240
642
(
241
642
None
242
642
power
244
642
~
245
643
and_test
217
643
atom_expr
218
643
and_expr
219
643
term
220
643
factor
221
643
shift_expr
222
643
arith_expr
223
643
NUMBER
224
643
NAME
225
643
not
226
643
[
227
643
{
228
643
expr
229
643
not_test
231
643
False
232
643
xor_expr
234
643
STRING
235
643
lambda
236
643
atom
237
643
+
238
643
True
239
643
-
240
643
(
241
643
None
242
643
comparison
243
643
power
244
643
~
245
643
test
1167
643
or_test
246
643
lambdef
248
644
:
1168
645
atom_expr
472
645
and_expr
473
645
term
474
645
factor
475
645
shift_expr
476
645
arith_expr
477
645
NUMBER
478
645
NAME
479
645
[
480
645
{
481
645
expr
482
645
not_test
483
645
False
484
645
xor_expr
485
645
atom
487
645
STRING
488
645
+
489
645
(
490
645
True
491
645
-
492
645
None
493
645
subscriptlist
1169
645
or_test
494
645
and_test
495
645
power
496
645
~
497
645
lambda
498
645
:
maybe_test -> 
645
maybe_test
499
645
test
500
645
not
501
645
comparison
502
645
lambdef
503
645
subscript
504
646
and_test
505
646
atom_expr
506
646
and_expr
507
646
term
508
646
factor
509
646
shift_expr
510
646
arith_expr
511
646
NUMBER
512
646
NAME
513
646
not
514
646
[
515
646
{
516
646
expr
517
646
)
1170
646
not_test
519
646
False
520
646
xor_expr
521
646
STRING
522
646
lambda
523
646
arglist
1171
646
atom
525
646
+
526
646
True
527
646
-
528
646
or_test
529
646
(
530
646
None
531
646
comparison
532
646
power
533
646
test
534
646
~
535
646
*
536
646
lambdef
537
646
**
538
646
argument
539
647
NAME
1172
648
trailer_expr
1173
648
[
645
648
(
646
648
.
647
648
trailer
648
648
<<
trailer_expr -> 
648
@
trailer_expr -> 
648
!=
trailer_expr -> 
648
-
trailer_expr -> 
648
^
trailer_expr -> 
648
<
trailer_expr -> 
648
for
trailer_expr -> 
648
/
trailer_expr -> 
648
is
trailer_expr -> 
648
==
trailer_expr -> 
648
&
trailer_expr -> 
648
>=
trailer_expr -> 
648
or
trailer_expr -> 
648
in
trailer_expr -> 
648
*
trailer_expr -> 
648
not
trailer_expr -> 
648
)
trailer_expr -> 
648
**
trailer_expr -> 
648
<=
trailer_expr -> 
648
+
trailer_expr -> 
648
//
trailer_expr -> 
648
%
trailer_expr -> 
648
>
trailer_expr -> 
648
,
trailer_expr -> 
648
|
trailer_expr -> 
648
if
trailer_expr -> 
648
and
trailer_expr -> 
648
>>
trailer_expr -> 
649
==
atom_expr -> atom trailer_expr
649
%
atom_expr -> atom trailer_expr
649
+
atom_expr -> atom trailer_expr
649
not
atom_expr -> atom trailer_expr
649
or
atom_expr -> atom trailer_expr
649
//
atom_expr -> atom trailer_expr
649
and
atom_expr -> atom trailer_expr
649
!=
atom_expr -> atom trailer_expr
649
<<
atom_expr -> atom trailer_expr
649
for
atom_expr -> atom trailer_expr
649
if
atom_expr -> atom trailer_expr
649
-
atom_expr -> atom trailer_expr
649
)
atom_expr -> atom trailer_expr
649
>>
atom_expr -> atom trailer_expr
649
**
atom_expr -> atom trailer_expr
649
/
atom_expr -> atom trailer_expr
649
<
atom_expr -> atom trailer_expr
649
in
atom_expr -> atom trailer_expr
649
&
atom_expr -> atom trailer_expr
649
is
atom_expr -> atom trailer_expr
649
|
atom_expr -> atom trailer_expr
649
>
atom_expr -> atom trailer_expr
649
>=
atom_expr -> atom trailer_expr
649
<=
atom_expr -> atom trailer_expr
649
@
atom_expr -> atom trailer_expr
649
*
atom_expr -> atom trailer_expr
649
,
atom_expr -> atom trailer_expr
649
^
atom_expr -> atom trailer_expr
650
<<
factor -> + factor
650
,
factor -> + factor
650
&
factor -> + factor
650
>
factor -> + factor
650
if
factor -> + factor
650
not
factor -> + factor
650
+
factor -> + factor
650
)
factor -> + factor
650
^
factor -> + factor
650
==
factor -> + factor
650
/
factor -> + factor
650
|
factor -> + factor
650
>=
factor -> + factor
650
for
factor -> + factor
650
%
factor -> + factor
650
<
factor -> + factor
650
is
factor -> + factor
650
or
factor -> + factor
650
@
factor -> + factor
650
//
factor -> + factor
650
and
factor -> + factor
650
-
factor -> + factor
650
in
factor -> + factor
650
*
factor -> + factor
650
!=
factor -> + factor
650
>>
factor -> + factor
650
<=
factor -> + factor
651
@
factor -> - factor
651
^
factor -> - factor
651
==
factor -> - factor
651
in
factor -> - factor
651
>>
factor -> - factor
651
)
factor -> - factor
651
,
factor -> - factor
651
//
factor -> - factor
651
and
factor -> - factor
651
for
factor -> - factor
651
<=
factor -> - factor
651
!=
factor -> - factor
651
-
factor -> - factor
651
&
factor -> - factor
651
not
factor -> - factor
651
>
factor -> - factor
651
*
factor -> - factor
651
%
factor -> - factor
651
/
factor -> - factor
651
<
factor -> - factor
651
|
factor -> - factor
651
+
factor -> - factor
651
if
factor -> - factor
651
<<
factor -> - factor
651
is
factor -> - factor
651
or
factor -> - factor
651
>=
factor -> - factor
652
)
1174
653
)
atom -> ( )
653
>=
atom -> ( )
653
>>
atom -> ( )
653
not
atom -> ( )
653
if
atom -> ( )
653
&
atom -> ( )
653
^
atom -> ( )
653
.
atom -> ( )
653
for
atom -> ( )
653
/
atom -> ( )
653
in
atom -> ( )
653
>
atom -> ( )
653
%
atom -> ( )
653
(
atom -> ( )
653
==
atom -> ( )
653
,
atom -> ( )
653
[
atom -> ( )
653
<=
atom -> ( )
653
+
atom -> ( )
653
|
atom -> ( )
653
-
atom -> ( )
653
or
atom -> ( )
653
@
atom -> ( )
653
<<
atom -> ( )
653
is
atom -> ( )
653
**
atom -> ( )
653
*
atom -> ( )
653
and
atom -> ( )
653
<
atom -> ( )
653
!=
atom -> ( )
653
//
atom -> ( )
654
for
factor -> ~ factor
654
<<
factor -> ~ factor
654
in
factor -> ~ factor
654
<=
factor -> ~ factor
654
if
factor -> ~ factor
654
|
factor -> ~ factor
654
<
factor -> ~ factor
654
>>
factor -> ~ factor
654
==
factor -> ~ factor
654
>=
factor -> ~ factor
654
!=
factor -> ~ factor
654
,
factor -> ~ factor
654
//
factor -> ~ factor
654
*
factor -> ~ factor
654
/
factor -> ~ factor
654
+
factor -> ~ factor
654
is
factor -> ~ factor
654
not
factor -> ~ factor
654
and
factor -> ~ factor
654
)
factor -> ~ factor
654
^
factor -> ~ factor
654
@
factor -> ~ factor
654
>
factor -> ~ factor
654
-
factor -> ~ factor
654
or
factor -> ~ factor
654
&
factor -> ~ factor
654
%
factor -> ~ factor
655
atom_expr
590
655
and_expr
591
655
term
592
655
[
593
655
shift_expr
594
655
arith_expr
595
655
NUMBER
596
655
NAME
597
655
factor
598
655
{
599
655
expr
600
655
False
601
655
xor_expr
602
655
STRING
603
655
+
604
655
True
605
655
-
606
655
(
607
655
None
608
655
atom
609
655
power
610
655
~
611
655
not_test
612
655
not
613
655
comparison
614
655
or_test
1175
655
and_test
615
656
atom_expr
252
656
True
253
656
and_expr
254
656
(
255
656
NUMBER
256
656
NAME
258
656
{
259
656
False
260
656
arith_expr
261
656
STRING
262
656
power
263
656
[
264
656
factor
265
656
~
266
656
atom
267
656
+
268
656
term
269
656
None
270
656
shift_expr
271
656
xor_expr
272
656
expr
273
656
-
274
656
expr_list
1176
657
)
test_list_comp -> test comp_for
658
atom_expr
1020
658
and_expr
1021
658
term
1022
658
factor
1023
658
shift_expr
1024
658
arith_expr
1025
658
NUMBER
1026
658
NAME
1027
658
not
1028
658
[
1029
658
{
1030
658
expr
1031
658
not_test
1032
658
False
1033
658
xor_expr
1034
658
STRING
1035
658
lambda
1036
658
atom
1037
658
+
1038
658
True
1039
658
-
1040
658
(
1041
658
None
1042
658
power
1043
658
and_test
1044
658
~
1045
658
test
1177
658
or_test
1047
658
comparison
1048
658
lambdef
1049
658
test_list
1178
659
+=
and_test -> not_test and and_test
659
**=
and_test -> not_test and and_test
659
*=
and_test -> not_test and and_test
659
//=
and_test -> not_test and and_test
659
-=
and_test -> not_test and and_test
659
@=
and_test -> not_test and and_test
659
%=
and_test -> not_test and and_test
659
,
and_test -> not_test and and_test
659
/=
and_test -> not_test and and_test
659
>>=
and_test -> not_test and and_test
659
=
and_test -> not_test and and_test
659
NEWLINE
and_test -> not_test and and_test
659
if
and_test -> not_test and and_test
659
:
and_test -> not_test and and_test
659
&=
and_test -> not_test and and_test
659
or
and_test -> not_test and and_test
659
|=
and_test -> not_test and and_test
659
<<=
and_test -> not_test and and_test
659
^=
and_test -> not_test and and_test
660
atom_expr
252
660
True
253
660
(
255
660
NUMBER
256
660
NAME
258
660
{
259
660
False
260
660
STRING
262
660
power
263
660
[
264
660
~
266
660
atom
267
660
factor
1179
660
+
268
660
None
270
660
-
274
661
atom_expr
252
661
True
253
661
and_expr
254
661
(
255
661
NUMBER
256
661
NAME
258
661
{
259
661
False
260
661
arith_expr
261
661
STRING
262
661
power
263
661
[
264
661
factor
265
661
~
266
661
atom
267
661
+
268
661
term
269
661
None
270
661
shift_expr
271
661
xor_expr
1180
661
-
274
662
)
1181
663
in
atom -> ( )
663
+
atom -> ( )
663
|
atom -> ( )
663
-
atom -> ( )
663
>>
atom -> ( )
663
<<
atom -> ( )
663
,
atom -> ( )
663
%
atom -> ( )
663
(
atom -> ( )
663
&
atom -> ( )
663
*
atom -> ( )
663
**
atom -> ( )
663
^
atom -> ( )
663
.
atom -> ( )
663
@
atom -> ( )
663
//
atom -> ( )
663
[
atom -> ( )
663
/
atom -> ( )
664
atom_expr
1182
664
and_expr
1183
664
term
1184
664
factor
1185
664
shift_expr
1186
664
arith_expr
1187
664
NUMBER
1188
664
NAME
1189
664
[
1190
664
{
1191
664
expr
1192
664
not_test
1193
664
False
1194
664
test_list
1195
664
xor_expr
1196
664
STRING
1197
664
atom
1198
664
+
1199
664
True
1200
664
(
1201
664
-
1202
664
None
1203
664
and_test
1204
664
power
1205
664
~
1206
664
lambda
1207
664
not
1208
664
comparison
1209
664
test
1210
664
lambdef
1211
664
or_test
1212
665
(
atom -> { }
665
+
atom -> { }
665
<<
atom -> { }
665
.
atom -> { }
665
//
atom -> { }
665
/
atom -> { }
665
&
atom -> { }
665
*
atom -> { }
665
**
atom -> { }
665
,
atom -> { }
665
in
atom -> { }
665
^
atom -> { }
665
[
atom -> { }
665
@
atom -> { }
665
-
atom -> { }
665
%
atom -> { }
665
|
atom -> { }
665
>>
atom -> { }
666
atom_expr
252
666
True
253
666
(
255
666
NUMBER
256
666
NAME
258
666
{
259
666
False
260
666
arith_expr
261
666
STRING
262
666
power
263
666
[
264
666
factor
265
666
~
266
666
atom
267
666
+
268
666
term
269
666
shift_expr
1213
666
None
270
666
-
274
667
atom_expr
252
667
True
253
667
(
255
667
NUMBER
256
667
NAME
258
667
{
259
667
False
260
667
arith_expr
261
667
STRING
262
667
power
263
667
[
264
667
factor
265
667
~
266
667
atom
267
667
+
268
667
term
269
667
None
270
667
shift_expr
1214
667
-
274
668
]
1215
669
.
atom -> [ ]
669
**
atom -> [ ]
669
/
atom -> [ ]
669
@
atom -> [ ]
669
in
atom -> [ ]
669
%
atom -> [ ]
669
<<
atom -> [ ]
669
>>
atom -> [ ]
669
|
atom -> [ ]
669
^
atom -> [ ]
669
+
atom -> [ ]
669
//
atom -> [ ]
669
,
atom -> [ ]
669
-
atom -> [ ]
669
(
atom -> [ ]
669
&
atom -> [ ]
669
[
atom -> [ ]
669
*
atom -> [ ]
670
atom_expr
252
670
True
253
670
(
255
670
NUMBER
256
670
NAME
258
670
{
259
670
False
260
670
STRING
262
670
power
263
670
[
264
670
factor
265
670
~
266
670
atom
267
670
+
268
670
term
1216
670
None
270
670
-
274
671
atom_expr
252
671
True
253
671
(
255
671
NUMBER
256
671
NAME
258
671
{
259
671
False
260
671
STRING
262
671
power
263
671
[
264
671
factor
265
671
~
266
671
atom
267
671
+
268
671
None
270
671
term
1217
671
-
274
672
atom_expr
252
672
True
253
672
(
255
672
NUMBER
256
672
NAME
258
672
{
259
672
term
1218
672
False
260
672
STRING
262
672
power
263
672
[
264
672
factor
265
672
~
266
672
atom
267
672
+
268
672
None
270
672
-
274
673
atom_expr
252
673
True
253
673
(
255
673
NUMBER
256
673
NAME
258
673
{
259
673
False
260
673
STRING
262
673
power
263
673
[
264
673
factor
265
673
~
266
673
atom
267
673
+
268
673
None
270
673
term
1219
673
-
274
674
atom_expr
252
674
True
253
674
(
255
674
NUMBER
256
674
NAME
258
674
{
259
674
False
260
674
STRING
262
674
power
263
674
[
264
674
factor
265
674
~
266
674
atom
267
674
+
268
674
None
270
674
term
1220
674
-
274
675
<<
factor -> ~ factor
675
in
factor -> ~ factor
675
^
factor -> ~ factor
675
-
factor -> ~ factor
675
,
factor -> ~ factor
675
|
factor -> ~ factor
675
//
factor -> ~ factor
675
&
factor -> ~ factor
675
/
factor -> ~ factor
675
@
factor -> ~ factor
675
+
factor -> ~ factor
675
*
factor -> ~ factor
675
%
factor -> ~ factor
675
>>
factor -> ~ factor
676
atom_expr
472
676
and_expr
473
676
term
474
676
factor
475
676
shift_expr
476
676
arith_expr
477
676
NUMBER
478
676
NAME
479
676
[
480
676
{
481
676
expr
482
676
not_test
483
676
False
484
676
xor_expr
485
676
atom
487
676
STRING
488
676
+
489
676
(
490
676
True
491
676
-
492
676
None
493
676
or_test
494
676
subscriptlist
1221
676
and_test
495
676
power
496
676
~
497
676
lambda
498
676
:
maybe_test -> 
676
maybe_test
499
676
test
500
676
not
501
676
comparison
502
676
lambdef
503
676
subscript
504
677
and_test
505
677
atom_expr
506
677
and_expr
507
677
term
508
677
factor
509
677
shift_expr
510
677
arith_expr
511
677
NUMBER
512
677
NAME
513
677
not
514
677
[
515
677
{
516
677
expr
517
677
)
1222
677
not_test
519
677
False
520
677
xor_expr
521
677
STRING
522
677
lambda
523
677
atom
525
677
+
526
677
True
527
677
-
528
677
or_test
529
677
(
530
677
None
531
677
comparison
532
677
power
533
677
test
534
677
arglist
1223
677
~
535
677
*
536
677
lambdef
537
677
**
538
677
argument
539
678
[
676
678
(
677
678
trailer_expr
1224
678
trailer
678
678
in
trailer_expr -> 
678
.
680
678
<<
trailer_expr -> 
678
*
trailer_expr -> 
678
@
trailer_expr -> 
678
-
trailer_expr -> 
678
**
trailer_expr -> 
678
+
trailer_expr -> 
678
^
trailer_expr -> 
678
//
trailer_expr -> 
678
%
trailer_expr -> 
678
/
trailer_expr -> 
678
,
trailer_expr -> 
678
|
trailer_expr -> 
678
&
trailer_expr -> 
678
>>
trailer_expr -> 
679
%
atom_expr -> atom trailer_expr
679
+
atom_expr -> atom trailer_expr
679
**
atom_expr -> atom trailer_expr
679
<<
atom_expr -> atom trailer_expr
679
^
atom_expr -> atom trailer_expr
679
@
atom_expr -> atom trailer_expr
679
*
atom_expr -> atom trailer_expr
679
/
atom_expr -> atom trailer_expr
679
//
atom_expr -> atom trailer_expr
679
,
atom_expr -> atom trailer_expr
679
in
atom_expr -> atom trailer_expr
679
-
atom_expr -> atom trailer_expr
679
&
atom_expr -> atom trailer_expr
679
|
atom_expr -> atom trailer_expr
679
>>
atom_expr -> atom trailer_expr
680
NAME
1225
681
<<
factor -> + factor
681
,
factor -> + factor
681
/
factor -> + factor
681
&
factor -> + factor
681
|
factor -> + factor
681
//
factor -> + factor
681
@
factor -> + factor
681
^
factor -> + factor
681
-
factor -> + factor
681
in
factor -> + factor
681
%
factor -> + factor
681
>>
factor -> + factor
681
+
factor -> + factor
681
*
factor -> + factor
682
atom_expr
252
682
True
253
682
(
255
682
NUMBER
256
682
NAME
258
682
{
259
682
False
260
682
STRING
262
682
power
263
682
[
264
682
factor
265
682
~
266
682
atom
267
682
+
268
682
term
269
682
None
270
682
arith_expr
1226
682
-
274
683
atom_expr
252
683
True
253
683
(
255
683
NUMBER
256
683
NAME
258
683
{
259
683
False
260
683
STRING
262
683
power
263
683
[
264
683
factor
265
683
~
266
683
atom
267
683
+
268
683
term
269
683
None
270
683
-
274
683
arith_expr
1227
684
atom_expr
252
684
True
253
684
(
255
684
NUMBER
256
684
NAME
258
684
{
259
684
False
260
684
arith_expr
261
684
STRING
262
684
power
263
684
[
264
684
factor
265
684
~
266
684
atom
267
684
+
268
684
term
269
684
None
270
684
shift_expr
271
684
-
274
684
and_expr
1228
685
atom_expr
252
685
True
253
685
and_expr
254
685
(
255
685
NUMBER
256
685
NAME
258
685
{
259
685
False
260
685
arith_expr
261
685
STRING
262
685
power
263
685
[
264
685
factor
265
685
~
266
685
atom
267
685
+
268
685
term
269
685
None
270
685
shift_expr
271
685
xor_expr
272
685
expr
1229
685
-
274
686
atom_expr
252
686
True
253
686
and_expr
254
686
(
255
686
NUMBER
256
686
NAME
258
686
{
259
686
False
260
686
arith_expr
261
686
STRING
262
686
power
263
686
[
264
686
factor
265
686
~
266
686
atom
267
686
+
268
686
term
269
686
None
270
686
shift_expr
271
686
expr_list
1230
686
xor_expr
272
686
expr
273
686
-
274
687
%
factor -> - factor
687
,
factor -> - factor
687
//
factor -> - factor
687
@
factor -> - factor
687
/
factor -> - factor
687
|
factor -> - factor
687
&
factor -> - factor
687
+
factor -> - factor
687
<<
factor -> - factor
687
^
factor -> - factor
687
in
factor -> - factor
687
>>
factor -> - factor
687
-
factor -> - factor
687
*
factor -> - factor
688
dotted_name
1231
688
NAME
277
689
@
decorator -> @ dotted_name NEWLINE
689
def
decorator -> @ dotted_name NEWLINE
689
class
decorator -> @ dotted_name NEWLINE
690
arglist
1232
690
and_test
505
690
atom_expr
506
690
and_expr
507
690
term
508
690
factor
509
690
shift_expr
510
690
arith_expr
511
690
NUMBER
512
690
NAME
513
690
not
514
690
[
515
690
{
516
690
expr
517
690
not_test
519
690
False
520
690
xor_expr
521
690
STRING
522
690
lambda
523
690
atom
525
690
+
526
690
True
527
690
-
528
690
or_test
529
690
(
530
690
None
531
690
comparison
532
690
power
533
690
test
534
690
~
535
690
)
1233
690
*
536
690
lambdef
537
690
**
538
690
argument
539
691
atom_expr
280
691
True
281
691
(
283
691
NUMBER
284
691
NAME
285
691
{
286
691
power
287
691
[
288
691
~
290
691
atom
291
691
factor
1234
691
+
292
691
None
295
691
STRING
297
691
False
298
691
-
299
692
atom_expr
280
692
True
281
692
and_expr
282
692
(
283
692
NUMBER
284
692
NAME
285
692
{
286
692
power
287
692
[
288
692
factor
289
692
~
290
692
atom
291
692
+
292
692
term
293
692
arith_expr
294
692
None
295
692
shift_expr
296
692
STRING
297
692
xor_expr
1235
692
False
298
692
-
299
693
)
1236
694
+
atom -> ( )
694
|
atom -> ( )
694
-
atom -> ( )
694
>>
atom -> ( )
694
<<
atom -> ( )
694
,
atom -> ( )
694
NEWLINE
atom -> ( )
694
%
atom -> ( )
694
(
atom -> ( )
694
&
atom -> ( )
694
*
atom -> ( )
694
**
atom -> ( )
694
^
atom -> ( )
694
.
atom -> ( )
694
@
atom -> ( )
694
//
atom -> ( )
694
[
atom -> ( )
694
/
atom -> ( )
695
(
atom -> { }
695
+
atom -> { }
695
<<
atom -> { }
695
.
atom -> { }
695
//
atom -> { }
695
/
atom -> { }
695
&
atom -> { }
695
*
atom -> { }
695
NEWLINE
atom -> { }
695
,
atom -> { }
695
**
atom -> { }
695
^
atom -> { }
695
[
atom -> { }
695
@
atom -> { }
695
-
atom -> { }
695
%
atom -> { }
695
|
atom -> { }
695
>>
atom -> { }
696
]
1237
697
.
atom -> [ ]
697
**
atom -> [ ]
697
/
atom -> [ ]
697
@
atom -> [ ]
697
%
atom -> [ ]
697
<<
atom -> [ ]
697
>>
atom -> [ ]
697
|
atom -> [ ]
697
^
atom -> [ ]
697
+
atom -> [ ]
697
//
atom -> [ ]
697
NEWLINE
atom -> [ ]
697
,
atom -> [ ]
697
-
atom -> [ ]
697
(
atom -> [ ]
697
&
atom -> [ ]
697
[
atom -> [ ]
697
*
atom -> [ ]
698
atom_expr
280
698
True
281
698
(
283
698
NUMBER
284
698
NAME
285
698
{
286
698
power
287
698
[
288
698
factor
289
698
~
290
698
atom
291
698
+
292
698
term
1238
698
None
295
698
STRING
297
698
False
298
698
-
299
699
atom_expr
280
699
True
281
699
(
283
699
NUMBER
284
699
NAME
285
699
{
286
699
power
287
699
[
288
699
factor
289
699
~
290
699
atom
291
699
+
292
699
None
295
699
STRING
297
699
term
1239
699
False
298
699
-
299
700
atom_expr
280
700
True
281
700
(
283
700
NUMBER
284
700
NAME
285
700
{
286
700
power
287
700
[
288
700
term
1240
700
factor
289
700
~
290
700
atom
291
700
+
292
700
None
295
700
STRING
297
700
False
298
700
-
299
701
atom_expr
280
701
True
281
701
(
283
701
NUMBER
284
701
NAME
285
701
{
286
701
power
287
701
[
288
701
factor
289
701
~
290
701
atom
291
701
+
292
701
None
295
701
term
1241
701
STRING
297
701
False
298
701
-
299
702
atom_expr
280
702
True
281
702
(
283
702
NUMBER
284
702
NAME
285
702
{
286
702
power
287
702
[
288
702
factor
289
702
~
290
702
atom
291
702
+
292
702
None
295
702
STRING
297
702
False
298
702
-
299
702
term
1242
703
<<
factor -> ~ factor
703
^
factor -> ~ factor
703
-
factor -> ~ factor
703
,
factor -> ~ factor
703
NEWLINE
factor -> ~ factor
703
|
factor -> ~ factor
703
//
factor -> ~ factor
703
&
factor -> ~ factor
703
/
factor -> ~ factor
703
@
factor -> ~ factor
703
+
factor -> ~ factor
703
*
factor -> ~ factor
703
%
factor -> ~ factor
703
>>
factor -> ~ factor
704
atom_expr
472
704
and_expr
473
704
term
474
704
factor
475
704
shift_expr
476
704
arith_expr
477
704
NUMBER
478
704
NAME
479
704
[
480
704
{
481
704
expr
482
704
not_test
483
704
False
484
704
xor_expr
485
704
subscriptlist
1243
704
atom
487
704
STRING
488
704
+
489
704
(
490
704
True
491
704
-
492
704
None
493
704
or_test
494
704
and_test
495
704
power
496
704
~
497
704
lambda
498
704
:
maybe_test -> 
704
maybe_test
499
704
test
500
704
not
501
704
comparison
502
704
lambdef
503
704
subscript
504
705
and_test
505
705
atom_expr
506
705
and_expr
507
705
term
508
705
factor
509
705
shift_expr
510
705
arith_expr
511
705
NUMBER
512
705
NAME
513
705
not
514
705
[
515
705
{
516
705
expr
517
705
)
1244
705
not_test
519
705
False
520
705
xor_expr
521
705
STRING
522
705
lambda
523
705
atom
525
705
+
526
705
True
527
705
-
528
705
or_test
529
705
(
530
705
None
531
705
comparison
532
705
power
533
705
test
534
705
arglist
1245
705
~
535
705
*
536
705
lambdef
537
705
**
538
705
argument
539
706
[
704
706
trailer_expr
1246
706
(
705
706
trailer
706
706
.
708
706
<<
trailer_expr -> 
706
*
trailer_expr -> 
706
@
trailer_expr -> 
706
-
trailer_expr -> 
706
**
trailer_expr -> 
706
+
trailer_expr -> 
706
^
trailer_expr -> 
706
//
trailer_expr -> 
706
%
trailer_expr -> 
706
NEWLINE
trailer_expr -> 
706
/
trailer_expr -> 
706
,
trailer_expr -> 
706
|
trailer_expr -> 
706
&
trailer_expr -> 
706
>>
trailer_expr -> 
707
%
atom_expr -> atom trailer_expr
707
+
atom_expr -> atom trailer_expr
707
**
atom_expr -> atom trailer_expr
707
<<
atom_expr -> atom trailer_expr
707
^
atom_expr -> atom trailer_expr
707
NEWLINE
atom_expr -> atom trailer_expr
707
@
atom_expr -> atom trailer_expr
707
*
atom_expr -> atom trailer_expr
707
/
atom_expr -> atom trailer_expr
707
//
atom_expr -> atom trailer_expr
707
,
atom_expr -> atom trailer_expr
707
-
atom_expr -> atom trailer_expr
707
&
atom_expr -> atom trailer_expr
707
|
atom_expr -> atom trailer_expr
707
>>
atom_expr -> atom trailer_expr
708
NAME
1247
709
<<
factor -> + factor
709
,
factor -> + factor
709
/
factor -> + factor
709
&
factor -> + factor
709
|
factor -> + factor
709
//
factor -> + factor
709
@
factor -> + factor
709
^
factor -> + factor
709
-
factor -> + factor
709
>>
factor -> + factor
709
%
factor -> + factor
709
+
factor -> + factor
709
NEWLINE
factor -> + factor
709
*
factor -> + factor
710
atom_expr
280
710
True
281
710
(
283
710
NUMBER
284
710
NAME
285
710
{
286
710
power
287
710
[
288
710
factor
289
710
~
290
710
atom
291
710
+
292
710
term
293
710
None
295
710
STRING
297
710
arith_expr
1248
710
False
298
710
-
299
711
atom_expr
280
711
True
281
711
(
283
711
NUMBER
284
711
NAME
285
711
{
286
711
power
287
711
[
288
711
factor
289
711
~
290
711
atom
291
711
+
292
711
term
293
711
None
295
711
STRING
297
711
False
298
711
-
299
711
arith_expr
1249
712
atom_expr
280
712
True
281
712
(
283
712
NUMBER
284
712
NAME
285
712
{
286
712
power
287
712
[
288
712
factor
289
712
~
290
712
atom
291
712
+
292
712
term
293
712
shift_expr
1250
712
arith_expr
294
712
None
295
712
STRING
297
712
False
298
712
-
299
713
shift_expr
1251
713
atom_expr
280
713
True
281
713
(
283
713
NUMBER
284
713
NAME
285
713
{
286
713
power
287
713
[
288
713
factor
289
713
~
290
713
atom
291
713
+
292
713
term
293
713
arith_expr
294
713
None
295
713
STRING
297
713
False
298
713
-
299
714
atom_expr
280
714
True
281
714
(
283
714
NUMBER
284
714
NAME
285
714
{
286
714
power
287
714
[
288
714
factor
289
714
~
290
714
atom
291
714
+
292
714
term
293
714
and_expr
1252
714
arith_expr
294
714
None
295
714
shift_expr
296
714
STRING
297
714
False
298
714
-
299
715
%
factor -> - factor
715
,
factor -> - factor
715
//
factor -> - factor
715
@
factor -> - factor
715
/
factor -> - factor
715
|
factor -> - factor
715
&
factor -> - factor
715
NEWLINE
factor -> - factor
715
+
factor -> - factor
715
<<
factor -> - factor
715
^
factor -> - factor
715
>>
factor -> - factor
715
-
factor -> - factor
715
*
factor -> - factor
716
atom_expr
280
716
True
281
716
and_expr
282
716
(
283
716
NUMBER
284
716
NAME
285
716
{
286
716
power
287
716
[
288
716
factor
289
716
~
290
716
atom
291
716
+
292
716
term
293
716
arith_expr
294
716
None
295
716
shift_expr
296
716
STRING
297
716
False
298
716
-
299
716
xor_expr
300
716
expr
1253
717
atom_expr
280
717
True
281
717
and_expr
282
717
(
283
717
NUMBER
284
717
NAME
285
717
{
286
717
power
287
717
[
288
717
factor
289
717
~
290
717
atom
291
717
+
292
717
term
293
717
arith_expr
294
717
None
295
717
shift_expr
296
717
STRING
297
717
False
298
717
-
299
717
xor_expr
300
717
expr_list
1254
717
expr
302
718
**
1255
718
!=
power -> atom_expr
718
|
power -> atom_expr
718
>
power -> atom_expr
718
/
power -> atom_expr
718
^
power -> atom_expr
718
&
power -> atom_expr
718
=
power -> atom_expr
718
<
power -> atom_expr
718
not
power -> atom_expr
718
NEWLINE
power -> atom_expr
718
<=
power -> atom_expr
718
%
power -> atom_expr
718
and
power -> atom_expr
718
*
power -> atom_expr
718
@
power -> atom_expr
718
>>
power -> atom_expr
718
if
power -> atom_expr
718
+
power -> atom_expr
718
,
power -> atom_expr
718
in
power -> atom_expr
718
is
power -> atom_expr
718
//
power -> atom_expr
718
or
power -> atom_expr
718
<<
power -> atom_expr
718
-
power -> atom_expr
718
==
power -> atom_expr
718
>=
power -> atom_expr
719
,
xor_expr -> and_expr
719
^
1256
719
not
xor_expr -> and_expr
719
=
xor_expr -> and_expr
719
>=
xor_expr -> and_expr
719
and
xor_expr -> and_expr
719
is
xor_expr -> and_expr
719
or
xor_expr -> and_expr
719
|
xor_expr -> and_expr
719
in
xor_expr -> and_expr
719
==
xor_expr -> and_expr
719
>
xor_expr -> and_expr
719
<
xor_expr -> and_expr
719
if
xor_expr -> and_expr
719
<=
xor_expr -> and_expr
719
!=
xor_expr -> and_expr
719
NEWLINE
xor_expr -> and_expr
720
+
1257
720
in
arith_expr -> term
720
if
arith_expr -> term
720
|
arith_expr -> term
720
==
arith_expr -> term
720
<
arith_expr -> term
720
-
1258
720
<=
arith_expr -> term
720
^
arith_expr -> term
720
is
arith_expr -> term
720
>>
arith_expr -> term
720
or
arith_expr -> term
720
&
arith_expr -> term
720
>
arith_expr -> term
720
>=
arith_expr -> term
720
<<
arith_expr -> term
720
and
arith_expr -> term
720
NEWLINE
arith_expr -> term
720
not
arith_expr -> term
720
,
arith_expr -> term
720
!=
arith_expr -> term
720
=
arith_expr -> term
721
/
1259
721
*
1260
721
%
1261
721
//
1262
721
and
term -> factor
721
==
term -> factor
721
@
1263
721
>=
term -> factor
721
+
term -> factor
721
<=
term -> factor
721
or
term -> factor
721
<<
term -> factor
721
not
term -> factor
721
,
term -> factor
721
<
term -> factor
721
-
term -> factor
721
=
term -> factor
721
in
term -> factor
721
!=
term -> factor
721
is
term -> factor
721
>>
term -> factor
721
NEWLINE
term -> factor
721
^
term -> factor
721
|
term -> factor
721
>
term -> factor
721
if
term -> factor
721
&
term -> factor
722
if
and_expr -> shift_expr
722
&
1264
722
in
and_expr -> shift_expr
722
is
and_expr -> shift_expr
722
|
and_expr -> shift_expr
722
>=
and_expr -> shift_expr
722
<
and_expr -> shift_expr
722
!=
and_expr -> shift_expr
722
and
and_expr -> shift_expr
722
not
and_expr -> shift_expr
722
or
and_expr -> shift_expr
722
,
and_expr -> shift_expr
722
=
and_expr -> shift_expr
722
==
and_expr -> shift_expr
722
<=
and_expr -> shift_expr
722
^
and_expr -> shift_expr
722
>
and_expr -> shift_expr
722
NEWLINE
and_expr -> shift_expr
723
<<
1265
723
>>
1266
723
<
shift_expr -> arith_expr
723
>
shift_expr -> arith_expr
723
&
shift_expr -> arith_expr
723
and
shift_expr -> arith_expr
723
,
shift_expr -> arith_expr
723
=
shift_expr -> arith_expr
723
in
shift_expr -> arith_expr
723
!=
shift_expr -> arith_expr
723
|
shift_expr -> arith_expr
723
if
shift_expr -> arith_expr
723
not
shift_expr -> arith_expr
723
<=
shift_expr -> arith_expr
723
is
shift_expr -> arith_expr
723
==
shift_expr -> arith_expr
723
or
shift_expr -> arith_expr
723
NEWLINE
shift_expr -> arith_expr
723
>=
shift_expr -> arith_expr
723
^
shift_expr -> arith_expr
724
==
atom -> NUMBER
724
<=
atom -> NUMBER
724
<<
atom -> NUMBER
724
/
atom -> NUMBER
724
^
atom -> NUMBER
724
if
atom -> NUMBER
724
.
atom -> NUMBER
724
or
atom -> NUMBER
724
**
atom -> NUMBER
724
+
atom -> NUMBER
724
%
atom -> NUMBER
724
-
atom -> NUMBER
724
&
atom -> NUMBER
724
@
atom -> NUMBER
724
*
atom -> NUMBER
724
>>
atom -> NUMBER
724
=
atom -> NUMBER
724
<
atom -> NUMBER
724
is
atom -> NUMBER
724
(
atom -> NUMBER
724
and
atom -> NUMBER
724
not
atom -> NUMBER
724
!=
atom -> NUMBER
724
|
atom -> NUMBER
724
in
atom -> NUMBER
724
>
atom -> NUMBER
724
NEWLINE
atom -> NUMBER
724
>=
atom -> NUMBER
724
//
atom -> NUMBER
724
,
atom -> NUMBER
724
[
atom -> NUMBER
725
or
atom -> NAME
725
in
atom -> NAME
725
^
atom -> NAME
725
[
atom -> NAME
725
==
atom -> NAME
725
<<
atom -> NAME
725
**
atom -> NAME
725
NEWLINE
atom -> NAME
725
,
atom -> NAME
725
!=
atom -> NAME
725
%
atom -> NAME
725
@
atom -> NAME
725
not
atom -> NAME
725
>
atom -> NAME
725
>=
atom -> NAME
725
*
atom -> NAME
725
&
atom -> NAME
725
<
atom -> NAME
725
-
atom -> NAME
725
(
atom -> NAME
725
>>
atom -> NAME
725
+
atom -> NAME
725
=
atom -> NAME
725
//
atom -> NAME
725
and
atom -> NAME
725
<=
atom -> NAME
725
is
atom -> NAME
725
if
atom -> NAME
725
/
atom -> NAME
725
.
atom -> NAME
725
|
atom -> NAME
726
and_test
110
726
atom_expr
111
726
and_expr
112
726
term
113
726
factor
114
726
shift_expr
115
726
arith_expr
116
726
NUMBER
117
726
NAME
118
726
[
119
726
test_list_comp
1267
726
{
121
726
expr
122
726
not_test
123
726
False
124
726
xor_expr
125
726
atom
126
726
STRING
127
726
+
128
726
(
129
726
True
131
726
-
132
726
]
1268
726
None
133
726
comparison
134
726
or_test
135
726
test
136
726
power
137
726
~
138
726
lambda
139
726
lambdef
140
726
not
141
726
test_list
142
727
}
1269
728
in
147
728
<
148
728
>=
149
728
not
150
728
comp_op
1270
728
!=
151
728
>
152
728
==
153
728
is
154
728
<=
155
728
=
comparison -> expr
728
NEWLINE
comparison -> expr
728
or
comparison -> expr
728
,
comparison -> expr
728
and
comparison -> expr
728
if
comparison -> expr
729
and
1271
729
,
and_test -> not_test
729
=
and_test -> not_test
729
or
and_test -> not_test
729
if
and_test -> not_test
729
NEWLINE
and_test -> not_test
730
*
atom -> False
730
@
atom -> False
730
<
atom -> False
730
or
atom -> False
730
is
atom -> False
730
>>
atom -> False
730
[
atom -> False
730
/
atom -> False
730
%
atom -> False
730
.
atom -> False
730
(
atom -> False
730
in
atom -> False
730
**
atom -> False
730
==
atom -> False
730
//
atom -> False
730
+
atom -> False
730
,
atom -> False
730
=
atom -> False
730
<<
atom -> False
730
NEWLINE
atom -> False
730
!=
atom -> False
730
<=
atom -> False
730
>
atom -> False
730
^
atom -> False
730
if
atom -> False
730
&
atom -> False
730
and
atom -> False
730
|
atom -> False
730
-
atom -> False
730
not
atom -> False
730
>=
atom -> False
731
not
expr -> xor_expr
731
=
expr -> xor_expr
731
|
1272
731
==
expr -> xor_expr
731
in
expr -> xor_expr
731
if
expr -> xor_expr
731
>
expr -> xor_expr
731
or
expr -> xor_expr
731
NEWLINE
expr -> xor_expr
731
<=
expr -> xor_expr
731
<
expr -> xor_expr
731
is
expr -> xor_expr
731
>=
expr -> xor_expr
731
!=
expr -> xor_expr
731
,
expr -> xor_expr
731
and
expr -> xor_expr
732
&
atom -> STRING
732
**
atom -> STRING
732
%
atom -> STRING
732
NEWLINE
atom -> STRING
732
@
atom -> STRING
732
/
atom -> STRING
732
*
atom -> STRING
732
^
atom -> STRING
732
>=
atom -> STRING
732
if
atom -> STRING
732
<
atom -> STRING
732
>>
atom -> STRING
732
.
atom -> STRING
732
//
atom -> STRING
732
,
atom -> STRING
732
+
atom -> STRING
732
=
atom -> STRING
732
<<
atom -> STRING
732
and
atom -> STRING
732
[
atom -> STRING
732
or
atom -> STRING
732
in
atom -> STRING
732
not
atom -> STRING
732
>
atom -> STRING
732
(
atom -> STRING
732
!=
atom -> STRING
732
is
atom -> STRING
732
==
atom -> STRING
732
-
atom -> STRING
732
|
atom -> STRING
732
<=
atom -> STRING
733
atom_expr
718
733
and_expr
719
733
term
720
733
factor
721
733
shift_expr
722
733
arith_expr
723
733
NUMBER
724
733
NAME
725
733
[
726
733
{
727
733
expr
728
733
not_test
729
733
False
730
733
xor_expr
731
733
STRING
732
733
atom
734
733
+
735
733
True
736
733
-
737
733
and_test
738
733
test
739
733
or_test
740
733
(
741
733
None
742
733
lambda
743
733
test_list
1273
733
power
744
733
~
745
733
lambdef
746
733
comparison
747
733
not
749
733
yield_arg
1274
733
NEWLINE
yield_expr -> yield
733
from
1275
733
=
yield_expr -> yield
734
[
1276
734
(
1277
734
.
1278
734
trailer
1279
734
<<
trailer_expr -> 
734
trailer_expr
1280
734
@
trailer_expr -> 
734
!=
trailer_expr -> 
734
-
trailer_expr -> 
734
^
trailer_expr -> 
734
<
trailer_expr -> 
734
NEWLINE
trailer_expr -> 
734
/
trailer_expr -> 
734
is
trailer_expr -> 
734
==
trailer_expr -> 
734
&
trailer_expr -> 
734
>=
trailer_expr -> 
734
or
trailer_expr -> 
734
in
trailer_expr -> 
734
=
trailer_expr -> 
734
*
trailer_expr -> 
734
not
trailer_expr -> 
734
**
trailer_expr -> 
734
<=
trailer_expr -> 
734
+
trailer_expr -> 
734
//
trailer_expr -> 
734
%
trailer_expr -> 
734
>
trailer_expr -> 
734
,
trailer_expr -> 
734
|
trailer_expr -> 
734
if
trailer_expr -> 
734
>>
trailer_expr -> 
734
and
trailer_expr -> 
735
atom_expr
718
735
NUMBER
724
735
NAME
725
735
[
726
735
{
727
735
False
730
735
STRING
732
735
atom
734
735
+
735
735
True
736
735
-
737
735
(
741
735
None
742
735
factor
1281
735
power
744
735
~
745
736
!=
atom -> True
736
is
atom -> True
736
//
atom -> True
736
|
atom -> True
736
<=
atom -> True
736
^
atom -> True
736
%
atom -> True
736
@
atom -> True
736
**
atom -> True
736
(
atom -> True
736
NEWLINE
atom -> True
736
not
atom -> True
736
>>
atom -> True
736
<
atom -> True
736
==
atom -> True
736
and
atom -> True
736
=
atom -> True
736
in
atom -> True
736
&
atom -> True
736
.
atom -> True
736
<<
atom -> True
736
/
atom -> True
736
*
atom -> True
736
>
atom -> True
736
,
atom -> True
736
+
atom -> True
736
>=
atom -> True
736
or
atom -> True
736
-
atom -> True
736
[
atom -> True
736
if
atom -> True
737
atom_expr
718
737
NUMBER
724
737
NAME
725
737
[
726
737
factor
1282
737
{
727
737
False
730
737
STRING
732
737
atom
734
737
+
735
737
True
736
737
-
737
737
(
741
737
None
742
737
power
744
737
~
745
738
NEWLINE
or_test -> and_test
738
or
1283
738
,
or_test -> and_test
738
=
or_test -> and_test
738
if
or_test -> and_test
739
,
1284
739
=
test_list -> test
739
NEWLINE
test_list -> test
740
if
1285
740
,
test -> or_test
740
NEWLINE
test -> or_test
740
=
test -> or_test
741
and_test
217
741
atom_expr
218
741
and_expr
219
741
term
220
741
factor
221
741
shift_expr
222
741
arith_expr
223
741
NUMBER
224
741
NAME
225
741
not
226
741
[
227
741
{
228
741
expr
229
741
test_list_comp
1286
741
not_test
231
741
False
232
741
)
1287
741
xor_expr
234
741
STRING
235
741
lambda
236
741
atom
237
741
+
238
741
True
239
741
-
240
741
(
241
741
None
242
741
comparison
243
741
power
244
741
~
245
741
or_test
246
741
test
247
741
lambdef
248
741
test_list
249
742
!=
atom -> None
742
//
atom -> None
742
^
atom -> None
742
>=
atom -> None
742
&
atom -> None
742
**
atom -> None
742
NEWLINE
atom -> None
742
=
atom -> None
742
,
atom -> None
742
<
atom -> None
742
if
atom -> None
742
*
atom -> None
742
>
atom -> None
742
@
atom -> None
742
|
atom -> None
742
-
atom -> None
742
%
atom -> None
742
not
atom -> None
742
==
atom -> None
742
in
atom -> None
742
/
atom -> None
742
or
atom -> None
742
and
atom -> None
742
+
atom -> None
742
(
atom -> None
742
>>
atom -> None
742
is
atom -> None
742
[
atom -> None
742
<=
atom -> None
742
<<
atom -> None
742
.
atom -> None
743
varargslist
1288
743
vfpdef
212
743
NAME
211
743
:
1289
744
*
factor -> power
744
>>
factor -> power
744
>=
factor -> power
744
<
factor -> power
744
&
factor -> power
744
,
factor -> power
744
@
factor -> power
744
|
factor -> power
744
!=
factor -> power
744
<=
factor -> power
744
//
factor -> power
744
in
factor -> power
744
and
factor -> power
744
+
factor -> power
744
>
factor -> power
744
-
factor -> power
744
not
factor -> power
744
is
factor -> power
744
==
factor -> power
744
%
factor -> power
744
=
factor -> power
744
if
factor -> power
744
or
factor -> power
744
^
factor -> power
744
NEWLINE
factor -> power
744
<<
factor -> power
744
/
factor -> power
745
atom_expr
718
745
NUMBER
724
745
NAME
725
745
[
726
745
factor
1290
745
{
727
745
False
730
745
STRING
732
745
atom
734
745
+
735
745
True
736
745
-
737
745
(
741
745
None
742
745
power
744
745
~
745
746
=
test -> lambdef
746
NEWLINE
test -> lambdef
746
,
test -> lambdef
747
or
not_test -> comparison
747
=
not_test -> comparison
747
if
not_test -> comparison
747
,
not_test -> comparison
747
NEWLINE
not_test -> comparison
747
and
not_test -> comparison
748
=
317
748
assign
1291
748
NEWLINE
assign -> 
749
atom_expr
718
749
and_expr
719
749
term
720
749
factor
721
749
shift_expr
722
749
arith_expr
723
749
NUMBER
724
749
NAME
725
749
[
726
749
{
727
749
expr
728
749
False
730
749
xor_expr
731
749
STRING
732
749
atom
734
749
+
735
749
True
736
749
-
737
749
(
741
749
None
742
749
power
744
749
~
745
749
not_test
1292
749
comparison
747
749
not
749
750
=
317
750
assign
1293
750
NEWLINE
assign -> 
751
NEWLINE
yield_or_testlist -> yield_expr
752
NEWLINE
yield_or_testlist -> test_list
753
atom_expr
325
753
and_expr
326
753
term
327
753
factor
328
753
shift_expr
329
753
arith_expr
330
753
NUMBER
331
753
NAME
332
753
[
333
753
{
334
753
expr
335
753
not_test
336
753
False
337
753
xor_expr
338
753
STRING
339
753
atom
340
753
+
341
753
True
342
753
-
343
753
test
344
753
(
345
753
None
346
753
lambda
347
753
test_list
1294
753
or_test
348
753
and_test
349
753
power
350
753
~
351
753
lambdef
352
753
comparison
353
753
not
354
753
yield_arg
1295
753
NEWLINE
yield_expr -> yield
753
from
1296
754
NEWLINE
expr_stmt -> test_list augassign yield_or_testlist
755
**
1297
755
!=
power -> atom_expr
755
|
power -> atom_expr
755
>
power -> atom_expr
755
/
power -> atom_expr
755
^
power -> atom_expr
755
&
power -> atom_expr
755
=
power -> atom_expr
755
<
power -> atom_expr
755
not
power -> atom_expr
755
<=
power -> atom_expr
755
%
power -> atom_expr
755
and
power -> atom_expr
755
*
power -> atom_expr
755
@
power -> atom_expr
755
>>
power -> atom_expr
755
if
power -> atom_expr
755
+
power -> atom_expr
755
in
power -> atom_expr
755
is
power -> atom_expr
755
//
power -> atom_expr
755
or
power -> atom_expr
755
<<
power -> atom_expr
755
-
power -> atom_expr
755
==
power -> atom_expr
755
>=
power -> atom_expr
756
^
1298
756
not
xor_expr -> and_expr
756
=
xor_expr -> and_expr
756
>=
xor_expr -> and_expr
756
and
xor_expr -> and_expr
756
is
xor_expr -> and_expr
756
or
xor_expr -> and_expr
756
|
xor_expr -> and_expr
756
in
xor_expr -> and_expr
756
==
xor_expr -> and_expr
756
>
xor_expr -> and_expr
756
<
xor_expr -> and_expr
756
if
xor_expr -> and_expr
756
<=
xor_expr -> and_expr
756
!=
xor_expr -> and_expr
757
+
1299
757
in
arith_expr -> term
757
if
arith_expr -> term
757
|
arith_expr -> term
757
==
arith_expr -> term
757
<
arith_expr -> term
757
-
1300
757
<=
arith_expr -> term
757
^
arith_expr -> term
757
is
arith_expr -> term
757
>>
arith_expr -> term
757
or
arith_expr -> term
757
&
arith_expr -> term
757
>
arith_expr -> term
757
>=
arith_expr -> term
757
<<
arith_expr -> term
757
and
arith_expr -> term
757
not
arith_expr -> term
757
!=
arith_expr -> term
757
=
arith_expr -> term
758
/
1301
758
*
1302
758
%
1303
758
//
1304
758
and
term -> factor
758
==
term -> factor
758
@
1305
758
>=
term -> factor
758
+
term -> factor
758
<=
term -> factor
758
or
term -> factor
758
<<
term -> factor
758
not
term -> factor
758
<
term -> factor
758
-
term -> factor
758
=
term -> factor
758
in
term -> factor
758
!=
term -> factor
758
is
term -> factor
758
>>
term -> factor
758
^
term -> factor
758
|
term -> factor
758
>
term -> factor
758
if
term -> factor
758
&
term -> factor
759
if
and_expr -> shift_expr
759
&
1306
759
in
and_expr -> shift_expr
759
is
and_expr -> shift_expr
759
|
and_expr -> shift_expr
759
>=
and_expr -> shift_expr
759
<
and_expr -> shift_expr
759
!=
and_expr -> shift_expr
759
and
and_expr -> shift_expr
759
not
and_expr -> shift_expr
759
or
and_expr -> shift_expr
759
=
and_expr -> shift_expr
759
==
and_expr -> shift_expr
759
<=
and_expr -> shift_expr
759
^
and_expr -> shift_expr
759
>
and_expr -> shift_expr
760
<<
1307
760
>>
1308
760
<
shift_expr -> arith_expr
760
>
shift_expr -> arith_expr
760
&
shift_expr -> arith_expr
760
and
shift_expr -> arith_expr
760
=
shift_expr -> arith_expr
760
in
shift_expr -> arith_expr
760
!=
shift_expr -> arith_expr
760
|
shift_expr -> arith_expr
760
if
shift_expr -> arith_expr
760
not
shift_expr -> arith_expr
760
<=
shift_expr -> arith_expr
760
is
shift_expr -> arith_expr
760
==
shift_expr -> arith_expr
760
or
shift_expr -> arith_expr
760
>=
shift_expr -> arith_expr
760
^
shift_expr -> arith_expr
761
==
atom -> NUMBER
761
<=
atom -> NUMBER
761
<<
atom -> NUMBER
761
/
atom -> NUMBER
761
^
atom -> NUMBER
761
if
atom -> NUMBER
761
.
atom -> NUMBER
761
or
atom -> NUMBER
761
**
atom -> NUMBER
761
+
atom -> NUMBER
761
%
atom -> NUMBER
761
-
atom -> NUMBER
761
&
atom -> NUMBER
761
@
atom -> NUMBER
761
*
atom -> NUMBER
761
>>
atom -> NUMBER
761
=
atom -> NUMBER
761
<
atom -> NUMBER
761
is
atom -> NUMBER
761
(
atom -> NUMBER
761
and
atom -> NUMBER
761
not
atom -> NUMBER
761
!=
atom -> NUMBER
761
|
atom -> NUMBER
761
in
atom -> NUMBER
761
>
atom -> NUMBER
761
>=
atom -> NUMBER
761
//
atom -> NUMBER
761
[
atom -> NUMBER
762
or
atom -> NAME
762
in
atom -> NAME
762
^
atom -> NAME
762
[
atom -> NAME
762
==
atom -> NAME
762
<<
atom -> NAME
762
**
atom -> NAME
762
!=
atom -> NAME
762
%
atom -> NAME
762
@
atom -> NAME
762
not
atom -> NAME
762
>
atom -> NAME
762
>=
atom -> NAME
762
*
atom -> NAME
762
&
atom -> NAME
762
<
atom -> NAME
762
-
atom -> NAME
762
(
atom -> NAME
762
>>
atom -> NAME
762
+
atom -> NAME
762
=
atom -> NAME
762
//
atom -> NAME
762
and
atom -> NAME
762
<=
atom -> NAME
762
is
atom -> NAME
762
if
atom -> NAME
762
/
atom -> NAME
762
.
atom -> NAME
762
|
atom -> NAME
763
and_test
110
763
atom_expr
111
763
and_expr
112
763
term
113
763
factor
114
763
shift_expr
115
763
arith_expr
116
763
NUMBER
117
763
NAME
118
763
[
119
763
test_list_comp
1309
763
{
121
763
expr
122
763
not_test
123
763
False
124
763
xor_expr
125
763
atom
126
763
STRING
127
763
+
128
763
(
129
763
True
131
763
-
132
763
]
1310
763
None
133
763
comparison
134
763
or_test
135
763
test
136
763
power
137
763
~
138
763
lambda
139
763
lambdef
140
763
not
141
763
test_list
142
764
}
1311
765
in
147
765
<
148
765
>=
149
765
not
150
765
comp_op
1312
765
!=
151
765
>
152
765
==
153
765
is
154
765
<=
155
765
=
comparison -> expr
765
or
comparison -> expr
765
and
comparison -> expr
765
if
comparison -> expr
766
*
atom -> False
766
@
atom -> False
766
<
atom -> False
766
or
atom -> False
766
is
atom -> False
766
>>
atom -> False
766
[
atom -> False
766
/
atom -> False
766
%
atom -> False
766
.
atom -> False
766
(
atom -> False
766
in
atom -> False
766
**
atom -> False
766
==
atom -> False
766
//
atom -> False
766
+
atom -> False
766
=
atom -> False
766
<<
atom -> False
766
!=
atom -> False
766
<=
atom -> False
766
>
atom -> False
766
^
atom -> False
766
if
atom -> False
766
&
atom -> False
766
and
atom -> False
766
|
atom -> False
766
-
atom -> False
766
not
atom -> False
766
>=
atom -> False
767
not
expr -> xor_expr
767
=
expr -> xor_expr
767
|
1313
767
==
expr -> xor_expr
767
in
expr -> xor_expr
767
if
expr -> xor_expr
767
>
expr -> xor_expr
767
or
expr -> xor_expr
767
<=
expr -> xor_expr
767
<
expr -> xor_expr
767
is
expr -> xor_expr
767
>=
expr -> xor_expr
767
!=
expr -> xor_expr
767
and
expr -> xor_expr
768
&
atom -> STRING
768
**
atom -> STRING
768
%
atom -> STRING
768
@
atom -> STRING
768
/
atom -> STRING
768
*
atom -> STRING
768
^
atom -> STRING
768
>=
atom -> STRING
768
if
atom -> STRING
768
<
atom -> STRING
768
>>
atom -> STRING
768
.
atom -> STRING
768
//
atom -> STRING
768
+
atom -> STRING
768
=
atom -> STRING
768
<<
atom -> STRING
768
and
atom -> STRING
768
[
atom -> STRING
768
or
atom -> STRING
768
in
atom -> STRING
768
not
atom -> STRING
768
>
atom -> STRING
768
(
atom -> STRING
768
!=
atom -> STRING
768
is
atom -> STRING
768
==
atom -> STRING
768
-
atom -> STRING
768
|
atom -> STRING
768
<=
atom -> STRING
769
atom_expr
755
769
NUMBER
761
769
NAME
762
769
[
763
769
{
764
769
False
766
769
STRING
768
769
+
769
769
True
770
769
-
771
769
(
774
769
None
775
769
atom
776
769
factor
1314
769
power
777
769
~
778
770
!=
atom -> True
770
is
atom -> True
770
//
atom -> True
770
|
atom -> True
770
<=
atom -> True
770
^
atom -> True
770
%
atom -> True
770
@
atom -> True
770
**
atom -> True
770
(
atom -> True
770
not
atom -> True
770
>>
atom -> True
770
<
atom -> True
770
==
atom -> True
770
and
atom -> True
770
=
atom -> True
770
in
atom -> True
770
&
atom -> True
770
.
atom -> True
770
<<
atom -> True
770
/
atom -> True
770
*
atom -> True
770
>
atom -> True
770
+
atom -> True
770
>=
atom -> True
770
or
atom -> True
770
-
atom -> True
770
[
atom -> True
770
if
atom -> True
771
atom_expr
755
771
NUMBER
761
771
NAME
762
771
[
763
771
factor
1315
771
{
764
771
False
766
771
STRING
768
771
+
769
771
True
770
771
-
771
771
(
774
771
None
775
771
atom
776
771
power
777
771
~
778
772
if
or_test -> and_test
772
=
or_test -> and_test
772
or
1316
773
=
test -> or_test
773
if
1317
774
and_test
217
774
atom_expr
218
774
and_expr
219
774
term
220
774
factor
221
774
shift_expr
222
774
arith_expr
223
774
NUMBER
224
774
NAME
225
774
not
226
774
[
227
774
{
228
774
expr
229
774
test_list_comp
1318
774
not_test
231
774
False
232
774
)
1319
774
xor_expr
234
774
STRING
235
774
lambda
236
774
atom
237
774
+
238
774
True
239
774
-
240
774
(
241
774
None
242
774
comparison
243
774
power
244
774
~
245
774
or_test
246
774
test
247
774
lambdef
248
774
test_list
249
775
!=
atom -> None
775
//
atom -> None
775
^
atom -> None
775
>=
atom -> None
775
&
atom -> None
775
**
atom -> None
775
=
atom -> None
775
<
atom -> None
775
if
atom -> None
775
*
atom -> None
775
>
atom -> None
775
@
atom -> None
775
|
atom -> None
775
-
atom -> None
775
%
atom -> None
775
not
atom -> None
775
==
atom -> None
775
in
atom -> None
775
/
atom -> None
775
or
atom -> None
775
and
atom -> None
775
+
atom -> None
775
(
atom -> None
775
>>
atom -> None
775
is
atom -> None
775
[
atom -> None
775
<=
atom -> None
775
<<
atom -> None
775
.
atom -> None
776
[
1320
776
(
1321
776
.
1322
776
trailer
1323
776
<<
trailer_expr -> 
776
trailer_expr
1324
776
@
trailer_expr -> 
776
!=
trailer_expr -> 
776
-
trailer_expr -> 
776
^
trailer_expr -> 
776
<
trailer_expr -> 
776
/
trailer_expr -> 
776
is
trailer_expr -> 
776
==
trailer_expr -> 
776
&
trailer_expr -> 
776
>=
trailer_expr -> 
776
or
trailer_expr -> 
776
in
trailer_expr -> 
776
=
trailer_expr -> 
776
*
trailer_expr -> 
776
not
trailer_expr -> 
776
**
trailer_expr -> 
776
<=
trailer_expr -> 
776
+
trailer_expr -> 
776
//
trailer_expr -> 
776
%
trailer_expr -> 
776
>
trailer_expr -> 
776
|
trailer_expr -> 
776
if
trailer_expr -> 
776
>>
trailer_expr -> 
776
and
trailer_expr -> 
777
*
factor -> power
777
>>
factor -> power
777
>=
factor -> power
777
<
factor -> power
777
&
factor -> power
777
|
factor -> power
777
@
factor -> power
777
!=
factor -> power
777
<=
factor -> power
777
//
factor -> power
777
in
factor -> power
777
and
factor -> power
777
+
factor -> power
777
>
factor -> power
777
-
factor -> power
777
not
factor -> power
777
is
factor -> power
777
==
factor -> power
777
%
factor -> power
777
=
factor -> power
777
if
factor -> power
777
or
factor -> power
777
^
factor -> power
777
<<
factor -> power
777
/
factor -> power
778
atom_expr
755
778
NUMBER
761
778
NAME
762
778
[
763
778
factor
1325
778
{
764
778
False
766
778
STRING
768
778
+
769
778
True
770
778
-
771
778
(
774
778
None
775
778
atom
776
778
power
777
778
~
778
779
and
1326
779
=
and_test -> not_test
779
or
and_test -> not_test
779
if
and_test -> not_test
780
if
not_test -> comparison
780
or
not_test -> comparison
780
=
not_test -> comparison
780
and
not_test -> comparison
781
varargslist
1327
781
vfpdef
212
781
:
1328
781
NAME
211
782
atom_expr
755
782
and_expr
756
782
term
757
782
factor
758
782
shift_expr
759
782
arith_expr
760
782
NUMBER
761
782
NAME
762
782
[
763
782
{
764
782
expr
765
782
False
766
782
xor_expr
767
782
STRING
768
782
+
769
782
True
770
782
-
771
782
(
774
782
None
775
782
atom
776
782
power
777
782
~
778
782
not_test
1329
782
comparison
780
782
not
782
783
=
1330
784
=
test -> lambdef
785
namelist
1331
785
NAME
323
786
atom_expr
325
786
NUMBER
331
786
NAME
332
786
[
333
786
{
334
786
False
337
786
STRING
339
786
atom
340
786
+
341
786
True
342
786
-
343
786
(
345
786
None
346
786
power
350
786
~
351
786
factor
1332
787
atom_expr
325
787
and_expr
326
787
term
327
787
factor
328
787
shift_expr
329
787
arith_expr
330
787
NUMBER
331
787
NAME
332
787
[
333
787
{
334
787
False
337
787
STRING
339
787
xor_expr
1333
787
atom
340
787
+
341
787
True
342
787
-
343
787
(
345
787
None
346
787
power
350
787
~
351
788
atom_expr
325
788
factor
328
788
term
327
788
NUMBER
331
788
NAME
332
788
[
333
788
{
334
788
False
337
788
STRING
339
788
atom
340
788
+
341
788
True
342
788
-
343
788
(
345
788
None
346
788
arith_expr
1334
788
power
350
788
~
351
789
atom_expr
325
789
factor
328
789
term
327
789
NUMBER
331
789
NAME
332
789
[
333
789
{
334
789
False
337
789
STRING
339
789
atom
340
789
+
341
789
True
342
789
-
343
789
arith_expr
1335
789
(
345
789
None
346
789
power
350
789
~
351
790
atom_expr
325
790
factor
328
790
NUMBER
331
790
NAME
332
790
[
333
790
{
334
790
False
337
790
STRING
339
790
atom
340
790
+
341
790
term
1336
790
True
342
790
-
343
790
(
345
790
None
346
790
power
350
790
~
351
791
atom_expr
325
791
factor
328
791
NUMBER
331
791
NAME
332
791
[
333
791
{
334
791
term
1337
791
False
337
791
STRING
339
791
atom
340
791
+
341
791
True
342
791
-
343
791
(
345
791
None
346
791
power
350
791
~
351
792
atom_expr
325
792
factor
328
792
NUMBER
331
792
NAME
332
792
[
333
792
{
334
792
False
337
792
STRING
339
792
atom
340
792
+
341
792
term
1338
792
True
342
792
-
343
792
(
345
792
None
346
792
power
350
792
~
351
793
atom_expr
325
793
factor
328
793
NUMBER
331
793
NAME
332
793
[
333
793
{
334
793
False
337
793
STRING
339
793
atom
340
793
+
341
793
True
342
793
-
343
793
(
345
793
None
346
793
term
1339
793
power
350
793
~
351
794
atom_expr
325
794
factor
328
794
NUMBER
331
794
NAME
332
794
[
333
794
{
334
794
False
337
794
STRING
339
794
atom
340
794
+
341
794
True
342
794
-
343
794
(
345
794
None
346
794
term
1340
794
power
350
794
~
351
795
atom_expr
325
795
factor
328
795
term
327
795
shift_expr
329
795
arith_expr
330
795
NUMBER
331
795
NAME
332
795
[
333
795
{
334
795
False
337
795
STRING
339
795
atom
340
795
+
341
795
True
342
795
-
343
795
and_expr
1341
795
(
345
795
None
346
795
power
350
795
~
351
796
shift_expr
1342
796
atom_expr
325
796
factor
328
796
term
327
796
arith_expr
330
796
NUMBER
331
796
NAME
332
796
[
333
796
{
334
796
False
337
796
STRING
339
796
atom
340
796
+
341
796
True
342
796
-
343
796
(
345
796
None
346
796
power
350
796
~
351
797
atom_expr
325
797
factor
328
797
term
327
797
arith_expr
330
797
NUMBER
331
797
NAME
332
797
[
333
797
{
334
797
False
337
797
STRING
339
797
atom
340
797
+
341
797
shift_expr
1343
797
True
342
797
-
343
797
(
345
797
None
346
797
power
350
797
~
351
798
]
1344
799
in
atom -> [ ]
799
>=
atom -> [ ]
799
%
atom -> [ ]
799
is
atom -> [ ]
799
^
atom -> [ ]
799
//
atom -> [ ]
799
NEWLINE
atom -> [ ]
799
or
atom -> [ ]
799
not
atom -> [ ]
799
[
atom -> [ ]
799
and
atom -> [ ]
799
/
atom -> [ ]
799
!=
atom -> [ ]
799
>
atom -> [ ]
799
&
atom -> [ ]
799
**
atom -> [ ]
799
@
atom -> [ ]
799
==
atom -> [ ]
799
<<
atom -> [ ]
799
if
atom -> [ ]
799
<
atom -> [ ]
799
,
atom -> [ ]
799
(
atom -> [ ]
799
<=
atom -> [ ]
799
*
atom -> [ ]
799
.
atom -> [ ]
799
>>
atom -> [ ]
799
|
atom -> [ ]
799
-
atom -> [ ]
799
+
atom -> [ ]
800
<<
atom -> { }
800
+
atom -> { }
800
//
atom -> { }
800
is
atom -> { }
800
>=
atom -> { }
800
<=
atom -> { }
800
>
atom -> { }
800
*
atom -> { }
800
^
atom -> { }
800
%
atom -> { }
800
>>
atom -> { }
800
.
atom -> { }
800
not
atom -> { }
800
==
atom -> { }
800
if
atom -> { }
800
in
atom -> { }
800
<
atom -> { }
800
|
atom -> { }
800
(
atom -> { }
800
/
atom -> { }
800
and
atom -> { }
800
**
atom -> { }
800
@
atom -> { }
800
-
atom -> { }
800
&
atom -> { }
800
NEWLINE
atom -> { }
800
,
atom -> { }
800
!=
atom -> { }
800
or
atom -> { }
800
[
atom -> { }
801
atom_expr
325
801
and_expr
326
801
term
327
801
factor
328
801
shift_expr
329
801
arith_expr
330
801
NUMBER
331
801
NAME
332
801
[
333
801
{
334
801
expr
335
801
False
337
801
xor_expr
338
801
STRING
339
801
comparison
1345
801
atom
340
801
+
341
801
True
342
801
-
343
801
(
345
801
None
346
801
power
350
801
~
351
802
atom_expr
325
802
and_expr
326
802
term
327
802
factor
328
802
shift_expr
329
802
arith_expr
330
802
NUMBER
331
802
NAME
332
802
[
333
802
{
334
802
expr
335
802
not_test
336
802
False
337
802
xor_expr
338
802
STRING
339
802
atom
340
802
+
341
802
True
342
802
-
343
802
(
345
802
None
346
802
power
350
802
~
351
802
comparison
353
802
and_test
1346
802
not
354
803
atom_expr
325
803
and_expr
326
803
term
327
803
factor
328
803
shift_expr
329
803
arith_expr
330
803
NUMBER
331
803
NAME
332
803
[
333
803
{
334
803
False
337
803
xor_expr
338
803
STRING
339
803
atom
340
803
+
341
803
True
342
803
-
343
803
(
345
803
None
346
803
expr
1347
803
power
350
803
~
351
804
atom_expr
472
804
and_expr
473
804
term
474
804
factor
475
804
shift_expr
476
804
arith_expr
477
804
NUMBER
478
804
NAME
479
804
[
480
804
{
481
804
expr
482
804
not_test
483
804
False
484
804
xor_expr
485
804
subscriptlist
1348
804
atom
487
804
STRING
488
804
+
489
804
(
490
804
True
491
804
-
492
804
None
493
804
or_test
494
804
and_test
495
804
power
496
804
~
497
804
lambda
498
804
:
maybe_test -> 
804
maybe_test
499
804
test
500
804
not
501
804
comparison
502
804
lambdef
503
804
subscript
504
805
and_test
505
805
atom_expr
506
805
and_expr
507
805
term
508
805
factor
509
805
shift_expr
510
805
arith_expr
511
805
NUMBER
512
805
NAME
513
805
not
514
805
[
515
805
{
516
805
expr
517
805
)
1349
805
not_test
519
805
False
520
805
xor_expr
521
805
STRING
522
805
lambda
523
805
arglist
1350
805
atom
525
805
+
526
805
True
527
805
-
528
805
or_test
529
805
(
530
805
None
531
805
comparison
532
805
power
533
805
test
534
805
~
535
805
*
536
805
lambdef
537
805
**
538
805
argument
539
806
NAME
1351
807
trailer_expr
1352
807
[
804
807
(
805
807
.
806
807
trailer
807
807
<<
trailer_expr -> 
807
@
trailer_expr -> 
807
!=
trailer_expr -> 
807
-
trailer_expr -> 
807
^
trailer_expr -> 
807
<
trailer_expr -> 
807
NEWLINE
trailer_expr -> 
807
/
trailer_expr -> 
807
is
trailer_expr -> 
807
==
trailer_expr -> 
807
&
trailer_expr -> 
807
>=
trailer_expr -> 
807
or
trailer_expr -> 
807
in
trailer_expr -> 
807
*
trailer_expr -> 
807
not
trailer_expr -> 
807
**
trailer_expr -> 
807
<=
trailer_expr -> 
807
+
trailer_expr -> 
807
//
trailer_expr -> 
807
%
trailer_expr -> 
807
>
trailer_expr -> 
807
,
trailer_expr -> 
807
|
trailer_expr -> 
807
if
trailer_expr -> 
807
and
trailer_expr -> 
807
>>
trailer_expr -> 
808
==
atom_expr -> atom trailer_expr
808
%
atom_expr -> atom trailer_expr
808
+
atom_expr -> atom trailer_expr
808
not
atom_expr -> atom trailer_expr
808
or
atom_expr -> atom trailer_expr
808
//
atom_expr -> atom trailer_expr
808
and
atom_expr -> atom trailer_expr
808
!=
atom_expr -> atom trailer_expr
808
<<
atom_expr -> atom trailer_expr
808
NEWLINE
atom_expr -> atom trailer_expr
808
if
atom_expr -> atom trailer_expr
808
-
atom_expr -> atom trailer_expr
808
>>
atom_expr -> atom trailer_expr
808
**
atom_expr -> atom trailer_expr
808
/
atom_expr -> atom trailer_expr
808
<
atom_expr -> atom trailer_expr
808
in
atom_expr -> atom trailer_expr
808
&
atom_expr -> atom trailer_expr
808
is
atom_expr -> atom trailer_expr
808
|
atom_expr -> atom trailer_expr
808
>
atom_expr -> atom trailer_expr
808
>=
atom_expr -> atom trailer_expr
808
<=
atom_expr -> atom trailer_expr
808
@
atom_expr -> atom trailer_expr
808
*
atom_expr -> atom trailer_expr
808
,
atom_expr -> atom trailer_expr
808
^
atom_expr -> atom trailer_expr
809
<<
factor -> + factor
809
,
factor -> + factor
809
&
factor -> + factor
809
>
factor -> + factor
809
if
factor -> + factor
809
not
factor -> + factor
809
+
factor -> + factor
809
^
factor -> + factor
809
==
factor -> + factor
809
/
factor -> + factor
809
|
factor -> + factor
809
>=
factor -> + factor
809
NEWLINE
factor -> + factor
809
%
factor -> + factor
809
<
factor -> + factor
809
is
factor -> + factor
809
or
factor -> + factor
809
@
factor -> + factor
809
//
factor -> + factor
809
and
factor -> + factor
809
-
factor -> + factor
809
in
factor -> + factor
809
*
factor -> + factor
809
!=
factor -> + factor
809
>>
factor -> + factor
809
<=
factor -> + factor
810
@
factor -> - factor
810
^
factor -> - factor
810
==
factor -> - factor
810
in
factor -> - factor
810
>>
factor -> - factor
810
,
factor -> - factor
810
//
factor -> - factor
810
and
factor -> - factor
810
<=
factor -> - factor
810
!=
factor -> - factor
810
-
factor -> - factor
810
&
factor -> - factor
810
NEWLINE
factor -> - factor
810
not
factor -> - factor
810
>
factor -> - factor
810
*
factor -> - factor
810
%
factor -> - factor
810
/
factor -> - factor
810
<
factor -> - factor
810
|
factor -> - factor
810
+
factor -> - factor
810
if
factor -> - factor
810
<<
factor -> - factor
810
is
factor -> - factor
810
or
factor -> - factor
810
>=
factor -> - factor
811
atom_expr
325
811
and_expr
326
811
term
327
811
factor
328
811
shift_expr
329
811
arith_expr
330
811
NUMBER
331
811
NAME
332
811
[
333
811
{
334
811
expr
335
811
not_test
336
811
False
337
811
xor_expr
338
811
STRING
339
811
atom
340
811
+
341
811
True
342
811
-
343
811
test
344
811
(
345
811
None
346
811
lambda
347
811
or_test
348
811
and_test
349
811
power
350
811
~
351
811
lambdef
352
811
comparison
353
811
not
354
811
test_list
1353
812
)
1354
813
>=
atom -> ( )
813
>>
atom -> ( )
813
NEWLINE
atom -> ( )
813
not
atom -> ( )
813
if
atom -> ( )
813
&
atom -> ( )
813
^
atom -> ( )
813
.
atom -> ( )
813
/
atom -> ( )
813
in
atom -> ( )
813
>
atom -> ( )
813
%
atom -> ( )
813
(
atom -> ( )
813
==
atom -> ( )
813
,
atom -> ( )
813
[
atom -> ( )
813
<=
atom -> ( )
813
+
atom -> ( )
813
|
atom -> ( )
813
-
atom -> ( )
813
or
atom -> ( )
813
@
atom -> ( )
813
<<
atom -> ( )
813
is
atom -> ( )
813
**
atom -> ( )
813
*
atom -> ( )
813
and
atom -> ( )
813
<
atom -> ( )
813
!=
atom -> ( )
813
//
atom -> ( )
814
atom_expr
325
814
and_expr
326
814
term
327
814
factor
328
814
shift_expr
329
814
arith_expr
330
814
NUMBER
331
814
NAME
332
814
[
333
814
{
334
814
expr
335
814
not_test
336
814
False
337
814
xor_expr
338
814
STRING
339
814
atom
340
814
+
341
814
True
342
814
-
343
814
(
345
814
None
346
814
lambda
347
814
or_test
348
814
and_test
349
814
power
350
814
~
351
814
lambdef
352
814
test
1355
814
comparison
353
814
not
354
815
:
1356
816
atom_expr
590
816
and_expr
591
816
term
592
816
[
593
816
shift_expr
594
816
arith_expr
595
816
NUMBER
596
816
NAME
597
816
factor
598
816
{
599
816
expr
600
816
False
601
816
xor_expr
602
816
STRING
603
816
+
604
816
True
605
816
-
606
816
(
607
816
None
608
816
atom
609
816
power
610
816
~
611
816
not_test
612
816
or_test
1357
816
not
613
816
comparison
614
816
and_test
615
817
atom_expr
325
817
and_expr
326
817
term
327
817
factor
328
817
shift_expr
329
817
arith_expr
330
817
NUMBER
331
817
NAME
332
817
[
333
817
{
334
817
expr
335
817
not_test
336
817
False
337
817
xor_expr
338
817
STRING
339
817
atom
340
817
+
341
817
True
342
817
-
343
817
(
345
817
None
346
817
and_test
349
817
power
350
817
~
351
817
comparison
353
817
not
354
817
or_test
1358
818
<<
factor -> ~ factor
818
in
factor -> ~ factor
818
<=
factor -> ~ factor
818
if
factor -> ~ factor
818
|
factor -> ~ factor
818
<
factor -> ~ factor
818
>>
factor -> ~ factor
818
==
factor -> ~ factor
818
>=
factor -> ~ factor
818
!=
factor -> ~ factor
818
,
factor -> ~ factor
818
//
factor -> ~ factor
818
*
factor -> ~ factor
818
/
factor -> ~ factor
818
NEWLINE
factor -> ~ factor
818
+
factor -> ~ factor
818
is
factor -> ~ factor
818
not
factor -> ~ factor
818
and
factor -> ~ factor
818
^
factor -> ~ factor
818
@
factor -> ~ factor
818
>
factor -> ~ factor
818
-
factor -> ~ factor
818
or
factor -> ~ factor
818
&
factor -> ~ factor
818
%
factor -> ~ factor
819
if
not_test -> not not_test
819
,
not_test -> not not_test
819
or
not_test -> not not_test
819
NEWLINE
not_test -> not not_test
819
and
not_test -> not not_test
820
atom_expr
356
820
NUMBER
362
820
NAME
363
820
[
364
820
atom
365
820
{
366
820
False
368
820
True
370
820
STRING
371
820
+
372
820
-
373
820
(
374
820
None
375
820
power
381
820
~
382
820
factor
1359
821
atom_expr
356
821
and_expr
357
821
term
358
821
factor
359
821
shift_expr
360
821
arith_expr
361
821
NUMBER
362
821
NAME
363
821
[
364
821
atom
365
821
{
366
821
False
368
821
True
370
821
STRING
371
821
xor_expr
1360
821
+
372
821
-
373
821
(
374
821
None
375
821
power
381
821
~
382
822
atom_expr
356
822
factor
359
822
term
358
822
NUMBER
362
822
NAME
363
822
[
364
822
atom
365
822
{
366
822
False
368
822
True
370
822
STRING
371
822
+
372
822
-
373
822
(
374
822
None
375
822
arith_expr
1361
822
power
381
822
~
382
823
atom_expr
356
823
factor
359
823
term
358
823
NUMBER
362
823
NAME
363
823
[
364
823
atom
365
823
{
366
823
False
368
823
True
370
823
STRING
371
823
+
372
823
-
373
823
arith_expr
1362
823
(
374
823
None
375
823
power
381
823
~
382
824
atom_expr
356
824
factor
359
824
NUMBER
362
824
NAME
363
824
[
364
824
atom
365
824
{
366
824
False
368
824
True
370
824
STRING
371
824
+
372
824
term
1363
824
-
373
824
(
374
824
None
375
824
power
381
824
~
382
825
atom_expr
356
825
factor
359
825
NUMBER
362
825
NAME
363
825
[
364
825
atom
365
825
{
366
825
term
1364
825
False
368
825
True
370
825
STRING
371
825
+
372
825
-
373
825
(
374
825
None
375
825
power
381
825
~
382
826
atom_expr
356
826
factor
359
826
NUMBER
362
826
NAME
363
826
[
364
826
atom
365
826
{
366
826
False
368
826
True
370
826
STRING
371
826
+
372
826
term
1365
826
-
373
826
(
374
826
None
375
826
power
381
826
~
382
827
atom_expr
356
827
factor
359
827
NUMBER
362
827
NAME
363
827
[
364
827
atom
365
827
{
366
827
False
368
827
True
370
827
STRING
371
827
+
372
827
-
373
827
(
374
827
None
375
827
term
1366
827
power
381
827
~
382
828
atom_expr
356
828
factor
359
828
NUMBER
362
828
NAME
363
828
[
364
828
atom
365
828
{
366
828
False
368
828
True
370
828
STRING
371
828
+
372
828
-
373
828
(
374
828
None
375
828
term
1367
828
power
381
828
~
382
829
atom_expr
356
829
factor
359
829
term
358
829
shift_expr
360
829
arith_expr
361
829
NUMBER
362
829
NAME
363
829
[
364
829
atom
365
829
{
366
829
False
368
829
True
370
829
STRING
371
829
+
372
829
-
373
829
and_expr
1368
829
(
374
829
None
375
829
power
381
829
~
382
830
shift_expr
1369
830
atom_expr
356
830
factor
359
830
term
358
830
arith_expr
361
830
NUMBER
362
830
NAME
363
830
[
364
830
atom
365
830
{
366
830
False
368
830
True
370
830
STRING
371
830
+
372
830
-
373
830
(
374
830
None
375
830
power
381
830
~
382
831
atom_expr
356
831
factor
359
831
term
358
831
arith_expr
361
831
NUMBER
362
831
NAME
363
831
[
364
831
atom
365
831
{
366
831
False
368
831
True
370
831
STRING
371
831
+
372
831
shift_expr
1370
831
-
373
831
(
374
831
None
375
831
power
381
831
~
382
832
]
1371
833
in
atom -> [ ]
833
>=
atom -> [ ]
833
%
atom -> [ ]
833
is
atom -> [ ]
833
^
atom -> [ ]
833
//
atom -> [ ]
833
NEWLINE
atom -> [ ]
833
or
atom -> [ ]
833
not
atom -> [ ]
833
[
atom -> [ ]
833
and
atom -> [ ]
833
/
atom -> [ ]
833
!=
atom -> [ ]
833
>
atom -> [ ]
833
&
atom -> [ ]
833
**
atom -> [ ]
833
@
atom -> [ ]
833
==
atom -> [ ]
833
<<
atom -> [ ]
833
if
atom -> [ ]
833
from
atom -> [ ]
833
<
atom -> [ ]
833
(
atom -> [ ]
833
<=
atom -> [ ]
833
*
atom -> [ ]
833
.
atom -> [ ]
833
>>
atom -> [ ]
833
|
atom -> [ ]
833
-
atom -> [ ]
833
+
atom -> [ ]
834
atom_expr
472
834
and_expr
473
834
term
474
834
factor
475
834
shift_expr
476
834
arith_expr
477
834
NUMBER
478
834
NAME
479
834
[
480
834
{
481
834
expr
482
834
not_test
483
834
False
484
834
xor_expr
485
834
subscriptlist
1372
834
atom
487
834
STRING
488
834
+
489
834
(
490
834
True
491
834
-
492
834
None
493
834
or_test
494
834
and_test
495
834
power
496
834
~
497
834
lambda
498
834
:
maybe_test -> 
834
maybe_test
499
834
test
500
834
not
501
834
comparison
502
834
lambdef
503
834
subscript
504
835
and_test
505
835
atom_expr
506
835
and_expr
507
835
term
508
835
factor
509
835
shift_expr
510
835
arith_expr
511
835
NUMBER
512
835
NAME
513
835
not
514
835
[
515
835
{
516
835
expr
517
835
not_test
519
835
False
520
835
xor_expr
521
835
STRING
522
835
lambda
523
835
arglist
1373
835
atom
525
835
)
1374
835
+
526
835
True
527
835
-
528
835
or_test
529
835
(
530
835
None
531
835
comparison
532
835
power
533
835
test
534
835
~
535
835
*
536
835
lambdef
537
835
**
538
835
argument
539
836
NAME
1375
837
trailer_expr
1376
837
[
834
837
(
835
837
.
836
837
trailer
837
837
<<
trailer_expr -> 
837
@
trailer_expr -> 
837
!=
trailer_expr -> 
837
-
trailer_expr -> 
837
from
trailer_expr -> 
837
^
trailer_expr -> 
837
<
trailer_expr -> 
837
NEWLINE
trailer_expr -> 
837
/
trailer_expr -> 
837
is
trailer_expr -> 
837
==
trailer_expr -> 
837
&
trailer_expr -> 
837
>=
trailer_expr -> 
837
or
trailer_expr -> 
837
in
trailer_expr -> 
837
*
trailer_expr -> 
837
not
trailer_expr -> 
837
**
trailer_expr -> 
837
<=
trailer_expr -> 
837
+
trailer_expr -> 
837
//
trailer_expr -> 
837
%
trailer_expr -> 
837
>
trailer_expr -> 
837
|
trailer_expr -> 
837
if
trailer_expr -> 
837
and
trailer_expr -> 
837
>>
trailer_expr -> 
838
==
atom_expr -> atom trailer_expr
838
%
atom_expr -> atom trailer_expr
838
+
atom_expr -> atom trailer_expr
838
not
atom_expr -> atom trailer_expr
838
or
atom_expr -> atom trailer_expr
838
//
atom_expr -> atom trailer_expr
838
and
atom_expr -> atom trailer_expr
838
from
atom_expr -> atom trailer_expr
838
!=
atom_expr -> atom trailer_expr
838
<<
atom_expr -> atom trailer_expr
838
NEWLINE
atom_expr -> atom trailer_expr
838
if
atom_expr -> atom trailer_expr
838
-
atom_expr -> atom trailer_expr
838
>>
atom_expr -> atom trailer_expr
838
**
atom_expr -> atom trailer_expr
838
/
atom_expr -> atom trailer_expr
838
<
atom_expr -> atom trailer_expr
838
in
atom_expr -> atom trailer_expr
838
&
atom_expr -> atom trailer_expr
838
is
atom_expr -> atom trailer_expr
838
|
atom_expr -> atom trailer_expr
838
>
atom_expr -> atom trailer_expr
838
>=
atom_expr -> atom trailer_expr
838
<=
atom_expr -> atom trailer_expr
838
@
atom_expr -> atom trailer_expr
838
*
atom_expr -> atom trailer_expr
838
^
atom_expr -> atom trailer_expr
839
<<
atom -> { }
839
+
atom -> { }
839
//
atom -> { }
839
is
atom -> { }
839
>=
atom -> { }
839
<=
atom -> { }
839
>
atom -> { }
839
*
atom -> { }
839
^
atom -> { }
839
%
atom -> { }
839
>>
atom -> { }
839
.
atom -> { }
839
not
atom -> { }
839
==
atom -> { }
839
if
atom -> { }
839
in
atom -> { }
839
<
atom -> { }
839
|
atom -> { }
839
(
atom -> { }
839
from
atom -> { }
839
/
atom -> { }
839
and
atom -> { }
839
**
atom -> { }
839
@
atom -> { }
839
-
atom -> { }
839
&
atom -> { }
839
NEWLINE
atom -> { }
839
!=
atom -> { }
839
or
atom -> { }
839
[
atom -> { }
840
atom_expr
356
840
and_expr
357
840
term
358
840
factor
359
840
shift_expr
360
840
arith_expr
361
840
NUMBER
362
840
NAME
363
840
[
364
840
atom
365
840
{
366
840
expr
367
840
False
368
840
xor_expr
369
840
True
370
840
STRING
371
840
comparison
1377
840
+
372
840
-
373
840
(
374
840
None
375
840
power
381
840
~
382
841
atom_expr
356
841
and_expr
357
841
term
358
841
factor
359
841
shift_expr
360
841
arith_expr
361
841
NUMBER
362
841
NAME
363
841
[
364
841
atom
365
841
{
366
841
False
368
841
xor_expr
369
841
True
370
841
STRING
371
841
+
372
841
-
373
841
(
374
841
None
375
841
expr
1378
841
power
381
841
~
382
842
<<
factor -> + factor
842
&
factor -> + factor
842
>
factor -> + factor
842
if
factor -> + factor
842
not
factor -> + factor
842
+
factor -> + factor
842
^
factor -> + factor
842
==
factor -> + factor
842
/
factor -> + factor
842
|
factor -> + factor
842
>=
factor -> + factor
842
NEWLINE
factor -> + factor
842
%
factor -> + factor
842
<
factor -> + factor
842
from
factor -> + factor
842
is
factor -> + factor
842
or
factor -> + factor
842
@
factor -> + factor
842
//
factor -> + factor
842
and
factor -> + factor
842
-
factor -> + factor
842
in
factor -> + factor
842
*
factor -> + factor
842
!=
factor -> + factor
842
>>
factor -> + factor
842
<=
factor -> + factor
843
@
factor -> - factor
843
^
factor -> - factor
843
==
factor -> - factor
843
in
factor -> - factor
843
>>
factor -> - factor
843
//
factor -> - factor
843
and
factor -> - factor
843
<=
factor -> - factor
843
!=
factor -> - factor
843
-
factor -> - factor
843
&
factor -> - factor
843
NEWLINE
factor -> - factor
843
not
factor -> - factor
843
>
factor -> - factor
843
from
factor -> - factor
843
*
factor -> - factor
843
%
factor -> - factor
843
/
factor -> - factor
843
<
factor -> - factor
843
|
factor -> - factor
843
+
factor -> - factor
843
if
factor -> - factor
843
<<
factor -> - factor
843
is
factor -> - factor
843
or
factor -> - factor
843
>=
factor -> - factor
844
)
1379
845
>=
atom -> ( )
845
>>
atom -> ( )
845
NEWLINE
atom -> ( )
845
not
atom -> ( )
845
if
atom -> ( )
845
&
atom -> ( )
845
^
atom -> ( )
845
.
atom -> ( )
845
/
atom -> ( )
845
in
atom -> ( )
845
>
atom -> ( )
845
%
atom -> ( )
845
(
atom -> ( )
845
==
atom -> ( )
845
from
atom -> ( )
845
[
atom -> ( )
845
<=
atom -> ( )
845
+
atom -> ( )
845
|
atom -> ( )
845
-
atom -> ( )
845
or
atom -> ( )
845
@
atom -> ( )
845
<<
atom -> ( )
845
is
atom -> ( )
845
**
atom -> ( )
845
*
atom -> ( )
845
and
atom -> ( )
845
<
atom -> ( )
845
!=
atom -> ( )
845
//
atom -> ( )
846
atom_expr
356
846
and_expr
357
846
term
358
846
factor
359
846
shift_expr
360
846
arith_expr
361
846
NUMBER
362
846
NAME
363
846
[
364
846
atom
365
846
{
366
846
expr
367
846
False
368
846
xor_expr
369
846
True
370
846
STRING
371
846
test
1380
846
+
372
846
-
373
846
(
374
846
None
375
846
lambda
376
846
not_test
377
846
comparison
378
846
or_test
379
846
power
381
846
~
382
846
lambdef
383
846
and_test
384
846
not
385
847
:
1381
848
atom_expr
356
848
and_expr
357
848
term
358
848
factor
359
848
shift_expr
360
848
arith_expr
361
848
NUMBER
362
848
NAME
363
848
[
364
848
atom
365
848
{
366
848
expr
367
848
False
368
848
xor_expr
369
848
True
370
848
STRING
371
848
+
372
848
-
373
848
(
374
848
None
375
848
not_test
377
848
comparison
378
848
power
381
848
~
382
848
and_test
1382
848
not
385
849
atom_expr
590
849
and_expr
591
849
term
592
849
[
593
849
shift_expr
594
849
arith_expr
595
849
NUMBER
596
849
NAME
597
849
factor
598
849
{
599
849
expr
600
849
False
601
849
xor_expr
602
849
STRING
603
849
+
604
849
True
605
849
-
606
849
(
607
849
None
608
849
atom
609
849
power
610
849
~
611
849
not_test
612
849
or_test
1383
849
not
613
849
comparison
614
849
and_test
615
850
atom_expr
1384
850
and_expr
1385
850
term
1386
850
factor
1387
850
shift_expr
1388
850
arith_expr
1389
850
NUMBER
1390
850
NAME
1391
850
[
1392
850
{
1393
850
expr
1394
850
False
1395
850
xor_expr
1396
850
STRING
1397
850
+
1398
850
True
1399
850
-
1400
850
(
1401
850
None
1402
850
lambda
1403
850
atom
1404
850
or_test
1405
850
power
1406
850
~
1407
850
lambdef
1408
850
comparison
1409
850
test
1410
850
not_test
1411
850
and_test
1412
850
not
1413
851
<<
factor -> ~ factor
851
in
factor -> ~ factor
851
<=
factor -> ~ factor
851
if
factor -> ~ factor
851
|
factor -> ~ factor
851
<
factor -> ~ factor
851
>>
factor -> ~ factor
851
==
factor -> ~ factor
851
>=
factor -> ~ factor
851
!=
factor -> ~ factor
851
//
factor -> ~ factor
851
*
factor -> ~ factor
851
/
factor -> ~ factor
851
NEWLINE
factor -> ~ factor
851
+
factor -> ~ factor
851
is
factor -> ~ factor
851
not
factor -> ~ factor
851
and
factor -> ~ factor
851
from
factor -> ~ factor
851
^
factor -> ~ factor
851
@
factor -> ~ factor
851
>
factor -> ~ factor
851
-
factor -> ~ factor
851
or
factor -> ~ factor
851
&
factor -> ~ factor
851
%
factor -> ~ factor
852
atom_expr
356
852
and_expr
357
852
term
358
852
factor
359
852
shift_expr
360
852
arith_expr
361
852
NUMBER
362
852
NAME
363
852
[
364
852
atom
365
852
{
366
852
expr
367
852
False
368
852
xor_expr
369
852
True
370
852
STRING
371
852
+
372
852
-
373
852
(
374
852
None
375
852
not_test
377
852
comparison
378
852
power
381
852
~
382
852
or_test
1414
852
and_test
384
852
not
385
853
if
not_test -> not not_test
853
NEWLINE
not_test -> not not_test
853
or
not_test -> not not_test
853
from
not_test -> not not_test
853
and
not_test -> not not_test
854
else
1415
854
def
while_stmt -> while test : suite
854
assert
while_stmt -> while test : suite
854
not
while_stmt -> while test : suite
854
break
while_stmt -> while test : suite
854
True
while_stmt -> while test : suite
854
+
while_stmt -> while test : suite
854
~
while_stmt -> while test : suite
854
nonlocal
while_stmt -> while test : suite
854
{
while_stmt -> while test : suite
854
False
while_stmt -> while test : suite
854
while
while_stmt -> while test : suite
854
lambda
while_stmt -> while test : suite
854
STRING
while_stmt -> while test : suite
854
$
while_stmt -> while test : suite
854
try
while_stmt -> while test : suite
854
del
while_stmt -> while test : suite
854
return
while_stmt -> while test : suite
854
raise
while_stmt -> while test : suite
854
NUMBER
while_stmt -> while test : suite
854
None
while_stmt -> while test : suite
854
NAME
while_stmt -> while test : suite
854
yield
while_stmt -> while test : suite
854
if
while_stmt -> while test : suite
854
[
while_stmt -> while test : suite
854
global
while_stmt -> while test : suite
854
pass
while_stmt -> while test : suite
854
class
while_stmt -> while test : suite
854
for
while_stmt -> while test : suite
854
NEWLINE
while_stmt -> while test : suite
854
continue
while_stmt -> while test : suite
854
-
while_stmt -> while test : suite
854
with
while_stmt -> while test : suite
854
@
while_stmt -> while test : suite
854
(
while_stmt -> while test : suite
855
NEWLINE
1416
856
INDENT
1417
857
continue
suite -> simple_stmt
857
not
suite -> simple_stmt
857
yield
suite -> simple_stmt
857
for
suite -> simple_stmt
857
False
suite -> simple_stmt
857
NUMBER
suite -> simple_stmt
857
with
suite -> simple_stmt
857
lambda
suite -> simple_stmt
857
{
suite -> simple_stmt
857
None
suite -> simple_stmt
857
(
suite -> simple_stmt
857
while
suite -> simple_stmt
857
if
suite -> simple_stmt
857
try
suite -> simple_stmt
857
NAME
suite -> simple_stmt
857
else
suite -> simple_stmt
857
True
suite -> simple_stmt
857
global
suite -> simple_stmt
857
STRING
suite -> simple_stmt
857
pass
suite -> simple_stmt
857
$
suite -> simple_stmt
857
[
suite -> simple_stmt
857
assert
suite -> simple_stmt
857
NEWLINE
suite -> simple_stmt
857
raise
suite -> simple_stmt
857
-
suite -> simple_stmt
857
class
suite -> simple_stmt
857
del
suite -> simple_stmt
857
@
suite -> simple_stmt
857
~
suite -> simple_stmt
857
+
suite -> simple_stmt
857
return
suite -> simple_stmt
857
break
suite -> simple_stmt
857
nonlocal
suite -> simple_stmt
857
def
suite -> simple_stmt
858
*
power -> atom_expr ** factor
858
:
power -> atom_expr ** factor
858
in
power -> atom_expr ** factor
858
<
power -> atom_expr ** factor
858
if
power -> atom_expr ** factor
858
-
power -> atom_expr ** factor
858
>>
power -> atom_expr ** factor
858
<=
power -> atom_expr ** factor
858
and
power -> atom_expr ** factor
858
==
power -> atom_expr ** factor
858
%
power -> atom_expr ** factor
858
/
power -> atom_expr ** factor
858
^
power -> atom_expr ** factor
858
<<
power -> atom_expr ** factor
858
>
power -> atom_expr ** factor
858
//
power -> atom_expr ** factor
858
is
power -> atom_expr ** factor
858
@
power -> atom_expr ** factor
858
+
power -> atom_expr ** factor
858
|
power -> atom_expr ** factor
858
!=
power -> atom_expr ** factor
858
>=
power -> atom_expr ** factor
858
or
power -> atom_expr ** factor
858
&
power -> atom_expr ** factor
858
not
power -> atom_expr ** factor
859
and
xor_expr -> and_expr ^ xor_expr
859
<
xor_expr -> and_expr ^ xor_expr
859
>
xor_expr -> and_expr ^ xor_expr
859
in
xor_expr -> and_expr ^ xor_expr
859
|
xor_expr -> and_expr ^ xor_expr
859
<=
xor_expr -> and_expr ^ xor_expr
859
not
xor_expr -> and_expr ^ xor_expr
859
:
xor_expr -> and_expr ^ xor_expr
859
or
xor_expr -> and_expr ^ xor_expr
859
if
xor_expr -> and_expr ^ xor_expr
859
is
xor_expr -> and_expr ^ xor_expr
859
==
xor_expr -> and_expr ^ xor_expr
859
!=
xor_expr -> and_expr ^ xor_expr
859
>=
xor_expr -> and_expr ^ xor_expr
860
<=
arith_expr -> term + arith_expr
860
>=
arith_expr -> term + arith_expr
860
if
arith_expr -> term + arith_expr
860
>>
arith_expr -> term + arith_expr
860
==
arith_expr -> term + arith_expr
860
&
arith_expr -> term + arith_expr
860
>
arith_expr -> term + arith_expr
860
!=
arith_expr -> term + arith_expr
860
or
arith_expr -> term + arith_expr
860
^
arith_expr -> term + arith_expr
860
not
arith_expr -> term + arith_expr
860
|
arith_expr -> term + arith_expr
860
is
arith_expr -> term + arith_expr
860
in
arith_expr -> term + arith_expr
860
<<
arith_expr -> term + arith_expr
860
:
arith_expr -> term + arith_expr
860
<
arith_expr -> term + arith_expr
860
and
arith_expr -> term + arith_expr
861
<=
arith_expr -> term - arith_expr
861
<<
arith_expr -> term - arith_expr
861
or
arith_expr -> term - arith_expr
861
is
arith_expr -> term - arith_expr
861
==
arith_expr -> term - arith_expr
861
!=
arith_expr -> term - arith_expr
861
and
arith_expr -> term - arith_expr
861
|
arith_expr -> term - arith_expr
861
if
arith_expr -> term - arith_expr
861
&
arith_expr -> term - arith_expr
861
^
arith_expr -> term - arith_expr
861
in
arith_expr -> term - arith_expr
861
>
arith_expr -> term - arith_expr
861
>>
arith_expr -> term - arith_expr
861
not
arith_expr -> term - arith_expr
861
:
arith_expr -> term - arith_expr
861
>=
arith_expr -> term - arith_expr
861
<
arith_expr -> term - arith_expr
862
|
term -> factor * term
862
-
term -> factor * term
862
in
term -> factor * term
862
and
term -> factor * term
862
<<
term -> factor * term
862
>=
term -> factor * term
862
if
term -> factor * term
862
or
term -> factor * term
862
<=
term -> factor * term
862
is
term -> factor * term
862
:
term -> factor * term
862
^
term -> factor * term
862
!=
term -> factor * term
862
==
term -> factor * term
862
&
term -> factor * term
862
>
term -> factor * term
862
not
term -> factor * term
862
<
term -> factor * term
862
+
term -> factor * term
862
>>
term -> factor * term
863
!=
term -> factor % term
863
>>
term -> factor % term
863
==
term -> factor % term
863
>=
term -> factor % term
863
^
term -> factor % term
863
not
term -> factor % term
863
or
term -> factor % term
863
if
term -> factor % term
863
<=
term -> factor % term
863
:
term -> factor % term
863
<
term -> factor % term
863
is
term -> factor % term
863
-
term -> factor % term
863
in
term -> factor % term
863
>
term -> factor % term
863
<<
term -> factor % term
863
and
term -> factor % term
863
|
term -> factor % term
863
+
term -> factor % term
863
&
term -> factor % term
864
is
term -> factor // term
864
if
term -> factor // term
864
>
term -> factor // term
864
==
term -> factor // term
864
+
term -> factor // term
864
^
term -> factor // term
864
-
term -> factor // term
864
in
term -> factor // term
864
>>
term -> factor // term
864
|
term -> factor // term
864
<<
term -> factor // term
864
!=
term -> factor // term
864
&
term -> factor // term
864
not
term -> factor // term
864
<=
term -> factor // term
864
<
term -> factor // term
864
:
term -> factor // term
864
and
term -> factor // term
864
>=
term -> factor // term
864
or
term -> factor // term
865
>=
term -> factor / term
865
!=
term -> factor / term
865
not
term -> factor / term
865
^
term -> factor / term
865
in
term -> factor / term
865
and
term -> factor / term
865
<<
term -> factor / term
865
+
term -> factor / term
865
>
term -> factor / term
865
|
term -> factor / term
865
or
term -> factor / term
865
if
term -> factor / term
865
>>
term -> factor / term
865
<
term -> factor / term
865
&
term -> factor / term
865
-
term -> factor / term
865
is
term -> factor / term
865
==
term -> factor / term
865
<=
term -> factor / term
865
:
term -> factor / term
866
-
term -> factor @ term
866
&
term -> factor @ term
866
^
term -> factor @ term
866
:
term -> factor @ term
866
!=
term -> factor @ term
866
<<
term -> factor @ term
866
is
term -> factor @ term
866
<=
term -> factor @ term
866
and
term -> factor @ term
866
+
term -> factor @ term
866
==
term -> factor @ term
866
>
term -> factor @ term
866
if
term -> factor @ term
866
not
term -> factor @ term
866
>>
term -> factor @ term
866
>=
term -> factor @ term
866
|
term -> factor @ term
866
in
term -> factor @ term
866
<
term -> factor @ term
866
or
term -> factor @ term
867
if
and_expr -> shift_expr & and_expr
867
!=
and_expr -> shift_expr & and_expr
867
<=
and_expr -> shift_expr & and_expr
867
not
and_expr -> shift_expr & and_expr
867
^
and_expr -> shift_expr & and_expr
867
|
and_expr -> shift_expr & and_expr
867
or
and_expr -> shift_expr & and_expr
867
in
and_expr -> shift_expr & and_expr
867
>
and_expr -> shift_expr & and_expr
867
and
and_expr -> shift_expr & and_expr
867
==
and_expr -> shift_expr & and_expr
867
:
and_expr -> shift_expr & and_expr
867
<
and_expr -> shift_expr & and_expr
867
is
and_expr -> shift_expr & and_expr
867
>=
and_expr -> shift_expr & and_expr
868
^
shift_expr -> arith_expr << shift_expr
868
|
shift_expr -> arith_expr << shift_expr
868
&
shift_expr -> arith_expr << shift_expr
868
:
shift_expr -> arith_expr << shift_expr
868
and
shift_expr -> arith_expr << shift_expr
868
is
shift_expr -> arith_expr << shift_expr
868
in
shift_expr -> arith_expr << shift_expr
868
<=
shift_expr -> arith_expr << shift_expr
868
<
shift_expr -> arith_expr << shift_expr
868
not
shift_expr -> arith_expr << shift_expr
868
==
shift_expr -> arith_expr << shift_expr
868
>=
shift_expr -> arith_expr << shift_expr
868
if
shift_expr -> arith_expr << shift_expr
868
>
shift_expr -> arith_expr << shift_expr
868
or
shift_expr -> arith_expr << shift_expr
868
!=
shift_expr -> arith_expr << shift_expr
869
or
shift_expr -> arith_expr >> shift_expr
869
and
shift_expr -> arith_expr >> shift_expr
869
>=
shift_expr -> arith_expr >> shift_expr
869
not
shift_expr -> arith_expr >> shift_expr
869
:
shift_expr -> arith_expr >> shift_expr
869
^
shift_expr -> arith_expr >> shift_expr
869
is
shift_expr -> arith_expr >> shift_expr
869
in
shift_expr -> arith_expr >> shift_expr
869
if
shift_expr -> arith_expr >> shift_expr
869
<=
shift_expr -> arith_expr >> shift_expr
869
==
shift_expr -> arith_expr >> shift_expr
869
<
shift_expr -> arith_expr >> shift_expr
869
!=
shift_expr -> arith_expr >> shift_expr
869
|
shift_expr -> arith_expr >> shift_expr
869
>
shift_expr -> arith_expr >> shift_expr
869
&
shift_expr -> arith_expr >> shift_expr
870
and
atom -> [ test_list_comp ]
870
<=
atom -> [ test_list_comp ]
870
**
atom -> [ test_list_comp ]
870
^
atom -> [ test_list_comp ]
870
[
atom -> [ test_list_comp ]
870
!=
atom -> [ test_list_comp ]
870
<
atom -> [ test_list_comp ]
870
/
atom -> [ test_list_comp ]
870
-
atom -> [ test_list_comp ]
870
>=
atom -> [ test_list_comp ]
870
if
atom -> [ test_list_comp ]
870
%
atom -> [ test_list_comp ]
870
is
atom -> [ test_list_comp ]
870
+
atom -> [ test_list_comp ]
870
&
atom -> [ test_list_comp ]
870
@
atom -> [ test_list_comp ]
870
or
atom -> [ test_list_comp ]
870
in
atom -> [ test_list_comp ]
870
==
atom -> [ test_list_comp ]
870
not
atom -> [ test_list_comp ]
870
.
atom -> [ test_list_comp ]
870
|
atom -> [ test_list_comp ]
870
>
atom -> [ test_list_comp ]
870
<<
atom -> [ test_list_comp ]
870
//
atom -> [ test_list_comp ]
870
(
atom -> [ test_list_comp ]
870
*
atom -> [ test_list_comp ]
870
:
atom -> [ test_list_comp ]
870
>>
atom -> [ test_list_comp ]
871
if
comparison -> expr comp_op comparison
871
:
comparison -> expr comp_op comparison
871
or
comparison -> expr comp_op comparison
871
and
comparison -> expr comp_op comparison
872
>
expr -> xor_expr | expr
872
is
expr -> xor_expr | expr
872
<
expr -> xor_expr | expr
872
if
expr -> xor_expr | expr
872
>=
expr -> xor_expr | expr
872
or
expr -> xor_expr | expr
872
and
expr -> xor_expr | expr
872
in
expr -> xor_expr | expr
872
!=
expr -> xor_expr | expr
872
:
expr -> xor_expr | expr
872
<=
expr -> xor_expr | expr
872
==
expr -> xor_expr | expr
872
not
expr -> xor_expr | expr
873
if
atom -> ( test_list_comp )
873
or
atom -> ( test_list_comp )
873
*
atom -> ( test_list_comp )
873
|
atom -> ( test_list_comp )
873
>>
atom -> ( test_list_comp )
873
%
atom -> ( test_list_comp )
873
not
atom -> ( test_list_comp )
873
//
atom -> ( test_list_comp )
873
+
atom -> ( test_list_comp )
873
and
atom -> ( test_list_comp )
873
>
atom -> ( test_list_comp )
873
[
atom -> ( test_list_comp )
873
^
atom -> ( test_list_comp )
873
:
atom -> ( test_list_comp )
873
!=
atom -> ( test_list_comp )
873
<<
atom -> ( test_list_comp )
873
**
atom -> ( test_list_comp )
873
is
atom -> ( test_list_comp )
873
<=
atom -> ( test_list_comp )
873
-
atom -> ( test_list_comp )
873
&
atom -> ( test_list_comp )
873
(
atom -> ( test_list_comp )
873
in
atom -> ( test_list_comp )
873
@
atom -> ( test_list_comp )
873
.
atom -> ( test_list_comp )
873
<
atom -> ( test_list_comp )
873
/
atom -> ( test_list_comp )
873
==
atom -> ( test_list_comp )
873
>=
atom -> ( test_list_comp )
874
]
1418
875
)
1419
876
<
trailer -> ( )
876
.
trailer -> ( )
876
*
trailer -> ( )
876
or
trailer -> ( )
876
is
trailer -> ( )
876
:
trailer -> ( )
876
/
trailer -> ( )
876
+
trailer -> ( )
876
@
trailer -> ( )
876
>
trailer -> ( )
876
//
trailer -> ( )
876
|
trailer -> ( )
876
!=
trailer -> ( )
876
&
trailer -> ( )
876
^
trailer -> ( )
876
<=
trailer -> ( )
876
%
trailer -> ( )
876
>>
trailer -> ( )
876
**
trailer -> ( )
876
and
trailer -> ( )
876
(
trailer -> ( )
876
==
trailer -> ( )
876
if
trailer -> ( )
876
[
trailer -> ( )
876
<<
trailer -> ( )
876
in
trailer -> ( )
876
-
trailer -> ( )
876
not
trailer -> ( )
876
>=
trailer -> ( )
877
|
trailer -> . NAME
877
@
trailer -> . NAME
877
^
trailer -> . NAME
877
>
trailer -> . NAME
877
+
trailer -> . NAME
877
.
trailer -> . NAME
877
:
trailer -> . NAME
877
!=
trailer -> . NAME
877
<<
trailer -> . NAME
877
<=
trailer -> . NAME
877
[
trailer -> . NAME
877
*
trailer -> . NAME
877
(
trailer -> . NAME
877
//
trailer -> . NAME
877
**
trailer -> . NAME
877
-
trailer -> . NAME
877
in
trailer -> . NAME
877
>=
trailer -> . NAME
877
==
trailer -> . NAME
877
is
trailer -> . NAME
877
and
trailer -> . NAME
877
%
trailer -> . NAME
877
or
trailer -> . NAME
877
<
trailer -> . NAME
877
not
trailer -> . NAME
877
/
trailer -> . NAME
877
if
trailer -> . NAME
877
&
trailer -> . NAME
877
>>
trailer -> . NAME
878
&
trailer_expr -> trailer trailer_expr
878
not
trailer_expr -> trailer trailer_expr
878
and
trailer_expr -> trailer trailer_expr
878
+
trailer_expr -> trailer trailer_expr
878
==
trailer_expr -> trailer trailer_expr
878
**
trailer_expr -> trailer trailer_expr
878
/
trailer_expr -> trailer trailer_expr
878
^
trailer_expr -> trailer trailer_expr
878
>
trailer_expr -> trailer trailer_expr
878
*
trailer_expr -> trailer trailer_expr
878
//
trailer_expr -> trailer trailer_expr
878
>>
trailer_expr -> trailer trailer_expr
878
<<
trailer_expr -> trailer trailer_expr
878
>=
trailer_expr -> trailer trailer_expr
878
:
trailer_expr -> trailer trailer_expr
878
<=
trailer_expr -> trailer trailer_expr
878
-
trailer_expr -> trailer trailer_expr
878
is
trailer_expr -> trailer trailer_expr
878
in
trailer_expr -> trailer trailer_expr
878
<
trailer_expr -> trailer trailer_expr
878
|
trailer_expr -> trailer trailer_expr
878
if
trailer_expr -> trailer trailer_expr
878
%
trailer_expr -> trailer trailer_expr
878
@
trailer_expr -> trailer trailer_expr
878
!=
trailer_expr -> trailer trailer_expr
878
or
trailer_expr -> trailer trailer_expr
879
atom_expr
79
879
and_expr
80
879
term
81
879
factor
82
879
shift_expr
83
879
arith_expr
84
879
NUMBER
85
879
NAME
86
879
[
87
879
{
88
879
expr
89
879
False
90
879
xor_expr
91
879
STRING
92
879
+
93
879
True
94
879
(
95
879
None
96
879
-
97
879
atom
98
879
power
99
879
~
100
879
lambda
101
879
not_test
102
879
not
103
879
comparison
104
879
test
1420
879
and_test
105
879
lambdef
106
879
or_test
107
880
:
lambdef -> lambda : test
881
:
and_test -> not_test and and_test
881
or
and_test -> not_test and and_test
881
if
and_test -> not_test and and_test
882
:
or_test -> and_test or or_test
882
if
or_test -> and_test or or_test
883
else
1421
884
]
or_test -> and_test or or_test
884
,
or_test -> and_test or or_test
884
if
or_test -> and_test or or_test
884
for
or_test -> and_test or or_test
885
*
power -> atom_expr ** factor
885
in
power -> atom_expr ** factor
885
<
power -> atom_expr ** factor
885
if
power -> atom_expr ** factor
885
-
power -> atom_expr ** factor
885
>>
power -> atom_expr ** factor
885
]
power -> atom_expr ** factor
885
<=
power -> atom_expr ** factor
885
and
power -> atom_expr ** factor
885
==
power -> atom_expr ** factor
885
%
power -> atom_expr ** factor
885
/
power -> atom_expr ** factor
885
^
power -> atom_expr ** factor
885
<<
power -> atom_expr ** factor
885
,
power -> atom_expr ** factor
885
>
power -> atom_expr ** factor
885
//
power -> atom_expr ** factor
885
is
power -> atom_expr ** factor
885
for
power -> atom_expr ** factor
885
@
power -> atom_expr ** factor
885
+
power -> atom_expr ** factor
885
|
power -> atom_expr ** factor
885
!=
power -> atom_expr ** factor
885
>=
power -> atom_expr ** factor
885
or
power -> atom_expr ** factor
885
&
power -> atom_expr ** factor
885
not
power -> atom_expr ** factor
886
and
xor_expr -> and_expr ^ xor_expr
886
<
xor_expr -> and_expr ^ xor_expr
886
>
xor_expr -> and_expr ^ xor_expr
886
in
xor_expr -> and_expr ^ xor_expr
886
|
xor_expr -> and_expr ^ xor_expr
886
<=
xor_expr -> and_expr ^ xor_expr
886
for
xor_expr -> and_expr ^ xor_expr
886
]
xor_expr -> and_expr ^ xor_expr
886
!=
xor_expr -> and_expr ^ xor_expr
886
not
xor_expr -> and_expr ^ xor_expr
886
or
xor_expr -> and_expr ^ xor_expr
886
if
xor_expr -> and_expr ^ xor_expr
886
is
xor_expr -> and_expr ^ xor_expr
886
==
xor_expr -> and_expr ^ xor_expr
886
,
xor_expr -> and_expr ^ xor_expr
886
>=
xor_expr -> and_expr ^ xor_expr
887
<=
arith_expr -> term + arith_expr
887
&
arith_expr -> term + arith_expr
887
>
arith_expr -> term + arith_expr
887
,
arith_expr -> term + arith_expr
887
]
arith_expr -> term + arith_expr
887
>=
arith_expr -> term + arith_expr
887
not
arith_expr -> term + arith_expr
887
|
arith_expr -> term + arith_expr
887
in
arith_expr -> term + arith_expr
887
if
arith_expr -> term + arith_expr
887
>>
arith_expr -> term + arith_expr
887
is
arith_expr -> term + arith_expr
887
^
arith_expr -> term + arith_expr
887
<<
arith_expr -> term + arith_expr
887
<
arith_expr -> term + arith_expr
887
==
arith_expr -> term + arith_expr
887
!=
arith_expr -> term + arith_expr
887
for
arith_expr -> term + arith_expr
887
or
arith_expr -> term + arith_expr
887
and
arith_expr -> term + arith_expr
888
<=
arith_expr -> term - arith_expr
888
if
arith_expr -> term - arith_expr
888
not
arith_expr -> term - arith_expr
888
|
arith_expr -> term - arith_expr
888
,
arith_expr -> term - arith_expr
888
>>
arith_expr -> term - arith_expr
888
>=
arith_expr -> term - arith_expr
888
<<
arith_expr -> term - arith_expr
888
is
arith_expr -> term - arith_expr
888
!=
arith_expr -> term - arith_expr
888
in
arith_expr -> term - arith_expr
888
<
arith_expr -> term - arith_expr
888
]
arith_expr -> term - arith_expr
888
or
arith_expr -> term - arith_expr
888
for
arith_expr -> term - arith_expr
888
==
arith_expr -> term - arith_expr
888
and
arith_expr -> term - arith_expr
888
&
arith_expr -> term - arith_expr
888
^
arith_expr -> term - arith_expr
888
>
arith_expr -> term - arith_expr
889
|
term -> factor * term
889
-
term -> factor * term
889
in
term -> factor * term
889
and
term -> factor * term
889
<<
term -> factor * term
889
>=
term -> factor * term
889
if
term -> factor * term
889
]
term -> factor * term
889
or
term -> factor * term
889
<=
term -> factor * term
889
is
term -> factor * term
889
^
term -> factor * term
889
!=
term -> factor * term
889
==
term -> factor * term
889
,
term -> factor * term
889
&
term -> factor * term
889
>
term -> factor * term
889
not
term -> factor * term
889
for
term -> factor * term
889
<
term -> factor * term
889
+
term -> factor * term
889
>>
term -> factor * term
890
!=
term -> factor % term
890
>>
term -> factor % term
890
for
term -> factor % term
890
==
term -> factor % term
890
>=
term -> factor % term
890
,
term -> factor % term
890
^
term -> factor % term
890
not
term -> factor % term
890
or
term -> factor % term
890
if
term -> factor % term
890
<=
term -> factor % term
890
<
term -> factor % term
890
is
term -> factor % term
890
-
term -> factor % term
890
in
term -> factor % term
890
]
term -> factor % term
890
>
term -> factor % term
890
<<
term -> factor % term
890
and
term -> factor % term
890
|
term -> factor % term
890
+
term -> factor % term
890
&
term -> factor % term
891
is
term -> factor // term
891
if
term -> factor // term
891
>
term -> factor // term
891
==
term -> factor // term
891
+
term -> factor // term
891
^
term -> factor // term
891
]
term -> factor // term
891
-
term -> factor // term
891
,
term -> factor // term
891
in
term -> factor // term
891
>>
term -> factor // term
891
|
term -> factor // term
891
<<
term -> factor // term
891
!=
term -> factor // term
891
&
term -> factor // term
891
not
term -> factor // term
891
<=
term -> factor // term
891
<
term -> factor // term
891
for
term -> factor // term
891
and
term -> factor // term
891
>=
term -> factor // term
891
or
term -> factor // term
892
>=
term -> factor / term
892
!=
term -> factor / term
892
]
term -> factor / term
892
not
term -> factor / term
892
^
term -> factor / term
892
in
term -> factor / term
892
and
term -> factor / term
892
<<
term -> factor / term
892
for
term -> factor / term
892
,
term -> factor / term
892
+
term -> factor / term
892
>
term -> factor / term
892
|
term -> factor / term
892
or
term -> factor / term
892
if
term -> factor / term
892
>>
term -> factor / term
892
<
term -> factor / term
892
&
term -> factor / term
892
-
term -> factor / term
892
is
term -> factor / term
892
==
term -> factor / term
892
<=
term -> factor / term
893
-
term -> factor @ term
893
&
term -> factor @ term
893
^
term -> factor @ term
893
]
term -> factor @ term
893
<
term -> factor @ term
893
!=
term -> factor @ term
893
<<
term -> factor @ term
893
is
term -> factor @ term
893
for
term -> factor @ term
893
<=
term -> factor @ term
893
and
term -> factor @ term
893
+
term -> factor @ term
893
,
term -> factor @ term
893
>
term -> factor @ term
893
if
term -> factor @ term
893
not
term -> factor @ term
893
>>
term -> factor @ term
893
>=
term -> factor @ term
893
|
term -> factor @ term
893
in
term -> factor @ term
893
==
term -> factor @ term
893
or
term -> factor @ term
894
if
and_expr -> shift_expr & and_expr
894
!=
and_expr -> shift_expr & and_expr
894
<=
and_expr -> shift_expr & and_expr
894
not
and_expr -> shift_expr & and_expr
894
,
and_expr -> shift_expr & and_expr
894
^
and_expr -> shift_expr & and_expr
894
|
and_expr -> shift_expr & and_expr
894
or
and_expr -> shift_expr & and_expr
894
]
and_expr -> shift_expr & and_expr
894
in
and_expr -> shift_expr & and_expr
894
>
and_expr -> shift_expr & and_expr
894
for
and_expr -> shift_expr & and_expr
894
and
and_expr -> shift_expr & and_expr
894
==
and_expr -> shift_expr & and_expr
894
<
and_expr -> shift_expr & and_expr
894
is
and_expr -> shift_expr & and_expr
894
>=
and_expr -> shift_expr & and_expr
895
,
shift_expr -> arith_expr << shift_expr
895
for
shift_expr -> arith_expr << shift_expr
895
^
shift_expr -> arith_expr << shift_expr
895
|
shift_expr -> arith_expr << shift_expr
895
&
shift_expr -> arith_expr << shift_expr
895
and
shift_expr -> arith_expr << shift_expr
895
is
shift_expr -> arith_expr << shift_expr
895
in
shift_expr -> arith_expr << shift_expr
895
<=
shift_expr -> arith_expr << shift_expr
895
]
shift_expr -> arith_expr << shift_expr
895
not
shift_expr -> arith_expr << shift_expr
895
==
shift_expr -> arith_expr << shift_expr
895
>=
shift_expr -> arith_expr << shift_expr
895
if
shift_expr -> arith_expr << shift_expr
895
<
shift_expr -> arith_expr << shift_expr
895
>
shift_expr -> arith_expr << shift_expr
895
or
shift_expr -> arith_expr << shift_expr
895
!=
shift_expr -> arith_expr << shift_expr
896
or
shift_expr -> arith_expr >> shift_expr
896
and
shift_expr -> arith_expr >> shift_expr
896
>=
shift_expr -> arith_expr >> shift_expr
896
for
shift_expr -> arith_expr >> shift_expr
896
not
shift_expr -> arith_expr >> shift_expr
896
^
shift_expr -> arith_expr >> shift_expr
896
is
shift_expr -> arith_expr >> shift_expr
896
if
shift_expr -> arith_expr >> shift_expr
896
in
shift_expr -> arith_expr >> shift_expr
896
<=
shift_expr -> arith_expr >> shift_expr
896
]
shift_expr -> arith_expr >> shift_expr
896
==
shift_expr -> arith_expr >> shift_expr
896
,
shift_expr -> arith_expr >> shift_expr
896
<
shift_expr -> arith_expr >> shift_expr
896
!=
shift_expr -> arith_expr >> shift_expr
896
|
shift_expr -> arith_expr >> shift_expr
896
>
shift_expr -> arith_expr >> shift_expr
896
&
shift_expr -> arith_expr >> shift_expr
897
and
atom -> [ test_list_comp ]
897
<=
atom -> [ test_list_comp ]
897
**
atom -> [ test_list_comp ]
897
^
atom -> [ test_list_comp ]
897
[
atom -> [ test_list_comp ]
897
,
atom -> [ test_list_comp ]
897
!=
atom -> [ test_list_comp ]
897
<
atom -> [ test_list_comp ]
897
/
atom -> [ test_list_comp ]
897
-
atom -> [ test_list_comp ]
897
>=
atom -> [ test_list_comp ]
897
if
atom -> [ test_list_comp ]
897
]
atom -> [ test_list_comp ]
897
%
atom -> [ test_list_comp ]
897
is
atom -> [ test_list_comp ]
897
+
atom -> [ test_list_comp ]
897
&
atom -> [ test_list_comp ]
897
@
atom -> [ test_list_comp ]
897
or
atom -> [ test_list_comp ]
897
in
atom -> [ test_list_comp ]
897
==
atom -> [ test_list_comp ]
897
not
atom -> [ test_list_comp ]
897
.
atom -> [ test_list_comp ]
897
|
atom -> [ test_list_comp ]
897
>
atom -> [ test_list_comp ]
897
<<
atom -> [ test_list_comp ]
897
//
atom -> [ test_list_comp ]
897
(
atom -> [ test_list_comp ]
897
for
atom -> [ test_list_comp ]
897
*
atom -> [ test_list_comp ]
897
>>
atom -> [ test_list_comp ]
898
if
comparison -> expr comp_op comparison
898
or
comparison -> expr comp_op comparison
898
and
comparison -> expr comp_op comparison
898
for
comparison -> expr comp_op comparison
898
]
comparison -> expr comp_op comparison
898
,
comparison -> expr comp_op comparison
899
for
and_test -> not_test and and_test
899
,
and_test -> not_test and and_test
899
or
and_test -> not_test and and_test
899
if
and_test -> not_test and and_test
899
]
and_test -> not_test and and_test
900
,
expr -> xor_expr | expr
900
]
expr -> xor_expr | expr
900
is
expr -> xor_expr | expr
900
if
expr -> xor_expr | expr
900
<
expr -> xor_expr | expr
900
>=
expr -> xor_expr | expr
900
or
expr -> xor_expr | expr
900
>
expr -> xor_expr | expr
900
and
expr -> xor_expr | expr
900
in
expr -> xor_expr | expr
900
!=
expr -> xor_expr | expr
900
<=
expr -> xor_expr | expr
900
==
expr -> xor_expr | expr
900
for
expr -> xor_expr | expr
900
not
expr -> xor_expr | expr
901
]
1422
902
<
trailer -> ( )
902
.
trailer -> ( )
902
*
trailer -> ( )
902
or
trailer -> ( )
902
is
trailer -> ( )
902
/
trailer -> ( )
902
+
trailer -> ( )
902
@
trailer -> ( )
902
>
trailer -> ( )
902
//
trailer -> ( )
902
|
trailer -> ( )
902
!=
trailer -> ( )
902
&
trailer -> ( )
902
^
trailer -> ( )
902
<=
trailer -> ( )
902
]
trailer -> ( )
902
%
trailer -> ( )
902
>>
trailer -> ( )
902
**
trailer -> ( )
902
and
trailer -> ( )
902
(
trailer -> ( )
902
for
trailer -> ( )
902
,
trailer -> ( )
902
==
trailer -> ( )
902
if
trailer -> ( )
902
[
trailer -> ( )
902
<<
trailer -> ( )
902
in
trailer -> ( )
902
-
trailer -> ( )
902
not
trailer -> ( )
902
>=
trailer -> ( )
903
)
1423
904
|
trailer -> . NAME
904
@
trailer -> . NAME
904
^
trailer -> . NAME
904
>
trailer -> . NAME
904
+
trailer -> . NAME
904
.
trailer -> . NAME
904
!=
trailer -> . NAME
904
<<
trailer -> . NAME
904
<=
trailer -> . NAME
904
[
trailer -> . NAME
904
*
trailer -> . NAME
904
(
trailer -> . NAME
904
//
trailer -> . NAME
904
**
trailer -> . NAME
904
-
trailer -> . NAME
904
]
trailer -> . NAME
904
in
trailer -> . NAME
904
>=
trailer -> . NAME
904
,
trailer -> . NAME
904
==
trailer -> . NAME
904
or
trailer -> . NAME
904
and
trailer -> . NAME
904
%
trailer -> . NAME
904
is
trailer -> . NAME
904
for
trailer -> . NAME
904
<
trailer -> . NAME
904
not
trailer -> . NAME
904
/
trailer -> . NAME
904
if
trailer -> . NAME
904
&
trailer -> . NAME
904
>>
trailer -> . NAME
905
&
trailer_expr -> trailer trailer_expr
905
not
trailer_expr -> trailer trailer_expr
905
and
trailer_expr -> trailer trailer_expr
905
+
trailer_expr -> trailer trailer_expr
905
==
trailer_expr -> trailer trailer_expr
905
**
trailer_expr -> trailer trailer_expr
905
/
trailer_expr -> trailer trailer_expr
905
^
trailer_expr -> trailer trailer_expr
905
,
trailer_expr -> trailer trailer_expr
905
>
trailer_expr -> trailer trailer_expr
905
*
trailer_expr -> trailer trailer_expr
905
//
trailer_expr -> trailer trailer_expr
905
>>
trailer_expr -> trailer trailer_expr
905
<<
trailer_expr -> trailer trailer_expr
905
>=
trailer_expr -> trailer trailer_expr
905
<=
trailer_expr -> trailer trailer_expr
905
-
trailer_expr -> trailer trailer_expr
905
is
trailer_expr -> trailer trailer_expr
905
]
trailer_expr -> trailer trailer_expr
905
in
trailer_expr -> trailer trailer_expr
905
<
trailer_expr -> trailer trailer_expr
905
|
trailer_expr -> trailer trailer_expr
905
if
trailer_expr -> trailer trailer_expr
905
%
trailer_expr -> trailer trailer_expr
905
for
trailer_expr -> trailer trailer_expr
905
@
trailer_expr -> trailer trailer_expr
905
!=
trailer_expr -> trailer trailer_expr
905
or
trailer_expr -> trailer trailer_expr
906
if
atom -> ( test_list_comp )
906
or
atom -> ( test_list_comp )
906
*
atom -> ( test_list_comp )
906
|
atom -> ( test_list_comp )
906
>>
atom -> ( test_list_comp )
906
%
atom -> ( test_list_comp )
906
not
atom -> ( test_list_comp )
906
//
atom -> ( test_list_comp )
906
for
atom -> ( test_list_comp )
906
+
atom -> ( test_list_comp )
906
and
atom -> ( test_list_comp )
906
>
atom -> ( test_list_comp )
906
[
atom -> ( test_list_comp )
906
^
atom -> ( test_list_comp )
906
!=
atom -> ( test_list_comp )
906
<<
atom -> ( test_list_comp )
906
**
atom -> ( test_list_comp )
906
is
atom -> ( test_list_comp )
906
<=
atom -> ( test_list_comp )
906
-
atom -> ( test_list_comp )
906
&
atom -> ( test_list_comp )
906
(
atom -> ( test_list_comp )
906
,
atom -> ( test_list_comp )
906
in
atom -> ( test_list_comp )
906
@
atom -> ( test_list_comp )
906
.
atom -> ( test_list_comp )
906
<
atom -> ( test_list_comp )
906
/
atom -> ( test_list_comp )
906
==
atom -> ( test_list_comp )
906
>=
atom -> ( test_list_comp )
906
]
atom -> ( test_list_comp )
907
else
1424
908
**
1425
908
!=
power -> atom_expr
908
|
power -> atom_expr
908
>
power -> atom_expr
908
/
power -> atom_expr
908
^
power -> atom_expr
908
&
power -> atom_expr
908
<
power -> atom_expr
908
not
power -> atom_expr
908
]
power -> atom_expr
908
<=
power -> atom_expr
908
%
power -> atom_expr
908
and
power -> atom_expr
908
*
power -> atom_expr
908
@
power -> atom_expr
908
>>
power -> atom_expr
908
if
power -> atom_expr
908
+
power -> atom_expr
908
,
power -> atom_expr
908
in
power -> atom_expr
908
is
power -> atom_expr
908
//
power -> atom_expr
908
or
power -> atom_expr
908
<<
power -> atom_expr
908
-
power -> atom_expr
908
==
power -> atom_expr
908
>=
power -> atom_expr
909
,
xor_expr -> and_expr
909
^
1426
909
not
xor_expr -> and_expr
909
]
xor_expr -> and_expr
909
>=
xor_expr -> and_expr
909
and
xor_expr -> and_expr
909
is
xor_expr -> and_expr
909
or
xor_expr -> and_expr
909
|
xor_expr -> and_expr
909
in
xor_expr -> and_expr
909
==
xor_expr -> and_expr
909
>
xor_expr -> and_expr
909
<
xor_expr -> and_expr
909
if
xor_expr -> and_expr
909
<=
xor_expr -> and_expr
909
!=
xor_expr -> and_expr
910
+
1427
910
in
arith_expr -> term
910
if
arith_expr -> term
910
|
arith_expr -> term
910
==
arith_expr -> term
910
<
arith_expr -> term
910
-
1428
910
<=
arith_expr -> term
910
^
arith_expr -> term
910
is
arith_expr -> term
910
>>
arith_expr -> term
910
]
arith_expr -> term
910
or
arith_expr -> term
910
&
arith_expr -> term
910
>
arith_expr -> term
910
>=
arith_expr -> term
910
<<
arith_expr -> term
910
and
arith_expr -> term
910
not
arith_expr -> term
910
,
arith_expr -> term
910
!=
arith_expr -> term
911
*
1429
911
%
1430
911
//
1431
911
/
1432
911
and
term -> factor
911
==
term -> factor
911
@
1433
911
>=
term -> factor
911
+
term -> factor
911
<=
term -> factor
911
or
term -> factor
911
<<
term -> factor
911
not
term -> factor
911
,
term -> factor
911
<
term -> factor
911
-
term -> factor
911
in
term -> factor
911
!=
term -> factor
911
is
term -> factor
911
>>
term -> factor
911
^
term -> factor
911
|
term -> factor
911
>
term -> factor
911
]
term -> factor
911
if
term -> factor
911
&
term -> factor
912
if
and_expr -> shift_expr
912
&
1434
912
in
and_expr -> shift_expr
912
is
and_expr -> shift_expr
912
|
and_expr -> shift_expr
912
>=
and_expr -> shift_expr
912
<
and_expr -> shift_expr
912
!=
and_expr -> shift_expr
912
and
and_expr -> shift_expr
912
]
and_expr -> shift_expr
912
not
and_expr -> shift_expr
912
or
and_expr -> shift_expr
912
,
and_expr -> shift_expr
912
==
and_expr -> shift_expr
912
<=
and_expr -> shift_expr
912
^
and_expr -> shift_expr
912
>
and_expr -> shift_expr
913
<<
1435
913
>>
1436
913
<
shift_expr -> arith_expr
913
>
shift_expr -> arith_expr
913
&
shift_expr -> arith_expr
913
and
shift_expr -> arith_expr
913
,
shift_expr -> arith_expr
913
in
shift_expr -> arith_expr
913
!=
shift_expr -> arith_expr
913
|
shift_expr -> arith_expr
913
if
shift_expr -> arith_expr
913
not
shift_expr -> arith_expr
913
<=
shift_expr -> arith_expr
913
is
shift_expr -> arith_expr
913
==
shift_expr -> arith_expr
913
or
shift_expr -> arith_expr
913
]
shift_expr -> arith_expr
913
>=
shift_expr -> arith_expr
913
^
shift_expr -> arith_expr
914
==
atom -> NUMBER
914
<=
atom -> NUMBER
914
<<
atom -> NUMBER
914
/
atom -> NUMBER
914
^
atom -> NUMBER
914
if
atom -> NUMBER
914
]
atom -> NUMBER
914
.
atom -> NUMBER
914
or
atom -> NUMBER
914
**
atom -> NUMBER
914
+
atom -> NUMBER
914
%
atom -> NUMBER
914
-
atom -> NUMBER
914
&
atom -> NUMBER
914
@
atom -> NUMBER
914
*
atom -> NUMBER
914
>>
atom -> NUMBER
914
<
atom -> NUMBER
914
is
atom -> NUMBER
914
(
atom -> NUMBER
914
and
atom -> NUMBER
914
not
atom -> NUMBER
914
!=
atom -> NUMBER
914
|
atom -> NUMBER
914
in
atom -> NUMBER
914
>
atom -> NUMBER
914
>=
atom -> NUMBER
914
//
atom -> NUMBER
914
,
atom -> NUMBER
914
[
atom -> NUMBER
915
or
atom -> NAME
915
in
atom -> NAME
915
^
atom -> NAME
915
[
atom -> NAME
915
==
atom -> NAME
915
<<
atom -> NAME
915
**
atom -> NAME
915
,
atom -> NAME
915
!=
atom -> NAME
915
%
atom -> NAME
915
@
atom -> NAME
915
not
atom -> NAME
915
>
atom -> NAME
915
>=
atom -> NAME
915
&
atom -> NAME
915
*
atom -> NAME
915
<
atom -> NAME
915
-
atom -> NAME
915
(
atom -> NAME
915
>>
atom -> NAME
915
+
atom -> NAME
915
]
atom -> NAME
915
//
atom -> NAME
915
and
atom -> NAME
915
<=
atom -> NAME
915
is
atom -> NAME
915
if
atom -> NAME
915
/
atom -> NAME
915
.
atom -> NAME
915
|
atom -> NAME
916
and_test
110
916
atom_expr
111
916
and_expr
112
916
term
113
916
factor
114
916
shift_expr
115
916
arith_expr
116
916
NUMBER
117
916
NAME
118
916
[
119
916
test_list_comp
1437
916
{
121
916
expr
122
916
not_test
123
916
False
124
916
xor_expr
125
916
atom
126
916
STRING
127
916
]
1438
916
+
128
916
(
129
916
True
131
916
-
132
916
None
133
916
comparison
134
916
or_test
135
916
test
136
916
power
137
916
~
138
916
lambda
139
916
lambdef
140
916
not
141
916
test_list
142
917
}
1439
918
in
147
918
<
148
918
>=
149
918
not
150
918
comp_op
1440
918
!=
151
918
>
152
918
==
153
918
is
154
918
<=
155
918
]
comparison -> expr
918
or
comparison -> expr
918
,
comparison -> expr
918
and
comparison -> expr
918
if
comparison -> expr
919
and
1441
919
,
and_test -> not_test
919
]
and_test -> not_test
919
or
and_test -> not_test
919
if
and_test -> not_test
920
*
atom -> False
920
@
atom -> False
920
<
atom -> False
920
or
atom -> False
920
is
atom -> False
920
>>
atom -> False
920
[
atom -> False
920
/
atom -> False
920
%
atom -> False
920
.
atom -> False
920
(
atom -> False
920
in
atom -> False
920
**
atom -> False
920
==
atom -> False
920
//
atom -> False
920
+
atom -> False
920
,
atom -> False
920
<<
atom -> False
920
!=
atom -> False
920
<=
atom -> False
920
>
atom -> False
920
^
atom -> False
920
]
atom -> False
920
if
atom -> False
920
&
atom -> False
920
and
atom -> False
920
|
atom -> False
920
-
atom -> False
920
not
atom -> False
920
>=
atom -> False
921
not
expr -> xor_expr
921
|
1442
921
==
expr -> xor_expr
921
in
expr -> xor_expr
921
if
expr -> xor_expr
921
>
expr -> xor_expr
921
or
expr -> xor_expr
921
]
expr -> xor_expr
921
<=
expr -> xor_expr
921
<
expr -> xor_expr
921
is
expr -> xor_expr
921
>=
expr -> xor_expr
921
!=
expr -> xor_expr
921
,
expr -> xor_expr
921
and
expr -> xor_expr
922
[
1443
922
(
1444
922
.
1445
922
trailer
1446
922
<<
trailer_expr -> 
922
trailer_expr
1447
922
@
trailer_expr -> 
922
!=
trailer_expr -> 
922
-
trailer_expr -> 
922
]
trailer_expr -> 
922
^
trailer_expr -> 
922
<
trailer_expr -> 
922
/
trailer_expr -> 
922
is
trailer_expr -> 
922
==
trailer_expr -> 
922
&
trailer_expr -> 
922
>=
trailer_expr -> 
922
or
trailer_expr -> 
922
in
trailer_expr -> 
922
*
trailer_expr -> 
922
not
trailer_expr -> 
922
**
trailer_expr -> 
922
<=
trailer_expr -> 
922
+
trailer_expr -> 
922
//
trailer_expr -> 
922
%
trailer_expr -> 
922
>
trailer_expr -> 
922
,
trailer_expr -> 
922
|
trailer_expr -> 
922
if
trailer_expr -> 
922
>>
trailer_expr -> 
922
and
trailer_expr -> 
923
&
atom -> STRING
923
**
atom -> STRING
923
%
atom -> STRING
923
]
atom -> STRING
923
@
atom -> STRING
923
/
atom -> STRING
923
*
atom -> STRING
923
^
atom -> STRING
923
>=
atom -> STRING
923
if
atom -> STRING
923
<
atom -> STRING
923
>>
atom -> STRING
923
.
atom -> STRING
923
//
atom -> STRING
923
,
atom -> STRING
923
+
atom -> STRING
923
<<
atom -> STRING
923
and
atom -> STRING
923
[
atom -> STRING
923
or
atom -> STRING
923
in
atom -> STRING
923
not
atom -> STRING
923
>
atom -> STRING
923
(
atom -> STRING
923
!=
atom -> STRING
923
is
atom -> STRING
923
==
atom -> STRING
923
-
atom -> STRING
923
|
atom -> STRING
923
<=
atom -> STRING
924
atom_expr
908
924
NUMBER
914
924
NAME
915
924
[
916
924
{
917
924
False
920
924
atom
922
924
STRING
923
924
+
924
924
(
925
924
True
926
924
-
927
924
None
928
924
factor
1448
924
power
932
924
~
933
925
and_test
217
925
atom_expr
218
925
and_expr
219
925
term
220
925
factor
221
925
shift_expr
222
925
arith_expr
223
925
NUMBER
224
925
NAME
225
925
not
226
925
[
227
925
{
228
925
expr
229
925
test_list_comp
1449
925
not_test
231
925
False
232
925
xor_expr
234
925
STRING
235
925
lambda
236
925
atom
237
925
+
238
925
True
239
925
-
240
925
(
241
925
None
242
925
comparison
243
925
power
244
925
)
1450
925
~
245
925
or_test
246
925
test
247
925
lambdef
248
925
test_list
249
926
!=
atom -> True
926
is
atom -> True
926
|
atom -> True
926
<=
atom -> True
926
^
atom -> True
926
%
atom -> True
926
@
atom -> True
926
**
atom -> True
926
(
atom -> True
926
not
atom -> True
926
>>
atom -> True
926
<
atom -> True
926
==
atom -> True
926
and
atom -> True
926
in
atom -> True
926
&
atom -> True
926
.
atom -> True
926
<<
atom -> True
926
/
atom -> True
926
*
atom -> True
926
>
atom -> True
926
,
atom -> True
926
+
atom -> True
926
>=
atom -> True
926
or
atom -> True
926
[
atom -> True
926
-
atom -> True
926
]
atom -> True
926
//
atom -> True
926
if
atom -> True
927
atom_expr
908
927
NUMBER
914
927
NAME
915
927
[
916
927
factor
1451
927
{
917
927
False
920
927
atom
922
927
STRING
923
927
+
924
927
(
925
927
True
926
927
-
927
927
None
928
927
power
932
927
~
933
928
!=
atom -> None
928
//
atom -> None
928
^
atom -> None
928
>=
atom -> None
928
&
atom -> None
928
**
atom -> None
928
,
atom -> None
928
<
atom -> None
928
if
atom -> None
928
*
atom -> None
928
>
atom -> None
928
@
atom -> None
928
|
atom -> None
928
-
atom -> None
928
%
atom -> None
928
not
atom -> None
928
==
atom -> None
928
in
atom -> None
928
/
atom -> None
928
or
atom -> None
928
]
atom -> None
928
and
atom -> None
928
+
atom -> None
928
(
atom -> None
928
>>
atom -> None
928
is
atom -> None
928
[
atom -> None
928
<=
atom -> None
928
<<
atom -> None
928
.
atom -> None
929
]
test -> or_test
929
,
test -> or_test
929
if
1452
930
]
test_list -> test
930
,
453
931
or
1453
931
]
or_test -> and_test
931
,
or_test -> and_test
931
if
or_test -> and_test
932
*
factor -> power
932
>>
factor -> power
932
>=
factor -> power
932
<
factor -> power
932
&
factor -> power
932
]
factor -> power
932
,
factor -> power
932
@
factor -> power
932
|
factor -> power
932
!=
factor -> power
932
<=
factor -> power
932
//
factor -> power
932
in
factor -> power
932
and
factor -> power
932
+
factor -> power
932
>
factor -> power
932
-
factor -> power
932
not
factor -> power
932
is
factor -> power
932
==
factor -> power
932
%
factor -> power
932
if
factor -> power
932
or
factor -> power
932
^
factor -> power
932
<<
factor -> power
932
/
factor -> power
933
atom_expr
908
933
NUMBER
914
933
NAME
915
933
[
916
933
factor
1454
933
{
917
933
False
920
933
atom
922
933
STRING
923
933
+
924
933
(
925
933
True
926
933
-
927
933
None
928
933
power
932
933
~
933
934
vfpdef
212
934
NAME
211
934
varargslist
1455
934
:
1456
935
atom_expr
908
935
and_expr
909
935
term
910
935
factor
911
935
shift_expr
912
935
arith_expr
913
935
NUMBER
914
935
NAME
915
935
[
916
935
{
917
935
expr
918
935
False
920
935
xor_expr
921
935
atom
922
935
STRING
923
935
+
924
935
(
925
935
True
926
935
-
927
935
None
928
935
power
932
935
~
933
935
not
935
935
comparison
936
935
not_test
1457
936
or
not_test -> comparison
936
if
not_test -> comparison
936
,
not_test -> comparison
936
]
not_test -> comparison
936
and
not_test -> comparison
937
]
test_list -> test , test_list
938
,
test -> lambdef
938
]
test -> lambdef
939
in
1458
940
]
lambdef -> lambda : test
940
,
lambdef -> lambda : test
940
for
lambdef -> lambda : test
941
and_test
110
941
atom_expr
111
941
and_expr
112
941
term
113
941
factor
114
941
shift_expr
115
941
arith_expr
116
941
NUMBER
117
941
NAME
118
941
[
119
941
{
121
941
expr
122
941
not_test
123
941
False
124
941
xor_expr
125
941
atom
126
941
STRING
127
941
+
128
941
(
129
941
True
131
941
-
132
941
None
133
941
comparison
134
941
or_test
135
941
power
137
941
~
138
941
test
1459
941
lambda
139
941
lambdef
140
941
not
141
942
INDENT
1460
943
continue
suite -> simple_stmt
943
not
suite -> simple_stmt
943
yield
suite -> simple_stmt
943
for
suite -> simple_stmt
943
False
suite -> simple_stmt
943
NUMBER
suite -> simple_stmt
943
with
suite -> simple_stmt
943
lambda
suite -> simple_stmt
943
{
suite -> simple_stmt
943
None
suite -> simple_stmt
943
(
suite -> simple_stmt
943
while
suite -> simple_stmt
943
if
suite -> simple_stmt
943
try
suite -> simple_stmt
943
NAME
suite -> simple_stmt
943
True
suite -> simple_stmt
943
global
suite -> simple_stmt
943
STRING
suite -> simple_stmt
943
pass
suite -> simple_stmt
943
$
suite -> simple_stmt
943
[
suite -> simple_stmt
943
assert
suite -> simple_stmt
943
NEWLINE
suite -> simple_stmt
943
raise
suite -> simple_stmt
943
-
suite -> simple_stmt
943
class
suite -> simple_stmt
943
del
suite -> simple_stmt
943
@
suite -> simple_stmt
943
~
suite -> simple_stmt
943
+
suite -> simple_stmt
943
return
suite -> simple_stmt
943
break
suite -> simple_stmt
943
nonlocal
suite -> simple_stmt
943
def
suite -> simple_stmt
944
raise
classdef -> class NAME : suite
944
while
classdef -> class NAME : suite
944
NEWLINE
classdef -> class NAME : suite
944
True
classdef -> class NAME : suite
944
try
classdef -> class NAME : suite
944
lambda
classdef -> class NAME : suite
944
break
classdef -> class NAME : suite
944
[
classdef -> class NAME : suite
944
assert
classdef -> class NAME : suite
944
NAME
classdef -> class NAME : suite
944
False
classdef -> class NAME : suite
944
-
classdef -> class NAME : suite
944
@
classdef -> class NAME : suite
944
nonlocal
classdef -> class NAME : suite
944
None
classdef -> class NAME : suite
944
STRING
classdef -> class NAME : suite
944
def
classdef -> class NAME : suite
944
with
classdef -> class NAME : suite
944
for
classdef -> class NAME : suite
944
continue
classdef -> class NAME : suite
944
~
classdef -> class NAME : suite
944
yield
classdef -> class NAME : suite
944
+
classdef -> class NAME : suite
944
{
classdef -> class NAME : suite
944
$
classdef -> class NAME : suite
944
(
classdef -> class NAME : suite
944
del
classdef -> class NAME : suite
944
class
classdef -> class NAME : suite
944
return
classdef -> class NAME : suite
944
NUMBER
classdef -> class NAME : suite
944
pass
classdef -> class NAME : suite
944
global
classdef -> class NAME : suite
944
if
classdef -> class NAME : suite
944
not
classdef -> class NAME : suite
945
)
1461
946
:
1462
947
atom_expr
472
947
NUMBER
478
947
NAME
479
947
[
480
947
{
481
947
False
484
947
atom
487
947
STRING
488
947
+
489
947
(
490
947
True
491
947
None
493
947
-
492
947
power
496
947
~
497
947
factor
1463
948
atom_expr
472
948
and_expr
473
948
term
474
948
factor
475
948
shift_expr
476
948
arith_expr
477
948
NUMBER
478
948
NAME
479
948
[
480
948
{
481
948
False
484
948
atom
487
948
STRING
488
948
xor_expr
1464
948
+
489
948
(
490
948
True
491
948
None
493
948
-
492
948
power
496
948
~
497
949
atom_expr
472
949
factor
475
949
term
474
949
NUMBER
478
949
NAME
479
949
[
480
949
{
481
949
False
484
949
atom
487
949
STRING
488
949
+
489
949
(
490
949
True
491
949
None
493
949
-
492
949
arith_expr
1465
949
power
496
949
~
497
950
atom_expr
472
950
factor
475
950
term
474
950
NUMBER
478
950
NAME
479
950
[
480
950
{
481
950
False
484
950
atom
487
950
STRING
488
950
+
489
950
(
490
950
True
491
950
None
493
950
-
492
950
arith_expr
1466
950
power
496
950
~
497
951
atom_expr
472
951
factor
475
951
NUMBER
478
951
NAME
479
951
[
480
951
{
481
951
False
484
951
atom
487
951
STRING
488
951
+
489
951
(
490
951
term
1467
951
True
491
951
None
493
951
-
492
951
power
496
951
~
497
952
atom_expr
472
952
factor
475
952
NUMBER
478
952
NAME
479
952
[
480
952
{
481
952
term
1468
952
False
484
952
atom
487
952
STRING
488
952
+
489
952
(
490
952
True
491
952
None
493
952
-
492
952
power
496
952
~
497
953
atom_expr
472
953
factor
475
953
NUMBER
478
953
NAME
479
953
[
480
953
{
481
953
False
484
953
atom
487
953
STRING
488
953
+
489
953
term
1469
953
(
490
953
True
491
953
None
493
953
-
492
953
power
496
953
~
497
954
atom_expr
472
954
factor
475
954
NUMBER
478
954
NAME
479
954
[
480
954
{
481
954
False
484
954
atom
487
954
STRING
488
954
+
489
954
(
490
954
True
491
954
None
493
954
-
492
954
term
1470
954
power
496
954
~
497
955
atom_expr
472
955
term
1471
955
factor
475
955
NUMBER
478
955
NAME
479
955
[
480
955
{
481
955
False
484
955
atom
487
955
STRING
488
955
+
489
955
(
490
955
True
491
955
None
493
955
-
492
955
power
496
955
~
497
956
atom_expr
472
956
factor
475
956
term
474
956
shift_expr
476
956
arith_expr
477
956
NUMBER
478
956
NAME
479
956
[
480
956
{
481
956
False
484
956
atom
487
956
STRING
488
956
+
489
956
(
490
956
True
491
956
None
493
956
-
492
956
power
496
956
~
497
956
and_expr
1472
957
atom_expr
472
957
factor
475
957
term
474
957
arith_expr
477
957
NUMBER
478
957
NAME
479
957
[
480
957
{
481
957
False
484
957
atom
487
957
STRING
488
957
+
489
957
(
490
957
True
491
957
None
493
957
-
492
957
power
496
957
~
497
957
shift_expr
1473
958
atom_expr
472
958
factor
475
958
term
474
958
arith_expr
477
958
NUMBER
478
958
NAME
479
958
[
480
958
{
481
958
False
484
958
atom
487
958
STRING
488
958
+
489
958
shift_expr
1474
958
(
490
958
True
491
958
-
492
958
None
493
958
power
496
958
~
497
959
]
1475
960
in
atom -> [ ]
960
>=
atom -> [ ]
960
%
atom -> [ ]
960
:
atom -> [ ]
960
is
atom -> [ ]
960
^
atom -> [ ]
960
//
atom -> [ ]
960
or
atom -> [ ]
960
not
atom -> [ ]
960
[
atom -> [ ]
960
and
atom -> [ ]
960
/
atom -> [ ]
960
!=
atom -> [ ]
960
>
atom -> [ ]
960
]
atom -> [ ]
960
&
atom -> [ ]
960
**
atom -> [ ]
960
@
atom -> [ ]
960
==
atom -> [ ]
960
<<
atom -> [ ]
960
if
atom -> [ ]
960
<
atom -> [ ]
960
,
atom -> [ ]
960
(
atom -> [ ]
960
<=
atom -> [ ]
960
*
atom -> [ ]
960
.
atom -> [ ]
960
>>
atom -> [ ]
960
|
atom -> [ ]
960
-
atom -> [ ]
960
+
atom -> [ ]
961
<<
atom -> { }
961
+
atom -> { }
961
//
atom -> { }
961
is
atom -> { }
961
>=
atom -> { }
961
<=
atom -> { }
961
>
atom -> { }
961
*
atom -> { }
961
^
atom -> { }
961
%
atom -> { }
961
>>
atom -> { }
961
:
atom -> { }
961
.
atom -> { }
961
not
atom -> { }
961
==
atom -> { }
961
if
atom -> { }
961
in
atom -> { }
961
<
atom -> { }
961
|
atom -> { }
961
]
atom -> { }
961
(
atom -> { }
961
/
atom -> { }
961
and
atom -> { }
961
**
atom -> { }
961
@
atom -> { }
961
-
atom -> { }
961
&
atom -> { }
961
,
atom -> { }
961
!=
atom -> { }
961
or
atom -> { }
961
[
atom -> { }
962
atom_expr
472
962
and_expr
473
962
term
474
962
factor
475
962
shift_expr
476
962
arith_expr
477
962
NUMBER
478
962
NAME
479
962
[
480
962
{
481
962
expr
482
962
False
484
962
xor_expr
485
962
atom
487
962
STRING
488
962
comparison
1476
962
+
489
962
(
490
962
True
491
962
None
493
962
-
492
962
power
496
962
~
497
963
atom_expr
472
963
and_expr
473
963
term
474
963
factor
475
963
shift_expr
476
963
arith_expr
477
963
NUMBER
478
963
NAME
479
963
[
480
963
{
481
963
expr
482
963
not_test
483
963
False
484
963
xor_expr
485
963
atom
487
963
STRING
488
963
+
489
963
(
490
963
True
491
963
None
493
963
-
492
963
and_test
1477
963
power
496
963
~
497
963
not
501
963
comparison
502
964
atom_expr
472
964
and_expr
473
964
term
474
964
factor
475
964
shift_expr
476
964
arith_expr
477
964
NUMBER
478
964
NAME
479
964
[
480
964
{
481
964
False
484
964
xor_expr
485
964
atom
487
964
STRING
488
964
+
489
964
(
490
964
True
491
964
None
493
964
-
492
964
expr
1478
964
power
496
964
~
497
965
*
trailer -> [ subscriptlist ]
965
**=
trailer -> [ subscriptlist ]
965
not
trailer -> [ subscriptlist ]
965
>>=
trailer -> [ subscriptlist ]
965
(
trailer -> [ subscriptlist ]
965
:
trailer -> [ subscriptlist ]
965
<<
trailer -> [ subscriptlist ]
965
,
trailer -> [ subscriptlist ]
965
<<=
trailer -> [ subscriptlist ]
965
-=
trailer -> [ subscriptlist ]
965
>>
trailer -> [ subscriptlist ]
965
//
trailer -> [ subscriptlist ]
965
NEWLINE
trailer -> [ subscriptlist ]
965
=
trailer -> [ subscriptlist ]
965
or
trailer -> [ subscriptlist ]
965
@=
trailer -> [ subscriptlist ]
965
&=
trailer -> [ subscriptlist ]
965
+=
trailer -> [ subscriptlist ]
965
is
trailer -> [ subscriptlist ]
965
[
trailer -> [ subscriptlist ]
965
/=
trailer -> [ subscriptlist ]
965
|
trailer -> [ subscriptlist ]
965
%
trailer -> [ subscriptlist ]
965
<=
trailer -> [ subscriptlist ]
965
and
trailer -> [ subscriptlist ]
965
**
trailer -> [ subscriptlist ]
965
|=
trailer -> [ subscriptlist ]
965
if
trailer -> [ subscriptlist ]
965
-
trailer -> [ subscriptlist ]
965
^=
trailer -> [ subscriptlist ]
965
%=
trailer -> [ subscriptlist ]
965
in
trailer -> [ subscriptlist ]
965
^
trailer -> [ subscriptlist ]
965
+
trailer -> [ subscriptlist ]
965
>=
trailer -> [ subscriptlist ]
965
//=
trailer -> [ subscriptlist ]
965
.
trailer -> [ subscriptlist ]
965
&
trailer -> [ subscriptlist ]
965
/
trailer -> [ subscriptlist ]
965
!=
trailer -> [ subscriptlist ]
965
<
trailer -> [ subscriptlist ]
965
==
trailer -> [ subscriptlist ]
965
*=
trailer -> [ subscriptlist ]
965
>
trailer -> [ subscriptlist ]
965
@
trailer -> [ subscriptlist ]
966
atom_expr
472
966
and_expr
473
966
term
474
966
factor
475
966
shift_expr
476
966
arith_expr
477
966
NUMBER
478
966
NAME
479
966
[
480
966
{
481
966
expr
482
966
not_test
483
966
False
484
966
xor_expr
485
966
atom
487
966
STRING
488
966
+
489
966
(
490
966
True
491
966
-
492
966
None
493
966
subscriptlist
1479
966
or_test
494
966
and_test
495
966
power
496
966
~
497
966
lambda
498
966
:
maybe_test -> 
966
maybe_test
499
966
test
500
966
not
501
966
comparison
502
966
lambdef
503
966
subscript
504
967
and_test
505
967
atom_expr
506
967
and_expr
507
967
term
508
967
factor
509
967
shift_expr
510
967
arith_expr
511
967
NUMBER
512
967
NAME
513
967
not
514
967
[
515
967
{
516
967
expr
517
967
)
1480
967
not_test
519
967
False
520
967
xor_expr
521
967
STRING
522
967
lambda
523
967
arglist
1481
967
atom
525
967
+
526
967
True
527
967
-
528
967
or_test
529
967
(
530
967
None
531
967
comparison
532
967
power
533
967
test
534
967
~
535
967
*
536
967
lambdef
537
967
**
538
967
argument
539
968
NAME
1482
969
trailer_expr
1483
969
[
966
969
(
967
969
.
968
969
trailer
969
969
<<
trailer_expr -> 
969
@
trailer_expr -> 
969
!=
trailer_expr -> 
969
-
trailer_expr -> 
969
]
trailer_expr -> 
969
^
trailer_expr -> 
969
<
trailer_expr -> 
969
/
trailer_expr -> 
969
is
trailer_expr -> 
969
==
trailer_expr -> 
969
&
trailer_expr -> 
969
>=
trailer_expr -> 
969
or
trailer_expr -> 
969
in
trailer_expr -> 
969
*
trailer_expr -> 
969
not
trailer_expr -> 
969
**
trailer_expr -> 
969
<=
trailer_expr -> 
969
+
trailer_expr -> 
969
//
trailer_expr -> 
969
%
trailer_expr -> 
969
>
trailer_expr -> 
969
:
trailer_expr -> 
969
,
trailer_expr -> 
969
|
trailer_expr -> 
969
if
trailer_expr -> 
969
and
trailer_expr -> 
969
>>
trailer_expr -> 
970
==
atom_expr -> atom trailer_expr
970
%
atom_expr -> atom trailer_expr
970
+
atom_expr -> atom trailer_expr
970
:
atom_expr -> atom trailer_expr
970
not
atom_expr -> atom trailer_expr
970
or
atom_expr -> atom trailer_expr
970
//
atom_expr -> atom trailer_expr
970
and
atom_expr -> atom trailer_expr
970
!=
atom_expr -> atom trailer_expr
970
<<
atom_expr -> atom trailer_expr
970
if
atom_expr -> atom trailer_expr
970
-
atom_expr -> atom trailer_expr
970
>>
atom_expr -> atom trailer_expr
970
**
atom_expr -> atom trailer_expr
970
/
atom_expr -> atom trailer_expr
970
<
atom_expr -> atom trailer_expr
970
in
atom_expr -> atom trailer_expr
970
&
atom_expr -> atom trailer_expr
970
is
atom_expr -> atom trailer_expr
970
|
atom_expr -> atom trailer_expr
970
]
atom_expr -> atom trailer_expr
970
>
atom_expr -> atom trailer_expr
970
>=
atom_expr -> atom trailer_expr
970
<=
atom_expr -> atom trailer_expr
970
@
atom_expr -> atom trailer_expr
970
*
atom_expr -> atom trailer_expr
970
,
atom_expr -> atom trailer_expr
970
^
atom_expr -> atom trailer_expr
971
<<
factor -> + factor
971
,
factor -> + factor
971
&
factor -> + factor
971
>
factor -> + factor
971
if
factor -> + factor
971
not
factor -> + factor
971
+
factor -> + factor
971
^
factor -> + factor
971
==
factor -> + factor
971
/
factor -> + factor
971
|
factor -> + factor
971
>=
factor -> + factor
971
%
factor -> + factor
971
<
factor -> + factor
971
is
factor -> + factor
971
]
factor -> + factor
971
or
factor -> + factor
971
@
factor -> + factor
971
//
factor -> + factor
971
and
factor -> + factor
971
-
factor -> + factor
971
in
factor -> + factor
971
*
factor -> + factor
971
:
factor -> + factor
971
!=
factor -> + factor
971
>>
factor -> + factor
971
<=
factor -> + factor
972
)
1484
973
>=
atom -> ( )
973
]
atom -> ( )
973
>>
atom -> ( )
973
not
atom -> ( )
973
if
atom -> ( )
973
&
atom -> ( )
973
^
atom -> ( )
973
.
atom -> ( )
973
/
atom -> ( )
973
in
atom -> ( )
973
:
atom -> ( )
973
>
atom -> ( )
973
%
atom -> ( )
973
(
atom -> ( )
973
==
atom -> ( )
973
,
atom -> ( )
973
[
atom -> ( )
973
<=
atom -> ( )
973
+
atom -> ( )
973
|
atom -> ( )
973
-
atom -> ( )
973
or
atom -> ( )
973
@
atom -> ( )
973
<<
atom -> ( )
973
is
atom -> ( )
973
**
atom -> ( )
973
*
atom -> ( )
973
and
atom -> ( )
973
<
atom -> ( )
973
!=
atom -> ( )
973
//
atom -> ( )
974
@
factor -> - factor
974
^
factor -> - factor
974
==
factor -> - factor
974
]
factor -> - factor
974
in
factor -> - factor
974
>>
factor -> - factor
974
,
factor -> - factor
974
//
factor -> - factor
974
and
factor -> - factor
974
:
factor -> - factor
974
<=
factor -> - factor
974
!=
factor -> - factor
974
-
factor -> - factor
974
&
factor -> - factor
974
not
factor -> - factor
974
>
factor -> - factor
974
*
factor -> - factor
974
%
factor -> - factor
974
/
factor -> - factor
974
<
factor -> - factor
974
|
factor -> - factor
974
+
factor -> - factor
974
if
factor -> - factor
974
<<
factor -> - factor
974
is
factor -> - factor
974
or
factor -> - factor
974
>=
factor -> - factor
975
atom_expr
590
975
and_expr
591
975
term
592
975
[
593
975
shift_expr
594
975
arith_expr
595
975
NUMBER
596
975
NAME
597
975
factor
598
975
{
599
975
expr
600
975
False
601
975
xor_expr
602
975
STRING
603
975
+
604
975
True
605
975
-
606
975
(
607
975
None
608
975
atom
609
975
power
610
975
~
611
975
not_test
612
975
or_test
1485
975
not
613
975
comparison
614
975
and_test
615
976
atom_expr
472
976
and_expr
473
976
term
474
976
factor
475
976
shift_expr
476
976
arith_expr
477
976
NUMBER
478
976
NAME
479
976
[
480
976
{
481
976
expr
482
976
not_test
483
976
False
484
976
xor_expr
485
976
atom
487
976
STRING
488
976
+
489
976
(
490
976
True
491
976
None
493
976
-
492
976
and_test
495
976
power
496
976
~
497
976
or_test
1486
976
not
501
976
comparison
502
977
<<
factor -> ~ factor
977
in
factor -> ~ factor
977
<=
factor -> ~ factor
977
if
factor -> ~ factor
977
|
factor -> ~ factor
977
<
factor -> ~ factor
977
>>
factor -> ~ factor
977
==
factor -> ~ factor
977
>=
factor -> ~ factor
977
!=
factor -> ~ factor
977
,
factor -> ~ factor
977
//
factor -> ~ factor
977
*
factor -> ~ factor
977
/
factor -> ~ factor
977
+
factor -> ~ factor
977
]
factor -> ~ factor
977
is
factor -> ~ factor
977
not
factor -> ~ factor
977
and
factor -> ~ factor
977
^
factor -> ~ factor
977
@
factor -> ~ factor
977
:
factor -> ~ factor
977
>
factor -> ~ factor
977
-
factor -> ~ factor
977
or
factor -> ~ factor
977
&
factor -> ~ factor
977
%
factor -> ~ factor
978
:
1487
979
atom_expr
472
979
and_expr
473
979
term
474
979
factor
475
979
shift_expr
476
979
arith_expr
477
979
NUMBER
478
979
NAME
479
979
[
480
979
{
481
979
expr
482
979
not_test
483
979
False
484
979
xor_expr
485
979
atom
487
979
STRING
488
979
+
489
979
(
490
979
True
491
979
None
493
979
-
492
979
test
1488
979
or_test
494
979
and_test
495
979
power
496
979
~
497
979
lambda
498
979
not
501
979
comparison
502
979
lambdef
503
980
atom_expr
472
980
and_expr
473
980
term
474
980
factor
475
980
shift_expr
476
980
arith_expr
477
980
NUMBER
478
980
NAME
479
980
[
480
980
{
481
980
expr
482
980
not_test
483
980
False
484
980
xor_expr
485
980
atom
487
980
STRING
488
980
+
489
980
maybe_test
1489
980
(
490
980
True
491
980
None
493
980
-
492
980
or_test
494
980
and_test
495
980
power
496
980
~
497
980
lambda
498
980
:
maybe_test -> 
980
not
501
980
comparison
502
980
,
maybe_test -> 
980
lambdef
503
980
test
1490
980
]
maybe_test -> 
981
if
not_test -> not not_test
981
]
not_test -> not not_test
981
:
not_test -> not not_test
981
,
not_test -> not not_test
981
or
not_test -> not not_test
981
and
not_test -> not not_test
982
atom_expr
472
982
and_expr
473
982
term
474
982
factor
475
982
shift_expr
476
982
arith_expr
477
982
NUMBER
478
982
NAME
479
982
[
480
982
{
481
982
expr
482
982
not_test
483
982
False
484
982
xor_expr
485
982
atom
487
982
STRING
488
982
+
489
982
(
490
982
True
491
982
-
492
982
None
493
982
or_test
494
982
and_test
495
982
power
496
982
~
497
982
lambda
498
982
:
maybe_test -> 
982
maybe_test
499
982
test
500
982
not
501
982
comparison
502
982
lambdef
503
982
subscriptlist
1491
982
subscript
504
983
and_test
505
983
atom_expr
506
983
and_expr
507
983
term
508
983
factor
509
983
shift_expr
510
983
arith_expr
511
983
NUMBER
512
983
NAME
513
983
not
514
983
[
515
983
{
516
983
expr
517
983
not_test
519
983
False
520
983
xor_expr
521
983
STRING
522
983
atom
525
983
+
526
983
True
527
983
-
528
983
(
530
983
None
531
983
comparison
532
983
power
533
983
~
535
983
or_test
1492
984
atom_expr
506
984
NUMBER
512
984
NAME
513
984
[
515
984
{
516
984
False
520
984
STRING
522
984
atom
525
984
+
526
984
True
527
984
-
528
984
(
530
984
factor
1493
984
None
531
984
power
533
984
~
535
985
atom_expr
506
985
and_expr
507
985
term
508
985
factor
509
985
shift_expr
510
985
arith_expr
511
985
NUMBER
512
985
NAME
513
985
[
515
985
{
516
985
False
520
985
STRING
522
985
xor_expr
1494
985
atom
525
985
+
526
985
True
527
985
-
528
985
(
530
985
None
531
985
power
533
985
~
535
986
atom_expr
506
986
factor
509
986
term
508
986
NUMBER
512
986
NAME
513
986
[
515
986
{
516
986
False
520
986
STRING
522
986
atom
525
986
+
526
986
True
527
986
-
528
986
(
530
986
None
531
986
power
533
986
arith_expr
1495
986
~
535
987
atom_expr
506
987
factor
509
987
term
508
987
NUMBER
512
987
NAME
513
987
[
515
987
{
516
987
False
520
987
STRING
522
987
atom
525
987
+
526
987
True
527
987
-
528
987
arith_expr
1496
987
(
530
987
None
531
987
power
533
987
~
535
988
atom_expr
506
988
factor
509
988
NUMBER
512
988
NAME
513
988
[
515
988
{
516
988
False
520
988
STRING
522
988
atom
525
988
+
526
988
term
1497
988
True
527
988
-
528
988
(
530
988
None
531
988
power
533
988
~
535
989
atom_expr
506
989
factor
509
989
NUMBER
512
989
NAME
513
989
[
515
989
{
516
989
False
520
989
STRING
522
989
atom
525
989
+
526
989
True
527
989
-
528
989
(
530
989
None
531
989
power
533
989
term
1498
989
~
535
990
atom_expr
506
990
factor
509
990
NUMBER
512
990
NAME
513
990
[
515
990
{
516
990
False
520
990
STRING
522
990
atom
525
990
+
526
990
term
1499
990
True
527
990
-
528
990
(
530
990
None
531
990
power
533
990
~
535
991
atom_expr
506
991
term
1500
991
factor
509
991
NUMBER
512
991
NAME
513
991
[
515
991
{
516
991
False
520
991
STRING
522
991
atom
525
991
+
526
991
True
527
991
-
528
991
(
530
991
None
531
991
power
533
991
~
535
992
atom_expr
506
992
factor
509
992
NUMBER
512
992
NAME
513
992
[
515
992
{
516
992
False
520
992
STRING
522
992
atom
525
992
+
526
992
True
527
992
-
528
992
(
530
992
None
531
992
term
1501
992
power
533
992
~
535
993
atom_expr
506
993
factor
509
993
term
508
993
shift_expr
510
993
arith_expr
511
993
NUMBER
512
993
NAME
513
993
[
515
993
{
516
993
False
520
993
STRING
522
993
atom
525
993
+
526
993
True
527
993
-
528
993
(
530
993
None
531
993
power
533
993
~
535
993
and_expr
1502
994
atom_expr
506
994
factor
509
994
term
508
994
arith_expr
511
994
NUMBER
512
994
NAME
513
994
shift_expr
1503
994
[
515
994
{
516
994
False
520
994
STRING
522
994
atom
525
994
+
526
994
True
527
994
-
528
994
(
530
994
None
531
994
power
533
994
~
535
995
atom_expr
506
995
factor
509
995
term
508
995
arith_expr
511
995
NUMBER
512
995
NAME
513
995
[
515
995
{
516
995
False
520
995
STRING
522
995
shift_expr
1504
995
atom
525
995
+
526
995
True
527
995
-
528
995
(
530
995
None
531
995
power
533
995
~
535
996
for
not_test -> not not_test
996
if
not_test -> not not_test
996
)
not_test -> not not_test
996
,
not_test -> not not_test
996
or
not_test -> not not_test
996
=
not_test -> not not_test
996
and
not_test -> not not_test
997
]
1505
998
in
atom -> [ ]
998
>=
atom -> [ ]
998
%
atom -> [ ]
998
is
atom -> [ ]
998
^
atom -> [ ]
998
//
atom -> [ ]
998
or
atom -> [ ]
998
not
atom -> [ ]
998
[
atom -> [ ]
998
and
atom -> [ ]
998
/
atom -> [ ]
998
!=
atom -> [ ]
998
>
atom -> [ ]
998
=
atom -> [ ]
998
&
atom -> [ ]
998
**
atom -> [ ]
998
@
atom -> [ ]
998
==
atom -> [ ]
998
<<
atom -> [ ]
998
if
atom -> [ ]
998
<
atom -> [ ]
998
,
atom -> [ ]
998
(
atom -> [ ]
998
<=
atom -> [ ]
998
*
atom -> [ ]
998
.
atom -> [ ]
998
>>
atom -> [ ]
998
|
atom -> [ ]
998
)
atom -> [ ]
998
-
atom -> [ ]
998
+
atom -> [ ]
998
for
atom -> [ ]
999
<<
atom -> { }
999
+
atom -> { }
999
//
atom -> { }
999
is
atom -> { }
999
>=
atom -> { }
999
<=
atom -> { }
999
>
atom -> { }
999
*
atom -> { }
999
^
atom -> { }
999
%
atom -> { }
999
>>
atom -> { }
999
)
atom -> { }
999
.
atom -> { }
999
not
atom -> { }
999
==
atom -> { }
999
if
atom -> { }
999
in
atom -> { }
999
<
atom -> { }
999
|
atom -> { }
999
(
atom -> { }
999
/
atom -> { }
999
for
atom -> { }
999
and
atom -> { }
999
**
atom -> { }
999
@
atom -> { }
999
=
atom -> { }
999
-
atom -> { }
999
&
atom -> { }
999
,
atom -> { }
999
!=
atom -> { }
999
or
atom -> { }
999
[
atom -> { }
1000
atom_expr
506
1000
and_expr
507
1000
term
508
1000
factor
509
1000
shift_expr
510
1000
arith_expr
511
1000
NUMBER
512
1000
NAME
513
1000
[
515
1000
{
516
1000
expr
517
1000
False
520
1000
xor_expr
521
1000
STRING
522
1000
comparison
1506
1000
atom
525
1000
+
526
1000
True
527
1000
-
528
1000
(
530
1000
None
531
1000
power
533
1000
~
535
1001
atom_expr
506
1001
and_expr
507
1001
term
508
1001
factor
509
1001
shift_expr
510
1001
arith_expr
511
1001
NUMBER
512
1001
NAME
513
1001
not
514
1001
[
515
1001
{
516
1001
expr
517
1001
not_test
519
1001
False
520
1001
xor_expr
521
1001
STRING
522
1001
atom
525
1001
+
526
1001
True
527
1001
-
528
1001
(
530
1001
None
531
1001
comparison
532
1001
power
533
1001
and_test
1507
1001
~
535
1002
atom_expr
506
1002
and_expr
507
1002
term
508
1002
factor
509
1002
shift_expr
510
1002
expr
1508
1002
arith_expr
511
1002
NUMBER
512
1002
NAME
513
1002
[
515
1002
{
516
1002
False
520
1002
xor_expr
521
1002
STRING
522
1002
atom
525
1002
+
526
1002
True
527
1002
-
528
1002
(
530
1002
None
531
1002
power
533
1002
~
535
1003
and_test
505
1003
atom_expr
506
1003
and_expr
507
1003
term
508
1003
factor
509
1003
shift_expr
510
1003
arith_expr
511
1003
NUMBER
512
1003
NAME
513
1003
not
514
1003
[
515
1003
{
516
1003
expr
517
1003
not_test
519
1003
False
520
1003
xor_expr
521
1003
STRING
522
1003
lambda
523
1003
atom
525
1003
+
526
1003
True
527
1003
-
528
1003
or_test
529
1003
(
530
1003
None
531
1003
comparison
532
1003
power
533
1003
~
535
1003
test
1509
1003
lambdef
537
1004
:
1510
1005
%
trailer -> ( arglist )
1005
and
trailer -> ( arglist )
1005
+
trailer -> ( arglist )
1005
=
trailer -> ( arglist )
1005
or
trailer -> ( arglist )
1005
*=
trailer -> ( arglist )
1005
not
trailer -> ( arglist )
1005
-
trailer -> ( arglist )
1005
%=
trailer -> ( arglist )
1005
@
trailer -> ( arglist )
1005
+=
trailer -> ( arglist )
1005
[
trailer -> ( arglist )
1005
<<=
trailer -> ( arglist )
1005
>>
trailer -> ( arglist )
1005
<=
trailer -> ( arglist )
1005
if
trailer -> ( arglist )
1005
//
trailer -> ( arglist )
1005
-=
trailer -> ( arglist )
1005
==
trailer -> ( arglist )
1005
<<
trailer -> ( arglist )
1005
*
trailer -> ( arglist )
1005
**=
trailer -> ( arglist )
1005
<
trailer -> ( arglist )
1005
**
trailer -> ( arglist )
1005
>>=
trailer -> ( arglist )
1005
is
trailer -> ( arglist )
1005
/=
trailer -> ( arglist )
1005
>
trailer -> ( arglist )
1005
!=
trailer -> ( arglist )
1005
/
trailer -> ( arglist )
1005
NEWLINE
trailer -> ( arglist )
1005
in
trailer -> ( arglist )
1005
|=
trailer -> ( arglist )
1005
.
trailer -> ( arglist )
1005
|
trailer -> ( arglist )
1005
&=
trailer -> ( arglist )
1005
^=
trailer -> ( arglist )
1005
//=
trailer -> ( arglist )
1005
>=
trailer -> ( arglist )
1005
&
trailer -> ( arglist )
1005
@=
trailer -> ( arglist )
1005
(
trailer -> ( arglist )
1005
^
trailer -> ( arglist )
1005
,
trailer -> ( arglist )
1005
:
trailer -> ( arglist )
1006
atom_expr
472
1006
and_expr
473
1006
term
474
1006
factor
475
1006
shift_expr
476
1006
arith_expr
477
1006
NUMBER
478
1006
NAME
479
1006
[
480
1006
{
481
1006
expr
482
1006
not_test
483
1006
False
484
1006
xor_expr
485
1006
atom
487
1006
subscriptlist
1511
1006
STRING
488
1006
+
489
1006
(
490
1006
True
491
1006
-
492
1006
None
493
1006
or_test
494
1006
and_test
495
1006
power
496
1006
~
497
1006
lambda
498
1006
:
maybe_test -> 
1006
maybe_test
499
1006
test
500
1006
not
501
1006
comparison
502
1006
lambdef
503
1006
subscript
504
1007
and_test
505
1007
atom_expr
506
1007
and_expr
507
1007
term
508
1007
factor
509
1007
shift_expr
510
1007
arith_expr
511
1007
NUMBER
512
1007
NAME
513
1007
not
514
1007
[
515
1007
{
516
1007
expr
517
1007
)
1512
1007
not_test
519
1007
False
520
1007
xor_expr
521
1007
STRING
522
1007
lambda
523
1007
arglist
1513
1007
atom
525
1007
+
526
1007
True
527
1007
-
528
1007
or_test
529
1007
(
530
1007
None
531
1007
comparison
532
1007
power
533
1007
test
534
1007
~
535
1007
*
536
1007
lambdef
537
1007
**
538
1007
argument
539
1008
NAME
1514
1009
trailer_expr
1515
1009
[
1006
1009
(
1007
1009
.
1008
1009
trailer
1009
1009
<<
trailer_expr -> 
1009
@
trailer_expr -> 
1009
!=
trailer_expr -> 
1009
-
trailer_expr -> 
1009
^
trailer_expr -> 
1009
<
trailer_expr -> 
1009
for
trailer_expr -> 
1009
/
trailer_expr -> 
1009
is
trailer_expr -> 
1009
==
trailer_expr -> 
1009
&
trailer_expr -> 
1009
>=
trailer_expr -> 
1009
or
trailer_expr -> 
1009
in
trailer_expr -> 
1009
=
trailer_expr -> 
1009
*
trailer_expr -> 
1009
not
trailer_expr -> 
1009
)
trailer_expr -> 
1009
**
trailer_expr -> 
1009
<=
trailer_expr -> 
1009
+
trailer_expr -> 
1009
//
trailer_expr -> 
1009
%
trailer_expr -> 
1009
>
trailer_expr -> 
1009
,
trailer_expr -> 
1009
|
trailer_expr -> 
1009
if
trailer_expr -> 
1009
and
trailer_expr -> 
1009
>>
trailer_expr -> 
1010
==
atom_expr -> atom trailer_expr
1010
%
atom_expr -> atom trailer_expr
1010
+
atom_expr -> atom trailer_expr
1010
not
atom_expr -> atom trailer_expr
1010
or
atom_expr -> atom trailer_expr
1010
//
atom_expr -> atom trailer_expr
1010
and
atom_expr -> atom trailer_expr
1010
!=
atom_expr -> atom trailer_expr
1010
<<
atom_expr -> atom trailer_expr
1010
for
atom_expr -> atom trailer_expr
1010
if
atom_expr -> atom trailer_expr
1010
-
atom_expr -> atom trailer_expr
1010
=
atom_expr -> atom trailer_expr
1010
)
atom_expr -> atom trailer_expr
1010
>>
atom_expr -> atom trailer_expr
1010
**
atom_expr -> atom trailer_expr
1010
/
atom_expr -> atom trailer_expr
1010
<
atom_expr -> atom trailer_expr
1010
in
atom_expr -> atom trailer_expr
1010
&
atom_expr -> atom trailer_expr
1010
is
atom_expr -> atom trailer_expr
1010
|
atom_expr -> atom trailer_expr
1010
>
atom_expr -> atom trailer_expr
1010
>=
atom_expr -> atom trailer_expr
1010
<=
atom_expr -> atom trailer_expr
1010
@
atom_expr -> atom trailer_expr
1010
*
atom_expr -> atom trailer_expr
1010
,
atom_expr -> atom trailer_expr
1010
^
atom_expr -> atom trailer_expr
1011
<<
factor -> + factor
1011
,
factor -> + factor
1011
&
factor -> + factor
1011
>
factor -> + factor
1011
if
factor -> + factor
1011
not
factor -> + factor
1011
+
factor -> + factor
1011
)
factor -> + factor
1011
^
factor -> + factor
1011
==
factor -> + factor
1011
/
factor -> + factor
1011
|
factor -> + factor
1011
>=
factor -> + factor
1011
for
factor -> + factor
1011
%
factor -> + factor
1011
<
factor -> + factor
1011
is
factor -> + factor
1011
or
factor -> + factor
1011
@
factor -> + factor
1011
//
factor -> + factor
1011
and
factor -> + factor
1011
=
factor -> + factor
1011
-
factor -> + factor
1011
in
factor -> + factor
1011
*
factor -> + factor
1011
!=
factor -> + factor
1011
>>
factor -> + factor
1011
<=
factor -> + factor
1012
@
factor -> - factor
1012
^
factor -> - factor
1012
==
factor -> - factor
1012
in
factor -> - factor
1012
>>
factor -> - factor
1012
)
factor -> - factor
1012
,
factor -> - factor
1012
//
factor -> - factor
1012
and
factor -> - factor
1012
for
factor -> - factor
1012
<=
factor -> - factor
1012
!=
factor -> - factor
1012
-
factor -> - factor
1012
&
factor -> - factor
1012
=
factor -> - factor
1012
not
factor -> - factor
1012
>
factor -> - factor
1012
*
factor -> - factor
1012
%
factor -> - factor
1012
/
factor -> - factor
1012
<
factor -> - factor
1012
|
factor -> - factor
1012
+
factor -> - factor
1012
if
factor -> - factor
1012
<<
factor -> - factor
1012
is
factor -> - factor
1012
or
factor -> - factor
1012
>=
factor -> - factor
1013
atom_expr
590
1013
and_expr
591
1013
term
592
1013
[
593
1013
shift_expr
594
1013
arith_expr
595
1013
NUMBER
596
1013
NAME
597
1013
factor
598
1013
{
599
1013
expr
600
1013
False
601
1013
xor_expr
602
1013
STRING
603
1013
+
604
1013
True
605
1013
-
606
1013
(
607
1013
None
608
1013
atom
609
1013
power
610
1013
~
611
1013
not_test
612
1013
or_test
1516
1013
not
613
1013
comparison
614
1013
and_test
615
1014
)
1517
1015
)
atom -> ( )
1015
>=
atom -> ( )
1015
>>
atom -> ( )
1015
not
atom -> ( )
1015
if
atom -> ( )
1015
&
atom -> ( )
1015
^
atom -> ( )
1015
.
atom -> ( )
1015
for
atom -> ( )
1015
/
atom -> ( )
1015
in
atom -> ( )
1015
>
atom -> ( )
1015
%
atom -> ( )
1015
(
atom -> ( )
1015
==
atom -> ( )
1015
,
atom -> ( )
1015
[
atom -> ( )
1015
<=
atom -> ( )
1015
+
atom -> ( )
1015
|
atom -> ( )
1015
-
atom -> ( )
1015
or
atom -> ( )
1015
=
atom -> ( )
1015
@
atom -> ( )
1015
<<
atom -> ( )
1015
is
atom -> ( )
1015
**
atom -> ( )
1015
*
atom -> ( )
1015
and
atom -> ( )
1015
<
atom -> ( )
1015
!=
atom -> ( )
1015
//
atom -> ( )
1016
atom_expr
1020
1016
and_expr
1021
1016
term
1022
1016
factor
1023
1016
shift_expr
1024
1016
arith_expr
1025
1016
NUMBER
1026
1016
NAME
1027
1016
not
1028
1016
[
1029
1016
{
1030
1016
expr
1031
1016
not_test
1032
1016
False
1033
1016
xor_expr
1034
1016
STRING
1035
1016
test
1518
1016
lambda
1036
1016
atom
1037
1016
+
1038
1016
True
1039
1016
-
1040
1016
(
1041
1016
None
1042
1016
power
1043
1016
and_test
1044
1016
~
1045
1016
or_test
1047
1016
comparison
1048
1016
lambdef
1049
1017
)
argument -> test comp_for
1017
,
argument -> test comp_for
1018
atom_expr
252
1018
True
253
1018
and_expr
254
1018
(
255
1018
NUMBER
256
1018
NAME
258
1018
{
259
1018
False
260
1018
arith_expr
261
1018
STRING
262
1018
power
263
1018
[
264
1018
factor
265
1018
~
266
1018
atom
267
1018
+
268
1018
term
269
1018
expr_list
1519
1018
None
270
1018
shift_expr
271
1018
xor_expr
272
1018
expr
273
1018
-
274
1019
=
factor -> ~ factor
1019
for
factor -> ~ factor
1019
<<
factor -> ~ factor
1019
in
factor -> ~ factor
1019
<=
factor -> ~ factor
1019
if
factor -> ~ factor
1019
|
factor -> ~ factor
1019
<
factor -> ~ factor
1019
>>
factor -> ~ factor
1019
==
factor -> ~ factor
1019
>=
factor -> ~ factor
1019
!=
factor -> ~ factor
1019
,
factor -> ~ factor
1019
//
factor -> ~ factor
1019
*
factor -> ~ factor
1019
/
factor -> ~ factor
1019
+
factor -> ~ factor
1019
is
factor -> ~ factor
1019
not
factor -> ~ factor
1019
and
factor -> ~ factor
1019
)
factor -> ~ factor
1019
^
factor -> ~ factor
1019
@
factor -> ~ factor
1019
>
factor -> ~ factor
1019
-
factor -> ~ factor
1019
or
factor -> ~ factor
1019
&
factor -> ~ factor
1019
%
factor -> ~ factor
1020
**
1520
1020
!=
power -> atom_expr
1020
|
power -> atom_expr
1020
>
power -> atom_expr
1020
/
power -> atom_expr
1020
^
power -> atom_expr
1020
&
power -> atom_expr
1020
<
power -> atom_expr
1020
not
power -> atom_expr
1020
)
power -> atom_expr
1020
<=
power -> atom_expr
1020
%
power -> atom_expr
1020
and
power -> atom_expr
1020
*
power -> atom_expr
1020
@
power -> atom_expr
1020
>>
power -> atom_expr
1020
if
power -> atom_expr
1020
+
power -> atom_expr
1020
,
power -> atom_expr
1020
in
power -> atom_expr
1020
is
power -> atom_expr
1020
//
power -> atom_expr
1020
or
power -> atom_expr
1020
<<
power -> atom_expr
1020
-
power -> atom_expr
1020
==
power -> atom_expr
1020
>=
power -> atom_expr
1021
,
xor_expr -> and_expr
1021
^
1521
1021
)
xor_expr -> and_expr
1021
not
xor_expr -> and_expr
1021
>=
xor_expr -> and_expr
1021
and
xor_expr -> and_expr
1021
is
xor_expr -> and_expr
1021
or
xor_expr -> and_expr
1021
|
xor_expr -> and_expr
1021
in
xor_expr -> and_expr
1021
==
xor_expr -> and_expr
1021
>
xor_expr -> and_expr
1021
<
xor_expr -> and_expr
1021
if
xor_expr -> and_expr
1021
<=
xor_expr -> and_expr
1021
!=
xor_expr -> and_expr
1022
+
1522
1022
in
arith_expr -> term
1022
if
arith_expr -> term
1022
|
arith_expr -> term
1022
==
arith_expr -> term
1022
<
arith_expr -> term
1022
-
1523
1022
<=
arith_expr -> term
1022
^
arith_expr -> term
1022
is
arith_expr -> term
1022
>>
arith_expr -> term
1022
or
arith_expr -> term
1022
&
arith_expr -> term
1022
>
arith_expr -> term
1022
>=
arith_expr -> term
1022
<<
arith_expr -> term
1022
and
arith_expr -> term
1022
)
arith_expr -> term
1022
not
arith_expr -> term
1022
,
arith_expr -> term
1022
!=
arith_expr -> term
1023
//
1524
1023
*
1525
1023
%
1526
1023
/
1527
1023
and
term -> factor
1023
==
term -> factor
1023
@
1528
1023
>=
term -> factor
1023
+
term -> factor
1023
<=
term -> factor
1023
or
term -> factor
1023
<<
term -> factor
1023
not
term -> factor
1023
,
term -> factor
1023
<
term -> factor
1023
-
term -> factor
1023
in
term -> factor
1023
!=
term -> factor
1023
is
term -> factor
1023
>>
term -> factor
1023
^
term -> factor
1023
|
term -> factor
1023
>
term -> factor
1023
)
term -> factor
1023
if
term -> factor
1023
&
term -> factor
1024
)
and_expr -> shift_expr
1024
if
and_expr -> shift_expr
1024
&
1529
1024
in
and_expr -> shift_expr
1024
is
and_expr -> shift_expr
1024
|
and_expr -> shift_expr
1024
>=
and_expr -> shift_expr
1024
<
and_expr -> shift_expr
1024
!=
and_expr -> shift_expr
1024
and
and_expr -> shift_expr
1024
not
and_expr -> shift_expr
1024
or
and_expr -> shift_expr
1024
,
and_expr -> shift_expr
1024
==
and_expr -> shift_expr
1024
<=
and_expr -> shift_expr
1024
^
and_expr -> shift_expr
1024
>
and_expr -> shift_expr
1025
<<
1530
1025
>>
1531
1025
<
shift_expr -> arith_expr
1025
>
shift_expr -> arith_expr
1025
&
shift_expr -> arith_expr
1025
and
shift_expr -> arith_expr
1025
,
shift_expr -> arith_expr
1025
in
shift_expr -> arith_expr
1025
!=
shift_expr -> arith_expr
1025
|
shift_expr -> arith_expr
1025
if
shift_expr -> arith_expr
1025
not
shift_expr -> arith_expr
1025
<=
shift_expr -> arith_expr
1025
is
shift_expr -> arith_expr
1025
==
shift_expr -> arith_expr
1025
)
shift_expr -> arith_expr
1025
or
shift_expr -> arith_expr
1025
>=
shift_expr -> arith_expr
1025
^
shift_expr -> arith_expr
1026
)
atom -> NUMBER
1026
==
atom -> NUMBER
1026
<=
atom -> NUMBER
1026
<<
atom -> NUMBER
1026
/
atom -> NUMBER
1026
^
atom -> NUMBER
1026
if
atom -> NUMBER
1026
.
atom -> NUMBER
1026
or
atom -> NUMBER
1026
**
atom -> NUMBER
1026
+
atom -> NUMBER
1026
%
atom -> NUMBER
1026
-
atom -> NUMBER
1026
&
atom -> NUMBER
1026
@
atom -> NUMBER
1026
*
atom -> NUMBER
1026
>>
atom -> NUMBER
1026
<
atom -> NUMBER
1026
is
atom -> NUMBER
1026
(
atom -> NUMBER
1026
and
atom -> NUMBER
1026
not
atom -> NUMBER
1026
!=
atom -> NUMBER
1026
|
atom -> NUMBER
1026
in
atom -> NUMBER
1026
>
atom -> NUMBER
1026
>=
atom -> NUMBER
1026
//
atom -> NUMBER
1026
,
atom -> NUMBER
1026
[
atom -> NUMBER
1027
or
atom -> NAME
1027
)
atom -> NAME
1027
in
atom -> NAME
1027
^
atom -> NAME
1027
[
atom -> NAME
1027
==
atom -> NAME
1027
<<
atom -> NAME
1027
**
atom -> NAME
1027
,
atom -> NAME
1027
!=
atom -> NAME
1027
%
atom -> NAME
1027
@
atom -> NAME
1027
not
atom -> NAME
1027
>
atom -> NAME
1027
>=
atom -> NAME
1027
*
atom -> NAME
1027
&
atom -> NAME
1027
<
atom -> NAME
1027
-
atom -> NAME
1027
(
atom -> NAME
1027
>>
atom -> NAME
1027
+
atom -> NAME
1027
//
atom -> NAME
1027
and
atom -> NAME
1027
<=
atom -> NAME
1027
is
atom -> NAME
1027
if
atom -> NAME
1027
/
atom -> NAME
1027
.
atom -> NAME
1027
|
atom -> NAME
1028
atom_expr
1020
1028
and_expr
1021
1028
term
1022
1028
factor
1023
1028
shift_expr
1024
1028
arith_expr
1025
1028
NUMBER
1026
1028
NAME
1027
1028
not
1028
1028
[
1029
1028
{
1030
1028
expr
1031
1028
False
1033
1028
xor_expr
1034
1028
STRING
1035
1028
atom
1037
1028
+
1038
1028
True
1039
1028
-
1040
1028
(
1041
1028
None
1042
1028
power
1043
1028
~
1045
1028
not_test
1532
1028
comparison
1048
1029
and_test
110
1029
atom_expr
111
1029
and_expr
112
1029
term
113
1029
factor
114
1029
shift_expr
115
1029
arith_expr
116
1029
NUMBER
117
1029
NAME
118
1029
[
119
1029
test_list_comp
1533
1029
{
121
1029
expr
122
1029
not_test
123
1029
False
124
1029
xor_expr
125
1029
atom
126
1029
STRING
127
1029
+
128
1029
(
129
1029
True
131
1029
-
132
1029
]
1534
1029
None
133
1029
comparison
134
1029
or_test
135
1029
test
136
1029
power
137
1029
~
138
1029
lambda
139
1029
lambdef
140
1029
not
141
1029
test_list
142
1030
}
1535
1031
in
147
1031
<
148
1031
>=
149
1031
not
150
1031
comp_op
1536
1031
!=
151
1031
>
152
1031
==
153
1031
is
154
1031
<=
155
1031
)
comparison -> expr
1031
or
comparison -> expr
1031
,
comparison -> expr
1031
and
comparison -> expr
1031
if
comparison -> expr
1032
and
1537
1032
,
and_test -> not_test
1032
or
and_test -> not_test
1032
)
and_test -> not_test
1032
if
and_test -> not_test
1033
*
atom -> False
1033
@
atom -> False
1033
<
atom -> False
1033
or
atom -> False
1033
is
atom -> False
1033
>>
atom -> False
1033
[
atom -> False
1033
/
atom -> False
1033
)
atom -> False
1033
%
atom -> False
1033
.
atom -> False
1033
(
atom -> False
1033
in
atom -> False
1033
**
atom -> False
1033
==
atom -> False
1033
//
atom -> False
1033
+
atom -> False
1033
,
atom -> False
1033
<<
atom -> False
1033
!=
atom -> False
1033
<=
atom -> False
1033
>
atom -> False
1033
^
atom -> False
1033
if
atom -> False
1033
&
atom -> False
1033
and
atom -> False
1033
|
atom -> False
1033
-
atom -> False
1033
not
atom -> False
1033
>=
atom -> False
1034
not
expr -> xor_expr
1034
|
1538
1034
==
expr -> xor_expr
1034
in
expr -> xor_expr
1034
if
expr -> xor_expr
1034
>
expr -> xor_expr
1034
or
expr -> xor_expr
1034
<=
expr -> xor_expr
1034
<
expr -> xor_expr
1034
is
expr -> xor_expr
1034
)
expr -> xor_expr
1034
>=
expr -> xor_expr
1034
!=
expr -> xor_expr
1034
,
expr -> xor_expr
1034
and
expr -> xor_expr
1035
&
atom -> STRING
1035
**
atom -> STRING
1035
%
atom -> STRING
1035
@
atom -> STRING
1035
/
atom -> STRING
1035
*
atom -> STRING
1035
^
atom -> STRING
1035
>=
atom -> STRING
1035
if
atom -> STRING
1035
<
atom -> STRING
1035
>>
atom -> STRING
1035
.
atom -> STRING
1035
//
atom -> STRING
1035
,
atom -> STRING
1035
+
atom -> STRING
1035
<<
atom -> STRING
1035
and
atom -> STRING
1035
[
atom -> STRING
1035
or
atom -> STRING
1035
in
atom -> STRING
1035
not
atom -> STRING
1035
>
atom -> STRING
1035
(
atom -> STRING
1035
!=
atom -> STRING
1035
is
atom -> STRING
1035
==
atom -> STRING
1035
-
atom -> STRING
1035
|
atom -> STRING
1035
<=
atom -> STRING
1035
)
atom -> STRING
1036
vfpdef
212
1036
:
1539
1036
NAME
211
1036
varargslist
1540
1037
[
1541
1037
(
1542
1037
.
1543
1037
trailer
1544
1037
<<
trailer_expr -> 
1037
trailer_expr
1545
1037
@
trailer_expr -> 
1037
!=
trailer_expr -> 
1037
-
trailer_expr -> 
1037
^
trailer_expr -> 
1037
<
trailer_expr -> 
1037
/
trailer_expr -> 
1037
is
trailer_expr -> 
1037
==
trailer_expr -> 
1037
&
trailer_expr -> 
1037
>=
trailer_expr -> 
1037
or
trailer_expr -> 
1037
in
trailer_expr -> 
1037
*
trailer_expr -> 
1037
not
trailer_expr -> 
1037
)
trailer_expr -> 
1037
**
trailer_expr -> 
1037
<=
trailer_expr -> 
1037
+
trailer_expr -> 
1037
//
trailer_expr -> 
1037
%
trailer_expr -> 
1037
>
trailer_expr -> 
1037
,
trailer_expr -> 
1037
|
trailer_expr -> 
1037
if
trailer_expr -> 
1037
>>
trailer_expr -> 
1037
and
trailer_expr -> 
1038
atom_expr
1020
1038
NUMBER
1026
1038
NAME
1027
1038
[
1029
1038
{
1030
1038
False
1033
1038
STRING
1035
1038
atom
1037
1038
+
1038
1038
True
1039
1038
-
1040
1038
(
1041
1038
None
1042
1038
power
1043
1038
factor
1546
1038
~
1045
1039
!=
atom -> True
1039
is
atom -> True
1039
//
atom -> True
1039
|
atom -> True
1039
<=
atom -> True
1039
^
atom -> True
1039
%
atom -> True
1039
@
atom -> True
1039
**
atom -> True
1039
(
atom -> True
1039
not
atom -> True
1039
>>
atom -> True
1039
<
atom -> True
1039
==
atom -> True
1039
and
atom -> True
1039
in
atom -> True
1039
&
atom -> True
1039
.
atom -> True
1039
<<
atom -> True
1039
/
atom -> True
1039
)
atom -> True
1039
*
atom -> True
1039
>
atom -> True
1039
,
atom -> True
1039
+
atom -> True
1039
>=
atom -> True
1039
or
atom -> True
1039
-
atom -> True
1039
[
atom -> True
1039
if
atom -> True
1040
atom_expr
1020
1040
NUMBER
1026
1040
NAME
1027
1040
[
1029
1040
factor
1547
1040
{
1030
1040
False
1033
1040
STRING
1035
1040
atom
1037
1040
+
1038
1040
True
1039
1040
-
1040
1040
(
1041
1040
None
1042
1040
power
1043
1040
~
1045
1041
and_test
217
1041
atom_expr
218
1041
and_expr
219
1041
term
220
1041
factor
221
1041
shift_expr
222
1041
arith_expr
223
1041
NUMBER
224
1041
NAME
225
1041
not
226
1041
[
227
1041
{
228
1041
expr
229
1041
test_list_comp
1548
1041
not_test
231
1041
False
232
1041
xor_expr
234
1041
STRING
235
1041
lambda
236
1041
atom
237
1041
+
238
1041
True
239
1041
-
240
1041
(
241
1041
None
242
1041
comparison
243
1041
power
244
1041
)
1549
1041
~
245
1041
or_test
246
1041
test
247
1041
lambdef
248
1041
test_list
249
1042
!=
atom -> None
1042
//
atom -> None
1042
^
atom -> None
1042
>=
atom -> None
1042
&
atom -> None
1042
**
atom -> None
1042
,
atom -> None
1042
<
atom -> None
1042
if
atom -> None
1042
*
atom -> None
1042
>
atom -> None
1042
@
atom -> None
1042
|
atom -> None
1042
-
atom -> None
1042
%
atom -> None
1042
)
atom -> None
1042
not
atom -> None
1042
==
atom -> None
1042
in
atom -> None
1042
/
atom -> None
1042
or
atom -> None
1042
and
atom -> None
1042
+
atom -> None
1042
(
atom -> None
1042
>>
atom -> None
1042
is
atom -> None
1042
[
atom -> None
1042
<=
atom -> None
1042
<<
atom -> None
1042
.
atom -> None
1043
*
factor -> power
1043
>>
factor -> power
1043
>=
factor -> power
1043
<
factor -> power
1043
&
factor -> power
1043
,
factor -> power
1043
@
factor -> power
1043
|
factor -> power
1043
!=
factor -> power
1043
<=
factor -> power
1043
//
factor -> power
1043
in
factor -> power
1043
and
factor -> power
1043
+
factor -> power
1043
>
factor -> power
1043
-
factor -> power
1043
not
factor -> power
1043
is
factor -> power
1043
==
factor -> power
1043
%
factor -> power
1043
if
factor -> power
1043
or
factor -> power
1043
^
factor -> power
1043
)
factor -> power
1043
<<
factor -> power
1043
/
factor -> power
1044
or
1550
1044
)
or_test -> and_test
1044
,
or_test -> and_test
1044
if
or_test -> and_test
1045
atom_expr
1020
1045
NUMBER
1026
1045
NAME
1027
1045
[
1029
1045
factor
1551
1045
{
1030
1045
False
1033
1045
STRING
1035
1045
atom
1037
1045
+
1038
1045
True
1039
1045
-
1040
1045
(
1041
1045
None
1042
1045
power
1043
1045
~
1045
1046
,
argument -> * test
1046
)
argument -> * test
1047
if
1552
1047
,
test -> or_test
1047
)
test -> or_test
1048
or
not_test -> comparison
1048
if
not_test -> comparison
1048
,
not_test -> comparison
1048
and
not_test -> comparison
1048
)
not_test -> comparison
1049
,
test -> lambdef
1049
)
test -> lambdef
1050
,
argument -> ** test
1050
)
argument -> ** test
1051
and_test
505
1051
atom_expr
506
1051
and_expr
507
1051
term
508
1051
factor
509
1051
shift_expr
510
1051
arith_expr
511
1051
NUMBER
512
1051
NAME
513
1051
not
514
1051
[
515
1051
{
516
1051
expr
517
1051
not_test
519
1051
False
520
1051
xor_expr
521
1051
STRING
522
1051
lambda
523
1051
atom
525
1051
+
526
1051
True
527
1051
-
528
1051
or_test
529
1051
(
530
1051
None
531
1051
comparison
532
1051
power
533
1051
test
534
1051
~
535
1051
*
536
1051
lambdef
537
1051
**
538
1051
argument
539
1051
arglist
1553
1052
NEWLINE
1554
1053
INDENT
1555
1054
continue
suite -> simple_stmt
1054
not
suite -> simple_stmt
1054
yield
suite -> simple_stmt
1054
for
suite -> simple_stmt
1054
False
suite -> simple_stmt
1054
NUMBER
suite -> simple_stmt
1054
with
suite -> simple_stmt
1054
lambda
suite -> simple_stmt
1054
{
suite -> simple_stmt
1054
None
suite -> simple_stmt
1054
(
suite -> simple_stmt
1054
while
suite -> simple_stmt
1054
if
suite -> simple_stmt
1054
try
suite -> simple_stmt
1054
NAME
suite -> simple_stmt
1054
else
suite -> simple_stmt
1054
True
suite -> simple_stmt
1054
elif
suite -> simple_stmt
1054
global
suite -> simple_stmt
1054
STRING
suite -> simple_stmt
1054
pass
suite -> simple_stmt
1054
$
suite -> simple_stmt
1054
[
suite -> simple_stmt
1054
assert
suite -> simple_stmt
1054
NEWLINE
suite -> simple_stmt
1054
raise
suite -> simple_stmt
1054
-
suite -> simple_stmt
1054
class
suite -> simple_stmt
1054
del
suite -> simple_stmt
1054
@
suite -> simple_stmt
1054
~
suite -> simple_stmt
1054
+
suite -> simple_stmt
1054
return
suite -> simple_stmt
1054
break
suite -> simple_stmt
1054
nonlocal
suite -> simple_stmt
1054
def
suite -> simple_stmt
1055
elif
1556
1055
nonlocal
elif_clause -> 
1055
else
elif_clause -> 
1055
elif_clause
1557
1055
[
elif_clause -> 
1055
break
elif_clause -> 
1055
None
elif_clause -> 
1055
raise
elif_clause -> 
1055
~
elif_clause -> 
1055
while
elif_clause -> 
1055
NUMBER
elif_clause -> 
1055
assert
elif_clause -> 
1055
class
elif_clause -> 
1055
@
elif_clause -> 
1055
global
elif_clause -> 
1055
True
elif_clause -> 
1055
for
elif_clause -> 
1055
def
elif_clause -> 
1055
NEWLINE
elif_clause -> 
1055
if
elif_clause -> 
1055
not
elif_clause -> 
1055
continue
elif_clause -> 
1055
-
elif_clause -> 
1055
pass
elif_clause -> 
1055
{
elif_clause -> 
1055
with
elif_clause -> 
1055
lambda
elif_clause -> 
1055
try
elif_clause -> 
1055
return
elif_clause -> 
1055
(
elif_clause -> 
1055
+
elif_clause -> 
1055
del
elif_clause -> 
1055
$
elif_clause -> 
1055
NAME
elif_clause -> 
1055
STRING
elif_clause -> 
1055
yield
elif_clause -> 
1055
False
elif_clause -> 
1056
else
1558
1056
assert
try_stmt -> try : suite except_clause
1056
global
try_stmt -> try : suite except_clause
1056
finally
1559
1056
yield
try_stmt -> try : suite except_clause
1056
return
try_stmt -> try : suite except_clause
1056
while
try_stmt -> try : suite except_clause
1056
def
try_stmt -> try : suite except_clause
1056
lambda
try_stmt -> try : suite except_clause
1056
{
try_stmt -> try : suite except_clause
1056
raise
try_stmt -> try : suite except_clause
1056
nonlocal
try_stmt -> try : suite except_clause
1056
for
try_stmt -> try : suite except_clause
1056
NEWLINE
try_stmt -> try : suite except_clause
1056
try
try_stmt -> try : suite except_clause
1056
False
try_stmt -> try : suite except_clause
1056
-
try_stmt -> try : suite except_clause
1056
[
try_stmt -> try : suite except_clause
1056
~
try_stmt -> try : suite except_clause
1056
not
try_stmt -> try : suite except_clause
1056
continue
try_stmt -> try : suite except_clause
1056
del
try_stmt -> try : suite except_clause
1056
(
try_stmt -> try : suite except_clause
1056
NUMBER
try_stmt -> try : suite except_clause
1056
STRING
try_stmt -> try : suite except_clause
1056
with
try_stmt -> try : suite except_clause
1056
class
try_stmt -> try : suite except_clause
1056
None
try_stmt -> try : suite except_clause
1056
$
try_stmt -> try : suite except_clause
1056
NAME
try_stmt -> try : suite except_clause
1056
if
try_stmt -> try : suite except_clause
1056
break
try_stmt -> try : suite except_clause
1056
@
try_stmt -> try : suite except_clause
1056
+
try_stmt -> try : suite except_clause
1056
pass
try_stmt -> try : suite except_clause
1056
True
try_stmt -> try : suite except_clause
1057
atom_expr
1560
1057
and_expr
1561
1057
term
1562
1057
factor
1563
1057
shift_expr
1564
1057
arith_expr
1565
1057
NUMBER
1566
1057
or_test
1567
1057
NAME
1568
1057
[
1569
1057
{
1570
1057
expr
1571
1057
False
1572
1057
xor_expr
1573
1057
STRING
1574
1057
test
1575
1057
+
1576
1057
True
1577
1057
(
1578
1057
None
1579
1057
-
1580
1057
:
1581
1057
atom
1582
1057
power
1583
1057
~
1584
1057
lambda
1585
1057
not_test
1586
1057
and_test
1587
1057
not
1588
1057
comparison
1589
1057
lambdef
1590
1058
while
1591
1058
decorators
1592
1058
[
3
1058
small_stmt
1593
1058
{
5
1058
atom_expr
6
1058
expr
7
1058
NUMBER
8
1058
True
9
1058
factor
10
1058
class
1594
1058
shift_expr
12
1058
atom
13
1058
xor_expr
14
1058
term
15
1058
if
1595
1058
try
1596
1058
with
1597
1058
decorated
1598
1058
and_test
20
1058
and_expr
21
1058
for_stmt
1599
1058
False
23
1058
def
1600
1058
or_test
25
1058
with_stmt
1601
1058
funcdef
1602
1058
lambda
28
1058
try_stmt
1603
1058
None
29
1058
+
30
1058
if_stmt
1604
1058
arith_expr
32
1058
test
33
1058
(
34
1058
compound_stmt
1605
1058
-
36
1058
NAME
37
1058
while_stmt
1606
1058
not_test
40
1058
lambdef
41
1058
for
1607
1058
STRING
43
1058
~
44
1058
simple_stmt
1608
1058
classdef
1609
1058
power
47
1058
comparison
48
1058
continue
49
1058
expr_stmt
50
1058
not
51
1058
del_stmt
52
1058
yield_stmt
53
1058
@
54
1058
decorator
55
1058
yield
56
1058
assert_stmt
57
1058
break_stmt
58
1058
return
59
1058
pass
60
1058
continue_stmt
61
1058
test_list
62
1058
break
63
1058
del
64
1058
pass_stmt
65
1058
nonlocal
66
1058
assert
67
1058
global_stmt
68
1058
raise
69
1058
stmt_list
1610
1058
stmt
1611
1058
raise_stmt
70
1058
global
71
1058
nonlocal_stmt
72
1058
return_stmt
75
1058
flow_stmt
76
1059
except
simple_stmt -> small_stmt NEWLINE
1060
*
power -> atom_expr ** factor
1060
:
power -> atom_expr ** factor
1060
in
power -> atom_expr ** factor
1060
<
power -> atom_expr ** factor
1060
if
power -> atom_expr ** factor
1060
-
power -> atom_expr ** factor
1060
>>
power -> atom_expr ** factor
1060
<=
power -> atom_expr ** factor
1060
and
power -> atom_expr ** factor
1060
==
power -> atom_expr ** factor
1060
%
power -> atom_expr ** factor
1060
/
power -> atom_expr ** factor
1060
as
power -> atom_expr ** factor
1060
^
power -> atom_expr ** factor
1060
<<
power -> atom_expr ** factor
1060
,
power -> atom_expr ** factor
1060
>
power -> atom_expr ** factor
1060
//
power -> atom_expr ** factor
1060
is
power -> atom_expr ** factor
1060
@
power -> atom_expr ** factor
1060
+
power -> atom_expr ** factor
1060
|
power -> atom_expr ** factor
1060
!=
power -> atom_expr ** factor
1060
>=
power -> atom_expr ** factor
1060
or
power -> atom_expr ** factor
1060
&
power -> atom_expr ** factor
1060
not
power -> atom_expr ** factor
1061
as
xor_expr -> and_expr ^ xor_expr
1061
and
xor_expr -> and_expr ^ xor_expr
1061
<
xor_expr -> and_expr ^ xor_expr
1061
>
xor_expr -> and_expr ^ xor_expr
1061
in
xor_expr -> and_expr ^ xor_expr
1061
|
xor_expr -> and_expr ^ xor_expr
1061
<=
xor_expr -> and_expr ^ xor_expr
1061
!=
xor_expr -> and_expr ^ xor_expr
1061
not
xor_expr -> and_expr ^ xor_expr
1061
:
xor_expr -> and_expr ^ xor_expr
1061
or
xor_expr -> and_expr ^ xor_expr
1061
if
xor_expr -> and_expr ^ xor_expr
1061
is
xor_expr -> and_expr ^ xor_expr
1061
==
xor_expr -> and_expr ^ xor_expr
1061
,
xor_expr -> and_expr ^ xor_expr
1061
>=
xor_expr -> and_expr ^ xor_expr
1062
<=
arith_expr -> term + arith_expr
1062
&
arith_expr -> term + arith_expr
1062
>
arith_expr -> term + arith_expr
1062
,
arith_expr -> term + arith_expr
1062
>=
arith_expr -> term + arith_expr
1062
not
arith_expr -> term + arith_expr
1062
|
arith_expr -> term + arith_expr
1062
in
arith_expr -> term + arith_expr
1062
:
arith_expr -> term + arith_expr
1062
if
arith_expr -> term + arith_expr
1062
>>
arith_expr -> term + arith_expr
1062
as
arith_expr -> term + arith_expr
1062
is
arith_expr -> term + arith_expr
1062
^
arith_expr -> term + arith_expr
1062
<<
arith_expr -> term + arith_expr
1062
<
arith_expr -> term + arith_expr
1062
==
arith_expr -> term + arith_expr
1062
!=
arith_expr -> term + arith_expr
1062
or
arith_expr -> term + arith_expr
1062
and
arith_expr -> term + arith_expr
1063
<=
arith_expr -> term - arith_expr
1063
if
arith_expr -> term - arith_expr
1063
not
arith_expr -> term - arith_expr
1063
as
arith_expr -> term - arith_expr
1063
|
arith_expr -> term - arith_expr
1063
,
arith_expr -> term - arith_expr
1063
>>
arith_expr -> term - arith_expr
1063
:
arith_expr -> term - arith_expr
1063
>=
arith_expr -> term - arith_expr
1063
<<
arith_expr -> term - arith_expr
1063
is
arith_expr -> term - arith_expr
1063
!=
arith_expr -> term - arith_expr
1063
in
arith_expr -> term - arith_expr
1063
<
arith_expr -> term - arith_expr
1063
or
arith_expr -> term - arith_expr
1063
==
arith_expr -> term - arith_expr
1063
and
arith_expr -> term - arith_expr
1063
&
arith_expr -> term - arith_expr
1063
^
arith_expr -> term - arith_expr
1063
>
arith_expr -> term - arith_expr
1064
|
term -> factor * term
1064
-
term -> factor * term
1064
in
term -> factor * term
1064
and
term -> factor * term
1064
<<
term -> factor * term
1064
>=
term -> factor * term
1064
if
term -> factor * term
1064
or
term -> factor * term
1064
<=
term -> factor * term
1064
is
term -> factor * term
1064
:
term -> factor * term
1064
^
term -> factor * term
1064
!=
term -> factor * term
1064
as
term -> factor * term
1064
==
term -> factor * term
1064
,
term -> factor * term
1064
&
term -> factor * term
1064
>
term -> factor * term
1064
not
term -> factor * term
1064
<
term -> factor * term
1064
+
term -> factor * term
1064
>>
term -> factor * term
1065
!=
term -> factor % term
1065
>>
term -> factor % term
1065
==
term -> factor % term
1065
>=
term -> factor % term
1065
,
term -> factor % term
1065
^
term -> factor % term
1065
not
term -> factor % term
1065
or
term -> factor % term
1065
if
term -> factor % term
1065
<=
term -> factor % term
1065
:
term -> factor % term
1065
<
term -> factor % term
1065
is
term -> factor % term
1065
-
term -> factor % term
1065
as
term -> factor % term
1065
in
term -> factor % term
1065
>
term -> factor % term
1065
<<
term -> factor % term
1065
and
term -> factor % term
1065
|
term -> factor % term
1065
+
term -> factor % term
1065
&
term -> factor % term
1066
is
term -> factor // term
1066
if
term -> factor // term
1066
>
term -> factor // term
1066
==
term -> factor // term
1066
+
term -> factor // term
1066
^
term -> factor // term
1066
-
term -> factor // term
1066
,
term -> factor // term
1066
in
term -> factor // term
1066
>>
term -> factor // term
1066
|
term -> factor // term
1066
<<
term -> factor // term
1066
!=
term -> factor // term
1066
&
term -> factor // term
1066
not
term -> factor // term
1066
<=
term -> factor // term
1066
<
term -> factor // term
1066
:
term -> factor // term
1066
and
term -> factor // term
1066
>=
term -> factor // term
1066
or
term -> factor // term
1066
as
term -> factor // term
1067
>=
term -> factor / term
1067
!=
term -> factor / term
1067
as
term -> factor / term
1067
not
term -> factor / term
1067
^
term -> factor / term
1067
in
term -> factor / term
1067
and
term -> factor / term
1067
<<
term -> factor / term
1067
,
term -> factor / term
1067
+
term -> factor / term
1067
>
term -> factor / term
1067
|
term -> factor / term
1067
or
term -> factor / term
1067
if
term -> factor / term
1067
>>
term -> factor / term
1067
<
term -> factor / term
1067
&
term -> factor / term
1067
-
term -> factor / term
1067
is
term -> factor / term
1067
==
term -> factor / term
1067
<=
term -> factor / term
1067
:
term -> factor / term
1068
-
term -> factor @ term
1068
&
term -> factor @ term
1068
as
term -> factor @ term
1068
^
term -> factor @ term
1068
:
term -> factor @ term
1068
<
term -> factor @ term
1068
!=
term -> factor @ term
1068
<<
term -> factor @ term
1068
is
term -> factor @ term
1068
<=
term -> factor @ term
1068
and
term -> factor @ term
1068
+
term -> factor @ term
1068
,
term -> factor @ term
1068
>
term -> factor @ term
1068
if
term -> factor @ term
1068
not
term -> factor @ term
1068
>>
term -> factor @ term
1068
>=
term -> factor @ term
1068
|
term -> factor @ term
1068
in
term -> factor @ term
1068
==
term -> factor @ term
1068
or
term -> factor @ term
1069
if
and_expr -> shift_expr & and_expr
1069
!=
and_expr -> shift_expr & and_expr
1069
<=
and_expr -> shift_expr & and_expr
1069
not
and_expr -> shift_expr & and_expr
1069
,
and_expr -> shift_expr & and_expr
1069
^
and_expr -> shift_expr & and_expr
1069
|
and_expr -> shift_expr & and_expr
1069
or
and_expr -> shift_expr & and_expr
1069
in
and_expr -> shift_expr & and_expr
1069
>
and_expr -> shift_expr & and_expr
1069
and
and_expr -> shift_expr & and_expr
1069
==
and_expr -> shift_expr & and_expr
1069
as
and_expr -> shift_expr & and_expr
1069
:
and_expr -> shift_expr & and_expr
1069
<
and_expr -> shift_expr & and_expr
1069
is
and_expr -> shift_expr & and_expr
1069
>=
and_expr -> shift_expr & and_expr
1070
,
shift_expr -> arith_expr << shift_expr
1070
^
shift_expr -> arith_expr << shift_expr
1070
|
shift_expr -> arith_expr << shift_expr
1070
&
shift_expr -> arith_expr << shift_expr
1070
:
shift_expr -> arith_expr << shift_expr
1070
and
shift_expr -> arith_expr << shift_expr
1070
is
shift_expr -> arith_expr << shift_expr
1070
as
shift_expr -> arith_expr << shift_expr
1070
in
shift_expr -> arith_expr << shift_expr
1070
<=
shift_expr -> arith_expr << shift_expr
1070
<
shift_expr -> arith_expr << shift_expr
1070
not
shift_expr -> arith_expr << shift_expr
1070
==
shift_expr -> arith_expr << shift_expr
1070
>=
shift_expr -> arith_expr << shift_expr
1070
if
shift_expr -> arith_expr << shift_expr
1070
>
shift_expr -> arith_expr << shift_expr
1070
or
shift_expr -> arith_expr << shift_expr
1070
!=
shift_expr -> arith_expr << shift_expr
1071
or
shift_expr -> arith_expr >> shift_expr
1071
and
shift_expr -> arith_expr >> shift_expr
1071
as
shift_expr -> arith_expr >> shift_expr
1071
>=
shift_expr -> arith_expr >> shift_expr
1071
not
shift_expr -> arith_expr >> shift_expr
1071
^
shift_expr -> arith_expr >> shift_expr
1071
:
shift_expr -> arith_expr >> shift_expr
1071
is
shift_expr -> arith_expr >> shift_expr
1071
in
shift_expr -> arith_expr >> shift_expr
1071
if
shift_expr -> arith_expr >> shift_expr
1071
<=
shift_expr -> arith_expr >> shift_expr
1071
==
shift_expr -> arith_expr >> shift_expr
1071
,
shift_expr -> arith_expr >> shift_expr
1071
<
shift_expr -> arith_expr >> shift_expr
1071
!=
shift_expr -> arith_expr >> shift_expr
1071
|
shift_expr -> arith_expr >> shift_expr
1071
>
shift_expr -> arith_expr >> shift_expr
1071
&
shift_expr -> arith_expr >> shift_expr
1072
else
1612
1073
and
atom -> [ test_list_comp ]
1073
<=
atom -> [ test_list_comp ]
1073
**
atom -> [ test_list_comp ]
1073
^
atom -> [ test_list_comp ]
1073
[
atom -> [ test_list_comp ]
1073
,
atom -> [ test_list_comp ]
1073
!=
atom -> [ test_list_comp ]
1073
<
atom -> [ test_list_comp ]
1073
/
atom -> [ test_list_comp ]
1073
-
atom -> [ test_list_comp ]
1073
>=
atom -> [ test_list_comp ]
1073
if
atom -> [ test_list_comp ]
1073
as
atom -> [ test_list_comp ]
1073
%
atom -> [ test_list_comp ]
1073
is
atom -> [ test_list_comp ]
1073
+
atom -> [ test_list_comp ]
1073
&
atom -> [ test_list_comp ]
1073
@
atom -> [ test_list_comp ]
1073
or
atom -> [ test_list_comp ]
1073
in
atom -> [ test_list_comp ]
1073
==
atom -> [ test_list_comp ]
1073
not
atom -> [ test_list_comp ]
1073
.
atom -> [ test_list_comp ]
1073
|
atom -> [ test_list_comp ]
1073
>
atom -> [ test_list_comp ]
1073
<<
atom -> [ test_list_comp ]
1073
//
atom -> [ test_list_comp ]
1073
(
atom -> [ test_list_comp ]
1073
*
atom -> [ test_list_comp ]
1073
:
atom -> [ test_list_comp ]
1073
>>
atom -> [ test_list_comp ]
1074
if
comparison -> expr comp_op comparison
1074
or
comparison -> expr comp_op comparison
1074
and
comparison -> expr comp_op comparison
1074
,
comparison -> expr comp_op comparison
1074
:
comparison -> expr comp_op comparison
1074
as
comparison -> expr comp_op comparison
1075
,
and_test -> not_test and and_test
1075
:
and_test -> not_test and and_test
1075
or
and_test -> not_test and and_test
1075
if
and_test -> not_test and and_test
1075
as
and_test -> not_test and and_test
1076
>
expr -> xor_expr | expr
1076
is
expr -> xor_expr | expr
1076
<
expr -> xor_expr | expr
1076
if
expr -> xor_expr | expr
1076
as
expr -> xor_expr | expr
1076
>=
expr -> xor_expr | expr
1076
or
expr -> xor_expr | expr
1076
and
expr -> xor_expr | expr
1076
in
expr -> xor_expr | expr
1076
!=
expr -> xor_expr | expr
1076
:
expr -> xor_expr | expr
1076
<=
expr -> xor_expr | expr
1076
==
expr -> xor_expr | expr
1076
,
expr -> xor_expr | expr
1076
not
expr -> xor_expr | expr
1077
]
1613
1078
<
trailer -> ( )
1078
.
trailer -> ( )
1078
*
trailer -> ( )
1078
or
trailer -> ( )
1078
is
trailer -> ( )
1078
:
trailer -> ( )
1078
/
trailer -> ( )
1078
+
trailer -> ( )
1078
@
trailer -> ( )
1078
>
trailer -> ( )
1078
//
trailer -> ( )
1078
|
trailer -> ( )
1078
!=
trailer -> ( )
1078
&
trailer -> ( )
1078
^
trailer -> ( )
1078
<=
trailer -> ( )
1078
%
trailer -> ( )
1078
>>
trailer -> ( )
1078
**
trailer -> ( )
1078
and
trailer -> ( )
1078
(
trailer -> ( )
1078
,
trailer -> ( )
1078
==
trailer -> ( )
1078
if
trailer -> ( )
1078
[
trailer -> ( )
1078
<<
trailer -> ( )
1078
in
trailer -> ( )
1078
-
trailer -> ( )
1078
as
trailer -> ( )
1078
not
trailer -> ( )
1078
>=
trailer -> ( )
1079
)
1614
1080
|
trailer -> . NAME
1080
@
trailer -> . NAME
1080
^
trailer -> . NAME
1080
>
trailer -> . NAME
1080
+
trailer -> . NAME
1080
.
trailer -> . NAME
1080
:
trailer -> . NAME
1080
!=
trailer -> . NAME
1080
<<
trailer -> . NAME
1080
as
trailer -> . NAME
1080
<=
trailer -> . NAME
1080
[
trailer -> . NAME
1080
*
trailer -> . NAME
1080
(
trailer -> . NAME
1080
//
trailer -> . NAME
1080
**
trailer -> . NAME
1080
-
trailer -> . NAME
1080
in
trailer -> . NAME
1080
>=
trailer -> . NAME
1080
,
trailer -> . NAME
1080
==
trailer -> . NAME
1080
or
trailer -> . NAME
1080
and
trailer -> . NAME
1080
%
trailer -> . NAME
1080
is
trailer -> . NAME
1080
<
trailer -> . NAME
1080
not
trailer -> . NAME
1080
/
trailer -> . NAME
1080
if
trailer -> . NAME
1080
&
trailer -> . NAME
1080
>>
trailer -> . NAME
1081
&
trailer_expr -> trailer trailer_expr
1081
not
trailer_expr -> trailer trailer_expr
1081
and
trailer_expr -> trailer trailer_expr
1081
+
trailer_expr -> trailer trailer_expr
1081
==
trailer_expr -> trailer trailer_expr
1081
**
trailer_expr -> trailer trailer_expr
1081
/
trailer_expr -> trailer trailer_expr
1081
^
trailer_expr -> trailer trailer_expr
1081
,
trailer_expr -> trailer trailer_expr
1081
>
trailer_expr -> trailer trailer_expr
1081
*
trailer_expr -> trailer trailer_expr
1081
//
trailer_expr -> trailer trailer_expr
1081
>>
trailer_expr -> trailer trailer_expr
1081
<<
trailer_expr -> trailer trailer_expr
1081
>=
trailer_expr -> trailer trailer_expr
1081
:
trailer_expr -> trailer trailer_expr
1081
<=
trailer_expr -> trailer trailer_expr
1081
-
trailer_expr -> trailer trailer_expr
1081
is
trailer_expr -> trailer trailer_expr
1081
in
trailer_expr -> trailer trailer_expr
1081
as
trailer_expr -> trailer trailer_expr
1081
<
trailer_expr -> trailer trailer_expr
1081
|
trailer_expr -> trailer trailer_expr
1081
if
trailer_expr -> trailer trailer_expr
1081
%
trailer_expr -> trailer trailer_expr
1081
@
trailer_expr -> trailer trailer_expr
1081
!=
trailer_expr -> trailer trailer_expr
1081
or
trailer_expr -> trailer trailer_expr
1082
if
atom -> ( test_list_comp )
1082
or
atom -> ( test_list_comp )
1082
*
atom -> ( test_list_comp )
1082
|
atom -> ( test_list_comp )
1082
>>
atom -> ( test_list_comp )
1082
%
atom -> ( test_list_comp )
1082
not
atom -> ( test_list_comp )
1082
//
atom -> ( test_list_comp )
1082
+
atom -> ( test_list_comp )
1082
and
atom -> ( test_list_comp )
1082
>
atom -> ( test_list_comp )
1082
[
atom -> ( test_list_comp )
1082
^
atom -> ( test_list_comp )
1082
:
atom -> ( test_list_comp )
1082
!=
atom -> ( test_list_comp )
1082
<<
atom -> ( test_list_comp )
1082
**
atom -> ( test_list_comp )
1082
is
atom -> ( test_list_comp )
1082
<=
atom -> ( test_list_comp )
1082
-
atom -> ( test_list_comp )
1082
&
atom -> ( test_list_comp )
1082
(
atom -> ( test_list_comp )
1082
,
atom -> ( test_list_comp )
1082
in
atom -> ( test_list_comp )
1082
@
atom -> ( test_list_comp )
1082
.
atom -> ( test_list_comp )
1082
<
atom -> ( test_list_comp )
1082
as
atom -> ( test_list_comp )
1082
/
atom -> ( test_list_comp )
1082
==
atom -> ( test_list_comp )
1082
>=
atom -> ( test_list_comp )
1083
:
with_items -> with_item , with_items
1084
with
with_stmt -> with with_items : suite
1084
lambda
with_stmt -> with with_items : suite
1084
assert
with_stmt -> with with_items : suite
1084
continue
with_stmt -> with with_items : suite
1084
None
with_stmt -> with with_items : suite
1084
-
with_stmt -> with with_items : suite
1084
break
with_stmt -> with with_items : suite
1084
nonlocal
with_stmt -> with with_items : suite
1084
NAME
with_stmt -> with with_items : suite
1084
for
with_stmt -> with with_items : suite
1084
NUMBER
with_stmt -> with with_items : suite
1084
(
with_stmt -> with with_items : suite
1084
STRING
with_stmt -> with with_items : suite
1084
while
with_stmt -> with with_items : suite
1084
False
with_stmt -> with with_items : suite
1084
try
with_stmt -> with with_items : suite
1084
del
with_stmt -> with with_items : suite
1084
yield
with_stmt -> with with_items : suite
1084
{
with_stmt -> with with_items : suite
1084
$
with_stmt -> with with_items : suite
1084
NEWLINE
with_stmt -> with with_items : suite
1084
class
with_stmt -> with with_items : suite
1084
+
with_stmt -> with with_items : suite
1084
@
with_stmt -> with with_items : suite
1084
~
with_stmt -> with with_items : suite
1084
def
with_stmt -> with with_items : suite
1084
global
with_stmt -> with with_items : suite
1084
not
with_stmt -> with with_items : suite
1084
True
with_stmt -> with with_items : suite
1084
return
with_stmt -> with with_items : suite
1084
pass
with_stmt -> with with_items : suite
1084
if
with_stmt -> with with_items : suite
1084
raise
with_stmt -> with with_items : suite
1084
[
with_stmt -> with with_items : suite
1085
**
1615
1085
|
power -> atom_expr
1085
:
power -> atom_expr
1085
/
power -> atom_expr
1085
^
power -> atom_expr
1085
&
power -> atom_expr
1085
%
power -> atom_expr
1085
*
power -> atom_expr
1085
@
power -> atom_expr
1085
>>
power -> atom_expr
1085
+
power -> atom_expr
1085
,
power -> atom_expr
1085
<<
power -> atom_expr
1085
-
power -> atom_expr
1085
//
power -> atom_expr
1086
:
atom -> True
1086
&
atom -> True
1086
//
atom -> True
1086
.
atom -> True
1086
(
atom -> True
1086
<<
atom -> True
1086
>>
atom -> True
1086
|
atom -> True
1086
^
atom -> True
1086
/
atom -> True
1086
-
atom -> True
1086
%
atom -> True
1086
*
atom -> True
1086
@
atom -> True
1086
[
atom -> True
1086
**
atom -> True
1086
,
atom -> True
1086
+
atom -> True
1087
:
xor_expr -> and_expr
1087
,
xor_expr -> and_expr
1087
^
1616
1087
|
xor_expr -> and_expr
1088
and_test
217
1088
atom_expr
218
1088
and_expr
219
1088
term
220
1088
factor
221
1088
shift_expr
222
1088
arith_expr
223
1088
NUMBER
224
1088
NAME
225
1088
not
226
1088
[
227
1088
{
228
1088
expr
229
1088
not_test
231
1088
False
232
1088
xor_expr
234
1088
STRING
235
1088
test_list_comp
1617
1088
lambda
236
1088
atom
237
1088
+
238
1088
True
239
1088
-
240
1088
(
241
1088
None
242
1088
comparison
243
1088
power
244
1088
)
1618
1088
~
245
1088
or_test
246
1088
test
247
1088
lambdef
248
1088
test_list
249
1089
+
atom -> NUMBER
1089
-
atom -> NUMBER
1089
%
atom -> NUMBER
1089
&
atom -> NUMBER
1089
(
atom -> NUMBER
1089
<<
atom -> NUMBER
1089
@
atom -> NUMBER
1089
/
atom -> NUMBER
1089
:
atom -> NUMBER
1089
.
atom -> NUMBER
1089
,
atom -> NUMBER
1089
^
atom -> NUMBER
1089
[
atom -> NUMBER
1089
*
atom -> NUMBER
1089
//
atom -> NUMBER
1089
>>
atom -> NUMBER
1089
**
atom -> NUMBER
1089
|
atom -> NUMBER
1090
&
atom -> NAME
1090
//
atom -> NAME
1090
-
atom -> NAME
1090
(
atom -> NAME
1090
|
atom -> NAME
1090
%
atom -> NAME
1090
^
atom -> NAME
1090
[
atom -> NAME
1090
@
atom -> NAME
1090
>>
atom -> NAME
1090
/
atom -> NAME
1090
<<
atom -> NAME
1090
.
atom -> NAME
1090
+
atom -> NAME
1090
**
atom -> NAME
1090
:
atom -> NAME
1090
,
atom -> NAME
1090
*
atom -> NAME
1091
}
1619
1092
|
arith_expr -> term
1092
^
arith_expr -> term
1092
>>
arith_expr -> term
1092
-
1620
1092
+
1621
1092
&
arith_expr -> term
1092
<<
arith_expr -> term
1092
:
arith_expr -> term
1092
,
arith_expr -> term
1093
*
factor -> power
1093
%
factor -> power
1093
+
factor -> power
1093
>>
factor -> power
1093
//
factor -> power
1093
&
factor -> power
1093
^
factor -> power
1093
|
factor -> power
1093
,
factor -> power
1093
-
factor -> power
1093
<<
factor -> power
1093
@
factor -> power
1093
/
factor -> power
1093
:
factor -> power
1094
and_test
110
1094
atom_expr
111
1094
and_expr
112
1094
term
113
1094
factor
114
1094
shift_expr
115
1094
arith_expr
116
1094
NUMBER
117
1094
NAME
118
1094
[
119
1094
{
121
1094
expr
122
1094
not_test
123
1094
test_list_comp
1622
1094
False
124
1094
xor_expr
125
1094
atom
126
1094
STRING
127
1094
+
128
1094
(
129
1094
True
131
1094
-
132
1094
]
1623
1094
None
133
1094
comparison
134
1094
or_test
135
1094
test
136
1094
power
137
1094
~
138
1094
lambda
139
1094
lambdef
140
1094
not
141
1094
test_list
142
1095
//
1624
1095
/
1625
1095
%
1626
1095
@
1627
1095
*
1628
1095
>>
term -> factor
1095
<<
term -> factor
1095
:
term -> factor
1095
,
term -> factor
1095
^
term -> factor
1095
+
term -> factor
1095
-
term -> factor
1095
|
term -> factor
1095
&
term -> factor
1096
atom_expr
1085
1096
True
1086
1096
(
1088
1096
NUMBER
1089
1096
NAME
1090
1096
{
1091
1096
factor
1629
1096
power
1093
1096
[
1094
1096
~
1096
1096
atom
1097
1096
+
1098
1096
None
1099
1096
STRING
1102
1096
False
1103
1096
-
1105
1097
[
1630
1097
(
1631
1097
trailer
1632
1097
trailer_expr
1633
1097
.
1634
1097
<<
trailer_expr -> 
1097
*
trailer_expr -> 
1097
@
trailer_expr -> 
1097
**
trailer_expr -> 
1097
-
trailer_expr -> 
1097
+
trailer_expr -> 
1097
^
trailer_expr -> 
1097
//
trailer_expr -> 
1097
%
trailer_expr -> 
1097
:
trailer_expr -> 
1097
/
trailer_expr -> 
1097
,
trailer_expr -> 
1097
|
trailer_expr -> 
1097
&
trailer_expr -> 
1097
>>
trailer_expr -> 
1098
atom_expr
1085
1098
True
1086
1098
(
1088
1098
NUMBER
1089
1098
NAME
1090
1098
{
1091
1098
power
1093
1098
[
1094
1098
factor
1635
1098
~
1096
1098
atom
1097
1098
+
1098
1098
None
1099
1098
STRING
1102
1098
False
1103
1098
-
1105
1099
+
atom -> None
1099
(
atom -> None
1099
:
atom -> None
1099
,
atom -> None
1099
*
atom -> None
1099
//
atom -> None
1099
^
atom -> None
1099
@
atom -> None
1099
|
atom -> None
1099
>>
atom -> None
1099
&
atom -> None
1099
%
atom -> None
1099
/
atom -> None
1099
**
atom -> None
1099
[
atom -> None
1099
-
atom -> None
1099
<<
atom -> None
1099
.
atom -> None
1100
,
shift_expr -> arith_expr
1100
>>
1636
1100
<<
1637
1100
:
shift_expr -> arith_expr
1100
|
shift_expr -> arith_expr
1100
&
shift_expr -> arith_expr
1100
^
shift_expr -> arith_expr
1101
&
1638
1101
,
and_expr -> shift_expr
1101
^
and_expr -> shift_expr
1101
:
and_expr -> shift_expr
1101
|
and_expr -> shift_expr
1102
>>
atom -> STRING
1102
(
atom -> STRING
1102
.
atom -> STRING
1102
@
atom -> STRING
1102
<<
atom -> STRING
1102
&
atom -> STRING
1102
/
atom -> STRING
1102
-
atom -> STRING
1102
//
atom -> STRING
1102
,
atom -> STRING
1102
+
atom -> STRING
1102
*
atom -> STRING
1102
^
atom -> STRING
1102
|
atom -> STRING
1102
:
atom -> STRING
1102
[
atom -> STRING
1102
**
atom -> STRING
1102
%
atom -> STRING
1103
[
atom -> False
1103
/
atom -> False
1103
//
atom -> False
1103
:
atom -> False
1103
%
atom -> False
1103
(
atom -> False
1103
^
atom -> False
1103
.
atom -> False
1103
@
atom -> False
1103
*
atom -> False
1103
&
atom -> False
1103
**
atom -> False
1103
+
atom -> False
1103
|
atom -> False
1103
,
atom -> False
1103
-
atom -> False
1103
>>
atom -> False
1103
<<
atom -> False
1104
:
expr -> xor_expr
1104
|
1639
1104
,
expr -> xor_expr
1105
atom_expr
1085
1105
True
1086
1105
(
1088
1105
NUMBER
1089
1105
NAME
1090
1105
factor
1640
1105
{
1091
1105
power
1093
1105
[
1094
1105
~
1096
1105
atom
1097
1105
+
1098
1105
None
1099
1105
STRING
1102
1105
False
1103
1105
-
1105
1106
,
with_item -> test as expr
1106
:
with_item -> test as expr
1107
as
or_test -> and_test or or_test
1107
,
or_test -> and_test or or_test
1107
if
or_test -> and_test or or_test
1107
:
or_test -> and_test or or_test
1108
atom_expr
173
1108
and_expr
174
1108
term
175
1108
factor
176
1108
shift_expr
177
1108
arith_expr
178
1108
NUMBER
179
1108
or_test
180
1108
NAME
181
1108
[
182
1108
{
183
1108
expr
184
1108
not_test
185
1108
False
186
1108
xor_expr
187
1108
STRING
188
1108
atom
189
1108
+
190
1108
True
191
1108
(
192
1108
None
195
1108
-
194
1108
test
1641
1108
and_test
198
1108
power
199
1108
~
200
1108
lambda
201
1108
not
202
1108
comparison
203
1108
lambdef
204
1109
,
lambdef -> lambda : test
1109
as
lambdef -> lambda : test
1109
:
lambdef -> lambda : test
1110
)
1642
1111
:
1643
1112
tfpdef
1644
1112
NAME
1645
1113
,
tfpdef -> NAME
1113
=
tfpdef -> NAME
1113
:
1646
1113
)
tfpdef -> NAME
1114
tfpdef
1647
1114
NAME
1645
1115
,
1648
1115
)
parameters -> param
1116
=
1649
1116
)
param -> tfpdef
1116
,
param -> tfpdef
1117
atom_expr
6
1117
factor
10
1117
[
3
1117
term
15
1117
STRING
43
1117
arith_expr
32
1117
NUMBER
8
1117
NAME
37
1117
{
5
1117
test
1650
1117
expr
7
1117
not
51
1117
True
9
1117
shift_expr
12
1117
atom
13
1117
xor_expr
14
1117
(
34
1117
None
29
1117
and_test
20
1117
and_expr
21
1117
False
23
1117
or_test
25
1117
lambda
28
1117
+
30
1117
-
36
1117
not_test
40
1117
power
47
1117
lambdef
41
1117
~
44
1117
comparison
48
1118
atom_expr
590
1118
True
605
1118
NAME
597
1118
[
593
1118
(
607
1118
NUMBER
596
1118
-
606
1118
{
599
1118
False
601
1118
STRING
603
1118
power
610
1118
atom
609
1118
factor
1651
1118
+
604
1118
~
611
1118
None
608
1119
atom_expr
590
1119
and_expr
591
1119
term
592
1119
[
593
1119
shift_expr
594
1119
arith_expr
595
1119
NUMBER
596
1119
NAME
597
1119
factor
598
1119
{
599
1119
False
601
1119
STRING
603
1119
xor_expr
1652
1119
+
604
1119
True
605
1119
-
606
1119
(
607
1119
None
608
1119
atom
609
1119
power
610
1119
~
611
1120
atom_expr
590
1120
[
593
1120
term
592
1120
NUMBER
596
1120
NAME
597
1120
factor
598
1120
{
599
1120
False
601
1120
STRING
603
1120
+
604
1120
True
605
1120
-
606
1120
arith_expr
1653
1120
(
607
1120
None
608
1120
atom
609
1120
power
610
1120
~
611
1121
atom_expr
590
1121
[
593
1121
term
592
1121
NUMBER
596
1121
NAME
597
1121
factor
598
1121
{
599
1121
False
601
1121
STRING
603
1121
+
604
1121
True
605
1121
-
606
1121
(
607
1121
None
608
1121
arith_expr
1654
1121
atom
609
1121
power
610
1121
~
611
1122
]
1655
1123
in
atom -> [ ]
1123
>=
atom -> [ ]
1123
%
atom -> [ ]
1123
is
atom -> [ ]
1123
^
atom -> [ ]
1123
//
atom -> [ ]
1123
or
atom -> [ ]
1123
not
atom -> [ ]
1123
[
atom -> [ ]
1123
and
atom -> [ ]
1123
/
atom -> [ ]
1123
!=
atom -> [ ]
1123
else
atom -> [ ]
1123
>
atom -> [ ]
1123
&
atom -> [ ]
1123
**
atom -> [ ]
1123
@
atom -> [ ]
1123
==
atom -> [ ]
1123
<<
atom -> [ ]
1123
<
atom -> [ ]
1123
(
atom -> [ ]
1123
<=
atom -> [ ]
1123
*
atom -> [ ]
1123
.
atom -> [ ]
1123
>>
atom -> [ ]
1123
|
atom -> [ ]
1123
-
atom -> [ ]
1123
+
atom -> [ ]
1124
atom_expr
590
1124
[
593
1124
term
592
1124
shift_expr
594
1124
arith_expr
595
1124
NUMBER
596
1124
NAME
597
1124
factor
598
1124
{
599
1124
False
601
1124
STRING
603
1124
+
604
1124
True
605
1124
-
606
1124
(
607
1124
None
608
1124
atom
609
1124
power
610
1124
~
611
1124
and_expr
1656
1125
atom_expr
590
1125
[
593
1125
term
592
1125
arith_expr
595
1125
NUMBER
596
1125
NAME
597
1125
factor
598
1125
{
599
1125
False
601
1125
STRING
603
1125
+
604
1125
True
605
1125
-
606
1125
(
607
1125
None
608
1125
atom
609
1125
power
610
1125
~
611
1125
shift_expr
1657
1126
atom_expr
590
1126
[
593
1126
term
592
1126
arith_expr
595
1126
NUMBER
596
1126
NAME
597
1126
factor
598
1126
{
599
1126
False
601
1126
STRING
603
1126
+
604
1126
shift_expr
1658
1126
True
605
1126
-
606
1126
(
607
1126
None
608
1126
atom
609
1126
power
610
1126
~
611
1127
atom_expr
590
1127
[
593
1127
NUMBER
596
1127
NAME
597
1127
factor
598
1127
{
599
1127
False
601
1127
STRING
603
1127
+
604
1127
term
1659
1127
True
605
1127
-
606
1127
(
607
1127
None
608
1127
atom
609
1127
power
610
1127
~
611
1128
atom_expr
590
1128
[
593
1128
NUMBER
596
1128
NAME
597
1128
factor
598
1128
{
599
1128
term
1660
1128
False
601
1128
STRING
603
1128
+
604
1128
True
605
1128
-
606
1128
(
607
1128
None
608
1128
atom
609
1128
power
610
1128
~
611
1129
atom_expr
590
1129
[
593
1129
NUMBER
596
1129
NAME
597
1129
factor
598
1129
{
599
1129
False
601
1129
STRING
603
1129
+
604
1129
term
1661
1129
True
605
1129
-
606
1129
(
607
1129
None
608
1129
atom
609
1129
power
610
1129
~
611
1130
atom_expr
590
1130
[
593
1130
NUMBER
596
1130
NAME
597
1130
factor
598
1130
{
599
1130
False
601
1130
STRING
603
1130
+
604
1130
True
605
1130
-
606
1130
(
607
1130
None
608
1130
term
1662
1130
atom
609
1130
power
610
1130
~
611
1131
atom_expr
590
1131
[
593
1131
NUMBER
596
1131
NAME
597
1131
factor
598
1131
{
599
1131
False
601
1131
STRING
603
1131
+
604
1131
True
605
1131
-
606
1131
(
607
1131
None
608
1131
term
1663
1131
atom
609
1131
power
610
1131
~
611
1132
<<
atom -> { }
1132
+
atom -> { }
1132
//
atom -> { }
1132
is
atom -> { }
1132
>=
atom -> { }
1132
<=
atom -> { }
1132
>
atom -> { }
1132
*
atom -> { }
1132
^
atom -> { }
1132
%
atom -> { }
1132
>>
atom -> { }
1132
.
atom -> { }
1132
not
atom -> { }
1132
==
atom -> { }
1132
in
atom -> { }
1132
<
atom -> { }
1132
|
atom -> { }
1132
(
atom -> { }
1132
/
atom -> { }
1132
else
atom -> { }
1132
and
atom -> { }
1132
**
atom -> { }
1132
@
atom -> { }
1132
-
atom -> { }
1132
&
atom -> { }
1132
!=
atom -> { }
1132
or
atom -> { }
1132
[
atom -> { }
1133
atom_expr
590
1133
and_expr
591
1133
term
592
1133
[
593
1133
shift_expr
594
1133
arith_expr
595
1133
NUMBER
596
1133
NAME
597
1133
factor
598
1133
{
599
1133
expr
600
1133
False
601
1133
xor_expr
602
1133
STRING
603
1133
+
604
1133
True
605
1133
-
606
1133
(
607
1133
None
608
1133
atom
609
1133
power
610
1133
~
611
1133
comparison
1664
1134
atom_expr
590
1134
and_expr
591
1134
term
592
1134
[
593
1134
shift_expr
594
1134
arith_expr
595
1134
NUMBER
596
1134
NAME
597
1134
factor
598
1134
{
599
1134
False
601
1134
xor_expr
602
1134
STRING
603
1134
+
604
1134
True
605
1134
-
606
1134
(
607
1134
None
608
1134
expr
1665
1134
atom
609
1134
power
610
1134
~
611
1135
<<
factor -> + factor
1135
&
factor -> + factor
1135
>
factor -> + factor
1135
not
factor -> + factor
1135
+
factor -> + factor
1135
^
factor -> + factor
1135
==
factor -> + factor
1135
/
factor -> + factor
1135
|
factor -> + factor
1135
>=
factor -> + factor
1135
%
factor -> + factor
1135
<
factor -> + factor
1135
is
factor -> + factor
1135
or
factor -> + factor
1135
//
factor -> + factor
1135
@
factor -> + factor
1135
and
factor -> + factor
1135
-
factor -> + factor
1135
in
factor -> + factor
1135
else
factor -> + factor
1135
*
factor -> + factor
1135
!=
factor -> + factor
1135
>>
factor -> + factor
1135
<=
factor -> + factor
1136
@
factor -> - factor
1136
^
factor -> - factor
1136
==
factor -> - factor
1136
in
factor -> - factor
1136
>>
factor -> - factor
1136
//
factor -> - factor
1136
and
factor -> - factor
1136
<=
factor -> - factor
1136
else
factor -> - factor
1136
!=
factor -> - factor
1136
-
factor -> - factor
1136
&
factor -> - factor
1136
not
factor -> - factor
1136
>
factor -> - factor
1136
*
factor -> - factor
1136
%
factor -> - factor
1136
/
factor -> - factor
1136
|
factor -> - factor
1136
<
factor -> - factor
1136
+
factor -> - factor
1136
<<
factor -> - factor
1136
is
factor -> - factor
1136
or
factor -> - factor
1136
>=
factor -> - factor
1137
)
1666
1138
>=
atom -> ( )
1138
>>
atom -> ( )
1138
not
atom -> ( )
1138
&
atom -> ( )
1138
^
atom -> ( )
1138
.
atom -> ( )
1138
/
atom -> ( )
1138
in
atom -> ( )
1138
>
atom -> ( )
1138
%
atom -> ( )
1138
else
atom -> ( )
1138
(
atom -> ( )
1138
==
atom -> ( )
1138
[
atom -> ( )
1138
<=
atom -> ( )
1138
+
atom -> ( )
1138
|
atom -> ( )
1138
-
atom -> ( )
1138
or
atom -> ( )
1138
@
atom -> ( )
1138
<<
atom -> ( )
1138
is
atom -> ( )
1138
**
atom -> ( )
1138
*
atom -> ( )
1138
and
atom -> ( )
1138
<
atom -> ( )
1138
!=
atom -> ( )
1138
//
atom -> ( )
1139
atom_expr
472
1139
and_expr
473
1139
term
474
1139
factor
475
1139
shift_expr
476
1139
arith_expr
477
1139
NUMBER
478
1139
NAME
479
1139
[
480
1139
{
481
1139
expr
482
1139
not_test
483
1139
False
484
1139
xor_expr
485
1139
atom
487
1139
STRING
488
1139
+
489
1139
(
490
1139
True
491
1139
-
492
1139
None
493
1139
subscriptlist
1667
1139
or_test
494
1139
and_test
495
1139
power
496
1139
~
497
1139
lambda
498
1139
:
maybe_test -> 
1139
maybe_test
499
1139
test
500
1139
not
501
1139
comparison
502
1139
lambdef
503
1139
subscript
504
1140
and_test
505
1140
atom_expr
506
1140
and_expr
507
1140
term
508
1140
factor
509
1140
shift_expr
510
1140
arith_expr
511
1140
NUMBER
512
1140
NAME
513
1140
not
514
1140
[
515
1140
{
516
1140
expr
517
1140
not_test
519
1140
False
520
1140
xor_expr
521
1140
STRING
522
1140
lambda
523
1140
arglist
1668
1140
atom
525
1140
)
1669
1140
+
526
1140
True
527
1140
-
528
1140
or_test
529
1140
(
530
1140
None
531
1140
comparison
532
1140
power
533
1140
test
534
1140
~
535
1140
*
536
1140
lambdef
537
1140
**
538
1140
argument
539
1141
[
1139
1141
(
1140
1141
trailer
1141
1141
.
1142
1141
<<
trailer_expr -> 
1141
trailer_expr
1670
1141
@
trailer_expr -> 
1141
!=
trailer_expr -> 
1141
-
trailer_expr -> 
1141
^
trailer_expr -> 
1141
<
trailer_expr -> 
1141
/
trailer_expr -> 
1141
is
trailer_expr -> 
1141
==
trailer_expr -> 
1141
&
trailer_expr -> 
1141
>=
trailer_expr -> 
1141
or
trailer_expr -> 
1141
in
trailer_expr -> 
1141
*
trailer_expr -> 
1141
not
trailer_expr -> 
1141
**
trailer_expr -> 
1141
<=
trailer_expr -> 
1141
+
trailer_expr -> 
1141
//
trailer_expr -> 
1141
%
trailer_expr -> 
1141
>
trailer_expr -> 
1141
else
trailer_expr -> 
1141
|
trailer_expr -> 
1141
and
trailer_expr -> 
1141
>>
trailer_expr -> 
1142
NAME
1671
1143
==
atom_expr -> atom trailer_expr
1143
%
atom_expr -> atom trailer_expr
1143
+
atom_expr -> atom trailer_expr
1143
not
atom_expr -> atom trailer_expr
1143
or
atom_expr -> atom trailer_expr
1143
//
atom_expr -> atom trailer_expr
1143
and
atom_expr -> atom trailer_expr
1143
!=
atom_expr -> atom trailer_expr
1143
<<
atom_expr -> atom trailer_expr
1143
else
atom_expr -> atom trailer_expr
1143
-
atom_expr -> atom trailer_expr
1143
>>
atom_expr -> atom trailer_expr
1143
**
atom_expr -> atom trailer_expr
1143
/
atom_expr -> atom trailer_expr
1143
<
atom_expr -> atom trailer_expr
1143
in
atom_expr -> atom trailer_expr
1143
&
atom_expr -> atom trailer_expr
1143
is
atom_expr -> atom trailer_expr
1143
|
atom_expr -> atom trailer_expr
1143
>
atom_expr -> atom trailer_expr
1143
>=
atom_expr -> atom trailer_expr
1143
<=
atom_expr -> atom trailer_expr
1143
@
atom_expr -> atom trailer_expr
1143
*
atom_expr -> atom trailer_expr
1143
^
atom_expr -> atom trailer_expr
1144
<<
factor -> ~ factor
1144
in
factor -> ~ factor
1144
<=
factor -> ~ factor
1144
|
factor -> ~ factor
1144
<
factor -> ~ factor
1144
>>
factor -> ~ factor
1144
==
factor -> ~ factor
1144
>=
factor -> ~ factor
1144
!=
factor -> ~ factor
1144
//
factor -> ~ factor
1144
*
factor -> ~ factor
1144
/
factor -> ~ factor
1144
+
factor -> ~ factor
1144
is
factor -> ~ factor
1144
and
factor -> ~ factor
1144
not
factor -> ~ factor
1144
^
factor -> ~ factor
1144
@
factor -> ~ factor
1144
>
factor -> ~ factor
1144
-
factor -> ~ factor
1144
or
factor -> ~ factor
1144
&
factor -> ~ factor
1144
else
factor -> ~ factor
1144
%
factor -> ~ factor
1145
atom_expr
590
1145
and_expr
591
1145
term
592
1145
[
593
1145
shift_expr
594
1145
arith_expr
595
1145
NUMBER
596
1145
NAME
597
1145
factor
598
1145
{
599
1145
expr
600
1145
False
601
1145
xor_expr
602
1145
STRING
603
1145
+
604
1145
True
605
1145
-
606
1145
(
607
1145
None
608
1145
atom
609
1145
power
610
1145
~
611
1145
and_test
1672
1145
not_test
612
1145
not
613
1145
comparison
614
1146
and
not_test -> not not_test
1146
or
not_test -> not not_test
1146
else
not_test -> not not_test
1147
atom_expr
590
1147
and_expr
591
1147
term
592
1147
[
593
1147
shift_expr
594
1147
arith_expr
595
1147
NUMBER
596
1147
NAME
597
1147
factor
598
1147
{
599
1147
expr
600
1147
False
601
1147
xor_expr
602
1147
STRING
603
1147
+
604
1147
True
605
1147
-
606
1147
(
607
1147
None
608
1147
atom
609
1147
power
610
1147
~
611
1147
not_test
612
1147
or_test
1673
1147
not
613
1147
comparison
614
1147
and_test
615
1148
-=
lambdef -> lambda varargslist : test
1148
//=
lambdef -> lambda varargslist : test
1148
:
lambdef -> lambda varargslist : test
1148
|=
lambdef -> lambda varargslist : test
1148
@=
lambdef -> lambda varargslist : test
1148
%=
lambdef -> lambda varargslist : test
1148
NEWLINE
lambdef -> lambda varargslist : test
1148
<<=
lambdef -> lambda varargslist : test
1148
&=
lambdef -> lambda varargslist : test
1148
**=
lambdef -> lambda varargslist : test
1148
,
lambdef -> lambda varargslist : test
1148
^=
lambdef -> lambda varargslist : test
1148
*=
lambdef -> lambda varargslist : test
1148
=
lambdef -> lambda varargslist : test
1148
+=
lambdef -> lambda varargslist : test
1148
/=
lambdef -> lambda varargslist : test
1148
>>=
lambdef -> lambda varargslist : test
1149
:
varargslist -> vfpdef , varargslist
1150
,
or_test -> and_test or or_test
1150
if
or_test -> and_test or or_test
1150
)
or_test -> and_test or or_test
1150
for
or_test -> and_test or or_test
1151
*
power -> atom_expr ** factor
1151
in
power -> atom_expr ** factor
1151
)
power -> atom_expr ** factor
1151
<
power -> atom_expr ** factor
1151
if
power -> atom_expr ** factor
1151
-
power -> atom_expr ** factor
1151
>>
power -> atom_expr ** factor
1151
<=
power -> atom_expr ** factor
1151
and
power -> atom_expr ** factor
1151
==
power -> atom_expr ** factor
1151
%
power -> atom_expr ** factor
1151
/
power -> atom_expr ** factor
1151
^
power -> atom_expr ** factor
1151
<<
power -> atom_expr ** factor
1151
,
power -> atom_expr ** factor
1151
>
power -> atom_expr ** factor
1151
//
power -> atom_expr ** factor
1151
is
power -> atom_expr ** factor
1151
for
power -> atom_expr ** factor
1151
@
power -> atom_expr ** factor
1151
+
power -> atom_expr ** factor
1151
|
power -> atom_expr ** factor
1151
!=
power -> atom_expr ** factor
1151
>=
power -> atom_expr ** factor
1151
or
power -> atom_expr ** factor
1151
&
power -> atom_expr ** factor
1151
not
power -> atom_expr ** factor
1152
and
xor_expr -> and_expr ^ xor_expr
1152
<
xor_expr -> and_expr ^ xor_expr
1152
>
xor_expr -> and_expr ^ xor_expr
1152
in
xor_expr -> and_expr ^ xor_expr
1152
|
xor_expr -> and_expr ^ xor_expr
1152
<=
xor_expr -> and_expr ^ xor_expr
1152
for
xor_expr -> and_expr ^ xor_expr
1152
)
xor_expr -> and_expr ^ xor_expr
1152
!=
xor_expr -> and_expr ^ xor_expr
1152
not
xor_expr -> and_expr ^ xor_expr
1152
or
xor_expr -> and_expr ^ xor_expr
1152
if
xor_expr -> and_expr ^ xor_expr
1152
is
xor_expr -> and_expr ^ xor_expr
1152
==
xor_expr -> and_expr ^ xor_expr
1152
,
xor_expr -> and_expr ^ xor_expr
1152
>=
xor_expr -> and_expr ^ xor_expr
1153
<=
arith_expr -> term + arith_expr
1153
&
arith_expr -> term + arith_expr
1153
>
arith_expr -> term + arith_expr
1153
,
arith_expr -> term + arith_expr
1153
)
arith_expr -> term + arith_expr
1153
>=
arith_expr -> term + arith_expr
1153
not
arith_expr -> term + arith_expr
1153
|
arith_expr -> term + arith_expr
1153
in
arith_expr -> term + arith_expr
1153
if
arith_expr -> term + arith_expr
1153
>>
arith_expr -> term + arith_expr
1153
is
arith_expr -> term + arith_expr
1153
^
arith_expr -> term + arith_expr
1153
<<
arith_expr -> term + arith_expr
1153
<
arith_expr -> term + arith_expr
1153
==
arith_expr -> term + arith_expr
1153
!=
arith_expr -> term + arith_expr
1153
for
arith_expr -> term + arith_expr
1153
or
arith_expr -> term + arith_expr
1153
and
arith_expr -> term + arith_expr
1154
<=
arith_expr -> term - arith_expr
1154
if
arith_expr -> term - arith_expr
1154
)
arith_expr -> term - arith_expr
1154
not
arith_expr -> term - arith_expr
1154
|
arith_expr -> term - arith_expr
1154
,
arith_expr -> term - arith_expr
1154
>>
arith_expr -> term - arith_expr
1154
>=
arith_expr -> term - arith_expr
1154
<<
arith_expr -> term - arith_expr
1154
is
arith_expr -> term - arith_expr
1154
!=
arith_expr -> term - arith_expr
1154
in
arith_expr -> term - arith_expr
1154
<
arith_expr -> term - arith_expr
1154
or
arith_expr -> term - arith_expr
1154
for
arith_expr -> term - arith_expr
1154
==
arith_expr -> term - arith_expr
1154
and
arith_expr -> term - arith_expr
1154
&
arith_expr -> term - arith_expr
1154
^
arith_expr -> term - arith_expr
1154
>
arith_expr -> term - arith_expr
1155
is
term -> factor // term
1155
if
term -> factor // term
1155
>
term -> factor // term
1155
)
term -> factor // term
1155
==
term -> factor // term
1155
+
term -> factor // term
1155
^
term -> factor // term
1155
-
term -> factor // term
1155
,
term -> factor // term
1155
in
term -> factor // term
1155
>>
term -> factor // term
1155
|
term -> factor // term
1155
<<
term -> factor // term
1155
!=
term -> factor // term
1155
&
term -> factor // term
1155
not
term -> factor // term
1155
<=
term -> factor // term
1155
<
term -> factor // term
1155
for
term -> factor // term
1155
and
term -> factor // term
1155
>=
term -> factor // term
1155
or
term -> factor // term
1156
|
term -> factor * term
1156
-
term -> factor * term
1156
in
term -> factor * term
1156
and
term -> factor * term
1156
<<
term -> factor * term
1156
>=
term -> factor * term
1156
if
term -> factor * term
1156
or
term -> factor * term
1156
<=
term -> factor * term
1156
is
term -> factor * term
1156
^
term -> factor * term
1156
!=
term -> factor * term
1156
==
term -> factor * term
1156
,
term -> factor * term
1156
&
term -> factor * term
1156
>
term -> factor * term
1156
not
term -> factor * term
1156
for
term -> factor * term
1156
<
term -> factor * term
1156
+
term -> factor * term
1156
>>
term -> factor * term
1156
)
term -> factor * term
1157
!=
term -> factor % term
1157
>>
term -> factor % term
1157
)
term -> factor % term
1157
for
term -> factor % term
1157
==
term -> factor % term
1157
>=
term -> factor % term
1157
,
term -> factor % term
1157
^
term -> factor % term
1157
not
term -> factor % term
1157
or
term -> factor % term
1157
if
term -> factor % term
1157
<=
term -> factor % term
1157
<
term -> factor % term
1157
is
term -> factor % term
1157
-
term -> factor % term
1157
in
term -> factor % term
1157
>
term -> factor % term
1157
<<
term -> factor % term
1157
and
term -> factor % term
1157
|
term -> factor % term
1157
+
term -> factor % term
1157
&
term -> factor % term
1158
>=
term -> factor / term
1158
!=
term -> factor / term
1158
)
term -> factor / term
1158
not
term -> factor / term
1158
^
term -> factor / term
1158
in
term -> factor / term
1158
and
term -> factor / term
1158
<<
term -> factor / term
1158
for
term -> factor / term
1158
,
term -> factor / term
1158
+
term -> factor / term
1158
>
term -> factor / term
1158
|
term -> factor / term
1158
or
term -> factor / term
1158
if
term -> factor / term
1158
>>
term -> factor / term
1158
<
term -> factor / term
1158
&
term -> factor / term
1158
-
term -> factor / term
1158
is
term -> factor / term
1158
==
term -> factor / term
1158
<=
term -> factor / term
1159
-
term -> factor @ term
1159
&
term -> factor @ term
1159
^
term -> factor @ term
1159
<
term -> factor @ term
1159
!=
term -> factor @ term
1159
<<
term -> factor @ term
1159
is
term -> factor @ term
1159
for
term -> factor @ term
1159
<=
term -> factor @ term
1159
and
term -> factor @ term
1159
+
term -> factor @ term
1159
,
term -> factor @ term
1159
>
term -> factor @ term
1159
if
term -> factor @ term
1159
not
term -> factor @ term
1159
>>
term -> factor @ term
1159
>=
term -> factor @ term
1159
|
term -> factor @ term
1159
in
term -> factor @ term
1159
==
term -> factor @ term
1159
or
term -> factor @ term
1159
)
term -> factor @ term
1160
if
and_expr -> shift_expr & and_expr
1160
!=
and_expr -> shift_expr & and_expr
1160
<=
and_expr -> shift_expr & and_expr
1160
not
and_expr -> shift_expr & and_expr
1160
,
and_expr -> shift_expr & and_expr
1160
)
and_expr -> shift_expr & and_expr
1160
^
and_expr -> shift_expr & and_expr
1160
|
and_expr -> shift_expr & and_expr
1160
or
and_expr -> shift_expr & and_expr
1160
in
and_expr -> shift_expr & and_expr
1160
>
and_expr -> shift_expr & and_expr
1160
for
and_expr -> shift_expr & and_expr
1160
and
and_expr -> shift_expr & and_expr
1160
==
and_expr -> shift_expr & and_expr
1160
<
and_expr -> shift_expr & and_expr
1160
is
and_expr -> shift_expr & and_expr
1160
>=
and_expr -> shift_expr & and_expr
1161
,
shift_expr -> arith_expr << shift_expr
1161
for
shift_expr -> arith_expr << shift_expr
1161
^
shift_expr -> arith_expr << shift_expr
1161
|
shift_expr -> arith_expr << shift_expr
1161
&
shift_expr -> arith_expr << shift_expr
1161
and
shift_expr -> arith_expr << shift_expr
1161
is
shift_expr -> arith_expr << shift_expr
1161
)
shift_expr -> arith_expr << shift_expr
1161
in
shift_expr -> arith_expr << shift_expr
1161
<=
shift_expr -> arith_expr << shift_expr
1161
<
shift_expr -> arith_expr << shift_expr
1161
not
shift_expr -> arith_expr << shift_expr
1161
==
shift_expr -> arith_expr << shift_expr
1161
>=
shift_expr -> arith_expr << shift_expr
1161
if
shift_expr -> arith_expr << shift_expr
1161
>
shift_expr -> arith_expr << shift_expr
1161
or
shift_expr -> arith_expr << shift_expr
1161
!=
shift_expr -> arith_expr << shift_expr
1162
or
shift_expr -> arith_expr >> shift_expr
1162
and
shift_expr -> arith_expr >> shift_expr
1162
>=
shift_expr -> arith_expr >> shift_expr
1162
for
shift_expr -> arith_expr >> shift_expr
1162
not
shift_expr -> arith_expr >> shift_expr
1162
^
shift_expr -> arith_expr >> shift_expr
1162
is
shift_expr -> arith_expr >> shift_expr
1162
if
shift_expr -> arith_expr >> shift_expr
1162
in
shift_expr -> arith_expr >> shift_expr
1162
<=
shift_expr -> arith_expr >> shift_expr
1162
==
shift_expr -> arith_expr >> shift_expr
1162
,
shift_expr -> arith_expr >> shift_expr
1162
<
shift_expr -> arith_expr >> shift_expr
1162
!=
shift_expr -> arith_expr >> shift_expr
1162
|
shift_expr -> arith_expr >> shift_expr
1162
>
shift_expr -> arith_expr >> shift_expr
1162
)
shift_expr -> arith_expr >> shift_expr
1162
&
shift_expr -> arith_expr >> shift_expr
1163
and
atom -> [ test_list_comp ]
1163
<=
atom -> [ test_list_comp ]
1163
**
atom -> [ test_list_comp ]
1163
^
atom -> [ test_list_comp ]
1163
[
atom -> [ test_list_comp ]
1163
,
atom -> [ test_list_comp ]
1163
!=
atom -> [ test_list_comp ]
1163
<
atom -> [ test_list_comp ]
1163
/
atom -> [ test_list_comp ]
1163
-
atom -> [ test_list_comp ]
1163
>=
atom -> [ test_list_comp ]
1163
if
atom -> [ test_list_comp ]
1163
%
atom -> [ test_list_comp ]
1163
is
atom -> [ test_list_comp ]
1163
+
atom -> [ test_list_comp ]
1163
)
atom -> [ test_list_comp ]
1163
&
atom -> [ test_list_comp ]
1163
@
atom -> [ test_list_comp ]
1163
or
atom -> [ test_list_comp ]
1163
in
atom -> [ test_list_comp ]
1163
==
atom -> [ test_list_comp ]
1163
not
atom -> [ test_list_comp ]
1163
.
atom -> [ test_list_comp ]
1163
|
atom -> [ test_list_comp ]
1163
>
atom -> [ test_list_comp ]
1163
<<
atom -> [ test_list_comp ]
1163
//
atom -> [ test_list_comp ]
1163
(
atom -> [ test_list_comp ]
1163
for
atom -> [ test_list_comp ]
1163
*
atom -> [ test_list_comp ]
1163
>>
atom -> [ test_list_comp ]
1164
if
comparison -> expr comp_op comparison
1164
or
comparison -> expr comp_op comparison
1164
and
comparison -> expr comp_op comparison
1164
for
comparison -> expr comp_op comparison
1164
)
comparison -> expr comp_op comparison
1164
,
comparison -> expr comp_op comparison
1165
for
and_test -> not_test and and_test
1165
,
and_test -> not_test and and_test
1165
or
and_test -> not_test and and_test
1165
if
and_test -> not_test and and_test
1165
)
and_test -> not_test and and_test
1166
,
expr -> xor_expr | expr
1166
is
expr -> xor_expr | expr
1166
<
expr -> xor_expr | expr
1166
if
expr -> xor_expr | expr
1166
>=
expr -> xor_expr | expr
1166
>
expr -> xor_expr | expr
1166
or
expr -> xor_expr | expr
1166
and
expr -> xor_expr | expr
1166
in
expr -> xor_expr | expr
1166
!=
expr -> xor_expr | expr
1166
)
expr -> xor_expr | expr
1166
<=
expr -> xor_expr | expr
1166
==
expr -> xor_expr | expr
1166
for
expr -> xor_expr | expr
1166
not
expr -> xor_expr | expr
1167
,
lambdef -> lambda : test
1167
)
lambdef -> lambda : test
1167
for
lambdef -> lambda : test
1168
and_test
217
1168
atom_expr
218
1168
and_expr
219
1168
term
220
1168
factor
221
1168
shift_expr
222
1168
arith_expr
223
1168
NUMBER
224
1168
NAME
225
1168
not
226
1168
[
227
1168
{
228
1168
expr
229
1168
not_test
231
1168
False
232
1168
xor_expr
234
1168
STRING
235
1168
lambda
236
1168
atom
237
1168
+
238
1168
True
239
1168
-
240
1168
(
241
1168
None
242
1168
comparison
243
1168
power
244
1168
~
245
1168
or_test
246
1168
lambdef
248
1168
test
1674
1169
]
1675
1170
<
trailer -> ( )
1170
.
trailer -> ( )
1170
*
trailer -> ( )
1170
or
trailer -> ( )
1170
is
trailer -> ( )
1170
/
trailer -> ( )
1170
+
trailer -> ( )
1170
@
trailer -> ( )
1170
>
trailer -> ( )
1170
//
trailer -> ( )
1170
|
trailer -> ( )
1170
!=
trailer -> ( )
1170
&
trailer -> ( )
1170
^
trailer -> ( )
1170
)
trailer -> ( )
1170
<=
trailer -> ( )
1170
%
trailer -> ( )
1170
>>
trailer -> ( )
1170
**
trailer -> ( )
1170
and
trailer -> ( )
1170
(
trailer -> ( )
1170
for
trailer -> ( )
1170
,
trailer -> ( )
1170
==
trailer -> ( )
1170
if
trailer -> ( )
1170
[
trailer -> ( )
1170
<<
trailer -> ( )
1170
in
trailer -> ( )
1170
-
trailer -> ( )
1170
not
trailer -> ( )
1170
>=
trailer -> ( )
1171
)
1676
1172
|
trailer -> . NAME
1172
@
trailer -> . NAME
1172
^
trailer -> . NAME
1172
>
trailer -> . NAME
1172
+
trailer -> . NAME
1172
.
trailer -> . NAME
1172
!=
trailer -> . NAME
1172
<<
trailer -> . NAME
1172
<=
trailer -> . NAME
1172
[
trailer -> . NAME
1172
*
trailer -> . NAME
1172
(
trailer -> . NAME
1172
//
trailer -> . NAME
1172
**
trailer -> . NAME
1172
-
trailer -> . NAME
1172
)
trailer -> . NAME
1172
in
trailer -> . NAME
1172
>=
trailer -> . NAME
1172
,
trailer -> . NAME
1172
==
trailer -> . NAME
1172
or
trailer -> . NAME
1172
and
trailer -> . NAME
1172
%
trailer -> . NAME
1172
is
trailer -> . NAME
1172
for
trailer -> . NAME
1172
<
trailer -> . NAME
1172
not
trailer -> . NAME
1172
/
trailer -> . NAME
1172
if
trailer -> . NAME
1172
&
trailer -> . NAME
1172
>>
trailer -> . NAME
1173
&
trailer_expr -> trailer trailer_expr
1173
not
trailer_expr -> trailer trailer_expr
1173
and
trailer_expr -> trailer trailer_expr
1173
+
trailer_expr -> trailer trailer_expr
1173
==
trailer_expr -> trailer trailer_expr
1173
**
trailer_expr -> trailer trailer_expr
1173
/
trailer_expr -> trailer trailer_expr
1173
^
trailer_expr -> trailer trailer_expr
1173
,
trailer_expr -> trailer trailer_expr
1173
>
trailer_expr -> trailer trailer_expr
1173
*
trailer_expr -> trailer trailer_expr
1173
//
trailer_expr -> trailer trailer_expr
1173
>>
trailer_expr -> trailer trailer_expr
1173
<<
trailer_expr -> trailer trailer_expr
1173
>=
trailer_expr -> trailer trailer_expr
1173
)
trailer_expr -> trailer trailer_expr
1173
<=
trailer_expr -> trailer trailer_expr
1173
-
trailer_expr -> trailer trailer_expr
1173
is
trailer_expr -> trailer trailer_expr
1173
in
trailer_expr -> trailer trailer_expr
1173
<
trailer_expr -> trailer trailer_expr
1173
|
trailer_expr -> trailer trailer_expr
1173
if
trailer_expr -> trailer trailer_expr
1173
%
trailer_expr -> trailer trailer_expr
1173
for
trailer_expr -> trailer trailer_expr
1173
@
trailer_expr -> trailer trailer_expr
1173
!=
trailer_expr -> trailer trailer_expr
1173
or
trailer_expr -> trailer trailer_expr
1174
if
atom -> ( test_list_comp )
1174
or
atom -> ( test_list_comp )
1174
*
atom -> ( test_list_comp )
1174
|
atom -> ( test_list_comp )
1174
>>
atom -> ( test_list_comp )
1174
%
atom -> ( test_list_comp )
1174
not
atom -> ( test_list_comp )
1174
//
atom -> ( test_list_comp )
1174
for
atom -> ( test_list_comp )
1174
+
atom -> ( test_list_comp )
1174
and
atom -> ( test_list_comp )
1174
>
atom -> ( test_list_comp )
1174
[
atom -> ( test_list_comp )
1174
^
atom -> ( test_list_comp )
1174
!=
atom -> ( test_list_comp )
1174
<<
atom -> ( test_list_comp )
1174
**
atom -> ( test_list_comp )
1174
is
atom -> ( test_list_comp )
1174
<=
atom -> ( test_list_comp )
1174
-
atom -> ( test_list_comp )
1174
&
atom -> ( test_list_comp )
1174
(
atom -> ( test_list_comp )
1174
,
atom -> ( test_list_comp )
1174
in
atom -> ( test_list_comp )
1174
)
atom -> ( test_list_comp )
1174
@
atom -> ( test_list_comp )
1174
.
atom -> ( test_list_comp )
1174
<
atom -> ( test_list_comp )
1174
/
atom -> ( test_list_comp )
1174
==
atom -> ( test_list_comp )
1174
>=
atom -> ( test_list_comp )
1175
else
1677
1176
in
1678
1177
)
test_list -> test
1177
,
658
1178
)
test_list -> test , test_list
1179
+
power -> atom_expr ** factor
1179
*
power -> atom_expr ** factor
1179
/
power -> atom_expr ** factor
1179
-
power -> atom_expr ** factor
1179
>>
power -> atom_expr ** factor
1179
^
power -> atom_expr ** factor
1179
<<
power -> atom_expr ** factor
1179
in
power -> atom_expr ** factor
1179
|
power -> atom_expr ** factor
1179
,
power -> atom_expr ** factor
1179
%
power -> atom_expr ** factor
1179
//
power -> atom_expr ** factor
1179
&
power -> atom_expr ** factor
1179
@
power -> atom_expr ** factor
1180
|
xor_expr -> and_expr ^ xor_expr
1180
,
xor_expr -> and_expr ^ xor_expr
1180
in
xor_expr -> and_expr ^ xor_expr
1181
//
atom -> ( test_list_comp )
1181
-
atom -> ( test_list_comp )
1181
&
atom -> ( test_list_comp )
1181
+
atom -> ( test_list_comp )
1181
/
atom -> ( test_list_comp )
1181
*
atom -> ( test_list_comp )
1181
,
atom -> ( test_list_comp )
1181
(
atom -> ( test_list_comp )
1181
in
atom -> ( test_list_comp )
1181
@
atom -> ( test_list_comp )
1181
^
atom -> ( test_list_comp )
1181
[
atom -> ( test_list_comp )
1181
.
atom -> ( test_list_comp )
1181
<<
atom -> ( test_list_comp )
1181
**
atom -> ( test_list_comp )
1181
|
atom -> ( test_list_comp )
1181
>>
atom -> ( test_list_comp )
1181
%
atom -> ( test_list_comp )
1182
**
1679
1182
!=
power -> atom_expr
1182
|
power -> atom_expr
1182
:
power -> atom_expr
1182
>
power -> atom_expr
1182
/
power -> atom_expr
1182
^
power -> atom_expr
1182
&
power -> atom_expr
1182
<
power -> atom_expr
1182
not
power -> atom_expr
1182
<=
power -> atom_expr
1182
%
power -> atom_expr
1182
and
power -> atom_expr
1182
*
power -> atom_expr
1182
@
power -> atom_expr
1182
>>
power -> atom_expr
1182
if
power -> atom_expr
1182
+
power -> atom_expr
1182
,
power -> atom_expr
1182
in
power -> atom_expr
1182
is
power -> atom_expr
1182
//
power -> atom_expr
1182
or
power -> atom_expr
1182
<<
power -> atom_expr
1182
-
power -> atom_expr
1182
==
power -> atom_expr
1182
>=
power -> atom_expr
1183
,
xor_expr -> and_expr
1183
^
1680
1183
not
xor_expr -> and_expr
1183
>=
xor_expr -> and_expr
1183
:
xor_expr -> and_expr
1183
and
xor_expr -> and_expr
1183
is
xor_expr -> and_expr
1183
or
xor_expr -> and_expr
1183
|
xor_expr -> and_expr
1183
in
xor_expr -> and_expr
1183
==
xor_expr -> and_expr
1183
>
xor_expr -> and_expr
1183
<
xor_expr -> and_expr
1183
if
xor_expr -> and_expr
1183
<=
xor_expr -> and_expr
1183
!=
xor_expr -> and_expr
1184
+
1681
1184
in
arith_expr -> term
1184
if
arith_expr -> term
1184
|
arith_expr -> term
1184
==
arith_expr -> term
1184
<
arith_expr -> term
1184
-
1682
1184
<=
arith_expr -> term
1184
^
arith_expr -> term
1184
is
arith_expr -> term
1184
>>
arith_expr -> term
1184
or
arith_expr -> term
1184
&
arith_expr -> term
1184
>
arith_expr -> term
1184
>=
arith_expr -> term
1184
<<
arith_expr -> term
1184
and
arith_expr -> term
1184
:
arith_expr -> term
1184
not
arith_expr -> term
1184
,
arith_expr -> term
1184
!=
arith_expr -> term
1185
*
1683
1185
%
1684
1185
//
1685
1185
/
1686
1185
and
term -> factor
1185
@
1687
1185
==
term -> factor
1185
>=
term -> factor
1185
+
term -> factor
1185
<=
term -> factor
1185
or
term -> factor
1185
<<
term -> factor
1185
not
term -> factor
1185
,
term -> factor
1185
<
term -> factor
1185
-
term -> factor
1185
in
term -> factor
1185
!=
term -> factor
1185
is
term -> factor
1185
>>
term -> factor
1185
:
term -> factor
1185
^
term -> factor
1185
|
term -> factor
1185
>
term -> factor
1185
if
term -> factor
1185
&
term -> factor
1186
if
and_expr -> shift_expr
1186
&
1688
1186
in
and_expr -> shift_expr
1186
is
and_expr -> shift_expr
1186
|
and_expr -> shift_expr
1186
>=
and_expr -> shift_expr
1186
<
and_expr -> shift_expr
1186
!=
and_expr -> shift_expr
1186
and
and_expr -> shift_expr
1186
not
and_expr -> shift_expr
1186
or
and_expr -> shift_expr
1186
,
and_expr -> shift_expr
1186
:
and_expr -> shift_expr
1186
==
and_expr -> shift_expr
1186
<=
and_expr -> shift_expr
1186
^
and_expr -> shift_expr
1186
>
and_expr -> shift_expr
1187
<<
1689
1187
>>
1690
1187
<
shift_expr -> arith_expr
1187
>
shift_expr -> arith_expr
1187
&
shift_expr -> arith_expr
1187
and
shift_expr -> arith_expr
1187
,
shift_expr -> arith_expr
1187
in
shift_expr -> arith_expr
1187
!=
shift_expr -> arith_expr
1187
|
shift_expr -> arith_expr
1187
if
shift_expr -> arith_expr
1187
not
shift_expr -> arith_expr
1187
<=
shift_expr -> arith_expr
1187
is
shift_expr -> arith_expr
1187
==
shift_expr -> arith_expr
1187
or
shift_expr -> arith_expr
1187
:
shift_expr -> arith_expr
1187
>=
shift_expr -> arith_expr
1187
^
shift_expr -> arith_expr
1188
==
atom -> NUMBER
1188
<=
atom -> NUMBER
1188
<<
atom -> NUMBER
1188
/
atom -> NUMBER
1188
^
atom -> NUMBER
1188
if
atom -> NUMBER
1188
.
atom -> NUMBER
1188
or
atom -> NUMBER
1188
**
atom -> NUMBER
1188
+
atom -> NUMBER
1188
%
atom -> NUMBER
1188
-
atom -> NUMBER
1188
&
atom -> NUMBER
1188
@
atom -> NUMBER
1188
*
atom -> NUMBER
1188
>>
atom -> NUMBER
1188
<
atom -> NUMBER
1188
is
atom -> NUMBER
1188
(
atom -> NUMBER
1188
and
atom -> NUMBER
1188
not
atom -> NUMBER
1188
!=
atom -> NUMBER
1188
|
atom -> NUMBER
1188
in
atom -> NUMBER
1188
>
atom -> NUMBER
1188
:
atom -> NUMBER
1188
>=
atom -> NUMBER
1188
//
atom -> NUMBER
1188
,
atom -> NUMBER
1188
[
atom -> NUMBER
1189
or
atom -> NAME
1189
in
atom -> NAME
1189
^
atom -> NAME
1189
[
atom -> NAME
1189
==
atom -> NAME
1189
<<
atom -> NAME
1189
**
atom -> NAME
1189
,
atom -> NAME
1189
!=
atom -> NAME
1189
%
atom -> NAME
1189
@
atom -> NAME
1189
not
atom -> NAME
1189
>
atom -> NAME
1189
>=
atom -> NAME
1189
*
atom -> NAME
1189
&
atom -> NAME
1189
<
atom -> NAME
1189
-
atom -> NAME
1189
(
atom -> NAME
1189
>>
atom -> NAME
1189
+
atom -> NAME
1189
//
atom -> NAME
1189
and
atom -> NAME
1189
<=
atom -> NAME
1189
is
atom -> NAME
1189
if
atom -> NAME
1189
/
atom -> NAME
1189
.
atom -> NAME
1189
:
atom -> NAME
1189
|
atom -> NAME
1190
and_test
110
1190
atom_expr
111
1190
and_expr
112
1190
term
113
1190
factor
114
1190
shift_expr
115
1190
arith_expr
116
1190
NUMBER
117
1190
NAME
118
1190
[
119
1190
test_list_comp
1691
1190
{
121
1190
expr
122
1190
not_test
123
1190
False
124
1190
xor_expr
125
1190
atom
126
1190
STRING
127
1190
+
128
1190
(
129
1190
True
131
1190
-
132
1190
]
1692
1190
None
133
1190
comparison
134
1190
or_test
135
1190
test
136
1190
power
137
1190
~
138
1190
lambda
139
1190
lambdef
140
1190
not
141
1190
test_list
142
1191
}
1693
1192
in
147
1192
<
148
1192
>=
149
1192
not
150
1192
comp_op
1694
1192
!=
151
1192
>
152
1192
==
153
1192
is
154
1192
<=
155
1192
or
comparison -> expr
1192
,
comparison -> expr
1192
and
comparison -> expr
1192
:
comparison -> expr
1192
if
comparison -> expr
1193
and
1695
1193
,
and_test -> not_test
1193
or
and_test -> not_test
1193
:
and_test -> not_test
1193
if
and_test -> not_test
1194
*
atom -> False
1194
@
atom -> False
1194
<
atom -> False
1194
or
atom -> False
1194
is
atom -> False
1194
>>
atom -> False
1194
[
atom -> False
1194
/
atom -> False
1194
%
atom -> False
1194
.
atom -> False
1194
(
atom -> False
1194
in
atom -> False
1194
**
atom -> False
1194
==
atom -> False
1194
//
atom -> False
1194
:
atom -> False
1194
+
atom -> False
1194
,
atom -> False
1194
<<
atom -> False
1194
!=
atom -> False
1194
<=
atom -> False
1194
>
atom -> False
1194
^
atom -> False
1194
if
atom -> False
1194
&
atom -> False
1194
and
atom -> False
1194
|
atom -> False
1194
-
atom -> False
1194
not
atom -> False
1194
>=
atom -> False
1195
:
1696
1196
:
expr -> xor_expr
1196
not
expr -> xor_expr
1196
|
1697
1196
==
expr -> xor_expr
1196
in
expr -> xor_expr
1196
if
expr -> xor_expr
1196
>
expr -> xor_expr
1196
or
expr -> xor_expr
1196
<=
expr -> xor_expr
1196
<
expr -> xor_expr
1196
is
expr -> xor_expr
1196
>=
expr -> xor_expr
1196
!=
expr -> xor_expr
1196
,
expr -> xor_expr
1196
and
expr -> xor_expr
1197
&
atom -> STRING
1197
**
atom -> STRING
1197
%
atom -> STRING
1197
@
atom -> STRING
1197
/
atom -> STRING
1197
*
atom -> STRING
1197
^
atom -> STRING
1197
>=
atom -> STRING
1197
if
atom -> STRING
1197
<
atom -> STRING
1197
:
atom -> STRING
1197
>>
atom -> STRING
1197
.
atom -> STRING
1197
//
atom -> STRING
1197
,
atom -> STRING
1197
+
atom -> STRING
1197
<<
atom -> STRING
1197
and
atom -> STRING
1197
[
atom -> STRING
1197
or
atom -> STRING
1197
in
atom -> STRING
1197
not
atom -> STRING
1197
>
atom -> STRING
1197
(
atom -> STRING
1197
!=
atom -> STRING
1197
is
atom -> STRING
1197
==
atom -> STRING
1197
-
atom -> STRING
1197
|
atom -> STRING
1197
<=
atom -> STRING
1198
[
1698
1198
(
1699
1198
.
1700
1198
trailer
1701
1198
<<
trailer_expr -> 
1198
trailer_expr
1702
1198
@
trailer_expr -> 
1198
!=
trailer_expr -> 
1198
-
trailer_expr -> 
1198
^
trailer_expr -> 
1198
<
trailer_expr -> 
1198
/
trailer_expr -> 
1198
is
trailer_expr -> 
1198
==
trailer_expr -> 
1198
&
trailer_expr -> 
1198
>=
trailer_expr -> 
1198
or
trailer_expr -> 
1198
in
trailer_expr -> 
1198
*
trailer_expr -> 
1198
not
trailer_expr -> 
1198
**
trailer_expr -> 
1198
<=
trailer_expr -> 
1198
+
trailer_expr -> 
1198
//
trailer_expr -> 
1198
%
trailer_expr -> 
1198
>
trailer_expr -> 
1198
:
trailer_expr -> 
1198
,
trailer_expr -> 
1198
|
trailer_expr -> 
1198
if
trailer_expr -> 
1198
>>
trailer_expr -> 
1198
and
trailer_expr -> 
1199
atom_expr
1182
1199
NUMBER
1188
1199
NAME
1189
1199
[
1190
1199
{
1191
1199
False
1194
1199
STRING
1197
1199
atom
1198
1199
+
1199
1199
True
1200
1199
(
1201
1199
None
1203
1199
-
1202
1199
factor
1703
1199
power
1205
1199
~
1206
1200
!=
atom -> True
1200
:
atom -> True
1200
is
atom -> True
1200
|
atom -> True
1200
<=
atom -> True
1200
^
atom -> True
1200
%
atom -> True
1200
@
atom -> True
1200
**
atom -> True
1200
(
atom -> True
1200
not
atom -> True
1200
>>
atom -> True
1200
<
atom -> True
1200
==
atom -> True
1200
and
atom -> True
1200
in
atom -> True
1200
&
atom -> True
1200
.
atom -> True
1200
<<
atom -> True
1200
/
atom -> True
1200
*
atom -> True
1200
>
atom -> True
1200
,
atom -> True
1200
+
atom -> True
1200
>=
atom -> True
1200
or
atom -> True
1200
[
atom -> True
1200
-
atom -> True
1200
//
atom -> True
1200
if
atom -> True
1201
and_test
217
1201
atom_expr
218
1201
and_expr
219
1201
term
220
1201
factor
221
1201
shift_expr
222
1201
arith_expr
223
1201
NUMBER
224
1201
NAME
225
1201
not
226
1201
[
227
1201
{
228
1201
expr
229
1201
test_list_comp
1704
1201
not_test
231
1201
False
232
1201
xor_expr
234
1201
STRING
235
1201
lambda
236
1201
atom
237
1201
+
238
1201
True
239
1201
-
240
1201
(
241
1201
None
242
1201
comparison
243
1201
power
244
1201
)
1705
1201
~
245
1201
or_test
246
1201
test
247
1201
lambdef
248
1201
test_list
249
1202
atom_expr
1182
1202
NUMBER
1188
1202
NAME
1189
1202
[
1190
1202
factor
1706
1202
{
1191
1202
False
1194
1202
STRING
1197
1202
atom
1198
1202
+
1199
1202
True
1200
1202
(
1201
1202
None
1203
1202
-
1202
1202
power
1205
1202
~
1206
1203
!=
atom -> None
1203
//
atom -> None
1203
^
atom -> None
1203
>=
atom -> None
1203
&
atom -> None
1203
**
atom -> None
1203
,
atom -> None
1203
<
atom -> None
1203
if
atom -> None
1203
*
atom -> None
1203
>
atom -> None
1203
@
atom -> None
1203
|
atom -> None
1203
-
atom -> None
1203
%
atom -> None
1203
:
atom -> None
1203
not
atom -> None
1203
==
atom -> None
1203
in
atom -> None
1203
/
atom -> None
1203
or
atom -> None
1203
and
atom -> None
1203
+
atom -> None
1203
(
atom -> None
1203
>>
atom -> None
1203
is
atom -> None
1203
[
atom -> None
1203
<=
atom -> None
1203
<<
atom -> None
1203
.
atom -> None
1204
or
1707
1204
if
or_test -> and_test
1204
,
or_test -> and_test
1204
:
or_test -> and_test
1205
*
factor -> power
1205
>>
factor -> power
1205
>=
factor -> power
1205
<
factor -> power
1205
&
factor -> power
1205
,
factor -> power
1205
@
factor -> power
1205
|
factor -> power
1205
!=
factor -> power
1205
<=
factor -> power
1205
//
factor -> power
1205
in
factor -> power
1205
and
factor -> power
1205
+
factor -> power
1205
>
factor -> power
1205
-
factor -> power
1205
not
factor -> power
1205
is
factor -> power
1205
==
factor -> power
1205
%
factor -> power
1205
if
factor -> power
1205
or
factor -> power
1205
^
factor -> power
1205
<<
factor -> power
1205
/
factor -> power
1205
:
factor -> power
1206
atom_expr
1182
1206
NUMBER
1188
1206
NAME
1189
1206
[
1190
1206
factor
1708
1206
{
1191
1206
False
1194
1206
STRING
1197
1206
atom
1198
1206
+
1199
1206
True
1200
1206
(
1201
1206
None
1203
1206
-
1202
1206
power
1205
1206
~
1206
1207
varargslist
1709
1207
NAME
211
1207
:
1710
1207
vfpdef
212
1208
atom_expr
1182
1208
and_expr
1183
1208
term
1184
1208
factor
1185
1208
shift_expr
1186
1208
arith_expr
1187
1208
NUMBER
1188
1208
NAME
1189
1208
[
1190
1208
{
1191
1208
expr
1192
1208
False
1194
1208
xor_expr
1196
1208
STRING
1197
1208
atom
1198
1208
+
1199
1208
True
1200
1208
(
1201
1208
None
1203
1208
-
1202
1208
power
1205
1208
~
1206
1208
not
1208
1208
comparison
1209
1208
not_test
1711
1209
or
not_test -> comparison
1209
if
not_test -> comparison
1209
:
not_test -> comparison
1209
,
not_test -> comparison
1209
and
not_test -> comparison
1210
,
1712
1210
:
test_list -> test
1211
:
test -> lambdef
1211
,
test -> lambdef
1212
if
1713
1212
:
test -> or_test
1212
,
test -> or_test
1213
^
shift_expr -> arith_expr >> shift_expr
1213
in
shift_expr -> arith_expr >> shift_expr
1213
,
shift_expr -> arith_expr >> shift_expr
1213
|
shift_expr -> arith_expr >> shift_expr
1213
&
shift_expr -> arith_expr >> shift_expr
1214
,
shift_expr -> arith_expr << shift_expr
1214
^
shift_expr -> arith_expr << shift_expr
1214
&
shift_expr -> arith_expr << shift_expr
1214
in
shift_expr -> arith_expr << shift_expr
1214
|
shift_expr -> arith_expr << shift_expr
1215
in
atom -> [ test_list_comp ]
1215
@
atom -> [ test_list_comp ]
1215
**
atom -> [ test_list_comp ]
1215
-
atom -> [ test_list_comp ]
1215
&
atom -> [ test_list_comp ]
1215
/
atom -> [ test_list_comp ]
1215
<<
atom -> [ test_list_comp ]
1215
^
atom -> [ test_list_comp ]
1215
//
atom -> [ test_list_comp ]
1215
(
atom -> [ test_list_comp ]
1215
|
atom -> [ test_list_comp ]
1215
%
atom -> [ test_list_comp ]
1215
*
atom -> [ test_list_comp ]
1215
[
atom -> [ test_list_comp ]
1215
,
atom -> [ test_list_comp ]
1215
+
atom -> [ test_list_comp ]
1215
.
atom -> [ test_list_comp ]
1215
>>
atom -> [ test_list_comp ]
1216
+
term -> factor // term
1216
^
term -> factor // term
1216
|
term -> factor // term
1216
-
term -> factor // term
1216
<<
term -> factor // term
1216
&
term -> factor // term
1216
,
term -> factor // term
1216
in
term -> factor // term
1216
>>
term -> factor // term
1217
+
term -> factor / term
1217
&
term -> factor / term
1217
|
term -> factor / term
1217
-
term -> factor / term
1217
^
term -> factor / term
1217
in
term -> factor / term
1217
<<
term -> factor / term
1217
,
term -> factor / term
1217
>>
term -> factor / term
1218
>>
term -> factor % term
1218
in
term -> factor % term
1218
^
term -> factor % term
1218
<<
term -> factor % term
1218
-
term -> factor % term
1218
,
term -> factor % term
1218
|
term -> factor % term
1218
+
term -> factor % term
1218
&
term -> factor % term
1219
<<
term -> factor @ term
1219
-
term -> factor @ term
1219
>>
term -> factor @ term
1219
&
term -> factor @ term
1219
+
term -> factor @ term
1219
|
term -> factor @ term
1219
,
term -> factor @ term
1219
in
term -> factor @ term
1219
^
term -> factor @ term
1220
&
term -> factor * term
1220
|
term -> factor * term
1220
^
term -> factor * term
1220
-
term -> factor * term
1220
in
term -> factor * term
1220
+
term -> factor * term
1220
>>
term -> factor * term
1220
<<
term -> factor * term
1220
,
term -> factor * term
1221
]
1714
1222
+
trailer -> ( )
1222
/
trailer -> ( )
1222
@
trailer -> ( )
1222
.
trailer -> ( )
1222
*
trailer -> ( )
1222
%
trailer -> ( )
1222
>>
trailer -> ( )
1222
**
trailer -> ( )
1222
//
trailer -> ( )
1222
[
trailer -> ( )
1222
<<
trailer -> ( )
1222
|
trailer -> ( )
1222
(
trailer -> ( )
1222
in
trailer -> ( )
1222
-
trailer -> ( )
1222
&
trailer -> ( )
1222
,
trailer -> ( )
1222
^
trailer -> ( )
1223
)
1715
1224
/
trailer_expr -> trailer trailer_expr
1224
&
trailer_expr -> trailer trailer_expr
1224
^
trailer_expr -> trailer trailer_expr
1224
,
trailer_expr -> trailer trailer_expr
1224
*
trailer_expr -> trailer trailer_expr
1224
**
trailer_expr -> trailer trailer_expr
1224
in
trailer_expr -> trailer trailer_expr
1224
|
trailer_expr -> trailer trailer_expr
1224
-
trailer_expr -> trailer trailer_expr
1224
//
trailer_expr -> trailer trailer_expr
1224
%
trailer_expr -> trailer trailer_expr
1224
@
trailer_expr -> trailer trailer_expr
1224
>>
trailer_expr -> trailer trailer_expr
1224
<<
trailer_expr -> trailer trailer_expr
1224
+
trailer_expr -> trailer trailer_expr
1225
%
trailer -> . NAME
1225
|
trailer -> . NAME
1225
*
trailer -> . NAME
1225
/
trailer -> . NAME
1225
in
trailer -> . NAME
1225
@
trailer -> . NAME
1225
(
trailer -> . NAME
1225
^
trailer -> . NAME
1225
[
trailer -> . NAME
1225
.
trailer -> . NAME
1225
//
trailer -> . NAME
1225
+
trailer -> . NAME
1225
,
trailer -> . NAME
1225
**
trailer -> . NAME
1225
<<
trailer -> . NAME
1225
-
trailer -> . NAME
1225
&
trailer -> . NAME
1225
>>
trailer -> . NAME
1226
>>
arith_expr -> term + arith_expr
1226
&
arith_expr -> term + arith_expr
1226
,
arith_expr -> term + arith_expr
1226
^
arith_expr -> term + arith_expr
1226
|
arith_expr -> term + arith_expr
1226
in
arith_expr -> term + arith_expr
1226
<<
arith_expr -> term + arith_expr
1227
<<
arith_expr -> term - arith_expr
1227
|
arith_expr -> term - arith_expr
1227
&
arith_expr -> term - arith_expr
1227
,
arith_expr -> term - arith_expr
1227
^
arith_expr -> term - arith_expr
1227
in
arith_expr -> term - arith_expr
1227
>>
arith_expr -> term - arith_expr
1228
in
and_expr -> shift_expr & and_expr
1228
^
and_expr -> shift_expr & and_expr
1228
|
and_expr -> shift_expr & and_expr
1228
,
and_expr -> shift_expr & and_expr
1229
,
expr -> xor_expr | expr
1229
in
expr -> xor_expr | expr
1230
in
expr_list -> expr , expr_list
1231
(
dotted_name -> NAME . dotted_name
1231
NEWLINE
dotted_name -> NAME . dotted_name
1232
)
1716
1233
NEWLINE
1717
1234
+
power -> atom_expr ** factor
1234
*
power -> atom_expr ** factor
1234
/
power -> atom_expr ** factor
1234
-
power -> atom_expr ** factor
1234
>>
power -> atom_expr ** factor
1234
^
power -> atom_expr ** factor
1234
<<
power -> atom_expr ** factor
1234
|
power -> atom_expr ** factor
1234
,
power -> atom_expr ** factor
1234
%
power -> atom_expr ** factor
1234
//
power -> atom_expr ** factor
1234
&
power -> atom_expr ** factor
1234
NEWLINE
power -> atom_expr ** factor
1234
@
power -> atom_expr ** factor
1235
|
xor_expr -> and_expr ^ xor_expr
1235
,
xor_expr -> and_expr ^ xor_expr
1235
NEWLINE
xor_expr -> and_expr ^ xor_expr
1236
//
atom -> ( test_list_comp )
1236
NEWLINE
atom -> ( test_list_comp )
1236
-
atom -> ( test_list_comp )
1236
&
atom -> ( test_list_comp )
1236
+
atom -> ( test_list_comp )
1236
/
atom -> ( test_list_comp )
1236
*
atom -> ( test_list_comp )
1236
,
atom -> ( test_list_comp )
1236
(
atom -> ( test_list_comp )
1236
@
atom -> ( test_list_comp )
1236
^
atom -> ( test_list_comp )
1236
[
atom -> ( test_list_comp )
1236
.
atom -> ( test_list_comp )
1236
<<
atom -> ( test_list_comp )
1236
**
atom -> ( test_list_comp )
1236
|
atom -> ( test_list_comp )
1236
>>
atom -> ( test_list_comp )
1236
%
atom -> ( test_list_comp )
1237
&
atom -> [ test_list_comp ]
1237
@
atom -> [ test_list_comp ]
1237
**
atom -> [ test_list_comp ]
1237
-
atom -> [ test_list_comp ]
1237
/
atom -> [ test_list_comp ]
1237
<<
atom -> [ test_list_comp ]
1237
^
atom -> [ test_list_comp ]
1237
NEWLINE
atom -> [ test_list_comp ]
1237
//
atom -> [ test_list_comp ]
1237
(
atom -> [ test_list_comp ]
1237
|
atom -> [ test_list_comp ]
1237
%
atom -> [ test_list_comp ]
1237
*
atom -> [ test_list_comp ]
1237
[
atom -> [ test_list_comp ]
1237
,
atom -> [ test_list_comp ]
1237
+
atom -> [ test_list_comp ]
1237
.
atom -> [ test_list_comp ]
1237
>>
atom -> [ test_list_comp ]
1238
+
term -> factor // term
1238
^
term -> factor // term
1238
NEWLINE
term -> factor // term
1238
|
term -> factor // term
1238
-
term -> factor // term
1238
<<
term -> factor // term
1238
&
term -> factor // term
1238
,
term -> factor // term
1238
>>
term -> factor // term
1239
+
term -> factor / term
1239
&
term -> factor / term
1239
|
term -> factor / term
1239
-
term -> factor / term
1239
^
term -> factor / term
1239
<<
term -> factor / term
1239
,
term -> factor / term
1239
>>
term -> factor / term
1239
NEWLINE
term -> factor / term
1240
>>
term -> factor % term
1240
^
term -> factor % term
1240
<<
term -> factor % term
1240
NEWLINE
term -> factor % term
1240
-
term -> factor % term
1240
,
term -> factor % term
1240
|
term -> factor % term
1240
+
term -> factor % term
1240
&
term -> factor % term
1241
<<
term -> factor @ term
1241
-
term -> factor @ term
1241
>>
term -> factor @ term
1241
&
term -> factor @ term
1241
+
term -> factor @ term
1241
|
term -> factor @ term
1241
,
term -> factor @ term
1241
NEWLINE
term -> factor @ term
1241
^
term -> factor @ term
1242
&
term -> factor * term
1242
|
term -> factor * term
1242
^
term -> factor * term
1242
-
term -> factor * term
1242
+
term -> factor * term
1242
>>
term -> factor * term
1242
NEWLINE
term -> factor * term
1242
<<
term -> factor * term
1242
,
term -> factor * term
1243
]
1718
1244
+
trailer -> ( )
1244
/
trailer -> ( )
1244
@
trailer -> ( )
1244
.
trailer -> ( )
1244
*
trailer -> ( )
1244
%
trailer -> ( )
1244
>>
trailer -> ( )
1244
**
trailer -> ( )
1244
//
trailer -> ( )
1244
[
trailer -> ( )
1244
<<
trailer -> ( )
1244
|
trailer -> ( )
1244
NEWLINE
trailer -> ( )
1244
(
trailer -> ( )
1244
-
trailer -> ( )
1244
&
trailer -> ( )
1244
,
trailer -> ( )
1244
^
trailer -> ( )
1245
)
1719
1246
/
trailer_expr -> trailer trailer_expr
1246
&
trailer_expr -> trailer trailer_expr
1246
^
trailer_expr -> trailer trailer_expr
1246
,
trailer_expr -> trailer trailer_expr
1246
*
trailer_expr -> trailer trailer_expr
1246
**
trailer_expr -> trailer trailer_expr
1246
NEWLINE
trailer_expr -> trailer trailer_expr
1246
|
trailer_expr -> trailer trailer_expr
1246
-
trailer_expr -> trailer trailer_expr
1246
//
trailer_expr -> trailer trailer_expr
1246
%
trailer_expr -> trailer trailer_expr
1246
@
trailer_expr -> trailer trailer_expr
1246
>>
trailer_expr -> trailer trailer_expr
1246
<<
trailer_expr -> trailer trailer_expr
1246
+
trailer_expr -> trailer trailer_expr
1247
%
trailer -> . NAME
1247
|
trailer -> . NAME
1247
*
trailer -> . NAME
1247
/
trailer -> . NAME
1247
@
trailer -> . NAME
1247
[
trailer -> . NAME
1247
(
trailer -> . NAME
1247
^
trailer -> . NAME
1247
NEWLINE
trailer -> . NAME
1247
.
trailer -> . NAME
1247
//
trailer -> . NAME
1247
+
trailer -> . NAME
1247
,
trailer -> . NAME
1247
**
trailer -> . NAME
1247
<<
trailer -> . NAME
1247
-
trailer -> . NAME
1247
&
trailer -> . NAME
1247
>>
trailer -> . NAME
1248
<<
arith_expr -> term - arith_expr
1248
|
arith_expr -> term - arith_expr
1248
&
arith_expr -> term - arith_expr
1248
,
arith_expr -> term - arith_expr
1248
^
arith_expr -> term - arith_expr
1248
>>
arith_expr -> term - arith_expr
1248
NEWLINE
arith_expr -> term - arith_expr
1249
>>
arith_expr -> term + arith_expr
1249
NEWLINE
arith_expr -> term + arith_expr
1249
&
arith_expr -> term + arith_expr
1249
,
arith_expr -> term + arith_expr
1249
^
arith_expr -> term + arith_expr
1249
|
arith_expr -> term + arith_expr
1249
<<
arith_expr -> term + arith_expr
1250
NEWLINE
shift_expr -> arith_expr >> shift_expr
1250
^
shift_expr -> arith_expr >> shift_expr
1250
,
shift_expr -> arith_expr >> shift_expr
1250
|
shift_expr -> arith_expr >> shift_expr
1250
&
shift_expr -> arith_expr >> shift_expr
1251
,
shift_expr -> arith_expr << shift_expr
1251
NEWLINE
shift_expr -> arith_expr << shift_expr
1251
^
shift_expr -> arith_expr << shift_expr
1251
&
shift_expr -> arith_expr << shift_expr
1251
|
shift_expr -> arith_expr << shift_expr
1252
^
and_expr -> shift_expr & and_expr
1252
|
and_expr -> shift_expr & and_expr
1252
,
and_expr -> shift_expr & and_expr
1252
NEWLINE
and_expr -> shift_expr & and_expr
1253
NEWLINE
expr -> xor_expr | expr
1253
,
expr -> xor_expr | expr
1254
NEWLINE
expr_list -> expr , expr_list
1255
atom_expr
718
1255
NUMBER
724
1255
NAME
725
1255
[
726
1255
{
727
1255
False
730
1255
STRING
732
1255
atom
734
1255
+
735
1255
True
736
1255
-
737
1255
(
741
1255
factor
1720
1255
None
742
1255
power
744
1255
~
745
1256
atom_expr
718
1256
and_expr
719
1256
term
720
1256
factor
721
1256
shift_expr
722
1256
arith_expr
723
1256
NUMBER
724
1256
NAME
725
1256
[
726
1256
{
727
1256
False
730
1256
STRING
732
1256
xor_expr
1721
1256
atom
734
1256
+
735
1256
True
736
1256
-
737
1256
(
741
1256
None
742
1256
power
744
1256
~
745
1257
atom_expr
718
1257
factor
721
1257
term
720
1257
NUMBER
724
1257
NAME
725
1257
[
726
1257
{
727
1257
False
730
1257
STRING
732
1257
atom
734
1257
+
735
1257
True
736
1257
-
737
1257
(
741
1257
None
742
1257
arith_expr
1722
1257
power
744
1257
~
745
1258
atom_expr
718
1258
factor
721
1258
term
720
1258
NUMBER
724
1258
NAME
725
1258
[
726
1258
{
727
1258
False
730
1258
STRING
732
1258
atom
734
1258
+
735
1258
True
736
1258
-
737
1258
arith_expr
1723
1258
(
741
1258
None
742
1258
power
744
1258
~
745
1259
atom_expr
718
1259
factor
721
1259
NUMBER
724
1259
NAME
725
1259
[
726
1259
{
727
1259
False
730
1259
STRING
732
1259
atom
734
1259
+
735
1259
True
736
1259
-
737
1259
(
741
1259
None
742
1259
term
1724
1259
power
744
1259
~
745
1260
atom_expr
718
1260
factor
721
1260
NUMBER
724
1260
NAME
725
1260
[
726
1260
{
727
1260
False
730
1260
STRING
732
1260
atom
734
1260
+
735
1260
term
1725
1260
True
736
1260
-
737
1260
(
741
1260
None
742
1260
power
744
1260
~
745
1261
atom_expr
718
1261
term
1726
1261
factor
721
1261
NUMBER
724
1261
NAME
725
1261
[
726
1261
{
727
1261
False
730
1261
STRING
732
1261
atom
734
1261
+
735
1261
True
736
1261
-
737
1261
(
741
1261
None
742
1261
power
744
1261
~
745
1262
atom_expr
718
1262
factor
721
1262
NUMBER
724
1262
NAME
725
1262
[
726
1262
{
727
1262
False
730
1262
STRING
732
1262
atom
734
1262
+
735
1262
term
1727
1262
True
736
1262
-
737
1262
(
741
1262
None
742
1262
power
744
1262
~
745
1263
atom_expr
718
1263
factor
721
1263
NUMBER
724
1263
NAME
725
1263
[
726
1263
{
727
1263
False
730
1263
STRING
732
1263
atom
734
1263
+
735
1263
True
736
1263
-
737
1263
(
741
1263
None
742
1263
term
1728
1263
power
744
1263
~
745
1264
atom_expr
718
1264
factor
721
1264
term
720
1264
shift_expr
722
1264
arith_expr
723
1264
NUMBER
724
1264
NAME
725
1264
[
726
1264
{
727
1264
False
730
1264
STRING
732
1264
atom
734
1264
+
735
1264
True
736
1264
-
737
1264
and_expr
1729
1264
(
741
1264
None
742
1264
power
744
1264
~
745
1265
shift_expr
1730
1265
atom_expr
718
1265
factor
721
1265
term
720
1265
arith_expr
723
1265
NUMBER
724
1265
NAME
725
1265
[
726
1265
{
727
1265
False
730
1265
STRING
732
1265
atom
734
1265
+
735
1265
True
736
1265
-
737
1265
(
741
1265
None
742
1265
power
744
1265
~
745
1266
atom_expr
718
1266
factor
721
1266
term
720
1266
arith_expr
723
1266
NUMBER
724
1266
NAME
725
1266
[
726
1266
{
727
1266
False
730
1266
STRING
732
1266
atom
734
1266
+
735
1266
shift_expr
1731
1266
True
736
1266
-
737
1266
(
741
1266
None
742
1266
power
744
1266
~
745
1267
]
1732
1268
in
atom -> [ ]
1268
>=
atom -> [ ]
1268
%
atom -> [ ]
1268
is
atom -> [ ]
1268
^
atom -> [ ]
1268
//
atom -> [ ]
1268
NEWLINE
atom -> [ ]
1268
or
atom -> [ ]
1268
not
atom -> [ ]
1268
[
atom -> [ ]
1268
and
atom -> [ ]
1268
/
atom -> [ ]
1268
!=
atom -> [ ]
1268
>
atom -> [ ]
1268
=
atom -> [ ]
1268
&
atom -> [ ]
1268
**
atom -> [ ]
1268
@
atom -> [ ]
1268
==
atom -> [ ]
1268
<<
atom -> [ ]
1268
if
atom -> [ ]
1268
<
atom -> [ ]
1268
,
atom -> [ ]
1268
(
atom -> [ ]
1268
<=
atom -> [ ]
1268
*
atom -> [ ]
1268
.
atom -> [ ]
1268
>>
atom -> [ ]
1268
|
atom -> [ ]
1268
-
atom -> [ ]
1268
+
atom -> [ ]
1269
<<
atom -> { }
1269
+
atom -> { }
1269
//
atom -> { }
1269
is
atom -> { }
1269
>=
atom -> { }
1269
<=
atom -> { }
1269
>
atom -> { }
1269
*
atom -> { }
1269
^
atom -> { }
1269
%
atom -> { }
1269
>>
atom -> { }
1269
.
atom -> { }
1269
not
atom -> { }
1269
==
atom -> { }
1269
if
atom -> { }
1269
in
atom -> { }
1269
<
atom -> { }
1269
|
atom -> { }
1269
(
atom -> { }
1269
/
atom -> { }
1269
and
atom -> { }
1269
**
atom -> { }
1269
@
atom -> { }
1269
=
atom -> { }
1269
-
atom -> { }
1269
&
atom -> { }
1269
NEWLINE
atom -> { }
1269
,
atom -> { }
1269
!=
atom -> { }
1269
or
atom -> { }
1269
[
atom -> { }
1270
atom_expr
718
1270
and_expr
719
1270
term
720
1270
factor
721
1270
shift_expr
722
1270
arith_expr
723
1270
NUMBER
724
1270
NAME
725
1270
[
726
1270
{
727
1270
expr
728
1270
False
730
1270
xor_expr
731
1270
STRING
732
1270
comparison
1733
1270
atom
734
1270
+
735
1270
True
736
1270
-
737
1270
(
741
1270
None
742
1270
power
744
1270
~
745
1271
atom_expr
718
1271
and_expr
719
1271
term
720
1271
factor
721
1271
shift_expr
722
1271
arith_expr
723
1271
NUMBER
724
1271
NAME
725
1271
[
726
1271
{
727
1271
expr
728
1271
not_test
729
1271
False
730
1271
xor_expr
731
1271
STRING
732
1271
atom
734
1271
+
735
1271
True
736
1271
-
737
1271
(
741
1271
None
742
1271
and_test
1734
1271
power
744
1271
~
745
1271
comparison
747
1271
not
749
1272
atom_expr
718
1272
and_expr
719
1272
term
720
1272
factor
721
1272
shift_expr
722
1272
arith_expr
723
1272
NUMBER
724
1272
NAME
725
1272
[
726
1272
{
727
1272
False
730
1272
xor_expr
731
1272
STRING
732
1272
atom
734
1272
+
735
1272
True
736
1272
-
737
1272
(
741
1272
None
742
1272
expr
1735
1272
power
744
1272
~
745
1273
NEWLINE
yield_arg -> test_list
1273
=
yield_arg -> test_list
1274
NEWLINE
yield_expr -> yield yield_arg
1274
=
yield_expr -> yield yield_arg
1275
atom_expr
1736
1275
and_expr
1737
1275
term
1738
1275
factor
1739
1275
shift_expr
1740
1275
arith_expr
1741
1275
NUMBER
1742
1275
NAME
1743
1275
[
1744
1275
{
1745
1275
expr
1746
1275
False
1747
1275
xor_expr
1748
1275
STRING
1749
1275
+
1750
1275
True
1751
1275
-
1752
1275
and_test
1753
1275
or_test
1754
1275
(
1755
1275
None
1756
1275
lambda
1757
1275
atom
1758
1275
power
1759
1275
~
1760
1275
not_test
1761
1275
lambdef
1762
1275
comparison
1763
1275
not
1764
1275
test
1765
1276
atom_expr
472
1276
and_expr
473
1276
term
474
1276
factor
475
1276
shift_expr
476
1276
arith_expr
477
1276
NUMBER
478
1276
NAME
479
1276
[
480
1276
{
481
1276
expr
482
1276
not_test
483
1276
False
484
1276
xor_expr
485
1276
subscriptlist
1766
1276
atom
487
1276
STRING
488
1276
+
489
1276
(
490
1276
True
491
1276
-
492
1276
None
493
1276
or_test
494
1276
and_test
495
1276
power
496
1276
~
497
1276
lambda
498
1276
:
maybe_test -> 
1276
maybe_test
499
1276
test
500
1276
not
501
1276
comparison
502
1276
lambdef
503
1276
subscript
504
1277
and_test
505
1277
atom_expr
506
1277
and_expr
507
1277
term
508
1277
factor
509
1277
shift_expr
510
1277
arith_expr
511
1277
NUMBER
512
1277
NAME
513
1277
not
514
1277
[
515
1277
{
516
1277
expr
517
1277
)
1767
1277
not_test
519
1277
False
520
1277
xor_expr
521
1277
STRING
522
1277
lambda
523
1277
arglist
1768
1277
atom
525
1277
+
526
1277
True
527
1277
-
528
1277
or_test
529
1277
(
530
1277
None
531
1277
comparison
532
1277
power
533
1277
test
534
1277
~
535
1277
*
536
1277
lambdef
537
1277
**
538
1277
argument
539
1278
NAME
1769
1279
trailer_expr
1770
1279
[
1276
1279
(
1277
1279
.
1278
1279
trailer
1279
1279
<<
trailer_expr -> 
1279
@
trailer_expr -> 
1279
!=
trailer_expr -> 
1279
-
trailer_expr -> 
1279
^
trailer_expr -> 
1279
<
trailer_expr -> 
1279
NEWLINE
trailer_expr -> 
1279
/
trailer_expr -> 
1279
is
trailer_expr -> 
1279
==
trailer_expr -> 
1279
&
trailer_expr -> 
1279
>=
trailer_expr -> 
1279
or
trailer_expr -> 
1279
in
trailer_expr -> 
1279
=
trailer_expr -> 
1279
*
trailer_expr -> 
1279
not
trailer_expr -> 
1279
**
trailer_expr -> 
1279
<=
trailer_expr -> 
1279
+
trailer_expr -> 
1279
//
trailer_expr -> 
1279
%
trailer_expr -> 
1279
>
trailer_expr -> 
1279
,
trailer_expr -> 
1279
|
trailer_expr -> 
1279
if
trailer_expr -> 
1279
and
trailer_expr -> 
1279
>>
trailer_expr -> 
1280
==
atom_expr -> atom trailer_expr
1280
%
atom_expr -> atom trailer_expr
1280
+
atom_expr -> atom trailer_expr
1280
not
atom_expr -> atom trailer_expr
1280
or
atom_expr -> atom trailer_expr
1280
//
atom_expr -> atom trailer_expr
1280
and
atom_expr -> atom trailer_expr
1280
!=
atom_expr -> atom trailer_expr
1280
<<
atom_expr -> atom trailer_expr
1280
NEWLINE
atom_expr -> atom trailer_expr
1280
if
atom_expr -> atom trailer_expr
1280
-
atom_expr -> atom trailer_expr
1280
=
atom_expr -> atom trailer_expr
1280
>>
atom_expr -> atom trailer_expr
1280
**
atom_expr -> atom trailer_expr
1280
/
atom_expr -> atom trailer_expr
1280
<
atom_expr -> atom trailer_expr
1280
in
atom_expr -> atom trailer_expr
1280
&
atom_expr -> atom trailer_expr
1280
is
atom_expr -> atom trailer_expr
1280
|
atom_expr -> atom trailer_expr
1280
>
atom_expr -> atom trailer_expr
1280
>=
atom_expr -> atom trailer_expr
1280
<=
atom_expr -> atom trailer_expr
1280
@
atom_expr -> atom trailer_expr
1280
*
atom_expr -> atom trailer_expr
1280
,
atom_expr -> atom trailer_expr
1280
^
atom_expr -> atom trailer_expr
1281
<<
factor -> + factor
1281
,
factor -> + factor
1281
&
factor -> + factor
1281
>
factor -> + factor
1281
if
factor -> + factor
1281
not
factor -> + factor
1281
+
factor -> + factor
1281
^
factor -> + factor
1281
==
factor -> + factor
1281
/
factor -> + factor
1281
|
factor -> + factor
1281
>=
factor -> + factor
1281
NEWLINE
factor -> + factor
1281
%
factor -> + factor
1281
<
factor -> + factor
1281
is
factor -> + factor
1281
or
factor -> + factor
1281
@
factor -> + factor
1281
//
factor -> + factor
1281
and
factor -> + factor
1281
=
factor -> + factor
1281
-
factor -> + factor
1281
in
factor -> + factor
1281
*
factor -> + factor
1281
!=
factor -> + factor
1281
>>
factor -> + factor
1281
<=
factor -> + factor
1282
@
factor -> - factor
1282
^
factor -> - factor
1282
==
factor -> - factor
1282
in
factor -> - factor
1282
>>
factor -> - factor
1282
,
factor -> - factor
1282
//
factor -> - factor
1282
and
factor -> - factor
1282
<=
factor -> - factor
1282
!=
factor -> - factor
1282
-
factor -> - factor
1282
&
factor -> - factor
1282
=
factor -> - factor
1282
NEWLINE
factor -> - factor
1282
not
factor -> - factor
1282
>
factor -> - factor
1282
*
factor -> - factor
1282
%
factor -> - factor
1282
/
factor -> - factor
1282
<
factor -> - factor
1282
|
factor -> - factor
1282
+
factor -> - factor
1282
if
factor -> - factor
1282
<<
factor -> - factor
1282
is
factor -> - factor
1282
or
factor -> - factor
1282
>=
factor -> - factor
1283
atom_expr
718
1283
and_expr
719
1283
term
720
1283
factor
721
1283
shift_expr
722
1283
arith_expr
723
1283
NUMBER
724
1283
NAME
725
1283
[
726
1283
{
727
1283
expr
728
1283
not_test
729
1283
False
730
1283
xor_expr
731
1283
STRING
732
1283
atom
734
1283
+
735
1283
True
736
1283
-
737
1283
and_test
738
1283
(
741
1283
None
742
1283
power
744
1283
~
745
1283
comparison
747
1283
or_test
1771
1283
not
749
1284
atom_expr
718
1284
and_expr
719
1284
term
720
1284
factor
721
1284
shift_expr
722
1284
arith_expr
723
1284
NUMBER
724
1284
NAME
725
1284
[
726
1284
{
727
1284
expr
728
1284
not_test
729
1284
False
730
1284
xor_expr
731
1284
STRING
732
1284
atom
734
1284
+
735
1284
True
736
1284
-
737
1284
and_test
738
1284
test
739
1284
or_test
740
1284
(
741
1284
None
742
1284
lambda
743
1284
power
744
1284
~
745
1284
lambdef
746
1284
comparison
747
1284
not
749
1284
test_list
1772
1285
atom_expr
590
1285
and_expr
591
1285
term
592
1285
[
593
1285
shift_expr
594
1285
arith_expr
595
1285
NUMBER
596
1285
NAME
597
1285
factor
598
1285
{
599
1285
expr
600
1285
False
601
1285
xor_expr
602
1285
STRING
603
1285
+
604
1285
True
605
1285
-
606
1285
(
607
1285
None
608
1285
atom
609
1285
power
610
1285
~
611
1285
not_test
612
1285
or_test
1773
1285
not
613
1285
comparison
614
1285
and_test
615
1286
)
1774
1287
>=
atom -> ( )
1287
>>
atom -> ( )
1287
NEWLINE
atom -> ( )
1287
not
atom -> ( )
1287
if
atom -> ( )
1287
&
atom -> ( )
1287
^
atom -> ( )
1287
.
atom -> ( )
1287
/
atom -> ( )
1287
in
atom -> ( )
1287
>
atom -> ( )
1287
%
atom -> ( )
1287
(
atom -> ( )
1287
==
atom -> ( )
1287
,
atom -> ( )
1287
[
atom -> ( )
1287
<=
atom -> ( )
1287
+
atom -> ( )
1287
|
atom -> ( )
1287
-
atom -> ( )
1287
or
atom -> ( )
1287
=
atom -> ( )
1287
@
atom -> ( )
1287
<<
atom -> ( )
1287
is
atom -> ( )
1287
**
atom -> ( )
1287
*
atom -> ( )
1287
and
atom -> ( )
1287
<
atom -> ( )
1287
!=
atom -> ( )
1287
//
atom -> ( )
1288
:
1775
1289
atom_expr
718
1289
and_expr
719
1289
term
720
1289
factor
721
1289
shift_expr
722
1289
arith_expr
723
1289
NUMBER
724
1289
NAME
725
1289
[
726
1289
{
727
1289
expr
728
1289
not_test
729
1289
False
730
1289
xor_expr
731
1289
STRING
732
1289
atom
734
1289
+
735
1289
True
736
1289
-
737
1289
and_test
738
1289
or_test
740
1289
(
741
1289
None
742
1289
lambda
743
1289
power
744
1289
~
745
1289
lambdef
746
1289
test
1776
1289
comparison
747
1289
not
749
1290
=
factor -> ~ factor
1290
<<
factor -> ~ factor
1290
in
factor -> ~ factor
1290
<=
factor -> ~ factor
1290
if
factor -> ~ factor
1290
|
factor -> ~ factor
1290
<
factor -> ~ factor
1290
>>
factor -> ~ factor
1290
==
factor -> ~ factor
1290
>=
factor -> ~ factor
1290
!=
factor -> ~ factor
1290
,
factor -> ~ factor
1290
//
factor -> ~ factor
1290
*
factor -> ~ factor
1290
/
factor -> ~ factor
1290
NEWLINE
factor -> ~ factor
1290
+
factor -> ~ factor
1290
is
factor -> ~ factor
1290
not
factor -> ~ factor
1290
and
factor -> ~ factor
1290
^
factor -> ~ factor
1290
@
factor -> ~ factor
1290
>
factor -> ~ factor
1290
-
factor -> ~ factor
1290
or
factor -> ~ factor
1290
&
factor -> ~ factor
1290
%
factor -> ~ factor
1291
NEWLINE
assign -> = test_list assign
1292
if
not_test -> not not_test
1292
,
not_test -> not not_test
1292
or
not_test -> not not_test
1292
=
not_test -> not not_test
1292
NEWLINE
not_test -> not not_test
1292
and
not_test -> not not_test
1293
NEWLINE
assign -> = yield_expr assign
1294
NEWLINE
yield_arg -> test_list
1295
NEWLINE
yield_expr -> yield yield_arg
1296
atom_expr
1384
1296
and_expr
1385
1296
term
1386
1296
factor
1387
1296
shift_expr
1388
1296
arith_expr
1389
1296
NUMBER
1390
1296
NAME
1391
1296
[
1392
1296
{
1393
1296
expr
1394
1296
False
1395
1296
xor_expr
1396
1296
STRING
1397
1296
+
1398
1296
True
1399
1296
-
1400
1296
(
1401
1296
None
1402
1296
lambda
1403
1296
atom
1404
1296
or_test
1405
1296
power
1406
1296
~
1407
1296
lambdef
1408
1296
comparison
1409
1296
not_test
1411
1296
and_test
1412
1296
not
1413
1296
test
1777
1297
atom_expr
755
1297
NUMBER
761
1297
NAME
762
1297
[
763
1297
{
764
1297
False
766
1297
STRING
768
1297
+
769
1297
True
770
1297
-
771
1297
(
774
1297
factor
1778
1297
None
775
1297
atom
776
1297
power
777
1297
~
778
1298
atom_expr
755
1298
and_expr
756
1298
term
757
1298
factor
758
1298
shift_expr
759
1298
arith_expr
760
1298
NUMBER
761
1298
NAME
762
1298
[
763
1298
{
764
1298
False
766
1298
STRING
768
1298
xor_expr
1779
1298
+
769
1298
True
770
1298
-
771
1298
(
774
1298
None
775
1298
atom
776
1298
power
777
1298
~
778
1299
atom_expr
755
1299
factor
758
1299
term
757
1299
NUMBER
761
1299
NAME
762
1299
[
763
1299
{
764
1299
False
766
1299
STRING
768
1299
+
769
1299
True
770
1299
-
771
1299
(
774
1299
None
775
1299
arith_expr
1780
1299
atom
776
1299
power
777
1299
~
778
1300
atom_expr
755
1300
factor
758
1300
term
757
1300
NUMBER
761
1300
NAME
762
1300
[
763
1300
{
764
1300
False
766
1300
STRING
768
1300
+
769
1300
True
770
1300
-
771
1300
arith_expr
1781
1300
(
774
1300
None
775
1300
atom
776
1300
power
777
1300
~
778
1301
atom_expr
755
1301
factor
758
1301
NUMBER
761
1301
NAME
762
1301
[
763
1301
{
764
1301
False
766
1301
STRING
768
1301
+
769
1301
True
770
1301
-
771
1301
(
774
1301
None
775
1301
term
1782
1301
atom
776
1301
power
777
1301
~
778
1302
atom_expr
755
1302
factor
758
1302
NUMBER
761
1302
NAME
762
1302
[
763
1302
{
764
1302
False
766
1302
STRING
768
1302
+
769
1302
term
1783
1302
True
770
1302
-
771
1302
(
774
1302
None
775
1302
atom
776
1302
power
777
1302
~
778
1303
atom_expr
755
1303
term
1784
1303
factor
758
1303
NUMBER
761
1303
NAME
762
1303
[
763
1303
{
764
1303
False
766
1303
STRING
768
1303
+
769
1303
True
770
1303
-
771
1303
(
774
1303
None
775
1303
atom
776
1303
power
777
1303
~
778
1304
atom_expr
755
1304
factor
758
1304
NUMBER
761
1304
NAME
762
1304
[
763
1304
{
764
1304
False
766
1304
STRING
768
1304
+
769
1304
term
1785
1304
True
770
1304
-
771
1304
(
774
1304
None
775
1304
atom
776
1304
power
777
1304
~
778
1305
atom_expr
755
1305
factor
758
1305
NUMBER
761
1305
NAME
762
1305
[
763
1305
{
764
1305
False
766
1305
STRING
768
1305
+
769
1305
True
770
1305
-
771
1305
(
774
1305
None
775
1305
term
1786
1305
atom
776
1305
power
777
1305
~
778
1306
atom_expr
755
1306
factor
758
1306
term
757
1306
shift_expr
759
1306
arith_expr
760
1306
NUMBER
761
1306
NAME
762
1306
[
763
1306
{
764
1306
False
766
1306
STRING
768
1306
+
769
1306
True
770
1306
-
771
1306
(
774
1306
None
775
1306
atom
776
1306
power
777
1306
~
778
1306
and_expr
1787
1307
atom_expr
755
1307
factor
758
1307
term
757
1307
arith_expr
760
1307
NUMBER
761
1307
NAME
762
1307
shift_expr
1788
1307
[
763
1307
{
764
1307
False
766
1307
STRING
768
1307
+
769
1307
True
770
1307
-
771
1307
(
774
1307
None
775
1307
atom
776
1307
power
777
1307
~
778
1308
atom_expr
755
1308
factor
758
1308
term
757
1308
arith_expr
760
1308
NUMBER
761
1308
NAME
762
1308
[
763
1308
{
764
1308
False
766
1308
STRING
768
1308
+
769
1308
shift_expr
1789
1308
True
770
1308
-
771
1308
(
774
1308
None
775
1308
atom
776
1308
power
777
1308
~
778
1309
]
1790
1310
in
atom -> [ ]
1310
>=
atom -> [ ]
1310
%
atom -> [ ]
1310
is
atom -> [ ]
1310
^
atom -> [ ]
1310
//
atom -> [ ]
1310
or
atom -> [ ]
1310
not
atom -> [ ]
1310
[
atom -> [ ]
1310
and
atom -> [ ]
1310
/
atom -> [ ]
1310
!=
atom -> [ ]
1310
>
atom -> [ ]
1310
=
atom -> [ ]
1310
&
atom -> [ ]
1310
**
atom -> [ ]
1310
@
atom -> [ ]
1310
==
atom -> [ ]
1310
<<
atom -> [ ]
1310
if
atom -> [ ]
1310
<
atom -> [ ]
1310
(
atom -> [ ]
1310
<=
atom -> [ ]
1310
*
atom -> [ ]
1310
.
atom -> [ ]
1310
>>
atom -> [ ]
1310
|
atom -> [ ]
1310
-
atom -> [ ]
1310
+
atom -> [ ]
1311
<<
atom -> { }
1311
+
atom -> { }
1311
//
atom -> { }
1311
is
atom -> { }
1311
>=
atom -> { }
1311
<=
atom -> { }
1311
>
atom -> { }
1311
*
atom -> { }
1311
^
atom -> { }
1311
%
atom -> { }
1311
>>
atom -> { }
1311
.
atom -> { }
1311
not
atom -> { }
1311
==
atom -> { }
1311
if
atom -> { }
1311
in
atom -> { }
1311
<
atom -> { }
1311
|
atom -> { }
1311
(
atom -> { }
1311
/
atom -> { }
1311
and
atom -> { }
1311
**
atom -> { }
1311
@
atom -> { }
1311
=
atom -> { }
1311
-
atom -> { }
1311
&
atom -> { }
1311
!=
atom -> { }
1311
or
atom -> { }
1311
[
atom -> { }
1312
atom_expr
755
1312
and_expr
756
1312
term
757
1312
factor
758
1312
shift_expr
759
1312
arith_expr
760
1312
NUMBER
761
1312
NAME
762
1312
[
763
1312
{
764
1312
expr
765
1312
False
766
1312
xor_expr
767
1312
STRING
768
1312
comparison
1791
1312
+
769
1312
True
770
1312
-
771
1312
(
774
1312
None
775
1312
atom
776
1312
power
777
1312
~
778
1313
atom_expr
755
1313
and_expr
756
1313
term
757
1313
factor
758
1313
shift_expr
759
1313
arith_expr
760
1313
NUMBER
761
1313
NAME
762
1313
[
763
1313
{
764
1313
False
766
1313
xor_expr
767
1313
STRING
768
1313
+
769
1313
True
770
1313
-
771
1313
(
774
1313
None
775
1313
expr
1792
1313
atom
776
1313
power
777
1313
~
778
1314
<<
factor -> + factor
1314
&
factor -> + factor
1314
>
factor -> + factor
1314
if
factor -> + factor
1314
not
factor -> + factor
1314
+
factor -> + factor
1314
^
factor -> + factor
1314
==
factor -> + factor
1314
/
factor -> + factor
1314
|
factor -> + factor
1314
>=
factor -> + factor
1314
%
factor -> + factor
1314
<
factor -> + factor
1314
is
factor -> + factor
1314
or
factor -> + factor
1314
@
factor -> + factor
1314
//
factor -> + factor
1314
and
factor -> + factor
1314
=
factor -> + factor
1314
-
factor -> + factor
1314
in
factor -> + factor
1314
*
factor -> + factor
1314
!=
factor -> + factor
1314
>>
factor -> + factor
1314
<=
factor -> + factor
1315
@
factor -> - factor
1315
^
factor -> - factor
1315
==
factor -> - factor
1315
in
factor -> - factor
1315
>>
factor -> - factor
1315
//
factor -> - factor
1315
and
factor -> - factor
1315
<=
factor -> - factor
1315
!=
factor -> - factor
1315
-
factor -> - factor
1315
&
factor -> - factor
1315
=
factor -> - factor
1315
not
factor -> - factor
1315
>
factor -> - factor
1315
*
factor -> - factor
1315
%
factor -> - factor
1315
/
factor -> - factor
1315
<
factor -> - factor
1315
|
factor -> - factor
1315
+
factor -> - factor
1315
if
factor -> - factor
1315
<<
factor -> - factor
1315
is
factor -> - factor
1315
or
factor -> - factor
1315
>=
factor -> - factor
1316
atom_expr
755
1316
and_expr
756
1316
term
757
1316
factor
758
1316
shift_expr
759
1316
arith_expr
760
1316
NUMBER
761
1316
NAME
762
1316
[
763
1316
{
764
1316
expr
765
1316
False
766
1316
xor_expr
767
1316
STRING
768
1316
+
769
1316
True
770
1316
-
771
1316
and_test
772
1316
(
774
1316
None
775
1316
atom
776
1316
power
777
1316
~
778
1316
not_test
779
1316
comparison
780
1316
or_test
1793
1316
not
782
1317
atom_expr
590
1317
and_expr
591
1317
term
592
1317
[
593
1317
shift_expr
594
1317
arith_expr
595
1317
NUMBER
596
1317
NAME
597
1317
factor
598
1317
{
599
1317
expr
600
1317
False
601
1317
xor_expr
602
1317
STRING
603
1317
+
604
1317
True
605
1317
-
606
1317
(
607
1317
None
608
1317
atom
609
1317
power
610
1317
~
611
1317
not_test
612
1317
or_test
1794
1317
not
613
1317
comparison
614
1317
and_test
615
1318
)
1795
1319
>=
atom -> ( )
1319
>>
atom -> ( )
1319
not
atom -> ( )
1319
if
atom -> ( )
1319
&
atom -> ( )
1319
^
atom -> ( )
1319
.
atom -> ( )
1319
/
atom -> ( )
1319
in
atom -> ( )
1319
>
atom -> ( )
1319
%
atom -> ( )
1319
(
atom -> ( )
1319
==
atom -> ( )
1319
[
atom -> ( )
1319
<=
atom -> ( )
1319
+
atom -> ( )
1319
|
atom -> ( )
1319
-
atom -> ( )
1319
or
atom -> ( )
1319
=
atom -> ( )
1319
@
atom -> ( )
1319
<<
atom -> ( )
1319
is
atom -> ( )
1319
**
atom -> ( )
1319
*
atom -> ( )
1319
and
atom -> ( )
1319
<
atom -> ( )
1319
!=
atom -> ( )
1319
//
atom -> ( )
1320
atom_expr
472
1320
and_expr
473
1320
term
474
1320
factor
475
1320
shift_expr
476
1320
arith_expr
477
1320
NUMBER
478
1320
NAME
479
1320
[
480
1320
{
481
1320
expr
482
1320
not_test
483
1320
False
484
1320
xor_expr
485
1320
atom
487
1320
subscriptlist
1796
1320
STRING
488
1320
+
489
1320
(
490
1320
True
491
1320
-
492
1320
None
493
1320
or_test
494
1320
and_test
495
1320
power
496
1320
~
497
1320
lambda
498
1320
:
maybe_test -> 
1320
maybe_test
499
1320
test
500
1320
not
501
1320
comparison
502
1320
lambdef
503
1320
subscript
504
1321
and_test
505
1321
atom_expr
506
1321
and_expr
507
1321
term
508
1321
factor
509
1321
shift_expr
510
1321
arith_expr
511
1321
NUMBER
512
1321
NAME
513
1321
not
514
1321
[
515
1321
{
516
1321
expr
517
1321
not_test
519
1321
False
520
1321
xor_expr
521
1321
STRING
522
1321
lambda
523
1321
arglist
1797
1321
atom
525
1321
)
1798
1321
+
526
1321
True
527
1321
-
528
1321
or_test
529
1321
(
530
1321
None
531
1321
comparison
532
1321
power
533
1321
test
534
1321
~
535
1321
*
536
1321
lambdef
537
1321
**
538
1321
argument
539
1322
NAME
1799
1323
trailer_expr
1800
1323
[
1320
1323
(
1321
1323
.
1322
1323
trailer
1323
1323
<<
trailer_expr -> 
1323
@
trailer_expr -> 
1323
!=
trailer_expr -> 
1323
-
trailer_expr -> 
1323
^
trailer_expr -> 
1323
<
trailer_expr -> 
1323
/
trailer_expr -> 
1323
is
trailer_expr -> 
1323
==
trailer_expr -> 
1323
&
trailer_expr -> 
1323
>=
trailer_expr -> 
1323
or
trailer_expr -> 
1323
in
trailer_expr -> 
1323
=
trailer_expr -> 
1323
*
trailer_expr -> 
1323
not
trailer_expr -> 
1323
**
trailer_expr -> 
1323
<=
trailer_expr -> 
1323
+
trailer_expr -> 
1323
//
trailer_expr -> 
1323
%
trailer_expr -> 
1323
>
trailer_expr -> 
1323
|
trailer_expr -> 
1323
if
trailer_expr -> 
1323
and
trailer_expr -> 
1323
>>
trailer_expr -> 
1324
==
atom_expr -> atom trailer_expr
1324
%
atom_expr -> atom trailer_expr
1324
+
atom_expr -> atom trailer_expr
1324
not
atom_expr -> atom trailer_expr
1324
or
atom_expr -> atom trailer_expr
1324
//
atom_expr -> atom trailer_expr
1324
and
atom_expr -> atom trailer_expr
1324
!=
atom_expr -> atom trailer_expr
1324
<<
atom_expr -> atom trailer_expr
1324
if
atom_expr -> atom trailer_expr
1324
-
atom_expr -> atom trailer_expr
1324
=
atom_expr -> atom trailer_expr
1324
>>
atom_expr -> atom trailer_expr
1324
**
atom_expr -> atom trailer_expr
1324
/
atom_expr -> atom trailer_expr
1324
<
atom_expr -> atom trailer_expr
1324
in
atom_expr -> atom trailer_expr
1324
&
atom_expr -> atom trailer_expr
1324
is
atom_expr -> atom trailer_expr
1324
|
atom_expr -> atom trailer_expr
1324
>
atom_expr -> atom trailer_expr
1324
>=
atom_expr -> atom trailer_expr
1324
<=
atom_expr -> atom trailer_expr
1324
@
atom_expr -> atom trailer_expr
1324
*
atom_expr -> atom trailer_expr
1324
^
atom_expr -> atom trailer_expr
1325
=
factor -> ~ factor
1325
<<
factor -> ~ factor
1325
in
factor -> ~ factor
1325
<=
factor -> ~ factor
1325
if
factor -> ~ factor
1325
|
factor -> ~ factor
1325
<
factor -> ~ factor
1325
>>
factor -> ~ factor
1325
==
factor -> ~ factor
1325
>=
factor -> ~ factor
1325
!=
factor -> ~ factor
1325
//
factor -> ~ factor
1325
*
factor -> ~ factor
1325
/
factor -> ~ factor
1325
+
factor -> ~ factor
1325
is
factor -> ~ factor
1325
not
factor -> ~ factor
1325
and
factor -> ~ factor
1325
^
factor -> ~ factor
1325
@
factor -> ~ factor
1325
>
factor -> ~ factor
1325
-
factor -> ~ factor
1325
or
factor -> ~ factor
1325
&
factor -> ~ factor
1325
%
factor -> ~ factor
1326
atom_expr
755
1326
and_expr
756
1326
term
757
1326
factor
758
1326
shift_expr
759
1326
arith_expr
760
1326
NUMBER
761
1326
NAME
762
1326
[
763
1326
{
764
1326
expr
765
1326
False
766
1326
xor_expr
767
1326
STRING
768
1326
+
769
1326
True
770
1326
-
771
1326
(
774
1326
None
775
1326
atom
776
1326
and_test
1801
1326
power
777
1326
~
778
1326
not_test
779
1326
comparison
780
1326
not
782
1327
:
1802
1328
atom_expr
755
1328
and_expr
756
1328
term
757
1328
factor
758
1328
shift_expr
759
1328
arith_expr
760
1328
NUMBER
761
1328
NAME
762
1328
[
763
1328
{
764
1328
expr
765
1328
False
766
1328
xor_expr
767
1328
STRING
768
1328
+
769
1328
True
770
1328
-
771
1328
and_test
772
1328
or_test
773
1328
(
774
1328
None
775
1328
atom
776
1328
power
777
1328
~
778
1328
not_test
779
1328
comparison
780
1328
lambda
781
1328
not
782
1328
test
1803
1328
lambdef
784
1329
if
not_test -> not not_test
1329
and
not_test -> not not_test
1329
or
not_test -> not not_test
1329
=
not_test -> not not_test
1330
atom_expr
1384
1330
and_expr
1385
1330
term
1386
1330
factor
1387
1330
shift_expr
1388
1330
arith_expr
1389
1330
NUMBER
1390
1330
NAME
1391
1330
[
1392
1330
{
1393
1330
expr
1394
1330
False
1395
1330
xor_expr
1396
1330
STRING
1397
1330
+
1398
1330
True
1399
1330
-
1400
1330
(
1401
1330
None
1402
1330
lambda
1403
1330
atom
1404
1330
or_test
1405
1330
power
1406
1330
~
1407
1330
lambdef
1408
1330
comparison
1409
1330
not_test
1411
1330
and_test
1412
1330
not
1413
1330
test
1804
1331
NEWLINE
namelist -> NAME , namelist
1332
*
power -> atom_expr ** factor
1332
in
power -> atom_expr ** factor
1332
<
power -> atom_expr ** factor
1332
if
power -> atom_expr ** factor
1332
-
power -> atom_expr ** factor
1332
>>
power -> atom_expr ** factor
1332
<=
power -> atom_expr ** factor
1332
and
power -> atom_expr ** factor
1332
==
power -> atom_expr ** factor
1332
NEWLINE
power -> atom_expr ** factor
1332
%
power -> atom_expr ** factor
1332
/
power -> atom_expr ** factor
1332
^
power -> atom_expr ** factor
1332
<<
power -> atom_expr ** factor
1332
,
power -> atom_expr ** factor
1332
>
power -> atom_expr ** factor
1332
//
power -> atom_expr ** factor
1332
is
power -> atom_expr ** factor
1332
@
power -> atom_expr ** factor
1332
+
power -> atom_expr ** factor
1332
|
power -> atom_expr ** factor
1332
!=
power -> atom_expr ** factor
1332
>=
power -> atom_expr ** factor
1332
or
power -> atom_expr ** factor
1332
&
power -> atom_expr ** factor
1332
not
power -> atom_expr ** factor
1333
and
xor_expr -> and_expr ^ xor_expr
1333
<
xor_expr -> and_expr ^ xor_expr
1333
>
xor_expr -> and_expr ^ xor_expr
1333
in
xor_expr -> and_expr ^ xor_expr
1333
|
xor_expr -> and_expr ^ xor_expr
1333
<=
xor_expr -> and_expr ^ xor_expr
1333
NEWLINE
xor_expr -> and_expr ^ xor_expr
1333
!=
xor_expr -> and_expr ^ xor_expr
1333
not
xor_expr -> and_expr ^ xor_expr
1333
or
xor_expr -> and_expr ^ xor_expr
1333
if
xor_expr -> and_expr ^ xor_expr
1333
is
xor_expr -> and_expr ^ xor_expr
1333
==
xor_expr -> and_expr ^ xor_expr
1333
,
xor_expr -> and_expr ^ xor_expr
1333
>=
xor_expr -> and_expr ^ xor_expr
1334
<=
arith_expr -> term + arith_expr
1334
NEWLINE
arith_expr -> term + arith_expr
1334
&
arith_expr -> term + arith_expr
1334
>
arith_expr -> term + arith_expr
1334
,
arith_expr -> term + arith_expr
1334
>=
arith_expr -> term + arith_expr
1334
not
arith_expr -> term + arith_expr
1334
|
arith_expr -> term + arith_expr
1334
in
arith_expr -> term + arith_expr
1334
if
arith_expr -> term + arith_expr
1334
>>
arith_expr -> term + arith_expr
1334
is
arith_expr -> term + arith_expr
1334
^
arith_expr -> term + arith_expr
1334
<<
arith_expr -> term + arith_expr
1334
<
arith_expr -> term + arith_expr
1334
==
arith_expr -> term + arith_expr
1334
!=
arith_expr -> term + arith_expr
1334
or
arith_expr -> term + arith_expr
1334
and
arith_expr -> term + arith_expr
1335
<=
arith_expr -> term - arith_expr
1335
if
arith_expr -> term - arith_expr
1335
not
arith_expr -> term - arith_expr
1335
|
arith_expr -> term - arith_expr
1335
,
arith_expr -> term - arith_expr
1335
>>
arith_expr -> term - arith_expr
1335
NEWLINE
arith_expr -> term - arith_expr
1335
>=
arith_expr -> term - arith_expr
1335
<<
arith_expr -> term - arith_expr
1335
is
arith_expr -> term - arith_expr
1335
!=
arith_expr -> term - arith_expr
1335
in
arith_expr -> term - arith_expr
1335
<
arith_expr -> term - arith_expr
1335
or
arith_expr -> term - arith_expr
1335
==
arith_expr -> term - arith_expr
1335
and
arith_expr -> term - arith_expr
1335
&
arith_expr -> term - arith_expr
1335
^
arith_expr -> term - arith_expr
1335
>
arith_expr -> term - arith_expr
1336
|
term -> factor * term
1336
-
term -> factor * term
1336
in
term -> factor * term
1336
and
term -> factor * term
1336
NEWLINE
term -> factor * term
1336
<<
term -> factor * term
1336
>=
term -> factor * term
1336
if
term -> factor * term
1336
or
term -> factor * term
1336
<=
term -> factor * term
1336
is
term -> factor * term
1336
^
term -> factor * term
1336
!=
term -> factor * term
1336
==
term -> factor * term
1336
,
term -> factor * term
1336
&
term -> factor * term
1336
>
term -> factor * term
1336
not
term -> factor * term
1336
<
term -> factor * term
1336
+
term -> factor * term
1336
>>
term -> factor * term
1337
!=
term -> factor % term
1337
>>
term -> factor % term
1337
==
term -> factor % term
1337
>=
term -> factor % term
1337
,
term -> factor % term
1337
^
term -> factor % term
1337
not
term -> factor % term
1337
or
term -> factor % term
1337
if
term -> factor % term
1337
<=
term -> factor % term
1337
<
term -> factor % term
1337
is
term -> factor % term
1337
-
term -> factor % term
1337
in
term -> factor % term
1337
>
term -> factor % term
1337
<<
term -> factor % term
1337
and
term -> factor % term
1337
NEWLINE
term -> factor % term
1337
|
term -> factor % term
1337
+
term -> factor % term
1337
&
term -> factor % term
1338
is
term -> factor // term
1338
if
term -> factor // term
1338
>
term -> factor // term
1338
==
term -> factor // term
1338
+
term -> factor // term
1338
^
term -> factor // term
1338
-
term -> factor // term
1338
,
term -> factor // term
1338
in
term -> factor // term
1338
>>
term -> factor // term
1338
NEWLINE
term -> factor // term
1338
|
term -> factor // term
1338
<<
term -> factor // term
1338
!=
term -> factor // term
1338
&
term -> factor // term
1338
not
term -> factor // term
1338
<=
term -> factor // term
1338
<
term -> factor // term
1338
and
term -> factor // term
1338
>=
term -> factor // term
1338
or
term -> factor // term
1339
>=
term -> factor / term
1339
!=
term -> factor / term
1339
not
term -> factor / term
1339
^
term -> factor / term
1339
in
term -> factor / term
1339
and
term -> factor / term
1339
<<
term -> factor / term
1339
,
term -> factor / term
1339
+
term -> factor / term
1339
>
term -> factor / term
1339
|
term -> factor / term
1339
or
term -> factor / term
1339
if
term -> factor / term
1339
>>
term -> factor / term
1339
NEWLINE
term -> factor / term
1339
<
term -> factor / term
1339
&
term -> factor / term
1339
-
term -> factor / term
1339
is
term -> factor / term
1339
==
term -> factor / term
1339
<=
term -> factor / term
1340
-
term -> factor @ term
1340
&
term -> factor @ term
1340
^
term -> factor @ term
1340
NEWLINE
term -> factor @ term
1340
<
term -> factor @ term
1340
!=
term -> factor @ term
1340
<<
term -> factor @ term
1340
is
term -> factor @ term
1340
<=
term -> factor @ term
1340
and
term -> factor @ term
1340
+
term -> factor @ term
1340
,
term -> factor @ term
1340
>
term -> factor @ term
1340
if
term -> factor @ term
1340
not
term -> factor @ term
1340
>>
term -> factor @ term
1340
>=
term -> factor @ term
1340
|
term -> factor @ term
1340
in
term -> factor @ term
1340
==
term -> factor @ term
1340
or
term -> factor @ term
1341
if
and_expr -> shift_expr & and_expr
1341
!=
and_expr -> shift_expr & and_expr
1341
<=
and_expr -> shift_expr & and_expr
1341
not
and_expr -> shift_expr & and_expr
1341
,
and_expr -> shift_expr & and_expr
1341
^
and_expr -> shift_expr & and_expr
1341
|
and_expr -> shift_expr & and_expr
1341
or
and_expr -> shift_expr & and_expr
1341
in
and_expr -> shift_expr & and_expr
1341
>
and_expr -> shift_expr & and_expr
1341
and
and_expr -> shift_expr & and_expr
1341
==
and_expr -> shift_expr & and_expr
1341
NEWLINE
and_expr -> shift_expr & and_expr
1341
<
and_expr -> shift_expr & and_expr
1341
is
and_expr -> shift_expr & and_expr
1341
>=
and_expr -> shift_expr & and_expr
1342
,
shift_expr -> arith_expr << shift_expr
1342
NEWLINE
shift_expr -> arith_expr << shift_expr
1342
^
shift_expr -> arith_expr << shift_expr
1342
|
shift_expr -> arith_expr << shift_expr
1342
&
shift_expr -> arith_expr << shift_expr
1342
and
shift_expr -> arith_expr << shift_expr
1342
is
shift_expr -> arith_expr << shift_expr
1342
in
shift_expr -> arith_expr << shift_expr
1342
<=
shift_expr -> arith_expr << shift_expr
1342
<
shift_expr -> arith_expr << shift_expr
1342
not
shift_expr -> arith_expr << shift_expr
1342
==
shift_expr -> arith_expr << shift_expr
1342
>=
shift_expr -> arith_expr << shift_expr
1342
if
shift_expr -> arith_expr << shift_expr
1342
>
shift_expr -> arith_expr << shift_expr
1342
or
shift_expr -> arith_expr << shift_expr
1342
!=
shift_expr -> arith_expr << shift_expr
1343
or
shift_expr -> arith_expr >> shift_expr
1343
and
shift_expr -> arith_expr >> shift_expr
1343
>=
shift_expr -> arith_expr >> shift_expr
1343
NEWLINE
shift_expr -> arith_expr >> shift_expr
1343
not
shift_expr -> arith_expr >> shift_expr
1343
^
shift_expr -> arith_expr >> shift_expr
1343
is
shift_expr -> arith_expr >> shift_expr
1343
if
shift_expr -> arith_expr >> shift_expr
1343
in
shift_expr -> arith_expr >> shift_expr
1343
<=
shift_expr -> arith_expr >> shift_expr
1343
==
shift_expr -> arith_expr >> shift_expr
1343
,
shift_expr -> arith_expr >> shift_expr
1343
<
shift_expr -> arith_expr >> shift_expr
1343
!=
shift_expr -> arith_expr >> shift_expr
1343
|
shift_expr -> arith_expr >> shift_expr
1343
>
shift_expr -> arith_expr >> shift_expr
1343
&
shift_expr -> arith_expr >> shift_expr
1344
and
atom -> [ test_list_comp ]
1344
<=
atom -> [ test_list_comp ]
1344
**
atom -> [ test_list_comp ]
1344
^
atom -> [ test_list_comp ]
1344
NEWLINE
atom -> [ test_list_comp ]
1344
[
atom -> [ test_list_comp ]
1344
,
atom -> [ test_list_comp ]
1344
!=
atom -> [ test_list_comp ]
1344
<
atom -> [ test_list_comp ]
1344
/
atom -> [ test_list_comp ]
1344
-
atom -> [ test_list_comp ]
1344
>=
atom -> [ test_list_comp ]
1344
if
atom -> [ test_list_comp ]
1344
%
atom -> [ test_list_comp ]
1344
is
atom -> [ test_list_comp ]
1344
+
atom -> [ test_list_comp ]
1344
&
atom -> [ test_list_comp ]
1344
@
atom -> [ test_list_comp ]
1344
or
atom -> [ test_list_comp ]
1344
in
atom -> [ test_list_comp ]
1344
==
atom -> [ test_list_comp ]
1344
not
atom -> [ test_list_comp ]
1344
.
atom -> [ test_list_comp ]
1344
|
atom -> [ test_list_comp ]
1344
>
atom -> [ test_list_comp ]
1344
<<
atom -> [ test_list_comp ]
1344
//
atom -> [ test_list_comp ]
1344
(
atom -> [ test_list_comp ]
1344
*
atom -> [ test_list_comp ]
1344
>>
atom -> [ test_list_comp ]
1345
if
comparison -> expr comp_op comparison
1345
or
comparison -> expr comp_op comparison
1345
NEWLINE
comparison -> expr comp_op comparison
1345
and
comparison -> expr comp_op comparison
1345
,
comparison -> expr comp_op comparison
1346
,
and_test -> not_test and and_test
1346
NEWLINE
and_test -> not_test and and_test
1346
or
and_test -> not_test and and_test
1346
if
and_test -> not_test and and_test
1347
NEWLINE
expr -> xor_expr | expr
1347
>
expr -> xor_expr | expr
1347
is
expr -> xor_expr | expr
1347
<
expr -> xor_expr | expr
1347
if
expr -> xor_expr | expr
1347
>=
expr -> xor_expr | expr
1347
or
expr -> xor_expr | expr
1347
and
expr -> xor_expr | expr
1347
in
expr -> xor_expr | expr
1347
!=
expr -> xor_expr | expr
1347
<=
expr -> xor_expr | expr
1347
==
expr -> xor_expr | expr
1347
,
expr -> xor_expr | expr
1347
not
expr -> xor_expr | expr
1348
]
1805
1349
<
trailer -> ( )
1349
.
trailer -> ( )
1349
*
trailer -> ( )
1349
or
trailer -> ( )
1349
is
trailer -> ( )
1349
/
trailer -> ( )
1349
+
trailer -> ( )
1349
@
trailer -> ( )
1349
>
trailer -> ( )
1349
//
trailer -> ( )
1349
|
trailer -> ( )
1349
!=
trailer -> ( )
1349
&
trailer -> ( )
1349
^
trailer -> ( )
1349
<=
trailer -> ( )
1349
%
trailer -> ( )
1349
>>
trailer -> ( )
1349
**
trailer -> ( )
1349
and
trailer -> ( )
1349
(
trailer -> ( )
1349
,
trailer -> ( )
1349
==
trailer -> ( )
1349
if
trailer -> ( )
1349
[
trailer -> ( )
1349
<<
trailer -> ( )
1349
NEWLINE
trailer -> ( )
1349
in
trailer -> ( )
1349
-
trailer -> ( )
1349
not
trailer -> ( )
1349
>=
trailer -> ( )
1350
)
1806
1351
|
trailer -> . NAME
1351
@
trailer -> . NAME
1351
^
trailer -> . NAME
1351
>
trailer -> . NAME
1351
+
trailer -> . NAME
1351
.
trailer -> . NAME
1351
!=
trailer -> . NAME
1351
<<
trailer -> . NAME
1351
<=
trailer -> . NAME
1351
[
trailer -> . NAME
1351
*
trailer -> . NAME
1351
(
trailer -> . NAME
1351
//
trailer -> . NAME
1351
**
trailer -> . NAME
1351
-
trailer -> . NAME
1351
in
trailer -> . NAME
1351
>=
trailer -> . NAME
1351
&
trailer -> . NAME
1351
,
trailer -> . NAME
1351
==
trailer -> . NAME
1351
or
trailer -> . NAME
1351
and
trailer -> . NAME
1351
%
trailer -> . NAME
1351
is
trailer -> . NAME
1351
<
trailer -> . NAME
1351
not
trailer -> . NAME
1351
/
trailer -> . NAME
1351
if
trailer -> . NAME
1351
NEWLINE
trailer -> . NAME
1351
>>
trailer -> . NAME
1352
&
trailer_expr -> trailer trailer_expr
1352
not
trailer_expr -> trailer trailer_expr
1352
and
trailer_expr -> trailer trailer_expr
1352
+
trailer_expr -> trailer trailer_expr
1352
==
trailer_expr -> trailer trailer_expr
1352
**
trailer_expr -> trailer trailer_expr
1352
/
trailer_expr -> trailer trailer_expr
1352
^
trailer_expr -> trailer trailer_expr
1352
,
trailer_expr -> trailer trailer_expr
1352
>
trailer_expr -> trailer trailer_expr
1352
*
trailer_expr -> trailer trailer_expr
1352
NEWLINE
trailer_expr -> trailer trailer_expr
1352
//
trailer_expr -> trailer trailer_expr
1352
>>
trailer_expr -> trailer trailer_expr
1352
<<
trailer_expr -> trailer trailer_expr
1352
>=
trailer_expr -> trailer trailer_expr
1352
<=
trailer_expr -> trailer trailer_expr
1352
-
trailer_expr -> trailer trailer_expr
1352
is
trailer_expr -> trailer trailer_expr
1352
in
trailer_expr -> trailer trailer_expr
1352
<
trailer_expr -> trailer trailer_expr
1352
|
trailer_expr -> trailer trailer_expr
1352
if
trailer_expr -> trailer trailer_expr
1352
%
trailer_expr -> trailer trailer_expr
1352
@
trailer_expr -> trailer trailer_expr
1352
!=
trailer_expr -> trailer trailer_expr
1352
or
trailer_expr -> trailer trailer_expr
1353
NEWLINE
test_list -> test , test_list
1354
NEWLINE
atom -> ( test_list_comp )
1354
if
atom -> ( test_list_comp )
1354
or
atom -> ( test_list_comp )
1354
*
atom -> ( test_list_comp )
1354
|
atom -> ( test_list_comp )
1354
>>
atom -> ( test_list_comp )
1354
%
atom -> ( test_list_comp )
1354
not
atom -> ( test_list_comp )
1354
//
atom -> ( test_list_comp )
1354
+
atom -> ( test_list_comp )
1354
and
atom -> ( test_list_comp )
1354
>
atom -> ( test_list_comp )
1354
[
atom -> ( test_list_comp )
1354
^
atom -> ( test_list_comp )
1354
!=
atom -> ( test_list_comp )
1354
<<
atom -> ( test_list_comp )
1354
**
atom -> ( test_list_comp )
1354
is
atom -> ( test_list_comp )
1354
<=
atom -> ( test_list_comp )
1354
-
atom -> ( test_list_comp )
1354
&
atom -> ( test_list_comp )
1354
(
atom -> ( test_list_comp )
1354
,
atom -> ( test_list_comp )
1354
in
atom -> ( test_list_comp )
1354
@
atom -> ( test_list_comp )
1354
.
atom -> ( test_list_comp )
1354
<
atom -> ( test_list_comp )
1354
/
atom -> ( test_list_comp )
1354
==
atom -> ( test_list_comp )
1354
>=
atom -> ( test_list_comp )
1355
,
lambdef -> lambda : test
1355
NEWLINE
lambdef -> lambda : test
1356
atom_expr
325
1356
and_expr
326
1356
term
327
1356
factor
328
1356
shift_expr
329
1356
arith_expr
330
1356
NUMBER
331
1356
NAME
332
1356
[
333
1356
{
334
1356
expr
335
1356
not_test
336
1356
False
337
1356
xor_expr
338
1356
STRING
339
1356
atom
340
1356
+
341
1356
True
342
1356
-
343
1356
(
345
1356
None
346
1356
lambda
347
1356
or_test
348
1356
and_test
349
1356
power
350
1356
~
351
1356
test
1807
1356
lambdef
352
1356
comparison
353
1356
not
354
1357
else
1808
1358
,
or_test -> and_test or or_test
1358
NEWLINE
or_test -> and_test or or_test
1358
if
or_test -> and_test or or_test
1359
*
power -> atom_expr ** factor
1359
in
power -> atom_expr ** factor
1359
<
power -> atom_expr ** factor
1359
if
power -> atom_expr ** factor
1359
-
power -> atom_expr ** factor
1359
>>
power -> atom_expr ** factor
1359
<=
power -> atom_expr ** factor
1359
and
power -> atom_expr ** factor
1359
from
power -> atom_expr ** factor
1359
==
power -> atom_expr ** factor
1359
NEWLINE
power -> atom_expr ** factor
1359
%
power -> atom_expr ** factor
1359
/
power -> atom_expr ** factor
1359
^
power -> atom_expr ** factor
1359
<<
power -> atom_expr ** factor
1359
>
power -> atom_expr ** factor
1359
//
power -> atom_expr ** factor
1359
is
power -> atom_expr ** factor
1359
@
power -> atom_expr ** factor
1359
+
power -> atom_expr ** factor
1359
|
power -> atom_expr ** factor
1359
!=
power -> atom_expr ** factor
1359
>=
power -> atom_expr ** factor
1359
or
power -> atom_expr ** factor
1359
&
power -> atom_expr ** factor
1359
not
power -> atom_expr ** factor
1360
and
xor_expr -> and_expr ^ xor_expr
1360
<
xor_expr -> and_expr ^ xor_expr
1360
>
xor_expr -> and_expr ^ xor_expr
1360
in
xor_expr -> and_expr ^ xor_expr
1360
|
xor_expr -> and_expr ^ xor_expr
1360
from
xor_expr -> and_expr ^ xor_expr
1360
<=
xor_expr -> and_expr ^ xor_expr
1360
NEWLINE
xor_expr -> and_expr ^ xor_expr
1360
not
xor_expr -> and_expr ^ xor_expr
1360
or
xor_expr -> and_expr ^ xor_expr
1360
if
xor_expr -> and_expr ^ xor_expr
1360
is
xor_expr -> and_expr ^ xor_expr
1360
==
xor_expr -> and_expr ^ xor_expr
1360
!=
xor_expr -> and_expr ^ xor_expr
1360
>=
xor_expr -> and_expr ^ xor_expr
1361
<=
arith_expr -> term + arith_expr
1361
NEWLINE
arith_expr -> term + arith_expr
1361
&
arith_expr -> term + arith_expr
1361
>
arith_expr -> term + arith_expr
1361
>=
arith_expr -> term + arith_expr
1361
not
arith_expr -> term + arith_expr
1361
|
arith_expr -> term + arith_expr
1361
in
arith_expr -> term + arith_expr
1361
if
arith_expr -> term + arith_expr
1361
>>
arith_expr -> term + arith_expr
1361
and
arith_expr -> term + arith_expr
1361
is
arith_expr -> term + arith_expr
1361
^
arith_expr -> term + arith_expr
1361
<<
arith_expr -> term + arith_expr
1361
<
arith_expr -> term + arith_expr
1361
==
arith_expr -> term + arith_expr
1361
!=
arith_expr -> term + arith_expr
1361
or
arith_expr -> term + arith_expr
1361
from
arith_expr -> term + arith_expr
1362
<=
arith_expr -> term - arith_expr
1362
if
arith_expr -> term - arith_expr
1362
not
arith_expr -> term - arith_expr
1362
|
arith_expr -> term - arith_expr
1362
>>
arith_expr -> term - arith_expr
1362
NEWLINE
arith_expr -> term - arith_expr
1362
>=
arith_expr -> term - arith_expr
1362
<<
arith_expr -> term - arith_expr
1362
is
arith_expr -> term - arith_expr
1362
!=
arith_expr -> term - arith_expr
1362
in
arith_expr -> term - arith_expr
1362
<
arith_expr -> term - arith_expr
1362
from
arith_expr -> term - arith_expr
1362
or
arith_expr -> term - arith_expr
1362
==
arith_expr -> term - arith_expr
1362
and
arith_expr -> term - arith_expr
1362
&
arith_expr -> term - arith_expr
1362
^
arith_expr -> term - arith_expr
1362
>
arith_expr -> term - arith_expr
1363
|
term -> factor * term
1363
-
term -> factor * term
1363
in
term -> factor * term
1363
and
term -> factor * term
1363
NEWLINE
term -> factor * term
1363
<<
term -> factor * term
1363
>=
term -> factor * term
1363
if
term -> factor * term
1363
or
term -> factor * term
1363
<=
term -> factor * term
1363
is
term -> factor * term
1363
^
term -> factor * term
1363
!=
term -> factor * term
1363
from
term -> factor * term
1363
==
term -> factor * term
1363
&
term -> factor * term
1363
>
term -> factor * term
1363
not
term -> factor * term
1363
<
term -> factor * term
1363
+
term -> factor * term
1363
>>
term -> factor * term
1364
from
term -> factor % term
1364
!=
term -> factor % term
1364
>>
term -> factor % term
1364
==
term -> factor % term
1364
>=
term -> factor % term
1364
^
term -> factor % term
1364
not
term -> factor % term
1364
or
term -> factor % term
1364
if
term -> factor % term
1364
<=
term -> factor % term
1364
<
term -> factor % term
1364
is
term -> factor % term
1364
-
term -> factor % term
1364
in
term -> factor % term
1364
>
term -> factor % term
1364
<<
term -> factor % term
1364
and
term -> factor % term
1364
NEWLINE
term -> factor % term
1364
|
term -> factor % term
1364
+
term -> factor % term
1364
&
term -> factor % term
1365
is
term -> factor // term
1365
if
term -> factor // term
1365
>
term -> factor // term
1365
==
term -> factor // term
1365
+
term -> factor // term
1365
^
term -> factor // term
1365
-
term -> factor // term
1365
from
term -> factor // term
1365
in
term -> factor // term
1365
>>
term -> factor // term
1365
NEWLINE
term -> factor // term
1365
|
term -> factor // term
1365
<<
term -> factor // term
1365
!=
term -> factor // term
1365
&
term -> factor // term
1365
not
term -> factor // term
1365
<=
term -> factor // term
1365
<
term -> factor // term
1365
and
term -> factor // term
1365
>=
term -> factor // term
1365
or
term -> factor // term
1366
>=
term -> factor / term
1366
!=
term -> factor / term
1366
not
term -> factor / term
1366
^
term -> factor / term
1366
in
term -> factor / term
1366
and
term -> factor / term
1366
<<
term -> factor / term
1366
from
term -> factor / term
1366
+
term -> factor / term
1366
>
term -> factor / term
1366
|
term -> factor / term
1366
or
term -> factor / term
1366
if
term -> factor / term
1366
>>
term -> factor / term
1366
NEWLINE
term -> factor / term
1366
<
term -> factor / term
1366
&
term -> factor / term
1366
-
term -> factor / term
1366
is
term -> factor / term
1366
==
term -> factor / term
1366
<=
term -> factor / term
1367
-
term -> factor @ term
1367
&
term -> factor @ term
1367
^
term -> factor @ term
1367
NEWLINE
term -> factor @ term
1367
<
term -> factor @ term
1367
!=
term -> factor @ term
1367
<<
term -> factor @ term
1367
is
term -> factor @ term
1367
<=
term -> factor @ term
1367
and
term -> factor @ term
1367
+
term -> factor @ term
1367
>
term -> factor @ term
1367
if
term -> factor @ term
1367
not
term -> factor @ term
1367
from
term -> factor @ term
1367
>>
term -> factor @ term
1367
>=
term -> factor @ term
1367
|
term -> factor @ term
1367
in
term -> factor @ term
1367
==
term -> factor @ term
1367
or
term -> factor @ term
1368
if
and_expr -> shift_expr & and_expr
1368
!=
and_expr -> shift_expr & and_expr
1368
<=
and_expr -> shift_expr & and_expr
1368
not
and_expr -> shift_expr & and_expr
1368
^
and_expr -> shift_expr & and_expr
1368
|
and_expr -> shift_expr & and_expr
1368
or
and_expr -> shift_expr & and_expr
1368
in
and_expr -> shift_expr & and_expr
1368
>
and_expr -> shift_expr & and_expr
1368
and
and_expr -> shift_expr & and_expr
1368
==
and_expr -> shift_expr & and_expr
1368
NEWLINE
and_expr -> shift_expr & and_expr
1368
<
and_expr -> shift_expr & and_expr
1368
is
and_expr -> shift_expr & and_expr
1368
from
and_expr -> shift_expr & and_expr
1368
>=
and_expr -> shift_expr & and_expr
1369
NEWLINE
shift_expr -> arith_expr << shift_expr
1369
^
shift_expr -> arith_expr << shift_expr
1369
|
shift_expr -> arith_expr << shift_expr
1369
&
shift_expr -> arith_expr << shift_expr
1369
and
shift_expr -> arith_expr << shift_expr
1369
is
shift_expr -> arith_expr << shift_expr
1369
in
shift_expr -> arith_expr << shift_expr
1369
<=
shift_expr -> arith_expr << shift_expr
1369
<
shift_expr -> arith_expr << shift_expr
1369
not
shift_expr -> arith_expr << shift_expr
1369
==
shift_expr -> arith_expr << shift_expr
1369
>=
shift_expr -> arith_expr << shift_expr
1369
if
shift_expr -> arith_expr << shift_expr
1369
from
shift_expr -> arith_expr << shift_expr
1369
>
shift_expr -> arith_expr << shift_expr
1369
or
shift_expr -> arith_expr << shift_expr
1369
!=
shift_expr -> arith_expr << shift_expr
1370
from
shift_expr -> arith_expr >> shift_expr
1370
and
shift_expr -> arith_expr >> shift_expr
1370
or
shift_expr -> arith_expr >> shift_expr
1370
>=
shift_expr -> arith_expr >> shift_expr
1370
NEWLINE
shift_expr -> arith_expr >> shift_expr
1370
not
shift_expr -> arith_expr >> shift_expr
1370
^
shift_expr -> arith_expr >> shift_expr
1370
is
shift_expr -> arith_expr >> shift_expr
1370
if
shift_expr -> arith_expr >> shift_expr
1370
in
shift_expr -> arith_expr >> shift_expr
1370
<=
shift_expr -> arith_expr >> shift_expr
1370
==
shift_expr -> arith_expr >> shift_expr
1370
<
shift_expr -> arith_expr >> shift_expr
1370
!=
shift_expr -> arith_expr >> shift_expr
1370
|
shift_expr -> arith_expr >> shift_expr
1370
>
shift_expr -> arith_expr >> shift_expr
1370
&
shift_expr -> arith_expr >> shift_expr
1371
and
atom -> [ test_list_comp ]
1371
<=
atom -> [ test_list_comp ]
1371
**
atom -> [ test_list_comp ]
1371
^
atom -> [ test_list_comp ]
1371
NEWLINE
atom -> [ test_list_comp ]
1371
[
atom -> [ test_list_comp ]
1371
!=
atom -> [ test_list_comp ]
1371
<
atom -> [ test_list_comp ]
1371
/
atom -> [ test_list_comp ]
1371
-
atom -> [ test_list_comp ]
1371
>=
atom -> [ test_list_comp ]
1371
if
atom -> [ test_list_comp ]
1371
%
atom -> [ test_list_comp ]
1371
from
atom -> [ test_list_comp ]
1371
is
atom -> [ test_list_comp ]
1371
+
atom -> [ test_list_comp ]
1371
&
atom -> [ test_list_comp ]
1371
@
atom -> [ test_list_comp ]
1371
or
atom -> [ test_list_comp ]
1371
in
atom -> [ test_list_comp ]
1371
==
atom -> [ test_list_comp ]
1371
not
atom -> [ test_list_comp ]
1371
.
atom -> [ test_list_comp ]
1371
|
atom -> [ test_list_comp ]
1371
>
atom -> [ test_list_comp ]
1371
<<
atom -> [ test_list_comp ]
1371
//
atom -> [ test_list_comp ]
1371
(
atom -> [ test_list_comp ]
1371
*
atom -> [ test_list_comp ]
1371
>>
atom -> [ test_list_comp ]
1372
]
1809
1373
)
1810
1374
<
trailer -> ( )
1374
.
trailer -> ( )
1374
*
trailer -> ( )
1374
or
trailer -> ( )
1374
is
trailer -> ( )
1374
/
trailer -> ( )
1374
+
trailer -> ( )
1374
@
trailer -> ( )
1374
>
trailer -> ( )
1374
//
trailer -> ( )
1374
|
trailer -> ( )
1374
!=
trailer -> ( )
1374
&
trailer -> ( )
1374
^
trailer -> ( )
1374
<=
trailer -> ( )
1374
%
trailer -> ( )
1374
>>
trailer -> ( )
1374
**
trailer -> ( )
1374
and
trailer -> ( )
1374
(
trailer -> ( )
1374
from
trailer -> ( )
1374
==
trailer -> ( )
1374
if
trailer -> ( )
1374
[
trailer -> ( )
1374
<<
trailer -> ( )
1374
NEWLINE
trailer -> ( )
1374
in
trailer -> ( )
1374
-
trailer -> ( )
1374
not
trailer -> ( )
1374
>=
trailer -> ( )
1375
|
trailer -> . NAME
1375
@
trailer -> . NAME
1375
^
trailer -> . NAME
1375
>
trailer -> . NAME
1375
+
trailer -> . NAME
1375
.
trailer -> . NAME
1375
!=
trailer -> . NAME
1375
<<
trailer -> . NAME
1375
*
trailer -> . NAME
1375
<=
trailer -> . NAME
1375
[
trailer -> . NAME
1375
(
trailer -> . NAME
1375
//
trailer -> . NAME
1375
**
trailer -> . NAME
1375
-
trailer -> . NAME
1375
in
trailer -> . NAME
1375
>=
trailer -> . NAME
1375
&
trailer -> . NAME
1375
from
trailer -> . NAME
1375
==
trailer -> . NAME
1375
or
trailer -> . NAME
1375
and
trailer -> . NAME
1375
%
trailer -> . NAME
1375
is
trailer -> . NAME
1375
<
trailer -> . NAME
1375
not
trailer -> . NAME
1375
/
trailer -> . NAME
1375
if
trailer -> . NAME
1375
NEWLINE
trailer -> . NAME
1375
>>
trailer -> . NAME
1376
&
trailer_expr -> trailer trailer_expr
1376
not
trailer_expr -> trailer trailer_expr
1376
and
trailer_expr -> trailer trailer_expr
1376
+
trailer_expr -> trailer trailer_expr
1376
==
trailer_expr -> trailer trailer_expr
1376
**
trailer_expr -> trailer trailer_expr
1376
/
trailer_expr -> trailer trailer_expr
1376
^
trailer_expr -> trailer trailer_expr
1376
>
trailer_expr -> trailer trailer_expr
1376
*
trailer_expr -> trailer trailer_expr
1376
NEWLINE
trailer_expr -> trailer trailer_expr
1376
//
trailer_expr -> trailer trailer_expr
1376
>>
trailer_expr -> trailer trailer_expr
1376
from
trailer_expr -> trailer trailer_expr
1376
<<
trailer_expr -> trailer trailer_expr
1376
>=
trailer_expr -> trailer trailer_expr
1376
<=
trailer_expr -> trailer trailer_expr
1376
-
trailer_expr -> trailer trailer_expr
1376
is
trailer_expr -> trailer trailer_expr
1376
in
trailer_expr -> trailer trailer_expr
1376
<
trailer_expr -> trailer trailer_expr
1376
|
trailer_expr -> trailer trailer_expr
1376
if
trailer_expr -> trailer trailer_expr
1376
%
trailer_expr -> trailer trailer_expr
1376
@
trailer_expr -> trailer trailer_expr
1376
!=
trailer_expr -> trailer trailer_expr
1376
or
trailer_expr -> trailer trailer_expr
1377
if
comparison -> expr comp_op comparison
1377
or
comparison -> expr comp_op comparison
1377
NEWLINE
comparison -> expr comp_op comparison
1377
from
comparison -> expr comp_op comparison
1377
and
comparison -> expr comp_op comparison
1378
NEWLINE
expr -> xor_expr | expr
1378
>
expr -> xor_expr | expr
1378
is
expr -> xor_expr | expr
1378
<
expr -> xor_expr | expr
1378
if
expr -> xor_expr | expr
1378
>=
expr -> xor_expr | expr
1378
or
expr -> xor_expr | expr
1378
and
expr -> xor_expr | expr
1378
in
expr -> xor_expr | expr
1378
!=
expr -> xor_expr | expr
1378
<=
expr -> xor_expr | expr
1378
==
expr -> xor_expr | expr
1378
not
expr -> xor_expr | expr
1378
from
expr -> xor_expr | expr
1379
NEWLINE
atom -> ( test_list_comp )
1379
if
atom -> ( test_list_comp )
1379
or
atom -> ( test_list_comp )
1379
*
atom -> ( test_list_comp )
1379
from
atom -> ( test_list_comp )
1379
|
atom -> ( test_list_comp )
1379
>>
atom -> ( test_list_comp )
1379
%
atom -> ( test_list_comp )
1379
not
atom -> ( test_list_comp )
1379
//
atom -> ( test_list_comp )
1379
+
atom -> ( test_list_comp )
1379
and
atom -> ( test_list_comp )
1379
>
atom -> ( test_list_comp )
1379
[
atom -> ( test_list_comp )
1379
^
atom -> ( test_list_comp )
1379
!=
atom -> ( test_list_comp )
1379
<<
atom -> ( test_list_comp )
1379
**
atom -> ( test_list_comp )
1379
is
atom -> ( test_list_comp )
1379
<=
atom -> ( test_list_comp )
1379
-
atom -> ( test_list_comp )
1379
&
atom -> ( test_list_comp )
1379
(
atom -> ( test_list_comp )
1379
in
atom -> ( test_list_comp )
1379
@
atom -> ( test_list_comp )
1379
.
atom -> ( test_list_comp )
1379
<
atom -> ( test_list_comp )
1379
/
atom -> ( test_list_comp )
1379
==
atom -> ( test_list_comp )
1379
>=
atom -> ( test_list_comp )
1380
from
lambdef -> lambda : test
1380
NEWLINE
lambdef -> lambda : test
1381
atom_expr
356
1381
and_expr
357
1381
term
358
1381
factor
359
1381
shift_expr
360
1381
arith_expr
361
1381
NUMBER
362
1381
NAME
363
1381
[
364
1381
atom
365
1381
{
366
1381
expr
367
1381
False
368
1381
xor_expr
369
1381
True
370
1381
STRING
371
1381
+
372
1381
-
373
1381
(
374
1381
None
375
1381
lambda
376
1381
not_test
377
1381
comparison
378
1381
or_test
379
1381
power
381
1381
~
382
1381
test
1811
1381
lambdef
383
1381
and_test
384
1381
not
385
1382
from
and_test -> not_test and and_test
1382
NEWLINE
and_test -> not_test and and_test
1382
or
and_test -> not_test and and_test
1382
if
and_test -> not_test and and_test
1383
else
1812
1384
**
1813
1384
!=
power -> atom_expr
1384
|
power -> atom_expr
1384
>
power -> atom_expr
1384
/
power -> atom_expr
1384
^
power -> atom_expr
1384
&
power -> atom_expr
1384
<
power -> atom_expr
1384
not
power -> atom_expr
1384
NEWLINE
power -> atom_expr
1384
<=
power -> atom_expr
1384
%
power -> atom_expr
1384
and
power -> atom_expr
1384
*
power -> atom_expr
1384
@
power -> atom_expr
1384
>>
power -> atom_expr
1384
if
power -> atom_expr
1384
+
power -> atom_expr
1384
in
power -> atom_expr
1384
is
power -> atom_expr
1384
//
power -> atom_expr
1384
or
power -> atom_expr
1384
<<
power -> atom_expr
1384
-
power -> atom_expr
1384
==
power -> atom_expr
1384
>=
power -> atom_expr
1385
^
1814
1385
not
xor_expr -> and_expr
1385
>=
xor_expr -> and_expr
1385
and
xor_expr -> and_expr
1385
is
xor_expr -> and_expr
1385
or
xor_expr -> and_expr
1385
|
xor_expr -> and_expr
1385
in
xor_expr -> and_expr
1385
==
xor_expr -> and_expr
1385
>
xor_expr -> and_expr
1385
<
xor_expr -> and_expr
1385
if
xor_expr -> and_expr
1385
<=
xor_expr -> and_expr
1385
!=
xor_expr -> and_expr
1385
NEWLINE
xor_expr -> and_expr
1386
+
1815
1386
in
arith_expr -> term
1386
if
arith_expr -> term
1386
|
arith_expr -> term
1386
==
arith_expr -> term
1386
<
arith_expr -> term
1386
-
1816
1386
<=
arith_expr -> term
1386
^
arith_expr -> term
1386
is
arith_expr -> term
1386
>>
arith_expr -> term
1386
or
arith_expr -> term
1386
&
arith_expr -> term
1386
>
arith_expr -> term
1386
>=
arith_expr -> term
1386
<<
arith_expr -> term
1386
and
arith_expr -> term
1386
NEWLINE
arith_expr -> term
1386
not
arith_expr -> term
1386
!=
arith_expr -> term
1387
*
1817
1387
%
1818
1387
//
1819
1387
/
1820
1387
and
term -> factor
1387
==
term -> factor
1387
@
1821
1387
>=
term -> factor
1387
+
term -> factor
1387
<=
term -> factor
1387
or
term -> factor
1387
<<
term -> factor
1387
not
term -> factor
1387
<
term -> factor
1387
-
term -> factor
1387
in
term -> factor
1387
!=
term -> factor
1387
is
term -> factor
1387
>>
term -> factor
1387
NEWLINE
term -> factor
1387
^
term -> factor
1387
|
term -> factor
1387
>
term -> factor
1387
if
term -> factor
1387
&
term -> factor
1388
if
and_expr -> shift_expr
1388
&
1822
1388
in
and_expr -> shift_expr
1388
is
and_expr -> shift_expr
1388
|
and_expr -> shift_expr
1388
>=
and_expr -> shift_expr
1388
<
and_expr -> shift_expr
1388
!=
and_expr -> shift_expr
1388
and
and_expr -> shift_expr
1388
not
and_expr -> shift_expr
1388
or
and_expr -> shift_expr
1388
==
and_expr -> shift_expr
1388
<=
and_expr -> shift_expr
1388
^
and_expr -> shift_expr
1388
>
and_expr -> shift_expr
1388
NEWLINE
and_expr -> shift_expr
1389
<<
1823
1389
>>
1824
1389
<
shift_expr -> arith_expr
1389
>
shift_expr -> arith_expr
1389
&
shift_expr -> arith_expr
1389
and
shift_expr -> arith_expr
1389
in
shift_expr -> arith_expr
1389
!=
shift_expr -> arith_expr
1389
|
shift_expr -> arith_expr
1389
if
shift_expr -> arith_expr
1389
not
shift_expr -> arith_expr
1389
<=
shift_expr -> arith_expr
1389
is
shift_expr -> arith_expr
1389
==
shift_expr -> arith_expr
1389
or
shift_expr -> arith_expr
1389
NEWLINE
shift_expr -> arith_expr
1389
>=
shift_expr -> arith_expr
1389
^
shift_expr -> arith_expr
1390
==
atom -> NUMBER
1390
<=
atom -> NUMBER
1390
<<
atom -> NUMBER
1390
/
atom -> NUMBER
1390
^
atom -> NUMBER
1390
if
atom -> NUMBER
1390
.
atom -> NUMBER
1390
or
atom -> NUMBER
1390
**
atom -> NUMBER
1390
+
atom -> NUMBER
1390
%
atom -> NUMBER
1390
-
atom -> NUMBER
1390
&
atom -> NUMBER
1390
@
atom -> NUMBER
1390
*
atom -> NUMBER
1390
>>
atom -> NUMBER
1390
<
atom -> NUMBER
1390
is
atom -> NUMBER
1390
(
atom -> NUMBER
1390
and
atom -> NUMBER
1390
not
atom -> NUMBER
1390
!=
atom -> NUMBER
1390
|
atom -> NUMBER
1390
in
atom -> NUMBER
1390
>
atom -> NUMBER
1390
NEWLINE
atom -> NUMBER
1390
>=
atom -> NUMBER
1390
//
atom -> NUMBER
1390
[
atom -> NUMBER
1391
or
atom -> NAME
1391
in
atom -> NAME
1391
^
atom -> NAME
1391
[
atom -> NAME
1391
==
atom -> NAME
1391
<<
atom -> NAME
1391
**
atom -> NAME
1391
NEWLINE
atom -> NAME
1391
!=
atom -> NAME
1391
%
atom -> NAME
1391
@
atom -> NAME
1391
not
atom -> NAME
1391
>
atom -> NAME
1391
>=
atom -> NAME
1391
*
atom -> NAME
1391
&
atom -> NAME
1391
<
atom -> NAME
1391
-
atom -> NAME
1391
(
atom -> NAME
1391
>>
atom -> NAME
1391
+
atom -> NAME
1391
//
atom -> NAME
1391
and
atom -> NAME
1391
<=
atom -> NAME
1391
is
atom -> NAME
1391
if
atom -> NAME
1391
/
atom -> NAME
1391
.
atom -> NAME
1391
|
atom -> NAME
1392
and_test
110
1392
atom_expr
111
1392
and_expr
112
1392
term
113
1392
factor
114
1392
shift_expr
115
1392
arith_expr
116
1392
NUMBER
117
1392
NAME
118
1392
[
119
1392
test_list_comp
1825
1392
{
121
1392
expr
122
1392
not_test
123
1392
False
124
1392
xor_expr
125
1392
atom
126
1392
STRING
127
1392
+
128
1392
(
129
1392
True
131
1392
-
132
1392
]
1826
1392
None
133
1392
comparison
134
1392
or_test
135
1392
test
136
1392
power
137
1392
~
138
1392
lambda
139
1392
lambdef
140
1392
not
141
1392
test_list
142
1393
}
1827
1394
in
147
1394
<
148
1394
>=
149
1394
not
150
1394
comp_op
1828
1394
!=
151
1394
>
152
1394
==
153
1394
is
154
1394
<=
155
1394
NEWLINE
comparison -> expr
1394
or
comparison -> expr
1394
and
comparison -> expr
1394
if
comparison -> expr
1395
*
atom -> False
1395
@
atom -> False
1395
<
atom -> False
1395
or
atom -> False
1395
is
atom -> False
1395
>>
atom -> False
1395
[
atom -> False
1395
/
atom -> False
1395
%
atom -> False
1395
.
atom -> False
1395
(
atom -> False
1395
in
atom -> False
1395
**
atom -> False
1395
==
atom -> False
1395
//
atom -> False
1395
+
atom -> False
1395
<<
atom -> False
1395
NEWLINE
atom -> False
1395
!=
atom -> False
1395
<=
atom -> False
1395
>
atom -> False
1395
^
atom -> False
1395
if
atom -> False
1395
&
atom -> False
1395
and
atom -> False
1395
|
atom -> False
1395
-
atom -> False
1395
not
atom -> False
1395
>=
atom -> False
1396
not
expr -> xor_expr
1396
|
1829
1396
==
expr -> xor_expr
1396
in
expr -> xor_expr
1396
if
expr -> xor_expr
1396
>
expr -> xor_expr
1396
or
expr -> xor_expr
1396
NEWLINE
expr -> xor_expr
1396
<=
expr -> xor_expr
1396
<
expr -> xor_expr
1396
is
expr -> xor_expr
1396
>=
expr -> xor_expr
1396
!=
expr -> xor_expr
1396
and
expr -> xor_expr
1397
&
atom -> STRING
1397
**
atom -> STRING
1397
%
atom -> STRING
1397
NEWLINE
atom -> STRING
1397
@
atom -> STRING
1397
/
atom -> STRING
1397
*
atom -> STRING
1397
^
atom -> STRING
1397
>=
atom -> STRING
1397
if
atom -> STRING
1397
<
atom -> STRING
1397
>>
atom -> STRING
1397
.
atom -> STRING
1397
//
atom -> STRING
1397
+
atom -> STRING
1397
<<
atom -> STRING
1397
and
atom -> STRING
1397
[
atom -> STRING
1397
or
atom -> STRING
1397
in
atom -> STRING
1397
not
atom -> STRING
1397
>
atom -> STRING
1397
(
atom -> STRING
1397
!=
atom -> STRING
1397
is
atom -> STRING
1397
==
atom -> STRING
1397
-
atom -> STRING
1397
|
atom -> STRING
1397
<=
atom -> STRING
1398
atom_expr
1384
1398
NUMBER
1390
1398
NAME
1391
1398
[
1392
1398
{
1393
1398
False
1395
1398
STRING
1397
1398
+
1398
1398
True
1399
1398
-
1400
1398
(
1401
1398
None
1402
1398
atom
1404
1398
factor
1830
1398
power
1406
1398
~
1407
1399
!=
atom -> True
1399
is
atom -> True
1399
//
atom -> True
1399
|
atom -> True
1399
<=
atom -> True
1399
^
atom -> True
1399
%
atom -> True
1399
@
atom -> True
1399
**
atom -> True
1399
(
atom -> True
1399
NEWLINE
atom -> True
1399
not
atom -> True
1399
>>
atom -> True
1399
<
atom -> True
1399
==
atom -> True
1399
and
atom -> True
1399
in
atom -> True
1399
&
atom -> True
1399
.
atom -> True
1399
<<
atom -> True
1399
/
atom -> True
1399
*
atom -> True
1399
>
atom -> True
1399
+
atom -> True
1399
>=
atom -> True
1399
or
atom -> True
1399
-
atom -> True
1399
[
atom -> True
1399
if
atom -> True
1400
atom_expr
1384
1400
NUMBER
1390
1400
NAME
1391
1400
[
1392
1400
factor
1831
1400
{
1393
1400
False
1395
1400
STRING
1397
1400
+
1398
1400
True
1399
1400
-
1400
1400
(
1401
1400
None
1402
1400
atom
1404
1400
power
1406
1400
~
1407
1401
and_test
217
1401
atom_expr
218
1401
and_expr
219
1401
term
220
1401
factor
221
1401
shift_expr
222
1401
arith_expr
223
1401
NUMBER
224
1401
NAME
225
1401
not
226
1401
[
227
1401
{
228
1401
expr
229
1401
test_list_comp
1832
1401
not_test
231
1401
False
232
1401
xor_expr
234
1401
STRING
235
1401
lambda
236
1401
atom
237
1401
+
238
1401
True
239
1401
-
240
1401
(
241
1401
None
242
1401
comparison
243
1401
power
244
1401
)
1833
1401
~
245
1401
or_test
246
1401
test
247
1401
lambdef
248
1401
test_list
249
1402
!=
atom -> None
1402
//
atom -> None
1402
^
atom -> None
1402
>=
atom -> None
1402
&
atom -> None
1402
**
atom -> None
1402
NEWLINE
atom -> None
1402
<
atom -> None
1402
if
atom -> None
1402
*
atom -> None
1402
>
atom -> None
1402
@
atom -> None
1402
|
atom -> None
1402
-
atom -> None
1402
%
atom -> None
1402
not
atom -> None
1402
==
atom -> None
1402
in
atom -> None
1402
/
atom -> None
1402
or
atom -> None
1402
and
atom -> None
1402
+
atom -> None
1402
(
atom -> None
1402
>>
atom -> None
1402
is
atom -> None
1402
[
atom -> None
1402
<=
atom -> None
1402
<<
atom -> None
1402
.
atom -> None
1403
:
1834
1403
vfpdef
212
1403
varargslist
1835
1403
NAME
211
1404
[
1836
1404
(
1837
1404
.
1838
1404
trailer
1839
1404
<<
trailer_expr -> 
1404
trailer_expr
1840
1404
@
trailer_expr -> 
1404
!=
trailer_expr -> 
1404
-
trailer_expr -> 
1404
^
trailer_expr -> 
1404
<
trailer_expr -> 
1404
NEWLINE
trailer_expr -> 
1404
/
trailer_expr -> 
1404
is
trailer_expr -> 
1404
==
trailer_expr -> 
1404
&
trailer_expr -> 
1404
>=
trailer_expr -> 
1404
or
trailer_expr -> 
1404
in
trailer_expr -> 
1404
*
trailer_expr -> 
1404
not
trailer_expr -> 
1404
**
trailer_expr -> 
1404
<=
trailer_expr -> 
1404
+
trailer_expr -> 
1404
//
trailer_expr -> 
1404
%
trailer_expr -> 
1404
>
trailer_expr -> 
1404
|
trailer_expr -> 
1404
if
trailer_expr -> 
1404
>>
trailer_expr -> 
1404
and
trailer_expr -> 
1405
if
1841
1405
NEWLINE
test -> or_test
1406
*
factor -> power
1406
>>
factor -> power
1406
>=
factor -> power
1406
<
factor -> power
1406
&
factor -> power
1406
|
factor -> power
1406
@
factor -> power
1406
!=
factor -> power
1406
<=
factor -> power
1406
//
factor -> power
1406
in
factor -> power
1406
and
factor -> power
1406
+
factor -> power
1406
>
factor -> power
1406
-
factor -> power
1406
not
factor -> power
1406
is
factor -> power
1406
==
factor -> power
1406
%
factor -> power
1406
if
factor -> power
1406
or
factor -> power
1406
^
factor -> power
1406
NEWLINE
factor -> power
1406
<<
factor -> power
1406
/
factor -> power
1407
atom_expr
1384
1407
NUMBER
1390
1407
NAME
1391
1407
[
1392
1407
factor
1842
1407
{
1393
1407
False
1395
1407
STRING
1397
1407
+
1398
1407
True
1399
1407
-
1400
1407
(
1401
1407
None
1402
1407
atom
1404
1407
power
1406
1407
~
1407
1408
NEWLINE
test -> lambdef
1409
if
not_test -> comparison
1409
or
not_test -> comparison
1409
and
not_test -> comparison
1409
NEWLINE
not_test -> comparison
1410
NEWLINE
raise_stmt -> raise test from test
1411
and
1843
1411
or
and_test -> not_test
1411
if
and_test -> not_test
1411
NEWLINE
and_test -> not_test
1412
NEWLINE
or_test -> and_test
1412
or
1844
1412
if
or_test -> and_test
1413
atom_expr
1384
1413
and_expr
1385
1413
term
1386
1413
factor
1387
1413
shift_expr
1388
1413
arith_expr
1389
1413
NUMBER
1390
1413
NAME
1391
1413
[
1392
1413
{
1393
1413
expr
1394
1413
False
1395
1413
xor_expr
1396
1413
STRING
1397
1413
+
1398
1413
True
1399
1413
-
1400
1413
(
1401
1413
None
1402
1413
atom
1404
1413
power
1406
1413
~
1407
1413
comparison
1409
1413
not
1413
1413
not_test
1845
1414
from
or_test -> and_test or or_test
1414
NEWLINE
or_test -> and_test or or_test
1414
if
or_test -> and_test or or_test
1415
:
1846
1416
lambda
simple_stmt -> small_stmt NEWLINE
1416
yield
simple_stmt -> small_stmt NEWLINE
1416
NEWLINE
simple_stmt -> small_stmt NEWLINE
1416
NAME
simple_stmt -> small_stmt NEWLINE
1416
STRING
simple_stmt -> small_stmt NEWLINE
1416
pass
simple_stmt -> small_stmt NEWLINE
1416
None
simple_stmt -> small_stmt NEWLINE
1416
(
simple_stmt -> small_stmt NEWLINE
1416
assert
simple_stmt -> small_stmt NEWLINE
1416
@
simple_stmt -> small_stmt NEWLINE
1416
def
simple_stmt -> small_stmt NEWLINE
1416
if
simple_stmt -> small_stmt NEWLINE
1416
+
simple_stmt -> small_stmt NEWLINE
1416
continue
simple_stmt -> small_stmt NEWLINE
1416
not
simple_stmt -> small_stmt NEWLINE
1416
try
simple_stmt -> small_stmt NEWLINE
1416
False
simple_stmt -> small_stmt NEWLINE
1416
with
simple_stmt -> small_stmt NEWLINE
1416
else
simple_stmt -> small_stmt NEWLINE
1416
global
simple_stmt -> small_stmt NEWLINE
1416
return
simple_stmt -> small_stmt NEWLINE
1416
raise
simple_stmt -> small_stmt NEWLINE
1416
True
simple_stmt -> small_stmt NEWLINE
1416
-
simple_stmt -> small_stmt NEWLINE
1416
del
simple_stmt -> small_stmt NEWLINE
1416
NUMBER
simple_stmt -> small_stmt NEWLINE
1416
{
simple_stmt -> small_stmt NEWLINE
1416
for
simple_stmt -> small_stmt NEWLINE
1416
class
simple_stmt -> small_stmt NEWLINE
1416
break
simple_stmt -> small_stmt NEWLINE
1416
[
simple_stmt -> small_stmt NEWLINE
1416
nonlocal
simple_stmt -> small_stmt NEWLINE
1416
while
simple_stmt -> small_stmt NEWLINE
1416
$
simple_stmt -> small_stmt NEWLINE
1416
~
simple_stmt -> small_stmt NEWLINE
1417
while
1591
1417
decorators
1592
1417
[
3
1417
small_stmt
1593
1417
stmt_list
1847
1417
{
5
1417
atom_expr
6
1417
expr
7
1417
NUMBER
8
1417
True
9
1417
factor
10
1417
class
1594
1417
shift_expr
12
1417
atom
13
1417
xor_expr
14
1417
term
15
1417
if
1595
1417
try
1596
1417
with
1597
1417
decorated
1598
1417
and_test
20
1417
and_expr
21
1417
for_stmt
1599
1417
False
23
1417
def
1600
1417
or_test
25
1417
with_stmt
1601
1417
funcdef
1602
1417
lambda
28
1417
try_stmt
1603
1417
None
29
1417
+
30
1417
if_stmt
1604
1417
arith_expr
32
1417
test
33
1417
(
34
1417
compound_stmt
1605
1417
-
36
1417
NAME
37
1417
while_stmt
1606
1417
not_test
40
1417
lambdef
41
1417
for
1607
1417
STRING
43
1417
~
44
1417
simple_stmt
1608
1417
classdef
1609
1417
power
47
1417
comparison
48
1417
continue
49
1417
expr_stmt
50
1417
not
51
1417
del_stmt
52
1417
yield_stmt
53
1417
@
54
1417
decorator
55
1417
yield
56
1417
assert_stmt
57
1417
break_stmt
58
1417
return
59
1417
pass
60
1417
continue_stmt
61
1417
test_list
62
1417
break
63
1417
del
64
1417
pass_stmt
65
1417
nonlocal
66
1417
assert
67
1417
global_stmt
68
1417
raise
69
1417
stmt
1611
1417
raise_stmt
70
1417
global
71
1417
nonlocal_stmt
72
1417
return_stmt
75
1417
flow_stmt
76
1418
*
trailer -> [ subscriptlist ]
1418
not
trailer -> [ subscriptlist ]
1418
(
trailer -> [ subscriptlist ]
1418
<<
trailer -> [ subscriptlist ]
1418
:
trailer -> [ subscriptlist ]
1418
>>
trailer -> [ subscriptlist ]
1418
//
trailer -> [ subscriptlist ]
1418
or
trailer -> [ subscriptlist ]
1418
is
trailer -> [ subscriptlist ]
1418
[
trailer -> [ subscriptlist ]
1418
|
trailer -> [ subscriptlist ]
1418
%
trailer -> [ subscriptlist ]
1418
<=
trailer -> [ subscriptlist ]
1418
and
trailer -> [ subscriptlist ]
1418
**
trailer -> [ subscriptlist ]
1418
if
trailer -> [ subscriptlist ]
1418
-
trailer -> [ subscriptlist ]
1418
in
trailer -> [ subscriptlist ]
1418
^
trailer -> [ subscriptlist ]
1418
+
trailer -> [ subscriptlist ]
1418
>=
trailer -> [ subscriptlist ]
1418
.
trailer -> [ subscriptlist ]
1418
&
trailer -> [ subscriptlist ]
1418
/
trailer -> [ subscriptlist ]
1418
!=
trailer -> [ subscriptlist ]
1418
<
trailer -> [ subscriptlist ]
1418
==
trailer -> [ subscriptlist ]
1418
>
trailer -> [ subscriptlist ]
1418
@
trailer -> [ subscriptlist ]
1419
%
trailer -> ( arglist )
1419
and
trailer -> ( arglist )
1419
+
trailer -> ( arglist )
1419
or
trailer -> ( arglist )
1419
not
trailer -> ( arglist )
1419
-
trailer -> ( arglist )
1419
@
trailer -> ( arglist )
1419
[
trailer -> ( arglist )
1419
>>
trailer -> ( arglist )
1419
<=
trailer -> ( arglist )
1419
if
trailer -> ( arglist )
1419
//
trailer -> ( arglist )
1419
==
trailer -> ( arglist )
1419
<<
trailer -> ( arglist )
1419
*
trailer -> ( arglist )
1419
<
trailer -> ( arglist )
1419
**
trailer -> ( arglist )
1419
is
trailer -> ( arglist )
1419
>
trailer -> ( arglist )
1419
!=
trailer -> ( arglist )
1419
/
trailer -> ( arglist )
1419
in
trailer -> ( arglist )
1419
.
trailer -> ( arglist )
1419
|
trailer -> ( arglist )
1419
>=
trailer -> ( arglist )
1419
&
trailer -> ( arglist )
1419
(
trailer -> ( arglist )
1419
^
trailer -> ( arglist )
1419
:
trailer -> ( arglist )
1420
:
lambdef -> lambda varargslist : test
1421
atom_expr
79
1421
and_expr
80
1421
term
81
1421
factor
82
1421
shift_expr
83
1421
arith_expr
84
1421
NUMBER
85
1421
NAME
86
1421
[
87
1421
{
88
1421
expr
89
1421
False
90
1421
xor_expr
91
1421
STRING
92
1421
+
93
1421
True
94
1421
(
95
1421
None
96
1421
-
97
1421
atom
98
1421
power
99
1421
~
100
1421
lambda
101
1421
not_test
102
1421
not
103
1421
comparison
104
1421
and_test
105
1421
lambdef
106
1421
test
1848
1421
or_test
107
1422
*
trailer -> [ subscriptlist ]
1422
for
trailer -> [ subscriptlist ]
1422
not
trailer -> [ subscriptlist ]
1422
(
trailer -> [ subscriptlist ]
1422
<<
trailer -> [ subscriptlist ]
1422
,
trailer -> [ subscriptlist ]
1422
>>
trailer -> [ subscriptlist ]
1422
//
trailer -> [ subscriptlist ]
1422
or
trailer -> [ subscriptlist ]
1422
]
trailer -> [ subscriptlist ]
1422
is
trailer -> [ subscriptlist ]
1422
[
trailer -> [ subscriptlist ]
1422
|
trailer -> [ subscriptlist ]
1422
%
trailer -> [ subscriptlist ]
1422
<=
trailer -> [ subscriptlist ]
1422
and
trailer -> [ subscriptlist ]
1422
**
trailer -> [ subscriptlist ]
1422
if
trailer -> [ subscriptlist ]
1422
-
trailer -> [ subscriptlist ]
1422
in
trailer -> [ subscriptlist ]
1422
^
trailer -> [ subscriptlist ]
1422
+
trailer -> [ subscriptlist ]
1422
>=
trailer -> [ subscriptlist ]
1422
.
trailer -> [ subscriptlist ]
1422
&
trailer -> [ subscriptlist ]
1422
/
trailer -> [ subscriptlist ]
1422
!=
trailer -> [ subscriptlist ]
1422
<
trailer -> [ subscriptlist ]
1422
==
trailer -> [ subscriptlist ]
1422
>
trailer -> [ subscriptlist ]
1422
@
trailer -> [ subscriptlist ]
1423
%
trailer -> ( arglist )
1423
and
trailer -> ( arglist )
1423
+
trailer -> ( arglist )
1423
or
trailer -> ( arglist )
1423
not
trailer -> ( arglist )
1423
-
trailer -> ( arglist )
1423
@
trailer -> ( arglist )
1423
[
trailer -> ( arglist )
1423
>>
trailer -> ( arglist )
1423
<=
trailer -> ( arglist )
1423
if
trailer -> ( arglist )
1423
]
trailer -> ( arglist )
1423
//
trailer -> ( arglist )
1423
==
trailer -> ( arglist )
1423
<<
trailer -> ( arglist )
1423
*
trailer -> ( arglist )
1423
<
trailer -> ( arglist )
1423
**
trailer -> ( arglist )
1423
is
trailer -> ( arglist )
1423
>
trailer -> ( arglist )
1423
!=
trailer -> ( arglist )
1423
/
trailer -> ( arglist )
1423
for
trailer -> ( arglist )
1423
in
trailer -> ( arglist )
1423
.
trailer -> ( arglist )
1423
|
trailer -> ( arglist )
1423
>=
trailer -> ( arglist )
1423
&
trailer -> ( arglist )
1423
(
trailer -> ( arglist )
1423
^
trailer -> ( arglist )
1423
,
trailer -> ( arglist )
1424
and_test
110
1424
atom_expr
111
1424
and_expr
112
1424
term
113
1424
factor
114
1424
shift_expr
115
1424
arith_expr
116
1424
NUMBER
117
1424
NAME
118
1424
[
119
1424
{
121
1424
expr
122
1424
not_test
123
1424
False
124
1424
xor_expr
125
1424
atom
126
1424
STRING
127
1424
+
128
1424
(
129
1424
True
131
1424
-
132
1424
None
133
1424
comparison
134
1424
or_test
135
1424
power
137
1424
~
138
1424
lambda
139
1424
test
1849
1424
lambdef
140
1424
not
141
1425
atom_expr
908
1425
NUMBER
914
1425
NAME
915
1425
[
916
1425
{
917
1425
False
920
1425
atom
922
1425
STRING
923
1425
+
924
1425
(
925
1425
True
926
1425
-
927
1425
None
928
1425
power
932
1425
~
933
1425
factor
1850
1426
atom_expr
908
1426
and_expr
909
1426
term
910
1426
factor
911
1426
shift_expr
912
1426
arith_expr
913
1426
NUMBER
914
1426
NAME
915
1426
[
916
1426
{
917
1426
False
920
1426
atom
922
1426
STRING
923
1426
xor_expr
1851
1426
+
924
1426
(
925
1426
True
926
1426
-
927
1426
None
928
1426
power
932
1426
~
933
1427
atom_expr
908
1427
factor
911
1427
term
910
1427
NUMBER
914
1427
NAME
915
1427
[
916
1427
{
917
1427
False
920
1427
atom
922
1427
STRING
923
1427
+
924
1427
(
925
1427
True
926
1427
-
927
1427
None
928
1427
arith_expr
1852
1427
power
932
1427
~
933
1428
atom_expr
908
1428
factor
911
1428
term
910
1428
NUMBER
914
1428
NAME
915
1428
[
916
1428
{
917
1428
False
920
1428
atom
922
1428
STRING
923
1428
+
924
1428
(
925
1428
True
926
1428
-
927
1428
arith_expr
1853
1428
None
928
1428
power
932
1428
~
933
1429
atom_expr
908
1429
factor
911
1429
NUMBER
914
1429
NAME
915
1429
[
916
1429
{
917
1429
False
920
1429
atom
922
1429
STRING
923
1429
+
924
1429
(
925
1429
term
1854
1429
True
926
1429
-
927
1429
None
928
1429
power
932
1429
~
933
1430
atom_expr
908
1430
factor
911
1430
NUMBER
914
1430
NAME
915
1430
[
916
1430
{
917
1430
term
1855
1430
False
920
1430
atom
922
1430
STRING
923
1430
+
924
1430
(
925
1430
True
926
1430
-
927
1430
None
928
1430
power
932
1430
~
933
1431
atom_expr
908
1431
factor
911
1431
NUMBER
914
1431
NAME
915
1431
[
916
1431
{
917
1431
False
920
1431
atom
922
1431
STRING
923
1431
+
924
1431
term
1856
1431
(
925
1431
True
926
1431
-
927
1431
None
928
1431
power
932
1431
~
933
1432
atom_expr
908
1432
factor
911
1432
NUMBER
914
1432
NAME
915
1432
[
916
1432
{
917
1432
False
920
1432
atom
922
1432
STRING
923
1432
+
924
1432
(
925
1432
True
926
1432
-
927
1432
None
928
1432
term
1857
1432
power
932
1432
~
933
1433
atom_expr
908
1433
factor
911
1433
NUMBER
914
1433
NAME
915
1433
[
916
1433
{
917
1433
False
920
1433
atom
922
1433
STRING
923
1433
+
924
1433
(
925
1433
True
926
1433
-
927
1433
None
928
1433
term
1858
1433
power
932
1433
~
933
1434
atom_expr
908
1434
factor
911
1434
term
910
1434
shift_expr
912
1434
arith_expr
913
1434
NUMBER
914
1434
NAME
915
1434
[
916
1434
{
917
1434
False
920
1434
atom
922
1434
STRING
923
1434
+
924
1434
(
925
1434
True
926
1434
-
927
1434
None
928
1434
power
932
1434
~
933
1434
and_expr
1859
1435
atom_expr
908
1435
factor
911
1435
term
910
1435
arith_expr
913
1435
NUMBER
914
1435
NAME
915
1435
[
916
1435
{
917
1435
False
920
1435
atom
922
1435
STRING
923
1435
+
924
1435
(
925
1435
True
926
1435
-
927
1435
None
928
1435
power
932
1435
~
933
1435
shift_expr
1860
1436
atom_expr
908
1436
factor
911
1436
term
910
1436
arith_expr
913
1436
NUMBER
914
1436
NAME
915
1436
[
916
1436
{
917
1436
False
920
1436
atom
922
1436
STRING
923
1436
+
924
1436
shift_expr
1861
1436
(
925
1436
True
926
1436
-
927
1436
None
928
1436
power
932
1436
~
933
1437
]
1862
1438
in
atom -> [ ]
1438
>=
atom -> [ ]
1438
%
atom -> [ ]
1438
is
atom -> [ ]
1438
^
atom -> [ ]
1438
//
atom -> [ ]
1438
or
atom -> [ ]
1438
not
atom -> [ ]
1438
[
atom -> [ ]
1438
and
atom -> [ ]
1438
/
atom -> [ ]
1438
!=
atom -> [ ]
1438
>
atom -> [ ]
1438
]
atom -> [ ]
1438
&
atom -> [ ]
1438
**
atom -> [ ]
1438
@
atom -> [ ]
1438
==
atom -> [ ]
1438
<<
atom -> [ ]
1438
if
atom -> [ ]
1438
<
atom -> [ ]
1438
,
atom -> [ ]
1438
(
atom -> [ ]
1438
<=
atom -> [ ]
1438
*
atom -> [ ]
1438
.
atom -> [ ]
1438
>>
atom -> [ ]
1438
|
atom -> [ ]
1438
-
atom -> [ ]
1438
+
atom -> [ ]
1439
<<
atom -> { }
1439
+
atom -> { }
1439
//
atom -> { }
1439
is
atom -> { }
1439
>=
atom -> { }
1439
<=
atom -> { }
1439
>
atom -> { }
1439
*
atom -> { }
1439
^
atom -> { }
1439
%
atom -> { }
1439
>>
atom -> { }
1439
.
atom -> { }
1439
not
atom -> { }
1439
==
atom -> { }
1439
if
atom -> { }
1439
in
atom -> { }
1439
<
atom -> { }
1439
|
atom -> { }
1439
]
atom -> { }
1439
(
atom -> { }
1439
/
atom -> { }
1439
and
atom -> { }
1439
**
atom -> { }
1439
@
atom -> { }
1439
-
atom -> { }
1439
&
atom -> { }
1439
,
atom -> { }
1439
!=
atom -> { }
1439
or
atom -> { }
1439
[
atom -> { }
1440
atom_expr
908
1440
and_expr
909
1440
term
910
1440
factor
911
1440
shift_expr
912
1440
arith_expr
913
1440
NUMBER
914
1440
NAME
915
1440
[
916
1440
{
917
1440
expr
918
1440
False
920
1440
xor_expr
921
1440
atom
922
1440
STRING
923
1440
comparison
1863
1440
+
924
1440
(
925
1440
True
926
1440
-
927
1440
None
928
1440
power
932
1440
~
933
1441
atom_expr
908
1441
and_expr
909
1441
term
910
1441
factor
911
1441
shift_expr
912
1441
arith_expr
913
1441
NUMBER
914
1441
NAME
915
1441
[
916
1441
{
917
1441
expr
918
1441
not_test
919
1441
False
920
1441
xor_expr
921
1441
atom
922
1441
STRING
923
1441
+
924
1441
(
925
1441
True
926
1441
-
927
1441
None
928
1441
and_test
1864
1441
power
932
1441
~
933
1441
not
935
1441
comparison
936
1442
atom_expr
908
1442
and_expr
909
1442
term
910
1442
factor
911
1442
shift_expr
912
1442
arith_expr
913
1442
NUMBER
914
1442
NAME
915
1442
[
916
1442
{
917
1442
False
920
1442
xor_expr
921
1442
atom
922
1442
STRING
923
1442
+
924
1442
(
925
1442
True
926
1442
-
927
1442
None
928
1442
expr
1865
1442
power
932
1442
~
933
1443
atom_expr
472
1443
and_expr
473
1443
term
474
1443
factor
475
1443
shift_expr
476
1443
arith_expr
477
1443
NUMBER
478
1443
NAME
479
1443
[
480
1443
{
481
1443
expr
482
1443
not_test
483
1443
False
484
1443
xor_expr
485
1443
atom
487
1443
STRING
488
1443
+
489
1443
(
490
1443
True
491
1443
-
492
1443
None
493
1443
subscriptlist
1866
1443
or_test
494
1443
and_test
495
1443
power
496
1443
~
497
1443
lambda
498
1443
:
maybe_test -> 
1443
maybe_test
499
1443
test
500
1443
not
501
1443
comparison
502
1443
lambdef
503
1443
subscript
504
1444
and_test
505
1444
atom_expr
506
1444
and_expr
507
1444
term
508
1444
factor
509
1444
shift_expr
510
1444
arith_expr
511
1444
NUMBER
512
1444
NAME
513
1444
not
514
1444
[
515
1444
{
516
1444
expr
517
1444
)
1867
1444
not_test
519
1444
False
520
1444
xor_expr
521
1444
STRING
522
1444
lambda
523
1444
arglist
1868
1444
atom
525
1444
+
526
1444
True
527
1444
-
528
1444
or_test
529
1444
(
530
1444
None
531
1444
comparison
532
1444
power
533
1444
test
534
1444
~
535
1444
*
536
1444
lambdef
537
1444
**
538
1444
argument
539
1445
NAME
1869
1446
trailer_expr
1870
1446
[
1443
1446
(
1444
1446
.
1445
1446
trailer
1446
1446
<<
trailer_expr -> 
1446
@
trailer_expr -> 
1446
!=
trailer_expr -> 
1446
-
trailer_expr -> 
1446
]
trailer_expr -> 
1446
^
trailer_expr -> 
1446
<
trailer_expr -> 
1446
/
trailer_expr -> 
1446
is
trailer_expr -> 
1446
==
trailer_expr -> 
1446
&
trailer_expr -> 
1446
>=
trailer_expr -> 
1446
or
trailer_expr -> 
1446
in
trailer_expr -> 
1446
*
trailer_expr -> 
1446
not
trailer_expr -> 
1446
**
trailer_expr -> 
1446
<=
trailer_expr -> 
1446
+
trailer_expr -> 
1446
//
trailer_expr -> 
1446
%
trailer_expr -> 
1446
>
trailer_expr -> 
1446
,
trailer_expr -> 
1446
|
trailer_expr -> 
1446
if
trailer_expr -> 
1446
and
trailer_expr -> 
1446
>>
trailer_expr -> 
1447
==
atom_expr -> atom trailer_expr
1447
%
atom_expr -> atom trailer_expr
1447
+
atom_expr -> atom trailer_expr
1447
not
atom_expr -> atom trailer_expr
1447
or
atom_expr -> atom trailer_expr
1447
//
atom_expr -> atom trailer_expr
1447
and
atom_expr -> atom trailer_expr
1447
!=
atom_expr -> atom trailer_expr
1447
<<
atom_expr -> atom trailer_expr
1447
if
atom_expr -> atom trailer_expr
1447
-
atom_expr -> atom trailer_expr
1447
>>
atom_expr -> atom trailer_expr
1447
**
atom_expr -> atom trailer_expr
1447
/
atom_expr -> atom trailer_expr
1447
<
atom_expr -> atom trailer_expr
1447
in
atom_expr -> atom trailer_expr
1447
&
atom_expr -> atom trailer_expr
1447
is
atom_expr -> atom trailer_expr
1447
|
atom_expr -> atom trailer_expr
1447
]
atom_expr -> atom trailer_expr
1447
>
atom_expr -> atom trailer_expr
1447
>=
atom_expr -> atom trailer_expr
1447
<=
atom_expr -> atom trailer_expr
1447
@
atom_expr -> atom trailer_expr
1447
*
atom_expr -> atom trailer_expr
1447
,
atom_expr -> atom trailer_expr
1447
^
atom_expr -> atom trailer_expr
1448
<<
factor -> + factor
1448
,
factor -> + factor
1448
&
factor -> + factor
1448
>
factor -> + factor
1448
if
factor -> + factor
1448
not
factor -> + factor
1448
+
factor -> + factor
1448
^
factor -> + factor
1448
==
factor -> + factor
1448
/
factor -> + factor
1448
|
factor -> + factor
1448
>=
factor -> + factor
1448
%
factor -> + factor
1448
<
factor -> + factor
1448
is
factor -> + factor
1448
]
factor -> + factor
1448
or
factor -> + factor
1448
@
factor -> + factor
1448
//
factor -> + factor
1448
and
factor -> + factor
1448
-
factor -> + factor
1448
in
factor -> + factor
1448
*
factor -> + factor
1448
!=
factor -> + factor
1448
>>
factor -> + factor
1448
<=
factor -> + factor
1449
)
1871
1450
>=
atom -> ( )
1450
]
atom -> ( )
1450
>>
atom -> ( )
1450
not
atom -> ( )
1450
if
atom -> ( )
1450
&
atom -> ( )
1450
^
atom -> ( )
1450
.
atom -> ( )
1450
/
atom -> ( )
1450
in
atom -> ( )
1450
>
atom -> ( )
1450
%
atom -> ( )
1450
(
atom -> ( )
1450
==
atom -> ( )
1450
,
atom -> ( )
1450
[
atom -> ( )
1450
<=
atom -> ( )
1450
+
atom -> ( )
1450
|
atom -> ( )
1450
-
atom -> ( )
1450
or
atom -> ( )
1450
@
atom -> ( )
1450
<<
atom -> ( )
1450
is
atom -> ( )
1450
**
atom -> ( )
1450
*
atom -> ( )
1450
and
atom -> ( )
1450
<
atom -> ( )
1450
!=
atom -> ( )
1450
//
atom -> ( )
1451
@
factor -> - factor
1451
^
factor -> - factor
1451
==
factor -> - factor
1451
]
factor -> - factor
1451
in
factor -> - factor
1451
>>
factor -> - factor
1451
,
factor -> - factor
1451
//
factor -> - factor
1451
and
factor -> - factor
1451
<=
factor -> - factor
1451
!=
factor -> - factor
1451
-
factor -> - factor
1451
&
factor -> - factor
1451
not
factor -> - factor
1451
>
factor -> - factor
1451
*
factor -> - factor
1451
%
factor -> - factor
1451
/
factor -> - factor
1451
<
factor -> - factor
1451
|
factor -> - factor
1451
+
factor -> - factor
1451
if
factor -> - factor
1451
<<
factor -> - factor
1451
is
factor -> - factor
1451
or
factor -> - factor
1451
>=
factor -> - factor
1452
atom_expr
590
1452
and_expr
591
1452
term
592
1452
[
593
1452
shift_expr
594
1452
arith_expr
595
1452
NUMBER
596
1452
NAME
597
1452
factor
598
1452
{
599
1452
expr
600
1452
False
601
1452
xor_expr
602
1452
STRING
603
1452
+
604
1452
True
605
1452
-
606
1452
(
607
1452
None
608
1452
atom
609
1452
power
610
1452
~
611
1452
not_test
612
1452
not
613
1452
comparison
614
1452
or_test
1872
1452
and_test
615
1453
atom_expr
908
1453
and_expr
909
1453
term
910
1453
factor
911
1453
shift_expr
912
1453
arith_expr
913
1453
NUMBER
914
1453
NAME
915
1453
[
916
1453
{
917
1453
expr
918
1453
not_test
919
1453
False
920
1453
xor_expr
921
1453
atom
922
1453
STRING
923
1453
+
924
1453
(
925
1453
True
926
1453
-
927
1453
None
928
1453
and_test
931
1453
power
932
1453
~
933
1453
not
935
1453
comparison
936
1453
or_test
1873
1454
<<
factor -> ~ factor
1454
in
factor -> ~ factor
1454
<=
factor -> ~ factor
1454
if
factor -> ~ factor
1454
|
factor -> ~ factor
1454
<
factor -> ~ factor
1454
>>
factor -> ~ factor
1454
==
factor -> ~ factor
1454
>=
factor -> ~ factor
1454
!=
factor -> ~ factor
1454
,
factor -> ~ factor
1454
//
factor -> ~ factor
1454
*
factor -> ~ factor
1454
/
factor -> ~ factor
1454
+
factor -> ~ factor
1454
]
factor -> ~ factor
1454
is
factor -> ~ factor
1454
not
factor -> ~ factor
1454
and
factor -> ~ factor
1454
^
factor -> ~ factor
1454
@
factor -> ~ factor
1454
>
factor -> ~ factor
1454
-
factor -> ~ factor
1454
or
factor -> ~ factor
1454
&
factor -> ~ factor
1454
%
factor -> ~ factor
1455
:
1874
1456
atom_expr
908
1456
and_expr
909
1456
term
910
1456
factor
911
1456
shift_expr
912
1456
arith_expr
913
1456
NUMBER
914
1456
NAME
915
1456
[
916
1456
{
917
1456
expr
918
1456
not_test
919
1456
False
920
1456
xor_expr
921
1456
atom
922
1456
STRING
923
1456
+
924
1456
(
925
1456
True
926
1456
-
927
1456
test
1875
1456
None
928
1456
or_test
929
1456
and_test
931
1456
power
932
1456
~
933
1456
lambda
934
1456
not
935
1456
comparison
936
1456
lambdef
938
1457
if
not_test -> not not_test
1457
]
not_test -> not not_test
1457
,
not_test -> not not_test
1457
or
not_test -> not not_test
1457
and
not_test -> not not_test
1458
and_test
1876
1458
atom_expr
1877
1458
and_expr
1878
1458
term
1879
1458
factor
1880
1458
shift_expr
1881
1458
arith_expr
1882
1458
NUMBER
1883
1458
NAME
1884
1458
[
1885
1458
{
1886
1458
expr
1887
1458
False
1888
1458
xor_expr
1889
1458
atom
1890
1458
STRING
1891
1458
+
1892
1458
(
1893
1458
True
1894
1458
-
1895
1458
None
1896
1458
comparison
1897
1458
power
1898
1458
~
1899
1458
not_test
1900
1458
or_test
1901
1458
not
1902
1459
for
lambdef -> lambda varargslist : test
1459
,
lambdef -> lambda varargslist : test
1459
]
lambdef -> lambda varargslist : test
1460
while
1591
1460
decorators
1592
1460
[
3
1460
small_stmt
1593
1460
stmt_list
1903
1460
{
5
1460
atom_expr
6
1460
expr
7
1460
NUMBER
8
1460
True
9
1460
factor
10
1460
class
1594
1460
shift_expr
12
1460
atom
13
1460
xor_expr
14
1460
term
15
1460
if
1595
1460
try
1596
1460
with
1597
1460
decorated
1598
1460
and_test
20
1460
and_expr
21
1460
for_stmt
1599
1460
False
23
1460
def
1600
1460
or_test
25
1460
with_stmt
1601
1460
funcdef
1602
1460
lambda
28
1460
try_stmt
1603
1460
None
29
1460
+
30
1460
if_stmt
1604
1460
arith_expr
32
1460
test
33
1460
(
34
1460
compound_stmt
1605
1460
-
36
1460
NAME
37
1460
while_stmt
1606
1460
not_test
40
1460
lambdef
41
1460
for
1607
1460
STRING
43
1460
~
44
1460
simple_stmt
1608
1460
classdef
1609
1460
power
47
1460
comparison
48
1460
continue
49
1460
expr_stmt
50
1460
not
51
1460
del_stmt
52
1460
yield_stmt
53
1460
@
54
1460
decorator
55
1460
yield
56
1460
assert_stmt
57
1460
break_stmt
58
1460
return
59
1460
pass
60
1460
continue_stmt
61
1460
test_list
62
1460
break
63
1460
del
64
1460
pass_stmt
65
1460
nonlocal
66
1460
assert
67
1460
global_stmt
68
1460
raise
69
1460
stmt
1611
1460
raise_stmt
70
1460
global
71
1460
nonlocal_stmt
72
1460
return_stmt
75
1460
flow_stmt
76
1461
:
1904
1462
atom_expr
6
1462
factor
10
1462
[
3
1462
term
15
1462
STRING
43
1462
arith_expr
32
1462
NUMBER
8
1462
small_stmt
4
1462
NAME
37
1462
{
5
1462
expr
7
1462
not
51
1462
True
9
1462
shift_expr
12
1462
atom
13
1462
xor_expr
14
1462
NEWLINE
942
1462
(
34
1462
None
29
1462
and_test
20
1462
and_expr
21
1462
False
23
1462
or_test
25
1462
test
33
1462
lambda
28
1462
+
30
1462
simple_stmt
943
1462
suite
1905
1462
nonlocal
66
1462
-
36
1462
not_test
40
1462
power
47
1462
lambdef
41
1462
~
44
1462
comparison
48
1462
assert
67
1462
global_stmt
68
1462
continue
49
1462
expr_stmt
50
1462
test_list
62
1462
raise
69
1462
del_stmt
52
1462
yield_stmt
53
1462
raise_stmt
70
1462
yield
56
1462
assert_stmt
57
1462
global
71
1462
nonlocal_stmt
72
1462
break_stmt
58
1462
return_stmt
75
1462
return
59
1462
pass
60
1462
continue_stmt
61
1462
flow_stmt
76
1462
break
63
1462
del
64
1462
pass_stmt
65
1463
*
power -> atom_expr ** factor
1463
:
power -> atom_expr ** factor
1463
in
power -> atom_expr ** factor
1463
<
power -> atom_expr ** factor
1463
if
power -> atom_expr ** factor
1463
-
power -> atom_expr ** factor
1463
>>
power -> atom_expr ** factor
1463
]
power -> atom_expr ** factor
1463
<=
power -> atom_expr ** factor
1463
and
power -> atom_expr ** factor
1463
==
power -> atom_expr ** factor
1463
%
power -> atom_expr ** factor
1463
/
power -> atom_expr ** factor
1463
^
power -> atom_expr ** factor
1463
<<
power -> atom_expr ** factor
1463
,
power -> atom_expr ** factor
1463
>
power -> atom_expr ** factor
1463
//
power -> atom_expr ** factor
1463
is
power -> atom_expr ** factor
1463
@
power -> atom_expr ** factor
1463
+
power -> atom_expr ** factor
1463
|
power -> atom_expr ** factor
1463
!=
power -> atom_expr ** factor
1463
>=
power -> atom_expr ** factor
1463
or
power -> atom_expr ** factor
1463
&
power -> atom_expr ** factor
1463
not
power -> atom_expr ** factor
1464
and
xor_expr -> and_expr ^ xor_expr
1464
<
xor_expr -> and_expr ^ xor_expr
1464
>
xor_expr -> and_expr ^ xor_expr
1464
in
xor_expr -> and_expr ^ xor_expr
1464
|
xor_expr -> and_expr ^ xor_expr
1464
<=
xor_expr -> and_expr ^ xor_expr
1464
]
xor_expr -> and_expr ^ xor_expr
1464
!=
xor_expr -> and_expr ^ xor_expr
1464
not
xor_expr -> and_expr ^ xor_expr
1464
:
xor_expr -> and_expr ^ xor_expr
1464
or
xor_expr -> and_expr ^ xor_expr
1464
if
xor_expr -> and_expr ^ xor_expr
1464
is
xor_expr -> and_expr ^ xor_expr
1464
==
xor_expr -> and_expr ^ xor_expr
1464
,
xor_expr -> and_expr ^ xor_expr
1464
>=
xor_expr -> and_expr ^ xor_expr
1465
<=
arith_expr -> term + arith_expr
1465
&
arith_expr -> term + arith_expr
1465
>
arith_expr -> term + arith_expr
1465
,
arith_expr -> term + arith_expr
1465
]
arith_expr -> term + arith_expr
1465
>=
arith_expr -> term + arith_expr
1465
not
arith_expr -> term + arith_expr
1465
|
arith_expr -> term + arith_expr
1465
in
arith_expr -> term + arith_expr
1465
:
arith_expr -> term + arith_expr
1465
if
arith_expr -> term + arith_expr
1465
>>
arith_expr -> term + arith_expr
1465
is
arith_expr -> term + arith_expr
1465
^
arith_expr -> term + arith_expr
1465
<<
arith_expr -> term + arith_expr
1465
<
arith_expr -> term + arith_expr
1465
==
arith_expr -> term + arith_expr
1465
!=
arith_expr -> term + arith_expr
1465
or
arith_expr -> term + arith_expr
1465
and
arith_expr -> term + arith_expr
1466
<=
arith_expr -> term - arith_expr
1466
if
arith_expr -> term - arith_expr
1466
not
arith_expr -> term - arith_expr
1466
|
arith_expr -> term - arith_expr
1466
,
arith_expr -> term - arith_expr
1466
>>
arith_expr -> term - arith_expr
1466
:
arith_expr -> term - arith_expr
1466
>=
arith_expr -> term - arith_expr
1466
<<
arith_expr -> term - arith_expr
1466
is
arith_expr -> term - arith_expr
1466
!=
arith_expr -> term - arith_expr
1466
in
arith_expr -> term - arith_expr
1466
<
arith_expr -> term - arith_expr
1466
]
arith_expr -> term - arith_expr
1466
or
arith_expr -> term - arith_expr
1466
==
arith_expr -> term - arith_expr
1466
and
arith_expr -> term - arith_expr
1466
&
arith_expr -> term - arith_expr
1466
^
arith_expr -> term - arith_expr
1466
>
arith_expr -> term - arith_expr
1467
|
term -> factor * term
1467
-
term -> factor * term
1467
in
term -> factor * term
1467
and
term -> factor * term
1467
<<
term -> factor * term
1467
>=
term -> factor * term
1467
if
term -> factor * term
1467
]
term -> factor * term
1467
or
term -> factor * term
1467
<=
term -> factor * term
1467
is
term -> factor * term
1467
:
term -> factor * term
1467
^
term -> factor * term
1467
!=
term -> factor * term
1467
==
term -> factor * term
1467
,
term -> factor * term
1467
&
term -> factor * term
1467
>
term -> factor * term
1467
not
term -> factor * term
1467
<
term -> factor * term
1467
+
term -> factor * term
1467
>>
term -> factor * term
1468
!=
term -> factor % term
1468
>>
term -> factor % term
1468
==
term -> factor % term
1468
>=
term -> factor % term
1468
,
term -> factor % term
1468
^
term -> factor % term
1468
not
term -> factor % term
1468
or
term -> factor % term
1468
if
term -> factor % term
1468
<=
term -> factor % term
1468
:
term -> factor % term
1468
<
term -> factor % term
1468
is
term -> factor % term
1468
-
term -> factor % term
1468
in
term -> factor % term
1468
]
term -> factor % term
1468
>
term -> factor % term
1468
<<
term -> factor % term
1468
and
term -> factor % term
1468
|
term -> factor % term
1468
+
term -> factor % term
1468
&
term -> factor % term
1469
is
term -> factor // term
1469
if
term -> factor // term
1469
>
term -> factor // term
1469
==
term -> factor // term
1469
+
term -> factor // term
1469
^
term -> factor // term
1469
]
term -> factor // term
1469
-
term -> factor // term
1469
,
term -> factor // term
1469
in
term -> factor // term
1469
>>
term -> factor // term
1469
|
term -> factor // term
1469
<<
term -> factor // term
1469
!=
term -> factor // term
1469
&
term -> factor // term
1469
not
term -> factor // term
1469
<=
term -> factor // term
1469
<
term -> factor // term
1469
:
term -> factor // term
1469
and
term -> factor // term
1469
>=
term -> factor // term
1469
or
term -> factor // term
1470
>=
term -> factor / term
1470
!=
term -> factor / term
1470
]
term -> factor / term
1470
not
term -> factor / term
1470
^
term -> factor / term
1470
in
term -> factor / term
1470
and
term -> factor / term
1470
<<
term -> factor / term
1470
,
term -> factor / term
1470
+
term -> factor / term
1470
>
term -> factor / term
1470
|
term -> factor / term
1470
or
term -> factor / term
1470
if
term -> factor / term
1470
>>
term -> factor / term
1470
<
term -> factor / term
1470
&
term -> factor / term
1470
-
term -> factor / term
1470
is
term -> factor / term
1470
==
term -> factor / term
1470
<=
term -> factor / term
1470
:
term -> factor / term
1471
-
term -> factor @ term
1471
&
term -> factor @ term
1471
^
term -> factor @ term
1471
:
term -> factor @ term
1471
]
term -> factor @ term
1471
<
term -> factor @ term
1471
!=
term -> factor @ term
1471
<<
term -> factor @ term
1471
is
term -> factor @ term
1471
<=
term -> factor @ term
1471
and
term -> factor @ term
1471
+
term -> factor @ term
1471
,
term -> factor @ term
1471
>
term -> factor @ term
1471
if
term -> factor @ term
1471
not
term -> factor @ term
1471
>>
term -> factor @ term
1471
>=
term -> factor @ term
1471
|
term -> factor @ term
1471
in
term -> factor @ term
1471
==
term -> factor @ term
1471
or
term -> factor @ term
1472
if
and_expr -> shift_expr & and_expr
1472
!=
and_expr -> shift_expr & and_expr
1472
<=
and_expr -> shift_expr & and_expr
1472
not
and_expr -> shift_expr & and_expr
1472
,
and_expr -> shift_expr & and_expr
1472
^
and_expr -> shift_expr & and_expr
1472
|
and_expr -> shift_expr & and_expr
1472
or
and_expr -> shift_expr & and_expr
1472
]
and_expr -> shift_expr & and_expr
1472
in
and_expr -> shift_expr & and_expr
1472
>
and_expr -> shift_expr & and_expr
1472
and
and_expr -> shift_expr & and_expr
1472
==
and_expr -> shift_expr & and_expr
1472
:
and_expr -> shift_expr & and_expr
1472
<
and_expr -> shift_expr & and_expr
1472
is
and_expr -> shift_expr & and_expr
1472
>=
and_expr -> shift_expr & and_expr
1473
,
shift_expr -> arith_expr << shift_expr
1473
^
shift_expr -> arith_expr << shift_expr
1473
|
shift_expr -> arith_expr << shift_expr
1473
&
shift_expr -> arith_expr << shift_expr
1473
:
shift_expr -> arith_expr << shift_expr
1473
and
shift_expr -> arith_expr << shift_expr
1473
is
shift_expr -> arith_expr << shift_expr
1473
in
shift_expr -> arith_expr << shift_expr
1473
<=
shift_expr -> arith_expr << shift_expr
1473
]
shift_expr -> arith_expr << shift_expr
1473
not
shift_expr -> arith_expr << shift_expr
1473
==
shift_expr -> arith_expr << shift_expr
1473
>=
shift_expr -> arith_expr << shift_expr
1473
if
shift_expr -> arith_expr << shift_expr
1473
<
shift_expr -> arith_expr << shift_expr
1473
>
shift_expr -> arith_expr << shift_expr
1473
or
shift_expr -> arith_expr << shift_expr
1473
!=
shift_expr -> arith_expr << shift_expr
1474
or
shift_expr -> arith_expr >> shift_expr
1474
and
shift_expr -> arith_expr >> shift_expr
1474
>=
shift_expr -> arith_expr >> shift_expr
1474
not
shift_expr -> arith_expr >> shift_expr
1474
:
shift_expr -> arith_expr >> shift_expr
1474
^
shift_expr -> arith_expr >> shift_expr
1474
is
shift_expr -> arith_expr >> shift_expr
1474
in
shift_expr -> arith_expr >> shift_expr
1474
if
shift_expr -> arith_expr >> shift_expr
1474
<=
shift_expr -> arith_expr >> shift_expr
1474
]
shift_expr -> arith_expr >> shift_expr
1474
==
shift_expr -> arith_expr >> shift_expr
1474
,
shift_expr -> arith_expr >> shift_expr
1474
<
shift_expr -> arith_expr >> shift_expr
1474
!=
shift_expr -> arith_expr >> shift_expr
1474
|
shift_expr -> arith_expr >> shift_expr
1474
>
shift_expr -> arith_expr >> shift_expr
1474
&
shift_expr -> arith_expr >> shift_expr
1475
and
atom -> [ test_list_comp ]
1475
<=
atom -> [ test_list_comp ]
1475
**
atom -> [ test_list_comp ]
1475
^
atom -> [ test_list_comp ]
1475
[
atom -> [ test_list_comp ]
1475
,
atom -> [ test_list_comp ]
1475
!=
atom -> [ test_list_comp ]
1475
<
atom -> [ test_list_comp ]
1475
/
atom -> [ test_list_comp ]
1475
-
atom -> [ test_list_comp ]
1475
>=
atom -> [ test_list_comp ]
1475
if
atom -> [ test_list_comp ]
1475
]
atom -> [ test_list_comp ]
1475
%
atom -> [ test_list_comp ]
1475
is
atom -> [ test_list_comp ]
1475
+
atom -> [ test_list_comp ]
1475
&
atom -> [ test_list_comp ]
1475
@
atom -> [ test_list_comp ]
1475
or
atom -> [ test_list_comp ]
1475
in
atom -> [ test_list_comp ]
1475
==
atom -> [ test_list_comp ]
1475
not
atom -> [ test_list_comp ]
1475
.
atom -> [ test_list_comp ]
1475
|
atom -> [ test_list_comp ]
1475
>
atom -> [ test_list_comp ]
1475
<<
atom -> [ test_list_comp ]
1475
//
atom -> [ test_list_comp ]
1475
(
atom -> [ test_list_comp ]
1475
*
atom -> [ test_list_comp ]
1475
:
atom -> [ test_list_comp ]
1475
>>
atom -> [ test_list_comp ]
1476
if
comparison -> expr comp_op comparison
1476
or
comparison -> expr comp_op comparison
1476
and
comparison -> expr comp_op comparison
1476
]
comparison -> expr comp_op comparison
1476
:
comparison -> expr comp_op comparison
1476
,
comparison -> expr comp_op comparison
1477
,
and_test -> not_test and and_test
1477
:
and_test -> not_test and and_test
1477
or
and_test -> not_test and and_test
1477
if
and_test -> not_test and and_test
1477
]
and_test -> not_test and and_test
1478
>
expr -> xor_expr | expr
1478
]
expr -> xor_expr | expr
1478
is
expr -> xor_expr | expr
1478
if
expr -> xor_expr | expr
1478
<
expr -> xor_expr | expr
1478
>=
expr -> xor_expr | expr
1478
or
expr -> xor_expr | expr
1478
and
expr -> xor_expr | expr
1478
in
expr -> xor_expr | expr
1478
!=
expr -> xor_expr | expr
1478
:
expr -> xor_expr | expr
1478
<=
expr -> xor_expr | expr
1478
==
expr -> xor_expr | expr
1478
,
expr -> xor_expr | expr
1478
not
expr -> xor_expr | expr
1479
]
1906
1480
<
trailer -> ( )
1480
.
trailer -> ( )
1480
*
trailer -> ( )
1480
or
trailer -> ( )
1480
is
trailer -> ( )
1480
:
trailer -> ( )
1480
/
trailer -> ( )
1480
+
trailer -> ( )
1480
@
trailer -> ( )
1480
>
trailer -> ( )
1480
//
trailer -> ( )
1480
|
trailer -> ( )
1480
!=
trailer -> ( )
1480
&
trailer -> ( )
1480
^
trailer -> ( )
1480
<=
trailer -> ( )
1480
]
trailer -> ( )
1480
%
trailer -> ( )
1480
>>
trailer -> ( )
1480
**
trailer -> ( )
1480
and
trailer -> ( )
1480
(
trailer -> ( )
1480
,
trailer -> ( )
1480
==
trailer -> ( )
1480
if
trailer -> ( )
1480
[
trailer -> ( )
1480
<<
trailer -> ( )
1480
in
trailer -> ( )
1480
-
trailer -> ( )
1480
not
trailer -> ( )
1480
>=
trailer -> ( )
1481
)
1907
1482
|
trailer -> . NAME
1482
@
trailer -> . NAME
1482
^
trailer -> . NAME
1482
>
trailer -> . NAME
1482
+
trailer -> . NAME
1482
.
trailer -> . NAME
1482
:
trailer -> . NAME
1482
!=
trailer -> . NAME
1482
<<
trailer -> . NAME
1482
<=
trailer -> . NAME
1482
[
trailer -> . NAME
1482
*
trailer -> . NAME
1482
(
trailer -> . NAME
1482
//
trailer -> . NAME
1482
**
trailer -> . NAME
1482
-
trailer -> . NAME
1482
]
trailer -> . NAME
1482
in
trailer -> . NAME
1482
>=
trailer -> . NAME
1482
,
trailer -> . NAME
1482
==
trailer -> . NAME
1482
or
trailer -> . NAME
1482
and
trailer -> . NAME
1482
%
trailer -> . NAME
1482
is
trailer -> . NAME
1482
<
trailer -> . NAME
1482
not
trailer -> . NAME
1482
/
trailer -> . NAME
1482
if
trailer -> . NAME
1482
&
trailer -> . NAME
1482
>>
trailer -> . NAME
1483
&
trailer_expr -> trailer trailer_expr
1483
not
trailer_expr -> trailer trailer_expr
1483
and
trailer_expr -> trailer trailer_expr
1483
+
trailer_expr -> trailer trailer_expr
1483
==
trailer_expr -> trailer trailer_expr
1483
**
trailer_expr -> trailer trailer_expr
1483
/
trailer_expr -> trailer trailer_expr
1483
^
trailer_expr -> trailer trailer_expr
1483
,
trailer_expr -> trailer trailer_expr
1483
>
trailer_expr -> trailer trailer_expr
1483
*
trailer_expr -> trailer trailer_expr
1483
//
trailer_expr -> trailer trailer_expr
1483
>>
trailer_expr -> trailer trailer_expr
1483
<<
trailer_expr -> trailer trailer_expr
1483
>=
trailer_expr -> trailer trailer_expr
1483
:
trailer_expr -> trailer trailer_expr
1483
<=
trailer_expr -> trailer trailer_expr
1483
-
trailer_expr -> trailer trailer_expr
1483
is
trailer_expr -> trailer trailer_expr
1483
]
trailer_expr -> trailer trailer_expr
1483
in
trailer_expr -> trailer trailer_expr
1483
<
trailer_expr -> trailer trailer_expr
1483
|
trailer_expr -> trailer trailer_expr
1483
if
trailer_expr -> trailer trailer_expr
1483
%
trailer_expr -> trailer trailer_expr
1483
@
trailer_expr -> trailer trailer_expr
1483
!=
trailer_expr -> trailer trailer_expr
1483
or
trailer_expr -> trailer trailer_expr
1484
if
atom -> ( test_list_comp )
1484
or
atom -> ( test_list_comp )
1484
*
atom -> ( test_list_comp )
1484
|
atom -> ( test_list_comp )
1484
>>
atom -> ( test_list_comp )
1484
%
atom -> ( test_list_comp )
1484
not
atom -> ( test_list_comp )
1484
//
atom -> ( test_list_comp )
1484
+
atom -> ( test_list_comp )
1484
and
atom -> ( test_list_comp )
1484
>
atom -> ( test_list_comp )
1484
[
atom -> ( test_list_comp )
1484
^
atom -> ( test_list_comp )
1484
:
atom -> ( test_list_comp )
1484
!=
atom -> ( test_list_comp )
1484
<<
atom -> ( test_list_comp )
1484
**
atom -> ( test_list_comp )
1484
is
atom -> ( test_list_comp )
1484
<=
atom -> ( test_list_comp )
1484
-
atom -> ( test_list_comp )
1484
&
atom -> ( test_list_comp )
1484
(
atom -> ( test_list_comp )
1484
,
atom -> ( test_list_comp )
1484
in
atom -> ( test_list_comp )
1484
@
atom -> ( test_list_comp )
1484
.
atom -> ( test_list_comp )
1484
<
atom -> ( test_list_comp )
1484
/
atom -> ( test_list_comp )
1484
==
atom -> ( test_list_comp )
1484
>=
atom -> ( test_list_comp )
1484
]
atom -> ( test_list_comp )
1485
else
1908
1486
]
or_test -> and_test or or_test
1486
:
or_test -> and_test or or_test
1486
,
or_test -> and_test or or_test
1486
if
or_test -> and_test or or_test
1487
atom_expr
472
1487
and_expr
473
1487
term
474
1487
factor
475
1487
shift_expr
476
1487
arith_expr
477
1487
NUMBER
478
1487
NAME
479
1487
[
480
1487
{
481
1487
expr
482
1487
not_test
483
1487
False
484
1487
xor_expr
485
1487
atom
487
1487
STRING
488
1487
+
489
1487
(
490
1487
True
491
1487
None
493
1487
-
492
1487
or_test
494
1487
and_test
495
1487
power
496
1487
~
497
1487
lambda
498
1487
test
1909
1487
not
501
1487
comparison
502
1487
lambdef
503
1488
]
lambdef -> lambda : test
1488
,
lambdef -> lambda : test
1488
:
lambdef -> lambda : test
1489
:
1910
1489
,
sliceop -> 
1489
sliceop
1911
1489
]
sliceop -> 
1490
,
maybe_test -> test
1490
]
maybe_test -> test
1490
:
maybe_test -> test
1491
]
subscriptlist -> subscript , subscriptlist
1492
if
or_test -> and_test or or_test
1492
for
or_test -> and_test or or_test
1492
,
or_test -> and_test or or_test
1492
)
or_test -> and_test or or_test
1492
=
or_test -> and_test or or_test
1493
*
power -> atom_expr ** factor
1493
in
power -> atom_expr ** factor
1493
)
power -> atom_expr ** factor
1493
<
power -> atom_expr ** factor
1493
if
power -> atom_expr ** factor
1493
-
power -> atom_expr ** factor
1493
>>
power -> atom_expr ** factor
1493
<=
power -> atom_expr ** factor
1493
and
power -> atom_expr ** factor
1493
==
power -> atom_expr ** factor
1493
%
power -> atom_expr ** factor
1493
=
power -> atom_expr ** factor
1493
/
power -> atom_expr ** factor
1493
^
power -> atom_expr ** factor
1493
<<
power -> atom_expr ** factor
1493
,
power -> atom_expr ** factor
1493
>
power -> atom_expr ** factor
1493
//
power -> atom_expr ** factor
1493
is
power -> atom_expr ** factor
1493
for
power -> atom_expr ** factor
1493
@
power -> atom_expr ** factor
1493
+
power -> atom_expr ** factor
1493
|
power -> atom_expr ** factor
1493
!=
power -> atom_expr ** factor
1493
>=
power -> atom_expr ** factor
1493
or
power -> atom_expr ** factor
1493
&
power -> atom_expr ** factor
1493
not
power -> atom_expr ** factor
1494
and
xor_expr -> and_expr ^ xor_expr
1494
<
xor_expr -> and_expr ^ xor_expr
1494
>
xor_expr -> and_expr ^ xor_expr
1494
in
xor_expr -> and_expr ^ xor_expr
1494
|
xor_expr -> and_expr ^ xor_expr
1494
<=
xor_expr -> and_expr ^ xor_expr
1494
for
xor_expr -> and_expr ^ xor_expr
1494
)
xor_expr -> and_expr ^ xor_expr
1494
!=
xor_expr -> and_expr ^ xor_expr
1494
=
xor_expr -> and_expr ^ xor_expr
1494
not
xor_expr -> and_expr ^ xor_expr
1494
or
xor_expr -> and_expr ^ xor_expr
1494
if
xor_expr -> and_expr ^ xor_expr
1494
is
xor_expr -> and_expr ^ xor_expr
1494
==
xor_expr -> and_expr ^ xor_expr
1494
,
xor_expr -> and_expr ^ xor_expr
1494
>=
xor_expr -> and_expr ^ xor_expr
1495
<=
arith_expr -> term + arith_expr
1495
&
arith_expr -> term + arith_expr
1495
>
arith_expr -> term + arith_expr
1495
,
arith_expr -> term + arith_expr
1495
)
arith_expr -> term + arith_expr
1495
>=
arith_expr -> term + arith_expr
1495
not
arith_expr -> term + arith_expr
1495
|
arith_expr -> term + arith_expr
1495
in
arith_expr -> term + arith_expr
1495
if
arith_expr -> term + arith_expr
1495
>>
arith_expr -> term + arith_expr
1495
is
arith_expr -> term + arith_expr
1495
^
arith_expr -> term + arith_expr
1495
<<
arith_expr -> term + arith_expr
1495
<
arith_expr -> term + arith_expr
1495
==
arith_expr -> term + arith_expr
1495
!=
arith_expr -> term + arith_expr
1495
for
arith_expr -> term + arith_expr
1495
or
arith_expr -> term + arith_expr
1495
=
arith_expr -> term + arith_expr
1495
and
arith_expr -> term + arith_expr
1496
<=
arith_expr -> term - arith_expr
1496
if
arith_expr -> term - arith_expr
1496
)
arith_expr -> term - arith_expr
1496
not
arith_expr -> term - arith_expr
1496
|
arith_expr -> term - arith_expr
1496
,
arith_expr -> term - arith_expr
1496
>>
arith_expr -> term - arith_expr
1496
>=
arith_expr -> term - arith_expr
1496
<<
arith_expr -> term - arith_expr
1496
=
arith_expr -> term - arith_expr
1496
is
arith_expr -> term - arith_expr
1496
!=
arith_expr -> term - arith_expr
1496
in
arith_expr -> term - arith_expr
1496
<
arith_expr -> term - arith_expr
1496
or
arith_expr -> term - arith_expr
1496
for
arith_expr -> term - arith_expr
1496
==
arith_expr -> term - arith_expr
1496
and
arith_expr -> term - arith_expr
1496
&
arith_expr -> term - arith_expr
1496
^
arith_expr -> term - arith_expr
1496
>
arith_expr -> term - arith_expr
1497
is
term -> factor // term
1497
if
term -> factor // term
1497
>
term -> factor // term
1497
)
term -> factor // term
1497
==
term -> factor // term
1497
+
term -> factor // term
1497
^
term -> factor // term
1497
-
term -> factor // term
1497
,
term -> factor // term
1497
in
term -> factor // term
1497
>>
term -> factor // term
1497
|
term -> factor // term
1497
=
term -> factor // term
1497
<<
term -> factor // term
1497
!=
term -> factor // term
1497
&
term -> factor // term
1497
not
term -> factor // term
1497
<=
term -> factor // term
1497
<
term -> factor // term
1497
for
term -> factor // term
1497
and
term -> factor // term
1497
>=
term -> factor // term
1497
or
term -> factor // term
1498
>=
term -> factor / term
1498
!=
term -> factor / term
1498
)
term -> factor / term
1498
not
term -> factor / term
1498
^
term -> factor / term
1498
in
term -> factor / term
1498
and
term -> factor / term
1498
<<
term -> factor / term
1498
for
term -> factor / term
1498
,
term -> factor / term
1498
+
term -> factor / term
1498
>
term -> factor / term
1498
|
term -> factor / term
1498
or
term -> factor / term
1498
if
term -> factor / term
1498
>>
term -> factor / term
1498
<
term -> factor / term
1498
&
term -> factor / term
1498
-
term -> factor / term
1498
is
term -> factor / term
1498
==
term -> factor / term
1498
<=
term -> factor / term
1498
=
term -> factor / term
1499
|
term -> factor * term
1499
-
term -> factor * term
1499
in
term -> factor * term
1499
and
term -> factor * term
1499
<<
term -> factor * term
1499
>=
term -> factor * term
1499
if
term -> factor * term
1499
or
term -> factor * term
1499
<=
term -> factor * term
1499
is
term -> factor * term
1499
^
term -> factor * term
1499
!=
term -> factor * term
1499
=
term -> factor * term
1499
==
term -> factor * term
1499
,
term -> factor * term
1499
&
term -> factor * term
1499
>
term -> factor * term
1499
not
term -> factor * term
1499
for
term -> factor * term
1499
<
term -> factor * term
1499
+
term -> factor * term
1499
>>
term -> factor * term
1499
)
term -> factor * term
1500
!=
term -> factor % term
1500
>>
term -> factor % term
1500
)
term -> factor % term
1500
for
term -> factor % term
1500
==
term -> factor % term
1500
>=
term -> factor % term
1500
,
term -> factor % term
1500
^
term -> factor % term
1500
not
term -> factor % term
1500
or
term -> factor % term
1500
if
term -> factor % term
1500
<=
term -> factor % term
1500
<
term -> factor % term
1500
is
term -> factor % term
1500
-
term -> factor % term
1500
=
term -> factor % term
1500
in
term -> factor % term
1500
>
term -> factor % term
1500
<<
term -> factor % term
1500
and
term -> factor % term
1500
|
term -> factor % term
1500
+
term -> factor % term
1500
&
term -> factor % term
1501
=
term -> factor @ term
1501
-
term -> factor @ term
1501
&
term -> factor @ term
1501
^
term -> factor @ term
1501
<
term -> factor @ term
1501
!=
term -> factor @ term
1501
<<
term -> factor @ term
1501
is
term -> factor @ term
1501
for
term -> factor @ term
1501
<=
term -> factor @ term
1501
and
term -> factor @ term
1501
+
term -> factor @ term
1501
,
term -> factor @ term
1501
>
term -> factor @ term
1501
if
term -> factor @ term
1501
not
term -> factor @ term
1501
>>
term -> factor @ term
1501
>=
term -> factor @ term
1501
|
term -> factor @ term
1501
in
term -> factor @ term
1501
==
term -> factor @ term
1501
or
term -> factor @ term
1501
)
term -> factor @ term
1502
if
and_expr -> shift_expr & and_expr
1502
!=
and_expr -> shift_expr & and_expr
1502
<=
and_expr -> shift_expr & and_expr
1502
not
and_expr -> shift_expr & and_expr
1502
,
and_expr -> shift_expr & and_expr
1502
)
and_expr -> shift_expr & and_expr
1502
=
and_expr -> shift_expr & and_expr
1502
^
and_expr -> shift_expr & and_expr
1502
|
and_expr -> shift_expr & and_expr
1502
or
and_expr -> shift_expr & and_expr
1502
in
and_expr -> shift_expr & and_expr
1502
>
and_expr -> shift_expr & and_expr
1502
for
and_expr -> shift_expr & and_expr
1502
and
and_expr -> shift_expr & and_expr
1502
==
and_expr -> shift_expr & and_expr
1502
<
and_expr -> shift_expr & and_expr
1502
is
and_expr -> shift_expr & and_expr
1502
>=
and_expr -> shift_expr & and_expr
1503
in
shift_expr -> arith_expr << shift_expr
1503
==
shift_expr -> arith_expr << shift_expr
1503
>=
shift_expr -> arith_expr << shift_expr
1503
if
shift_expr -> arith_expr << shift_expr
1503
=
shift_expr -> arith_expr << shift_expr
1503
!=
shift_expr -> arith_expr << shift_expr
1503
is
shift_expr -> arith_expr << shift_expr
1503
|
shift_expr -> arith_expr << shift_expr
1503
or
shift_expr -> arith_expr << shift_expr
1503
)
shift_expr -> arith_expr << shift_expr
1503
<
shift_expr -> arith_expr << shift_expr
1503
not
shift_expr -> arith_expr << shift_expr
1503
>
shift_expr -> arith_expr << shift_expr
1503
,
shift_expr -> arith_expr << shift_expr
1503
^
shift_expr -> arith_expr << shift_expr
1503
&
shift_expr -> arith_expr << shift_expr
1503
and
shift_expr -> arith_expr << shift_expr
1503
<=
shift_expr -> arith_expr << shift_expr
1503
for
shift_expr -> arith_expr << shift_expr
1504
and
shift_expr -> arith_expr >> shift_expr
1504
^
shift_expr -> arith_expr >> shift_expr
1504
==
shift_expr -> arith_expr >> shift_expr
1504
!=
shift_expr -> arith_expr >> shift_expr
1504
|
shift_expr -> arith_expr >> shift_expr
1504
for
shift_expr -> arith_expr >> shift_expr
1504
not
shift_expr -> arith_expr >> shift_expr
1504
in
shift_expr -> arith_expr >> shift_expr
1504
,
shift_expr -> arith_expr >> shift_expr
1504
>=
shift_expr -> arith_expr >> shift_expr
1504
)
shift_expr -> arith_expr >> shift_expr
1504
or
shift_expr -> arith_expr >> shift_expr
1504
<=
shift_expr -> arith_expr >> shift_expr
1504
is
shift_expr -> arith_expr >> shift_expr
1504
>
shift_expr -> arith_expr >> shift_expr
1504
&
shift_expr -> arith_expr >> shift_expr
1504
<
shift_expr -> arith_expr >> shift_expr
1504
if
shift_expr -> arith_expr >> shift_expr
1504
=
shift_expr -> arith_expr >> shift_expr
1505
and
atom -> [ test_list_comp ]
1505
<=
atom -> [ test_list_comp ]
1505
**
atom -> [ test_list_comp ]
1505
^
atom -> [ test_list_comp ]
1505
[
atom -> [ test_list_comp ]
1505
,
atom -> [ test_list_comp ]
1505
!=
atom -> [ test_list_comp ]
1505
<
atom -> [ test_list_comp ]
1505
/
atom -> [ test_list_comp ]
1505
-
atom -> [ test_list_comp ]
1505
>=
atom -> [ test_list_comp ]
1505
if
atom -> [ test_list_comp ]
1505
%
atom -> [ test_list_comp ]
1505
is
atom -> [ test_list_comp ]
1505
+
atom -> [ test_list_comp ]
1505
)
atom -> [ test_list_comp ]
1505
&
atom -> [ test_list_comp ]
1505
@
atom -> [ test_list_comp ]
1505
or
atom -> [ test_list_comp ]
1505
in
atom -> [ test_list_comp ]
1505
==
atom -> [ test_list_comp ]
1505
not
atom -> [ test_list_comp ]
1505
.
atom -> [ test_list_comp ]
1505
|
atom -> [ test_list_comp ]
1505
=
atom -> [ test_list_comp ]
1505
>
atom -> [ test_list_comp ]
1505
<<
atom -> [ test_list_comp ]
1505
//
atom -> [ test_list_comp ]
1505
(
atom -> [ test_list_comp ]
1505
for
atom -> [ test_list_comp ]
1505
*
atom -> [ test_list_comp ]
1505
>>
atom -> [ test_list_comp ]
1506
if
comparison -> expr comp_op comparison
1506
or
comparison -> expr comp_op comparison
1506
and
comparison -> expr comp_op comparison
1506
for
comparison -> expr comp_op comparison
1506
)
comparison -> expr comp_op comparison
1506
=
comparison -> expr comp_op comparison
1506
,
comparison -> expr comp_op comparison
1507
for
and_test -> not_test and and_test
1507
,
and_test -> not_test and and_test
1507
or
and_test -> not_test and and_test
1507
=
and_test -> not_test and and_test
1507
if
and_test -> not_test and and_test
1507
)
and_test -> not_test and and_test
1508
,
expr -> xor_expr | expr
1508
is
expr -> xor_expr | expr
1508
<
expr -> xor_expr | expr
1508
if
expr -> xor_expr | expr
1508
>=
expr -> xor_expr | expr
1508
>
expr -> xor_expr | expr
1508
or
expr -> xor_expr | expr
1508
and
expr -> xor_expr | expr
1508
in
expr -> xor_expr | expr
1508
!=
expr -> xor_expr | expr
1508
)
expr -> xor_expr | expr
1508
<=
expr -> xor_expr | expr
1508
==
expr -> xor_expr | expr
1508
=
expr -> xor_expr | expr
1508
for
expr -> xor_expr | expr
1508
not
expr -> xor_expr | expr
1509
,
lambdef -> lambda : test
1509
)
lambdef -> lambda : test
1509
=
lambdef -> lambda : test
1509
for
lambdef -> lambda : test
1510
and_test
505
1510
atom_expr
506
1510
and_expr
507
1510
term
508
1510
factor
509
1510
shift_expr
510
1510
arith_expr
511
1510
NUMBER
512
1510
NAME
513
1510
not
514
1510
[
515
1510
{
516
1510
expr
517
1510
not_test
519
1510
False
520
1510
xor_expr
521
1510
STRING
522
1510
lambda
523
1510
atom
525
1510
+
526
1510
True
527
1510
-
528
1510
or_test
529
1510
(
530
1510
None
531
1510
comparison
532
1510
power
533
1510
~
535
1510
lambdef
537
1510
test
1912
1511
]
1913
1512
<
trailer -> ( )
1512
.
trailer -> ( )
1512
*
trailer -> ( )
1512
or
trailer -> ( )
1512
is
trailer -> ( )
1512
=
trailer -> ( )
1512
/
trailer -> ( )
1512
+
trailer -> ( )
1512
@
trailer -> ( )
1512
>
trailer -> ( )
1512
//
trailer -> ( )
1512
|
trailer -> ( )
1512
!=
trailer -> ( )
1512
&
trailer -> ( )
1512
^
trailer -> ( )
1512
)
trailer -> ( )
1512
<=
trailer -> ( )
1512
%
trailer -> ( )
1512
>>
trailer -> ( )
1512
**
trailer -> ( )
1512
and
trailer -> ( )
1512
(
trailer -> ( )
1512
for
trailer -> ( )
1512
,
trailer -> ( )
1512
==
trailer -> ( )
1512
if
trailer -> ( )
1512
[
trailer -> ( )
1512
<<
trailer -> ( )
1512
in
trailer -> ( )
1512
-
trailer -> ( )
1512
not
trailer -> ( )
1512
>=
trailer -> ( )
1513
)
1914
1514
|
trailer -> . NAME
1514
@
trailer -> . NAME
1514
^
trailer -> . NAME
1514
>
trailer -> . NAME
1514
+
trailer -> . NAME
1514
.
trailer -> . NAME
1514
!=
trailer -> . NAME
1514
<<
trailer -> . NAME
1514
<=
trailer -> . NAME
1514
[
trailer -> . NAME
1514
*
trailer -> . NAME
1514
(
trailer -> . NAME
1514
//
trailer -> . NAME
1514
**
trailer -> . NAME
1514
-
trailer -> . NAME
1514
)
trailer -> . NAME
1514
in
trailer -> . NAME
1514
>=
trailer -> . NAME
1514
=
trailer -> . NAME
1514
,
trailer -> . NAME
1514
==
trailer -> . NAME
1514
or
trailer -> . NAME
1514
and
trailer -> . NAME
1514
%
trailer -> . NAME
1514
is
trailer -> . NAME
1514
for
trailer -> . NAME
1514
<
trailer -> . NAME
1514
not
trailer -> . NAME
1514
/
trailer -> . NAME
1514
if
trailer -> . NAME
1514
&
trailer -> . NAME
1514
>>
trailer -> . NAME
1515
&
trailer_expr -> trailer trailer_expr
1515
not
trailer_expr -> trailer trailer_expr
1515
and
trailer_expr -> trailer trailer_expr
1515
+
trailer_expr -> trailer trailer_expr
1515
==
trailer_expr -> trailer trailer_expr
1515
**
trailer_expr -> trailer trailer_expr
1515
/
trailer_expr -> trailer trailer_expr
1515
=
trailer_expr -> trailer trailer_expr
1515
^
trailer_expr -> trailer trailer_expr
1515
,
trailer_expr -> trailer trailer_expr
1515
>
trailer_expr -> trailer trailer_expr
1515
*
trailer_expr -> trailer trailer_expr
1515
//
trailer_expr -> trailer trailer_expr
1515
>>
trailer_expr -> trailer trailer_expr
1515
<<
trailer_expr -> trailer trailer_expr
1515
>=
trailer_expr -> trailer trailer_expr
1515
)
trailer_expr -> trailer trailer_expr
1515
<=
trailer_expr -> trailer trailer_expr
1515
-
trailer_expr -> trailer trailer_expr
1515
is
trailer_expr -> trailer trailer_expr
1515
in
trailer_expr -> trailer trailer_expr
1515
<
trailer_expr -> trailer trailer_expr
1515
|
trailer_expr -> trailer trailer_expr
1515
if
trailer_expr -> trailer trailer_expr
1515
%
trailer_expr -> trailer trailer_expr
1515
for
trailer_expr -> trailer trailer_expr
1515
@
trailer_expr -> trailer trailer_expr
1515
!=
trailer_expr -> trailer trailer_expr
1515
or
trailer_expr -> trailer trailer_expr
1516
else
1915
1517
if
atom -> ( test_list_comp )
1517
or
atom -> ( test_list_comp )
1517
*
atom -> ( test_list_comp )
1517
|
atom -> ( test_list_comp )
1517
>>
atom -> ( test_list_comp )
1517
%
atom -> ( test_list_comp )
1517
not
atom -> ( test_list_comp )
1517
//
atom -> ( test_list_comp )
1517
for
atom -> ( test_list_comp )
1517
+
atom -> ( test_list_comp )
1517
and
atom -> ( test_list_comp )
1517
>
atom -> ( test_list_comp )
1517
[
atom -> ( test_list_comp )
1517
^
atom -> ( test_list_comp )
1517
!=
atom -> ( test_list_comp )
1517
<<
atom -> ( test_list_comp )
1517
**
atom -> ( test_list_comp )
1517
is
atom -> ( test_list_comp )
1517
<=
atom -> ( test_list_comp )
1517
-
atom -> ( test_list_comp )
1517
&
atom -> ( test_list_comp )
1517
(
atom -> ( test_list_comp )
1517
,
atom -> ( test_list_comp )
1517
in
atom -> ( test_list_comp )
1517
)
atom -> ( test_list_comp )
1517
@
atom -> ( test_list_comp )
1517
.
atom -> ( test_list_comp )
1517
<
atom -> ( test_list_comp )
1517
/
atom -> ( test_list_comp )
1517
==
atom -> ( test_list_comp )
1517
>=
atom -> ( test_list_comp )
1517
=
atom -> ( test_list_comp )
1518
)
argument -> test = test
1518
,
argument -> test = test
1519
in
1916
1520
atom_expr
1020
1520
NUMBER
1026
1520
NAME
1027
1520
[
1029
1520
{
1030
1520
False
1033
1520
STRING
1035
1520
atom
1037
1520
+
1038
1520
True
1039
1520
-
1040
1520
(
1041
1520
None
1042
1520
power
1043
1520
~
1045
1520
factor
1917
1521
atom_expr
1020
1521
and_expr
1021
1521
term
1022
1521
factor
1023
1521
shift_expr
1024
1521
arith_expr
1025
1521
NUMBER
1026
1521
NAME
1027
1521
[
1029
1521
{
1030
1521
False
1033
1521
STRING
1035
1521
xor_expr
1918
1521
atom
1037
1521
+
1038
1521
True
1039
1521
-
1040
1521
(
1041
1521
None
1042
1521
power
1043
1521
~
1045
1522
atom_expr
1020
1522
factor
1023
1522
term
1022
1522
NUMBER
1026
1522
NAME
1027
1522
[
1029
1522
{
1030
1522
False
1033
1522
STRING
1035
1522
atom
1037
1522
+
1038
1522
True
1039
1522
-
1040
1522
(
1041
1522
None
1042
1522
power
1043
1522
arith_expr
1919
1522
~
1045
1523
atom_expr
1020
1523
factor
1023
1523
term
1022
1523
NUMBER
1026
1523
NAME
1027
1523
[
1029
1523
{
1030
1523
False
1033
1523
STRING
1035
1523
atom
1037
1523
+
1038
1523
True
1039
1523
-
1040
1523
arith_expr
1920
1523
(
1041
1523
None
1042
1523
power
1043
1523
~
1045
1524
atom_expr
1020
1524
factor
1023
1524
NUMBER
1026
1524
NAME
1027
1524
[
1029
1524
{
1030
1524
False
1033
1524
STRING
1035
1524
atom
1037
1524
+
1038
1524
term
1921
1524
True
1039
1524
-
1040
1524
(
1041
1524
None
1042
1524
power
1043
1524
~
1045
1525
atom_expr
1020
1525
factor
1023
1525
NUMBER
1026
1525
NAME
1027
1525
[
1029
1525
{
1030
1525
False
1033
1525
STRING
1035
1525
atom
1037
1525
+
1038
1525
term
1922
1525
True
1039
1525
-
1040
1525
(
1041
1525
None
1042
1525
power
1043
1525
~
1045
1526
atom_expr
1020
1526
factor
1023
1526
NUMBER
1026
1526
NAME
1027
1526
[
1029
1526
{
1030
1526
term
1923
1526
False
1033
1526
STRING
1035
1526
atom
1037
1526
+
1038
1526
True
1039
1526
-
1040
1526
(
1041
1526
None
1042
1526
power
1043
1526
~
1045
1527
atom_expr
1020
1527
factor
1023
1527
NUMBER
1026
1527
NAME
1027
1527
[
1029
1527
{
1030
1527
False
1033
1527
STRING
1035
1527
atom
1037
1527
+
1038
1527
True
1039
1527
-
1040
1527
(
1041
1527
None
1042
1527
power
1043
1527
term
1924
1527
~
1045
1528
atom_expr
1020
1528
factor
1023
1528
NUMBER
1026
1528
NAME
1027
1528
[
1029
1528
{
1030
1528
False
1033
1528
STRING
1035
1528
atom
1037
1528
+
1038
1528
True
1039
1528
-
1040
1528
(
1041
1528
None
1042
1528
term
1925
1528
power
1043
1528
~
1045
1529
atom_expr
1020
1529
factor
1023
1529
term
1022
1529
shift_expr
1024
1529
arith_expr
1025
1529
NUMBER
1026
1529
NAME
1027
1529
[
1029
1529
{
1030
1529
False
1033
1529
STRING
1035
1529
atom
1037
1529
+
1038
1529
True
1039
1529
-
1040
1529
(
1041
1529
None
1042
1529
power
1043
1529
~
1045
1529
and_expr
1926
1530
atom_expr
1020
1530
factor
1023
1530
term
1022
1530
arith_expr
1025
1530
NUMBER
1026
1530
NAME
1027
1530
[
1029
1530
{
1030
1530
False
1033
1530
STRING
1035
1530
atom
1037
1530
+
1038
1530
True
1039
1530
-
1040
1530
(
1041
1530
None
1042
1530
power
1043
1530
~
1045
1530
shift_expr
1927
1531
atom_expr
1020
1531
factor
1023
1531
term
1022
1531
arith_expr
1025
1531
NUMBER
1026
1531
NAME
1027
1531
[
1029
1531
{
1030
1531
False
1033
1531
STRING
1035
1531
shift_expr
1928
1531
atom
1037
1531
+
1038
1531
True
1039
1531
-
1040
1531
(
1041
1531
None
1042
1531
power
1043
1531
~
1045
1532
if
not_test -> not not_test
1532
)
not_test -> not not_test
1532
,
not_test -> not not_test
1532
or
not_test -> not not_test
1532
and
not_test -> not not_test
1533
]
1929
1534
in
atom -> [ ]
1534
>=
atom -> [ ]
1534
%
atom -> [ ]
1534
is
atom -> [ ]
1534
^
atom -> [ ]
1534
//
atom -> [ ]
1534
or
atom -> [ ]
1534
not
atom -> [ ]
1534
[
atom -> [ ]
1534
and
atom -> [ ]
1534
/
atom -> [ ]
1534
!=
atom -> [ ]
1534
>
atom -> [ ]
1534
&
atom -> [ ]
1534
**
atom -> [ ]
1534
@
atom -> [ ]
1534
==
atom -> [ ]
1534
<<
atom -> [ ]
1534
if
atom -> [ ]
1534
<
atom -> [ ]
1534
,
atom -> [ ]
1534
(
atom -> [ ]
1534
<=
atom -> [ ]
1534
*
atom -> [ ]
1534
.
atom -> [ ]
1534
>>
atom -> [ ]
1534
|
atom -> [ ]
1534
)
atom -> [ ]
1534
-
atom -> [ ]
1534
+
atom -> [ ]
1535
<<
atom -> { }
1535
+
atom -> { }
1535
//
atom -> { }
1535
is
atom -> { }
1535
>=
atom -> { }
1535
<=
atom -> { }
1535
>
atom -> { }
1535
*
atom -> { }
1535
^
atom -> { }
1535
%
atom -> { }
1535
>>
atom -> { }
1535
)
atom -> { }
1535
.
atom -> { }
1535
not
atom -> { }
1535
==
atom -> { }
1535
if
atom -> { }
1535
in
atom -> { }
1535
<
atom -> { }
1535
|
atom -> { }
1535
(
atom -> { }
1535
/
atom -> { }
1535
and
atom -> { }
1535
**
atom -> { }
1535
@
atom -> { }
1535
-
atom -> { }
1535
&
atom -> { }
1535
,
atom -> { }
1535
!=
atom -> { }
1535
or
atom -> { }
1535
[
atom -> { }
1536
atom_expr
1020
1536
and_expr
1021
1536
term
1022
1536
factor
1023
1536
shift_expr
1024
1536
arith_expr
1025
1536
NUMBER
1026
1536
NAME
1027
1536
[
1029
1536
{
1030
1536
expr
1031
1536
False
1033
1536
xor_expr
1034
1536
STRING
1035
1536
comparison
1930
1536
atom
1037
1536
+
1038
1536
True
1039
1536
-
1040
1536
(
1041
1536
None
1042
1536
power
1043
1536
~
1045
1537
atom_expr
1020
1537
and_expr
1021
1537
term
1022
1537
factor
1023
1537
shift_expr
1024
1537
arith_expr
1025
1537
NUMBER
1026
1537
NAME
1027
1537
not
1028
1537
[
1029
1537
{
1030
1537
expr
1031
1537
not_test
1032
1537
False
1033
1537
xor_expr
1034
1537
STRING
1035
1537
atom
1037
1537
+
1038
1537
True
1039
1537
-
1040
1537
(
1041
1537
None
1042
1537
power
1043
1537
and_test
1931
1537
~
1045
1537
comparison
1048
1538
atom_expr
1020
1538
and_expr
1021
1538
term
1022
1538
factor
1023
1538
shift_expr
1024
1538
arith_expr
1025
1538
NUMBER
1026
1538
NAME
1027
1538
[
1029
1538
{
1030
1538
False
1033
1538
xor_expr
1034
1538
STRING
1035
1538
atom
1037
1538
+
1038
1538
True
1039
1538
-
1040
1538
(
1041
1538
None
1042
1538
power
1043
1538
expr
1932
1538
~
1045
1539
atom_expr
1020
1539
and_expr
1021
1539
term
1022
1539
factor
1023
1539
shift_expr
1024
1539
arith_expr
1025
1539
NUMBER
1026
1539
NAME
1027
1539
not
1028
1539
[
1029
1539
{
1030
1539
expr
1031
1539
not_test
1032
1539
False
1033
1539
xor_expr
1034
1539
STRING
1035
1539
lambda
1036
1539
atom
1037
1539
+
1038
1539
True
1039
1539
-
1040
1539
(
1041
1539
None
1042
1539
power
1043
1539
and_test
1044
1539
~
1045
1539
test
1933
1539
or_test
1047
1539
comparison
1048
1539
lambdef
1049
1540
:
1934
1541
atom_expr
472
1541
and_expr
473
1541
term
474
1541
factor
475
1541
shift_expr
476
1541
arith_expr
477
1541
NUMBER
478
1541
NAME
479
1541
[
480
1541
{
481
1541
expr
482
1541
not_test
483
1541
False
484
1541
xor_expr
485
1541
atom
487
1541
STRING
488
1541
+
489
1541
(
490
1541
True
491
1541
-
492
1541
None
493
1541
subscriptlist
1935
1541
or_test
494
1541
and_test
495
1541
power
496
1541
~
497
1541
lambda
498
1541
:
maybe_test -> 
1541
maybe_test
499
1541
test
500
1541
not
501
1541
comparison
502
1541
lambdef
503
1541
subscript
504
1542
and_test
505
1542
atom_expr
506
1542
and_expr
507
1542
term
508
1542
factor
509
1542
shift_expr
510
1542
arith_expr
511
1542
NUMBER
512
1542
NAME
513
1542
not
514
1542
[
515
1542
{
516
1542
expr
517
1542
)
1936
1542
not_test
519
1542
False
520
1542
xor_expr
521
1542
STRING
522
1542
lambda
523
1542
arglist
1937
1542
atom
525
1542
+
526
1542
True
527
1542
-
528
1542
or_test
529
1542
(
530
1542
None
531
1542
comparison
532
1542
power
533
1542
test
534
1542
~
535
1542
*
536
1542
lambdef
537
1542
**
538
1542
argument
539
1543
NAME
1938
1544
trailer_expr
1939
1544
[
1541
1544
(
1542
1544
.
1543
1544
trailer
1544
1544
<<
trailer_expr -> 
1544
@
trailer_expr -> 
1544
!=
trailer_expr -> 
1544
-
trailer_expr -> 
1544
^
trailer_expr -> 
1544
<
trailer_expr -> 
1544
/
trailer_expr -> 
1544
is
trailer_expr -> 
1544
==
trailer_expr -> 
1544
&
trailer_expr -> 
1544
>=
trailer_expr -> 
1544
or
trailer_expr -> 
1544
in
trailer_expr -> 
1544
*
trailer_expr -> 
1544
not
trailer_expr -> 
1544
)
trailer_expr -> 
1544
**
trailer_expr -> 
1544
<=
trailer_expr -> 
1544
+
trailer_expr -> 
1544
//
trailer_expr -> 
1544
%
trailer_expr -> 
1544
>
trailer_expr -> 
1544
,
trailer_expr -> 
1544
|
trailer_expr -> 
1544
if
trailer_expr -> 
1544
and
trailer_expr -> 
1544
>>
trailer_expr -> 
1545
==
atom_expr -> atom trailer_expr
1545
%
atom_expr -> atom trailer_expr
1545
+
atom_expr -> atom trailer_expr
1545
not
atom_expr -> atom trailer_expr
1545
or
atom_expr -> atom trailer_expr
1545
//
atom_expr -> atom trailer_expr
1545
and
atom_expr -> atom trailer_expr
1545
!=
atom_expr -> atom trailer_expr
1545
<<
atom_expr -> atom trailer_expr
1545
if
atom_expr -> atom trailer_expr
1545
-
atom_expr -> atom trailer_expr
1545
)
atom_expr -> atom trailer_expr
1545
>>
atom_expr -> atom trailer_expr
1545
**
atom_expr -> atom trailer_expr
1545
/
atom_expr -> atom trailer_expr
1545
<
atom_expr -> atom trailer_expr
1545
in
atom_expr -> atom trailer_expr
1545
&
atom_expr -> atom trailer_expr
1545
is
atom_expr -> atom trailer_expr
1545
|
atom_expr -> atom trailer_expr
1545
>
atom_expr -> atom trailer_expr
1545
>=
atom_expr -> atom trailer_expr
1545
<=
atom_expr -> atom trailer_expr
1545
@
atom_expr -> atom trailer_expr
1545
*
atom_expr -> atom trailer_expr
1545
,
atom_expr -> atom trailer_expr
1545
^
atom_expr -> atom trailer_expr
1546
<<
factor -> + factor
1546
,
factor -> + factor
1546
&
factor -> + factor
1546
>
factor -> + factor
1546
if
factor -> + factor
1546
not
factor -> + factor
1546
+
factor -> + factor
1546
)
factor -> + factor
1546
^
factor -> + factor
1546
==
factor -> + factor
1546
/
factor -> + factor
1546
|
factor -> + factor
1546
>=
factor -> + factor
1546
%
factor -> + factor
1546
<
factor -> + factor
1546
is
factor -> + factor
1546
or
factor -> + factor
1546
@
factor -> + factor
1546
//
factor -> + factor
1546
and
factor -> + factor
1546
-
factor -> + factor
1546
in
factor -> + factor
1546
*
factor -> + factor
1546
!=
factor -> + factor
1546
>>
factor -> + factor
1546
<=
factor -> + factor
1547
@
factor -> - factor
1547
^
factor -> - factor
1547
==
factor -> - factor
1547
in
factor -> - factor
1547
>>
factor -> - factor
1547
)
factor -> - factor
1547
,
factor -> - factor
1547
//
factor -> - factor
1547
and
factor -> - factor
1547
<=
factor -> - factor
1547
!=
factor -> - factor
1547
-
factor -> - factor
1547
&
factor -> - factor
1547
not
factor -> - factor
1547
>
factor -> - factor
1547
*
factor -> - factor
1547
%
factor -> - factor
1547
/
factor -> - factor
1547
<
factor -> - factor
1547
|
factor -> - factor
1547
+
factor -> - factor
1547
if
factor -> - factor
1547
<<
factor -> - factor
1547
is
factor -> - factor
1547
or
factor -> - factor
1547
>=
factor -> - factor
1548
)
1940
1549
)
atom -> ( )
1549
>=
atom -> ( )
1549
>>
atom -> ( )
1549
not
atom -> ( )
1549
if
atom -> ( )
1549
&
atom -> ( )
1549
^
atom -> ( )
1549
.
atom -> ( )
1549
/
atom -> ( )
1549
in
atom -> ( )
1549
>
atom -> ( )
1549
%
atom -> ( )
1549
(
atom -> ( )
1549
==
atom -> ( )
1549
,
atom -> ( )
1549
[
atom -> ( )
1549
<=
atom -> ( )
1549
+
atom -> ( )
1549
|
atom -> ( )
1549
-
atom -> ( )
1549
or
atom -> ( )
1549
@
atom -> ( )
1549
<<
atom -> ( )
1549
is
atom -> ( )
1549
**
atom -> ( )
1549
*
atom -> ( )
1549
and
atom -> ( )
1549
<
atom -> ( )
1549
!=
atom -> ( )
1549
//
atom -> ( )
1550
atom_expr
1020
1550
and_expr
1021
1550
term
1022
1550
factor
1023
1550
shift_expr
1024
1550
arith_expr
1025
1550
NUMBER
1026
1550
NAME
1027
1550
not
1028
1550
[
1029
1550
{
1030
1550
expr
1031
1550
not_test
1032
1550
False
1033
1550
xor_expr
1034
1550
STRING
1035
1550
atom
1037
1550
+
1038
1550
True
1039
1550
-
1040
1550
(
1041
1550
None
1042
1550
power
1043
1550
and_test
1044
1550
~
1045
1550
comparison
1048
1550
or_test
1941
1551
<<
factor -> ~ factor
1551
in
factor -> ~ factor
1551
<=
factor -> ~ factor
1551
if
factor -> ~ factor
1551
|
factor -> ~ factor
1551
<
factor -> ~ factor
1551
>>
factor -> ~ factor
1551
==
factor -> ~ factor
1551
>=
factor -> ~ factor
1551
!=
factor -> ~ factor
1551
,
factor -> ~ factor
1551
//
factor -> ~ factor
1551
*
factor -> ~ factor
1551
/
factor -> ~ factor
1551
+
factor -> ~ factor
1551
is
factor -> ~ factor
1551
not
factor -> ~ factor
1551
and
factor -> ~ factor
1551
)
factor -> ~ factor
1551
^
factor -> ~ factor
1551
@
factor -> ~ factor
1551
>
factor -> ~ factor
1551
-
factor -> ~ factor
1551
or
factor -> ~ factor
1551
&
factor -> ~ factor
1551
%
factor -> ~ factor
1552
atom_expr
590
1552
and_expr
591
1552
term
592
1552
[
593
1552
shift_expr
594
1552
arith_expr
595
1552
NUMBER
596
1552
NAME
597
1552
factor
598
1552
{
599
1552
expr
600
1552
False
601
1552
xor_expr
602
1552
STRING
603
1552
+
604
1552
True
605
1552
-
606
1552
(
607
1552
None
608
1552
atom
609
1552
power
610
1552
~
611
1552
not_test
612
1552
not
613
1552
comparison
614
1552
or_test
1942
1552
and_test
615
1553
)
arglist -> argument , arglist
1554
lambda
simple_stmt -> small_stmt NEWLINE
1554
yield
simple_stmt -> small_stmt NEWLINE
1554
NEWLINE
simple_stmt -> small_stmt NEWLINE
1554
NAME
simple_stmt -> small_stmt NEWLINE
1554
STRING
simple_stmt -> small_stmt NEWLINE
1554
pass
simple_stmt -> small_stmt NEWLINE
1554
None
simple_stmt -> small_stmt NEWLINE
1554
(
simple_stmt -> small_stmt NEWLINE
1554
assert
simple_stmt -> small_stmt NEWLINE
1554
@
simple_stmt -> small_stmt NEWLINE
1554
def
simple_stmt -> small_stmt NEWLINE
1554
if
simple_stmt -> small_stmt NEWLINE
1554
+
simple_stmt -> small_stmt NEWLINE
1554
continue
simple_stmt -> small_stmt NEWLINE
1554
not
simple_stmt -> small_stmt NEWLINE
1554
try
simple_stmt -> small_stmt NEWLINE
1554
elif
simple_stmt -> small_stmt NEWLINE
1554
False
simple_stmt -> small_stmt NEWLINE
1554
with
simple_stmt -> small_stmt NEWLINE
1554
else
simple_stmt -> small_stmt NEWLINE
1554
global
simple_stmt -> small_stmt NEWLINE
1554
return
simple_stmt -> small_stmt NEWLINE
1554
raise
simple_stmt -> small_stmt NEWLINE
1554
True
simple_stmt -> small_stmt NEWLINE
1554
-
simple_stmt -> small_stmt NEWLINE
1554
del
simple_stmt -> small_stmt NEWLINE
1554
NUMBER
simple_stmt -> small_stmt NEWLINE
1554
{
simple_stmt -> small_stmt NEWLINE
1554
for
simple_stmt -> small_stmt NEWLINE
1554
class
simple_stmt -> small_stmt NEWLINE
1554
break
simple_stmt -> small_stmt NEWLINE
1554
[
simple_stmt -> small_stmt NEWLINE
1554
nonlocal
simple_stmt -> small_stmt NEWLINE
1554
while
simple_stmt -> small_stmt NEWLINE
1554
$
simple_stmt -> small_stmt NEWLINE
1554
~
simple_stmt -> small_stmt NEWLINE
1555
while
1591
1555
decorators
1592
1555
[
3
1555
small_stmt
1593
1555
stmt_list
1943
1555
{
5
1555
atom_expr
6
1555
expr
7
1555
NUMBER
8
1555
True
9
1555
factor
10
1555
class
1594
1555
shift_expr
12
1555
atom
13
1555
xor_expr
14
1555
term
15
1555
if
1595
1555
try
1596
1555
with
1597
1555
decorated
1598
1555
and_test
20
1555
and_expr
21
1555
for_stmt
1599
1555
False
23
1555
def
1600
1555
or_test
25
1555
with_stmt
1601
1555
funcdef
1602
1555
lambda
28
1555
try_stmt
1603
1555
None
29
1555
+
30
1555
if_stmt
1604
1555
arith_expr
32
1555
test
33
1555
(
34
1555
compound_stmt
1605
1555
-
36
1555
NAME
37
1555
while_stmt
1606
1555
not_test
40
1555
lambdef
41
1555
for
1607
1555
STRING
43
1555
~
44
1555
simple_stmt
1608
1555
classdef
1609
1555
power
47
1555
comparison
48
1555
continue
49
1555
expr_stmt
50
1555
not
51
1555
del_stmt
52
1555
yield_stmt
53
1555
@
54
1555
decorator
55
1555
yield
56
1555
assert_stmt
57
1555
break_stmt
58
1555
return
59
1555
pass
60
1555
continue_stmt
61
1555
test_list
62
1555
break
63
1555
del
64
1555
pass_stmt
65
1555
nonlocal
66
1555
assert
67
1555
global_stmt
68
1555
raise
69
1555
stmt
1611
1555
raise_stmt
70
1555
global
71
1555
nonlocal_stmt
72
1555
return_stmt
75
1555
flow_stmt
76
1556
atom_expr
79
1556
and_expr
80
1556
term
81
1556
factor
82
1556
shift_expr
83
1556
arith_expr
84
1556
NUMBER
85
1556
NAME
86
1556
[
87
1556
{
88
1556
expr
89
1556
False
90
1556
xor_expr
91
1556
STRING
92
1556
+
93
1556
test
1944
1556
True
94
1556
(
95
1556
None
96
1556
-
97
1556
atom
98
1556
power
99
1556
~
100
1556
lambda
101
1556
not_test
102
1556
not
103
1556
comparison
104
1556
and_test
105
1556
lambdef
106
1556
or_test
107
1557
yield
if_stmt -> if test : suite elif_clause
1557
return
if_stmt -> if test : suite elif_clause
1557
-
if_stmt -> if test : suite elif_clause
1557
else
1945
1557
with
if_stmt -> if test : suite elif_clause
1557
{
if_stmt -> if test : suite elif_clause
1557
True
if_stmt -> if test : suite elif_clause
1557
nonlocal
if_stmt -> if test : suite elif_clause
1557
+
if_stmt -> if test : suite elif_clause
1557
raise
if_stmt -> if test : suite elif_clause
1557
break
if_stmt -> if test : suite elif_clause
1557
NAME
if_stmt -> if test : suite elif_clause
1557
STRING
if_stmt -> if test : suite elif_clause
1557
try
if_stmt -> if test : suite elif_clause
1557
@
if_stmt -> if test : suite elif_clause
1557
if
if_stmt -> if test : suite elif_clause
1557
del
if_stmt -> if test : suite elif_clause
1557
False
if_stmt -> if test : suite elif_clause
1557
global
if_stmt -> if test : suite elif_clause
1557
while
if_stmt -> if test : suite elif_clause
1557
continue
if_stmt -> if test : suite elif_clause
1557
lambda
if_stmt -> if test : suite elif_clause
1557
for
if_stmt -> if test : suite elif_clause
1557
None
if_stmt -> if test : suite elif_clause
1557
not
if_stmt -> if test : suite elif_clause
1557
pass
if_stmt -> if test : suite elif_clause
1557
NEWLINE
if_stmt -> if test : suite elif_clause
1557
assert
if_stmt -> if test : suite elif_clause
1557
(
if_stmt -> if test : suite elif_clause
1557
[
if_stmt -> if test : suite elif_clause
1557
NUMBER
if_stmt -> if test : suite elif_clause
1557
def
if_stmt -> if test : suite elif_clause
1557
$
if_stmt -> if test : suite elif_clause
1557
class
if_stmt -> if test : suite elif_clause
1557
~
if_stmt -> if test : suite elif_clause
1558
:
1946
1559
:
1947
1560
**
1948
1560
!=
power -> atom_expr
1560
|
power -> atom_expr
1560
:
power -> atom_expr
1560
as
power -> atom_expr
1560
>
power -> atom_expr
1560
/
power -> atom_expr
1560
^
power -> atom_expr
1560
&
power -> atom_expr
1560
<
power -> atom_expr
1560
not
power -> atom_expr
1560
<=
power -> atom_expr
1560
%
power -> atom_expr
1560
and
power -> atom_expr
1560
*
power -> atom_expr
1560
@
power -> atom_expr
1560
>>
power -> atom_expr
1560
if
power -> atom_expr
1560
+
power -> atom_expr
1560
in
power -> atom_expr
1560
is
power -> atom_expr
1560
//
power -> atom_expr
1560
or
power -> atom_expr
1560
<<
power -> atom_expr
1560
-
power -> atom_expr
1560
==
power -> atom_expr
1560
>=
power -> atom_expr
1561
as
xor_expr -> and_expr
1561
^
1949
1561
not
xor_expr -> and_expr
1561
>=
xor_expr -> and_expr
1561
:
xor_expr -> and_expr
1561
and
xor_expr -> and_expr
1561
is
xor_expr -> and_expr
1561
or
xor_expr -> and_expr
1561
|
xor_expr -> and_expr
1561
in
xor_expr -> and_expr
1561
==
xor_expr -> and_expr
1561
>
xor_expr -> and_expr
1561
<
xor_expr -> and_expr
1561
if
xor_expr -> and_expr
1561
<=
xor_expr -> and_expr
1561
!=
xor_expr -> and_expr
1562
+
1950
1562
in
arith_expr -> term
1562
if
arith_expr -> term
1562
|
arith_expr -> term
1562
==
arith_expr -> term
1562
<
arith_expr -> term
1562
-
1951
1562
<=
arith_expr -> term
1562
^
arith_expr -> term
1562
is
arith_expr -> term
1562
>>
arith_expr -> term
1562
or
arith_expr -> term
1562
&
arith_expr -> term
1562
>
arith_expr -> term
1562
>=
arith_expr -> term
1562
<<
arith_expr -> term
1562
and
arith_expr -> term
1562
:
arith_expr -> term
1562
not
arith_expr -> term
1562
as
arith_expr -> term
1562
!=
arith_expr -> term
1563
*
1952
1563
%
1953
1563
//
1954
1563
/
1955
1563
and
term -> factor
1563
@
1956
1563
==
term -> factor
1563
>=
term -> factor
1563
+
term -> factor
1563
<=
term -> factor
1563
or
term -> factor
1563
<<
term -> factor
1563
not
term -> factor
1563
<
term -> factor
1563
-
term -> factor
1563
in
term -> factor
1563
!=
term -> factor
1563
is
term -> factor
1563
>>
term -> factor
1563
:
term -> factor
1563
^
term -> factor
1563
as
term -> factor
1563
|
term -> factor
1563
>
term -> factor
1563
if
term -> factor
1563
&
term -> factor
1564
&
1957
1564
if
and_expr -> shift_expr
1564
as
and_expr -> shift_expr
1564
in
and_expr -> shift_expr
1564
is
and_expr -> shift_expr
1564
|
and_expr -> shift_expr
1564
>=
and_expr -> shift_expr
1564
<
and_expr -> shift_expr
1564
!=
and_expr -> shift_expr
1564
and
and_expr -> shift_expr
1564
not
and_expr -> shift_expr
1564
or
and_expr -> shift_expr
1564
:
and_expr -> shift_expr
1564
==
and_expr -> shift_expr
1564
<=
and_expr -> shift_expr
1564
^
and_expr -> shift_expr
1564
>
and_expr -> shift_expr
1565
<<
1958
1565
>>
1959
1565
<
shift_expr -> arith_expr
1565
>
shift_expr -> arith_expr
1565
&
shift_expr -> arith_expr
1565
and
shift_expr -> arith_expr
1565
in
shift_expr -> arith_expr
1565
!=
shift_expr -> arith_expr
1565
|
shift_expr -> arith_expr
1565
if
shift_expr -> arith_expr
1565
not
shift_expr -> arith_expr
1565
<=
shift_expr -> arith_expr
1565
is
shift_expr -> arith_expr
1565
==
shift_expr -> arith_expr
1565
or
shift_expr -> arith_expr
1565
:
shift_expr -> arith_expr
1565
as
shift_expr -> arith_expr
1565
>=
shift_expr -> arith_expr
1565
^
shift_expr -> arith_expr
1566
==
atom -> NUMBER
1566
<=
atom -> NUMBER
1566
<<
atom -> NUMBER
1566
/
atom -> NUMBER
1566
as
atom -> NUMBER
1566
^
atom -> NUMBER
1566
if
atom -> NUMBER
1566
.
atom -> NUMBER
1566
or
atom -> NUMBER
1566
**
atom -> NUMBER
1566
+
atom -> NUMBER
1566
%
atom -> NUMBER
1566
-
atom -> NUMBER
1566
&
atom -> NUMBER
1566
@
atom -> NUMBER
1566
*
atom -> NUMBER
1566
>>
atom -> NUMBER
1566
<
atom -> NUMBER
1566
is
atom -> NUMBER
1566
(
atom -> NUMBER
1566
and
atom -> NUMBER
1566
not
atom -> NUMBER
1566
!=
atom -> NUMBER
1566
|
atom -> NUMBER
1566
in
atom -> NUMBER
1566
>
atom -> NUMBER
1566
:
atom -> NUMBER
1566
>=
atom -> NUMBER
1566
//
atom -> NUMBER
1566
[
atom -> NUMBER
1567
if
1960
1567
:
test -> or_test
1567
as
test -> or_test
1568
or
atom -> NAME
1568
as
atom -> NAME
1568
in
atom -> NAME
1568
^
atom -> NAME
1568
[
atom -> NAME
1568
==
atom -> NAME
1568
<<
atom -> NAME
1568
**
atom -> NAME
1568
!=
atom -> NAME
1568
%
atom -> NAME
1568
@
atom -> NAME
1568
not
atom -> NAME
1568
>
atom -> NAME
1568
>=
atom -> NAME
1568
*
atom -> NAME
1568
&
atom -> NAME
1568
<
atom -> NAME
1568
-
atom -> NAME
1568
(
atom -> NAME
1568
>>
atom -> NAME
1568
+
atom -> NAME
1568
//
atom -> NAME
1568
and
atom -> NAME
1568
<=
atom -> NAME
1568
is
atom -> NAME
1568
if
atom -> NAME
1568
/
atom -> NAME
1568
.
atom -> NAME
1568
:
atom -> NAME
1568
|
atom -> NAME
1569
and_test
110
1569
atom_expr
111
1569
and_expr
112
1569
term
113
1569
factor
114
1569
shift_expr
115
1569
arith_expr
116
1569
NUMBER
117
1569
NAME
118
1569
[
119
1569
test_list_comp
1961
1569
{
121
1569
expr
122
1569
not_test
123
1569
False
124
1569
xor_expr
125
1569
atom
126
1569
STRING
127
1569
+
128
1569
(
129
1569
True
131
1569
-
132
1569
]
1962
1569
None
133
1569
comparison
134
1569
or_test
135
1569
test
136
1569
power
137
1569
~
138
1569
lambda
139
1569
lambdef
140
1569
not
141
1569
test_list
142
1570
}
1963
1571
in
147
1571
<
148
1571
>=
149
1571
not
150
1571
comp_op
1964
1571
!=
151
1571
>
152
1571
==
153
1571
is
154
1571
<=
155
1571
as
comparison -> expr
1571
or
comparison -> expr
1571
and
comparison -> expr
1571
:
comparison -> expr
1571
if
comparison -> expr
1572
*
atom -> False
1572
@
atom -> False
1572
<
atom -> False
1572
or
atom -> False
1572
is
atom -> False
1572
>>
atom -> False
1572
[
atom -> False
1572
/
atom -> False
1572
%
atom -> False
1572
.
atom -> False
1572
(
atom -> False
1572
in
atom -> False
1572
**
atom -> False
1572
==
atom -> False
1572
as
atom -> False
1572
//
atom -> False
1572
:
atom -> False
1572
+
atom -> False
1572
<<
atom -> False
1572
!=
atom -> False
1572
<=
atom -> False
1572
>
atom -> False
1572
^
atom -> False
1572
if
atom -> False
1572
&
atom -> False
1572
and
atom -> False
1572
|
atom -> False
1572
-
atom -> False
1572
not
atom -> False
1572
>=
atom -> False
1573
:
expr -> xor_expr
1573
not
expr -> xor_expr
1573
|
1965
1573
as
expr -> xor_expr
1573
==
expr -> xor_expr
1573
in
expr -> xor_expr
1573
if
expr -> xor_expr
1573
>
expr -> xor_expr
1573
or
expr -> xor_expr
1573
<=
expr -> xor_expr
1573
<
expr -> xor_expr
1573
is
expr -> xor_expr
1573
>=
expr -> xor_expr
1573
!=
expr -> xor_expr
1573
and
expr -> xor_expr
1574
&
atom -> STRING
1574
**
atom -> STRING
1574
%
atom -> STRING
1574
@
atom -> STRING
1574
/
atom -> STRING
1574
*
atom -> STRING
1574
^
atom -> STRING
1574
>=
atom -> STRING
1574
if
atom -> STRING
1574
<
atom -> STRING
1574
:
atom -> STRING
1574
>>
atom -> STRING
1574
.
atom -> STRING
1574
//
atom -> STRING
1574
+
atom -> STRING
1574
as
atom -> STRING
1574
<<
atom -> STRING
1574
and
atom -> STRING
1574
[
atom -> STRING
1574
or
atom -> STRING
1574
in
atom -> STRING
1574
not
atom -> STRING
1574
>
atom -> STRING
1574
(
atom -> STRING
1574
!=
atom -> STRING
1574
is
atom -> STRING
1574
==
atom -> STRING
1574
-
atom -> STRING
1574
|
atom -> STRING
1574
<=
atom -> STRING
1575
as
1966
1575
:
1967
1576
atom_expr
1560
1576
NUMBER
1566
1576
NAME
1568
1576
[
1569
1576
{
1570
1576
False
1572
1576
STRING
1574
1576
+
1576
1576
True
1577
1576
(
1578
1576
None
1579
1576
-
1580
1576
atom
1582
1576
factor
1968
1576
power
1583
1576
~
1584
1577
!=
atom -> True
1577
:
atom -> True
1577
is
atom -> True
1577
//
atom -> True
1577
|
atom -> True
1577
<=
atom -> True
1577
^
atom -> True
1577
%
atom -> True
1577
@
atom -> True
1577
**
atom -> True
1577
as
atom -> True
1577
(
atom -> True
1577
not
atom -> True
1577
>>
atom -> True
1577
<
atom -> True
1577
==
atom -> True
1577
and
atom -> True
1577
in
atom -> True
1577
&
atom -> True
1577
.
atom -> True
1577
<<
atom -> True
1577
/
atom -> True
1577
*
atom -> True
1577
>
atom -> True
1577
+
atom -> True
1577
>=
atom -> True
1577
or
atom -> True
1577
-
atom -> True
1577
[
atom -> True
1577
if
atom -> True
1578
and_test
217
1578
atom_expr
218
1578
and_expr
219
1578
term
220
1578
factor
221
1578
shift_expr
222
1578
arith_expr
223
1578
NUMBER
224
1578
NAME
225
1578
not
226
1578
[
227
1578
{
228
1578
expr
229
1578
test_list_comp
1969
1578
not_test
231
1578
False
232
1578
xor_expr
234
1578
STRING
235
1578
lambda
236
1578
atom
237
1578
+
238
1578
True
239
1578
-
240
1578
(
241
1578
None
242
1578
comparison
243
1578
power
244
1578
)
1970
1578
~
245
1578
or_test
246
1578
test
247
1578
lambdef
248
1578
test_list
249
1579
!=
atom -> None
1579
//
atom -> None
1579
^
atom -> None
1579
>=
atom -> None
1579
&
atom -> None
1579
**
atom -> None
1579
<
atom -> None
1579
if
atom -> None
1579
*
atom -> None
1579
>
atom -> None
1579
@
atom -> None
1579
|
atom -> None
1579
-
atom -> None
1579
%
atom -> None
1579
:
atom -> None
1579
not
atom -> None
1579
==
atom -> None
1579
in
atom -> None
1579
/
atom -> None
1579
or
atom -> None
1579
and
atom -> None
1579
+
atom -> None
1579
(
atom -> None
1579
as
atom -> None
1579
>>
atom -> None
1579
is
atom -> None
1579
[
atom -> None
1579
<=
atom -> None
1579
<<
atom -> None
1579
.
atom -> None
1580
atom_expr
1560
1580
NUMBER
1566
1580
NAME
1568
1580
[
1569
1580
factor
1971
1580
{
1570
1580
False
1572
1580
STRING
1574
1580
+
1576
1580
True
1577
1580
(
1578
1580
None
1579
1580
-
1580
1580
atom
1582
1580
power
1583
1580
~
1584
1581
atom_expr
6
1581
factor
10
1581
[
3
1581
term
15
1581
STRING
43
1581
arith_expr
32
1581
NUMBER
8
1581
small_stmt
1972
1581
NAME
37
1581
{
5
1581
expr
7
1581
not
51
1581
True
9
1581
shift_expr
12
1581
atom
13
1581
xor_expr
14
1581
NEWLINE
1973
1581
(
34
1581
None
29
1581
and_test
20
1581
and_expr
21
1581
False
23
1581
or_test
25
1581
test
33
1581
lambda
28
1581
+
30
1581
simple_stmt
1974
1581
nonlocal
66
1581
suite
1975
1581
-
36
1581
not_test
40
1581
power
47
1581
lambdef
41
1581
~
44
1581
comparison
48
1581
assert
67
1581
global_stmt
68
1581
continue
49
1581
expr_stmt
50
1581
test_list
62
1581
raise
69
1581
del_stmt
52
1581
yield_stmt
53
1581
raise_stmt
70
1581
yield
56
1581
assert_stmt
57
1581
global
71
1581
nonlocal_stmt
72
1581
break_stmt
58
1581
return_stmt
75
1581
return
59
1581
pass
60
1581
continue_stmt
61
1581
flow_stmt
76
1581
break
63
1581
del
64
1581
pass_stmt
65
1582
[
1976
1582
(
1977
1582
.
1978
1582
trailer
1979
1582
<<
trailer_expr -> 
1582
trailer_expr
1980
1582
@
trailer_expr -> 
1582
!=
trailer_expr -> 
1582
-
trailer_expr -> 
1582
^
trailer_expr -> 
1582
<
trailer_expr -> 
1582
/
trailer_expr -> 
1582
is
trailer_expr -> 
1582
==
trailer_expr -> 
1582
&
trailer_expr -> 
1582
>=
trailer_expr -> 
1582
or
trailer_expr -> 
1582
in
trailer_expr -> 
1582
*
trailer_expr -> 
1582
not
trailer_expr -> 
1582
**
trailer_expr -> 
1582
<=
trailer_expr -> 
1582
+
trailer_expr -> 
1582
as
trailer_expr -> 
1582
//
trailer_expr -> 
1582
%
trailer_expr -> 
1582
>
trailer_expr -> 
1582
:
trailer_expr -> 
1582
|
trailer_expr -> 
1582
if
trailer_expr -> 
1582
>>
trailer_expr -> 
1582
and
trailer_expr -> 
1583
*
factor -> power
1583
>>
factor -> power
1583
>=
factor -> power
1583
<
factor -> power
1583
&
factor -> power
1583
@
factor -> power
1583
|
factor -> power
1583
!=
factor -> power
1583
as
factor -> power
1583
<=
factor -> power
1583
//
factor -> power
1583
in
factor -> power
1583
and
factor -> power
1583
+
factor -> power
1583
>
factor -> power
1583
-
factor -> power
1583
not
factor -> power
1583
is
factor -> power
1583
==
factor -> power
1583
%
factor -> power
1583
if
factor -> power
1583
or
factor -> power
1583
^
factor -> power
1583
<<
factor -> power
1583
/
factor -> power
1583
:
factor -> power
1584
atom_expr
1560
1584
NUMBER
1566
1584
NAME
1568
1584
[
1569
1584
factor
1981
1584
{
1570
1584
False
1572
1584
STRING
1574
1584
+
1576
1584
True
1577
1584
(
1578
1584
None
1579
1584
-
1580
1584
atom
1582
1584
power
1583
1584
~
1584
1585
varargslist
1982
1585
:
1983
1585
vfpdef
212
1585
NAME
211
1586
and
1984
1586
as
and_test -> not_test
1586
or
and_test -> not_test
1586
:
and_test -> not_test
1586
if
and_test -> not_test
1587
as
or_test -> and_test
1587
or
1985
1587
if
or_test -> and_test
1587
:
or_test -> and_test
1588
atom_expr
1560
1588
and_expr
1561
1588
term
1562
1588
factor
1563
1588
shift_expr
1564
1588
arith_expr
1565
1588
NUMBER
1566
1588
NAME
1568
1588
[
1569
1588
{
1570
1588
expr
1571
1588
False
1572
1588
xor_expr
1573
1588
STRING
1574
1588
+
1576
1588
True
1577
1588
(
1578
1588
None
1579
1588
-
1580
1588
atom
1582
1588
power
1583
1588
~
1584
1588
not_test
1986
1588
not
1588
1588
comparison
1589
1589
or
not_test -> comparison
1589
if
not_test -> comparison
1589
as
not_test -> comparison
1589
:
not_test -> comparison
1589
and
not_test -> comparison
1590
as
test -> lambdef
1590
:
test -> lambdef
1591
test
1987
1591
atom_expr
79
1591
and_expr
80
1591
term
81
1591
factor
82
1591
shift_expr
83
1591
arith_expr
84
1591
NUMBER
85
1591
NAME
86
1591
[
87
1591
{
88
1591
expr
89
1591
False
90
1591
xor_expr
91
1591
STRING
92
1591
+
93
1591
True
94
1591
(
95
1591
None
96
1591
-
97
1591
atom
98
1591
power
99
1591
~
100
1591
lambda
101
1591
not_test
102
1591
not
103
1591
comparison
104
1591
and_test
105
1591
lambdef
106
1591
or_test
107
1592
def
1600
1592
funcdef
1988
1592
class
1594
1592
classdef
1989
1593
NEWLINE
1990
1594
NAME
1991
1595
atom_expr
79
1595
and_expr
80
1595
term
81
1595
factor
82
1595
shift_expr
83
1595
arith_expr
84
1595
NUMBER
85
1595
NAME
86
1595
test
1992
1595
[
87
1595
{
88
1595
expr
89
1595
False
90
1595
xor_expr
91
1595
STRING
92
1595
+
93
1595
True
94
1595
(
95
1595
None
96
1595
-
97
1595
atom
98
1595
power
99
1595
~
100
1595
lambda
101
1595
not_test
102
1595
not
103
1595
comparison
104
1595
and_test
105
1595
lambdef
106
1595
or_test
107
1596
:
1993
1597
atom_expr
173
1597
and_expr
174
1597
term
175
1597
factor
176
1597
shift_expr
177
1597
arith_expr
178
1597
NUMBER
179
1597
or_test
180
1597
NAME
181
1597
[
182
1597
{
183
1597
expr
184
1597
not_test
185
1597
False
186
1597
xor_expr
187
1597
STRING
188
1597
atom
189
1597
+
190
1597
True
191
1597
(
192
1597
with_item
193
1597
-
194
1597
None
195
1597
with_items
1994
1597
test
197
1597
and_test
198
1597
power
199
1597
~
200
1597
lambda
201
1597
not
202
1597
comparison
203
1597
lambdef
204
1598
assert
compound_stmt -> decorated
1598
class
compound_stmt -> decorated
1598
def
compound_stmt -> decorated
1598
try
compound_stmt -> decorated
1598
(
compound_stmt -> decorated
1598
pass
compound_stmt -> decorated
1598
STRING
compound_stmt -> decorated
1598
with
compound_stmt -> decorated
1598
{
compound_stmt -> decorated
1598
if
compound_stmt -> decorated
1598
while
compound_stmt -> decorated
1598
None
compound_stmt -> decorated
1598
@
compound_stmt -> decorated
1598
nonlocal
compound_stmt -> decorated
1598
NUMBER
compound_stmt -> decorated
1598
continue
compound_stmt -> decorated
1598
-
compound_stmt -> decorated
1598
return
compound_stmt -> decorated
1598
NAME
compound_stmt -> decorated
1598
for
compound_stmt -> decorated
1598
lambda
compound_stmt -> decorated
1598
False
compound_stmt -> decorated
1598
~
compound_stmt -> decorated
1598
global
compound_stmt -> decorated
1598
raise
compound_stmt -> decorated
1598
[
compound_stmt -> decorated
1598
True
compound_stmt -> decorated
1598
yield
compound_stmt -> decorated
1598
del
compound_stmt -> decorated
1598
DEDENT
compound_stmt -> decorated
1598
+
compound_stmt -> decorated
1598
break
compound_stmt -> decorated
1598
not
compound_stmt -> decorated
1599
not
compound_stmt -> for_stmt
1599
{
compound_stmt -> for_stmt
1599
break
compound_stmt -> for_stmt
1599
None
compound_stmt -> for_stmt
1599
nonlocal
compound_stmt -> for_stmt
1599
global
compound_stmt -> for_stmt
1599
class
compound_stmt -> for_stmt
1599
~
compound_stmt -> for_stmt
1599
False
compound_stmt -> for_stmt
1599
+
compound_stmt -> for_stmt
1599
def
compound_stmt -> for_stmt
1599
NUMBER
compound_stmt -> for_stmt
1599
(
compound_stmt -> for_stmt
1599
assert
compound_stmt -> for_stmt
1599
if
compound_stmt -> for_stmt
1599
yield
compound_stmt -> for_stmt
1599
with
compound_stmt -> for_stmt
1599
@
compound_stmt -> for_stmt
1599
del
compound_stmt -> for_stmt
1599
pass
compound_stmt -> for_stmt
1599
True
compound_stmt -> for_stmt
1599
raise
compound_stmt -> for_stmt
1599
return
compound_stmt -> for_stmt
1599
continue
compound_stmt -> for_stmt
1599
NAME
compound_stmt -> for_stmt
1599
try
compound_stmt -> for_stmt
1599
for
compound_stmt -> for_stmt
1599
-
compound_stmt -> for_stmt
1599
while
compound_stmt -> for_stmt
1599
DEDENT
compound_stmt -> for_stmt
1599
lambda
compound_stmt -> for_stmt
1599
[
compound_stmt -> for_stmt
1599
STRING
compound_stmt -> for_stmt
1600
NAME
1995
1601
yield
compound_stmt -> with_stmt
1601
with
compound_stmt -> with_stmt
1601
DEDENT
compound_stmt -> with_stmt
1601
while
compound_stmt -> with_stmt
1601
pass
compound_stmt -> with_stmt
1601
try
compound_stmt -> with_stmt
1601
NAME
compound_stmt -> with_stmt
1601
global
compound_stmt -> with_stmt
1601
break
compound_stmt -> with_stmt
1601
return
compound_stmt -> with_stmt
1601
lambda
compound_stmt -> with_stmt
1601
True
compound_stmt -> with_stmt
1601
def
compound_stmt -> with_stmt
1601
{
compound_stmt -> with_stmt
1601
+
compound_stmt -> with_stmt
1601
continue
compound_stmt -> with_stmt
1601
del
compound_stmt -> with_stmt
1601
[
compound_stmt -> with_stmt
1601
STRING
compound_stmt -> with_stmt
1601
assert
compound_stmt -> with_stmt
1601
NUMBER
compound_stmt -> with_stmt
1601
None
compound_stmt -> with_stmt
1601
nonlocal
compound_stmt -> with_stmt
1601
(
compound_stmt -> with_stmt
1601
not
compound_stmt -> with_stmt
1601
@
compound_stmt -> with_stmt
1601
if
compound_stmt -> with_stmt
1601
for
compound_stmt -> with_stmt
1601
raise
compound_stmt -> with_stmt
1601
~
compound_stmt -> with_stmt
1601
class
compound_stmt -> with_stmt
1601
-
compound_stmt -> with_stmt
1601
False
compound_stmt -> with_stmt
1602
assert
compound_stmt -> funcdef
1602
{
compound_stmt -> funcdef
1602
if
compound_stmt -> funcdef
1602
None
compound_stmt -> funcdef
1602
class
compound_stmt -> funcdef
1602
-
compound_stmt -> funcdef
1602
not
compound_stmt -> funcdef
1602
while
compound_stmt -> funcdef
1602
~
compound_stmt -> funcdef
1602
[
compound_stmt -> funcdef
1602
del
compound_stmt -> funcdef
1602
NUMBER
compound_stmt -> funcdef
1602
DEDENT
compound_stmt -> funcdef
1602
NAME
compound_stmt -> funcdef
1602
True
compound_stmt -> funcdef
1602
global
compound_stmt -> funcdef
1602
with
compound_stmt -> funcdef
1602
def
compound_stmt -> funcdef
1602
lambda
compound_stmt -> funcdef
1602
@
compound_stmt -> funcdef
1602
break
compound_stmt -> funcdef
1602
nonlocal
compound_stmt -> funcdef
1602
False
compound_stmt -> funcdef
1602
+
compound_stmt -> funcdef
1602
for
compound_stmt -> funcdef
1602
pass
compound_stmt -> funcdef
1602
try
compound_stmt -> funcdef
1602
return
compound_stmt -> funcdef
1602
continue
compound_stmt -> funcdef
1602
yield
compound_stmt -> funcdef
1602
(
compound_stmt -> funcdef
1602
STRING
compound_stmt -> funcdef
1602
raise
compound_stmt -> funcdef
1603
DEDENT
compound_stmt -> try_stmt
1603
True
compound_stmt -> try_stmt
1603
if
compound_stmt -> try_stmt
1603
with
compound_stmt -> try_stmt
1603
nonlocal
compound_stmt -> try_stmt
1603
STRING
compound_stmt -> try_stmt
1603
return
compound_stmt -> try_stmt
1603
class
compound_stmt -> try_stmt
1603
raise
compound_stmt -> try_stmt
1603
[
compound_stmt -> try_stmt
1603
not
compound_stmt -> try_stmt
1603
None
compound_stmt -> try_stmt
1603
{
compound_stmt -> try_stmt
1603
del
compound_stmt -> try_stmt
1603
break
compound_stmt -> try_stmt
1603
for
compound_stmt -> try_stmt
1603
NAME
compound_stmt -> try_stmt
1603
def
compound_stmt -> try_stmt
1603
pass
compound_stmt -> try_stmt
1603
lambda
compound_stmt -> try_stmt
1603
while
compound_stmt -> try_stmt
1603
-
compound_stmt -> try_stmt
1603
False
compound_stmt -> try_stmt
1603
continue
compound_stmt -> try_stmt
1603
@
compound_stmt -> try_stmt
1603
assert
compound_stmt -> try_stmt
1603
try
compound_stmt -> try_stmt
1603
+
compound_stmt -> try_stmt
1603
NUMBER
compound_stmt -> try_stmt
1603
global
compound_stmt -> try_stmt
1603
(
compound_stmt -> try_stmt
1603
yield
compound_stmt -> try_stmt
1603
~
compound_stmt -> try_stmt
1604
DEDENT
compound_stmt -> if_stmt
1604
@
compound_stmt -> if_stmt
1604
None
compound_stmt -> if_stmt
1604
return
compound_stmt -> if_stmt
1604
global
compound_stmt -> if_stmt
1604
STRING
compound_stmt -> if_stmt
1604
if
compound_stmt -> if_stmt
1604
for
compound_stmt -> if_stmt
1604
~
compound_stmt -> if_stmt
1604
[
compound_stmt -> if_stmt
1604
nonlocal
compound_stmt -> if_stmt
1604
-
compound_stmt -> if_stmt
1604
continue
compound_stmt -> if_stmt
1604
NUMBER
compound_stmt -> if_stmt
1604
not
compound_stmt -> if_stmt
1604
+
compound_stmt -> if_stmt
1604
False
compound_stmt -> if_stmt
1604
while
compound_stmt -> if_stmt
1604
{
compound_stmt -> if_stmt
1604
assert
compound_stmt -> if_stmt
1604
break
compound_stmt -> if_stmt
1604
True
compound_stmt -> if_stmt
1604
yield
compound_stmt -> if_stmt
1604
with
compound_stmt -> if_stmt
1604
def
compound_stmt -> if_stmt
1604
try
compound_stmt -> if_stmt
1604
(
compound_stmt -> if_stmt
1604
raise
compound_stmt -> if_stmt
1604
pass
compound_stmt -> if_stmt
1604
NAME
compound_stmt -> if_stmt
1604
del
compound_stmt -> if_stmt
1604
lambda
compound_stmt -> if_stmt
1604
class
compound_stmt -> if_stmt
1605
del
stmt -> compound_stmt
1605
STRING
stmt -> compound_stmt
1605
+
stmt -> compound_stmt
1605
nonlocal
stmt -> compound_stmt
1605
yield
stmt -> compound_stmt
1605
-
stmt -> compound_stmt
1605
True
stmt -> compound_stmt
1605
pass
stmt -> compound_stmt
1605
raise
stmt -> compound_stmt
1605
[
stmt -> compound_stmt
1605
class
stmt -> compound_stmt
1605
@
stmt -> compound_stmt
1605
None
stmt -> compound_stmt
1605
NAME
stmt -> compound_stmt
1605
DEDENT
stmt -> compound_stmt
1605
NUMBER
stmt -> compound_stmt
1605
lambda
stmt -> compound_stmt
1605
~
stmt -> compound_stmt
1605
def
stmt -> compound_stmt
1605
for
stmt -> compound_stmt
1605
{
stmt -> compound_stmt
1605
not
stmt -> compound_stmt
1605
if
stmt -> compound_stmt
1605
return
stmt -> compound_stmt
1605
(
stmt -> compound_stmt
1605
False
stmt -> compound_stmt
1605
with
stmt -> compound_stmt
1605
assert
stmt -> compound_stmt
1605
break
stmt -> compound_stmt
1605
continue
stmt -> compound_stmt
1605
global
stmt -> compound_stmt
1605
try
stmt -> compound_stmt
1605
while
stmt -> compound_stmt
1606
return
compound_stmt -> while_stmt
1606
{
compound_stmt -> while_stmt
1606
DEDENT
compound_stmt -> while_stmt
1606
~
compound_stmt -> while_stmt
1606
False
compound_stmt -> while_stmt
1606
global
compound_stmt -> while_stmt
1606
None
compound_stmt -> while_stmt
1606
True
compound_stmt -> while_stmt
1606
pass
compound_stmt -> while_stmt
1606
class
compound_stmt -> while_stmt
1606
break
compound_stmt -> while_stmt
1606
NAME
compound_stmt -> while_stmt
1606
NUMBER
compound_stmt -> while_stmt
1606
del
compound_stmt -> while_stmt
1606
while
compound_stmt -> while_stmt
1606
for
compound_stmt -> while_stmt
1606
-
compound_stmt -> while_stmt
1606
assert
compound_stmt -> while_stmt
1606
yield
compound_stmt -> while_stmt
1606
if
compound_stmt -> while_stmt
1606
continue
compound_stmt -> while_stmt
1606
with
compound_stmt -> while_stmt
1606
[
compound_stmt -> while_stmt
1606
nonlocal
compound_stmt -> while_stmt
1606
try
compound_stmt -> while_stmt
1606
not
compound_stmt -> while_stmt
1606
STRING
compound_stmt -> while_stmt
1606
+
compound_stmt -> while_stmt
1606
def
compound_stmt -> while_stmt
1606
raise
compound_stmt -> while_stmt
1606
@
compound_stmt -> while_stmt
1606
lambda
compound_stmt -> while_stmt
1606
(
compound_stmt -> while_stmt
1607
atom_expr
252
1607
True
253
1607
and_expr
254
1607
(
255
1607
NUMBER
256
1607
expr_list
1996
1607
NAME
258
1607
{
259
1607
False
260
1607
arith_expr
261
1607
STRING
262
1607
power
263
1607
[
264
1607
factor
265
1607
~
266
1607
atom
267
1607
+
268
1607
term
269
1607
None
270
1607
shift_expr
271
1607
xor_expr
272
1607
expr
273
1607
-
274
1608
-
stmt -> simple_stmt
1608
while
stmt -> simple_stmt
1608
del
stmt -> simple_stmt
1608
lambda
stmt -> simple_stmt
1608
class
stmt -> simple_stmt
1608
with
stmt -> simple_stmt
1608
not
stmt -> simple_stmt
1608
break
stmt -> simple_stmt
1608
(
stmt -> simple_stmt
1608
True
stmt -> simple_stmt
1608
NUMBER
stmt -> simple_stmt
1608
NAME
stmt -> simple_stmt
1608
def
stmt -> simple_stmt
1608
yield
stmt -> simple_stmt
1608
return
stmt -> simple_stmt
1608
continue
stmt -> simple_stmt
1608
pass
stmt -> simple_stmt
1608
+
stmt -> simple_stmt
1608
None
stmt -> simple_stmt
1608
raise
stmt -> simple_stmt
1608
try
stmt -> simple_stmt
1608
assert
stmt -> simple_stmt
1608
global
stmt -> simple_stmt
1608
[
stmt -> simple_stmt
1608
DEDENT
stmt -> simple_stmt
1608
~
stmt -> simple_stmt
1608
for
stmt -> simple_stmt
1608
if
stmt -> simple_stmt
1608
{
stmt -> simple_stmt
1608
STRING
stmt -> simple_stmt
1608
@
stmt -> simple_stmt
1608
nonlocal
stmt -> simple_stmt
1608
False
stmt -> simple_stmt
1609
return
compound_stmt -> classdef
1609
+
compound_stmt -> classdef
1609
[
compound_stmt -> classdef
1609
global
compound_stmt -> classdef
1609
nonlocal
compound_stmt -> classdef
1609
pass
compound_stmt -> classdef
1609
(
compound_stmt -> classdef
1609
False
compound_stmt -> classdef
1609
@
compound_stmt -> classdef
1609
def
compound_stmt -> classdef
1609
lambda
compound_stmt -> classdef
1609
-
compound_stmt -> classdef
1609
NUMBER
compound_stmt -> classdef
1609
~
compound_stmt -> classdef
1609
for
compound_stmt -> classdef
1609
continue
compound_stmt -> classdef
1609
not
compound_stmt -> classdef
1609
break
compound_stmt -> classdef
1609
assert
compound_stmt -> classdef
1609
while
compound_stmt -> classdef
1609
if
compound_stmt -> classdef
1609
True
compound_stmt -> classdef
1609
{
compound_stmt -> classdef
1609
class
compound_stmt -> classdef
1609
DEDENT
compound_stmt -> classdef
1609
yield
compound_stmt -> classdef
1609
del
compound_stmt -> classdef
1609
None
compound_stmt -> classdef
1609
raise
compound_stmt -> classdef
1609
try
compound_stmt -> classdef
1609
NAME
compound_stmt -> classdef
1609
with
compound_stmt -> classdef
1609
STRING
compound_stmt -> classdef
1610
DEDENT
1997
1611
while
1591
1611
decorators
1592
1611
[
3
1611
small_stmt
1593
1611
{
5
1611
atom_expr
6
1611
expr
7
1611
NUMBER
8
1611
True
9
1611
factor
10
1611
class
1594
1611
shift_expr
12
1611
atom
13
1611
xor_expr
14
1611
term
15
1611
if
1595
1611
try
1596
1611
with
1597
1611
decorated
1598
1611
and_test
20
1611
and_expr
21
1611
for_stmt
1599
1611
False
23
1611
def
1600
1611
or_test
25
1611
with_stmt
1601
1611
funcdef
1602
1611
lambda
28
1611
try_stmt
1603
1611
None
29
1611
+
30
1611
if_stmt
1604
1611
arith_expr
32
1611
test
33
1611
(
34
1611
compound_stmt
1605
1611
-
36
1611
NAME
37
1611
while_stmt
1606
1611
not_test
40
1611
lambdef
41
1611
for
1607
1611
STRING
43
1611
~
44
1611
simple_stmt
1608
1611
classdef
1609
1611
power
47
1611
comparison
48
1611
continue
49
1611
expr_stmt
50
1611
not
51
1611
del_stmt
52
1611
yield_stmt
53
1611
@
54
1611
decorator
55
1611
yield
56
1611
assert_stmt
57
1611
DEDENT
stmt_list -> stmt
1611
break_stmt
58
1611
return
59
1611
pass
60
1611
continue_stmt
61
1611
test_list
62
1611
break
63
1611
del
64
1611
pass_stmt
65
1611
nonlocal
66
1611
assert
67
1611
stmt_list
1998
1611
global_stmt
68
1611
raise
69
1611
stmt
1611
1611
raise_stmt
70
1611
global
71
1611
nonlocal_stmt
72
1611
return_stmt
75
1611
flow_stmt
76
1612
atom_expr
173
1612
and_expr
174
1612
term
175
1612
factor
176
1612
shift_expr
177
1612
arith_expr
178
1612
NUMBER
179
1612
or_test
180
1612
NAME
181
1612
[
182
1612
{
183
1612
expr
184
1612
not_test
185
1612
False
186
1612
xor_expr
187
1612
STRING
188
1612
atom
189
1612
+
190
1612
True
191
1612
(
192
1612
None
195
1612
-
194
1612
and_test
198
1612
power
199
1612
~
200
1612
lambda
201
1612
test
1999
1612
not
202
1612
comparison
203
1612
lambdef
204
1613
*
trailer -> [ subscriptlist ]
1613
not
trailer -> [ subscriptlist ]
1613
(
trailer -> [ subscriptlist ]
1613
<<
trailer -> [ subscriptlist ]
1613
:
trailer -> [ subscriptlist ]
1613
,
trailer -> [ subscriptlist ]
1613
>>
trailer -> [ subscriptlist ]
1613
//
trailer -> [ subscriptlist ]
1613
or
trailer -> [ subscriptlist ]
1613
is
trailer -> [ subscriptlist ]
1613
as
trailer -> [ subscriptlist ]
1613
[
trailer -> [ subscriptlist ]
1613
|
trailer -> [ subscriptlist ]
1613
%
trailer -> [ subscriptlist ]
1613
<=
trailer -> [ subscriptlist ]
1613
and
trailer -> [ subscriptlist ]
1613
**
trailer -> [ subscriptlist ]
1613
if
trailer -> [ subscriptlist ]
1613
-
trailer -> [ subscriptlist ]
1613
in
trailer -> [ subscriptlist ]
1613
^
trailer -> [ subscriptlist ]
1613
+
trailer -> [ subscriptlist ]
1613
>=
trailer -> [ subscriptlist ]
1613
.
trailer -> [ subscriptlist ]
1613
&
trailer -> [ subscriptlist ]
1613
/
trailer -> [ subscriptlist ]
1613
!=
trailer -> [ subscriptlist ]
1613
<
trailer -> [ subscriptlist ]
1613
==
trailer -> [ subscriptlist ]
1613
>
trailer -> [ subscriptlist ]
1613
@
trailer -> [ subscriptlist ]
1614
%
trailer -> ( arglist )
1614
and
trailer -> ( arglist )
1614
+
trailer -> ( arglist )
1614
or
trailer -> ( arglist )
1614
not
trailer -> ( arglist )
1614
-
trailer -> ( arglist )
1614
@
trailer -> ( arglist )
1614
[
trailer -> ( arglist )
1614
>>
trailer -> ( arglist )
1614
<=
trailer -> ( arglist )
1614
if
trailer -> ( arglist )
1614
//
trailer -> ( arglist )
1614
==
trailer -> ( arglist )
1614
<<
trailer -> ( arglist )
1614
*
trailer -> ( arglist )
1614
<
trailer -> ( arglist )
1614
**
trailer -> ( arglist )
1614
is
trailer -> ( arglist )
1614
>
trailer -> ( arglist )
1614
!=
trailer -> ( arglist )
1614
/
trailer -> ( arglist )
1614
in
trailer -> ( arglist )
1614
.
trailer -> ( arglist )
1614
|
trailer -> ( arglist )
1614
as
trailer -> ( arglist )
1614
>=
trailer -> ( arglist )
1614
&
trailer -> ( arglist )
1614
(
trailer -> ( arglist )
1614
^
trailer -> ( arglist )
1614
,
trailer -> ( arglist )
1614
:
trailer -> ( arglist )
1615
atom_expr
1085
1615
True
1086
1615
(
1088
1615
NUMBER
1089
1615
NAME
1090
1615
{
1091
1615
power
1093
1615
[
1094
1615
~
1096
1615
atom
1097
1615
factor
2000
1615
+
1098
1615
None
1099
1615
STRING
1102
1615
False
1103
1615
-
1105
1616
atom_expr
1085
1616
True
1086
1616
and_expr
1087
1616
(
1088
1616
NUMBER
1089
1616
NAME
1090
1616
{
1091
1616
term
1092
1616
power
1093
1616
[
1094
1616
factor
1095
1616
~
1096
1616
atom
1097
1616
+
1098
1616
None
1099
1616
arith_expr
1100
1616
shift_expr
1101
1616
STRING
1102
1616
xor_expr
2001
1616
False
1103
1616
-
1105
1617
)
2002
1618
+
atom -> ( )
1618
:
atom -> ( )
1618
|
atom -> ( )
1618
-
atom -> ( )
1618
>>
atom -> ( )
1618
<<
atom -> ( )
1618
,
atom -> ( )
1618
%
atom -> ( )
1618
(
atom -> ( )
1618
&
atom -> ( )
1618
*
atom -> ( )
1618
**
atom -> ( )
1618
^
atom -> ( )
1618
.
atom -> ( )
1618
@
atom -> ( )
1618
//
atom -> ( )
1618
[
atom -> ( )
1618
/
atom -> ( )
1619
(
atom -> { }
1619
+
atom -> { }
1619
<<
atom -> { }
1619
.
atom -> { }
1619
//
atom -> { }
1619
/
atom -> { }
1619
&
atom -> { }
1619
*
atom -> { }
1619
**
atom -> { }
1619
,
atom -> { }
1619
^
atom -> { }
1619
[
atom -> { }
1619
@
atom -> { }
1619
-
atom -> { }
1619
%
atom -> { }
1619
|
atom -> { }
1619
>>
atom -> { }
1619
:
atom -> { }
1620
atom_expr
1085
1620
True
1086
1620
(
1088
1620
NUMBER
1089
1620
NAME
1090
1620
{
1091
1620
term
1092
1620
power
1093
1620
[
1094
1620
factor
1095
1620
~
1096
1620
atom
1097
1620
+
1098
1620
None
1099
1620
STRING
1102
1620
False
1103
1620
-
1105
1620
arith_expr
2003
1621
atom_expr
1085
1621
True
1086
1621
(
1088
1621
NUMBER
1089
1621
NAME
1090
1621
{
1091
1621
term
1092
1621
power
1093
1621
[
1094
1621
factor
1095
1621
~
1096
1621
atom
1097
1621
+
1098
1621
None
1099
1621
STRING
1102
1621
False
1103
1621
arith_expr
2004
1621
-
1105
1622
]
2005
1623
.
atom -> [ ]
1623
**
atom -> [ ]
1623
/
atom -> [ ]
1623
@
atom -> [ ]
1623
%
atom -> [ ]
1623
<<
atom -> [ ]
1623
>>
atom -> [ ]
1623
|
atom -> [ ]
1623
^
atom -> [ ]
1623
+
atom -> [ ]
1623
:
atom -> [ ]
1623
//
atom -> [ ]
1623
,
atom -> [ ]
1623
-
atom -> [ ]
1623
(
atom -> [ ]
1623
&
atom -> [ ]
1623
[
atom -> [ ]
1623
*
atom -> [ ]
1624
atom_expr
1085
1624
True
1086
1624
(
1088
1624
NUMBER
1089
1624
NAME
1090
1624
{
1091
1624
power
1093
1624
[
1094
1624
factor
1095
1624
~
1096
1624
atom
1097
1624
+
1098
1624
term
2006
1624
None
1099
1624
STRING
1102
1624
False
1103
1624
-
1105
1625
atom_expr
1085
1625
True
1086
1625
(
1088
1625
NUMBER
1089
1625
NAME
1090
1625
{
1091
1625
power
1093
1625
[
1094
1625
factor
1095
1625
~
1096
1625
atom
1097
1625
+
1098
1625
None
1099
1625
STRING
1102
1625
term
2007
1625
False
1103
1625
-
1105
1626
atom_expr
1085
1626
True
1086
1626
(
1088
1626
NUMBER
1089
1626
NAME
1090
1626
{
1091
1626
power
1093
1626
[
1094
1626
factor
1095
1626
~
1096
1626
atom
1097
1626
+
1098
1626
None
1099
1626
STRING
1102
1626
False
1103
1626
-
1105
1626
term
2008
1627
atom_expr
1085
1627
True
1086
1627
term
2009
1627
(
1088
1627
NUMBER
1089
1627
NAME
1090
1627
{
1091
1627
power
1093
1627
[
1094
1627
factor
1095
1627
~
1096
1627
atom
1097
1627
+
1098
1627
None
1099
1627
STRING
1102
1627
False
1103
1627
-
1105
1628
atom_expr
1085
1628
True
1086
1628
(
1088
1628
NUMBER
1089
1628
NAME
1090
1628
{
1091
1628
power
1093
1628
[
1094
1628
factor
1095
1628
~
1096
1628
atom
1097
1628
+
1098
1628
None
1099
1628
STRING
1102
1628
False
1103
1628
term
2010
1628
-
1105
1629
<<
factor -> ~ factor
1629
^
factor -> ~ factor
1629
-
factor -> ~ factor
1629
,
factor -> ~ factor
1629
|
factor -> ~ factor
1629
//
factor -> ~ factor
1629
&
factor -> ~ factor
1629
/
factor -> ~ factor
1629
@
factor -> ~ factor
1629
+
factor -> ~ factor
1629
*
factor -> ~ factor
1629
:
factor -> ~ factor
1629
%
factor -> ~ factor
1629
>>
factor -> ~ factor
1630
atom_expr
472
1630
and_expr
473
1630
term
474
1630
factor
475
1630
shift_expr
476
1630
arith_expr
477
1630
NUMBER
478
1630
NAME
479
1630
[
480
1630
{
481
1630
expr
482
1630
not_test
483
1630
False
484
1630
xor_expr
485
1630
atom
487
1630
STRING
488
1630
+
489
1630
(
490
1630
True
491
1630
-
492
1630
None
493
1630
or_test
494
1630
subscriptlist
2011
1630
and_test
495
1630
power
496
1630
~
497
1630
lambda
498
1630
:
maybe_test -> 
1630
maybe_test
499
1630
test
500
1630
not
501
1630
comparison
502
1630
lambdef
503
1630
subscript
504
1631
and_test
505
1631
atom_expr
506
1631
and_expr
507
1631
term
508
1631
factor
509
1631
shift_expr
510
1631
arith_expr
511
1631
NUMBER
512
1631
NAME
513
1631
not
514
1631
[
515
1631
{
516
1631
expr
517
1631
)
2012
1631
not_test
519
1631
False
520
1631
xor_expr
521
1631
STRING
522
1631
lambda
523
1631
atom
525
1631
+
526
1631
True
527
1631
-
528
1631
or_test
529
1631
(
530
1631
None
531
1631
comparison
532
1631
power
533
1631
test
534
1631
arglist
2013
1631
~
535
1631
*
536
1631
lambdef
537
1631
**
538
1631
argument
539
1632
[
1630
1632
trailer_expr
2014
1632
(
1631
1632
trailer
1632
1632
.
1634
1632
<<
trailer_expr -> 
1632
*
trailer_expr -> 
1632
@
trailer_expr -> 
1632
-
trailer_expr -> 
1632
**
trailer_expr -> 
1632
+
trailer_expr -> 
1632
^
trailer_expr -> 
1632
//
trailer_expr -> 
1632
%
trailer_expr -> 
1632
:
trailer_expr -> 
1632
/
trailer_expr -> 
1632
,
trailer_expr -> 
1632
|
trailer_expr -> 
1632
&
trailer_expr -> 
1632
>>
trailer_expr -> 
1633
%
atom_expr -> atom trailer_expr
1633
+
atom_expr -> atom trailer_expr
1633
**
atom_expr -> atom trailer_expr
1633
<<
atom_expr -> atom trailer_expr
1633
^
atom_expr -> atom trailer_expr
1633
:
atom_expr -> atom trailer_expr
1633
@
atom_expr -> atom trailer_expr
1633
*
atom_expr -> atom trailer_expr
1633
/
atom_expr -> atom trailer_expr
1633
//
atom_expr -> atom trailer_expr
1633
,
atom_expr -> atom trailer_expr
1633
-
atom_expr -> atom trailer_expr
1633
&
atom_expr -> atom trailer_expr
1633
|
atom_expr -> atom trailer_expr
1633
>>
atom_expr -> atom trailer_expr
1634
NAME
2015
1635
<<
factor -> + factor
1635
,
factor -> + factor
1635
/
factor -> + factor
1635
&
factor -> + factor
1635
:
factor -> + factor
1635
|
factor -> + factor
1635
//
factor -> + factor
1635
@
factor -> + factor
1635
-
factor -> + factor
1635
>>
factor -> + factor
1635
%
factor -> + factor
1635
+
factor -> + factor
1635
^
factor -> + factor
1635
*
factor -> + factor
1636
atom_expr
1085
1636
True
1086
1636
(
1088
1636
NUMBER
1089
1636
NAME
1090
1636
{
1091
1636
term
1092
1636
power
1093
1636
[
1094
1636
factor
1095
1636
~
1096
1636
atom
1097
1636
+
1098
1636
None
1099
1636
shift_expr
2016
1636
arith_expr
1100
1636
STRING
1102
1636
False
1103
1636
-
1105
1637
atom_expr
1085
1637
True
1086
1637
(
1088
1637
NUMBER
1089
1637
NAME
1090
1637
{
1091
1637
term
1092
1637
power
1093
1637
[
1094
1637
factor
1095
1637
~
1096
1637
atom
1097
1637
+
1098
1637
None
1099
1637
arith_expr
1100
1637
STRING
1102
1637
False
1103
1637
shift_expr
2017
1637
-
1105
1638
atom_expr
1085
1638
True
1086
1638
(
1088
1638
NUMBER
1089
1638
NAME
1090
1638
{
1091
1638
term
1092
1638
power
1093
1638
[
1094
1638
factor
1095
1638
~
1096
1638
atom
1097
1638
+
1098
1638
None
1099
1638
arith_expr
1100
1638
shift_expr
1101
1638
STRING
1102
1638
False
1103
1638
and_expr
2018
1638
-
1105
1639
atom_expr
1085
1639
True
1086
1639
and_expr
1087
1639
(
1088
1639
NUMBER
1089
1639
NAME
1090
1639
{
1091
1639
term
1092
1639
power
1093
1639
[
1094
1639
factor
1095
1639
~
1096
1639
atom
1097
1639
+
1098
1639
None
1099
1639
arith_expr
1100
1639
shift_expr
1101
1639
STRING
1102
1639
False
1103
1639
xor_expr
1104
1639
expr
2019
1639
-
1105
1640
%
factor -> - factor
1640
,
factor -> - factor
1640
//
factor -> - factor
1640
@
factor -> - factor
1640
/
factor -> - factor
1640
|
factor -> - factor
1640
&
factor -> - factor
1640
+
factor -> - factor
1640
<<
factor -> - factor
1640
^
factor -> - factor
1640
:
factor -> - factor
1640
>>
factor -> - factor
1640
-
factor -> - factor
1640
*
factor -> - factor
1641
:
lambdef -> lambda varargslist : test
1641
,
lambdef -> lambda varargslist : test
1641
as
lambdef -> lambda varargslist : test
1642
:
2020
1643
atom_expr
6
1643
factor
10
1643
[
3
1643
term
15
1643
STRING
43
1643
arith_expr
32
1643
NUMBER
8
1643
small_stmt
4
1643
NAME
37
1643
{
5
1643
expr
7
1643
not
51
1643
True
9
1643
shift_expr
12
1643
atom
13
1643
xor_expr
14
1643
NEWLINE
942
1643
(
34
1643
None
29
1643
and_test
20
1643
and_expr
21
1643
False
23
1643
or_test
25
1643
test
33
1643
lambda
28
1643
+
30
1643
simple_stmt
943
1643
suite
2021
1643
nonlocal
66
1643
-
36
1643
not_test
40
1643
power
47
1643
lambdef
41
1643
~
44
1643
comparison
48
1643
assert
67
1643
global_stmt
68
1643
continue
49
1643
expr_stmt
50
1643
test_list
62
1643
raise
69
1643
del_stmt
52
1643
yield_stmt
53
1643
raise_stmt
70
1643
yield
56
1643
assert_stmt
57
1643
global
71
1643
nonlocal_stmt
72
1643
break_stmt
58
1643
return_stmt
75
1643
return
59
1643
pass
60
1643
continue_stmt
61
1643
flow_stmt
76
1643
break
63
1643
del
64
1643
pass_stmt
65
1644
,
param -> ** tfpdef
1644
)
param -> ** tfpdef
1645
)
tfpdef -> NAME
1645
,
tfpdef -> NAME
1645
:
2022
1646
atom_expr
2023
1646
and_expr
2024
1646
term
2025
1646
factor
2026
1646
shift_expr
2027
1646
arith_expr
2028
1646
NUMBER
2029
1646
NAME
2030
1646
not
2031
1646
[
2032
1646
{
2033
1646
expr
2034
1646
not_test
2035
1646
False
2036
1646
xor_expr
2037
1646
STRING
2038
1646
lambda
2039
1646
atom
2040
1646
+
2041
1646
True
2042
1646
-
2043
1646
and_test
2044
1646
or_test
2045
1646
(
2046
1646
None
2047
1646
power
2048
1646
~
2049
1646
comparison
2050
1646
lambdef
2051
1646
test
2052
1647
,
param -> * tfpdef
1647
)
param -> * tfpdef
1648
**
1112
1648
param
1115
1648
*
1114
1648
NAME
1113
1648
parameters
2053
1648
tfpdef
1116
1649
atom_expr
1020
1649
and_expr
1021
1649
term
1022
1649
factor
1023
1649
shift_expr
1024
1649
arith_expr
1025
1649
NUMBER
1026
1649
NAME
1027
1649
not
1028
1649
[
1029
1649
{
1030
1649
expr
1031
1649
not_test
1032
1649
False
1033
1649
xor_expr
1034
1649
STRING
1035
1649
lambda
1036
1649
atom
1037
1649
+
1038
1649
True
1039
1649
-
1040
1649
(
1041
1649
None
1042
1649
power
1043
1649
test
2054
1649
and_test
1044
1649
~
1045
1649
or_test
1047
1649
comparison
1048
1649
lambdef
1049
1650
*=
test -> or_test if or_test else test
1650
//=
test -> or_test if or_test else test
1650
-=
test -> or_test if or_test else test
1650
|=
test -> or_test if or_test else test
1650
=
test -> or_test if or_test else test
1650
NEWLINE
test -> or_test if or_test else test
1650
&=
test -> or_test if or_test else test
1650
:
test -> or_test if or_test else test
1650
+=
test -> or_test if or_test else test
1650
<<=
test -> or_test if or_test else test
1650
>>=
test -> or_test if or_test else test
1650
^=
test -> or_test if or_test else test
1650
/=
test -> or_test if or_test else test
1650
**=
test -> or_test if or_test else test
1650
,
test -> or_test if or_test else test
1650
@=
test -> or_test if or_test else test
1650
%=
test -> or_test if or_test else test
1651
*
power -> atom_expr ** factor
1651
in
power -> atom_expr ** factor
1651
<
power -> atom_expr ** factor
1651
-
power -> atom_expr ** factor
1651
>>
power -> atom_expr ** factor
1651
<=
power -> atom_expr ** factor
1651
and
power -> atom_expr ** factor
1651
==
power -> atom_expr ** factor
1651
/
power -> atom_expr ** factor
1651
%
power -> atom_expr ** factor
1651
^
power -> atom_expr ** factor
1651
<<
power -> atom_expr ** factor
1651
>
power -> atom_expr ** factor
1651
//
power -> atom_expr ** factor
1651
is
power -> atom_expr ** factor
1651
@
power -> atom_expr ** factor
1651
+
power -> atom_expr ** factor
1651
else
power -> atom_expr ** factor
1651
|
power -> atom_expr ** factor
1651
>=
power -> atom_expr ** factor
1651
!=
power -> atom_expr ** factor
1651
or
power -> atom_expr ** factor
1651
&
power -> atom_expr ** factor
1651
not
power -> atom_expr ** factor
1652
and
xor_expr -> and_expr ^ xor_expr
1652
<
xor_expr -> and_expr ^ xor_expr
1652
>
xor_expr -> and_expr ^ xor_expr
1652
else
xor_expr -> and_expr ^ xor_expr
1652
in
xor_expr -> and_expr ^ xor_expr
1652
|
xor_expr -> and_expr ^ xor_expr
1652
<=
xor_expr -> and_expr ^ xor_expr
1652
not
xor_expr -> and_expr ^ xor_expr
1652
or
xor_expr -> and_expr ^ xor_expr
1652
==
xor_expr -> and_expr ^ xor_expr
1652
is
xor_expr -> and_expr ^ xor_expr
1652
!=
xor_expr -> and_expr ^ xor_expr
1652
>=
xor_expr -> and_expr ^ xor_expr
1653
<=
arith_expr -> term - arith_expr
1653
<<
arith_expr -> term - arith_expr
1653
or
arith_expr -> term - arith_expr
1653
is
arith_expr -> term - arith_expr
1653
==
arith_expr -> term - arith_expr
1653
!=
arith_expr -> term - arith_expr
1653
else
arith_expr -> term - arith_expr
1653
and
arith_expr -> term - arith_expr
1653
|
arith_expr -> term - arith_expr
1653
&
arith_expr -> term - arith_expr
1653
^
arith_expr -> term - arith_expr
1653
in
arith_expr -> term - arith_expr
1653
>
arith_expr -> term - arith_expr
1653
>>
arith_expr -> term - arith_expr
1653
not
arith_expr -> term - arith_expr
1653
>=
arith_expr -> term - arith_expr
1653
<
arith_expr -> term - arith_expr
1654
<=
arith_expr -> term + arith_expr
1654
>=
arith_expr -> term + arith_expr
1654
>>
arith_expr -> term + arith_expr
1654
==
arith_expr -> term + arith_expr
1654
&
arith_expr -> term + arith_expr
1654
>
arith_expr -> term + arith_expr
1654
!=
arith_expr -> term + arith_expr
1654
or
arith_expr -> term + arith_expr
1654
^
arith_expr -> term + arith_expr
1654
not
arith_expr -> term + arith_expr
1654
|
arith_expr -> term + arith_expr
1654
else
arith_expr -> term + arith_expr
1654
is
arith_expr -> term + arith_expr
1654
in
arith_expr -> term + arith_expr
1654
<<
arith_expr -> term + arith_expr
1654
<
arith_expr -> term + arith_expr
1654
and
arith_expr -> term + arith_expr
1655
and
atom -> [ test_list_comp ]
1655
<=
atom -> [ test_list_comp ]
1655
**
atom -> [ test_list_comp ]
1655
^
atom -> [ test_list_comp ]
1655
[
atom -> [ test_list_comp ]
1655
!=
atom -> [ test_list_comp ]
1655
<
atom -> [ test_list_comp ]
1655
/
atom -> [ test_list_comp ]
1655
-
atom -> [ test_list_comp ]
1655
>=
atom -> [ test_list_comp ]
1655
%
atom -> [ test_list_comp ]
1655
is
atom -> [ test_list_comp ]
1655
+
atom -> [ test_list_comp ]
1655
&
atom -> [ test_list_comp ]
1655
@
atom -> [ test_list_comp ]
1655
or
atom -> [ test_list_comp ]
1655
in
atom -> [ test_list_comp ]
1655
==
atom -> [ test_list_comp ]
1655
not
atom -> [ test_list_comp ]
1655
.
atom -> [ test_list_comp ]
1655
|
atom -> [ test_list_comp ]
1655
>
atom -> [ test_list_comp ]
1655
<<
atom -> [ test_list_comp ]
1655
//
atom -> [ test_list_comp ]
1655
(
atom -> [ test_list_comp ]
1655
*
atom -> [ test_list_comp ]
1655
else
atom -> [ test_list_comp ]
1655
>>
atom -> [ test_list_comp ]
1656
!=
and_expr -> shift_expr & and_expr
1656
<=
and_expr -> shift_expr & and_expr
1656
not
and_expr -> shift_expr & and_expr
1656
^
and_expr -> shift_expr & and_expr
1656
|
and_expr -> shift_expr & and_expr
1656
or
and_expr -> shift_expr & and_expr
1656
in
and_expr -> shift_expr & and_expr
1656
>
and_expr -> shift_expr & and_expr
1656
else
and_expr -> shift_expr & and_expr
1656
and
and_expr -> shift_expr & and_expr
1656
==
and_expr -> shift_expr & and_expr
1656
<
and_expr -> shift_expr & and_expr
1656
is
and_expr -> shift_expr & and_expr
1656
>=
and_expr -> shift_expr & and_expr
1657
^
shift_expr -> arith_expr << shift_expr
1657
|
shift_expr -> arith_expr << shift_expr
1657
&
shift_expr -> arith_expr << shift_expr
1657
and
shift_expr -> arith_expr << shift_expr
1657
==
shift_expr -> arith_expr << shift_expr
1657
is
shift_expr -> arith_expr << shift_expr
1657
in
shift_expr -> arith_expr << shift_expr
1657
<=
shift_expr -> arith_expr << shift_expr
1657
<
shift_expr -> arith_expr << shift_expr
1657
not
shift_expr -> arith_expr << shift_expr
1657
else
shift_expr -> arith_expr << shift_expr
1657
>=
shift_expr -> arith_expr << shift_expr
1657
>
shift_expr -> arith_expr << shift_expr
1657
or
shift_expr -> arith_expr << shift_expr
1657
!=
shift_expr -> arith_expr << shift_expr
1658
or
shift_expr -> arith_expr >> shift_expr
1658
and
shift_expr -> arith_expr >> shift_expr
1658
>=
shift_expr -> arith_expr >> shift_expr
1658
not
shift_expr -> arith_expr >> shift_expr
1658
^
shift_expr -> arith_expr >> shift_expr
1658
is
shift_expr -> arith_expr >> shift_expr
1658
in
shift_expr -> arith_expr >> shift_expr
1658
else
shift_expr -> arith_expr >> shift_expr
1658
<=
shift_expr -> arith_expr >> shift_expr
1658
==
shift_expr -> arith_expr >> shift_expr
1658
<
shift_expr -> arith_expr >> shift_expr
1658
!=
shift_expr -> arith_expr >> shift_expr
1658
|
shift_expr -> arith_expr >> shift_expr
1658
>
shift_expr -> arith_expr >> shift_expr
1658
&
shift_expr -> arith_expr >> shift_expr
1659
|
term -> factor * term
1659
-
term -> factor * term
1659
in
term -> factor * term
1659
and
term -> factor * term
1659
<<
term -> factor * term
1659
>=
term -> factor * term
1659
or
term -> factor * term
1659
<=
term -> factor * term
1659
is
term -> factor * term
1659
^
term -> factor * term
1659
!=
term -> factor * term
1659
else
term -> factor * term
1659
==
term -> factor * term
1659
&
term -> factor * term
1659
>
term -> factor * term
1659
not
term -> factor * term
1659
<
term -> factor * term
1659
+
term -> factor * term
1659
>>
term -> factor * term
1660
!=
term -> factor % term
1660
>>
term -> factor % term
1660
==
term -> factor % term
1660
>=
term -> factor % term
1660
^
term -> factor % term
1660
not
term -> factor % term
1660
or
term -> factor % term
1660
<=
term -> factor % term
1660
<
term -> factor % term
1660
is
term -> factor % term
1660
-
term -> factor % term
1660
in
term -> factor % term
1660
>
term -> factor % term
1660
<<
term -> factor % term
1660
and
term -> factor % term
1660
else
term -> factor % term
1660
|
term -> factor % term
1660
+
term -> factor % term
1660
&
term -> factor % term
1661
is
term -> factor // term
1661
else
term -> factor // term
1661
>
term -> factor // term
1661
==
term -> factor // term
1661
+
term -> factor // term
1661
^
term -> factor // term
1661
-
term -> factor // term
1661
in
term -> factor // term
1661
>>
term -> factor // term
1661
|
term -> factor // term
1661
<<
term -> factor // term
1661
!=
term -> factor // term
1661
&
term -> factor // term
1661
not
term -> factor // term
1661
<=
term -> factor // term
1661
<
term -> factor // term
1661
and
term -> factor // term
1661
>=
term -> factor // term
1661
or
term -> factor // term
1662
>=
term -> factor / term
1662
else
term -> factor / term
1662
!=
term -> factor / term
1662
not
term -> factor / term
1662
^
term -> factor / term
1662
in
term -> factor / term
1662
and
term -> factor / term
1662
<<
term -> factor / term
1662
+
term -> factor / term
1662
>
term -> factor / term
1662
|
term -> factor / term
1662
or
term -> factor / term
1662
>>
term -> factor / term
1662
<
term -> factor / term
1662
&
term -> factor / term
1662
-
term -> factor / term
1662
is
term -> factor / term
1662
==
term -> factor / term
1662
<=
term -> factor / term
1663
-
term -> factor @ term
1663
&
term -> factor @ term
1663
^
term -> factor @ term
1663
!=
term -> factor @ term
1663
<<
term -> factor @ term
1663
is
term -> factor @ term
1663
<=
term -> factor @ term
1663
and
term -> factor @ term
1663
+
term -> factor @ term
1663
==
term -> factor @ term
1663
else
term -> factor @ term
1663
>
term -> factor @ term
1663
not
term -> factor @ term
1663
>>
term -> factor @ term
1663
>=
term -> factor @ term
1663
|
term -> factor @ term
1663
in
term -> factor @ term
1663
<
term -> factor @ term
1663
or
term -> factor @ term
1664
else
comparison -> expr comp_op comparison
1664
or
comparison -> expr comp_op comparison
1664
and
comparison -> expr comp_op comparison
1665
>
expr -> xor_expr | expr
1665
is
expr -> xor_expr | expr
1665
<
expr -> xor_expr | expr
1665
>=
expr -> xor_expr | expr
1665
or
expr -> xor_expr | expr
1665
and
expr -> xor_expr | expr
1665
in
expr -> xor_expr | expr
1665
!=
expr -> xor_expr | expr
1665
<=
expr -> xor_expr | expr
1665
==
expr -> xor_expr | expr
1665
else
expr -> xor_expr | expr
1665
not
expr -> xor_expr | expr
1666
or
atom -> ( test_list_comp )
1666
*
atom -> ( test_list_comp )
1666
else
atom -> ( test_list_comp )
1666
|
atom -> ( test_list_comp )
1666
>>
atom -> ( test_list_comp )
1666
%
atom -> ( test_list_comp )
1666
not
atom -> ( test_list_comp )
1666
//
atom -> ( test_list_comp )
1666
+
atom -> ( test_list_comp )
1666
and
atom -> ( test_list_comp )
1666
>
atom -> ( test_list_comp )
1666
[
atom -> ( test_list_comp )
1666
^
atom -> ( test_list_comp )
1666
!=
atom -> ( test_list_comp )
1666
<<
atom -> ( test_list_comp )
1666
**
atom -> ( test_list_comp )
1666
is
atom -> ( test_list_comp )
1666
<=
atom -> ( test_list_comp )
1666
-
atom -> ( test_list_comp )
1666
&
atom -> ( test_list_comp )
1666
(
atom -> ( test_list_comp )
1666
in
atom -> ( test_list_comp )
1666
@
atom -> ( test_list_comp )
1666
.
atom -> ( test_list_comp )
1666
<
atom -> ( test_list_comp )
1666
/
atom -> ( test_list_comp )
1666
==
atom -> ( test_list_comp )
1666
>=
atom -> ( test_list_comp )
1667
]
2055
1668
)
2056
1669
<
trailer -> ( )
1669
.
trailer -> ( )
1669
*
trailer -> ( )
1669
or
trailer -> ( )
1669
is
trailer -> ( )
1669
/
trailer -> ( )
1669
+
trailer -> ( )
1669
@
trailer -> ( )
1669
>
trailer -> ( )
1669
//
trailer -> ( )
1669
|
trailer -> ( )
1669
!=
trailer -> ( )
1669
&
trailer -> ( )
1669
^
trailer -> ( )
1669
<=
trailer -> ( )
1669
%
trailer -> ( )
1669
>>
trailer -> ( )
1669
**
trailer -> ( )
1669
and
trailer -> ( )
1669
(
trailer -> ( )
1669
==
trailer -> ( )
1669
[
trailer -> ( )
1669
<<
trailer -> ( )
1669
else
trailer -> ( )
1669
in
trailer -> ( )
1669
-
trailer -> ( )
1669
not
trailer -> ( )
1669
>=
trailer -> ( )
1670
&
trailer_expr -> trailer trailer_expr
1670
not
trailer_expr -> trailer trailer_expr
1670
else
trailer_expr -> trailer trailer_expr
1670
and
trailer_expr -> trailer trailer_expr
1670
+
trailer_expr -> trailer trailer_expr
1670
==
trailer_expr -> trailer trailer_expr
1670
**
trailer_expr -> trailer trailer_expr
1670
/
trailer_expr -> trailer trailer_expr
1670
^
trailer_expr -> trailer trailer_expr
1670
>
trailer_expr -> trailer trailer_expr
1670
*
trailer_expr -> trailer trailer_expr
1670
//
trailer_expr -> trailer trailer_expr
1670
>>
trailer_expr -> trailer trailer_expr
1670
<<
trailer_expr -> trailer trailer_expr
1670
>=
trailer_expr -> trailer trailer_expr
1670
<=
trailer_expr -> trailer trailer_expr
1670
-
trailer_expr -> trailer trailer_expr
1670
is
trailer_expr -> trailer trailer_expr
1670
in
trailer_expr -> trailer trailer_expr
1670
<
trailer_expr -> trailer trailer_expr
1670
|
trailer_expr -> trailer trailer_expr
1670
%
trailer_expr -> trailer trailer_expr
1670
@
trailer_expr -> trailer trailer_expr
1670
!=
trailer_expr -> trailer trailer_expr
1670
or
trailer_expr -> trailer trailer_expr
1671
|
trailer -> . NAME
1671
@
trailer -> . NAME
1671
^
trailer -> . NAME
1671
>
trailer -> . NAME
1671
+
trailer -> . NAME
1671
.
trailer -> . NAME
1671
!=
trailer -> . NAME
1671
<<
trailer -> . NAME
1671
<=
trailer -> . NAME
1671
[
trailer -> . NAME
1671
*
trailer -> . NAME
1671
(
trailer -> . NAME
1671
//
trailer -> . NAME
1671
**
trailer -> . NAME
1671
-
trailer -> . NAME
1671
in
trailer -> . NAME
1671
>=
trailer -> . NAME
1671
==
trailer -> . NAME
1671
else
trailer -> . NAME
1671
or
trailer -> . NAME
1671
and
trailer -> . NAME
1671
%
trailer -> . NAME
1671
is
trailer -> . NAME
1671
<
trailer -> . NAME
1671
not
trailer -> . NAME
1671
/
trailer -> . NAME
1671
&
trailer -> . NAME
1671
>>
trailer -> . NAME
1672
or
and_test -> not_test and and_test
1672
else
and_test -> not_test and and_test
1673
else
or_test -> and_test or or_test
1674
)
lambdef -> lambda varargslist : test
1674
for
lambdef -> lambda varargslist : test
1674
,
lambdef -> lambda varargslist : test
1675
)
trailer -> [ subscriptlist ]
1675
*
trailer -> [ subscriptlist ]
1675
for
trailer -> [ subscriptlist ]
1675
not
trailer -> [ subscriptlist ]
1675
(
trailer -> [ subscriptlist ]
1675
<<
trailer -> [ subscriptlist ]
1675
,
trailer -> [ subscriptlist ]
1675
>>
trailer -> [ subscriptlist ]
1675
//
trailer -> [ subscriptlist ]
1675
or
trailer -> [ subscriptlist ]
1675
is
trailer -> [ subscriptlist ]
1675
[
trailer -> [ subscriptlist ]
1675
|
trailer -> [ subscriptlist ]
1675
%
trailer -> [ subscriptlist ]
1675
<=
trailer -> [ subscriptlist ]
1675
and
trailer -> [ subscriptlist ]
1675
**
trailer -> [ subscriptlist ]
1675
if
trailer -> [ subscriptlist ]
1675
-
trailer -> [ subscriptlist ]
1675
in
trailer -> [ subscriptlist ]
1675
^
trailer -> [ subscriptlist ]
1675
+
trailer -> [ subscriptlist ]
1675
>=
trailer -> [ subscriptlist ]
1675
.
trailer -> [ subscriptlist ]
1675
&
trailer -> [ subscriptlist ]
1675
/
trailer -> [ subscriptlist ]
1675
!=
trailer -> [ subscriptlist ]
1675
<
trailer -> [ subscriptlist ]
1675
==
trailer -> [ subscriptlist ]
1675
>
trailer -> [ subscriptlist ]
1675
@
trailer -> [ subscriptlist ]
1676
%
trailer -> ( arglist )
1676
and
trailer -> ( arglist )
1676
+
trailer -> ( arglist )
1676
or
trailer -> ( arglist )
1676
not
trailer -> ( arglist )
1676
-
trailer -> ( arglist )
1676
@
trailer -> ( arglist )
1676
[
trailer -> ( arglist )
1676
>>
trailer -> ( arglist )
1676
<=
trailer -> ( arglist )
1676
if
trailer -> ( arglist )
1676
//
trailer -> ( arglist )
1676
==
trailer -> ( arglist )
1676
<<
trailer -> ( arglist )
1676
*
trailer -> ( arglist )
1676
<
trailer -> ( arglist )
1676
**
trailer -> ( arglist )
1676
is
trailer -> ( arglist )
1676
>
trailer -> ( arglist )
1676
!=
trailer -> ( arglist )
1676
/
trailer -> ( arglist )
1676
for
trailer -> ( arglist )
1676
in
trailer -> ( arglist )
1676
.
trailer -> ( arglist )
1676
|
trailer -> ( arglist )
1676
)
trailer -> ( arglist )
1676
>=
trailer -> ( arglist )
1676
&
trailer -> ( arglist )
1676
(
trailer -> ( arglist )
1676
^
trailer -> ( arglist )
1676
,
trailer -> ( arglist )
1677
and_test
217
1677
atom_expr
218
1677
and_expr
219
1677
term
220
1677
factor
221
1677
shift_expr
222
1677
arith_expr
223
1677
NUMBER
224
1677
NAME
225
1677
not
226
1677
[
227
1677
{
228
1677
expr
229
1677
not_test
231
1677
False
232
1677
xor_expr
234
1677
STRING
235
1677
lambda
236
1677
atom
237
1677
+
238
1677
True
239
1677
-
240
1677
(
241
1677
None
242
1677
comparison
243
1677
power
244
1677
~
245
1677
test
2057
1677
or_test
246
1677
lambdef
248
1678
and_test
2058
1678
atom_expr
2059
1678
and_expr
2060
1678
term
2061
1678
factor
2062
1678
shift_expr
2063
1678
arith_expr
2064
1678
NUMBER
2065
1678
NAME
2066
1678
not
2067
1678
[
2068
1678
{
2069
1678
expr
2070
1678
False
2071
1678
xor_expr
2072
1678
STRING
2073
1678
+
2074
1678
True
2075
1678
-
2076
1678
(
2077
1678
None
2078
1678
comparison
2079
1678
power
2080
1678
atom
2081
1678
~
2082
1678
not_test
2083
1678
or_test
2084
1679
atom_expr
1182
1679
NUMBER
1188
1679
NAME
1189
1679
[
1190
1679
{
1191
1679
False
1194
1679
STRING
1197
1679
atom
1198
1679
+
1199
1679
True
1200
1679
(
1201
1679
None
1203
1679
-
1202
1679
power
1205
1679
~
1206
1679
factor
2085
1680
atom_expr
1182
1680
and_expr
1183
1680
term
1184
1680
factor
1185
1680
shift_expr
1186
1680
arith_expr
1187
1680
NUMBER
1188
1680
NAME
1189
1680
[
1190
1680
{
1191
1680
False
1194
1680
STRING
1197
1680
xor_expr
2086
1680
atom
1198
1680
+
1199
1680
True
1200
1680
(
1201
1680
None
1203
1680
-
1202
1680
power
1205
1680
~
1206
1681
atom_expr
1182
1681
factor
1185
1681
term
1184
1681
NUMBER
1188
1681
NAME
1189
1681
[
1190
1681
{
1191
1681
False
1194
1681
STRING
1197
1681
atom
1198
1681
+
1199
1681
True
1200
1681
(
1201
1681
None
1203
1681
-
1202
1681
arith_expr
2087
1681
power
1205
1681
~
1206
1682
atom_expr
1182
1682
factor
1185
1682
term
1184
1682
NUMBER
1188
1682
NAME
1189
1682
[
1190
1682
{
1191
1682
False
1194
1682
STRING
1197
1682
atom
1198
1682
+
1199
1682
True
1200
1682
(
1201
1682
None
1203
1682
-
1202
1682
arith_expr
2088
1682
power
1205
1682
~
1206
1683
atom_expr
1182
1683
factor
1185
1683
NUMBER
1188
1683
NAME
1189
1683
[
1190
1683
{
1191
1683
False
1194
1683
STRING
1197
1683
atom
1198
1683
+
1199
1683
term
2089
1683
True
1200
1683
(
1201
1683
None
1203
1683
-
1202
1683
power
1205
1683
~
1206
1684
atom_expr
1182
1684
factor
1185
1684
NUMBER
1188
1684
NAME
1189
1684
[
1190
1684
{
1191
1684
term
2090
1684
False
1194
1684
STRING
1197
1684
atom
1198
1684
+
1199
1684
True
1200
1684
(
1201
1684
None
1203
1684
-
1202
1684
power
1205
1684
~
1206
1685
atom_expr
1182
1685
factor
1185
1685
NUMBER
1188
1685
NAME
1189
1685
[
1190
1685
{
1191
1685
False
1194
1685
STRING
1197
1685
atom
1198
1685
+
1199
1685
term
2091
1685
True
1200
1685
(
1201
1685
None
1203
1685
-
1202
1685
power
1205
1685
~
1206
1686
atom_expr
1182
1686
factor
1185
1686
NUMBER
1188
1686
NAME
1189
1686
[
1190
1686
{
1191
1686
False
1194
1686
STRING
1197
1686
atom
1198
1686
+
1199
1686
True
1200
1686
(
1201
1686
None
1203
1686
-
1202
1686
term
2092
1686
power
1205
1686
~
1206
1687
atom_expr
1182
1687
term
2093
1687
factor
1185
1687
NUMBER
1188
1687
NAME
1189
1687
[
1190
1687
{
1191
1687
False
1194
1687
STRING
1197
1687
atom
1198
1687
+
1199
1687
True
1200
1687
(
1201
1687
None
1203
1687
-
1202
1687
power
1205
1687
~
1206
1688
atom_expr
1182
1688
factor
1185
1688
term
1184
1688
shift_expr
1186
1688
arith_expr
1187
1688
NUMBER
1188
1688
NAME
1189
1688
[
1190
1688
{
1191
1688
False
1194
1688
STRING
1197
1688
atom
1198
1688
+
1199
1688
True
1200
1688
(
1201
1688
None
1203
1688
-
1202
1688
power
1205
1688
~
1206
1688
and_expr
2094
1689
atom_expr
1182
1689
factor
1185
1689
term
1184
1689
arith_expr
1187
1689
NUMBER
1188
1689
NAME
1189
1689
[
1190
1689
{
1191
1689
False
1194
1689
STRING
1197
1689
atom
1198
1689
+
1199
1689
True
1200
1689
(
1201
1689
None
1203
1689
-
1202
1689
power
1205
1689
~
1206
1689
shift_expr
2095
1690
atom_expr
1182
1690
factor
1185
1690
term
1184
1690
arith_expr
1187
1690
NUMBER
1188
1690
NAME
1189
1690
[
1190
1690
{
1191
1690
False
1194
1690
STRING
1197
1690
atom
1198
1690
+
1199
1690
shift_expr
2096
1690
True
1200
1690
(
1201
1690
-
1202
1690
None
1203
1690
power
1205
1690
~
1206
1691
]
2097
1692
in
atom -> [ ]
1692
>=
atom -> [ ]
1692
%
atom -> [ ]
1692
:
atom -> [ ]
1692
is
atom -> [ ]
1692
^
atom -> [ ]
1692
//
atom -> [ ]
1692
or
atom -> [ ]
1692
not
atom -> [ ]
1692
[
atom -> [ ]
1692
and
atom -> [ ]
1692
/
atom -> [ ]
1692
!=
atom -> [ ]
1692
>
atom -> [ ]
1692
&
atom -> [ ]
1692
**
atom -> [ ]
1692
@
atom -> [ ]
1692
==
atom -> [ ]
1692
<<
atom -> [ ]
1692
if
atom -> [ ]
1692
<
atom -> [ ]
1692
,
atom -> [ ]
1692
(
atom -> [ ]
1692
<=
atom -> [ ]
1692
*
atom -> [ ]
1692
.
atom -> [ ]
1692
>>
atom -> [ ]
1692
|
atom -> [ ]
1692
-
atom -> [ ]
1692
+
atom -> [ ]
1693
<<
atom -> { }
1693
+
atom -> { }
1693
//
atom -> { }
1693
is
atom -> { }
1693
>=
atom -> { }
1693
<=
atom -> { }
1693
>
atom -> { }
1693
*
atom -> { }
1693
^
atom -> { }
1693
%
atom -> { }
1693
>>
atom -> { }
1693
:
atom -> { }
1693
.
atom -> { }
1693
not
atom -> { }
1693
==
atom -> { }
1693
if
atom -> { }
1693
in
atom -> { }
1693
<
atom -> { }
1693
|
atom -> { }
1693
(
atom -> { }
1693
/
atom -> { }
1693
and
atom -> { }
1693
**
atom -> { }
1693
@
atom -> { }
1693
-
atom -> { }
1693
&
atom -> { }
1693
,
atom -> { }
1693
!=
atom -> { }
1693
or
atom -> { }
1693
[
atom -> { }
1694
atom_expr
1182
1694
and_expr
1183
1694
term
1184
1694
factor
1185
1694
shift_expr
1186
1694
arith_expr
1187
1694
NUMBER
1188
1694
NAME
1189
1694
[
1190
1694
{
1191
1694
expr
1192
1694
False
1194
1694
xor_expr
1196
1694
STRING
1197
1694
comparison
2098
1694
atom
1198
1694
+
1199
1694
True
1200
1694
(
1201
1694
None
1203
1694
-
1202
1694
power
1205
1694
~
1206
1695
atom_expr
1182
1695
and_expr
1183
1695
term
1184
1695
factor
1185
1695
shift_expr
1186
1695
arith_expr
1187
1695
NUMBER
1188
1695
NAME
1189
1695
[
1190
1695
{
1191
1695
expr
1192
1695
not_test
1193
1695
False
1194
1695
xor_expr
1196
1695
STRING
1197
1695
atom
1198
1695
+
1199
1695
True
1200
1695
(
1201
1695
None
1203
1695
-
1202
1695
power
1205
1695
~
1206
1695
and_test
2099
1695
not
1208
1695
comparison
1209
1696
atom_expr
6
1696
factor
10
1696
[
3
1696
term
15
1696
STRING
43
1696
arith_expr
32
1696
NUMBER
8
1696
small_stmt
855
1696
NAME
37
1696
{
5
1696
expr
7
1696
not
51
1696
suite
2100
1696
True
9
1696
shift_expr
12
1696
atom
13
1696
xor_expr
14
1696
NEWLINE
856
1696
(
34
1696
None
29
1696
and_test
20
1696
and_expr
21
1696
False
23
1696
or_test
25
1696
test
33
1696
lambda
28
1696
+
30
1696
simple_stmt
857
1696
nonlocal
66
1696
-
36
1696
not_test
40
1696
power
47
1696
lambdef
41
1696
~
44
1696
comparison
48
1696
assert
67
1696
global_stmt
68
1696
continue
49
1696
expr_stmt
50
1696
test_list
62
1696
raise
69
1696
del_stmt
52
1696
yield_stmt
53
1696
raise_stmt
70
1696
yield
56
1696
assert_stmt
57
1696
global
71
1696
nonlocal_stmt
72
1696
break_stmt
58
1696
return_stmt
75
1696
return
59
1696
pass
60
1696
continue_stmt
61
1696
flow_stmt
76
1696
break
63
1696
del
64
1696
pass_stmt
65
1697
atom_expr
1182
1697
and_expr
1183
1697
term
1184
1697
factor
1185
1697
shift_expr
1186
1697
arith_expr
1187
1697
NUMBER
1188
1697
NAME
1189
1697
[
1190
1697
{
1191
1697
False
1194
1697
xor_expr
1196
1697
STRING
1197
1697
atom
1198
1697
+
1199
1697
True
1200
1697
(
1201
1697
None
1203
1697
-
1202
1697
expr
2101
1697
power
1205
1697
~
1206
1698
atom_expr
472
1698
and_expr
473
1698
term
474
1698
factor
475
1698
shift_expr
476
1698
arith_expr
477
1698
NUMBER
478
1698
NAME
479
1698
[
480
1698
{
481
1698
expr
482
1698
not_test
483
1698
False
484
1698
xor_expr
485
1698
atom
487
1698
STRING
488
1698
+
489
1698
(
490
1698
True
491
1698
-
492
1698
None
493
1698
subscriptlist
2102
1698
or_test
494
1698
and_test
495
1698
power
496
1698
~
497
1698
lambda
498
1698
:
maybe_test -> 
1698
maybe_test
499
1698
test
500
1698
not
501
1698
comparison
502
1698
lambdef
503
1698
subscript
504
1699
and_test
505
1699
atom_expr
506
1699
and_expr
507
1699
term
508
1699
factor
509
1699
shift_expr
510
1699
arith_expr
511
1699
NUMBER
512
1699
NAME
513
1699
not
514
1699
[
515
1699
{
516
1699
expr
517
1699
)
2103
1699
not_test
519
1699
False
520
1699
xor_expr
521
1699
STRING
522
1699
lambda
523
1699
arglist
2104
1699
atom
525
1699
+
526
1699
True
527
1699
-
528
1699
or_test
529
1699
(
530
1699
None
531
1699
comparison
532
1699
power
533
1699
test
534
1699
~
535
1699
*
536
1699
lambdef
537
1699
**
538
1699
argument
539
1700
NAME
2105
1701
trailer_expr
2106
1701
[
1698
1701
(
1699
1701
.
1700
1701
trailer
1701
1701
<<
trailer_expr -> 
1701
@
trailer_expr -> 
1701
!=
trailer_expr -> 
1701
-
trailer_expr -> 
1701
^
trailer_expr -> 
1701
<
trailer_expr -> 
1701
/
trailer_expr -> 
1701
is
trailer_expr -> 
1701
==
trailer_expr -> 
1701
&
trailer_expr -> 
1701
>=
trailer_expr -> 
1701
or
trailer_expr -> 
1701
in
trailer_expr -> 
1701
*
trailer_expr -> 
1701
not
trailer_expr -> 
1701
**
trailer_expr -> 
1701
<=
trailer_expr -> 
1701
+
trailer_expr -> 
1701
//
trailer_expr -> 
1701
%
trailer_expr -> 
1701
>
trailer_expr -> 
1701
:
trailer_expr -> 
1701
,
trailer_expr -> 
1701
|
trailer_expr -> 
1701
if
trailer_expr -> 
1701
and
trailer_expr -> 
1701
>>
trailer_expr -> 
1702
==
atom_expr -> atom trailer_expr
1702
%
atom_expr -> atom trailer_expr
1702
+
atom_expr -> atom trailer_expr
1702
:
atom_expr -> atom trailer_expr
1702
not
atom_expr -> atom trailer_expr
1702
or
atom_expr -> atom trailer_expr
1702
//
atom_expr -> atom trailer_expr
1702
and
atom_expr -> atom trailer_expr
1702
!=
atom_expr -> atom trailer_expr
1702
<<
atom_expr -> atom trailer_expr
1702
if
atom_expr -> atom trailer_expr
1702
-
atom_expr -> atom trailer_expr
1702
>>
atom_expr -> atom trailer_expr
1702
**
atom_expr -> atom trailer_expr
1702
/
atom_expr -> atom trailer_expr
1702
<
atom_expr -> atom trailer_expr
1702
in
atom_expr -> atom trailer_expr
1702
&
atom_expr -> atom trailer_expr
1702
is
atom_expr -> atom trailer_expr
1702
|
atom_expr -> atom trailer_expr
1702
>
atom_expr -> atom trailer_expr
1702
>=
atom_expr -> atom trailer_expr
1702
<=
atom_expr -> atom trailer_expr
1702
@
atom_expr -> atom trailer_expr
1702
*
atom_expr -> atom trailer_expr
1702
,
atom_expr -> atom trailer_expr
1702
^
atom_expr -> atom trailer_expr
1703
<<
factor -> + factor
1703
,
factor -> + factor
1703
&
factor -> + factor
1703
>
factor -> + factor
1703
if
factor -> + factor
1703
not
factor -> + factor
1703
+
factor -> + factor
1703
^
factor -> + factor
1703
==
factor -> + factor
1703
/
factor -> + factor
1703
|
factor -> + factor
1703
>=
factor -> + factor
1703
%
factor -> + factor
1703
<
factor -> + factor
1703
is
factor -> + factor
1703
or
factor -> + factor
1703
@
factor -> + factor
1703
//
factor -> + factor
1703
and
factor -> + factor
1703
-
factor -> + factor
1703
in
factor -> + factor
1703
*
factor -> + factor
1703
:
factor -> + factor
1703
!=
factor -> + factor
1703
>>
factor -> + factor
1703
<=
factor -> + factor
1704
)
2107
1705
>=
atom -> ( )
1705
>>
atom -> ( )
1705
not
atom -> ( )
1705
if
atom -> ( )
1705
&
atom -> ( )
1705
^
atom -> ( )
1705
.
atom -> ( )
1705
/
atom -> ( )
1705
in
atom -> ( )
1705
:
atom -> ( )
1705
>
atom -> ( )
1705
%
atom -> ( )
1705
(
atom -> ( )
1705
==
atom -> ( )
1705
,
atom -> ( )
1705
[
atom -> ( )
1705
<=
atom -> ( )
1705
+
atom -> ( )
1705
|
atom -> ( )
1705
-
atom -> ( )
1705
or
atom -> ( )
1705
@
atom -> ( )
1705
<<
atom -> ( )
1705
is
atom -> ( )
1705
**
atom -> ( )
1705
*
atom -> ( )
1705
and
atom -> ( )
1705
<
atom -> ( )
1705
!=
atom -> ( )
1705
//
atom -> ( )
1706
@
factor -> - factor
1706
^
factor -> - factor
1706
==
factor -> - factor
1706
in
factor -> - factor
1706
>>
factor -> - factor
1706
,
factor -> - factor
1706
//
factor -> - factor
1706
and
factor -> - factor
1706
:
factor -> - factor
1706
<=
factor -> - factor
1706
!=
factor -> - factor
1706
-
factor -> - factor
1706
&
factor -> - factor
1706
not
factor -> - factor
1706
>
factor -> - factor
1706
*
factor -> - factor
1706
%
factor -> - factor
1706
/
factor -> - factor
1706
<
factor -> - factor
1706
|
factor -> - factor
1706
+
factor -> - factor
1706
if
factor -> - factor
1706
<<
factor -> - factor
1706
is
factor -> - factor
1706
or
factor -> - factor
1706
>=
factor -> - factor
1707
atom_expr
1182
1707
and_expr
1183
1707
term
1184
1707
factor
1185
1707
shift_expr
1186
1707
arith_expr
1187
1707
NUMBER
1188
1707
NAME
1189
1707
[
1190
1707
{
1191
1707
expr
1192
1707
not_test
1193
1707
False
1194
1707
xor_expr
1196
1707
STRING
1197
1707
atom
1198
1707
+
1199
1707
True
1200
1707
(
1201
1707
None
1203
1707
-
1202
1707
and_test
1204
1707
power
1205
1707
~
1206
1707
or_test
2108
1707
not
1208
1707
comparison
1209
1708
<<
factor -> ~ factor
1708
in
factor -> ~ factor
1708
<=
factor -> ~ factor
1708
if
factor -> ~ factor
1708
|
factor -> ~ factor
1708
<
factor -> ~ factor
1708
>>
factor -> ~ factor
1708
==
factor -> ~ factor
1708
>=
factor -> ~ factor
1708
!=
factor -> ~ factor
1708
,
factor -> ~ factor
1708
//
factor -> ~ factor
1708
*
factor -> ~ factor
1708
/
factor -> ~ factor
1708
+
factor -> ~ factor
1708
is
factor -> ~ factor
1708
not
factor -> ~ factor
1708
and
factor -> ~ factor
1708
^
factor -> ~ factor
1708
@
factor -> ~ factor
1708
:
factor -> ~ factor
1708
>
factor -> ~ factor
1708
-
factor -> ~ factor
1708
or
factor -> ~ factor
1708
&
factor -> ~ factor
1708
%
factor -> ~ factor
1709
:
2109
1710
atom_expr
1182
1710
and_expr
1183
1710
term
1184
1710
factor
1185
1710
shift_expr
1186
1710
arith_expr
1187
1710
NUMBER
1188
1710
NAME
1189
1710
[
1190
1710
{
1191
1710
expr
1192
1710
not_test
1193
1710
False
1194
1710
xor_expr
1196
1710
STRING
1197
1710
atom
1198
1710
+
1199
1710
True
1200
1710
(
1201
1710
None
1203
1710
-
1202
1710
and_test
1204
1710
power
1205
1710
~
1206
1710
test
2110
1710
lambda
1207
1710
not
1208
1710
comparison
1209
1710
lambdef
1211
1710
or_test
1212
1711
if
not_test -> not not_test
1711
:
not_test -> not not_test
1711
,
not_test -> not not_test
1711
or
not_test -> not not_test
1711
and
not_test -> not not_test
1712
atom_expr
1182
1712
and_expr
1183
1712
term
1184
1712
factor
1185
1712
shift_expr
1186
1712
arith_expr
1187
1712
NUMBER
1188
1712
NAME
1189
1712
[
1190
1712
{
1191
1712
expr
1192
1712
not_test
1193
1712
False
1194
1712
xor_expr
1196
1712
STRING
1197
1712
atom
1198
1712
+
1199
1712
True
1200
1712
(
1201
1712
None
1203
1712
-
1202
1712
and_test
1204
1712
power
1205
1712
~
1206
1712
lambda
1207
1712
not
1208
1712
comparison
1209
1712
test
1210
1712
lambdef
1211
1712
test_list
2111
1712
or_test
1212
1713
atom_expr
590
1713
and_expr
591
1713
term
592
1713
[
593
1713
shift_expr
594
1713
arith_expr
595
1713
NUMBER
596
1713
NAME
597
1713
factor
598
1713
{
599
1713
expr
600
1713
False
601
1713
xor_expr
602
1713
STRING
603
1713
+
604
1713
True
605
1713
-
606
1713
(
607
1713
None
608
1713
atom
609
1713
power
610
1713
~
611
1713
not_test
612
1713
or_test
2112
1713
not
613
1713
comparison
614
1713
and_test
615
1714
<<
trailer -> [ subscriptlist ]
1714
|
trailer -> [ subscriptlist ]
1714
%
trailer -> [ subscriptlist ]
1714
in
trailer -> [ subscriptlist ]
1714
,
trailer -> [ subscriptlist ]
1714
*
trailer -> [ subscriptlist ]
1714
(
trailer -> [ subscriptlist ]
1714
.
trailer -> [ subscriptlist ]
1714
>>
trailer -> [ subscriptlist ]
1714
//
trailer -> [ subscriptlist ]
1714
**
trailer -> [ subscriptlist ]
1714
&
trailer -> [ subscriptlist ]
1714
/
trailer -> [ subscriptlist ]
1714
-
trailer -> [ subscriptlist ]
1714
+
trailer -> [ subscriptlist ]
1714
[
trailer -> [ subscriptlist ]
1714
^
trailer -> [ subscriptlist ]
1714
@
trailer -> [ subscriptlist ]
1715
[
trailer -> ( arglist )
1715
>>
trailer -> ( arglist )
1715
/
trailer -> ( arglist )
1715
%
trailer -> ( arglist )
1715
+
trailer -> ( arglist )
1715
//
trailer -> ( arglist )
1715
<<
trailer -> ( arglist )
1715
*
trailer -> ( arglist )
1715
in
trailer -> ( arglist )
1715
**
trailer -> ( arglist )
1715
&
trailer -> ( arglist )
1715
.
trailer -> ( arglist )
1715
-
trailer -> ( arglist )
1715
@
trailer -> ( arglist )
1715
(
trailer -> ( arglist )
1715
^
trailer -> ( arglist )
1715
|
trailer -> ( arglist )
1715
,
trailer -> ( arglist )
1716
NEWLINE
2113
1717
@
decorator -> @ dotted_name ( ) NEWLINE
1717
class
decorator -> @ dotted_name ( ) NEWLINE
1717
def
decorator -> @ dotted_name ( ) NEWLINE
1718
<<
trailer -> [ subscriptlist ]
1718
,
trailer -> [ subscriptlist ]
1718
%
trailer -> [ subscriptlist ]
1718
|
trailer -> [ subscriptlist ]
1718
*
trailer -> [ subscriptlist ]
1718
(
trailer -> [ subscriptlist ]
1718
.
trailer -> [ subscriptlist ]
1718
>>
trailer -> [ subscriptlist ]
1718
//
trailer -> [ subscriptlist ]
1718
**
trailer -> [ subscriptlist ]
1718
NEWLINE
trailer -> [ subscriptlist ]
1718
&
trailer -> [ subscriptlist ]
1718
/
trailer -> [ subscriptlist ]
1718
-
trailer -> [ subscriptlist ]
1718
+
trailer -> [ subscriptlist ]
1718
[
trailer -> [ subscriptlist ]
1718
^
trailer -> [ subscriptlist ]
1718
@
trailer -> [ subscriptlist ]
1719
[
trailer -> ( arglist )
1719
>>
trailer -> ( arglist )
1719
/
trailer -> ( arglist )
1719
%
trailer -> ( arglist )
1719
+
trailer -> ( arglist )
1719
//
trailer -> ( arglist )
1719
NEWLINE
trailer -> ( arglist )
1719
<<
trailer -> ( arglist )
1719
*
trailer -> ( arglist )
1719
**
trailer -> ( arglist )
1719
&
trailer -> ( arglist )
1719
.
trailer -> ( arglist )
1719
-
trailer -> ( arglist )
1719
@
trailer -> ( arglist )
1719
(
trailer -> ( arglist )
1719
^
trailer -> ( arglist )
1719
|
trailer -> ( arglist )
1719
,
trailer -> ( arglist )
1720
*
power -> atom_expr ** factor
1720
in
power -> atom_expr ** factor
1720
<
power -> atom_expr ** factor
1720
if
power -> atom_expr ** factor
1720
-
power -> atom_expr ** factor
1720
>>
power -> atom_expr ** factor
1720
<=
power -> atom_expr ** factor
1720
and
power -> atom_expr ** factor
1720
==
power -> atom_expr ** factor
1720
NEWLINE
power -> atom_expr ** factor
1720
%
power -> atom_expr ** factor
1720
=
power -> atom_expr ** factor
1720
/
power -> atom_expr ** factor
1720
^
power -> atom_expr ** factor
1720
<<
power -> atom_expr ** factor
1720
,
power -> atom_expr ** factor
1720
>
power -> atom_expr ** factor
1720
//
power -> atom_expr ** factor
1720
is
power -> atom_expr ** factor
1720
@
power -> atom_expr ** factor
1720
+
power -> atom_expr ** factor
1720
|
power -> atom_expr ** factor
1720
!=
power -> atom_expr ** factor
1720
>=
power -> atom_expr ** factor
1720
or
power -> atom_expr ** factor
1720
&
power -> atom_expr ** factor
1720
not
power -> atom_expr ** factor
1721
and
xor_expr -> and_expr ^ xor_expr
1721
<
xor_expr -> and_expr ^ xor_expr
1721
>
xor_expr -> and_expr ^ xor_expr
1721
in
xor_expr -> and_expr ^ xor_expr
1721
|
xor_expr -> and_expr ^ xor_expr
1721
<=
xor_expr -> and_expr ^ xor_expr
1721
NEWLINE
xor_expr -> and_expr ^ xor_expr
1721
=
xor_expr -> and_expr ^ xor_expr
1721
!=
xor_expr -> and_expr ^ xor_expr
1721
not
xor_expr -> and_expr ^ xor_expr
1721
or
xor_expr -> and_expr ^ xor_expr
1721
if
xor_expr -> and_expr ^ xor_expr
1721
is
xor_expr -> and_expr ^ xor_expr
1721
==
xor_expr -> and_expr ^ xor_expr
1721
,
xor_expr -> and_expr ^ xor_expr
1721
>=
xor_expr -> and_expr ^ xor_expr
1722
<=
arith_expr -> term + arith_expr
1722
NEWLINE
arith_expr -> term + arith_expr
1722
&
arith_expr -> term + arith_expr
1722
>
arith_expr -> term + arith_expr
1722
,
arith_expr -> term + arith_expr
1722
>=
arith_expr -> term + arith_expr
1722
not
arith_expr -> term + arith_expr
1722
|
arith_expr -> term + arith_expr
1722
in
arith_expr -> term + arith_expr
1722
if
arith_expr -> term + arith_expr
1722
>>
arith_expr -> term + arith_expr
1722
is
arith_expr -> term + arith_expr
1722
^
arith_expr -> term + arith_expr
1722
<<
arith_expr -> term + arith_expr
1722
<
arith_expr -> term + arith_expr
1722
==
arith_expr -> term + arith_expr
1722
!=
arith_expr -> term + arith_expr
1722
or
arith_expr -> term + arith_expr
1722
=
arith_expr -> term + arith_expr
1722
and
arith_expr -> term + arith_expr
1723
<=
arith_expr -> term - arith_expr
1723
if
arith_expr -> term - arith_expr
1723
not
arith_expr -> term - arith_expr
1723
|
arith_expr -> term - arith_expr
1723
,
arith_expr -> term - arith_expr
1723
>>
arith_expr -> term - arith_expr
1723
NEWLINE
arith_expr -> term - arith_expr
1723
>=
arith_expr -> term - arith_expr
1723
<<
arith_expr -> term - arith_expr
1723
=
arith_expr -> term - arith_expr
1723
is
arith_expr -> term - arith_expr
1723
!=
arith_expr -> term - arith_expr
1723
in
arith_expr -> term - arith_expr
1723
<
arith_expr -> term - arith_expr
1723
or
arith_expr -> term - arith_expr
1723
==
arith_expr -> term - arith_expr
1723
and
arith_expr -> term - arith_expr
1723
&
arith_expr -> term - arith_expr
1723
^
arith_expr -> term - arith_expr
1723
>
arith_expr -> term - arith_expr
1724
>=
term -> factor / term
1724
!=
term -> factor / term
1724
not
term -> factor / term
1724
^
term -> factor / term
1724
in
term -> factor / term
1724
and
term -> factor / term
1724
<<
term -> factor / term
1724
,
term -> factor / term
1724
+
term -> factor / term
1724
>
term -> factor / term
1724
|
term -> factor / term
1724
or
term -> factor / term
1724
if
term -> factor / term
1724
>>
term -> factor / term
1724
NEWLINE
term -> factor / term
1724
<
term -> factor / term
1724
&
term -> factor / term
1724
-
term -> factor / term
1724
is
term -> factor / term
1724
==
term -> factor / term
1724
<=
term -> factor / term
1724
=
term -> factor / term
1725
|
term -> factor * term
1725
-
term -> factor * term
1725
in
term -> factor * term
1725
and
term -> factor * term
1725
NEWLINE
term -> factor * term
1725
<<
term -> factor * term
1725
>=
term -> factor * term
1725
if
term -> factor * term
1725
or
term -> factor * term
1725
<=
term -> factor * term
1725
is
term -> factor * term
1725
^
term -> factor * term
1725
!=
term -> factor * term
1725
=
term -> factor * term
1725
==
term -> factor * term
1725
,
term -> factor * term
1725
&
term -> factor * term
1725
>
term -> factor * term
1725
not
term -> factor * term
1725
<
term -> factor * term
1725
+
term -> factor * term
1725
>>
term -> factor * term
1726
!=
term -> factor % term
1726
>>
term -> factor % term
1726
==
term -> factor % term
1726
>=
term -> factor % term
1726
,
term -> factor % term
1726
^
term -> factor % term
1726
not
term -> factor % term
1726
or
term -> factor % term
1726
if
term -> factor % term
1726
<=
term -> factor % term
1726
<
term -> factor % term
1726
is
term -> factor % term
1726
-
term -> factor % term
1726
=
term -> factor % term
1726
in
term -> factor % term
1726
>
term -> factor % term
1726
<<
term -> factor % term
1726
and
term -> factor % term
1726
NEWLINE
term -> factor % term
1726
|
term -> factor % term
1726
+
term -> factor % term
1726
&
term -> factor % term
1727
is
term -> factor // term
1727
if
term -> factor // term
1727
>
term -> factor // term
1727
==
term -> factor // term
1727
+
term -> factor // term
1727
^
term -> factor // term
1727
-
term -> factor // term
1727
,
term -> factor // term
1727
in
term -> factor // term
1727
>>
term -> factor // term
1727
NEWLINE
term -> factor // term
1727
|
term -> factor // term
1727
=
term -> factor // term
1727
<<
term -> factor // term
1727
!=
term -> factor // term
1727
&
term -> factor // term
1727
not
term -> factor // term
1727
<=
term -> factor // term
1727
<
term -> factor // term
1727
and
term -> factor // term
1727
>=
term -> factor // term
1727
or
term -> factor // term
1728
=
term -> factor @ term
1728
-
term -> factor @ term
1728
&
term -> factor @ term
1728
^
term -> factor @ term
1728
NEWLINE
term -> factor @ term
1728
<
term -> factor @ term
1728
!=
term -> factor @ term
1728
<<
term -> factor @ term
1728
is
term -> factor @ term
1728
<=
term -> factor @ term
1728
and
term -> factor @ term
1728
+
term -> factor @ term
1728
,
term -> factor @ term
1728
>
term -> factor @ term
1728
if
term -> factor @ term
1728
not
term -> factor @ term
1728
>>
term -> factor @ term
1728
>=
term -> factor @ term
1728
|
term -> factor @ term
1728
in
term -> factor @ term
1728
==
term -> factor @ term
1728
or
term -> factor @ term
1729
if
and_expr -> shift_expr & and_expr
1729
!=
and_expr -> shift_expr & and_expr
1729
<=
and_expr -> shift_expr & and_expr
1729
not
and_expr -> shift_expr & and_expr
1729
,
and_expr -> shift_expr & and_expr
1729
=
and_expr -> shift_expr & and_expr
1729
^
and_expr -> shift_expr & and_expr
1729
|
and_expr -> shift_expr & and_expr
1729
or
and_expr -> shift_expr & and_expr
1729
in
and_expr -> shift_expr & and_expr
1729
>
and_expr -> shift_expr & and_expr
1729
and
and_expr -> shift_expr & and_expr
1729
==
and_expr -> shift_expr & and_expr
1729
NEWLINE
and_expr -> shift_expr & and_expr
1729
<
and_expr -> shift_expr & and_expr
1729
is
and_expr -> shift_expr & and_expr
1729
>=
and_expr -> shift_expr & and_expr
1730
,
shift_expr -> arith_expr << shift_expr
1730
NEWLINE
shift_expr -> arith_expr << shift_expr
1730
^
shift_expr -> arith_expr << shift_expr
1730
|
shift_expr -> arith_expr << shift_expr
1730
&
shift_expr -> arith_expr << shift_expr
1730
and
shift_expr -> arith_expr << shift_expr
1730
is
shift_expr -> arith_expr << shift_expr
1730
in
shift_expr -> arith_expr << shift_expr
1730
<=
shift_expr -> arith_expr << shift_expr
1730
<
shift_expr -> arith_expr << shift_expr
1730
not
shift_expr -> arith_expr << shift_expr
1730
==
shift_expr -> arith_expr << shift_expr
1730
>=
shift_expr -> arith_expr << shift_expr
1730
if
shift_expr -> arith_expr << shift_expr
1730
>
shift_expr -> arith_expr << shift_expr
1730
=
shift_expr -> arith_expr << shift_expr
1730
or
shift_expr -> arith_expr << shift_expr
1730
!=
shift_expr -> arith_expr << shift_expr
1731
or
shift_expr -> arith_expr >> shift_expr
1731
and
shift_expr -> arith_expr >> shift_expr
1731
>=
shift_expr -> arith_expr >> shift_expr
1731
NEWLINE
shift_expr -> arith_expr >> shift_expr
1731
not
shift_expr -> arith_expr >> shift_expr
1731
^
shift_expr -> arith_expr >> shift_expr
1731
is
shift_expr -> arith_expr >> shift_expr
1731
if
shift_expr -> arith_expr >> shift_expr
1731
in
shift_expr -> arith_expr >> shift_expr
1731
<=
shift_expr -> arith_expr >> shift_expr
1731
=
shift_expr -> arith_expr >> shift_expr
1731
==
shift_expr -> arith_expr >> shift_expr
1731
,
shift_expr -> arith_expr >> shift_expr
1731
<
shift_expr -> arith_expr >> shift_expr
1731
!=
shift_expr -> arith_expr >> shift_expr
1731
|
shift_expr -> arith_expr >> shift_expr
1731
>
shift_expr -> arith_expr >> shift_expr
1731
&
shift_expr -> arith_expr >> shift_expr
1732
and
atom -> [ test_list_comp ]
1732
<=
atom -> [ test_list_comp ]
1732
**
atom -> [ test_list_comp ]
1732
^
atom -> [ test_list_comp ]
1732
NEWLINE
atom -> [ test_list_comp ]
1732
[
atom -> [ test_list_comp ]
1732
,
atom -> [ test_list_comp ]
1732
!=
atom -> [ test_list_comp ]
1732
<
atom -> [ test_list_comp ]
1732
/
atom -> [ test_list_comp ]
1732
-
atom -> [ test_list_comp ]
1732
>=
atom -> [ test_list_comp ]
1732
if
atom -> [ test_list_comp ]
1732
%
atom -> [ test_list_comp ]
1732
is
atom -> [ test_list_comp ]
1732
+
atom -> [ test_list_comp ]
1732
&
atom -> [ test_list_comp ]
1732
@
atom -> [ test_list_comp ]
1732
or
atom -> [ test_list_comp ]
1732
in
atom -> [ test_list_comp ]
1732
==
atom -> [ test_list_comp ]
1732
not
atom -> [ test_list_comp ]
1732
.
atom -> [ test_list_comp ]
1732
|
atom -> [ test_list_comp ]
1732
=
atom -> [ test_list_comp ]
1732
>
atom -> [ test_list_comp ]
1732
<<
atom -> [ test_list_comp ]
1732
//
atom -> [ test_list_comp ]
1732
(
atom -> [ test_list_comp ]
1732
*
atom -> [ test_list_comp ]
1732
>>
atom -> [ test_list_comp ]
1733
if
comparison -> expr comp_op comparison
1733
or
comparison -> expr comp_op comparison
1733
NEWLINE
comparison -> expr comp_op comparison
1733
and
comparison -> expr comp_op comparison
1733
=
comparison -> expr comp_op comparison
1733
,
comparison -> expr comp_op comparison
1734
,
and_test -> not_test and and_test
1734
or
and_test -> not_test and and_test
1734
NEWLINE
and_test -> not_test and and_test
1734
=
and_test -> not_test and and_test
1734
if
and_test -> not_test and and_test
1735
NEWLINE
expr -> xor_expr | expr
1735
>
expr -> xor_expr | expr
1735
is
expr -> xor_expr | expr
1735
<
expr -> xor_expr | expr
1735
if
expr -> xor_expr | expr
1735
>=
expr -> xor_expr | expr
1735
or
expr -> xor_expr | expr
1735
and
expr -> xor_expr | expr
1735
in
expr -> xor_expr | expr
1735
!=
expr -> xor_expr | expr
1735
<=
expr -> xor_expr | expr
1735
==
expr -> xor_expr | expr
1735
=
expr -> xor_expr | expr
1735
,
expr -> xor_expr | expr
1735
not
expr -> xor_expr | expr
1736
**
2114
1736
!=
power -> atom_expr
1736
|
power -> atom_expr
1736
>
power -> atom_expr
1736
/
power -> atom_expr
1736
^
power -> atom_expr
1736
&
power -> atom_expr
1736
=
power -> atom_expr
1736
<
power -> atom_expr
1736
not
power -> atom_expr
1736
NEWLINE
power -> atom_expr
1736
<=
power -> atom_expr
1736
%
power -> atom_expr
1736
and
power -> atom_expr
1736
*
power -> atom_expr
1736
@
power -> atom_expr
1736
>>
power -> atom_expr
1736
if
power -> atom_expr
1736
+
power -> atom_expr
1736
in
power -> atom_expr
1736
is
power -> atom_expr
1736
//
power -> atom_expr
1736
or
power -> atom_expr
1736
<<
power -> atom_expr
1736
-
power -> atom_expr
1736
==
power -> atom_expr
1736
>=
power -> atom_expr
1737
^
2115
1737
not
xor_expr -> and_expr
1737
=
xor_expr -> and_expr
1737
>=
xor_expr -> and_expr
1737
and
xor_expr -> and_expr
1737
is
xor_expr -> and_expr
1737
or
xor_expr -> and_expr
1737
|
xor_expr -> and_expr
1737
in
xor_expr -> and_expr
1737
==
xor_expr -> and_expr
1737
>
xor_expr -> and_expr
1737
<
xor_expr -> and_expr
1737
if
xor_expr -> and_expr
1737
<=
xor_expr -> and_expr
1737
!=
xor_expr -> and_expr
1737
NEWLINE
xor_expr -> and_expr
1738
+
2116
1738
in
arith_expr -> term
1738
if
arith_expr -> term
1738
|
arith_expr -> term
1738
==
arith_expr -> term
1738
<
arith_expr -> term
1738
-
2117
1738
<=
arith_expr -> term
1738
^
arith_expr -> term
1738
is
arith_expr -> term
1738
>>
arith_expr -> term
1738
or
arith_expr -> term
1738
&
arith_expr -> term
1738
>
arith_expr -> term
1738
>=
arith_expr -> term
1738
<<
arith_expr -> term
1738
and
arith_expr -> term
1738
NEWLINE
arith_expr -> term
1738
not
arith_expr -> term
1738
!=
arith_expr -> term
1738
=
arith_expr -> term
1739
/
2118
1739
*
2119
1739
%
2120
1739
//
2121
1739
and
term -> factor
1739
==
term -> factor
1739
@
2122
1739
>=
term -> factor
1739
+
term -> factor
1739
<=
term -> factor
1739
or
term -> factor
1739
<<
term -> factor
1739
not
term -> factor
1739
<
term -> factor
1739
-
term -> factor
1739
=
term -> factor
1739
in
term -> factor
1739
!=
term -> factor
1739
is
term -> factor
1739
>>
term -> factor
1739
NEWLINE
term -> factor
1739
^
term -> factor
1739
|
term -> factor
1739
>
term -> factor
1739
if
term -> factor
1739
&
term -> factor
1740
if
and_expr -> shift_expr
1740
&
2123
1740
in
and_expr -> shift_expr
1740
is
and_expr -> shift_expr
1740
|
and_expr -> shift_expr
1740
>=
and_expr -> shift_expr
1740
<
and_expr -> shift_expr
1740
!=
and_expr -> shift_expr
1740
and
and_expr -> shift_expr
1740
not
and_expr -> shift_expr
1740
or
and_expr -> shift_expr
1740
=
and_expr -> shift_expr
1740
==
and_expr -> shift_expr
1740
<=
and_expr -> shift_expr
1740
^
and_expr -> shift_expr
1740
>
and_expr -> shift_expr
1740
NEWLINE
and_expr -> shift_expr
1741
<<
2124
1741
>>
2125
1741
<
shift_expr -> arith_expr
1741
>
shift_expr -> arith_expr
1741
&
shift_expr -> arith_expr
1741
and
shift_expr -> arith_expr
1741
=
shift_expr -> arith_expr
1741
in
shift_expr -> arith_expr
1741
!=
shift_expr -> arith_expr
1741
|
shift_expr -> arith_expr
1741
if
shift_expr -> arith_expr
1741
not
shift_expr -> arith_expr
1741
<=
shift_expr -> arith_expr
1741
is
shift_expr -> arith_expr
1741
==
shift_expr -> arith_expr
1741
or
shift_expr -> arith_expr
1741
NEWLINE
shift_expr -> arith_expr
1741
>=
shift_expr -> arith_expr
1741
^
shift_expr -> arith_expr
1742
==
atom -> NUMBER
1742
<=
atom -> NUMBER
1742
<<
atom -> NUMBER
1742
/
atom -> NUMBER
1742
^
atom -> NUMBER
1742
if
atom -> NUMBER
1742
.
atom -> NUMBER
1742
or
atom -> NUMBER
1742
**
atom -> NUMBER
1742
+
atom -> NUMBER
1742
%
atom -> NUMBER
1742
-
atom -> NUMBER
1742
&
atom -> NUMBER
1742
@
atom -> NUMBER
1742
*
atom -> NUMBER
1742
>>
atom -> NUMBER
1742
=
atom -> NUMBER
1742
<
atom -> NUMBER
1742
is
atom -> NUMBER
1742
(
atom -> NUMBER
1742
and
atom -> NUMBER
1742
not
atom -> NUMBER
1742
!=
atom -> NUMBER
1742
|
atom -> NUMBER
1742
in
atom -> NUMBER
1742
>
atom -> NUMBER
1742
NEWLINE
atom -> NUMBER
1742
>=
atom -> NUMBER
1742
//
atom -> NUMBER
1742
[
atom -> NUMBER
1743
or
atom -> NAME
1743
in
atom -> NAME
1743
^
atom -> NAME
1743
[
atom -> NAME
1743
==
atom -> NAME
1743
<<
atom -> NAME
1743
**
atom -> NAME
1743
NEWLINE
atom -> NAME
1743
!=
atom -> NAME
1743
%
atom -> NAME
1743
@
atom -> NAME
1743
not
atom -> NAME
1743
>
atom -> NAME
1743
>=
atom -> NAME
1743
*
atom -> NAME
1743
&
atom -> NAME
1743
<
atom -> NAME
1743
-
atom -> NAME
1743
(
atom -> NAME
1743
>>
atom -> NAME
1743
+
atom -> NAME
1743
=
atom -> NAME
1743
//
atom -> NAME
1743
and
atom -> NAME
1743
<=
atom -> NAME
1743
is
atom -> NAME
1743
if
atom -> NAME
1743
/
atom -> NAME
1743
.
atom -> NAME
1743
|
atom -> NAME
1744
and_test
110
1744
atom_expr
111
1744
and_expr
112
1744
term
113
1744
factor
114
1744
shift_expr
115
1744
arith_expr
116
1744
NUMBER
117
1744
NAME
118
1744
[
119
1744
test_list_comp
2126
1744
{
121
1744
expr
122
1744
not_test
123
1744
False
124
1744
xor_expr
125
1744
atom
126
1744
STRING
127
1744
+
128
1744
(
129
1744
True
131
1744
-
132
1744
]
2127
1744
None
133
1744
comparison
134
1744
or_test
135
1744
test
136
1744
power
137
1744
~
138
1744
lambda
139
1744
lambdef
140
1744
not
141
1744
test_list
142
1745
}
2128
1746
in
147
1746
<
148
1746
>=
149
1746
not
150
1746
comp_op
2129
1746
!=
151
1746
>
152
1746
==
153
1746
is
154
1746
<=
155
1746
=
comparison -> expr
1746
NEWLINE
comparison -> expr
1746
or
comparison -> expr
1746
and
comparison -> expr
1746
if
comparison -> expr
1747
*
atom -> False
1747
@
atom -> False
1747
<
atom -> False
1747
or
atom -> False
1747
is
atom -> False
1747
>>
atom -> False
1747
[
atom -> False
1747
/
atom -> False
1747
%
atom -> False
1747
.
atom -> False
1747
(
atom -> False
1747
in
atom -> False
1747
**
atom -> False
1747
==
atom -> False
1747
//
atom -> False
1747
+
atom -> False
1747
=
atom -> False
1747
<<
atom -> False
1747
NEWLINE
atom -> False
1747
!=
atom -> False
1747
<=
atom -> False
1747
>
atom -> False
1747
^
atom -> False
1747
if
atom -> False
1747
&
atom -> False
1747
and
atom -> False
1747
|
atom -> False
1747
-
atom -> False
1747
not
atom -> False
1747
>=
atom -> False
1748
not
expr -> xor_expr
1748
=
expr -> xor_expr
1748
|
2130
1748
==
expr -> xor_expr
1748
in
expr -> xor_expr
1748
if
expr -> xor_expr
1748
>
expr -> xor_expr
1748
or
expr -> xor_expr
1748
NEWLINE
expr -> xor_expr
1748
<=
expr -> xor_expr
1748
<
expr -> xor_expr
1748
is
expr -> xor_expr
1748
>=
expr -> xor_expr
1748
!=
expr -> xor_expr
1748
and
expr -> xor_expr
1749
&
atom -> STRING
1749
**
atom -> STRING
1749
%
atom -> STRING
1749
NEWLINE
atom -> STRING
1749
@
atom -> STRING
1749
/
atom -> STRING
1749
*
atom -> STRING
1749
^
atom -> STRING
1749
>=
atom -> STRING
1749
if
atom -> STRING
1749
<
atom -> STRING
1749
>>
atom -> STRING
1749
.
atom -> STRING
1749
//
atom -> STRING
1749
+
atom -> STRING
1749
=
atom -> STRING
1749
<<
atom -> STRING
1749
and
atom -> STRING
1749
[
atom -> STRING
1749
or
atom -> STRING
1749
in
atom -> STRING
1749
not
atom -> STRING
1749
>
atom -> STRING
1749
(
atom -> STRING
1749
!=
atom -> STRING
1749
is
atom -> STRING
1749
==
atom -> STRING
1749
-
atom -> STRING
1749
|
atom -> STRING
1749
<=
atom -> STRING
1750
atom_expr
1736
1750
NUMBER
1742
1750
NAME
1743
1750
[
1744
1750
{
1745
1750
False
1747
1750
STRING
1749
1750
+
1750
1750
True
1751
1750
-
1752
1750
(
1755
1750
None
1756
1750
atom
1758
1750
factor
2131
1750
power
1759
1750
~
1760
1751
!=
atom -> True
1751
is
atom -> True
1751
//
atom -> True
1751
|
atom -> True
1751
<=
atom -> True
1751
^
atom -> True
1751
%
atom -> True
1751
@
atom -> True
1751
**
atom -> True
1751
(
atom -> True
1751
NEWLINE
atom -> True
1751
not
atom -> True
1751
>>
atom -> True
1751
<
atom -> True
1751
==
atom -> True
1751
and
atom -> True
1751
=
atom -> True
1751
in
atom -> True
1751
&
atom -> True
1751
.
atom -> True
1751
<<
atom -> True
1751
/
atom -> True
1751
*
atom -> True
1751
>
atom -> True
1751
+
atom -> True
1751
>=
atom -> True
1751
or
atom -> True
1751
-
atom -> True
1751
[
atom -> True
1751
if
atom -> True
1752
atom_expr
1736
1752
NUMBER
1742
1752
NAME
1743
1752
[
1744
1752
factor
2132
1752
{
1745
1752
False
1747
1752
STRING
1749
1752
+
1750
1752
True
1751
1752
-
1752
1752
(
1755
1752
None
1756
1752
atom
1758
1752
power
1759
1752
~
1760
1753
NEWLINE
or_test -> and_test
1753
or
2133
1753
=
or_test -> and_test
1753
if
or_test -> and_test
1754
if
2134
1754
=
test -> or_test
1754
NEWLINE
test -> or_test
1755
and_test
217
1755
atom_expr
218
1755
and_expr
219
1755
term
220
1755
factor
221
1755
shift_expr
222
1755
arith_expr
223
1755
NUMBER
224
1755
NAME
225
1755
not
226
1755
[
227
1755
{
228
1755
expr
229
1755
test_list_comp
2135
1755
not_test
231
1755
False
232
1755
)
2136
1755
xor_expr
234
1755
STRING
235
1755
lambda
236
1755
atom
237
1755
+
238
1755
True
239
1755
-
240
1755
(
241
1755
None
242
1755
comparison
243
1755
power
244
1755
~
245
1755
or_test
246
1755
test
247
1755
lambdef
248
1755
test_list
249
1756
!=
atom -> None
1756
//
atom -> None
1756
^
atom -> None
1756
>=
atom -> None
1756
&
atom -> None
1756
**
atom -> None
1756
NEWLINE
atom -> None
1756
=
atom -> None
1756
<
atom -> None
1756
if
atom -> None
1756
*
atom -> None
1756
>
atom -> None
1756
@
atom -> None
1756
|
atom -> None
1756
-
atom -> None
1756
%
atom -> None
1756
not
atom -> None
1756
==
atom -> None
1756
in
atom -> None
1756
/
atom -> None
1756
or
atom -> None
1756
and
atom -> None
1756
+
atom -> None
1756
(
atom -> None
1756
>>
atom -> None
1756
is
atom -> None
1756
[
atom -> None
1756
<=
atom -> None
1756
<<
atom -> None
1756
.
atom -> None
1757
:
2137
1757
varargslist
2138
1757
vfpdef
212
1757
NAME
211
1758
[
2139
1758
(
2140
1758
.
2141
1758
trailer
2142
1758
<<
trailer_expr -> 
1758
trailer_expr
2143
1758
@
trailer_expr -> 
1758
!=
trailer_expr -> 
1758
-
trailer_expr -> 
1758
^
trailer_expr -> 
1758
<
trailer_expr -> 
1758
NEWLINE
trailer_expr -> 
1758
/
trailer_expr -> 
1758
is
trailer_expr -> 
1758
==
trailer_expr -> 
1758
&
trailer_expr -> 
1758
>=
trailer_expr -> 
1758
or
trailer_expr -> 
1758
in
trailer_expr -> 
1758
=
trailer_expr -> 
1758
*
trailer_expr -> 
1758
not
trailer_expr -> 
1758
**
trailer_expr -> 
1758
<=
trailer_expr -> 
1758
+
trailer_expr -> 
1758
//
trailer_expr -> 
1758
%
trailer_expr -> 
1758
>
trailer_expr -> 
1758
|
trailer_expr -> 
1758
if
trailer_expr -> 
1758
>>
trailer_expr -> 
1758
and
trailer_expr -> 
1759
*
factor -> power
1759
>>
factor -> power
1759
>=
factor -> power
1759
<
factor -> power
1759
&
factor -> power
1759
|
factor -> power
1759
@
factor -> power
1759
!=
factor -> power
1759
<=
factor -> power
1759
//
factor -> power
1759
in
factor -> power
1759
and
factor -> power
1759
+
factor -> power
1759
>
factor -> power
1759
-
factor -> power
1759
not
factor -> power
1759
is
factor -> power
1759
==
factor -> power
1759
%
factor -> power
1759
=
factor -> power
1759
if
factor -> power
1759
or
factor -> power
1759
^
factor -> power
1759
NEWLINE
factor -> power
1759
<<
factor -> power
1759
/
factor -> power
1760
atom_expr
1736
1760
NUMBER
1742
1760
NAME
1743
1760
[
1744
1760
factor
2144
1760
{
1745
1760
False
1747
1760
STRING
1749
1760
+
1750
1760
True
1751
1760
-
1752
1760
(
1755
1760
None
1756
1760
atom
1758
1760
power
1759
1760
~
1760
1761
and
2145
1761
=
and_test -> not_test
1761
or
and_test -> not_test
1761
if
and_test -> not_test
1761
NEWLINE
and_test -> not_test
1762
=
test -> lambdef
1762
NEWLINE
test -> lambdef
1763
or
not_test -> comparison
1763
if
not_test -> comparison
1763
=
not_test -> comparison
1763
NEWLINE
not_test -> comparison
1763
and
not_test -> comparison
1764
atom_expr
1736
1764
and_expr
1737
1764
term
1738
1764
factor
1739
1764
shift_expr
1740
1764
arith_expr
1741
1764
NUMBER
1742
1764
NAME
1743
1764
[
1744
1764
{
1745
1764
expr
1746
1764
False
1747
1764
xor_expr
1748
1764
STRING
1749
1764
+
1750
1764
True
1751
1764
-
1752
1764
(
1755
1764
None
1756
1764
atom
1758
1764
power
1759
1764
~
1760
1764
not_test
2146
1764
comparison
1763
1764
not
1764
1765
=
yield_arg -> from test
1765
NEWLINE
yield_arg -> from test
1766
]
2147
1767
<
trailer -> ( )
1767
.
trailer -> ( )
1767
*
trailer -> ( )
1767
or
trailer -> ( )
1767
is
trailer -> ( )
1767
=
trailer -> ( )
1767
/
trailer -> ( )
1767
+
trailer -> ( )
1767
@
trailer -> ( )
1767
>
trailer -> ( )
1767
//
trailer -> ( )
1767
|
trailer -> ( )
1767
!=
trailer -> ( )
1767
&
trailer -> ( )
1767
^
trailer -> ( )
1767
<=
trailer -> ( )
1767
%
trailer -> ( )
1767
>>
trailer -> ( )
1767
**
trailer -> ( )
1767
and
trailer -> ( )
1767
(
trailer -> ( )
1767
,
trailer -> ( )
1767
==
trailer -> ( )
1767
if
trailer -> ( )
1767
[
trailer -> ( )
1767
<<
trailer -> ( )
1767
NEWLINE
trailer -> ( )
1767
in
trailer -> ( )
1767
-
trailer -> ( )
1767
not
trailer -> ( )
1767
>=
trailer -> ( )
1768
)
2148
1769
|
trailer -> . NAME
1769
@
trailer -> . NAME
1769
^
trailer -> . NAME
1769
>
trailer -> . NAME
1769
+
trailer -> . NAME
1769
.
trailer -> . NAME
1769
!=
trailer -> . NAME
1769
<<
trailer -> . NAME
1769
<=
trailer -> . NAME
1769
[
trailer -> . NAME
1769
*
trailer -> . NAME
1769
(
trailer -> . NAME
1769
//
trailer -> . NAME
1769
**
trailer -> . NAME
1769
-
trailer -> . NAME
1769
in
trailer -> . NAME
1769
>=
trailer -> . NAME
1769
=
trailer -> . NAME
1769
&
trailer -> . NAME
1769
,
trailer -> . NAME
1769
==
trailer -> . NAME
1769
or
trailer -> . NAME
1769
and
trailer -> . NAME
1769
%
trailer -> . NAME
1769
is
trailer -> . NAME
1769
<
trailer -> . NAME
1769
not
trailer -> . NAME
1769
/
trailer -> . NAME
1769
if
trailer -> . NAME
1769
NEWLINE
trailer -> . NAME
1769
>>
trailer -> . NAME
1770
&
trailer_expr -> trailer trailer_expr
1770
not
trailer_expr -> trailer trailer_expr
1770
and
trailer_expr -> trailer trailer_expr
1770
+
trailer_expr -> trailer trailer_expr
1770
==
trailer_expr -> trailer trailer_expr
1770
**
trailer_expr -> trailer trailer_expr
1770
/
trailer_expr -> trailer trailer_expr
1770
=
trailer_expr -> trailer trailer_expr
1770
^
trailer_expr -> trailer trailer_expr
1770
,
trailer_expr -> trailer trailer_expr
1770
>
trailer_expr -> trailer trailer_expr
1770
*
trailer_expr -> trailer trailer_expr
1770
NEWLINE
trailer_expr -> trailer trailer_expr
1770
//
trailer_expr -> trailer trailer_expr
1770
>>
trailer_expr -> trailer trailer_expr
1770
<<
trailer_expr -> trailer trailer_expr
1770
>=
trailer_expr -> trailer trailer_expr
1770
<=
trailer_expr -> trailer trailer_expr
1770
-
trailer_expr -> trailer trailer_expr
1770
is
trailer_expr -> trailer trailer_expr
1770
in
trailer_expr -> trailer trailer_expr
1770
<
trailer_expr -> trailer trailer_expr
1770
|
trailer_expr -> trailer trailer_expr
1770
if
trailer_expr -> trailer trailer_expr
1770
%
trailer_expr -> trailer trailer_expr
1770
@
trailer_expr -> trailer trailer_expr
1770
!=
trailer_expr -> trailer trailer_expr
1770
or
trailer_expr -> trailer trailer_expr
1771
,
or_test -> and_test or or_test
1771
NEWLINE
or_test -> and_test or or_test
1771
if
or_test -> and_test or or_test
1771
=
or_test -> and_test or or_test
1772
=
test_list -> test , test_list
1772
NEWLINE
test_list -> test , test_list
1773
else
2149
1774
NEWLINE
atom -> ( test_list_comp )
1774
if
atom -> ( test_list_comp )
1774
or
atom -> ( test_list_comp )
1774
*
atom -> ( test_list_comp )
1774
|
atom -> ( test_list_comp )
1774
>>
atom -> ( test_list_comp )
1774
%
atom -> ( test_list_comp )
1774
not
atom -> ( test_list_comp )
1774
//
atom -> ( test_list_comp )
1774
+
atom -> ( test_list_comp )
1774
and
atom -> ( test_list_comp )
1774
>
atom -> ( test_list_comp )
1774
[
atom -> ( test_list_comp )
1774
^
atom -> ( test_list_comp )
1774
!=
atom -> ( test_list_comp )
1774
<<
atom -> ( test_list_comp )
1774
**
atom -> ( test_list_comp )
1774
is
atom -> ( test_list_comp )
1774
<=
atom -> ( test_list_comp )
1774
-
atom -> ( test_list_comp )
1774
&
atom -> ( test_list_comp )
1774
(
atom -> ( test_list_comp )
1774
,
atom -> ( test_list_comp )
1774
in
atom -> ( test_list_comp )
1774
@
atom -> ( test_list_comp )
1774
.
atom -> ( test_list_comp )
1774
<
atom -> ( test_list_comp )
1774
/
atom -> ( test_list_comp )
1774
==
atom -> ( test_list_comp )
1774
>=
atom -> ( test_list_comp )
1774
=
atom -> ( test_list_comp )
1775
atom_expr
718
1775
and_expr
719
1775
term
720
1775
factor
721
1775
shift_expr
722
1775
arith_expr
723
1775
NUMBER
724
1775
NAME
725
1775
[
726
1775
{
727
1775
expr
728
1775
not_test
729
1775
False
730
1775
xor_expr
731
1775
STRING
732
1775
atom
734
1775
+
735
1775
True
736
1775
-
737
1775
and_test
738
1775
or_test
740
1775
(
741
1775
None
742
1775
lambda
743
1775
power
744
1775
~
745
1775
test
2150
1775
lambdef
746
1775
comparison
747
1775
not
749
1776
,
lambdef -> lambda : test
1776
=
lambdef -> lambda : test
1776
NEWLINE
lambdef -> lambda : test
1777
NEWLINE
yield_arg -> from test
1778
*
power -> atom_expr ** factor
1778
in
power -> atom_expr ** factor
1778
<
power -> atom_expr ** factor
1778
if
power -> atom_expr ** factor
1778
-
power -> atom_expr ** factor
1778
>>
power -> atom_expr ** factor
1778
<=
power -> atom_expr ** factor
1778
and
power -> atom_expr ** factor
1778
==
power -> atom_expr ** factor
1778
%
power -> atom_expr ** factor
1778
=
power -> atom_expr ** factor
1778
/
power -> atom_expr ** factor
1778
^
power -> atom_expr ** factor
1778
<<
power -> atom_expr ** factor
1778
>
power -> atom_expr ** factor
1778
//
power -> atom_expr ** factor
1778
is
power -> atom_expr ** factor
1778
@
power -> atom_expr ** factor
1778
+
power -> atom_expr ** factor
1778
|
power -> atom_expr ** factor
1778
!=
power -> atom_expr ** factor
1778
>=
power -> atom_expr ** factor
1778
or
power -> atom_expr ** factor
1778
&
power -> atom_expr ** factor
1778
not
power -> atom_expr ** factor
1779
and
xor_expr -> and_expr ^ xor_expr
1779
<
xor_expr -> and_expr ^ xor_expr
1779
>
xor_expr -> and_expr ^ xor_expr
1779
in
xor_expr -> and_expr ^ xor_expr
1779
|
xor_expr -> and_expr ^ xor_expr
1779
<=
xor_expr -> and_expr ^ xor_expr
1779
=
xor_expr -> and_expr ^ xor_expr
1779
not
xor_expr -> and_expr ^ xor_expr
1779
or
xor_expr -> and_expr ^ xor_expr
1779
if
xor_expr -> and_expr ^ xor_expr
1779
is
xor_expr -> and_expr ^ xor_expr
1779
==
xor_expr -> and_expr ^ xor_expr
1779
!=
xor_expr -> and_expr ^ xor_expr
1779
>=
xor_expr -> and_expr ^ xor_expr
1780
<=
arith_expr -> term + arith_expr
1780
>=
arith_expr -> term + arith_expr
1780
if
arith_expr -> term + arith_expr
1780
>>
arith_expr -> term + arith_expr
1780
==
arith_expr -> term + arith_expr
1780
&
arith_expr -> term + arith_expr
1780
>
arith_expr -> term + arith_expr
1780
!=
arith_expr -> term + arith_expr
1780
or
arith_expr -> term + arith_expr
1780
^
arith_expr -> term + arith_expr
1780
not
arith_expr -> term + arith_expr
1780
|
arith_expr -> term + arith_expr
1780
=
arith_expr -> term + arith_expr
1780
is
arith_expr -> term + arith_expr
1780
in
arith_expr -> term + arith_expr
1780
<<
arith_expr -> term + arith_expr
1780
<
arith_expr -> term + arith_expr
1780
and
arith_expr -> term + arith_expr
1781
<=
arith_expr -> term - arith_expr
1781
<<
arith_expr -> term - arith_expr
1781
or
arith_expr -> term - arith_expr
1781
=
arith_expr -> term - arith_expr
1781
is
arith_expr -> term - arith_expr
1781
==
arith_expr -> term - arith_expr
1781
!=
arith_expr -> term - arith_expr
1781
and
arith_expr -> term - arith_expr
1781
|
arith_expr -> term - arith_expr
1781
if
arith_expr -> term - arith_expr
1781
&
arith_expr -> term - arith_expr
1781
^
arith_expr -> term - arith_expr
1781
in
arith_expr -> term - arith_expr
1781
>>
arith_expr -> term - arith_expr
1781
>
arith_expr -> term - arith_expr
1781
not
arith_expr -> term - arith_expr
1781
>=
arith_expr -> term - arith_expr
1781
<
arith_expr -> term - arith_expr
1782
>=
term -> factor / term
1782
!=
term -> factor / term
1782
not
term -> factor / term
1782
^
term -> factor / term
1782
in
term -> factor / term
1782
and
term -> factor / term
1782
<<
term -> factor / term
1782
+
term -> factor / term
1782
>
term -> factor / term
1782
|
term -> factor / term
1782
or
term -> factor / term
1782
if
term -> factor / term
1782
>>
term -> factor / term
1782
<
term -> factor / term
1782
&
term -> factor / term
1782
-
term -> factor / term
1782
is
term -> factor / term
1782
==
term -> factor / term
1782
<=
term -> factor / term
1782
=
term -> factor / term
1783
|
term -> factor * term
1783
-
term -> factor * term
1783
in
term -> factor * term
1783
and
term -> factor * term
1783
<<
term -> factor * term
1783
>=
term -> factor * term
1783
if
term -> factor * term
1783
or
term -> factor * term
1783
<=
term -> factor * term
1783
is
term -> factor * term
1783
^
term -> factor * term
1783
!=
term -> factor * term
1783
=
term -> factor * term
1783
==
term -> factor * term
1783
&
term -> factor * term
1783
>
term -> factor * term
1783
not
term -> factor * term
1783
<
term -> factor * term
1783
+
term -> factor * term
1783
>>
term -> factor * term
1784
!=
term -> factor % term
1784
>>
term -> factor % term
1784
==
term -> factor % term
1784
>=
term -> factor % term
1784
^
term -> factor % term
1784
not
term -> factor % term
1784
or
term -> factor % term
1784
if
term -> factor % term
1784
<=
term -> factor % term
1784
<
term -> factor % term
1784
is
term -> factor % term
1784
-
term -> factor % term
1784
=
term -> factor % term
1784
in
term -> factor % term
1784
>
term -> factor % term
1784
<<
term -> factor % term
1784
and
term -> factor % term
1784
|
term -> factor % term
1784
+
term -> factor % term
1784
&
term -> factor % term
1785
is
term -> factor // term
1785
if
term -> factor // term
1785
>
term -> factor // term
1785
==
term -> factor // term
1785
+
term -> factor // term
1785
^
term -> factor // term
1785
-
term -> factor // term
1785
in
term -> factor // term
1785
>>
term -> factor // term
1785
|
term -> factor // term
1785
=
term -> factor // term
1785
<<
term -> factor // term
1785
!=
term -> factor // term
1785
&
term -> factor // term
1785
not
term -> factor // term
1785
<=
term -> factor // term
1785
<
term -> factor // term
1785
and
term -> factor // term
1785
>=
term -> factor // term
1785
or
term -> factor // term
1786
=
term -> factor @ term
1786
-
term -> factor @ term
1786
&
term -> factor @ term
1786
^
term -> factor @ term
1786
!=
term -> factor @ term
1786
<<
term -> factor @ term
1786
is
term -> factor @ term
1786
<=
term -> factor @ term
1786
and
term -> factor @ term
1786
+
term -> factor @ term
1786
==
term -> factor @ term
1786
>
term -> factor @ term
1786
if
term -> factor @ term
1786
not
term -> factor @ term
1786
>>
term -> factor @ term
1786
>=
term -> factor @ term
1786
|
term -> factor @ term
1786
in
term -> factor @ term
1786
<
term -> factor @ term
1786
or
term -> factor @ term
1787
if
and_expr -> shift_expr & and_expr
1787
!=
and_expr -> shift_expr & and_expr
1787
<=
and_expr -> shift_expr & and_expr
1787
not
and_expr -> shift_expr & and_expr
1787
=
and_expr -> shift_expr & and_expr
1787
^
and_expr -> shift_expr & and_expr
1787
|
and_expr -> shift_expr & and_expr
1787
or
and_expr -> shift_expr & and_expr
1787
in
and_expr -> shift_expr & and_expr
1787
>
and_expr -> shift_expr & and_expr
1787
and
and_expr -> shift_expr & and_expr
1787
==
and_expr -> shift_expr & and_expr
1787
<
and_expr -> shift_expr & and_expr
1787
is
and_expr -> shift_expr & and_expr
1787
>=
and_expr -> shift_expr & and_expr
1788
^
shift_expr -> arith_expr << shift_expr
1788
|
shift_expr -> arith_expr << shift_expr
1788
&
shift_expr -> arith_expr << shift_expr
1788
and
shift_expr -> arith_expr << shift_expr
1788
is
shift_expr -> arith_expr << shift_expr
1788
in
shift_expr -> arith_expr << shift_expr
1788
<=
shift_expr -> arith_expr << shift_expr
1788
<
shift_expr -> arith_expr << shift_expr
1788
not
shift_expr -> arith_expr << shift_expr
1788
==
shift_expr -> arith_expr << shift_expr
1788
>=
shift_expr -> arith_expr << shift_expr
1788
if
shift_expr -> arith_expr << shift_expr
1788
>
shift_expr -> arith_expr << shift_expr
1788
=
shift_expr -> arith_expr << shift_expr
1788
or
shift_expr -> arith_expr << shift_expr
1788
!=
shift_expr -> arith_expr << shift_expr
1789
or
shift_expr -> arith_expr >> shift_expr
1789
and
shift_expr -> arith_expr >> shift_expr
1789
>=
shift_expr -> arith_expr >> shift_expr
1789
not
shift_expr -> arith_expr >> shift_expr
1789
^
shift_expr -> arith_expr >> shift_expr
1789
is
shift_expr -> arith_expr >> shift_expr
1789
if
shift_expr -> arith_expr >> shift_expr
1789
in
shift_expr -> arith_expr >> shift_expr
1789
<=
shift_expr -> arith_expr >> shift_expr
1789
=
shift_expr -> arith_expr >> shift_expr
1789
==
shift_expr -> arith_expr >> shift_expr
1789
<
shift_expr -> arith_expr >> shift_expr
1789
!=
shift_expr -> arith_expr >> shift_expr
1789
|
shift_expr -> arith_expr >> shift_expr
1789
>
shift_expr -> arith_expr >> shift_expr
1789
&
shift_expr -> arith_expr >> shift_expr
1790
and
atom -> [ test_list_comp ]
1790
<=
atom -> [ test_list_comp ]
1790
**
atom -> [ test_list_comp ]
1790
^
atom -> [ test_list_comp ]
1790
[
atom -> [ test_list_comp ]
1790
!=
atom -> [ test_list_comp ]
1790
<
atom -> [ test_list_comp ]
1790
/
atom -> [ test_list_comp ]
1790
-
atom -> [ test_list_comp ]
1790
>=
atom -> [ test_list_comp ]
1790
if
atom -> [ test_list_comp ]
1790
%
atom -> [ test_list_comp ]
1790
is
atom -> [ test_list_comp ]
1790
+
atom -> [ test_list_comp ]
1790
&
atom -> [ test_list_comp ]
1790
@
atom -> [ test_list_comp ]
1790
or
atom -> [ test_list_comp ]
1790
in
atom -> [ test_list_comp ]
1790
==
atom -> [ test_list_comp ]
1790
not
atom -> [ test_list_comp ]
1790
.
atom -> [ test_list_comp ]
1790
|
atom -> [ test_list_comp ]
1790
=
atom -> [ test_list_comp ]
1790
>
atom -> [ test_list_comp ]
1790
<<
atom -> [ test_list_comp ]
1790
//
atom -> [ test_list_comp ]
1790
(
atom -> [ test_list_comp ]
1790
*
atom -> [ test_list_comp ]
1790
>>
atom -> [ test_list_comp ]
1791
=
comparison -> expr comp_op comparison
1791
if
comparison -> expr comp_op comparison
1791
or
comparison -> expr comp_op comparison
1791
and
comparison -> expr comp_op comparison
1792
>
expr -> xor_expr | expr
1792
is
expr -> xor_expr | expr
1792
<
expr -> xor_expr | expr
1792
if
expr -> xor_expr | expr
1792
>=
expr -> xor_expr | expr
1792
or
expr -> xor_expr | expr
1792
and
expr -> xor_expr | expr
1792
in
expr -> xor_expr | expr
1792
!=
expr -> xor_expr | expr
1792
<=
expr -> xor_expr | expr
1792
==
expr -> xor_expr | expr
1792
=
expr -> xor_expr | expr
1792
not
expr -> xor_expr | expr
1793
if
or_test -> and_test or or_test
1793
=
or_test -> and_test or or_test
1794
else
2151
1795
if
atom -> ( test_list_comp )
1795
or
atom -> ( test_list_comp )
1795
*
atom -> ( test_list_comp )
1795
|
atom -> ( test_list_comp )
1795
>>
atom -> ( test_list_comp )
1795
%
atom -> ( test_list_comp )
1795
not
atom -> ( test_list_comp )
1795
//
atom -> ( test_list_comp )
1795
+
atom -> ( test_list_comp )
1795
and
atom -> ( test_list_comp )
1795
>
atom -> ( test_list_comp )
1795
[
atom -> ( test_list_comp )
1795
^
atom -> ( test_list_comp )
1795
!=
atom -> ( test_list_comp )
1795
<<
atom -> ( test_list_comp )
1795
**
atom -> ( test_list_comp )
1795
is
atom -> ( test_list_comp )
1795
<=
atom -> ( test_list_comp )
1795
-
atom -> ( test_list_comp )
1795
&
atom -> ( test_list_comp )
1795
(
atom -> ( test_list_comp )
1795
in
atom -> ( test_list_comp )
1795
@
atom -> ( test_list_comp )
1795
.
atom -> ( test_list_comp )
1795
<
atom -> ( test_list_comp )
1795
/
atom -> ( test_list_comp )
1795
==
atom -> ( test_list_comp )
1795
>=
atom -> ( test_list_comp )
1795
=
atom -> ( test_list_comp )
1796
]
2152
1797
)
2153
1798
<
trailer -> ( )
1798
.
trailer -> ( )
1798
*
trailer -> ( )
1798
or
trailer -> ( )
1798
is
trailer -> ( )
1798
=
trailer -> ( )
1798
/
trailer -> ( )
1798
+
trailer -> ( )
1798
@
trailer -> ( )
1798
>
trailer -> ( )
1798
//
trailer -> ( )
1798
|
trailer -> ( )
1798
!=
trailer -> ( )
1798
&
trailer -> ( )
1798
^
trailer -> ( )
1798
<=
trailer -> ( )
1798
%
trailer -> ( )
1798
>>
trailer -> ( )
1798
**
trailer -> ( )
1798
and
trailer -> ( )
1798
(
trailer -> ( )
1798
==
trailer -> ( )
1798
if
trailer -> ( )
1798
[
trailer -> ( )
1798
<<
trailer -> ( )
1798
in
trailer -> ( )
1798
-
trailer -> ( )
1798
not
trailer -> ( )
1798
>=
trailer -> ( )
1799
|
trailer -> . NAME
1799
@
trailer -> . NAME
1799
^
trailer -> . NAME
1799
>
trailer -> . NAME
1799
+
trailer -> . NAME
1799
.
trailer -> . NAME
1799
!=
trailer -> . NAME
1799
<<
trailer -> . NAME
1799
<=
trailer -> . NAME
1799
[
trailer -> . NAME
1799
*
trailer -> . NAME
1799
(
trailer -> . NAME
1799
//
trailer -> . NAME
1799
**
trailer -> . NAME
1799
-
trailer -> . NAME
1799
in
trailer -> . NAME
1799
>=
trailer -> . NAME
1799
=
trailer -> . NAME
1799
==
trailer -> . NAME
1799
is
trailer -> . NAME
1799
and
trailer -> . NAME
1799
%
trailer -> . NAME
1799
or
trailer -> . NAME
1799
<
trailer -> . NAME
1799
not
trailer -> . NAME
1799
/
trailer -> . NAME
1799
if
trailer -> . NAME
1799
&
trailer -> . NAME
1799
>>
trailer -> . NAME
1800
&
trailer_expr -> trailer trailer_expr
1800
not
trailer_expr -> trailer trailer_expr
1800
and
trailer_expr -> trailer trailer_expr
1800
+
trailer_expr -> trailer trailer_expr
1800
==
trailer_expr -> trailer trailer_expr
1800
**
trailer_expr -> trailer trailer_expr
1800
/
trailer_expr -> trailer trailer_expr
1800
=
trailer_expr -> trailer trailer_expr
1800
^
trailer_expr -> trailer trailer_expr
1800
>
trailer_expr -> trailer trailer_expr
1800
*
trailer_expr -> trailer trailer_expr
1800
//
trailer_expr -> trailer trailer_expr
1800
>>
trailer_expr -> trailer trailer_expr
1800
<<
trailer_expr -> trailer trailer_expr
1800
>=
trailer_expr -> trailer trailer_expr
1800
<=
trailer_expr -> trailer trailer_expr
1800
-
trailer_expr -> trailer trailer_expr
1800
is
trailer_expr -> trailer trailer_expr
1800
in
trailer_expr -> trailer trailer_expr
1800
<
trailer_expr -> trailer trailer_expr
1800
|
trailer_expr -> trailer trailer_expr
1800
if
trailer_expr -> trailer trailer_expr
1800
%
trailer_expr -> trailer trailer_expr
1800
@
trailer_expr -> trailer trailer_expr
1800
!=
trailer_expr -> trailer trailer_expr
1800
or
trailer_expr -> trailer trailer_expr
1801
or
and_test -> not_test and and_test
1801
=
and_test -> not_test and and_test
1801
if
and_test -> not_test and and_test
1802
atom_expr
755
1802
and_expr
756
1802
term
757
1802
factor
758
1802
shift_expr
759
1802
arith_expr
760
1802
NUMBER
761
1802
NAME
762
1802
[
763
1802
{
764
1802
expr
765
1802
False
766
1802
xor_expr
767
1802
STRING
768
1802
+
769
1802
True
770
1802
-
771
1802
and_test
772
1802
or_test
773
1802
(
774
1802
None
775
1802
atom
776
1802
power
777
1802
~
778
1802
not_test
779
1802
comparison
780
1802
lambda
781
1802
not
782
1802
test
2154
1802
lambdef
784
1803
=
lambdef -> lambda : test
1804
NEWLINE
annassign -> : test = test
1805
*
trailer -> [ subscriptlist ]
1805
not
trailer -> [ subscriptlist ]
1805
(
trailer -> [ subscriptlist ]
1805
<<
trailer -> [ subscriptlist ]
1805
,
trailer -> [ subscriptlist ]
1805
>>
trailer -> [ subscriptlist ]
1805
//
trailer -> [ subscriptlist ]
1805
NEWLINE
trailer -> [ subscriptlist ]
1805
or
trailer -> [ subscriptlist ]
1805
is
trailer -> [ subscriptlist ]
1805
[
trailer -> [ subscriptlist ]
1805
|
trailer -> [ subscriptlist ]
1805
%
trailer -> [ subscriptlist ]
1805
<=
trailer -> [ subscriptlist ]
1805
and
trailer -> [ subscriptlist ]
1805
**
trailer -> [ subscriptlist ]
1805
if
trailer -> [ subscriptlist ]
1805
-
trailer -> [ subscriptlist ]
1805
in
trailer -> [ subscriptlist ]
1805
^
trailer -> [ subscriptlist ]
1805
+
trailer -> [ subscriptlist ]
1805
>=
trailer -> [ subscriptlist ]
1805
.
trailer -> [ subscriptlist ]
1805
&
trailer -> [ subscriptlist ]
1805
/
trailer -> [ subscriptlist ]
1805
!=
trailer -> [ subscriptlist ]
1805
<
trailer -> [ subscriptlist ]
1805
==
trailer -> [ subscriptlist ]
1805
>
trailer -> [ subscriptlist ]
1805
@
trailer -> [ subscriptlist ]
1806
%
trailer -> ( arglist )
1806
and
trailer -> ( arglist )
1806
+
trailer -> ( arglist )
1806
or
trailer -> ( arglist )
1806
not
trailer -> ( arglist )
1806
-
trailer -> ( arglist )
1806
@
trailer -> ( arglist )
1806
[
trailer -> ( arglist )
1806
>>
trailer -> ( arglist )
1806
<=
trailer -> ( arglist )
1806
if
trailer -> ( arglist )
1806
//
trailer -> ( arglist )
1806
==
trailer -> ( arglist )
1806
<<
trailer -> ( arglist )
1806
*
trailer -> ( arglist )
1806
<
trailer -> ( arglist )
1806
**
trailer -> ( arglist )
1806
is
trailer -> ( arglist )
1806
>
trailer -> ( arglist )
1806
!=
trailer -> ( arglist )
1806
/
trailer -> ( arglist )
1806
NEWLINE
trailer -> ( arglist )
1806
in
trailer -> ( arglist )
1806
.
trailer -> ( arglist )
1806
|
trailer -> ( arglist )
1806
>=
trailer -> ( arglist )
1806
&
trailer -> ( arglist )
1806
(
trailer -> ( arglist )
1806
^
trailer -> ( arglist )
1806
,
trailer -> ( arglist )
1807
,
lambdef -> lambda varargslist : test
1807
NEWLINE
lambdef -> lambda varargslist : test
1808
atom_expr
325
1808
and_expr
326
1808
term
327
1808
factor
328
1808
shift_expr
329
1808
arith_expr
330
1808
NUMBER
331
1808
NAME
332
1808
[
333
1808
{
334
1808
expr
335
1808
not_test
336
1808
False
337
1808
xor_expr
338
1808
STRING
339
1808
atom
340
1808
+
341
1808
True
342
1808
-
343
1808
(
345
1808
None
346
1808
lambda
347
1808
or_test
348
1808
and_test
349
1808
power
350
1808
~
351
1808
lambdef
352
1808
comparison
353
1808
test
2155
1808
not
354
1809
*
trailer -> [ subscriptlist ]
1809
not
trailer -> [ subscriptlist ]
1809
(
trailer -> [ subscriptlist ]
1809
<<
trailer -> [ subscriptlist ]
1809
>>
trailer -> [ subscriptlist ]
1809
//
trailer -> [ subscriptlist ]
1809
NEWLINE
trailer -> [ subscriptlist ]
1809
or
trailer -> [ subscriptlist ]
1809
is
trailer -> [ subscriptlist ]
1809
[
trailer -> [ subscriptlist ]
1809
|
trailer -> [ subscriptlist ]
1809
%
trailer -> [ subscriptlist ]
1809
from
trailer -> [ subscriptlist ]
1809
<=
trailer -> [ subscriptlist ]
1809
and
trailer -> [ subscriptlist ]
1809
**
trailer -> [ subscriptlist ]
1809
if
trailer -> [ subscriptlist ]
1809
-
trailer -> [ subscriptlist ]
1809
in
trailer -> [ subscriptlist ]
1809
^
trailer -> [ subscriptlist ]
1809
+
trailer -> [ subscriptlist ]
1809
>=
trailer -> [ subscriptlist ]
1809
.
trailer -> [ subscriptlist ]
1809
&
trailer -> [ subscriptlist ]
1809
/
trailer -> [ subscriptlist ]
1809
!=
trailer -> [ subscriptlist ]
1809
<
trailer -> [ subscriptlist ]
1809
==
trailer -> [ subscriptlist ]
1809
>
trailer -> [ subscriptlist ]
1809
@
trailer -> [ subscriptlist ]
1810
%
trailer -> ( arglist )
1810
and
trailer -> ( arglist )
1810
+
trailer -> ( arglist )
1810
or
trailer -> ( arglist )
1810
not
trailer -> ( arglist )
1810
-
trailer -> ( arglist )
1810
@
trailer -> ( arglist )
1810
[
trailer -> ( arglist )
1810
>>
trailer -> ( arglist )
1810
<=
trailer -> ( arglist )
1810
if
trailer -> ( arglist )
1810
//
trailer -> ( arglist )
1810
==
trailer -> ( arglist )
1810
<<
trailer -> ( arglist )
1810
*
trailer -> ( arglist )
1810
<
trailer -> ( arglist )
1810
**
trailer -> ( arglist )
1810
is
trailer -> ( arglist )
1810
>
trailer -> ( arglist )
1810
!=
trailer -> ( arglist )
1810
/
trailer -> ( arglist )
1810
NEWLINE
trailer -> ( arglist )
1810
in
trailer -> ( arglist )
1810
.
trailer -> ( arglist )
1810
|
trailer -> ( arglist )
1810
from
trailer -> ( arglist )
1810
>=
trailer -> ( arglist )
1810
&
trailer -> ( arglist )
1810
(
trailer -> ( arglist )
1810
^
trailer -> ( arglist )
1811
from
lambdef -> lambda varargslist : test
1811
NEWLINE
lambdef -> lambda varargslist : test
1812
atom_expr
356
1812
and_expr
357
1812
term
358
1812
factor
359
1812
shift_expr
360
1812
arith_expr
361
1812
NUMBER
362
1812
NAME
363
1812
[
364
1812
atom
365
1812
{
366
1812
expr
367
1812
False
368
1812
xor_expr
369
1812
True
370
1812
STRING
371
1812
+
372
1812
-
373
1812
(
374
1812
None
375
1812
lambda
376
1812
not_test
377
1812
test
2156
1812
comparison
378
1812
or_test
379
1812
power
381
1812
~
382
1812
lambdef
383
1812
and_test
384
1812
not
385
1813
atom_expr
1384
1813
NUMBER
1390
1813
NAME
1391
1813
[
1392
1813
{
1393
1813
False
1395
1813
STRING
1397
1813
+
1398
1813
True
1399
1813
-
1400
1813
(
1401
1813
None
1402
1813
atom
1404
1813
power
1406
1813
~
1407
1813
factor
2157
1814
atom_expr
1384
1814
and_expr
1385
1814
term
1386
1814
factor
1387
1814
shift_expr
1388
1814
arith_expr
1389
1814
NUMBER
1390
1814
NAME
1391
1814
[
1392
1814
{
1393
1814
False
1395
1814
STRING
1397
1814
xor_expr
2158
1814
+
1398
1814
True
1399
1814
-
1400
1814
(
1401
1814
None
1402
1814
atom
1404
1814
power
1406
1814
~
1407
1815
atom_expr
1384
1815
factor
1387
1815
term
1386
1815
NUMBER
1390
1815
NAME
1391
1815
[
1392
1815
{
1393
1815
False
1395
1815
STRING
1397
1815
+
1398
1815
True
1399
1815
-
1400
1815
(
1401
1815
None
1402
1815
arith_expr
2159
1815
atom
1404
1815
power
1406
1815
~
1407
1816
atom_expr
1384
1816
factor
1387
1816
term
1386
1816
NUMBER
1390
1816
NAME
1391
1816
[
1392
1816
{
1393
1816
False
1395
1816
STRING
1397
1816
+
1398
1816
True
1399
1816
-
1400
1816
arith_expr
2160
1816
(
1401
1816
None
1402
1816
atom
1404
1816
power
1406
1816
~
1407
1817
atom_expr
1384
1817
factor
1387
1817
NUMBER
1390
1817
NAME
1391
1817
[
1392
1817
{
1393
1817
False
1395
1817
STRING
1397
1817
+
1398
1817
term
2161
1817
True
1399
1817
-
1400
1817
(
1401
1817
None
1402
1817
atom
1404
1817
power
1406
1817
~
1407
1818
atom_expr
1384
1818
factor
1387
1818
NUMBER
1390
1818
NAME
1391
1818
[
1392
1818
{
1393
1818
term
2162
1818
False
1395
1818
STRING
1397
1818
+
1398
1818
True
1399
1818
-
1400
1818
(
1401
1818
None
1402
1818
atom
1404
1818
power
1406
1818
~
1407
1819
atom_expr
1384
1819
factor
1387
1819
NUMBER
1390
1819
NAME
1391
1819
[
1392
1819
{
1393
1819
False
1395
1819
STRING
1397
1819
+
1398
1819
term
2163
1819
True
1399
1819
-
1400
1819
(
1401
1819
None
1402
1819
atom
1404
1819
power
1406
1819
~
1407
1820
atom_expr
1384
1820
factor
1387
1820
NUMBER
1390
1820
NAME
1391
1820
[
1392
1820
{
1393
1820
False
1395
1820
STRING
1397
1820
+
1398
1820
True
1399
1820
-
1400
1820
(
1401
1820
None
1402
1820
term
2164
1820
atom
1404
1820
power
1406
1820
~
1407
1821
atom_expr
1384
1821
factor
1387
1821
NUMBER
1390
1821
NAME
1391
1821
[
1392
1821
{
1393
1821
False
1395
1821
STRING
1397
1821
+
1398
1821
True
1399
1821
-
1400
1821
(
1401
1821
None
1402
1821
term
2165
1821
atom
1404
1821
power
1406
1821
~
1407
1822
atom_expr
1384
1822
factor
1387
1822
term
1386
1822
shift_expr
1388
1822
arith_expr
1389
1822
NUMBER
1390
1822
NAME
1391
1822
[
1392
1822
{
1393
1822
False
1395
1822
STRING
1397
1822
+
1398
1822
True
1399
1822
-
1400
1822
and_expr
2166
1822
(
1401
1822
None
1402
1822
atom
1404
1822
power
1406
1822
~
1407
1823
shift_expr
2167
1823
atom_expr
1384
1823
factor
1387
1823
term
1386
1823
arith_expr
1389
1823
NUMBER
1390
1823
NAME
1391
1823
[
1392
1823
{
1393
1823
False
1395
1823
STRING
1397
1823
+
1398
1823
True
1399
1823
-
1400
1823
(
1401
1823
None
1402
1823
atom
1404
1823
power
1406
1823
~
1407
1824
atom_expr
1384
1824
factor
1387
1824
term
1386
1824
arith_expr
1389
1824
NUMBER
1390
1824
NAME
1391
1824
[
1392
1824
{
1393
1824
False
1395
1824
STRING
1397
1824
+
1398
1824
shift_expr
2168
1824
True
1399
1824
-
1400
1824
(
1401
1824
None
1402
1824
atom
1404
1824
power
1406
1824
~
1407
1825
]
2169
1826
in
atom -> [ ]
1826
>=
atom -> [ ]
1826
%
atom -> [ ]
1826
is
atom -> [ ]
1826
^
atom -> [ ]
1826
//
atom -> [ ]
1826
NEWLINE
atom -> [ ]
1826
or
atom -> [ ]
1826
not
atom -> [ ]
1826
[
atom -> [ ]
1826
and
atom -> [ ]
1826
/
atom -> [ ]
1826
!=
atom -> [ ]
1826
>
atom -> [ ]
1826
&
atom -> [ ]
1826
**
atom -> [ ]
1826
@
atom -> [ ]
1826
==
atom -> [ ]
1826
<<
atom -> [ ]
1826
if
atom -> [ ]
1826
<
atom -> [ ]
1826
(
atom -> [ ]
1826
<=
atom -> [ ]
1826
*
atom -> [ ]
1826
.
atom -> [ ]
1826
>>
atom -> [ ]
1826
|
atom -> [ ]
1826
-
atom -> [ ]
1826
+
atom -> [ ]
1827
<<
atom -> { }
1827
+
atom -> { }
1827
//
atom -> { }
1827
is
atom -> { }
1827
>=
atom -> { }
1827
<=
atom -> { }
1827
>
atom -> { }
1827
*
atom -> { }
1827
^
atom -> { }
1827
%
atom -> { }
1827
>>
atom -> { }
1827
.
atom -> { }
1827
not
atom -> { }
1827
==
atom -> { }
1827
if
atom -> { }
1827
in
atom -> { }
1827
<
atom -> { }
1827
|
atom -> { }
1827
(
atom -> { }
1827
/
atom -> { }
1827
and
atom -> { }
1827
**
atom -> { }
1827
@
atom -> { }
1827
-
atom -> { }
1827
&
atom -> { }
1827
NEWLINE
atom -> { }
1827
!=
atom -> { }
1827
or
atom -> { }
1827
[
atom -> { }
1828
atom_expr
1384
1828
and_expr
1385
1828
term
1386
1828
factor
1387
1828
shift_expr
1388
1828
arith_expr
1389
1828
NUMBER
1390
1828
NAME
1391
1828
[
1392
1828
{
1393
1828
expr
1394
1828
False
1395
1828
xor_expr
1396
1828
STRING
1397
1828
comparison
2170
1828
+
1398
1828
True
1399
1828
-
1400
1828
(
1401
1828
None
1402
1828
atom
1404
1828
power
1406
1828
~
1407
1829
atom_expr
1384
1829
and_expr
1385
1829
term
1386
1829
factor
1387
1829
shift_expr
1388
1829
arith_expr
1389
1829
NUMBER
1390
1829
NAME
1391
1829
[
1392
1829
{
1393
1829
False
1395
1829
xor_expr
1396
1829
STRING
1397
1829
+
1398
1829
True
1399
1829
-
1400
1829
(
1401
1829
None
1402
1829
expr
2171
1829
atom
1404
1829
power
1406
1829
~
1407
1830
<<
factor -> + factor
1830
&
factor -> + factor
1830
>
factor -> + factor
1830
if
factor -> + factor
1830
not
factor -> + factor
1830
+
factor -> + factor
1830
^
factor -> + factor
1830
==
factor -> + factor
1830
/
factor -> + factor
1830
|
factor -> + factor
1830
>=
factor -> + factor
1830
NEWLINE
factor -> + factor
1830
%
factor -> + factor
1830
<
factor -> + factor
1830
is
factor -> + factor
1830
or
factor -> + factor
1830
@
factor -> + factor
1830
//
factor -> + factor
1830
and
factor -> + factor
1830
-
factor -> + factor
1830
in
factor -> + factor
1830
*
factor -> + factor
1830
!=
factor -> + factor
1830
>>
factor -> + factor
1830
<=
factor -> + factor
1831
@
factor -> - factor
1831
^
factor -> - factor
1831
==
factor -> - factor
1831
in
factor -> - factor
1831
>>
factor -> - factor
1831
//
factor -> - factor
1831
and
factor -> - factor
1831
<=
factor -> - factor
1831
!=
factor -> - factor
1831
-
factor -> - factor
1831
&
factor -> - factor
1831
NEWLINE
factor -> - factor
1831
not
factor -> - factor
1831
>
factor -> - factor
1831
*
factor -> - factor
1831
%
factor -> - factor
1831
/
factor -> - factor
1831
<
factor -> - factor
1831
|
factor -> - factor
1831
+
factor -> - factor
1831
if
factor -> - factor
1831
<<
factor -> - factor
1831
is
factor -> - factor
1831
or
factor -> - factor
1831
>=
factor -> - factor
1832
)
2172
1833
>=
atom -> ( )
1833
>>
atom -> ( )
1833
NEWLINE
atom -> ( )
1833
not
atom -> ( )
1833
if
atom -> ( )
1833
&
atom -> ( )
1833
^
atom -> ( )
1833
.
atom -> ( )
1833
/
atom -> ( )
1833
in
atom -> ( )
1833
>
atom -> ( )
1833
%
atom -> ( )
1833
(
atom -> ( )
1833
==
atom -> ( )
1833
[
atom -> ( )
1833
<=
atom -> ( )
1833
+
atom -> ( )
1833
|
atom -> ( )
1833
-
atom -> ( )
1833
or
atom -> ( )
1833
@
atom -> ( )
1833
<<
atom -> ( )
1833
is
atom -> ( )
1833
**
atom -> ( )
1833
*
atom -> ( )
1833
and
atom -> ( )
1833
<
atom -> ( )
1833
!=
atom -> ( )
1833
//
atom -> ( )
1834
atom_expr
1384
1834
and_expr
1385
1834
term
1386
1834
factor
1387
1834
shift_expr
1388
1834
arith_expr
1389
1834
NUMBER
1390
1834
NAME
1391
1834
[
1392
1834
{
1393
1834
expr
1394
1834
False
1395
1834
xor_expr
1396
1834
STRING
1397
1834
+
1398
1834
True
1399
1834
-
1400
1834
(
1401
1834
None
1402
1834
lambda
1403
1834
atom
1404
1834
or_test
1405
1834
power
1406
1834
~
1407
1834
lambdef
1408
1834
comparison
1409
1834
not_test
1411
1834
and_test
1412
1834
test
2173
1834
not
1413
1835
:
2174
1836
atom_expr
472
1836
and_expr
473
1836
term
474
1836
factor
475
1836
shift_expr
476
1836
arith_expr
477
1836
NUMBER
478
1836
NAME
479
1836
[
480
1836
{
481
1836
expr
482
1836
not_test
483
1836
False
484
1836
xor_expr
485
1836
subscriptlist
2175
1836
atom
487
1836
STRING
488
1836
+
489
1836
(
490
1836
True
491
1836
-
492
1836
None
493
1836
or_test
494
1836
and_test
495
1836
power
496
1836
~
497
1836
lambda
498
1836
:
maybe_test -> 
1836
maybe_test
499
1836
test
500
1836
not
501
1836
comparison
502
1836
lambdef
503
1836
subscript
504
1837
and_test
505
1837
atom_expr
506
1837
and_expr
507
1837
term
508
1837
factor
509
1837
shift_expr
510
1837
arith_expr
511
1837
NUMBER
512
1837
NAME
513
1837
not
514
1837
[
515
1837
{
516
1837
expr
517
1837
not_test
519
1837
False
520
1837
xor_expr
521
1837
STRING
522
1837
lambda
523
1837
arglist
2176
1837
atom
525
1837
)
2177
1837
+
526
1837
True
527
1837
-
528
1837
or_test
529
1837
(
530
1837
None
531
1837
comparison
532
1837
power
533
1837
test
534
1837
~
535
1837
*
536
1837
lambdef
537
1837
**
538
1837
argument
539
1838
NAME
2178
1839
trailer_expr
2179
1839
[
1836
1839
(
1837
1839
.
1838
1839
trailer
1839
1839
<<
trailer_expr -> 
1839
@
trailer_expr -> 
1839
!=
trailer_expr -> 
1839
-
trailer_expr -> 
1839
^
trailer_expr -> 
1839
<
trailer_expr -> 
1839
NEWLINE
trailer_expr -> 
1839
/
trailer_expr -> 
1839
is
trailer_expr -> 
1839
==
trailer_expr -> 
1839
&
trailer_expr -> 
1839
>=
trailer_expr -> 
1839
or
trailer_expr -> 
1839
in
trailer_expr -> 
1839
*
trailer_expr -> 
1839
not
trailer_expr -> 
1839
**
trailer_expr -> 
1839
<=
trailer_expr -> 
1839
+
trailer_expr -> 
1839
//
trailer_expr -> 
1839
%
trailer_expr -> 
1839
>
trailer_expr -> 
1839
|
trailer_expr -> 
1839
if
trailer_expr -> 
1839
and
trailer_expr -> 
1839
>>
trailer_expr -> 
1840
==
atom_expr -> atom trailer_expr
1840
%
atom_expr -> atom trailer_expr
1840
+
atom_expr -> atom trailer_expr
1840
not
atom_expr -> atom trailer_expr
1840
or
atom_expr -> atom trailer_expr
1840
//
atom_expr -> atom trailer_expr
1840
and
atom_expr -> atom trailer_expr
1840
!=
atom_expr -> atom trailer_expr
1840
<<
atom_expr -> atom trailer_expr
1840
NEWLINE
atom_expr -> atom trailer_expr
1840
if
atom_expr -> atom trailer_expr
1840
-
atom_expr -> atom trailer_expr
1840
>>
atom_expr -> atom trailer_expr
1840
**
atom_expr -> atom trailer_expr
1840
/
atom_expr -> atom trailer_expr
1840
<
atom_expr -> atom trailer_expr
1840
in
atom_expr -> atom trailer_expr
1840
&
atom_expr -> atom trailer_expr
1840
is
atom_expr -> atom trailer_expr
1840
|
atom_expr -> atom trailer_expr
1840
>
atom_expr -> atom trailer_expr
1840
>=
atom_expr -> atom trailer_expr
1840
<=
atom_expr -> atom trailer_expr
1840
@
atom_expr -> atom trailer_expr
1840
*
atom_expr -> atom trailer_expr
1840
^
atom_expr -> atom trailer_expr
1841
atom_expr
590
1841
and_expr
591
1841
term
592
1841
[
593
1841
shift_expr
594
1841
arith_expr
595
1841
NUMBER
596
1841
NAME
597
1841
factor
598
1841
{
599
1841
expr
600
1841
False
601
1841
xor_expr
602
1841
STRING
603
1841
+
604
1841
True
605
1841
-
606
1841
(
607
1841
None
608
1841
atom
609
1841
power
610
1841
~
611
1841
not_test
612
1841
or_test
2180
1841
not
613
1841
comparison
614
1841
and_test
615
1842
<<
factor -> ~ factor
1842
in
factor -> ~ factor
1842
<=
factor -> ~ factor
1842
if
factor -> ~ factor
1842
|
factor -> ~ factor
1842
<
factor -> ~ factor
1842
>>
factor -> ~ factor
1842
==
factor -> ~ factor
1842
>=
factor -> ~ factor
1842
!=
factor -> ~ factor
1842
//
factor -> ~ factor
1842
*
factor -> ~ factor
1842
/
factor -> ~ factor
1842
NEWLINE
factor -> ~ factor
1842
+
factor -> ~ factor
1842
is
factor -> ~ factor
1842
not
factor -> ~ factor
1842
and
factor -> ~ factor
1842
^
factor -> ~ factor
1842
@
factor -> ~ factor
1842
>
factor -> ~ factor
1842
-
factor -> ~ factor
1842
or
factor -> ~ factor
1842
&
factor -> ~ factor
1842
%
factor -> ~ factor
1843
atom_expr
1384
1843
and_expr
1385
1843
term
1386
1843
factor
1387
1843
shift_expr
1388
1843
arith_expr
1389
1843
NUMBER
1390
1843
NAME
1391
1843
[
1392
1843
{
1393
1843
expr
1394
1843
False
1395
1843
xor_expr
1396
1843
STRING
1397
1843
+
1398
1843
True
1399
1843
-
1400
1843
(
1401
1843
None
1402
1843
atom
1404
1843
power
1406
1843
~
1407
1843
comparison
1409
1843
and_test
2181
1843
not_test
1411
1843
not
1413
1844
atom_expr
1384
1844
and_expr
1385
1844
term
1386
1844
factor
1387
1844
shift_expr
1388
1844
arith_expr
1389
1844
NUMBER
1390
1844
NAME
1391
1844
[
1392
1844
{
1393
1844
expr
1394
1844
False
1395
1844
xor_expr
1396
1844
STRING
1397
1844
+
1398
1844
True
1399
1844
-
1400
1844
(
1401
1844
None
1402
1844
atom
1404
1844
power
1406
1844
~
1407
1844
comparison
1409
1844
not_test
1411
1844
and_test
1412
1844
not
1413
1844
or_test
2182
1845
NEWLINE
not_test -> not not_test
1845
if
not_test -> not not_test
1845
and
not_test -> not not_test
1845
or
not_test -> not not_test
1846
atom_expr
6
1846
factor
10
1846
[
3
1846
term
15
1846
STRING
43
1846
arith_expr
32
1846
NUMBER
8
1846
small_stmt
4
1846
NAME
37
1846
{
5
1846
expr
7
1846
not
51
1846
True
9
1846
shift_expr
12
1846
atom
13
1846
xor_expr
14
1846
suite
2183
1846
NEWLINE
942
1846
(
34
1846
None
29
1846
and_test
20
1846
and_expr
21
1846
False
23
1846
or_test
25
1846
test
33
1846
lambda
28
1846
+
30
1846
simple_stmt
943
1846
nonlocal
66
1846
-
36
1846
not_test
40
1846
power
47
1846
lambdef
41
1846
~
44
1846
comparison
48
1846
assert
67
1846
global_stmt
68
1846
continue
49
1846
expr_stmt
50
1846
test_list
62
1846
raise
69
1846
del_stmt
52
1846
yield_stmt
53
1846
raise_stmt
70
1846
yield
56
1846
assert_stmt
57
1846
global
71
1846
nonlocal_stmt
72
1846
break_stmt
58
1846
return_stmt
75
1846
return
59
1846
pass
60
1846
continue_stmt
61
1846
flow_stmt
76
1846
break
63
1846
del
64
1846
pass_stmt
65
1847
DEDENT
2184
1848
:
test -> or_test if or_test else test
1849
]
test -> or_test if or_test else test
1849
,
test -> or_test if or_test else test
1849
for
test -> or_test if or_test else test
1850
*
power -> atom_expr ** factor
1850
in
power -> atom_expr ** factor
1850
<
power -> atom_expr ** factor
1850
if
power -> atom_expr ** factor
1850
-
power -> atom_expr ** factor
1850
>>
power -> atom_expr ** factor
1850
]
power -> atom_expr ** factor
1850
<=
power -> atom_expr ** factor
1850
and
power -> atom_expr ** factor
1850
==
power -> atom_expr ** factor
1850
%
power -> atom_expr ** factor
1850
/
power -> atom_expr ** factor
1850
^
power -> atom_expr ** factor
1850
<<
power -> atom_expr ** factor
1850
,
power -> atom_expr ** factor
1850
>
power -> atom_expr ** factor
1850
//
power -> atom_expr ** factor
1850
is
power -> atom_expr ** factor
1850
@
power -> atom_expr ** factor
1850
+
power -> atom_expr ** factor
1850
|
power -> atom_expr ** factor
1850
!=
power -> atom_expr ** factor
1850
>=
power -> atom_expr ** factor
1850
or
power -> atom_expr ** factor
1850
&
power -> atom_expr ** factor
1850
not
power -> atom_expr ** factor
1851
and
xor_expr -> and_expr ^ xor_expr
1851
<
xor_expr -> and_expr ^ xor_expr
1851
>
xor_expr -> and_expr ^ xor_expr
1851
in
xor_expr -> and_expr ^ xor_expr
1851
|
xor_expr -> and_expr ^ xor_expr
1851
<=
xor_expr -> and_expr ^ xor_expr
1851
]
xor_expr -> and_expr ^ xor_expr
1851
!=
xor_expr -> and_expr ^ xor_expr
1851
not
xor_expr -> and_expr ^ xor_expr
1851
or
xor_expr -> and_expr ^ xor_expr
1851
if
xor_expr -> and_expr ^ xor_expr
1851
is
xor_expr -> and_expr ^ xor_expr
1851
==
xor_expr -> and_expr ^ xor_expr
1851
,
xor_expr -> and_expr ^ xor_expr
1851
>=
xor_expr -> and_expr ^ xor_expr
1852
<=
arith_expr -> term + arith_expr
1852
&
arith_expr -> term + arith_expr
1852
>
arith_expr -> term + arith_expr
1852
,
arith_expr -> term + arith_expr
1852
]
arith_expr -> term + arith_expr
1852
>=
arith_expr -> term + arith_expr
1852
not
arith_expr -> term + arith_expr
1852
|
arith_expr -> term + arith_expr
1852
in
arith_expr -> term + arith_expr
1852
if
arith_expr -> term + arith_expr
1852
>>
arith_expr -> term + arith_expr
1852
is
arith_expr -> term + arith_expr
1852
^
arith_expr -> term + arith_expr
1852
<<
arith_expr -> term + arith_expr
1852
<
arith_expr -> term + arith_expr
1852
==
arith_expr -> term + arith_expr
1852
!=
arith_expr -> term + arith_expr
1852
or
arith_expr -> term + arith_expr
1852
and
arith_expr -> term + arith_expr
1853
<=
arith_expr -> term - arith_expr
1853
if
arith_expr -> term - arith_expr
1853
not
arith_expr -> term - arith_expr
1853
|
arith_expr -> term - arith_expr
1853
,
arith_expr -> term - arith_expr
1853
>>
arith_expr -> term - arith_expr
1853
>=
arith_expr -> term - arith_expr
1853
<<
arith_expr -> term - arith_expr
1853
is
arith_expr -> term - arith_expr
1853
!=
arith_expr -> term - arith_expr
1853
in
arith_expr -> term - arith_expr
1853
<
arith_expr -> term - arith_expr
1853
]
arith_expr -> term - arith_expr
1853
or
arith_expr -> term - arith_expr
1853
==
arith_expr -> term - arith_expr
1853
and
arith_expr -> term - arith_expr
1853
&
arith_expr -> term - arith_expr
1853
^
arith_expr -> term - arith_expr
1853
>
arith_expr -> term - arith_expr
1854
|
term -> factor * term
1854
-
term -> factor * term
1854
in
term -> factor * term
1854
and
term -> factor * term
1854
<<
term -> factor * term
1854
>=
term -> factor * term
1854
if
term -> factor * term
1854
]
term -> factor * term
1854
or
term -> factor * term
1854
<=
term -> factor * term
1854
is
term -> factor * term
1854
^
term -> factor * term
1854
!=
term -> factor * term
1854
==
term -> factor * term
1854
,
term -> factor * term
1854
&
term -> factor * term
1854
>
term -> factor * term
1854
not
term -> factor * term
1854
<
term -> factor * term
1854
+
term -> factor * term
1854
>>
term -> factor * term
1855
!=
term -> factor % term
1855
>>
term -> factor % term
1855
==
term -> factor % term
1855
>=
term -> factor % term
1855
,
term -> factor % term
1855
^
term -> factor % term
1855
not
term -> factor % term
1855
or
term -> factor % term
1855
if
term -> factor % term
1855
<=
term -> factor % term
1855
<
term -> factor % term
1855
is
term -> factor % term
1855
-
term -> factor % term
1855
in
term -> factor % term
1855
]
term -> factor % term
1855
>
term -> factor % term
1855
<<
term -> factor % term
1855
and
term -> factor % term
1855
|
term -> factor % term
1855
+
term -> factor % term
1855
&
term -> factor % term
1856
is
term -> factor // term
1856
if
term -> factor // term
1856
>
term -> factor // term
1856
==
term -> factor // term
1856
+
term -> factor // term
1856
^
term -> factor // term
1856
]
term -> factor // term
1856
-
term -> factor // term
1856
,
term -> factor // term
1856
in
term -> factor // term
1856
>>
term -> factor // term
1856
|
term -> factor // term
1856
<<
term -> factor // term
1856
!=
term -> factor // term
1856
&
term -> factor // term
1856
not
term -> factor // term
1856
<=
term -> factor // term
1856
<
term -> factor // term
1856
and
term -> factor // term
1856
>=
term -> factor // term
1856
or
term -> factor // term
1857
>=
term -> factor / term
1857
!=
term -> factor / term
1857
]
term -> factor / term
1857
not
term -> factor / term
1857
^
term -> factor / term
1857
in
term -> factor / term
1857
and
term -> factor / term
1857
<<
term -> factor / term
1857
,
term -> factor / term
1857
+
term -> factor / term
1857
>
term -> factor / term
1857
|
term -> factor / term
1857
or
term -> factor / term
1857
if
term -> factor / term
1857
>>
term -> factor / term
1857
<
term -> factor / term
1857
&
term -> factor / term
1857
-
term -> factor / term
1857
is
term -> factor / term
1857
==
term -> factor / term
1857
<=
term -> factor / term
1858
-
term -> factor @ term
1858
&
term -> factor @ term
1858
^
term -> factor @ term
1858
]
term -> factor @ term
1858
<
term -> factor @ term
1858
!=
term -> factor @ term
1858
<<
term -> factor @ term
1858
is
term -> factor @ term
1858
<=
term -> factor @ term
1858
and
term -> factor @ term
1858
+
term -> factor @ term
1858
,
term -> factor @ term
1858
>
term -> factor @ term
1858
if
term -> factor @ term
1858
not
term -> factor @ term
1858
>>
term -> factor @ term
1858
>=
term -> factor @ term
1858
|
term -> factor @ term
1858
in
term -> factor @ term
1858
==
term -> factor @ term
1858
or
term -> factor @ term
1859
if
and_expr -> shift_expr & and_expr
1859
!=
and_expr -> shift_expr & and_expr
1859
<=
and_expr -> shift_expr & and_expr
1859
not
and_expr -> shift_expr & and_expr
1859
,
and_expr -> shift_expr & and_expr
1859
^
and_expr -> shift_expr & and_expr
1859
|
and_expr -> shift_expr & and_expr
1859
or
and_expr -> shift_expr & and_expr
1859
]
and_expr -> shift_expr & and_expr
1859
in
and_expr -> shift_expr & and_expr
1859
>
and_expr -> shift_expr & and_expr
1859
and
and_expr -> shift_expr & and_expr
1859
==
and_expr -> shift_expr & and_expr
1859
<
and_expr -> shift_expr & and_expr
1859
is
and_expr -> shift_expr & and_expr
1859
>=
and_expr -> shift_expr & and_expr
1860
,
shift_expr -> arith_expr << shift_expr
1860
^
shift_expr -> arith_expr << shift_expr
1860
|
shift_expr -> arith_expr << shift_expr
1860
&
shift_expr -> arith_expr << shift_expr
1860
and
shift_expr -> arith_expr << shift_expr
1860
is
shift_expr -> arith_expr << shift_expr
1860
in
shift_expr -> arith_expr << shift_expr
1860
<=
shift_expr -> arith_expr << shift_expr
1860
]
shift_expr -> arith_expr << shift_expr
1860
not
shift_expr -> arith_expr << shift_expr
1860
==
shift_expr -> arith_expr << shift_expr
1860
>=
shift_expr -> arith_expr << shift_expr
1860
if
shift_expr -> arith_expr << shift_expr
1860
<
shift_expr -> arith_expr << shift_expr
1860
>
shift_expr -> arith_expr << shift_expr
1860
or
shift_expr -> arith_expr << shift_expr
1860
!=
shift_expr -> arith_expr << shift_expr
1861
or
shift_expr -> arith_expr >> shift_expr
1861
and
shift_expr -> arith_expr >> shift_expr
1861
>=
shift_expr -> arith_expr >> shift_expr
1861
not
shift_expr -> arith_expr >> shift_expr
1861
^
shift_expr -> arith_expr >> shift_expr
1861
is
shift_expr -> arith_expr >> shift_expr
1861
if
shift_expr -> arith_expr >> shift_expr
1861
in
shift_expr -> arith_expr >> shift_expr
1861
<=
shift_expr -> arith_expr >> shift_expr
1861
]
shift_expr -> arith_expr >> shift_expr
1861
==
shift_expr -> arith_expr >> shift_expr
1861
,
shift_expr -> arith_expr >> shift_expr
1861
<
shift_expr -> arith_expr >> shift_expr
1861
!=
shift_expr -> arith_expr >> shift_expr
1861
|
shift_expr -> arith_expr >> shift_expr
1861
>
shift_expr -> arith_expr >> shift_expr
1861
&
shift_expr -> arith_expr >> shift_expr
1862
and
atom -> [ test_list_comp ]
1862
<=
atom -> [ test_list_comp ]
1862
**
atom -> [ test_list_comp ]
1862
^
atom -> [ test_list_comp ]
1862
[
atom -> [ test_list_comp ]
1862
,
atom -> [ test_list_comp ]
1862
!=
atom -> [ test_list_comp ]
1862
<
atom -> [ test_list_comp ]
1862
/
atom -> [ test_list_comp ]
1862
-
atom -> [ test_list_comp ]
1862
>=
atom -> [ test_list_comp ]
1862
if
atom -> [ test_list_comp ]
1862
]
atom -> [ test_list_comp ]
1862
%
atom -> [ test_list_comp ]
1862
is
atom -> [ test_list_comp ]
1862
+
atom -> [ test_list_comp ]
1862
&
atom -> [ test_list_comp ]
1862
@
atom -> [ test_list_comp ]
1862
or
atom -> [ test_list_comp ]
1862
in
atom -> [ test_list_comp ]
1862
==
atom -> [ test_list_comp ]
1862
not
atom -> [ test_list_comp ]
1862
.
atom -> [ test_list_comp ]
1862
|
atom -> [ test_list_comp ]
1862
>
atom -> [ test_list_comp ]
1862
<<
atom -> [ test_list_comp ]
1862
//
atom -> [ test_list_comp ]
1862
(
atom -> [ test_list_comp ]
1862
*
atom -> [ test_list_comp ]
1862
>>
atom -> [ test_list_comp ]
1863
if
comparison -> expr comp_op comparison
1863
or
comparison -> expr comp_op comparison
1863
and
comparison -> expr comp_op comparison
1863
]
comparison -> expr comp_op comparison
1863
,
comparison -> expr comp_op comparison
1864
]
and_test -> not_test and and_test
1864
or
and_test -> not_test and and_test
1864
,
and_test -> not_test and and_test
1864
if
and_test -> not_test and and_test
1865
>
expr -> xor_expr | expr
1865
]
expr -> xor_expr | expr
1865
is
expr -> xor_expr | expr
1865
if
expr -> xor_expr | expr
1865
<
expr -> xor_expr | expr
1865
>=
expr -> xor_expr | expr
1865
or
expr -> xor_expr | expr
1865
and
expr -> xor_expr | expr
1865
in
expr -> xor_expr | expr
1865
!=
expr -> xor_expr | expr
1865
<=
expr -> xor_expr | expr
1865
==
expr -> xor_expr | expr
1865
,
expr -> xor_expr | expr
1865
not
expr -> xor_expr | expr
1866
]
2185
1867
<
trailer -> ( )
1867
.
trailer -> ( )
1867
*
trailer -> ( )
1867
or
trailer -> ( )
1867
is
trailer -> ( )
1867
/
trailer -> ( )
1867
+
trailer -> ( )
1867
@
trailer -> ( )
1867
>
trailer -> ( )
1867
//
trailer -> ( )
1867
|
trailer -> ( )
1867
!=
trailer -> ( )
1867
&
trailer -> ( )
1867
^
trailer -> ( )
1867
<=
trailer -> ( )
1867
]
trailer -> ( )
1867
%
trailer -> ( )
1867
>>
trailer -> ( )
1867
**
trailer -> ( )
1867
and
trailer -> ( )
1867
(
trailer -> ( )
1867
,
trailer -> ( )
1867
==
trailer -> ( )
1867
if
trailer -> ( )
1867
[
trailer -> ( )
1867
<<
trailer -> ( )
1867
in
trailer -> ( )
1867
-
trailer -> ( )
1867
not
trailer -> ( )
1867
>=
trailer -> ( )
1868
)
2186
1869
|
trailer -> . NAME
1869
@
trailer -> . NAME
1869
^
trailer -> . NAME
1869
>
trailer -> . NAME
1869
+
trailer -> . NAME
1869
.
trailer -> . NAME
1869
!=
trailer -> . NAME
1869
<<
trailer -> . NAME
1869
<=
trailer -> . NAME
1869
[
trailer -> . NAME
1869
*
trailer -> . NAME
1869
(
trailer -> . NAME
1869
//
trailer -> . NAME
1869
**
trailer -> . NAME
1869
-
trailer -> . NAME
1869
]
trailer -> . NAME
1869
in
trailer -> . NAME
1869
>=
trailer -> . NAME
1869
,
trailer -> . NAME
1869
==
trailer -> . NAME
1869
or
trailer -> . NAME
1869
and
trailer -> . NAME
1869
%
trailer -> . NAME
1869
is
trailer -> . NAME
1869
<
trailer -> . NAME
1869
not
trailer -> . NAME
1869
/
trailer -> . NAME
1869
if
trailer -> . NAME
1869
&
trailer -> . NAME
1869
>>
trailer -> . NAME
1870
&
trailer_expr -> trailer trailer_expr
1870
not
trailer_expr -> trailer trailer_expr
1870
and
trailer_expr -> trailer trailer_expr
1870
+
trailer_expr -> trailer trailer_expr
1870
==
trailer_expr -> trailer trailer_expr
1870
**
trailer_expr -> trailer trailer_expr
1870
/
trailer_expr -> trailer trailer_expr
1870
^
trailer_expr -> trailer trailer_expr
1870
,
trailer_expr -> trailer trailer_expr
1870
>
trailer_expr -> trailer trailer_expr
1870
*
trailer_expr -> trailer trailer_expr
1870
//
trailer_expr -> trailer trailer_expr
1870
>>
trailer_expr -> trailer trailer_expr
1870
<<
trailer_expr -> trailer trailer_expr
1870
>=
trailer_expr -> trailer trailer_expr
1870
<=
trailer_expr -> trailer trailer_expr
1870
-
trailer_expr -> trailer trailer_expr
1870
is
trailer_expr -> trailer trailer_expr
1870
]
trailer_expr -> trailer trailer_expr
1870
in
trailer_expr -> trailer trailer_expr
1870
<
trailer_expr -> trailer trailer_expr
1870
|
trailer_expr -> trailer trailer_expr
1870
if
trailer_expr -> trailer trailer_expr
1870
%
trailer_expr -> trailer trailer_expr
1870
@
trailer_expr -> trailer trailer_expr
1870
!=
trailer_expr -> trailer trailer_expr
1870
or
trailer_expr -> trailer trailer_expr
1871
if
atom -> ( test_list_comp )
1871
or
atom -> ( test_list_comp )
1871
*
atom -> ( test_list_comp )
1871
|
atom -> ( test_list_comp )
1871
>>
atom -> ( test_list_comp )
1871
%
atom -> ( test_list_comp )
1871
not
atom -> ( test_list_comp )
1871
//
atom -> ( test_list_comp )
1871
+
atom -> ( test_list_comp )
1871
and
atom -> ( test_list_comp )
1871
>
atom -> ( test_list_comp )
1871
[
atom -> ( test_list_comp )
1871
^
atom -> ( test_list_comp )
1871
!=
atom -> ( test_list_comp )
1871
<<
atom -> ( test_list_comp )
1871
**
atom -> ( test_list_comp )
1871
is
atom -> ( test_list_comp )
1871
<=
atom -> ( test_list_comp )
1871
-
atom -> ( test_list_comp )
1871
&
atom -> ( test_list_comp )
1871
(
atom -> ( test_list_comp )
1871
,
atom -> ( test_list_comp )
1871
in
atom -> ( test_list_comp )
1871
@
atom -> ( test_list_comp )
1871
.
atom -> ( test_list_comp )
1871
<
atom -> ( test_list_comp )
1871
/
atom -> ( test_list_comp )
1871
==
atom -> ( test_list_comp )
1871
>=
atom -> ( test_list_comp )
1871
]
atom -> ( test_list_comp )
1872
else
2187
1873
]
or_test -> and_test or or_test
1873
,
or_test -> and_test or or_test
1873
if
or_test -> and_test or or_test
1874
atom_expr
908
1874
and_expr
909
1874
term
910
1874
factor
911
1874
shift_expr
912
1874
arith_expr
913
1874
NUMBER
914
1874
NAME
915
1874
[
916
1874
{
917
1874
expr
918
1874
not_test
919
1874
False
920
1874
xor_expr
921
1874
atom
922
1874
STRING
923
1874
+
924
1874
(
925
1874
True
926
1874
-
927
1874
None
928
1874
or_test
929
1874
and_test
931
1874
power
932
1874
~
933
1874
test
2188
1874
lambda
934
1874
not
935
1874
comparison
936
1874
lambdef
938
1875
]
lambdef -> lambda : test
1875
,
lambdef -> lambda : test
1876
or
2189
1876
]
or_test -> and_test
1876
if
or_test -> and_test
1876
for
or_test -> and_test
1877
**
2190
1877
!=
power -> atom_expr
1877
|
power -> atom_expr
1877
>
power -> atom_expr
1877
/
power -> atom_expr
1877
^
power -> atom_expr
1877
&
power -> atom_expr
1877
<
power -> atom_expr
1877
not
power -> atom_expr
1877
]
power -> atom_expr
1877
<=
power -> atom_expr
1877
%
power -> atom_expr
1877
and
power -> atom_expr
1877
*
power -> atom_expr
1877
@
power -> atom_expr
1877
>>
power -> atom_expr
1877
if
power -> atom_expr
1877
+
power -> atom_expr
1877
in
power -> atom_expr
1877
for
power -> atom_expr
1877
is
power -> atom_expr
1877
//
power -> atom_expr
1877
or
power -> atom_expr
1877
<<
power -> atom_expr
1877
-
power -> atom_expr
1877
==
power -> atom_expr
1877
>=
power -> atom_expr
1878
^
2191
1878
not
xor_expr -> and_expr
1878
]
xor_expr -> and_expr
1878
>=
xor_expr -> and_expr
1878
for
xor_expr -> and_expr
1878
and
xor_expr -> and_expr
1878
is
xor_expr -> and_expr
1878
or
xor_expr -> and_expr
1878
|
xor_expr -> and_expr
1878
in
xor_expr -> and_expr
1878
==
xor_expr -> and_expr
1878
>
xor_expr -> and_expr
1878
<
xor_expr -> and_expr
1878
if
xor_expr -> and_expr
1878
<=
xor_expr -> and_expr
1878
!=
xor_expr -> and_expr
1879
+
2192
1879
in
arith_expr -> term
1879
if
arith_expr -> term
1879
|
arith_expr -> term
1879
-
2193
1879
<
arith_expr -> term
1879
==
arith_expr -> term
1879
<=
arith_expr -> term
1879
^
arith_expr -> term
1879
is
arith_expr -> term
1879
>>
arith_expr -> term
1879
for
arith_expr -> term
1879
]
arith_expr -> term
1879
or
arith_expr -> term
1879
&
arith_expr -> term
1879
>
arith_expr -> term
1879
>=
arith_expr -> term
1879
<<
arith_expr -> term
1879
and
arith_expr -> term
1879
not
arith_expr -> term
1879
!=
arith_expr -> term
1880
*
2194
1880
%
2195
1880
//
2196
1880
/
2197
1880
and
term -> factor
1880
==
term -> factor
1880
@
2198
1880
>=
term -> factor
1880
+
term -> factor
1880
<=
term -> factor
1880
or
term -> factor
1880
<<
term -> factor
1880
not
term -> factor
1880
<
term -> factor
1880
-
term -> factor
1880
in
term -> factor
1880
for
term -> factor
1880
!=
term -> factor
1880
is
term -> factor
1880
>>
term -> factor
1880
^
term -> factor
1880
|
term -> factor
1880
>
term -> factor
1880
]
term -> factor
1880
if
term -> factor
1880
&
term -> factor
1881
if
and_expr -> shift_expr
1881
&
2199
1881
in
and_expr -> shift_expr
1881
is
and_expr -> shift_expr
1881
|
and_expr -> shift_expr
1881
>=
and_expr -> shift_expr
1881
<
and_expr -> shift_expr
1881
!=
and_expr -> shift_expr
1881
and
and_expr -> shift_expr
1881
]
and_expr -> shift_expr
1881
not
and_expr -> shift_expr
1881
or
and_expr -> shift_expr
1881
==
and_expr -> shift_expr
1881
<=
and_expr -> shift_expr
1881
^
and_expr -> shift_expr
1881
for
and_expr -> shift_expr
1881
>
and_expr -> shift_expr
1882
<<
2200
1882
>>
2201
1882
<
shift_expr -> arith_expr
1882
>
shift_expr -> arith_expr
1882
for
shift_expr -> arith_expr
1882
&
shift_expr -> arith_expr
1882
and
shift_expr -> arith_expr
1882
in
shift_expr -> arith_expr
1882
!=
shift_expr -> arith_expr
1882
|
shift_expr -> arith_expr
1882
if
shift_expr -> arith_expr
1882
not
shift_expr -> arith_expr
1882
<=
shift_expr -> arith_expr
1882
is
shift_expr -> arith_expr
1882
==
shift_expr -> arith_expr
1882
or
shift_expr -> arith_expr
1882
]
shift_expr -> arith_expr
1882
>=
shift_expr -> arith_expr
1882
^
shift_expr -> arith_expr
1883
==
atom -> NUMBER
1883
<=
atom -> NUMBER
1883
<<
atom -> NUMBER
1883
/
atom -> NUMBER
1883
^
atom -> NUMBER
1883
if
atom -> NUMBER
1883
]
atom -> NUMBER
1883
.
atom -> NUMBER
1883
or
atom -> NUMBER
1883
**
atom -> NUMBER
1883
for
atom -> NUMBER
1883
+
atom -> NUMBER
1883
%
atom -> NUMBER
1883
-
atom -> NUMBER
1883
&
atom -> NUMBER
1883
@
atom -> NUMBER
1883
*
atom -> NUMBER
1883
>>
atom -> NUMBER
1883
<
atom -> NUMBER
1883
is
atom -> NUMBER
1883
(
atom -> NUMBER
1883
and
atom -> NUMBER
1883
not
atom -> NUMBER
1883
!=
atom -> NUMBER
1883
|
atom -> NUMBER
1883
in
atom -> NUMBER
1883
>
atom -> NUMBER
1883
>=
atom -> NUMBER
1883
//
atom -> NUMBER
1883
[
atom -> NUMBER
1884
or
atom -> NAME
1884
in
atom -> NAME
1884
^
atom -> NAME
1884
[
atom -> NAME
1884
==
atom -> NAME
1884
for
atom -> NAME
1884
<<
atom -> NAME
1884
**
atom -> NAME
1884
!=
atom -> NAME
1884
%
atom -> NAME
1884
@
atom -> NAME
1884
not
atom -> NAME
1884
>
atom -> NAME
1884
>=
atom -> NAME
1884
&
atom -> NAME
1884
*
atom -> NAME
1884
<
atom -> NAME
1884
-
atom -> NAME
1884
(
atom -> NAME
1884
>>
atom -> NAME
1884
+
atom -> NAME
1884
]
atom -> NAME
1884
//
atom -> NAME
1884
and
atom -> NAME
1884
<=
atom -> NAME
1884
is
atom -> NAME
1884
if
atom -> NAME
1884
/
atom -> NAME
1884
.
atom -> NAME
1884
|
atom -> NAME
1885
and_test
110
1885
atom_expr
111
1885
and_expr
112
1885
term
113
1885
factor
114
1885
shift_expr
115
1885
arith_expr
116
1885
NUMBER
117
1885
NAME
118
1885
[
119
1885
test_list_comp
2202
1885
{
121
1885
expr
122
1885
not_test
123
1885
False
124
1885
xor_expr
125
1885
atom
126
1885
STRING
127
1885
]
2203
1885
+
128
1885
(
129
1885
True
131
1885
-
132
1885
None
133
1885
comparison
134
1885
or_test
135
1885
test
136
1885
power
137
1885
~
138
1885
lambda
139
1885
lambdef
140
1885
not
141
1885
test_list
142
1886
}
2204
1887
in
147
1887
<
148
1887
>=
149
1887
not
150
1887
comp_op
2205
1887
!=
151
1887
>
152
1887
==
153
1887
is
154
1887
<=
155
1887
]
comparison -> expr
1887
or
comparison -> expr
1887
and
comparison -> expr
1887
for
comparison -> expr
1887
if
comparison -> expr
1888
*
atom -> False
1888
@
atom -> False
1888
<
atom -> False
1888
or
atom -> False
1888
is
atom -> False
1888
>>
atom -> False
1888
[
atom -> False
1888
/
atom -> False
1888
%
atom -> False
1888
.
atom -> False
1888
(
atom -> False
1888
in
atom -> False
1888
**
atom -> False
1888
==
atom -> False
1888
//
atom -> False
1888
+
atom -> False
1888
<<
atom -> False
1888
!=
atom -> False
1888
<=
atom -> False
1888
>
atom -> False
1888
^
atom -> False
1888
]
atom -> False
1888
if
atom -> False
1888
&
atom -> False
1888
and
atom -> False
1888
for
atom -> False
1888
|
atom -> False
1888
-
atom -> False
1888
not
atom -> False
1888
>=
atom -> False
1889
for
expr -> xor_expr
1889
not
expr -> xor_expr
1889
|
2206
1889
==
expr -> xor_expr
1889
in
expr -> xor_expr
1889
if
expr -> xor_expr
1889
>
expr -> xor_expr
1889
or
expr -> xor_expr
1889
]
expr -> xor_expr
1889
<=
expr -> xor_expr
1889
<
expr -> xor_expr
1889
is
expr -> xor_expr
1889
>=
expr -> xor_expr
1889
!=
expr -> xor_expr
1889
and
expr -> xor_expr
1890
[
2207
1890
(
2208
1890
.
2209
1890
trailer
2210
1890
<<
trailer_expr -> 
1890
trailer_expr
2211
1890
@
trailer_expr -> 
1890
!=
trailer_expr -> 
1890
-
trailer_expr -> 
1890
]
trailer_expr -> 
1890
^
trailer_expr -> 
1890
<
trailer_expr -> 
1890
for
trailer_expr -> 
1890
/
trailer_expr -> 
1890
is
trailer_expr -> 
1890
==
trailer_expr -> 
1890
&
trailer_expr -> 
1890
>=
trailer_expr -> 
1890
or
trailer_expr -> 
1890
in
trailer_expr -> 
1890
*
trailer_expr -> 
1890
not
trailer_expr -> 
1890
**
trailer_expr -> 
1890
<=
trailer_expr -> 
1890
+
trailer_expr -> 
1890
//
trailer_expr -> 
1890
%
trailer_expr -> 
1890
>
trailer_expr -> 
1890
|
trailer_expr -> 
1890
if
trailer_expr -> 
1890
>>
trailer_expr -> 
1890
and
trailer_expr -> 
1891
&
atom -> STRING
1891
**
atom -> STRING
1891
%
atom -> STRING
1891
]
atom -> STRING
1891
@
atom -> STRING
1891
/
atom -> STRING
1891
*
atom -> STRING
1891
^
atom -> STRING
1891
>=
atom -> STRING
1891
if
atom -> STRING
1891
<
atom -> STRING
1891
>>
atom -> STRING
1891
.
atom -> STRING
1891
for
atom -> STRING
1891
//
atom -> STRING
1891
+
atom -> STRING
1891
<<
atom -> STRING
1891
and
atom -> STRING
1891
[
atom -> STRING
1891
or
atom -> STRING
1891
in
atom -> STRING
1891
not
atom -> STRING
1891
>
atom -> STRING
1891
(
atom -> STRING
1891
!=
atom -> STRING
1891
is
atom -> STRING
1891
==
atom -> STRING
1891
-
atom -> STRING
1891
|
atom -> STRING
1891
<=
atom -> STRING
1892
atom_expr
1877
1892
NUMBER
1883
1892
NAME
1884
1892
[
1885
1892
{
1886
1892
False
1888
1892
atom
1890
1892
STRING
1891
1892
+
1892
1892
(
1893
1892
True
1894
1892
-
1895
1892
None
1896
1892
factor
2212
1892
power
1898
1892
~
1899
1893
and_test
217
1893
atom_expr
218
1893
and_expr
219
1893
term
220
1893
factor
221
1893
shift_expr
222
1893
arith_expr
223
1893
NUMBER
224
1893
NAME
225
1893
not
226
1893
[
227
1893
{
228
1893
expr
229
1893
test_list_comp
2213
1893
not_test
231
1893
False
232
1893
xor_expr
234
1893
STRING
235
1893
lambda
236
1893
atom
237
1893
+
238
1893
True
239
1893
-
240
1893
(
241
1893
None
242
1893
comparison
243
1893
power
244
1893
)
2214
1893
~
245
1893
or_test
246
1893
test
247
1893
lambdef
248
1893
test_list
249
1894
!=
atom -> True
1894
is
atom -> True
1894
|
atom -> True
1894
<=
atom -> True
1894
^
atom -> True
1894
%
atom -> True
1894
@
atom -> True
1894
**
atom -> True
1894
(
atom -> True
1894
not
atom -> True
1894
>>
atom -> True
1894
<
atom -> True
1894
==
atom -> True
1894
and
atom -> True
1894
in
atom -> True
1894
&
atom -> True
1894
.
atom -> True
1894
<<
atom -> True
1894
/
atom -> True
1894
*
atom -> True
1894
>
atom -> True
1894
+
atom -> True
1894
>=
atom -> True
1894
or
atom -> True
1894
[
atom -> True
1894
-
atom -> True
1894
for
atom -> True
1894
]
atom -> True
1894
//
atom -> True
1894
if
atom -> True
1895
atom_expr
1877
1895
NUMBER
1883
1895
NAME
1884
1895
[
1885
1895
factor
2215
1895
{
1886
1895
False
1888
1895
atom
1890
1895
STRING
1891
1895
+
1892
1895
(
1893
1895
True
1894
1895
-
1895
1895
None
1896
1895
power
1898
1895
~
1899
1896
!=
atom -> None
1896
//
atom -> None
1896
^
atom -> None
1896
>=
atom -> None
1896
&
atom -> None
1896
**
atom -> None
1896
<
atom -> None
1896
if
atom -> None
1896
*
atom -> None
1896
>
atom -> None
1896
@
atom -> None
1896
|
atom -> None
1896
-
atom -> None
1896
%
atom -> None
1896
not
atom -> None
1896
==
atom -> None
1896
in
atom -> None
1896
/
atom -> None
1896
or
atom -> None
1896
]
atom -> None
1896
and
atom -> None
1896
+
atom -> None
1896
(
atom -> None
1896
>>
atom -> None
1896
is
atom -> None
1896
for
atom -> None
1896
[
atom -> None
1896
<=
atom -> None
1896
<<
atom -> None
1896
.
atom -> None
1897
for
not_test -> comparison
1897
or
not_test -> comparison
1897
if
not_test -> comparison
1897
]
not_test -> comparison
1897
and
not_test -> comparison
1898
*
factor -> power
1898
>>
factor -> power
1898
>=
factor -> power
1898
<
factor -> power
1898
&
factor -> power
1898
for
factor -> power
1898
]
factor -> power
1898
@
factor -> power
1898
|
factor -> power
1898
!=
factor -> power
1898
<=
factor -> power
1898
//
factor -> power
1898
in
factor -> power
1898
and
factor -> power
1898
+
factor -> power
1898
>
factor -> power
1898
-
factor -> power
1898
not
factor -> power
1898
is
factor -> power
1898
==
factor -> power
1898
%
factor -> power
1898
if
factor -> power
1898
or
factor -> power
1898
^
factor -> power
1898
<<
factor -> power
1898
/
factor -> power
1899
atom_expr
1877
1899
NUMBER
1883
1899
NAME
1884
1899
[
1885
1899
factor
2216
1899
{
1886
1899
False
1888
1899
atom
1890
1899
STRING
1891
1899
+
1892
1899
(
1893
1899
True
1894
1899
-
1895
1899
None
1896
1899
power
1898
1899
~
1899
1900
and
2217
1900
]
and_test -> not_test
1900
or
and_test -> not_test
1900
if
and_test -> not_test
1900
for
and_test -> not_test
1901
comp_for
2218
1901
comp_if
2219
1901
]
comp_iter -> 
1901
if
2220
1901
comp_iter
2221
1901
for
455
1902
atom_expr
1877
1902
and_expr
1878
1902
term
1879
1902
factor
1880
1902
shift_expr
1881
1902
arith_expr
1882
1902
NUMBER
1883
1902
NAME
1884
1902
[
1885
1902
{
1886
1902
expr
1887
1902
False
1888
1902
xor_expr
1889
1902
atom
1890
1902
STRING
1891
1902
+
1892
1902
(
1893
1902
True
1894
1902
-
1895
1902
None
1896
1902
comparison
1897
1902
power
1898
1902
~
1899
1902
not_test
2222
1902
not
1902
1903
DEDENT
2223
1904
atom_expr
6
1904
factor
10
1904
[
3
1904
term
15
1904
STRING
43
1904
arith_expr
32
1904
NUMBER
8
1904
small_stmt
4
1904
NAME
37
1904
{
5
1904
suite
2224
1904
expr
7
1904
not
51
1904
True
9
1904
shift_expr
12
1904
atom
13
1904
xor_expr
14
1904
NEWLINE
942
1904
(
34
1904
None
29
1904
and_test
20
1904
and_expr
21
1904
False
23
1904
or_test
25
1904
test
33
1904
lambda
28
1904
+
30
1904
simple_stmt
943
1904
nonlocal
66
1904
-
36
1904
not_test
40
1904
power
47
1904
lambdef
41
1904
~
44
1904
comparison
48
1904
assert
67
1904
global_stmt
68
1904
continue
49
1904
expr_stmt
50
1904
test_list
62
1904
raise
69
1904
del_stmt
52
1904
yield_stmt
53
1904
raise_stmt
70
1904
yield
56
1904
assert_stmt
57
1904
global
71
1904
nonlocal_stmt
72
1904
break_stmt
58
1904
return_stmt
75
1904
return
59
1904
pass
60
1904
continue_stmt
61
1904
flow_stmt
76
1904
break
63
1904
del
64
1904
pass_stmt
65
1905
raise
classdef -> class NAME ( ) : suite
1905
{
classdef -> class NAME ( ) : suite
1905
[
classdef -> class NAME ( ) : suite
1905
for
classdef -> class NAME ( ) : suite
1905
@
classdef -> class NAME ( ) : suite
1905
(
classdef -> class NAME ( ) : suite
1905
STRING
classdef -> class NAME ( ) : suite
1905
pass
classdef -> class NAME ( ) : suite
1905
not
classdef -> class NAME ( ) : suite
1905
nonlocal
classdef -> class NAME ( ) : suite
1905
global
classdef -> class NAME ( ) : suite
1905
try
classdef -> class NAME ( ) : suite
1905
break
classdef -> class NAME ( ) : suite
1905
None
classdef -> class NAME ( ) : suite
1905
-
classdef -> class NAME ( ) : suite
1905
return
classdef -> class NAME ( ) : suite
1905
def
classdef -> class NAME ( ) : suite
1905
while
classdef -> class NAME ( ) : suite
1905
NEWLINE
classdef -> class NAME ( ) : suite
1905
~
classdef -> class NAME ( ) : suite
1905
continue
classdef -> class NAME ( ) : suite
1905
if
classdef -> class NAME ( ) : suite
1905
yield
classdef -> class NAME ( ) : suite
1905
del
classdef -> class NAME ( ) : suite
1905
lambda
classdef -> class NAME ( ) : suite
1905
+
classdef -> class NAME ( ) : suite
1905
NUMBER
classdef -> class NAME ( ) : suite
1905
with
classdef -> class NAME ( ) : suite
1905
assert
classdef -> class NAME ( ) : suite
1905
class
classdef -> class NAME ( ) : suite
1905
False
classdef -> class NAME ( ) : suite
1905
True
classdef -> class NAME ( ) : suite
1905
$
classdef -> class NAME ( ) : suite
1905
NAME
classdef -> class NAME ( ) : suite
1906
*
trailer -> [ subscriptlist ]
1906
not
trailer -> [ subscriptlist ]
1906
(
trailer -> [ subscriptlist ]
1906
:
trailer -> [ subscriptlist ]
1906
<<
trailer -> [ subscriptlist ]
1906
,
trailer -> [ subscriptlist ]
1906
>>
trailer -> [ subscriptlist ]
1906
//
trailer -> [ subscriptlist ]
1906
or
trailer -> [ subscriptlist ]
1906
]
trailer -> [ subscriptlist ]
1906
is
trailer -> [ subscriptlist ]
1906
[
trailer -> [ subscriptlist ]
1906
|
trailer -> [ subscriptlist ]
1906
%
trailer -> [ subscriptlist ]
1906
<=
trailer -> [ subscriptlist ]
1906
and
trailer -> [ subscriptlist ]
1906
**
trailer -> [ subscriptlist ]
1906
if
trailer -> [ subscriptlist ]
1906
-
trailer -> [ subscriptlist ]
1906
in
trailer -> [ subscriptlist ]
1906
^
trailer -> [ subscriptlist ]
1906
+
trailer -> [ subscriptlist ]
1906
>=
trailer -> [ subscriptlist ]
1906
.
trailer -> [ subscriptlist ]
1906
&
trailer -> [ subscriptlist ]
1906
/
trailer -> [ subscriptlist ]
1906
!=
trailer -> [ subscriptlist ]
1906
<
trailer -> [ subscriptlist ]
1906
==
trailer -> [ subscriptlist ]
1906
>
trailer -> [ subscriptlist ]
1906
@
trailer -> [ subscriptlist ]
1907
%
trailer -> ( arglist )
1907
and
trailer -> ( arglist )
1907
+
trailer -> ( arglist )
1907
or
trailer -> ( arglist )
1907
not
trailer -> ( arglist )
1907
-
trailer -> ( arglist )
1907
@
trailer -> ( arglist )
1907
[
trailer -> ( arglist )
1907
>>
trailer -> ( arglist )
1907
<=
trailer -> ( arglist )
1907
if
trailer -> ( arglist )
1907
]
trailer -> ( arglist )
1907
//
trailer -> ( arglist )
1907
==
trailer -> ( arglist )
1907
<<
trailer -> ( arglist )
1907
*
trailer -> ( arglist )
1907
<
trailer -> ( arglist )
1907
**
trailer -> ( arglist )
1907
is
trailer -> ( arglist )
1907
>
trailer -> ( arglist )
1907
!=
trailer -> ( arglist )
1907
/
trailer -> ( arglist )
1907
in
trailer -> ( arglist )
1907
.
trailer -> ( arglist )
1907
|
trailer -> ( arglist )
1907
>=
trailer -> ( arglist )
1907
&
trailer -> ( arglist )
1907
(
trailer -> ( arglist )
1907
^
trailer -> ( arglist )
1907
,
trailer -> ( arglist )
1907
:
trailer -> ( arglist )
1908
atom_expr
472
1908
and_expr
473
1908
term
474
1908
factor
475
1908
shift_expr
476
1908
arith_expr
477
1908
NUMBER
478
1908
NAME
479
1908
[
480
1908
{
481
1908
expr
482
1908
not_test
483
1908
False
484
1908
xor_expr
485
1908
atom
487
1908
STRING
488
1908
+
489
1908
(
490
1908
True
491
1908
None
493
1908
-
492
1908
or_test
494
1908
and_test
495
1908
power
496
1908
~
497
1908
lambda
498
1908
test
2225
1908
not
501
1908
comparison
502
1908
lambdef
503
1909
:
lambdef -> lambda varargslist : test
1909
,
lambdef -> lambda varargslist : test
1909
]
lambdef -> lambda varargslist : test
1910
atom_expr
908
1910
and_expr
909
1910
term
910
1910
factor
911
1910
shift_expr
912
1910
arith_expr
913
1910
NUMBER
914
1910
NAME
915
1910
[
916
1910
{
917
1910
expr
918
1910
not_test
919
1910
False
920
1910
xor_expr
921
1910
atom
922
1910
STRING
923
1910
maybe_test
2226
1910
+
924
1910
(
925
1910
True
926
1910
-
927
1910
None
928
1910
or_test
929
1910
and_test
931
1910
power
932
1910
~
933
1910
lambda
934
1910
not
935
1910
comparison
936
1910
,
maybe_test -> 
1910
test
2227
1910
lambdef
938
1910
]
maybe_test -> 
1911
,
subscript -> maybe_test : maybe_test sliceop
1911
]
subscript -> maybe_test : maybe_test sliceop
1912
)
lambdef -> lambda varargslist : test
1912
for
lambdef -> lambda varargslist : test
1912
,
lambdef -> lambda varargslist : test
1912
=
lambdef -> lambda varargslist : test
1913
)
trailer -> [ subscriptlist ]
1913
*
trailer -> [ subscriptlist ]
1913
for
trailer -> [ subscriptlist ]
1913
not
trailer -> [ subscriptlist ]
1913
(
trailer -> [ subscriptlist ]
1913
<<
trailer -> [ subscriptlist ]
1913
,
trailer -> [ subscriptlist ]
1913
>>
trailer -> [ subscriptlist ]
1913
//
trailer -> [ subscriptlist ]
1913
=
trailer -> [ subscriptlist ]
1913
or
trailer -> [ subscriptlist ]
1913
is
trailer -> [ subscriptlist ]
1913
[
trailer -> [ subscriptlist ]
1913
|
trailer -> [ subscriptlist ]
1913
%
trailer -> [ subscriptlist ]
1913
<=
trailer -> [ subscriptlist ]
1913
and
trailer -> [ subscriptlist ]
1913
**
trailer -> [ subscriptlist ]
1913
if
trailer -> [ subscriptlist ]
1913
-
trailer -> [ subscriptlist ]
1913
in
trailer -> [ subscriptlist ]
1913
^
trailer -> [ subscriptlist ]
1913
+
trailer -> [ subscriptlist ]
1913
>=
trailer -> [ subscriptlist ]
1913
.
trailer -> [ subscriptlist ]
1913
&
trailer -> [ subscriptlist ]
1913
/
trailer -> [ subscriptlist ]
1913
!=
trailer -> [ subscriptlist ]
1913
<
trailer -> [ subscriptlist ]
1913
==
trailer -> [ subscriptlist ]
1913
>
trailer -> [ subscriptlist ]
1913
@
trailer -> [ subscriptlist ]
1914
%
trailer -> ( arglist )
1914
and
trailer -> ( arglist )
1914
+
trailer -> ( arglist )
1914
=
trailer -> ( arglist )
1914
or
trailer -> ( arglist )
1914
not
trailer -> ( arglist )
1914
-
trailer -> ( arglist )
1914
@
trailer -> ( arglist )
1914
[
trailer -> ( arglist )
1914
>>
trailer -> ( arglist )
1914
<=
trailer -> ( arglist )
1914
if
trailer -> ( arglist )
1914
//
trailer -> ( arglist )
1914
==
trailer -> ( arglist )
1914
<<
trailer -> ( arglist )
1914
*
trailer -> ( arglist )
1914
<
trailer -> ( arglist )
1914
**
trailer -> ( arglist )
1914
is
trailer -> ( arglist )
1914
>
trailer -> ( arglist )
1914
!=
trailer -> ( arglist )
1914
/
trailer -> ( arglist )
1914
for
trailer -> ( arglist )
1914
in
trailer -> ( arglist )
1914
.
trailer -> ( arglist )
1914
|
trailer -> ( arglist )
1914
)
trailer -> ( arglist )
1914
>=
trailer -> ( arglist )
1914
&
trailer -> ( arglist )
1914
(
trailer -> ( arglist )
1914
^
trailer -> ( arglist )
1914
,
trailer -> ( arglist )
1915
and_test
505
1915
atom_expr
506
1915
and_expr
507
1915
term
508
1915
factor
509
1915
shift_expr
510
1915
arith_expr
511
1915
NUMBER
512
1915
NAME
513
1915
not
514
1915
[
515
1915
{
516
1915
expr
517
1915
not_test
519
1915
False
520
1915
xor_expr
521
1915
STRING
522
1915
lambda
523
1915
atom
525
1915
+
526
1915
True
527
1915
-
528
1915
or_test
529
1915
(
530
1915
None
531
1915
comparison
532
1915
power
533
1915
~
535
1915
test
2228
1915
lambdef
537
1916
and_test
217
1916
atom_expr
218
1916
and_expr
219
1916
term
220
1916
factor
221
1916
shift_expr
222
1916
arith_expr
223
1916
NUMBER
224
1916
NAME
225
1916
not
226
1916
[
227
1916
{
228
1916
expr
229
1916
not_test
231
1916
False
232
1916
xor_expr
234
1916
STRING
235
1916
atom
237
1916
+
238
1916
True
239
1916
-
240
1916
(
241
1916
None
242
1916
comparison
243
1916
power
244
1916
~
245
1916
or_test
2229
1917
*
power -> atom_expr ** factor
1917
in
power -> atom_expr ** factor
1917
)
power -> atom_expr ** factor
1917
<
power -> atom_expr ** factor
1917
if
power -> atom_expr ** factor
1917
-
power -> atom_expr ** factor
1917
>>
power -> atom_expr ** factor
1917
<=
power -> atom_expr ** factor
1917
and
power -> atom_expr ** factor
1917
==
power -> atom_expr ** factor
1917
%
power -> atom_expr ** factor
1917
/
power -> atom_expr ** factor
1917
^
power -> atom_expr ** factor
1917
<<
power -> atom_expr ** factor
1917
,
power -> atom_expr ** factor
1917
>
power -> atom_expr ** factor
1917
//
power -> atom_expr ** factor
1917
is
power -> atom_expr ** factor
1917
@
power -> atom_expr ** factor
1917
+
power -> atom_expr ** factor
1917
|
power -> atom_expr ** factor
1917
!=
power -> atom_expr ** factor
1917
>=
power -> atom_expr ** factor
1917
or
power -> atom_expr ** factor
1917
&
power -> atom_expr ** factor
1917
not
power -> atom_expr ** factor
1918
and
xor_expr -> and_expr ^ xor_expr
1918
<
xor_expr -> and_expr ^ xor_expr
1918
>
xor_expr -> and_expr ^ xor_expr
1918
in
xor_expr -> and_expr ^ xor_expr
1918
|
xor_expr -> and_expr ^ xor_expr
1918
<=
xor_expr -> and_expr ^ xor_expr
1918
)
xor_expr -> and_expr ^ xor_expr
1918
!=
xor_expr -> and_expr ^ xor_expr
1918
not
xor_expr -> and_expr ^ xor_expr
1918
or
xor_expr -> and_expr ^ xor_expr
1918
if
xor_expr -> and_expr ^ xor_expr
1918
is
xor_expr -> and_expr ^ xor_expr
1918
==
xor_expr -> and_expr ^ xor_expr
1918
,
xor_expr -> and_expr ^ xor_expr
1918
>=
xor_expr -> and_expr ^ xor_expr
1919
<=
arith_expr -> term + arith_expr
1919
&
arith_expr -> term + arith_expr
1919
>
arith_expr -> term + arith_expr
1919
,
arith_expr -> term + arith_expr
1919
)
arith_expr -> term + arith_expr
1919
>=
arith_expr -> term + arith_expr
1919
not
arith_expr -> term + arith_expr
1919
|
arith_expr -> term + arith_expr
1919
in
arith_expr -> term + arith_expr
1919
if
arith_expr -> term + arith_expr
1919
>>
arith_expr -> term + arith_expr
1919
is
arith_expr -> term + arith_expr
1919
^
arith_expr -> term + arith_expr
1919
<<
arith_expr -> term + arith_expr
1919
<
arith_expr -> term + arith_expr
1919
==
arith_expr -> term + arith_expr
1919
!=
arith_expr -> term + arith_expr
1919
or
arith_expr -> term + arith_expr
1919
and
arith_expr -> term + arith_expr
1920
<=
arith_expr -> term - arith_expr
1920
if
arith_expr -> term - arith_expr
1920
)
arith_expr -> term - arith_expr
1920
not
arith_expr -> term - arith_expr
1920
|
arith_expr -> term - arith_expr
1920
,
arith_expr -> term - arith_expr
1920
>>
arith_expr -> term - arith_expr
1920
>=
arith_expr -> term - arith_expr
1920
<<
arith_expr -> term - arith_expr
1920
is
arith_expr -> term - arith_expr
1920
!=
arith_expr -> term - arith_expr
1920
in
arith_expr -> term - arith_expr
1920
<
arith_expr -> term - arith_expr
1920
or
arith_expr -> term - arith_expr
1920
==
arith_expr -> term - arith_expr
1920
and
arith_expr -> term - arith_expr
1920
&
arith_expr -> term - arith_expr
1920
^
arith_expr -> term - arith_expr
1920
>
arith_expr -> term - arith_expr
1921
is
term -> factor // term
1921
if
term -> factor // term
1921
>
term -> factor // term
1921
)
term -> factor // term
1921
==
term -> factor // term
1921
+
term -> factor // term
1921
^
term -> factor // term
1921
-
term -> factor // term
1921
,
term -> factor // term
1921
in
term -> factor // term
1921
>>
term -> factor // term
1921
|
term -> factor // term
1921
<<
term -> factor // term
1921
!=
term -> factor // term
1921
&
term -> factor // term
1921
not
term -> factor // term
1921
<=
term -> factor // term
1921
<
term -> factor // term
1921
and
term -> factor // term
1921
>=
term -> factor // term
1921
or
term -> factor // term
1922
|
term -> factor * term
1922
-
term -> factor * term
1922
in
term -> factor * term
1922
and
term -> factor * term
1922
<<
term -> factor * term
1922
>=
term -> factor * term
1922
if
term -> factor * term
1922
or
term -> factor * term
1922
<=
term -> factor * term
1922
is
term -> factor * term
1922
^
term -> factor * term
1922
!=
term -> factor * term
1922
==
term -> factor * term
1922
,
term -> factor * term
1922
&
term -> factor * term
1922
>
term -> factor * term
1922
not
term -> factor * term
1922
<
term -> factor * term
1922
+
term -> factor * term
1922
>>
term -> factor * term
1922
)
term -> factor * term
1923
!=
term -> factor % term
1923
>>
term -> factor % term
1923
)
term -> factor % term
1923
==
term -> factor % term
1923
>=
term -> factor % term
1923
,
term -> factor % term
1923
^
term -> factor % term
1923
not
term -> factor % term
1923
or
term -> factor % term
1923
if
term -> factor % term
1923
<=
term -> factor % term
1923
<
term -> factor % term
1923
is
term -> factor % term
1923
-
term -> factor % term
1923
in
term -> factor % term
1923
>
term -> factor % term
1923
<<
term -> factor % term
1923
and
term -> factor % term
1923
|
term -> factor % term
1923
+
term -> factor % term
1923
&
term -> factor % term
1924
>=
term -> factor / term
1924
!=
term -> factor / term
1924
)
term -> factor / term
1924
not
term -> factor / term
1924
^
term -> factor / term
1924
in
term -> factor / term
1924
and
term -> factor / term
1924
<<
term -> factor / term
1924
,
term -> factor / term
1924
+
term -> factor / term
1924
>
term -> factor / term
1924
|
term -> factor / term
1924
or
term -> factor / term
1924
if
term -> factor / term
1924
>>
term -> factor / term
1924
<
term -> factor / term
1924
&
term -> factor / term
1924
-
term -> factor / term
1924
is
term -> factor / term
1924
==
term -> factor / term
1924
<=
term -> factor / term
1925
-
term -> factor @ term
1925
&
term -> factor @ term
1925
^
term -> factor @ term
1925
<
term -> factor @ term
1925
!=
term -> factor @ term
1925
<<
term -> factor @ term
1925
is
term -> factor @ term
1925
<=
term -> factor @ term
1925
and
term -> factor @ term
1925
+
term -> factor @ term
1925
,
term -> factor @ term
1925
>
term -> factor @ term
1925
if
term -> factor @ term
1925
not
term -> factor @ term
1925
>>
term -> factor @ term
1925
>=
term -> factor @ term
1925
|
term -> factor @ term
1925
in
term -> factor @ term
1925
==
term -> factor @ term
1925
or
term -> factor @ term
1925
)
term -> factor @ term
1926
if
and_expr -> shift_expr & and_expr
1926
!=
and_expr -> shift_expr & and_expr
1926
<=
and_expr -> shift_expr & and_expr
1926
not
and_expr -> shift_expr & and_expr
1926
,
and_expr -> shift_expr & and_expr
1926
)
and_expr -> shift_expr & and_expr
1926
^
and_expr -> shift_expr & and_expr
1926
|
and_expr -> shift_expr & and_expr
1926
or
and_expr -> shift_expr & and_expr
1926
in
and_expr -> shift_expr & and_expr
1926
>
and_expr -> shift_expr & and_expr
1926
and
and_expr -> shift_expr & and_expr
1926
==
and_expr -> shift_expr & and_expr
1926
<
and_expr -> shift_expr & and_expr
1926
is
and_expr -> shift_expr & and_expr
1926
>=
and_expr -> shift_expr & and_expr
1927
,
shift_expr -> arith_expr << shift_expr
1927
^
shift_expr -> arith_expr << shift_expr
1927
|
shift_expr -> arith_expr << shift_expr
1927
&
shift_expr -> arith_expr << shift_expr
1927
and
shift_expr -> arith_expr << shift_expr
1927
is
shift_expr -> arith_expr << shift_expr
1927
)
shift_expr -> arith_expr << shift_expr
1927
in
shift_expr -> arith_expr << shift_expr
1927
<=
shift_expr -> arith_expr << shift_expr
1927
<
shift_expr -> arith_expr << shift_expr
1927
not
shift_expr -> arith_expr << shift_expr
1927
==
shift_expr -> arith_expr << shift_expr
1927
>=
shift_expr -> arith_expr << shift_expr
1927
if
shift_expr -> arith_expr << shift_expr
1927
>
shift_expr -> arith_expr << shift_expr
1927
or
shift_expr -> arith_expr << shift_expr
1927
!=
shift_expr -> arith_expr << shift_expr
1928
or
shift_expr -> arith_expr >> shift_expr
1928
and
shift_expr -> arith_expr >> shift_expr
1928
>=
shift_expr -> arith_expr >> shift_expr
1928
not
shift_expr -> arith_expr >> shift_expr
1928
^
shift_expr -> arith_expr >> shift_expr
1928
is
shift_expr -> arith_expr >> shift_expr
1928
if
shift_expr -> arith_expr >> shift_expr
1928
in
shift_expr -> arith_expr >> shift_expr
1928
<=
shift_expr -> arith_expr >> shift_expr
1928
==
shift_expr -> arith_expr >> shift_expr
1928
,
shift_expr -> arith_expr >> shift_expr
1928
<
shift_expr -> arith_expr >> shift_expr
1928
!=
shift_expr -> arith_expr >> shift_expr
1928
|
shift_expr -> arith_expr >> shift_expr
1928
>
shift_expr -> arith_expr >> shift_expr
1928
)
shift_expr -> arith_expr >> shift_expr
1928
&
shift_expr -> arith_expr >> shift_expr
1929
and
atom -> [ test_list_comp ]
1929
<=
atom -> [ test_list_comp ]
1929
**
atom -> [ test_list_comp ]
1929
^
atom -> [ test_list_comp ]
1929
[
atom -> [ test_list_comp ]
1929
,
atom -> [ test_list_comp ]
1929
!=
atom -> [ test_list_comp ]
1929
<
atom -> [ test_list_comp ]
1929
/
atom -> [ test_list_comp ]
1929
-
atom -> [ test_list_comp ]
1929
>=
atom -> [ test_list_comp ]
1929
if
atom -> [ test_list_comp ]
1929
%
atom -> [ test_list_comp ]
1929
is
atom -> [ test_list_comp ]
1929
+
atom -> [ test_list_comp ]
1929
)
atom -> [ test_list_comp ]
1929
&
atom -> [ test_list_comp ]
1929
@
atom -> [ test_list_comp ]
1929
or
atom -> [ test_list_comp ]
1929
in
atom -> [ test_list_comp ]
1929
==
atom -> [ test_list_comp ]
1929
not
atom -> [ test_list_comp ]
1929
.
atom -> [ test_list_comp ]
1929
|
atom -> [ test_list_comp ]
1929
>
atom -> [ test_list_comp ]
1929
<<
atom -> [ test_list_comp ]
1929
//
atom -> [ test_list_comp ]
1929
(
atom -> [ test_list_comp ]
1929
*
atom -> [ test_list_comp ]
1929
>>
atom -> [ test_list_comp ]
1930
if
comparison -> expr comp_op comparison
1930
or
comparison -> expr comp_op comparison
1930
and
comparison -> expr comp_op comparison
1930
)
comparison -> expr comp_op comparison
1930
,
comparison -> expr comp_op comparison
1931
)
and_test -> not_test and and_test
1931
,
and_test -> not_test and and_test
1931
or
and_test -> not_test and and_test
1931
if
and_test -> not_test and and_test
1932
>
expr -> xor_expr | expr
1932
is
expr -> xor_expr | expr
1932
<
expr -> xor_expr | expr
1932
if
expr -> xor_expr | expr
1932
>=
expr -> xor_expr | expr
1932
or
expr -> xor_expr | expr
1932
and
expr -> xor_expr | expr
1932
in
expr -> xor_expr | expr
1932
!=
expr -> xor_expr | expr
1932
)
expr -> xor_expr | expr
1932
<=
expr -> xor_expr | expr
1932
==
expr -> xor_expr | expr
1932
,
expr -> xor_expr | expr
1932
not
expr -> xor_expr | expr
1933
,
lambdef -> lambda : test
1933
)
lambdef -> lambda : test
1934
atom_expr
1020
1934
and_expr
1021
1934
term
1022
1934
factor
1023
1934
shift_expr
1024
1934
arith_expr
1025
1934
NUMBER
1026
1934
NAME
1027
1934
not
1028
1934
[
1029
1934
{
1030
1934
expr
1031
1934
not_test
1032
1934
False
1033
1934
xor_expr
1034
1934
STRING
1035
1934
lambda
1036
1934
atom
1037
1934
+
1038
1934
True
1039
1934
-
1040
1934
(
1041
1934
None
1042
1934
power
1043
1934
and_test
1044
1934
~
1045
1934
test
2230
1934
or_test
1047
1934
comparison
1048
1934
lambdef
1049
1935
]
2231
1936
<
trailer -> ( )
1936
.
trailer -> ( )
1936
*
trailer -> ( )
1936
or
trailer -> ( )
1936
is
trailer -> ( )
1936
/
trailer -> ( )
1936
+
trailer -> ( )
1936
@
trailer -> ( )
1936
>
trailer -> ( )
1936
//
trailer -> ( )
1936
|
trailer -> ( )
1936
!=
trailer -> ( )
1936
&
trailer -> ( )
1936
^
trailer -> ( )
1936
)
trailer -> ( )
1936
<=
trailer -> ( )
1936
%
trailer -> ( )
1936
>>
trailer -> ( )
1936
**
trailer -> ( )
1936
and
trailer -> ( )
1936
(
trailer -> ( )
1936
,
trailer -> ( )
1936
==
trailer -> ( )
1936
if
trailer -> ( )
1936
[
trailer -> ( )
1936
<<
trailer -> ( )
1936
in
trailer -> ( )
1936
-
trailer -> ( )
1936
not
trailer -> ( )
1936
>=
trailer -> ( )
1937
)
2232
1938
|
trailer -> . NAME
1938
@
trailer -> . NAME
1938
^
trailer -> . NAME
1938
>
trailer -> . NAME
1938
+
trailer -> . NAME
1938
.
trailer -> . NAME
1938
!=
trailer -> . NAME
1938
<<
trailer -> . NAME
1938
<=
trailer -> . NAME
1938
[
trailer -> . NAME
1938
*
trailer -> . NAME
1938
(
trailer -> . NAME
1938
//
trailer -> . NAME
1938
**
trailer -> . NAME
1938
-
trailer -> . NAME
1938
)
trailer -> . NAME
1938
in
trailer -> . NAME
1938
>=
trailer -> . NAME
1938
,
trailer -> . NAME
1938
==
trailer -> . NAME
1938
or
trailer -> . NAME
1938
and
trailer -> . NAME
1938
%
trailer -> . NAME
1938
is
trailer -> . NAME
1938
<
trailer -> . NAME
1938
not
trailer -> . NAME
1938
/
trailer -> . NAME
1938
if
trailer -> . NAME
1938
&
trailer -> . NAME
1938
>>
trailer -> . NAME
1939
&
trailer_expr -> trailer trailer_expr
1939
not
trailer_expr -> trailer trailer_expr
1939
and
trailer_expr -> trailer trailer_expr
1939
+
trailer_expr -> trailer trailer_expr
1939
==
trailer_expr -> trailer trailer_expr
1939
**
trailer_expr -> trailer trailer_expr
1939
/
trailer_expr -> trailer trailer_expr
1939
^
trailer_expr -> trailer trailer_expr
1939
,
trailer_expr -> trailer trailer_expr
1939
>
trailer_expr -> trailer trailer_expr
1939
*
trailer_expr -> trailer trailer_expr
1939
//
trailer_expr -> trailer trailer_expr
1939
>>
trailer_expr -> trailer trailer_expr
1939
<<
trailer_expr -> trailer trailer_expr
1939
>=
trailer_expr -> trailer trailer_expr
1939
)
trailer_expr -> trailer trailer_expr
1939
<=
trailer_expr -> trailer trailer_expr
1939
-
trailer_expr -> trailer trailer_expr
1939
is
trailer_expr -> trailer trailer_expr
1939
in
trailer_expr -> trailer trailer_expr
1939
<
trailer_expr -> trailer trailer_expr
1939
|
trailer_expr -> trailer trailer_expr
1939
if
trailer_expr -> trailer trailer_expr
1939
%
trailer_expr -> trailer trailer_expr
1939
@
trailer_expr -> trailer trailer_expr
1939
!=
trailer_expr -> trailer trailer_expr
1939
or
trailer_expr -> trailer trailer_expr
1940
if
atom -> ( test_list_comp )
1940
or
atom -> ( test_list_comp )
1940
*
atom -> ( test_list_comp )
1940
|
atom -> ( test_list_comp )
1940
>>
atom -> ( test_list_comp )
1940
%
atom -> ( test_list_comp )
1940
not
atom -> ( test_list_comp )
1940
//
atom -> ( test_list_comp )
1940
+
atom -> ( test_list_comp )
1940
and
atom -> ( test_list_comp )
1940
>
atom -> ( test_list_comp )
1940
[
atom -> ( test_list_comp )
1940
^
atom -> ( test_list_comp )
1940
!=
atom -> ( test_list_comp )
1940
<<
atom -> ( test_list_comp )
1940
**
atom -> ( test_list_comp )
1940
is
atom -> ( test_list_comp )
1940
<=
atom -> ( test_list_comp )
1940
-
atom -> ( test_list_comp )
1940
&
atom -> ( test_list_comp )
1940
(
atom -> ( test_list_comp )
1940
,
atom -> ( test_list_comp )
1940
in
atom -> ( test_list_comp )
1940
)
atom -> ( test_list_comp )
1940
@
atom -> ( test_list_comp )
1940
.
atom -> ( test_list_comp )
1940
<
atom -> ( test_list_comp )
1940
/
atom -> ( test_list_comp )
1940
==
atom -> ( test_list_comp )
1940
>=
atom -> ( test_list_comp )
1941
,
or_test -> and_test or or_test
1941
)
or_test -> and_test or or_test
1941
if
or_test -> and_test or or_test
1942
else
2233
1943
DEDENT
2234
1944
:
2235
1945
:
2236
1946
atom_expr
6
1946
factor
10
1946
[
3
1946
term
15
1946
STRING
43
1946
arith_expr
32
1946
NUMBER
8
1946
small_stmt
2237
1946
NAME
37
1946
{
5
1946
expr
7
1946
not
51
1946
suite
2238
1946
True
9
1946
shift_expr
12
1946
atom
13
1946
xor_expr
14
1946
NEWLINE
2239
1946
(
34
1946
None
29
1946
and_test
20
1946
and_expr
21
1946
False
23
1946
or_test
25
1946
test
33
1946
lambda
28
1946
+
30
1946
simple_stmt
2240
1946
nonlocal
66
1946
-
36
1946
not_test
40
1946
power
47
1946
lambdef
41
1946
~
44
1946
comparison
48
1946
assert
67
1946
global_stmt
68
1946
continue
49
1946
expr_stmt
50
1946
test_list
62
1946
raise
69
1946
del_stmt
52
1946
yield_stmt
53
1946
raise_stmt
70
1946
yield
56
1946
assert_stmt
57
1946
global
71
1946
nonlocal_stmt
72
1946
break_stmt
58
1946
return_stmt
75
1946
return
59
1946
pass
60
1946
continue_stmt
61
1946
flow_stmt
76
1946
break
63
1946
del
64
1946
pass_stmt
65
1947
atom_expr
6
1947
factor
10
1947
[
3
1947
term
15
1947
STRING
43
1947
arith_expr
32
1947
NUMBER
8
1947
small_stmt
4
1947
suite
2241
1947
NAME
37
1947
{
5
1947
expr
7
1947
not
51
1947
True
9
1947
shift_expr
12
1947
atom
13
1947
xor_expr
14
1947
NEWLINE
942
1947
(
34
1947
None
29
1947
and_test
20
1947
and_expr
21
1947
False
23
1947
or_test
25
1947
test
33
1947
lambda
28
1947
+
30
1947
simple_stmt
943
1947
nonlocal
66
1947
-
36
1947
not_test
40
1947
power
47
1947
lambdef
41
1947
~
44
1947
comparison
48
1947
assert
67
1947
global_stmt
68
1947
continue
49
1947
expr_stmt
50
1947
test_list
62
1947
raise
69
1947
del_stmt
52
1947
yield_stmt
53
1947
raise_stmt
70
1947
yield
56
1947
assert_stmt
57
1947
global
71
1947
nonlocal_stmt
72
1947
break_stmt
58
1947
return_stmt
75
1947
return
59
1947
pass
60
1947
continue_stmt
61
1947
flow_stmt
76
1947
break
63
1947
del
64
1947
pass_stmt
65
1948
atom_expr
1560
1948
NUMBER
1566
1948
NAME
1568
1948
[
1569
1948
{
1570
1948
False
1572
1948
STRING
1574
1948
+
1576
1948
True
1577
1948
(
1578
1948
None
1579
1948
-
1580
1948
atom
1582
1948
power
1583
1948
~
1584
1948
factor
2242
1949
atom_expr
1560
1949
and_expr
1561
1949
term
1562
1949
factor
1563
1949
shift_expr
1564
1949
arith_expr
1565
1949
NUMBER
1566
1949
NAME
1568
1949
[
1569
1949
{
1570
1949
False
1572
1949
STRING
1574
1949
xor_expr
2243
1949
+
1576
1949
True
1577
1949
(
1578
1949
None
1579
1949
-
1580
1949
atom
1582
1949
power
1583
1949
~
1584
1950
atom_expr
1560
1950
factor
1563
1950
term
1562
1950
NUMBER
1566
1950
NAME
1568
1950
[
1569
1950
{
1570
1950
False
1572
1950
STRING
1574
1950
+
1576
1950
True
1577
1950
(
1578
1950
None
1579
1950
-
1580
1950
arith_expr
2244
1950
atom
1582
1950
power
1583
1950
~
1584
1951
atom_expr
1560
1951
factor
1563
1951
term
1562
1951
NUMBER
1566
1951
NAME
1568
1951
[
1569
1951
{
1570
1951
False
1572
1951
STRING
1574
1951
+
1576
1951
True
1577
1951
(
1578
1951
None
1579
1951
-
1580
1951
arith_expr
2245
1951
atom
1582
1951
power
1583
1951
~
1584
1952
atom_expr
1560
1952
factor
1563
1952
NUMBER
1566
1952
NAME
1568
1952
[
1569
1952
{
1570
1952
False
1572
1952
STRING
1574
1952
+
1576
1952
term
2246
1952
True
1577
1952
(
1578
1952
None
1579
1952
-
1580
1952
atom
1582
1952
power
1583
1952
~
1584
1953
atom_expr
1560
1953
factor
1563
1953
NUMBER
1566
1953
NAME
1568
1953
[
1569
1953
{
1570
1953
term
2247
1953
False
1572
1953
STRING
1574
1953
+
1576
1953
True
1577
1953
(
1578
1953
None
1579
1953
-
1580
1953
atom
1582
1953
power
1583
1953
~
1584
1954
atom_expr
1560
1954
factor
1563
1954
NUMBER
1566
1954
NAME
1568
1954
[
1569
1954
{
1570
1954
False
1572
1954
STRING
1574
1954
+
1576
1954
term
2248
1954
True
1577
1954
(
1578
1954
None
1579
1954
-
1580
1954
atom
1582
1954
power
1583
1954
~
1584
1955
atom_expr
1560
1955
factor
1563
1955
NUMBER
1566
1955
NAME
1568
1955
[
1569
1955
{
1570
1955
False
1572
1955
STRING
1574
1955
+
1576
1955
True
1577
1955
(
1578
1955
None
1579
1955
-
1580
1955
term
2249
1955
atom
1582
1955
power
1583
1955
~
1584
1956
atom_expr
1560
1956
term
2250
1956
factor
1563
1956
NUMBER
1566
1956
NAME
1568
1956
[
1569
1956
{
1570
1956
False
1572
1956
STRING
1574
1956
+
1576
1956
True
1577
1956
(
1578
1956
None
1579
1956
-
1580
1956
atom
1582
1956
power
1583
1956
~
1584
1957
atom_expr
1560
1957
factor
1563
1957
term
1562
1957
shift_expr
1564
1957
arith_expr
1565
1957
NUMBER
1566
1957
NAME
1568
1957
[
1569
1957
{
1570
1957
False
1572
1957
STRING
1574
1957
+
1576
1957
True
1577
1957
(
1578
1957
None
1579
1957
-
1580
1957
atom
1582
1957
and_expr
2251
1957
power
1583
1957
~
1584
1958
atom_expr
1560
1958
factor
1563
1958
term
1562
1958
arith_expr
1565
1958
NUMBER
1566
1958
NAME
1568
1958
[
1569
1958
{
1570
1958
False
1572
1958
STRING
1574
1958
+
1576
1958
True
1577
1958
(
1578
1958
None
1579
1958
-
1580
1958
atom
1582
1958
power
1583
1958
~
1584
1958
shift_expr
2252
1959
atom_expr
1560
1959
factor
1563
1959
term
1562
1959
arith_expr
1565
1959
NUMBER
1566
1959
NAME
1568
1959
[
1569
1959
{
1570
1959
False
1572
1959
STRING
1574
1959
+
1576
1959
shift_expr
2253
1959
True
1577
1959
(
1578
1959
-
1580
1959
None
1579
1959
atom
1582
1959
power
1583
1959
~
1584
1960
atom_expr
590
1960
and_expr
591
1960
term
592
1960
[
593
1960
shift_expr
594
1960
arith_expr
595
1960
NUMBER
596
1960
NAME
597
1960
factor
598
1960
{
599
1960
expr
600
1960
False
601
1960
xor_expr
602
1960
STRING
603
1960
+
604
1960
True
605
1960
-
606
1960
(
607
1960
None
608
1960
atom
609
1960
power
610
1960
~
611
1960
not_test
612
1960
or_test
2254
1960
not
613
1960
comparison
614
1960
and_test
615
1961
]
2255
1962
in
atom -> [ ]
1962
>=
atom -> [ ]
1962
%
atom -> [ ]
1962
:
atom -> [ ]
1962
is
atom -> [ ]
1962
^
atom -> [ ]
1962
//
atom -> [ ]
1962
or
atom -> [ ]
1962
not
atom -> [ ]
1962
[
atom -> [ ]
1962
and
atom -> [ ]
1962
/
atom -> [ ]
1962
!=
atom -> [ ]
1962
>
atom -> [ ]
1962
&
atom -> [ ]
1962
**
atom -> [ ]
1962
@
atom -> [ ]
1962
==
atom -> [ ]
1962
<<
atom -> [ ]
1962
if
atom -> [ ]
1962
<
atom -> [ ]
1962
(
atom -> [ ]
1962
as
atom -> [ ]
1962
<=
atom -> [ ]
1962
*
atom -> [ ]
1962
.
atom -> [ ]
1962
>>
atom -> [ ]
1962
|
atom -> [ ]
1962
-
atom -> [ ]
1962
+
atom -> [ ]
1963
<<
atom -> { }
1963
+
atom -> { }
1963
//
atom -> { }
1963
is
atom -> { }
1963
>=
atom -> { }
1963
<=
atom -> { }
1963
>
atom -> { }
1963
*
atom -> { }
1963
^
atom -> { }
1963
%
atom -> { }
1963
>>
atom -> { }
1963
:
atom -> { }
1963
.
atom -> { }
1963
not
atom -> { }
1963
==
atom -> { }
1963
if
atom -> { }
1963
in
atom -> { }
1963
<
atom -> { }
1963
|
atom -> { }
1963
(
atom -> { }
1963
/
atom -> { }
1963
as
atom -> { }
1963
and
atom -> { }
1963
**
atom -> { }
1963
@
atom -> { }
1963
-
atom -> { }
1963
&
atom -> { }
1963
!=
atom -> { }
1963
or
atom -> { }
1963
[
atom -> { }
1964
atom_expr
1560
1964
and_expr
1561
1964
term
1562
1964
factor
1563
1964
shift_expr
1564
1964
arith_expr
1565
1964
NUMBER
1566
1964
NAME
1568
1964
[
1569
1964
{
1570
1964
expr
1571
1964
False
1572
1964
xor_expr
1573
1964
STRING
1574
1964
comparison
2256
1964
+
1576
1964
True
1577
1964
(
1578
1964
None
1579
1964
-
1580
1964
atom
1582
1964
power
1583
1964
~
1584
1965
atom_expr
1560
1965
and_expr
1561
1965
term
1562
1965
factor
1563
1965
shift_expr
1564
1965
arith_expr
1565
1965
NUMBER
1566
1965
NAME
1568
1965
[
1569
1965
{
1570
1965
False
1572
1965
xor_expr
1573
1965
STRING
1574
1965
+
1576
1965
True
1577
1965
(
1578
1965
None
1579
1965
-
1580
1965
expr
2257
1965
atom
1582
1965
power
1583
1965
~
1584
1966
NAME
2258
1967
atom_expr
6
1967
factor
10
1967
[
3
1967
term
15
1967
STRING
43
1967
arith_expr
32
1967
NUMBER
8
1967
small_stmt
1972
1967
NAME
37
1967
{
5
1967
expr
7
1967
not
51
1967
True
9
1967
shift_expr
12
1967
atom
13
1967
xor_expr
14
1967
NEWLINE
1973
1967
(
34
1967
None
29
1967
and_test
20
1967
and_expr
21
1967
False
23
1967
or_test
25
1967
test
33
1967
lambda
28
1967
+
30
1967
suite
2259
1967
simple_stmt
1974
1967
nonlocal
66
1967
-
36
1967
not_test
40
1967
power
47
1967
lambdef
41
1967
~
44
1967
comparison
48
1967
assert
67
1967
global_stmt
68
1967
continue
49
1967
expr_stmt
50
1967
test_list
62
1967
raise
69
1967
del_stmt
52
1967
yield_stmt
53
1967
raise_stmt
70
1967
yield
56
1967
assert_stmt
57
1967
global
71
1967
nonlocal_stmt
72
1967
break_stmt
58
1967
return_stmt
75
1967
return
59
1967
pass
60
1967
continue_stmt
61
1967
flow_stmt
76
1967
break
63
1967
del
64
1967
pass_stmt
65
1968
<<
factor -> + factor
1968
&
factor -> + factor
1968
>
factor -> + factor
1968
if
factor -> + factor
1968
not
factor -> + factor
1968
as
factor -> + factor
1968
+
factor -> + factor
1968
^
factor -> + factor
1968
==
factor -> + factor
1968
/
factor -> + factor
1968
|
factor -> + factor
1968
>=
factor -> + factor
1968
%
factor -> + factor
1968
<
factor -> + factor
1968
is
factor -> + factor
1968
or
factor -> + factor
1968
@
factor -> + factor
1968
//
factor -> + factor
1968
and
factor -> + factor
1968
-
factor -> + factor
1968
in
factor -> + factor
1968
*
factor -> + factor
1968
:
factor -> + factor
1968
!=
factor -> + factor
1968
>>
factor -> + factor
1968
<=
factor -> + factor
1969
)
2260
1970
>=
atom -> ( )
1970
>>
atom -> ( )
1970
not
atom -> ( )
1970
if
atom -> ( )
1970
&
atom -> ( )
1970
^
atom -> ( )
1970
.
atom -> ( )
1970
/
atom -> ( )
1970
in
atom -> ( )
1970
:
atom -> ( )
1970
>
atom -> ( )
1970
%
atom -> ( )
1970
(
atom -> ( )
1970
==
atom -> ( )
1970
[
atom -> ( )
1970
<=
atom -> ( )
1970
+
atom -> ( )
1970
|
atom -> ( )
1970
-
atom -> ( )
1970
or
atom -> ( )
1970
as
atom -> ( )
1970
@
atom -> ( )
1970
<<
atom -> ( )
1970
is
atom -> ( )
1970
**
atom -> ( )
1970
*
atom -> ( )
1970
and
atom -> ( )
1970
<
atom -> ( )
1970
!=
atom -> ( )
1970
//
atom -> ( )
1971
@
factor -> - factor
1971
^
factor -> - factor
1971
==
factor -> - factor
1971
in
factor -> - factor
1971
>>
factor -> - factor
1971
//
factor -> - factor
1971
and
factor -> - factor
1971
:
factor -> - factor
1971
<=
factor -> - factor
1971
!=
factor -> - factor
1971
-
factor -> - factor
1971
&
factor -> - factor
1971
as
factor -> - factor
1971
not
factor -> - factor
1971
>
factor -> - factor
1971
*
factor -> - factor
1971
%
factor -> - factor
1971
/
factor -> - factor
1971
<
factor -> - factor
1971
|
factor -> - factor
1971
+
factor -> - factor
1971
if
factor -> - factor
1971
<<
factor -> - factor
1971
is
factor -> - factor
1971
or
factor -> - factor
1971
>=
factor -> - factor
1972
NEWLINE
2261
1973
INDENT
2262
1974
continue
suite -> simple_stmt
1974
not
suite -> simple_stmt
1974
yield
suite -> simple_stmt
1974
for
suite -> simple_stmt
1974
False
suite -> simple_stmt
1974
NUMBER
suite -> simple_stmt
1974
with
suite -> simple_stmt
1974
lambda
suite -> simple_stmt
1974
{
suite -> simple_stmt
1974
None
suite -> simple_stmt
1974
(
suite -> simple_stmt
1974
while
suite -> simple_stmt
1974
if
suite -> simple_stmt
1974
try
suite -> simple_stmt
1974
NAME
suite -> simple_stmt
1974
else
suite -> simple_stmt
1974
True
suite -> simple_stmt
1974
global
suite -> simple_stmt
1974
STRING
suite -> simple_stmt
1974
except
suite -> simple_stmt
1974
pass
suite -> simple_stmt
1974
$
suite -> simple_stmt
1974
[
suite -> simple_stmt
1974
assert
suite -> simple_stmt
1974
NEWLINE
suite -> simple_stmt
1974
raise
suite -> simple_stmt
1974
-
suite -> simple_stmt
1974
class
suite -> simple_stmt
1974
del
suite -> simple_stmt
1974
@
suite -> simple_stmt
1974
finally
suite -> simple_stmt
1974
~
suite -> simple_stmt
1974
+
suite -> simple_stmt
1974
return
suite -> simple_stmt
1974
break
suite -> simple_stmt
1974
nonlocal
suite -> simple_stmt
1974
def
suite -> simple_stmt
1975
except_clause
2263
1975
maybe_except_clause
2264
1975
except
1057
1975
break
maybe_except_clause -> 
1975
class
maybe_except_clause -> 
1975
False
maybe_except_clause -> 
1975
for
maybe_except_clause -> 
1975
@
maybe_except_clause -> 
1975
lambda
maybe_except_clause -> 
1975
{
maybe_except_clause -> 
1975
while
maybe_except_clause -> 
1975
NUMBER
maybe_except_clause -> 
1975
def
maybe_except_clause -> 
1975
else
maybe_except_clause -> 
1975
-
maybe_except_clause -> 
1975
del
maybe_except_clause -> 
1975
None
maybe_except_clause -> 
1975
True
maybe_except_clause -> 
1975
STRING
maybe_except_clause -> 
1975
pass
maybe_except_clause -> 
1975
nonlocal
maybe_except_clause -> 
1975
+
maybe_except_clause -> 
1975
try
maybe_except_clause -> 
1975
continue
maybe_except_clause -> 
1975
assert
maybe_except_clause -> 
1975
NAME
maybe_except_clause -> 
1975
~
maybe_except_clause -> 
1975
NEWLINE
maybe_except_clause -> 
1975
[
maybe_except_clause -> 
1975
if
maybe_except_clause -> 
1975
return
maybe_except_clause -> 
1975
raise
maybe_except_clause -> 
1975
$
maybe_except_clause -> 
1975
yield
maybe_except_clause -> 
1975
(
maybe_except_clause -> 
1975
finally
maybe_except_clause -> 
1975
not
maybe_except_clause -> 
1975
with
maybe_except_clause -> 
1975
global
maybe_except_clause -> 
1976
atom_expr
472
1976
and_expr
473
1976
term
474
1976
factor
475
1976
shift_expr
476
1976
arith_expr
477
1976
NUMBER
478
1976
NAME
479
1976
[
480
1976
{
481
1976
expr
482
1976
not_test
483
1976
False
484
1976
xor_expr
485
1976
atom
487
1976
STRING
488
1976
+
489
1976
(
490
1976
True
491
1976
-
492
1976
None
493
1976
subscriptlist
2265
1976
or_test
494
1976
and_test
495
1976
power
496
1976
~
497
1976
lambda
498
1976
:
maybe_test -> 
1976
maybe_test
499
1976
test
500
1976
not
501
1976
comparison
502
1976
lambdef
503
1976
subscript
504
1977
and_test
505
1977
atom_expr
506
1977
and_expr
507
1977
term
508
1977
factor
509
1977
shift_expr
510
1977
arith_expr
511
1977
NUMBER
512
1977
NAME
513
1977
not
514
1977
[
515
1977
{
516
1977
expr
517
1977
not_test
519
1977
False
520
1977
xor_expr
521
1977
STRING
522
1977
lambda
523
1977
arglist
2266
1977
atom
525
1977
)
2267
1977
+
526
1977
True
527
1977
-
528
1977
or_test
529
1977
(
530
1977
None
531
1977
comparison
532
1977
power
533
1977
test
534
1977
~
535
1977
*
536
1977
lambdef
537
1977
**
538
1977
argument
539
1978
NAME
2268
1979
trailer_expr
2269
1979
[
1976
1979
(
1977
1979
.
1978
1979
trailer
1979
1979
<<
trailer_expr -> 
1979
@
trailer_expr -> 
1979
!=
trailer_expr -> 
1979
-
trailer_expr -> 
1979
^
trailer_expr -> 
1979
<
trailer_expr -> 
1979
/
trailer_expr -> 
1979
is
trailer_expr -> 
1979
==
trailer_expr -> 
1979
&
trailer_expr -> 
1979
>=
trailer_expr -> 
1979
or
trailer_expr -> 
1979
in
trailer_expr -> 
1979
*
trailer_expr -> 
1979
not
trailer_expr -> 
1979
**
trailer_expr -> 
1979
<=
trailer_expr -> 
1979
+
trailer_expr -> 
1979
as
trailer_expr -> 
1979
//
trailer_expr -> 
1979
%
trailer_expr -> 
1979
>
trailer_expr -> 
1979
:
trailer_expr -> 
1979
|
trailer_expr -> 
1979
if
trailer_expr -> 
1979
and
trailer_expr -> 
1979
>>
trailer_expr -> 
1980
==
atom_expr -> atom trailer_expr
1980
%
atom_expr -> atom trailer_expr
1980
+
atom_expr -> atom trailer_expr
1980
:
atom_expr -> atom trailer_expr
1980
not
atom_expr -> atom trailer_expr
1980
or
atom_expr -> atom trailer_expr
1980
//
atom_expr -> atom trailer_expr
1980
and
atom_expr -> atom trailer_expr
1980
!=
atom_expr -> atom trailer_expr
1980
<<
atom_expr -> atom trailer_expr
1980
if
atom_expr -> atom trailer_expr
1980
-
atom_expr -> atom trailer_expr
1980
>>
atom_expr -> atom trailer_expr
1980
**
atom_expr -> atom trailer_expr
1980
/
atom_expr -> atom trailer_expr
1980
<
atom_expr -> atom trailer_expr
1980
in
atom_expr -> atom trailer_expr
1980
&
atom_expr -> atom trailer_expr
1980
is
atom_expr -> atom trailer_expr
1980
as
atom_expr -> atom trailer_expr
1980
|
atom_expr -> atom trailer_expr
1980
>
atom_expr -> atom trailer_expr
1980
>=
atom_expr -> atom trailer_expr
1980
<=
atom_expr -> atom trailer_expr
1980
@
atom_expr -> atom trailer_expr
1980
*
atom_expr -> atom trailer_expr
1980
^
atom_expr -> atom trailer_expr
1981
<<
factor -> ~ factor
1981
in
factor -> ~ factor
1981
<=
factor -> ~ factor
1981
if
factor -> ~ factor
1981
|
factor -> ~ factor
1981
<
factor -> ~ factor
1981
>>
factor -> ~ factor
1981
==
factor -> ~ factor
1981
>=
factor -> ~ factor
1981
!=
factor -> ~ factor
1981
//
factor -> ~ factor
1981
*
factor -> ~ factor
1981
/
factor -> ~ factor
1981
+
factor -> ~ factor
1981
is
factor -> ~ factor
1981
not
factor -> ~ factor
1981
and
factor -> ~ factor
1981
^
factor -> ~ factor
1981
@
factor -> ~ factor
1981
:
factor -> ~ factor
1981
as
factor -> ~ factor
1981
>
factor -> ~ factor
1981
-
factor -> ~ factor
1981
or
factor -> ~ factor
1981
&
factor -> ~ factor
1981
%
factor -> ~ factor
1982
:
2270
1983
atom_expr
1560
1983
and_expr
1561
1983
term
1562
1983
factor
1563
1983
shift_expr
1564
1983
arith_expr
1565
1983
NUMBER
1566
1983
or_test
1567
1983
NAME
1568
1983
[
1569
1983
{
1570
1983
expr
1571
1983
False
1572
1983
xor_expr
1573
1983
STRING
1574
1983
+
1576
1983
True
1577
1983
(
1578
1983
None
1579
1983
-
1580
1983
atom
1582
1983
power
1583
1983
~
1584
1983
lambda
1585
1983
test
2271
1983
not_test
1586
1983
and_test
1587
1983
not
1588
1983
comparison
1589
1983
lambdef
1590
1984
atom_expr
1560
1984
and_expr
1561
1984
term
1562
1984
factor
1563
1984
shift_expr
1564
1984
arith_expr
1565
1984
NUMBER
1566
1984
NAME
1568
1984
[
1569
1984
{
1570
1984
expr
1571
1984
False
1572
1984
xor_expr
1573
1984
STRING
1574
1984
+
1576
1984
True
1577
1984
(
1578
1984
None
1579
1984
-
1580
1984
atom
1582
1984
power
1583
1984
~
1584
1984
and_test
2272
1984
not_test
1586
1984
not
1588
1984
comparison
1589
1985
atom_expr
1560
1985
and_expr
1561
1985
term
1562
1985
factor
1563
1985
shift_expr
1564
1985
arith_expr
1565
1985
NUMBER
1566
1985
NAME
1568
1985
[
1569
1985
{
1570
1985
expr
1571
1985
False
1572
1985
xor_expr
1573
1985
STRING
1574
1985
+
1576
1985
True
1577
1985
(
1578
1985
None
1579
1985
-
1580
1985
atom
1582
1985
power
1583
1985
~
1584
1985
not_test
1586
1985
and_test
1587
1985
or_test
2273
1985
not
1588
1985
comparison
1589
1986
if
not_test -> not not_test
1986
:
not_test -> not not_test
1986
or
not_test -> not not_test
1986
and
not_test -> not not_test
1986
as
not_test -> not not_test
1987
:
2274
1988
@
decorated -> decorators funcdef
1988
raise
decorated -> decorators funcdef
1988
del
decorated -> decorators funcdef
1988
None
decorated -> decorators funcdef
1988
try
decorated -> decorators funcdef
1988
True
decorated -> decorators funcdef
1988
(
decorated -> decorators funcdef
1988
def
decorated -> decorators funcdef
1988
with
decorated -> decorators funcdef
1988
{
decorated -> decorators funcdef
1988
for
decorated -> decorators funcdef
1988
DEDENT
decorated -> decorators funcdef
1988
NUMBER
decorated -> decorators funcdef
1988
~
decorated -> decorators funcdef
1988
assert
decorated -> decorators funcdef
1988
STRING
decorated -> decorators funcdef
1988
NAME
decorated -> decorators funcdef
1988
break
decorated -> decorators funcdef
1988
if
decorated -> decorators funcdef
1988
not
decorated -> decorators funcdef
1988
yield
decorated -> decorators funcdef
1988
lambda
decorated -> decorators funcdef
1988
class
decorated -> decorators funcdef
1988
False
decorated -> decorators funcdef
1988
-
decorated -> decorators funcdef
1988
[
decorated -> decorators funcdef
1988
+
decorated -> decorators funcdef
1988
pass
decorated -> decorators funcdef
1988
while
decorated -> decorators funcdef
1988
continue
decorated -> decorators funcdef
1988
return
decorated -> decorators funcdef
1988
nonlocal
decorated -> decorators funcdef
1988
global
decorated -> decorators funcdef
1989
with
decorated -> decorators classdef
1989
[
decorated -> decorators classdef
1989
break
decorated -> decorators classdef
1989
nonlocal
decorated -> decorators classdef
1989
for
decorated -> decorators classdef
1989
NUMBER
decorated -> decorators classdef
1989
continue
decorated -> decorators classdef
1989
STRING
decorated -> decorators classdef
1989
return
decorated -> decorators classdef
1989
try
decorated -> decorators classdef
1989
raise
decorated -> decorators classdef
1989
NAME
decorated -> decorators classdef
1989
class
decorated -> decorators classdef
1989
pass
decorated -> decorators classdef
1989
def
decorated -> decorators classdef
1989
if
decorated -> decorators classdef
1989
not
decorated -> decorators classdef
1989
global
decorated -> decorators classdef
1989
-
decorated -> decorators classdef
1989
True
decorated -> decorators classdef
1989
(
decorated -> decorators classdef
1989
False
decorated -> decorators classdef
1989
yield
decorated -> decorators classdef
1989
DEDENT
decorated -> decorators classdef
1989
del
decorated -> decorators classdef
1989
assert
decorated -> decorators classdef
1989
lambda
decorated -> decorators classdef
1989
~
decorated -> decorators classdef
1989
@
decorated -> decorators classdef
1989
+
decorated -> decorators classdef
1989
None
decorated -> decorators classdef
1989
{
decorated -> decorators classdef
1989
while
decorated -> decorators classdef
1990
lambda
simple_stmt -> small_stmt NEWLINE
1990
yield
simple_stmt -> small_stmt NEWLINE
1990
NAME
simple_stmt -> small_stmt NEWLINE
1990
STRING
simple_stmt -> small_stmt NEWLINE
1990
pass
simple_stmt -> small_stmt NEWLINE
1990
None
simple_stmt -> small_stmt NEWLINE
1990
(
simple_stmt -> small_stmt NEWLINE
1990
assert
simple_stmt -> small_stmt NEWLINE
1990
@
simple_stmt -> small_stmt NEWLINE
1990
def
simple_stmt -> small_stmt NEWLINE
1990
if
simple_stmt -> small_stmt NEWLINE
1990
+
simple_stmt -> small_stmt NEWLINE
1990
continue
simple_stmt -> small_stmt NEWLINE
1990
not
simple_stmt -> small_stmt NEWLINE
1990
try
simple_stmt -> small_stmt NEWLINE
1990
False
simple_stmt -> small_stmt NEWLINE
1990
with
simple_stmt -> small_stmt NEWLINE
1990
global
simple_stmt -> small_stmt NEWLINE
1990
return
simple_stmt -> small_stmt NEWLINE
1990
raise
simple_stmt -> small_stmt NEWLINE
1990
True
simple_stmt -> small_stmt NEWLINE
1990
-
simple_stmt -> small_stmt NEWLINE
1990
del
simple_stmt -> small_stmt NEWLINE
1990
DEDENT
simple_stmt -> small_stmt NEWLINE
1990
NUMBER
simple_stmt -> small_stmt NEWLINE
1990
{
simple_stmt -> small_stmt NEWLINE
1990
for
simple_stmt -> small_stmt NEWLINE
1990
class
simple_stmt -> small_stmt NEWLINE
1990
break
simple_stmt -> small_stmt NEWLINE
1990
[
simple_stmt -> small_stmt NEWLINE
1990
nonlocal
simple_stmt -> small_stmt NEWLINE
1990
while
simple_stmt -> small_stmt NEWLINE
1990
~
simple_stmt -> small_stmt NEWLINE
1991
:
2275
1991
(
2276
1992
:
2277
1993
atom_expr
6
1993
factor
10
1993
[
3
1993
term
15
1993
STRING
43
1993
arith_expr
32
1993
NUMBER
8
1993
NAME
37
1993
{
5
1993
expr
7
1993
not
51
1993
True
9
1993
suite
2278
1993
shift_expr
12
1993
atom
13
1993
xor_expr
14
1993
(
34
1993
None
29
1993
and_test
20
1993
and_expr
21
1993
False
23
1993
or_test
25
1993
test
33
1993
lambda
28
1993
+
30
1993
nonlocal
66
1993
-
36
1993
not_test
40
1993
power
47
1993
lambdef
41
1993
~
44
1993
comparison
48
1993
assert
67
1993
simple_stmt
547
1993
global_stmt
68
1993
continue
49
1993
expr_stmt
50
1993
test_list
62
1993
raise
69
1993
del_stmt
52
1993
yield_stmt
53
1993
NEWLINE
548
1993
raise_stmt
70
1993
yield
56
1993
assert_stmt
57
1993
global
71
1993
nonlocal_stmt
72
1993
small_stmt
549
1993
break_stmt
58
1993
return_stmt
75
1993
return
59
1993
pass
60
1993
continue_stmt
61
1993
flow_stmt
76
1993
break
63
1993
del
64
1993
pass_stmt
65
1994
:
2279
1995
(
2280
1996
in
2281
1997
except
suite -> NEWLINE INDENT stmt_list DEDENT
1998
DEDENT
stmt_list -> stmt stmt_list
1999
,
test -> or_test if or_test else test
1999
as
test -> or_test if or_test else test
1999
:
test -> or_test if or_test else test
2000
+
power -> atom_expr ** factor
2000
*
power -> atom_expr ** factor
2000
/
power -> atom_expr ** factor
2000
-
power -> atom_expr ** factor
2000
>>
power -> atom_expr ** factor
2000
^
power -> atom_expr ** factor
2000
<<
power -> atom_expr ** factor
2000
:
power -> atom_expr ** factor
2000
|
power -> atom_expr ** factor
2000
,
power -> atom_expr ** factor
2000
%
power -> atom_expr ** factor
2000
//
power -> atom_expr ** factor
2000
&
power -> atom_expr ** factor
2000
@
power -> atom_expr ** factor
2001
:
xor_expr -> and_expr ^ xor_expr
2001
|
xor_expr -> and_expr ^ xor_expr
2001
,
xor_expr -> and_expr ^ xor_expr
2002
//
atom -> ( test_list_comp )
2002
-
atom -> ( test_list_comp )
2002
&
atom -> ( test_list_comp )
2002
+
atom -> ( test_list_comp )
2002
/
atom -> ( test_list_comp )
2002
*
atom -> ( test_list_comp )
2002
,
atom -> ( test_list_comp )
2002
(
atom -> ( test_list_comp )
2002
@
atom -> ( test_list_comp )
2002
:
atom -> ( test_list_comp )
2002
^
atom -> ( test_list_comp )
2002
[
atom -> ( test_list_comp )
2002
.
atom -> ( test_list_comp )
2002
<<
atom -> ( test_list_comp )
2002
**
atom -> ( test_list_comp )
2002
|
atom -> ( test_list_comp )
2002
>>
atom -> ( test_list_comp )
2002
%
atom -> ( test_list_comp )
2003
<<
arith_expr -> term - arith_expr
2003
|
arith_expr -> term - arith_expr
2003
&
arith_expr -> term - arith_expr
2003
,
arith_expr -> term - arith_expr
2003
^
arith_expr -> term - arith_expr
2003
>>
arith_expr -> term - arith_expr
2003
:
arith_expr -> term - arith_expr
2004
>>
arith_expr -> term + arith_expr
2004
&
arith_expr -> term + arith_expr
2004
,
arith_expr -> term + arith_expr
2004
^
arith_expr -> term + arith_expr
2004
|
arith_expr -> term + arith_expr
2004
<<
arith_expr -> term + arith_expr
2004
:
arith_expr -> term + arith_expr
2005
&
atom -> [ test_list_comp ]
2005
@
atom -> [ test_list_comp ]
2005
**
atom -> [ test_list_comp ]
2005
-
atom -> [ test_list_comp ]
2005
/
atom -> [ test_list_comp ]
2005
<<
atom -> [ test_list_comp ]
2005
^
atom -> [ test_list_comp ]
2005
//
atom -> [ test_list_comp ]
2005
(
atom -> [ test_list_comp ]
2005
|
atom -> [ test_list_comp ]
2005
%
atom -> [ test_list_comp ]
2005
*
atom -> [ test_list_comp ]
2005
[
atom -> [ test_list_comp ]
2005
,
atom -> [ test_list_comp ]
2005
+
atom -> [ test_list_comp ]
2005
.
atom -> [ test_list_comp ]
2005
:
atom -> [ test_list_comp ]
2005
>>
atom -> [ test_list_comp ]
2006
+
term -> factor // term
2006
^
term -> factor // term
2006
|
term -> factor // term
2006
:
term -> factor // term
2006
-
term -> factor // term
2006
<<
term -> factor // term
2006
&
term -> factor // term
2006
,
term -> factor // term
2006
>>
term -> factor // term
2007
+
term -> factor / term
2007
&
term -> factor / term
2007
|
term -> factor / term
2007
-
term -> factor / term
2007
^
term -> factor / term
2007
<<
term -> factor / term
2007
:
term -> factor / term
2007
,
term -> factor / term
2007
>>
term -> factor / term
2008
>>
term -> factor % term
2008
^
term -> factor % term
2008
:
term -> factor % term
2008
<<
term -> factor % term
2008
-
term -> factor % term
2008
,
term -> factor % term
2008
|
term -> factor % term
2008
+
term -> factor % term
2008
&
term -> factor % term
2009
<<
term -> factor @ term
2009
-
term -> factor @ term
2009
:
term -> factor @ term
2009
>>
term -> factor @ term
2009
&
term -> factor @ term
2009
+
term -> factor @ term
2009
|
term -> factor @ term
2009
,
term -> factor @ term
2009
^
term -> factor @ term
2010
&
term -> factor * term
2010
|
term -> factor * term
2010
:
term -> factor * term
2010
^
term -> factor * term
2010
-
term -> factor * term
2010
+
term -> factor * term
2010
>>
term -> factor * term
2010
<<
term -> factor * term
2010
,
term -> factor * term
2011
]
2282
2012
+
trailer -> ( )
2012
/
trailer -> ( )
2012
@
trailer -> ( )
2012
.
trailer -> ( )
2012
*
trailer -> ( )
2012
%
trailer -> ( )
2012
>>
trailer -> ( )
2012
**
trailer -> ( )
2012
//
trailer -> ( )
2012
[
trailer -> ( )
2012
<<
trailer -> ( )
2012
|
trailer -> ( )
2012
(
trailer -> ( )
2012
-
trailer -> ( )
2012
:
trailer -> ( )
2012
&
trailer -> ( )
2012
,
trailer -> ( )
2012
^
trailer -> ( )
2013
)
2283
2014
/
trailer_expr -> trailer trailer_expr
2014
&
trailer_expr -> trailer trailer_expr
2014
^
trailer_expr -> trailer trailer_expr
2014
,
trailer_expr -> trailer trailer_expr
2014
:
trailer_expr -> trailer trailer_expr
2014
*
trailer_expr -> trailer trailer_expr
2014
**
trailer_expr -> trailer trailer_expr
2014
|
trailer_expr -> trailer trailer_expr
2014
-
trailer_expr -> trailer trailer_expr
2014
//
trailer_expr -> trailer trailer_expr
2014
%
trailer_expr -> trailer trailer_expr
2014
@
trailer_expr -> trailer trailer_expr
2014
>>
trailer_expr -> trailer trailer_expr
2014
<<
trailer_expr -> trailer trailer_expr
2014
+
trailer_expr -> trailer trailer_expr
2015
%
trailer -> . NAME
2015
|
trailer -> . NAME
2015
*
trailer -> . NAME
2015
/
trailer -> . NAME
2015
@
trailer -> . NAME
2015
[
trailer -> . NAME
2015
(
trailer -> . NAME
2015
^
trailer -> . NAME
2015
.
trailer -> . NAME
2015
//
trailer -> . NAME
2015
+
trailer -> . NAME
2015
,
trailer -> . NAME
2015
**
trailer -> . NAME
2015
:
trailer -> . NAME
2015
<<
trailer -> . NAME
2015
-
trailer -> . NAME
2015
&
trailer -> . NAME
2015
>>
trailer -> . NAME
2016
:
shift_expr -> arith_expr >> shift_expr
2016
^
shift_expr -> arith_expr >> shift_expr
2016
,
shift_expr -> arith_expr >> shift_expr
2016
|
shift_expr -> arith_expr >> shift_expr
2016
&
shift_expr -> arith_expr >> shift_expr
2017
,
shift_expr -> arith_expr << shift_expr
2017
^
shift_expr -> arith_expr << shift_expr
2017
&
shift_expr -> arith_expr << shift_expr
2017
:
shift_expr -> arith_expr << shift_expr
2017
|
shift_expr -> arith_expr << shift_expr
2018
^
and_expr -> shift_expr & and_expr
2018
|
and_expr -> shift_expr & and_expr
2018
,
and_expr -> shift_expr & and_expr
2018
:
and_expr -> shift_expr & and_expr
2019
,
expr -> xor_expr | expr
2019
:
expr -> xor_expr | expr
2020
atom_expr
6
2020
factor
10
2020
[
3
2020
term
15
2020
STRING
43
2020
arith_expr
32
2020
NUMBER
8
2020
small_stmt
4
2020
NAME
37
2020
suite
2284
2020
{
5
2020
expr
7
2020
not
51
2020
True
9
2020
shift_expr
12
2020
atom
13
2020
xor_expr
14
2020
NEWLINE
942
2020
(
34
2020
None
29
2020
and_test
20
2020
and_expr
21
2020
False
23
2020
or_test
25
2020
test
33
2020
lambda
28
2020
+
30
2020
simple_stmt
943
2020
nonlocal
66
2020
-
36
2020
not_test
40
2020
power
47
2020
lambdef
41
2020
~
44
2020
comparison
48
2020
assert
67
2020
global_stmt
68
2020
continue
49
2020
expr_stmt
50
2020
test_list
62
2020
raise
69
2020
del_stmt
52
2020
yield_stmt
53
2020
raise_stmt
70
2020
yield
56
2020
assert_stmt
57
2020
global
71
2020
nonlocal_stmt
72
2020
break_stmt
58
2020
return_stmt
75
2020
return
59
2020
pass
60
2020
continue_stmt
61
2020
flow_stmt
76
2020
break
63
2020
del
64
2020
pass_stmt
65
2021
assert
funcdef -> def NAME ( ) : suite
2021
None
funcdef -> def NAME ( ) : suite
2021
False
funcdef -> def NAME ( ) : suite
2021
try
funcdef -> def NAME ( ) : suite
2021
break
funcdef -> def NAME ( ) : suite
2021
nonlocal
funcdef -> def NAME ( ) : suite
2021
for
funcdef -> def NAME ( ) : suite
2021
if
funcdef -> def NAME ( ) : suite
2021
(
funcdef -> def NAME ( ) : suite
2021
def
funcdef -> def NAME ( ) : suite
2021
continue
funcdef -> def NAME ( ) : suite
2021
raise
funcdef -> def NAME ( ) : suite
2021
-
funcdef -> def NAME ( ) : suite
2021
NAME
funcdef -> def NAME ( ) : suite
2021
NEWLINE
funcdef -> def NAME ( ) : suite
2021
+
funcdef -> def NAME ( ) : suite
2021
del
funcdef -> def NAME ( ) : suite
2021
STRING
funcdef -> def NAME ( ) : suite
2021
NUMBER
funcdef -> def NAME ( ) : suite
2021
{
funcdef -> def NAME ( ) : suite
2021
~
funcdef -> def NAME ( ) : suite
2021
pass
funcdef -> def NAME ( ) : suite
2021
[
funcdef -> def NAME ( ) : suite
2021
while
funcdef -> def NAME ( ) : suite
2021
lambda
funcdef -> def NAME ( ) : suite
2021
return
funcdef -> def NAME ( ) : suite
2021
@
funcdef -> def NAME ( ) : suite
2021
$
funcdef -> def NAME ( ) : suite
2021
with
funcdef -> def NAME ( ) : suite
2021
global
funcdef -> def NAME ( ) : suite
2021
yield
funcdef -> def NAME ( ) : suite
2021
class
funcdef -> def NAME ( ) : suite
2021
True
funcdef -> def NAME ( ) : suite
2021
not
funcdef -> def NAME ( ) : suite
2022
atom_expr
1020
2022
and_expr
1021
2022
term
1022
2022
factor
1023
2022
shift_expr
1024
2022
arith_expr
1025
2022
NUMBER
1026
2022
NAME
1027
2022
not
1028
2022
[
1029
2022
{
1030
2022
expr
1031
2022
not_test
1032
2022
False
1033
2022
xor_expr
1034
2022
STRING
1035
2022
lambda
1036
2022
atom
1037
2022
+
1038
2022
True
1039
2022
-
1040
2022
(
1041
2022
None
1042
2022
power
1043
2022
and_test
1044
2022
~
1045
2022
or_test
1047
2022
comparison
1048
2022
lambdef
1049
2022
test
2285
2023
**
2286
2023
!=
power -> atom_expr
2023
|
power -> atom_expr
2023
>
power -> atom_expr
2023
/
power -> atom_expr
2023
^
power -> atom_expr
2023
&
power -> atom_expr
2023
=
power -> atom_expr
2023
<
power -> atom_expr
2023
not
power -> atom_expr
2023
)
power -> atom_expr
2023
<=
power -> atom_expr
2023
%
power -> atom_expr
2023
and
power -> atom_expr
2023
*
power -> atom_expr
2023
@
power -> atom_expr
2023
>>
power -> atom_expr
2023
if
power -> atom_expr
2023
+
power -> atom_expr
2023
,
power -> atom_expr
2023
in
power -> atom_expr
2023
is
power -> atom_expr
2023
//
power -> atom_expr
2023
or
power -> atom_expr
2023
<<
power -> atom_expr
2023
-
power -> atom_expr
2023
==
power -> atom_expr
2023
>=
power -> atom_expr
2024
,
xor_expr -> and_expr
2024
^
2287
2024
)
xor_expr -> and_expr
2024
not
xor_expr -> and_expr
2024
=
xor_expr -> and_expr
2024
>=
xor_expr -> and_expr
2024
and
xor_expr -> and_expr
2024
is
xor_expr -> and_expr
2024
or
xor_expr -> and_expr
2024
|
xor_expr -> and_expr
2024
in
xor_expr -> and_expr
2024
==
xor_expr -> and_expr
2024
>
xor_expr -> and_expr
2024
<
xor_expr -> and_expr
2024
if
xor_expr -> and_expr
2024
<=
xor_expr -> and_expr
2024
!=
xor_expr -> and_expr
2025
+
2288
2025
in
arith_expr -> term
2025
if
arith_expr -> term
2025
|
arith_expr -> term
2025
==
arith_expr -> term
2025
<
arith_expr -> term
2025
-
2289
2025
<=
arith_expr -> term
2025
^
arith_expr -> term
2025
is
arith_expr -> term
2025
>>
arith_expr -> term
2025
or
arith_expr -> term
2025
&
arith_expr -> term
2025
>
arith_expr -> term
2025
>=
arith_expr -> term
2025
<<
arith_expr -> term
2025
and
arith_expr -> term
2025
)
arith_expr -> term
2025
not
arith_expr -> term
2025
,
arith_expr -> term
2025
!=
arith_expr -> term
2025
=
arith_expr -> term
2026
//
2290
2026
/
2291
2026
*
2292
2026
%
2293
2026
and
term -> factor
2026
==
term -> factor
2026
@
2294
2026
>=
term -> factor
2026
+
term -> factor
2026
<=
term -> factor
2026
or
term -> factor
2026
<<
term -> factor
2026
not
term -> factor
2026
,
term -> factor
2026
<
term -> factor
2026
-
term -> factor
2026
=
term -> factor
2026
in
term -> factor
2026
!=
term -> factor
2026
is
term -> factor
2026
>>
term -> factor
2026
^
term -> factor
2026
|
term -> factor
2026
>
term -> factor
2026
)
term -> factor
2026
if
term -> factor
2026
&
term -> factor
2027
)
and_expr -> shift_expr
2027
if
and_expr -> shift_expr
2027
&
2295
2027
in
and_expr -> shift_expr
2027
is
and_expr -> shift_expr
2027
|
and_expr -> shift_expr
2027
>=
and_expr -> shift_expr
2027
<
and_expr -> shift_expr
2027
!=
and_expr -> shift_expr
2027
and
and_expr -> shift_expr
2027
not
and_expr -> shift_expr
2027
or
and_expr -> shift_expr
2027
,
and_expr -> shift_expr
2027
=
and_expr -> shift_expr
2027
==
and_expr -> shift_expr
2027
<=
and_expr -> shift_expr
2027
^
and_expr -> shift_expr
2027
>
and_expr -> shift_expr
2028
<<
2296
2028
>>
2297
2028
<
shift_expr -> arith_expr
2028
>
shift_expr -> arith_expr
2028
&
shift_expr -> arith_expr
2028
and
shift_expr -> arith_expr
2028
,
shift_expr -> arith_expr
2028
=
shift_expr -> arith_expr
2028
in
shift_expr -> arith_expr
2028
!=
shift_expr -> arith_expr
2028
|
shift_expr -> arith_expr
2028
if
shift_expr -> arith_expr
2028
not
shift_expr -> arith_expr
2028
<=
shift_expr -> arith_expr
2028
is
shift_expr -> arith_expr
2028
==
shift_expr -> arith_expr
2028
)
shift_expr -> arith_expr
2028
or
shift_expr -> arith_expr
2028
>=
shift_expr -> arith_expr
2028
^
shift_expr -> arith_expr
2029
)
atom -> NUMBER
2029
==
atom -> NUMBER
2029
<=
atom -> NUMBER
2029
<<
atom -> NUMBER
2029
/
atom -> NUMBER
2029
^
atom -> NUMBER
2029
if
atom -> NUMBER
2029
.
atom -> NUMBER
2029
or
atom -> NUMBER
2029
**
atom -> NUMBER
2029
+
atom -> NUMBER
2029
%
atom -> NUMBER
2029
-
atom -> NUMBER
2029
&
atom -> NUMBER
2029
@
atom -> NUMBER
2029
*
atom -> NUMBER
2029
>>
atom -> NUMBER
2029
=
atom -> NUMBER
2029
<
atom -> NUMBER
2029
is
atom -> NUMBER
2029
(
atom -> NUMBER
2029
and
atom -> NUMBER
2029
not
atom -> NUMBER
2029
!=
atom -> NUMBER
2029
|
atom -> NUMBER
2029
in
atom -> NUMBER
2029
>
atom -> NUMBER
2029
>=
atom -> NUMBER
2029
//
atom -> NUMBER
2029
,
atom -> NUMBER
2029
[
atom -> NUMBER
2030
or
atom -> NAME
2030
)
atom -> NAME
2030
in
atom -> NAME
2030
^
atom -> NAME
2030
[
atom -> NAME
2030
==
atom -> NAME
2030
<<
atom -> NAME
2030
**
atom -> NAME
2030
,
atom -> NAME
2030
!=
atom -> NAME
2030
%
atom -> NAME
2030
@
atom -> NAME
2030
not
atom -> NAME
2030
>
atom -> NAME
2030
>=
atom -> NAME
2030
*
atom -> NAME
2030
&
atom -> NAME
2030
<
atom -> NAME
2030
-
atom -> NAME
2030
(
atom -> NAME
2030
>>
atom -> NAME
2030
+
atom -> NAME
2030
=
atom -> NAME
2030
//
atom -> NAME
2030
and
atom -> NAME
2030
<=
atom -> NAME
2030
is
atom -> NAME
2030
if
atom -> NAME
2030
/
atom -> NAME
2030
.
atom -> NAME
2030
|
atom -> NAME
2031
atom_expr
2023
2031
and_expr
2024
2031
term
2025
2031
factor
2026
2031
shift_expr
2027
2031
arith_expr
2028
2031
NUMBER
2029
2031
NAME
2030
2031
not
2031
2031
[
2032
2031
{
2033
2031
expr
2034
2031
False
2036
2031
xor_expr
2037
2031
STRING
2038
2031
atom
2040
2031
+
2041
2031
True
2042
2031
-
2043
2031
(
2046
2031
None
2047
2031
power
2048
2031
~
2049
2031
not_test
2298
2031
comparison
2050
2032
and_test
110
2032
atom_expr
111
2032
and_expr
112
2032
term
113
2032
factor
114
2032
shift_expr
115
2032
arith_expr
116
2032
NUMBER
117
2032
NAME
118
2032
[
119
2032
test_list_comp
2299
2032
{
121
2032
expr
122
2032
not_test
123
2032
False
124
2032
xor_expr
125
2032
atom
126
2032
STRING
127
2032
+
128
2032
(
129
2032
True
131
2032
-
132
2032
]
2300
2032
None
133
2032
comparison
134
2032
or_test
135
2032
test
136
2032
power
137
2032
~
138
2032
lambda
139
2032
lambdef
140
2032
not
141
2032
test_list
142
2033
}
2301
2034
in
147
2034
<
148
2034
>=
149
2034
not
150
2034
comp_op
2302
2034
!=
151
2034
>
152
2034
==
153
2034
is
154
2034
<=
155
2034
=
comparison -> expr
2034
)
comparison -> expr
2034
or
comparison -> expr
2034
,
comparison -> expr
2034
and
comparison -> expr
2034
if
comparison -> expr
2035
and
2303
2035
,
and_test -> not_test
2035
=
and_test -> not_test
2035
or
and_test -> not_test
2035
)
and_test -> not_test
2035
if
and_test -> not_test
2036
*
atom -> False
2036
@
atom -> False
2036
<
atom -> False
2036
or
atom -> False
2036
is
atom -> False
2036
>>
atom -> False
2036
[
atom -> False
2036
/
atom -> False
2036
)
atom -> False
2036
%
atom -> False
2036
.
atom -> False
2036
(
atom -> False
2036
in
atom -> False
2036
**
atom -> False
2036
==
atom -> False
2036
//
atom -> False
2036
+
atom -> False
2036
,
atom -> False
2036
=
atom -> False
2036
<<
atom -> False
2036
!=
atom -> False
2036
<=
atom -> False
2036
>
atom -> False
2036
^
atom -> False
2036
if
atom -> False
2036
&
atom -> False
2036
and
atom -> False
2036
|
atom -> False
2036
-
atom -> False
2036
not
atom -> False
2036
>=
atom -> False
2037
not
expr -> xor_expr
2037
=
expr -> xor_expr
2037
|
2304
2037
==
expr -> xor_expr
2037
in
expr -> xor_expr
2037
if
expr -> xor_expr
2037
>
expr -> xor_expr
2037
or
expr -> xor_expr
2037
<=
expr -> xor_expr
2037
<
expr -> xor_expr
2037
is
expr -> xor_expr
2037
)
expr -> xor_expr
2037
>=
expr -> xor_expr
2037
!=
expr -> xor_expr
2037
,
expr -> xor_expr
2037
and
expr -> xor_expr
2038
&
atom -> STRING
2038
**
atom -> STRING
2038
%
atom -> STRING
2038
@
atom -> STRING
2038
/
atom -> STRING
2038
*
atom -> STRING
2038
^
atom -> STRING
2038
>=
atom -> STRING
2038
if
atom -> STRING
2038
<
atom -> STRING
2038
>>
atom -> STRING
2038
.
atom -> STRING
2038
//
atom -> STRING
2038
,
atom -> STRING
2038
+
atom -> STRING
2038
=
atom -> STRING
2038
<<
atom -> STRING
2038
and
atom -> STRING
2038
[
atom -> STRING
2038
or
atom -> STRING
2038
in
atom -> STRING
2038
not
atom -> STRING
2038
>
atom -> STRING
2038
(
atom -> STRING
2038
!=
atom -> STRING
2038
is
atom -> STRING
2038
==
atom -> STRING
2038
-
atom -> STRING
2038
|
atom -> STRING
2038
<=
atom -> STRING
2038
)
atom -> STRING
2039
:
2305
2039
NAME
211
2039
vfpdef
212
2039
varargslist
2306
2040
[
2307
2040
(
2308
2040
.
2309
2040
trailer
2310
2040
<<
trailer_expr -> 
2040
trailer_expr
2311
2040
@
trailer_expr -> 
2040
!=
trailer_expr -> 
2040
-
trailer_expr -> 
2040
^
trailer_expr -> 
2040
<
trailer_expr -> 
2040
/
trailer_expr -> 
2040
is
trailer_expr -> 
2040
==
trailer_expr -> 
2040
&
trailer_expr -> 
2040
>=
trailer_expr -> 
2040
or
trailer_expr -> 
2040
in
trailer_expr -> 
2040
=
trailer_expr -> 
2040
*
trailer_expr -> 
2040
not
trailer_expr -> 
2040
)
trailer_expr -> 
2040
**
trailer_expr -> 
2040
<=
trailer_expr -> 
2040
+
trailer_expr -> 
2040
//
trailer_expr -> 
2040
%
trailer_expr -> 
2040
>
trailer_expr -> 
2040
,
trailer_expr -> 
2040
|
trailer_expr -> 
2040
if
trailer_expr -> 
2040
>>
trailer_expr -> 
2040
and
trailer_expr -> 
2041
atom_expr
2023
2041
NUMBER
2029
2041
NAME
2030
2041
[
2032
2041
{
2033
2041
False
2036
2041
STRING
2038
2041
atom
2040
2041
+
2041
2041
True
2042
2041
-
2043
2041
(
2046
2041
None
2047
2041
power
2048
2041
factor
2312
2041
~
2049
2042
!=
atom -> True
2042
is
atom -> True
2042
//
atom -> True
2042
|
atom -> True
2042
<=
atom -> True
2042
^
atom -> True
2042
%
atom -> True
2042
@
atom -> True
2042
**
atom -> True
2042
(
atom -> True
2042
not
atom -> True
2042
>>
atom -> True
2042
<
atom -> True
2042
==
atom -> True
2042
and
atom -> True
2042
=
atom -> True
2042
in
atom -> True
2042
&
atom -> True
2042
.
atom -> True
2042
<<
atom -> True
2042
/
atom -> True
2042
)
atom -> True
2042
*
atom -> True
2042
>
atom -> True
2042
,
atom -> True
2042
+
atom -> True
2042
>=
atom -> True
2042
or
atom -> True
2042
-
atom -> True
2042
[
atom -> True
2042
if
atom -> True
2043
atom_expr
2023
2043
NUMBER
2029
2043
NAME
2030
2043
[
2032
2043
factor
2313
2043
{
2033
2043
False
2036
2043
STRING
2038
2043
atom
2040
2043
+
2041
2043
True
2042
2043
-
2043
2043
(
2046
2043
None
2047
2043
power
2048
2043
~
2049
2044
or
2314
2044
)
or_test -> and_test
2044
,
or_test -> and_test
2044
=
or_test -> and_test
2044
if
or_test -> and_test
2045
if
2315
2045
,
test -> or_test
2045
)
test -> or_test
2045
=
test -> or_test
2046
and_test
217
2046
atom_expr
218
2046
and_expr
219
2046
term
220
2046
factor
221
2046
shift_expr
222
2046
arith_expr
223
2046
NUMBER
224
2046
NAME
225
2046
not
226
2046
[
227
2046
{
228
2046
expr
229
2046
test_list_comp
2316
2046
not_test
231
2046
False
232
2046
)
2317
2046
xor_expr
234
2046
STRING
235
2046
lambda
236
2046
atom
237
2046
+
238
2046
True
239
2046
-
240
2046
(
241
2046
None
242
2046
comparison
243
2046
power
244
2046
~
245
2046
or_test
246
2046
test
247
2046
lambdef
248
2046
test_list
249
2047
!=
atom -> None
2047
//
atom -> None
2047
^
atom -> None
2047
>=
atom -> None
2047
&
atom -> None
2047
**
atom -> None
2047
=
atom -> None
2047
,
atom -> None
2047
<
atom -> None
2047
if
atom -> None
2047
*
atom -> None
2047
>
atom -> None
2047
@
atom -> None
2047
|
atom -> None
2047
-
atom -> None
2047
%
atom -> None
2047
)
atom -> None
2047
not
atom -> None
2047
==
atom -> None
2047
in
atom -> None
2047
/
atom -> None
2047
or
atom -> None
2047
and
atom -> None
2047
+
atom -> None
2047
(
atom -> None
2047
>>
atom -> None
2047
is
atom -> None
2047
[
atom -> None
2047
<=
atom -> None
2047
<<
atom -> None
2047
.
atom -> None
2048
*
factor -> power
2048
>>
factor -> power
2048
>=
factor -> power
2048
<
factor -> power
2048
&
factor -> power
2048
,
factor -> power
2048
@
factor -> power
2048
|
factor -> power
2048
!=
factor -> power
2048
<=
factor -> power
2048
//
factor -> power
2048
in
factor -> power
2048
and
factor -> power
2048
+
factor -> power
2048
>
factor -> power
2048
-
factor -> power
2048
not
factor -> power
2048
is
factor -> power
2048
==
factor -> power
2048
%
factor -> power
2048
=
factor -> power
2048
if
factor -> power
2048
or
factor -> power
2048
^
factor -> power
2048
)
factor -> power
2048
<<
factor -> power
2048
/
factor -> power
2049
atom_expr
2023
2049
NUMBER
2029
2049
NAME
2030
2049
[
2032
2049
factor
2318
2049
{
2033
2049
False
2036
2049
STRING
2038
2049
atom
2040
2049
+
2041
2049
True
2042
2049
-
2043
2049
(
2046
2049
None
2047
2049
power
2048
2049
~
2049
2050
or
not_test -> comparison
2050
=
not_test -> comparison
2050
if
not_test -> comparison
2050
,
not_test -> comparison
2050
and
not_test -> comparison
2050
)
not_test -> comparison
2051
=
test -> lambdef
2051
,
test -> lambdef
2051
)
test -> lambdef
2052
)
tfpdef -> NAME : test
2052
=
tfpdef -> NAME : test
2052
,
tfpdef -> NAME : test
2053
)
parameters -> param , parameters
2054
,
param -> tfpdef = test
2054
)
param -> tfpdef = test
2055
*
trailer -> [ subscriptlist ]
2055
not
trailer -> [ subscriptlist ]
2055
(
trailer -> [ subscriptlist ]
2055
<<
trailer -> [ subscriptlist ]
2055
>>
trailer -> [ subscriptlist ]
2055
//
trailer -> [ subscriptlist ]
2055
or
trailer -> [ subscriptlist ]
2055
is
trailer -> [ subscriptlist ]
2055
[
trailer -> [ subscriptlist ]
2055
|
trailer -> [ subscriptlist ]
2055
%
trailer -> [ subscriptlist ]
2055
<=
trailer -> [ subscriptlist ]
2055
and
trailer -> [ subscriptlist ]
2055
**
trailer -> [ subscriptlist ]
2055
-
trailer -> [ subscriptlist ]
2055
in
trailer -> [ subscriptlist ]
2055
^
trailer -> [ subscriptlist ]
2055
+
trailer -> [ subscriptlist ]
2055
>=
trailer -> [ subscriptlist ]
2055
.
trailer -> [ subscriptlist ]
2055
else
trailer -> [ subscriptlist ]
2055
&
trailer -> [ subscriptlist ]
2055
/
trailer -> [ subscriptlist ]
2055
!=
trailer -> [ subscriptlist ]
2055
<
trailer -> [ subscriptlist ]
2055
==
trailer -> [ subscriptlist ]
2055
>
trailer -> [ subscriptlist ]
2055
@
trailer -> [ subscriptlist ]
2056
%
trailer -> ( arglist )
2056
and
trailer -> ( arglist )
2056
+
trailer -> ( arglist )
2056
or
trailer -> ( arglist )
2056
not
trailer -> ( arglist )
2056
-
trailer -> ( arglist )
2056
@
trailer -> ( arglist )
2056
[
trailer -> ( arglist )
2056
>>
trailer -> ( arglist )
2056
<=
trailer -> ( arglist )
2056
//
trailer -> ( arglist )
2056
==
trailer -> ( arglist )
2056
<<
trailer -> ( arglist )
2056
*
trailer -> ( arglist )
2056
<
trailer -> ( arglist )
2056
**
trailer -> ( arglist )
2056
is
trailer -> ( arglist )
2056
>
trailer -> ( arglist )
2056
!=
trailer -> ( arglist )
2056
/
trailer -> ( arglist )
2056
else
trailer -> ( arglist )
2056
in
trailer -> ( arglist )
2056
.
trailer -> ( arglist )
2056
|
trailer -> ( arglist )
2056
>=
trailer -> ( arglist )
2056
&
trailer -> ( arglist )
2056
(
trailer -> ( arglist )
2056
^
trailer -> ( arglist )
2057
for
test -> or_test if or_test else test
2057
,
test -> or_test if or_test else test
2057
)
test -> or_test if or_test else test
2058
or
2319
2058
)
or_test -> and_test
2058
if
or_test -> and_test
2058
for
or_test -> and_test
2059
**
2320
2059
!=
power -> atom_expr
2059
|
power -> atom_expr
2059
>
power -> atom_expr
2059
/
power -> atom_expr
2059
^
power -> atom_expr
2059
&
power -> atom_expr
2059
<
power -> atom_expr
2059
not
power -> atom_expr
2059
)
power -> atom_expr
2059
<=
power -> atom_expr
2059
%
power -> atom_expr
2059
and
power -> atom_expr
2059
*
power -> atom_expr
2059
@
power -> atom_expr
2059
>>
power -> atom_expr
2059
if
power -> atom_expr
2059
+
power -> atom_expr
2059
in
power -> atom_expr
2059
for
power -> atom_expr
2059
is
power -> atom_expr
2059
//
power -> atom_expr
2059
or
power -> atom_expr
2059
<<
power -> atom_expr
2059
-
power -> atom_expr
2059
==
power -> atom_expr
2059
>=
power -> atom_expr
2060
^
2321
2060
)
xor_expr -> and_expr
2060
not
xor_expr -> and_expr
2060
>=
xor_expr -> and_expr
2060
for
xor_expr -> and_expr
2060
and
xor_expr -> and_expr
2060
is
xor_expr -> and_expr
2060
or
xor_expr -> and_expr
2060
|
xor_expr -> and_expr
2060
in
xor_expr -> and_expr
2060
==
xor_expr -> and_expr
2060
>
xor_expr -> and_expr
2060
<
xor_expr -> and_expr
2060
if
xor_expr -> and_expr
2060
<=
xor_expr -> and_expr
2060
!=
xor_expr -> and_expr
2061
+
2322
2061
in
arith_expr -> term
2061
if
arith_expr -> term
2061
|
arith_expr -> term
2061
-
2323
2061
<
arith_expr -> term
2061
==
arith_expr -> term
2061
<=
arith_expr -> term
2061
^
arith_expr -> term
2061
is
arith_expr -> term
2061
>>
arith_expr -> term
2061
for
arith_expr -> term
2061
or
arith_expr -> term
2061
&
arith_expr -> term
2061
>
arith_expr -> term
2061
>=
arith_expr -> term
2061
<<
arith_expr -> term
2061
and
arith_expr -> term
2061
)
arith_expr -> term
2061
not
arith_expr -> term
2061
!=
arith_expr -> term
2062
//
2324
2062
*
2325
2062
%
2326
2062
/
2327
2062
and
term -> factor
2062
==
term -> factor
2062
@
2328
2062
>=
term -> factor
2062
+
term -> factor
2062
<=
term -> factor
2062
or
term -> factor
2062
<<
term -> factor
2062
not
term -> factor
2062
<
term -> factor
2062
-
term -> factor
2062
in
term -> factor
2062
for
term -> factor
2062
!=
term -> factor
2062
is
term -> factor
2062
>>
term -> factor
2062
^
term -> factor
2062
|
term -> factor
2062
>
term -> factor
2062
)
term -> factor
2062
if
term -> factor
2062
&
term -> factor
2063
)
and_expr -> shift_expr
2063
if
and_expr -> shift_expr
2063
&
2329
2063
in
and_expr -> shift_expr
2063
is
and_expr -> shift_expr
2063
|
and_expr -> shift_expr
2063
>=
and_expr -> shift_expr
2063
<
and_expr -> shift_expr
2063
!=
and_expr -> shift_expr
2063
and
and_expr -> shift_expr
2063
not
and_expr -> shift_expr
2063
or
and_expr -> shift_expr
2063
==
and_expr -> shift_expr
2063
<=
and_expr -> shift_expr
2063
^
and_expr -> shift_expr
2063
for
and_expr -> shift_expr
2063
>
and_expr -> shift_expr
2064
<<
2330
2064
>>
2331
2064
<
shift_expr -> arith_expr
2064
>
shift_expr -> arith_expr
2064
for
shift_expr -> arith_expr
2064
&
shift_expr -> arith_expr
2064
and
shift_expr -> arith_expr
2064
in
shift_expr -> arith_expr
2064
!=
shift_expr -> arith_expr
2064
|
shift_expr -> arith_expr
2064
if
shift_expr -> arith_expr
2064
not
shift_expr -> arith_expr
2064
<=
shift_expr -> arith_expr
2064
is
shift_expr -> arith_expr
2064
==
shift_expr -> arith_expr
2064
)
shift_expr -> arith_expr
2064
or
shift_expr -> arith_expr
2064
>=
shift_expr -> arith_expr
2064
^
shift_expr -> arith_expr
2065
)
atom -> NUMBER
2065
==
atom -> NUMBER
2065
<=
atom -> NUMBER
2065
<<
atom -> NUMBER
2065
/
atom -> NUMBER
2065
^
atom -> NUMBER
2065
if
atom -> NUMBER
2065
.
atom -> NUMBER
2065
or
atom -> NUMBER
2065
**
atom -> NUMBER
2065
for
atom -> NUMBER
2065
+
atom -> NUMBER
2065
%
atom -> NUMBER
2065
-
atom -> NUMBER
2065
&
atom -> NUMBER
2065
@
atom -> NUMBER
2065
*
atom -> NUMBER
2065
>>
atom -> NUMBER
2065
<
atom -> NUMBER
2065
is
atom -> NUMBER
2065
(
atom -> NUMBER
2065
and
atom -> NUMBER
2065
not
atom -> NUMBER
2065
!=
atom -> NUMBER
2065
|
atom -> NUMBER
2065
in
atom -> NUMBER
2065
>
atom -> NUMBER
2065
>=
atom -> NUMBER
2065
//
atom -> NUMBER
2065
[
atom -> NUMBER
2066
or
atom -> NAME
2066
)
atom -> NAME
2066
in
atom -> NAME
2066
^
atom -> NAME
2066
[
atom -> NAME
2066
==
atom -> NAME
2066
for
atom -> NAME
2066
<<
atom -> NAME
2066
**
atom -> NAME
2066
!=
atom -> NAME
2066
%
atom -> NAME
2066
@
atom -> NAME
2066
not
atom -> NAME
2066
>
atom -> NAME
2066
>=
atom -> NAME
2066
*
atom -> NAME
2066
&
atom -> NAME
2066
<
atom -> NAME
2066
-
atom -> NAME
2066
(
atom -> NAME
2066
>>
atom -> NAME
2066
+
atom -> NAME
2066
//
atom -> NAME
2066
and
atom -> NAME
2066
<=
atom -> NAME
2066
is
atom -> NAME
2066
if
atom -> NAME
2066
/
atom -> NAME
2066
.
atom -> NAME
2066
|
atom -> NAME
2067
atom_expr
2059
2067
and_expr
2060
2067
term
2061
2067
factor
2062
2067
shift_expr
2063
2067
arith_expr
2064
2067
NUMBER
2065
2067
NAME
2066
2067
not
2067
2067
[
2068
2067
{
2069
2067
expr
2070
2067
False
2071
2067
xor_expr
2072
2067
STRING
2073
2067
+
2074
2067
True
2075
2067
-
2076
2067
(
2077
2067
None
2078
2067
comparison
2079
2067
power
2080
2067
atom
2081
2067
~
2082
2067
not_test
2332
2068
and_test
110
2068
atom_expr
111
2068
and_expr
112
2068
term
113
2068
factor
114
2068
shift_expr
115
2068
arith_expr
116
2068
NUMBER
117
2068
NAME
118
2068
[
119
2068
test_list_comp
2333
2068
{
121
2068
expr
122
2068
not_test
123
2068
False
124
2068
xor_expr
125
2068
atom
126
2068
STRING
127
2068
+
128
2068
(
129
2068
True
131
2068
-
132
2068
]
2334
2068
None
133
2068
comparison
134
2068
or_test
135
2068
test
136
2068
power
137
2068
~
138
2068
lambda
139
2068
lambdef
140
2068
not
141
2068
test_list
142
2069
}
2335
2070
in
147
2070
<
148
2070
>=
149
2070
not
150
2070
comp_op
2336
2070
!=
151
2070
>
152
2070
==
153
2070
is
154
2070
<=
155
2070
)
comparison -> expr
2070
or
comparison -> expr
2070
and
comparison -> expr
2070
for
comparison -> expr
2070
if
comparison -> expr
2071
*
atom -> False
2071
@
atom -> False
2071
<
atom -> False
2071
or
atom -> False
2071
is
atom -> False
2071
>>
atom -> False
2071
[
atom -> False
2071
/
atom -> False
2071
)
atom -> False
2071
%
atom -> False
2071
.
atom -> False
2071
(
atom -> False
2071
in
atom -> False
2071
**
atom -> False
2071
==
atom -> False
2071
//
atom -> False
2071
+
atom -> False
2071
<<
atom -> False
2071
!=
atom -> False
2071
<=
atom -> False
2071
>
atom -> False
2071
^
atom -> False
2071
if
atom -> False
2071
&
atom -> False
2071
and
atom -> False
2071
for
atom -> False
2071
|
atom -> False
2071
-
atom -> False
2071
not
atom -> False
2071
>=
atom -> False
2072
for
expr -> xor_expr
2072
not
expr -> xor_expr
2072
|
2337
2072
==
expr -> xor_expr
2072
in
expr -> xor_expr
2072
if
expr -> xor_expr
2072
>
expr -> xor_expr
2072
or
expr -> xor_expr
2072
<=
expr -> xor_expr
2072
<
expr -> xor_expr
2072
is
expr -> xor_expr
2072
)
expr -> xor_expr
2072
>=
expr -> xor_expr
2072
!=
expr -> xor_expr
2072
and
expr -> xor_expr
2073
&
atom -> STRING
2073
**
atom -> STRING
2073
%
atom -> STRING
2073
@
atom -> STRING
2073
/
atom -> STRING
2073
*
atom -> STRING
2073
^
atom -> STRING
2073
>=
atom -> STRING
2073
if
atom -> STRING
2073
<
atom -> STRING
2073
>>
atom -> STRING
2073
.
atom -> STRING
2073
for
atom -> STRING
2073
//
atom -> STRING
2073
+
atom -> STRING
2073
<<
atom -> STRING
2073
and
atom -> STRING
2073
[
atom -> STRING
2073
or
atom -> STRING
2073
in
atom -> STRING
2073
not
atom -> STRING
2073
>
atom -> STRING
2073
(
atom -> STRING
2073
!=
atom -> STRING
2073
is
atom -> STRING
2073
==
atom -> STRING
2073
-
atom -> STRING
2073
|
atom -> STRING
2073
<=
atom -> STRING
2073
)
atom -> STRING
2074
atom_expr
2059
2074
NUMBER
2065
2074
NAME
2066
2074
[
2068
2074
{
2069
2074
False
2071
2074
STRING
2073
2074
+
2074
2074
True
2075
2074
-
2076
2074
(
2077
2074
None
2078
2074
power
2080
2074
atom
2081
2074
factor
2338
2074
~
2082
2075
!=
atom -> True
2075
is
atom -> True
2075
//
atom -> True
2075
|
atom -> True
2075
<=
atom -> True
2075
^
atom -> True
2075
%
atom -> True
2075
@
atom -> True
2075
**
atom -> True
2075
(
atom -> True
2075
not
atom -> True
2075
>>
atom -> True
2075
<
atom -> True
2075
==
atom -> True
2075
and
atom -> True
2075
in
atom -> True
2075
&
atom -> True
2075
.
atom -> True
2075
<<
atom -> True
2075
/
atom -> True
2075
)
atom -> True
2075
*
atom -> True
2075
>
atom -> True
2075
+
atom -> True
2075
>=
atom -> True
2075
or
atom -> True
2075
for
atom -> True
2075
-
atom -> True
2075
[
atom -> True
2075
if
atom -> True
2076
atom_expr
2059
2076
NUMBER
2065
2076
NAME
2066
2076
[
2068
2076
factor
2339
2076
{
2069
2076
False
2071
2076
STRING
2073
2076
+
2074
2076
True
2075
2076
-
2076
2076
(
2077
2076
None
2078
2076
power
2080
2076
atom
2081
2076
~
2082
2077
and_test
217
2077
atom_expr
218
2077
and_expr
219
2077
term
220
2077
factor
221
2077
shift_expr
222
2077
arith_expr
223
2077
NUMBER
224
2077
NAME
225
2077
not
226
2077
[
227
2077
{
228
2077
expr
229
2077
test_list_comp
2340
2077
not_test
231
2077
False
232
2077
xor_expr
234
2077
STRING
235
2077
lambda
236
2077
atom
237
2077
+
238
2077
True
239
2077
-
240
2077
(
241
2077
None
242
2077
comparison
243
2077
power
244
2077
)
2341
2077
~
245
2077
or_test
246
2077
test
247
2077
lambdef
248
2077
test_list
249
2078
!=
atom -> None
2078
//
atom -> None
2078
^
atom -> None
2078
>=
atom -> None
2078
&
atom -> None
2078
**
atom -> None
2078
<
atom -> None
2078
if
atom -> None
2078
*
atom -> None
2078
>
atom -> None
2078
@
atom -> None
2078
|
atom -> None
2078
-
atom -> None
2078
%
atom -> None
2078
)
atom -> None
2078
not
atom -> None
2078
==
atom -> None
2078
in
atom -> None
2078
/
atom -> None
2078
or
atom -> None
2078
and
atom -> None
2078
+
atom -> None
2078
(
atom -> None
2078
>>
atom -> None
2078
is
atom -> None
2078
for
atom -> None
2078
[
atom -> None
2078
<=
atom -> None
2078
<<
atom -> None
2078
.
atom -> None
2079
for
not_test -> comparison
2079
or
not_test -> comparison
2079
if
not_test -> comparison
2079
and
not_test -> comparison
2079
)
not_test -> comparison
2080
*
factor -> power
2080
>>
factor -> power
2080
>=
factor -> power
2080
<
factor -> power
2080
&
factor -> power
2080
for
factor -> power
2080
@
factor -> power
2080
|
factor -> power
2080
!=
factor -> power
2080
<=
factor -> power
2080
//
factor -> power
2080
in
factor -> power
2080
and
factor -> power
2080
+
factor -> power
2080
>
factor -> power
2080
-
factor -> power
2080
not
factor -> power
2080
is
factor -> power
2080
==
factor -> power
2080
%
factor -> power
2080
if
factor -> power
2080
or
factor -> power
2080
^
factor -> power
2080
)
factor -> power
2080
<<
factor -> power
2080
/
factor -> power
2081
[
2342
2081
(
2343
2081
.
2344
2081
trailer
2345
2081
<<
trailer_expr -> 
2081
trailer_expr
2346
2081
@
trailer_expr -> 
2081
!=
trailer_expr -> 
2081
-
trailer_expr -> 
2081
^
trailer_expr -> 
2081
<
trailer_expr -> 
2081
for
trailer_expr -> 
2081
/
trailer_expr -> 
2081
is
trailer_expr -> 
2081
==
trailer_expr -> 
2081
&
trailer_expr -> 
2081
>=
trailer_expr -> 
2081
or
trailer_expr -> 
2081
in
trailer_expr -> 
2081
*
trailer_expr -> 
2081
not
trailer_expr -> 
2081
)
trailer_expr -> 
2081
**
trailer_expr -> 
2081
<=
trailer_expr -> 
2081
+
trailer_expr -> 
2081
//
trailer_expr -> 
2081
%
trailer_expr -> 
2081
>
trailer_expr -> 
2081
|
trailer_expr -> 
2081
if
trailer_expr -> 
2081
>>
trailer_expr -> 
2081
and
trailer_expr -> 
2082
atom_expr
2059
2082
NUMBER
2065
2082
NAME
2066
2082
[
2068
2082
factor
2347
2082
{
2069
2082
False
2071
2082
STRING
2073
2082
+
2074
2082
True
2075
2082
-
2076
2082
(
2077
2082
None
2078
2082
power
2080
2082
atom
2081
2082
~
2082
2083
and
2348
2083
or
and_test -> not_test
2083
)
and_test -> not_test
2083
if
and_test -> not_test
2083
for
and_test -> not_test
2084
)
comp_iter -> 
2084
for
656
2084
comp_iter
2349
2084
comp_if
2350
2084
comp_for
2351
2084
if
2352
2085
*
power -> atom_expr ** factor
2085
:
power -> atom_expr ** factor
2085
in
power -> atom_expr ** factor
2085
<
power -> atom_expr ** factor
2085
if
power -> atom_expr ** factor
2085
-
power -> atom_expr ** factor
2085
>>
power -> atom_expr ** factor
2085
<=
power -> atom_expr ** factor
2085
and
power -> atom_expr ** factor
2085
==
power -> atom_expr ** factor
2085
%
power -> atom_expr ** factor
2085
/
power -> atom_expr ** factor
2085
^
power -> atom_expr ** factor
2085
<<
power -> atom_expr ** factor
2085
,
power -> atom_expr ** factor
2085
>
power -> atom_expr ** factor
2085
//
power -> atom_expr ** factor
2085
is
power -> atom_expr ** factor
2085
@
power -> atom_expr ** factor
2085
+
power -> atom_expr ** factor
2085
|
power -> atom_expr ** factor
2085
!=
power -> atom_expr ** factor
2085
>=
power -> atom_expr ** factor
2085
or
power -> atom_expr ** factor
2085
&
power -> atom_expr ** factor
2085
not
power -> atom_expr ** factor
2086
and
xor_expr -> and_expr ^ xor_expr
2086
<
xor_expr -> and_expr ^ xor_expr
2086
>
xor_expr -> and_expr ^ xor_expr
2086
in
xor_expr -> and_expr ^ xor_expr
2086
|
xor_expr -> and_expr ^ xor_expr
2086
<=
xor_expr -> and_expr ^ xor_expr
2086
!=
xor_expr -> and_expr ^ xor_expr
2086
not
xor_expr -> and_expr ^ xor_expr
2086
:
xor_expr -> and_expr ^ xor_expr
2086
or
xor_expr -> and_expr ^ xor_expr
2086
if
xor_expr -> and_expr ^ xor_expr
2086
is
xor_expr -> and_expr ^ xor_expr
2086
==
xor_expr -> and_expr ^ xor_expr
2086
,
xor_expr -> and_expr ^ xor_expr
2086
>=
xor_expr -> and_expr ^ xor_expr
2087
<=
arith_expr -> term + arith_expr
2087
&
arith_expr -> term + arith_expr
2087
>
arith_expr -> term + arith_expr
2087
,
arith_expr -> term + arith_expr
2087
>=
arith_expr -> term + arith_expr
2087
not
arith_expr -> term + arith_expr
2087
|
arith_expr -> term + arith_expr
2087
in
arith_expr -> term + arith_expr
2087
:
arith_expr -> term + arith_expr
2087
if
arith_expr -> term + arith_expr
2087
>>
arith_expr -> term + arith_expr
2087
is
arith_expr -> term + arith_expr
2087
^
arith_expr -> term + arith_expr
2087
<<
arith_expr -> term + arith_expr
2087
<
arith_expr -> term + arith_expr
2087
==
arith_expr -> term + arith_expr
2087
!=
arith_expr -> term + arith_expr
2087
or
arith_expr -> term + arith_expr
2087
and
arith_expr -> term + arith_expr
2088
<=
arith_expr -> term - arith_expr
2088
if
arith_expr -> term - arith_expr
2088
not
arith_expr -> term - arith_expr
2088
|
arith_expr -> term - arith_expr
2088
,
arith_expr -> term - arith_expr
2088
>>
arith_expr -> term - arith_expr
2088
:
arith_expr -> term - arith_expr
2088
>=
arith_expr -> term - arith_expr
2088
<<
arith_expr -> term - arith_expr
2088
is
arith_expr -> term - arith_expr
2088
!=
arith_expr -> term - arith_expr
2088
in
arith_expr -> term - arith_expr
2088
<
arith_expr -> term - arith_expr
2088
or
arith_expr -> term - arith_expr
2088
==
arith_expr -> term - arith_expr
2088
and
arith_expr -> term - arith_expr
2088
&
arith_expr -> term - arith_expr
2088
^
arith_expr -> term - arith_expr
2088
>
arith_expr -> term - arith_expr
2089
|
term -> factor * term
2089
-
term -> factor * term
2089
in
term -> factor * term
2089
and
term -> factor * term
2089
<<
term -> factor * term
2089
>=
term -> factor * term
2089
if
term -> factor * term
2089
or
term -> factor * term
2089
<=
term -> factor * term
2089
is
term -> factor * term
2089
:
term -> factor * term
2089
^
term -> factor * term
2089
!=
term -> factor * term
2089
==
term -> factor * term
2089
,
term -> factor * term
2089
&
term -> factor * term
2089
>
term -> factor * term
2089
not
term -> factor * term
2089
<
term -> factor * term
2089
+
term -> factor * term
2089
>>
term -> factor * term
2090
!=
term -> factor % term
2090
>>
term -> factor % term
2090
==
term -> factor % term
2090
>=
term -> factor % term
2090
,
term -> factor % term
2090
^
term -> factor % term
2090
not
term -> factor % term
2090
or
term -> factor % term
2090
if
term -> factor % term
2090
<=
term -> factor % term
2090
:
term -> factor % term
2090
<
term -> factor % term
2090
is
term -> factor % term
2090
-
term -> factor % term
2090
in
term -> factor % term
2090
>
term -> factor % term
2090
<<
term -> factor % term
2090
and
term -> factor % term
2090
|
term -> factor % term
2090
+
term -> factor % term
2090
&
term -> factor % term
2091
is
term -> factor // term
2091
if
term -> factor // term
2091
>
term -> factor // term
2091
==
term -> factor // term
2091
+
term -> factor // term
2091
^
term -> factor // term
2091
-
term -> factor // term
2091
,
term -> factor // term
2091
in
term -> factor // term
2091
>>
term -> factor // term
2091
|
term -> factor // term
2091
<<
term -> factor // term
2091
!=
term -> factor // term
2091
&
term -> factor // term
2091
not
term -> factor // term
2091
<=
term -> factor // term
2091
<
term -> factor // term
2091
:
term -> factor // term
2091
and
term -> factor // term
2091
>=
term -> factor // term
2091
or
term -> factor // term
2092
>=
term -> factor / term
2092
!=
term -> factor / term
2092
not
term -> factor / term
2092
^
term -> factor / term
2092
in
term -> factor / term
2092
and
term -> factor / term
2092
<<
term -> factor / term
2092
,
term -> factor / term
2092
+
term -> factor / term
2092
>
term -> factor / term
2092
|
term -> factor / term
2092
or
term -> factor / term
2092
if
term -> factor / term
2092
>>
term -> factor / term
2092
<
term -> factor / term
2092
&
term -> factor / term
2092
-
term -> factor / term
2092
is
term -> factor / term
2092
==
term -> factor / term
2092
<=
term -> factor / term
2092
:
term -> factor / term
2093
-
term -> factor @ term
2093
&
term -> factor @ term
2093
^
term -> factor @ term
2093
:
term -> factor @ term
2093
<
term -> factor @ term
2093
!=
term -> factor @ term
2093
<<
term -> factor @ term
2093
is
term -> factor @ term
2093
<=
term -> factor @ term
2093
and
term -> factor @ term
2093
+
term -> factor @ term
2093
,
term -> factor @ term
2093
>
term -> factor @ term
2093
if
term -> factor @ term
2093
not
term -> factor @ term
2093
>>
term -> factor @ term
2093
>=
term -> factor @ term
2093
|
term -> factor @ term
2093
in
term -> factor @ term
2093
==
term -> factor @ term
2093
or
term -> factor @ term
2094
if
and_expr -> shift_expr & and_expr
2094
!=
and_expr -> shift_expr & and_expr
2094
<=
and_expr -> shift_expr & and_expr
2094
not
and_expr -> shift_expr & and_expr
2094
,
and_expr -> shift_expr & and_expr
2094
^
and_expr -> shift_expr & and_expr
2094
|
and_expr -> shift_expr & and_expr
2094
or
and_expr -> shift_expr & and_expr
2094
in
and_expr -> shift_expr & and_expr
2094
>
and_expr -> shift_expr & and_expr
2094
and
and_expr -> shift_expr & and_expr
2094
==
and_expr -> shift_expr & and_expr
2094
:
and_expr -> shift_expr & and_expr
2094
<
and_expr -> shift_expr & and_expr
2094
is
and_expr -> shift_expr & and_expr
2094
>=
and_expr -> shift_expr & and_expr
2095
,
shift_expr -> arith_expr << shift_expr
2095
^
shift_expr -> arith_expr << shift_expr
2095
|
shift_expr -> arith_expr << shift_expr
2095
&
shift_expr -> arith_expr << shift_expr
2095
:
shift_expr -> arith_expr << shift_expr
2095
and
shift_expr -> arith_expr << shift_expr
2095
is
shift_expr -> arith_expr << shift_expr
2095
in
shift_expr -> arith_expr << shift_expr
2095
<=
shift_expr -> arith_expr << shift_expr
2095
<
shift_expr -> arith_expr << shift_expr
2095
not
shift_expr -> arith_expr << shift_expr
2095
==
shift_expr -> arith_expr << shift_expr
2095
>=
shift_expr -> arith_expr << shift_expr
2095
if
shift_expr -> arith_expr << shift_expr
2095
>
shift_expr -> arith_expr << shift_expr
2095
or
shift_expr -> arith_expr << shift_expr
2095
!=
shift_expr -> arith_expr << shift_expr
2096
or
shift_expr -> arith_expr >> shift_expr
2096
and
shift_expr -> arith_expr >> shift_expr
2096
>=
shift_expr -> arith_expr >> shift_expr
2096
not
shift_expr -> arith_expr >> shift_expr
2096
:
shift_expr -> arith_expr >> shift_expr
2096
^
shift_expr -> arith_expr >> shift_expr
2096
is
shift_expr -> arith_expr >> shift_expr
2096
in
shift_expr -> arith_expr >> shift_expr
2096
if
shift_expr -> arith_expr >> shift_expr
2096
<=
shift_expr -> arith_expr >> shift_expr
2096
==
shift_expr -> arith_expr >> shift_expr
2096
,
shift_expr -> arith_expr >> shift_expr
2096
<
shift_expr -> arith_expr >> shift_expr
2096
!=
shift_expr -> arith_expr >> shift_expr
2096
|
shift_expr -> arith_expr >> shift_expr
2096
>
shift_expr -> arith_expr >> shift_expr
2096
&
shift_expr -> arith_expr >> shift_expr
2097
and
atom -> [ test_list_comp ]
2097
<=
atom -> [ test_list_comp ]
2097
**
atom -> [ test_list_comp ]
2097
^
atom -> [ test_list_comp ]
2097
[
atom -> [ test_list_comp ]
2097
,
atom -> [ test_list_comp ]
2097
!=
atom -> [ test_list_comp ]
2097
<
atom -> [ test_list_comp ]
2097
/
atom -> [ test_list_comp ]
2097
-
atom -> [ test_list_comp ]
2097
>=
atom -> [ test_list_comp ]
2097
if
atom -> [ test_list_comp ]
2097
%
atom -> [ test_list_comp ]
2097
is
atom -> [ test_list_comp ]
2097
+
atom -> [ test_list_comp ]
2097
&
atom -> [ test_list_comp ]
2097
@
atom -> [ test_list_comp ]
2097
or
atom -> [ test_list_comp ]
2097
in
atom -> [ test_list_comp ]
2097
==
atom -> [ test_list_comp ]
2097
not
atom -> [ test_list_comp ]
2097
.
atom -> [ test_list_comp ]
2097
|
atom -> [ test_list_comp ]
2097
>
atom -> [ test_list_comp ]
2097
<<
atom -> [ test_list_comp ]
2097
//
atom -> [ test_list_comp ]
2097
(
atom -> [ test_list_comp ]
2097
*
atom -> [ test_list_comp ]
2097
:
atom -> [ test_list_comp ]
2097
>>
atom -> [ test_list_comp ]
2098
if
comparison -> expr comp_op comparison
2098
or
comparison -> expr comp_op comparison
2098
and
comparison -> expr comp_op comparison
2098
:
comparison -> expr comp_op comparison
2098
,
comparison -> expr comp_op comparison
2099
:
and_test -> not_test and and_test
2099
,
and_test -> not_test and and_test
2099
or
and_test -> not_test and and_test
2099
if
and_test -> not_test and and_test
2100
raise
for_stmt -> for expr_list in test_list : suite
2100
else
2353
2100
assert
for_stmt -> for expr_list in test_list : suite
2100
True
for_stmt -> for expr_list in test_list : suite
2100
lambda
for_stmt -> for expr_list in test_list : suite
2100
@
for_stmt -> for expr_list in test_list : suite
2100
continue
for_stmt -> for expr_list in test_list : suite
2100
+
for_stmt -> for expr_list in test_list : suite
2100
try
for_stmt -> for expr_list in test_list : suite
2100
with
for_stmt -> for expr_list in test_list : suite
2100
for
for_stmt -> for expr_list in test_list : suite
2100
-
for_stmt -> for expr_list in test_list : suite
2100
while
for_stmt -> for expr_list in test_list : suite
2100
~
for_stmt -> for expr_list in test_list : suite
2100
yield
for_stmt -> for expr_list in test_list : suite
2100
del
for_stmt -> for expr_list in test_list : suite
2100
pass
for_stmt -> for expr_list in test_list : suite
2100
(
for_stmt -> for expr_list in test_list : suite
2100
NUMBER
for_stmt -> for expr_list in test_list : suite
2100
NAME
for_stmt -> for expr_list in test_list : suite
2100
STRING
for_stmt -> for expr_list in test_list : suite
2100
{
for_stmt -> for expr_list in test_list : suite
2100
if
for_stmt -> for expr_list in test_list : suite
2100
def
for_stmt -> for expr_list in test_list : suite
2100
[
for_stmt -> for expr_list in test_list : suite
2100
$
for_stmt -> for expr_list in test_list : suite
2100
class
for_stmt -> for expr_list in test_list : suite
2100
global
for_stmt -> for expr_list in test_list : suite
2100
break
for_stmt -> for expr_list in test_list : suite
2100
return
for_stmt -> for expr_list in test_list : suite
2100
False
for_stmt -> for expr_list in test_list : suite
2100
None
for_stmt -> for expr_list in test_list : suite
2100
NEWLINE
for_stmt -> for expr_list in test_list : suite
2100
not
for_stmt -> for expr_list in test_list : suite
2100
nonlocal
for_stmt -> for expr_list in test_list : suite
2101
>
expr -> xor_expr | expr
2101
is
expr -> xor_expr | expr
2101
<
expr -> xor_expr | expr
2101
if
expr -> xor_expr | expr
2101
>=
expr -> xor_expr | expr
2101
or
expr -> xor_expr | expr
2101
and
expr -> xor_expr | expr
2101
in
expr -> xor_expr | expr
2101
!=
expr -> xor_expr | expr
2101
:
expr -> xor_expr | expr
2101
<=
expr -> xor_expr | expr
2101
==
expr -> xor_expr | expr
2101
,
expr -> xor_expr | expr
2101
not
expr -> xor_expr | expr
2102
]
2354
2103
<
trailer -> ( )
2103
.
trailer -> ( )
2103
*
trailer -> ( )
2103
or
trailer -> ( )
2103
is
trailer -> ( )
2103
:
trailer -> ( )
2103
/
trailer -> ( )
2103
+
trailer -> ( )
2103
@
trailer -> ( )
2103
>
trailer -> ( )
2103
//
trailer -> ( )
2103
|
trailer -> ( )
2103
!=
trailer -> ( )
2103
&
trailer -> ( )
2103
^
trailer -> ( )
2103
<=
trailer -> ( )
2103
%
trailer -> ( )
2103
>>
trailer -> ( )
2103
**
trailer -> ( )
2103
and
trailer -> ( )
2103
(
trailer -> ( )
2103
,
trailer -> ( )
2103
==
trailer -> ( )
2103
if
trailer -> ( )
2103
[
trailer -> ( )
2103
<<
trailer -> ( )
2103
in
trailer -> ( )
2103
-
trailer -> ( )
2103
not
trailer -> ( )
2103
>=
trailer -> ( )
2104
)
2355
2105
|
trailer -> . NAME
2105
@
trailer -> . NAME
2105
^
trailer -> . NAME
2105
>
trailer -> . NAME
2105
+
trailer -> . NAME
2105
.
trailer -> . NAME
2105
:
trailer -> . NAME
2105
!=
trailer -> . NAME
2105
<<
trailer -> . NAME
2105
<=
trailer -> . NAME
2105
[
trailer -> . NAME
2105
*
trailer -> . NAME
2105
(
trailer -> . NAME
2105
//
trailer -> . NAME
2105
**
trailer -> . NAME
2105
-
trailer -> . NAME
2105
in
trailer -> . NAME
2105
>=
trailer -> . NAME
2105
,
trailer -> . NAME
2105
==
trailer -> . NAME
2105
or
trailer -> . NAME
2105
and
trailer -> . NAME
2105
%
trailer -> . NAME
2105
is
trailer -> . NAME
2105
<
trailer -> . NAME
2105
not
trailer -> . NAME
2105
/
trailer -> . NAME
2105
if
trailer -> . NAME
2105
&
trailer -> . NAME
2105
>>
trailer -> . NAME
2106
&
trailer_expr -> trailer trailer_expr
2106
not
trailer_expr -> trailer trailer_expr
2106
and
trailer_expr -> trailer trailer_expr
2106
+
trailer_expr -> trailer trailer_expr
2106
==
trailer_expr -> trailer trailer_expr
2106
**
trailer_expr -> trailer trailer_expr
2106
/
trailer_expr -> trailer trailer_expr
2106
^
trailer_expr -> trailer trailer_expr
2106
,
trailer_expr -> trailer trailer_expr
2106
>
trailer_expr -> trailer trailer_expr
2106
*
trailer_expr -> trailer trailer_expr
2106
//
trailer_expr -> trailer trailer_expr
2106
>>
trailer_expr -> trailer trailer_expr
2106
<<
trailer_expr -> trailer trailer_expr
2106
>=
trailer_expr -> trailer trailer_expr
2106
:
trailer_expr -> trailer trailer_expr
2106
<=
trailer_expr -> trailer trailer_expr
2106
-
trailer_expr -> trailer trailer_expr
2106
is
trailer_expr -> trailer trailer_expr
2106
in
trailer_expr -> trailer trailer_expr
2106
<
trailer_expr -> trailer trailer_expr
2106
|
trailer_expr -> trailer trailer_expr
2106
if
trailer_expr -> trailer trailer_expr
2106
%
trailer_expr -> trailer trailer_expr
2106
@
trailer_expr -> trailer trailer_expr
2106
!=
trailer_expr -> trailer trailer_expr
2106
or
trailer_expr -> trailer trailer_expr
2107
if
atom -> ( test_list_comp )
2107
or
atom -> ( test_list_comp )
2107
*
atom -> ( test_list_comp )
2107
|
atom -> ( test_list_comp )
2107
>>
atom -> ( test_list_comp )
2107
%
atom -> ( test_list_comp )
2107
not
atom -> ( test_list_comp )
2107
//
atom -> ( test_list_comp )
2107
+
atom -> ( test_list_comp )
2107
and
atom -> ( test_list_comp )
2107
>
atom -> ( test_list_comp )
2107
[
atom -> ( test_list_comp )
2107
^
atom -> ( test_list_comp )
2107
:
atom -> ( test_list_comp )
2107
!=
atom -> ( test_list_comp )
2107
<<
atom -> ( test_list_comp )
2107
**
atom -> ( test_list_comp )
2107
is
atom -> ( test_list_comp )
2107
<=
atom -> ( test_list_comp )
2107
-
atom -> ( test_list_comp )
2107
&
atom -> ( test_list_comp )
2107
(
atom -> ( test_list_comp )
2107
,
atom -> ( test_list_comp )
2107
in
atom -> ( test_list_comp )
2107
@
atom -> ( test_list_comp )
2107
.
atom -> ( test_list_comp )
2107
<
atom -> ( test_list_comp )
2107
/
atom -> ( test_list_comp )
2107
==
atom -> ( test_list_comp )
2107
>=
atom -> ( test_list_comp )
2108
:
or_test -> and_test or or_test
2108
,
or_test -> and_test or or_test
2108
if
or_test -> and_test or or_test
2109
atom_expr
1182
2109
and_expr
1183
2109
term
1184
2109
factor
1185
2109
shift_expr
1186
2109
arith_expr
1187
2109
NUMBER
1188
2109
NAME
1189
2109
[
1190
2109
{
1191
2109
expr
1192
2109
not_test
1193
2109
False
1194
2109
xor_expr
1196
2109
STRING
1197
2109
atom
1198
2109
+
1199
2109
True
1200
2109
(
1201
2109
None
1203
2109
-
1202
2109
and_test
1204
2109
power
1205
2109
~
1206
2109
lambda
1207
2109
test
2356
2109
not
1208
2109
comparison
1209
2109
lambdef
1211
2109
or_test
1212
2110
,
lambdef -> lambda : test
2110
:
lambdef -> lambda : test
2111
:
test_list -> test , test_list
2112
else
2357
2113
def
decorator -> @ dotted_name ( arglist ) NEWLINE
2113
@
decorator -> @ dotted_name ( arglist ) NEWLINE
2113
class
decorator -> @ dotted_name ( arglist ) NEWLINE
2114
atom_expr
1736
2114
NUMBER
1742
2114
NAME
1743
2114
[
1744
2114
{
1745
2114
False
1747
2114
STRING
1749
2114
+
1750
2114
True
1751
2114
-
1752
2114
(
1755
2114
factor
2358
2114
None
1756
2114
atom
1758
2114
power
1759
2114
~
1760
2115
atom_expr
1736
2115
and_expr
1737
2115
term
1738
2115
factor
1739
2115
shift_expr
1740
2115
arith_expr
1741
2115
NUMBER
1742
2115
NAME
1743
2115
[
1744
2115
{
1745
2115
False
1747
2115
STRING
1749
2115
xor_expr
2359
2115
+
1750
2115
True
1751
2115
-
1752
2115
(
1755
2115
None
1756
2115
atom
1758
2115
power
1759
2115
~
1760
2116
atom_expr
1736
2116
factor
1739
2116
term
1738
2116
NUMBER
1742
2116
NAME
1743
2116
[
1744
2116
{
1745
2116
False
1747
2116
STRING
1749
2116
+
1750
2116
True
1751
2116
-
1752
2116
(
1755
2116
None
1756
2116
arith_expr
2360
2116
atom
1758
2116
power
1759
2116
~
1760
2117
atom_expr
1736
2117
factor
1739
2117
term
1738
2117
NUMBER
1742
2117
NAME
1743
2117
[
1744
2117
{
1745
2117
False
1747
2117
STRING
1749
2117
+
1750
2117
True
1751
2117
-
1752
2117
arith_expr
2361
2117
(
1755
2117
None
1756
2117
atom
1758
2117
power
1759
2117
~
1760
2118
atom_expr
1736
2118
factor
1739
2118
NUMBER
1742
2118
NAME
1743
2118
[
1744
2118
{
1745
2118
False
1747
2118
STRING
1749
2118
+
1750
2118
True
1751
2118
-
1752
2118
(
1755
2118
None
1756
2118
term
2362
2118
atom
1758
2118
power
1759
2118
~
1760
2119
atom_expr
1736
2119
factor
1739
2119
NUMBER
1742
2119
NAME
1743
2119
[
1744
2119
{
1745
2119
False
1747
2119
STRING
1749
2119
+
1750
2119
term
2363
2119
True
1751
2119
-
1752
2119
(
1755
2119
None
1756
2119
atom
1758
2119
power
1759
2119
~
1760
2120
atom_expr
1736
2120
term
2364
2120
factor
1739
2120
NUMBER
1742
2120
NAME
1743
2120
[
1744
2120
{
1745
2120
False
1747
2120
STRING
1749
2120
+
1750
2120
True
1751
2120
-
1752
2120
(
1755
2120
None
1756
2120
atom
1758
2120
power
1759
2120
~
1760
2121
atom_expr
1736
2121
factor
1739
2121
NUMBER
1742
2121
NAME
1743
2121
[
1744
2121
{
1745
2121
False
1747
2121
STRING
1749
2121
+
1750
2121
term
2365
2121
True
1751
2121
-
1752
2121
(
1755
2121
None
1756
2121
atom
1758
2121
power
1759
2121
~
1760
2122
atom_expr
1736
2122
factor
1739
2122
NUMBER
1742
2122
NAME
1743
2122
[
1744
2122
{
1745
2122
False
1747
2122
STRING
1749
2122
+
1750
2122
True
1751
2122
-
1752
2122
(
1755
2122
None
1756
2122
term
2366
2122
atom
1758
2122
power
1759
2122
~
1760
2123
atom_expr
1736
2123
factor
1739
2123
term
1738
2123
shift_expr
1740
2123
arith_expr
1741
2123
NUMBER
1742
2123
NAME
1743
2123
[
1744
2123
{
1745
2123
False
1747
2123
STRING
1749
2123
+
1750
2123
True
1751
2123
-
1752
2123
and_expr
2367
2123
(
1755
2123
None
1756
2123
atom
1758
2123
power
1759
2123
~
1760
2124
shift_expr
2368
2124
atom_expr
1736
2124
factor
1739
2124
term
1738
2124
arith_expr
1741
2124
NUMBER
1742
2124
NAME
1743
2124
[
1744
2124
{
1745
2124
False
1747
2124
STRING
1749
2124
+
1750
2124
True
1751
2124
-
1752
2124
(
1755
2124
None
1756
2124
atom
1758
2124
power
1759
2124
~
1760
2125
atom_expr
1736
2125
factor
1739
2125
term
1738
2125
arith_expr
1741
2125
NUMBER
1742
2125
NAME
1743
2125
[
1744
2125
{
1745
2125
False
1747
2125
STRING
1749
2125
+
1750
2125
shift_expr
2369
2125
True
1751
2125
-
1752
2125
(
1755
2125
None
1756
2125
atom
1758
2125
power
1759
2125
~
1760
2126
]
2370
2127
in
atom -> [ ]
2127
>=
atom -> [ ]
2127
%
atom -> [ ]
2127
is
atom -> [ ]
2127
^
atom -> [ ]
2127
//
atom -> [ ]
2127
NEWLINE
atom -> [ ]
2127
or
atom -> [ ]
2127
not
atom -> [ ]
2127
[
atom -> [ ]
2127
and
atom -> [ ]
2127
/
atom -> [ ]
2127
!=
atom -> [ ]
2127
>
atom -> [ ]
2127
=
atom -> [ ]
2127
&
atom -> [ ]
2127
**
atom -> [ ]
2127
@
atom -> [ ]
2127
==
atom -> [ ]
2127
<<
atom -> [ ]
2127
if
atom -> [ ]
2127
<
atom -> [ ]
2127
(
atom -> [ ]
2127
<=
atom -> [ ]
2127
*
atom -> [ ]
2127
.
atom -> [ ]
2127
>>
atom -> [ ]
2127
|
atom -> [ ]
2127
-
atom -> [ ]
2127
+
atom -> [ ]
2128
<<
atom -> { }
2128
+
atom -> { }
2128
//
atom -> { }
2128
is
atom -> { }
2128
>=
atom -> { }
2128
<=
atom -> { }
2128
>
atom -> { }
2128
*
atom -> { }
2128
^
atom -> { }
2128
%
atom -> { }
2128
>>
atom -> { }
2128
.
atom -> { }
2128
not
atom -> { }
2128
==
atom -> { }
2128
if
atom -> { }
2128
in
atom -> { }
2128
<
atom -> { }
2128
|
atom -> { }
2128
(
atom -> { }
2128
/
atom -> { }
2128
and
atom -> { }
2128
**
atom -> { }
2128
@
atom -> { }
2128
=
atom -> { }
2128
-
atom -> { }
2128
&
atom -> { }
2128
NEWLINE
atom -> { }
2128
!=
atom -> { }
2128
or
atom -> { }
2128
[
atom -> { }
2129
atom_expr
1736
2129
and_expr
1737
2129
term
1738
2129
factor
1739
2129
shift_expr
1740
2129
arith_expr
1741
2129
NUMBER
1742
2129
NAME
1743
2129
[
1744
2129
{
1745
2129
expr
1746
2129
False
1747
2129
xor_expr
1748
2129
STRING
1749
2129
comparison
2371
2129
+
1750
2129
True
1751
2129
-
1752
2129
(
1755
2129
None
1756
2129
atom
1758
2129
power
1759
2129
~
1760
2130
atom_expr
1736
2130
and_expr
1737
2130
term
1738
2130
factor
1739
2130
shift_expr
1740
2130
arith_expr
1741
2130
NUMBER
1742
2130
NAME
1743
2130
[
1744
2130
{
1745
2130
False
1747
2130
xor_expr
1748
2130
STRING
1749
2130
+
1750
2130
True
1751
2130
-
1752
2130
(
1755
2130
None
1756
2130
expr
2372
2130
atom
1758
2130
power
1759
2130
~
1760
2131
<<
factor -> + factor
2131
&
factor -> + factor
2131
>
factor -> + factor
2131
if
factor -> + factor
2131
not
factor -> + factor
2131
+
factor -> + factor
2131
^
factor -> + factor
2131
==
factor -> + factor
2131
/
factor -> + factor
2131
|
factor -> + factor
2131
>=
factor -> + factor
2131
NEWLINE
factor -> + factor
2131
%
factor -> + factor
2131
<
factor -> + factor
2131
is
factor -> + factor
2131
or
factor -> + factor
2131
@
factor -> + factor
2131
//
factor -> + factor
2131
and
factor -> + factor
2131
=
factor -> + factor
2131
-
factor -> + factor
2131
in
factor -> + factor
2131
*
factor -> + factor
2131
!=
factor -> + factor
2131
>>
factor -> + factor
2131
<=
factor -> + factor
2132
@
factor -> - factor
2132
^
factor -> - factor
2132
==
factor -> - factor
2132
in
factor -> - factor
2132
>>
factor -> - factor
2132
//
factor -> - factor
2132
and
factor -> - factor
2132
<=
factor -> - factor
2132
!=
factor -> - factor
2132
-
factor -> - factor
2132
&
factor -> - factor
2132
=
factor -> - factor
2132
NEWLINE
factor -> - factor
2132
not
factor -> - factor
2132
>
factor -> - factor
2132
*
factor -> - factor
2132
%
factor -> - factor
2132
/
factor -> - factor
2132
<
factor -> - factor
2132
|
factor -> - factor
2132
+
factor -> - factor
2132
if
factor -> - factor
2132
<<
factor -> - factor
2132
is
factor -> - factor
2132
or
factor -> - factor
2132
>=
factor -> - factor
2133
atom_expr
1736
2133
and_expr
1737
2133
term
1738
2133
factor
1739
2133
shift_expr
1740
2133
arith_expr
1741
2133
NUMBER
1742
2133
NAME
1743
2133
[
1744
2133
{
1745
2133
expr
1746
2133
False
1747
2133
xor_expr
1748
2133
STRING
1749
2133
+
1750
2133
True
1751
2133
-
1752
2133
and_test
1753
2133
(
1755
2133
None
1756
2133
atom
1758
2133
power
1759
2133
~
1760
2133
not_test
1761
2133
comparison
1763
2133
or_test
2373
2133
not
1764
2134
atom_expr
590
2134
and_expr
591
2134
term
592
2134
[
593
2134
shift_expr
594
2134
arith_expr
595
2134
NUMBER
596
2134
NAME
597
2134
factor
598
2134
{
599
2134
expr
600
2134
False
601
2134
xor_expr
602
2134
STRING
603
2134
+
604
2134
True
605
2134
-
606
2134
(
607
2134
None
608
2134
atom
609
2134
power
610
2134
~
611
2134
not_test
612
2134
or_test
2374
2134
not
613
2134
comparison
614
2134
and_test
615
2135
)
2375
2136
>=
atom -> ( )
2136
>>
atom -> ( )
2136
NEWLINE
atom -> ( )
2136
not
atom -> ( )
2136
if
atom -> ( )
2136
&
atom -> ( )
2136
^
atom -> ( )
2136
.
atom -> ( )
2136
/
atom -> ( )
2136
in
atom -> ( )
2136
>
atom -> ( )
2136
%
atom -> ( )
2136
(
atom -> ( )
2136
==
atom -> ( )
2136
[
atom -> ( )
2136
<=
atom -> ( )
2136
+
atom -> ( )
2136
|
atom -> ( )
2136
-
atom -> ( )
2136
or
atom -> ( )
2136
=
atom -> ( )
2136
@
atom -> ( )
2136
<<
atom -> ( )
2136
is
atom -> ( )
2136
**
atom -> ( )
2136
*
atom -> ( )
2136
and
atom -> ( )
2136
<
atom -> ( )
2136
!=
atom -> ( )
2136
//
atom -> ( )
2137
atom_expr
1736
2137
and_expr
1737
2137
term
1738
2137
factor
1739
2137
shift_expr
1740
2137
arith_expr
1741
2137
NUMBER
1742
2137
NAME
1743
2137
[
1744
2137
{
1745
2137
expr
1746
2137
False
1747
2137
xor_expr
1748
2137
STRING
1749
2137
+
1750
2137
True
1751
2137
-
1752
2137
and_test
1753
2137
or_test
1754
2137
(
1755
2137
None
1756
2137
lambda
1757
2137
atom
1758
2137
power
1759
2137
~
1760
2137
not_test
1761
2137
lambdef
1762
2137
comparison
1763
2137
test
2376
2137
not
1764
2138
:
2377
2139
atom_expr
472
2139
and_expr
473
2139
term
474
2139
factor
475
2139
shift_expr
476
2139
arith_expr
477
2139
NUMBER
478
2139
NAME
479
2139
[
480
2139
{
481
2139
expr
482
2139
not_test
483
2139
False
484
2139
xor_expr
485
2139
subscriptlist
2378
2139
atom
487
2139
STRING
488
2139
+
489
2139
(
490
2139
True
491
2139
-
492
2139
None
493
2139
or_test
494
2139
and_test
495
2139
power
496
2139
~
497
2139
lambda
498
2139
:
maybe_test -> 
2139
maybe_test
499
2139
test
500
2139
not
501
2139
comparison
502
2139
lambdef
503
2139
subscript
504
2140
and_test
505
2140
atom_expr
506
2140
and_expr
507
2140
term
508
2140
factor
509
2140
shift_expr
510
2140
arith_expr
511
2140
NUMBER
512
2140
NAME
513
2140
not
514
2140
[
515
2140
{
516
2140
expr
517
2140
not_test
519
2140
False
520
2140
xor_expr
521
2140
STRING
522
2140
lambda
523
2140
arglist
2379
2140
atom
525
2140
)
2380
2140
+
526
2140
True
527
2140
-
528
2140
or_test
529
2140
(
530
2140
None
531
2140
comparison
532
2140
power
533
2140
test
534
2140
~
535
2140
*
536
2140
lambdef
537
2140
**
538
2140
argument
539
2141
NAME
2381
2142
trailer_expr
2382
2142
[
2139
2142
(
2140
2142
.
2141
2142
trailer
2142
2142
<<
trailer_expr -> 
2142
@
trailer_expr -> 
2142
!=
trailer_expr -> 
2142
-
trailer_expr -> 
2142
^
trailer_expr -> 
2142
<
trailer_expr -> 
2142
NEWLINE
trailer_expr -> 
2142
/
trailer_expr -> 
2142
is
trailer_expr -> 
2142
==
trailer_expr -> 
2142
&
trailer_expr -> 
2142
>=
trailer_expr -> 
2142
or
trailer_expr -> 
2142
in
trailer_expr -> 
2142
=
trailer_expr -> 
2142
*
trailer_expr -> 
2142
not
trailer_expr -> 
2142
**
trailer_expr -> 
2142
<=
trailer_expr -> 
2142
+
trailer_expr -> 
2142
//
trailer_expr -> 
2142
%
trailer_expr -> 
2142
>
trailer_expr -> 
2142
|
trailer_expr -> 
2142
if
trailer_expr -> 
2142
and
trailer_expr -> 
2142
>>
trailer_expr -> 
2143
==
atom_expr -> atom trailer_expr
2143
%
atom_expr -> atom trailer_expr
2143
+
atom_expr -> atom trailer_expr
2143
not
atom_expr -> atom trailer_expr
2143
or
atom_expr -> atom trailer_expr
2143
//
atom_expr -> atom trailer_expr
2143
and
atom_expr -> atom trailer_expr
2143
!=
atom_expr -> atom trailer_expr
2143
<<
atom_expr -> atom trailer_expr
2143
NEWLINE
atom_expr -> atom trailer_expr
2143
if
atom_expr -> atom trailer_expr
2143
-
atom_expr -> atom trailer_expr
2143
=
atom_expr -> atom trailer_expr
2143
>>
atom_expr -> atom trailer_expr
2143
**
atom_expr -> atom trailer_expr
2143
/
atom_expr -> atom trailer_expr
2143
<
atom_expr -> atom trailer_expr
2143
in
atom_expr -> atom trailer_expr
2143
&
atom_expr -> atom trailer_expr
2143
is
atom_expr -> atom trailer_expr
2143
|
atom_expr -> atom trailer_expr
2143
>
atom_expr -> atom trailer_expr
2143
>=
atom_expr -> atom trailer_expr
2143
<=
atom_expr -> atom trailer_expr
2143
@
atom_expr -> atom trailer_expr
2143
*
atom_expr -> atom trailer_expr
2143
^
atom_expr -> atom trailer_expr
2144
=
factor -> ~ factor
2144
<<
factor -> ~ factor
2144
in
factor -> ~ factor
2144
<=
factor -> ~ factor
2144
if
factor -> ~ factor
2144
|
factor -> ~ factor
2144
<
factor -> ~ factor
2144
>>
factor -> ~ factor
2144
==
factor -> ~ factor
2144
>=
factor -> ~ factor
2144
!=
factor -> ~ factor
2144
//
factor -> ~ factor
2144
*
factor -> ~ factor
2144
/
factor -> ~ factor
2144
NEWLINE
factor -> ~ factor
2144
+
factor -> ~ factor
2144
is
factor -> ~ factor
2144
not
factor -> ~ factor
2144
and
factor -> ~ factor
2144
^
factor -> ~ factor
2144
@
factor -> ~ factor
2144
>
factor -> ~ factor
2144
-
factor -> ~ factor
2144
or
factor -> ~ factor
2144
&
factor -> ~ factor
2144
%
factor -> ~ factor
2145
atom_expr
1736
2145
and_expr
1737
2145
term
1738
2145
factor
1739
2145
shift_expr
1740
2145
arith_expr
1741
2145
NUMBER
1742
2145
NAME
1743
2145
[
1744
2145
{
1745
2145
expr
1746
2145
False
1747
2145
xor_expr
1748
2145
STRING
1749
2145
+
1750
2145
True
1751
2145
-
1752
2145
(
1755
2145
None
1756
2145
atom
1758
2145
and_test
2383
2145
power
1759
2145
~
1760
2145
not_test
1761
2145
comparison
1763
2145
not
1764
2146
if
not_test -> not not_test
2146
or
not_test -> not not_test
2146
=
not_test -> not not_test
2146
NEWLINE
not_test -> not not_test
2146
and
not_test -> not not_test
2147
*
trailer -> [ subscriptlist ]
2147
not
trailer -> [ subscriptlist ]
2147
(
trailer -> [ subscriptlist ]
2147
<<
trailer -> [ subscriptlist ]
2147
,
trailer -> [ subscriptlist ]
2147
>>
trailer -> [ subscriptlist ]
2147
//
trailer -> [ subscriptlist ]
2147
NEWLINE
trailer -> [ subscriptlist ]
2147
=
trailer -> [ subscriptlist ]
2147
or
trailer -> [ subscriptlist ]
2147
is
trailer -> [ subscriptlist ]
2147
[
trailer -> [ subscriptlist ]
2147
|
trailer -> [ subscriptlist ]
2147
%
trailer -> [ subscriptlist ]
2147
<=
trailer -> [ subscriptlist ]
2147
and
trailer -> [ subscriptlist ]
2147
**
trailer -> [ subscriptlist ]
2147
if
trailer -> [ subscriptlist ]
2147
-
trailer -> [ subscriptlist ]
2147
in
trailer -> [ subscriptlist ]
2147
^
trailer -> [ subscriptlist ]
2147
+
trailer -> [ subscriptlist ]
2147
>=
trailer -> [ subscriptlist ]
2147
.
trailer -> [ subscriptlist ]
2147
&
trailer -> [ subscriptlist ]
2147
/
trailer -> [ subscriptlist ]
2147
!=
trailer -> [ subscriptlist ]
2147
<
trailer -> [ subscriptlist ]
2147
==
trailer -> [ subscriptlist ]
2147
>
trailer -> [ subscriptlist ]
2147
@
trailer -> [ subscriptlist ]
2148
%
trailer -> ( arglist )
2148
and
trailer -> ( arglist )
2148
+
trailer -> ( arglist )
2148
=
trailer -> ( arglist )
2148
or
trailer -> ( arglist )
2148
not
trailer -> ( arglist )
2148
-
trailer -> ( arglist )
2148
@
trailer -> ( arglist )
2148
[
trailer -> ( arglist )
2148
>>
trailer -> ( arglist )
2148
<=
trailer -> ( arglist )
2148
if
trailer -> ( arglist )
2148
//
trailer -> ( arglist )
2148
==
trailer -> ( arglist )
2148
<<
trailer -> ( arglist )
2148
*
trailer -> ( arglist )
2148
<
trailer -> ( arglist )
2148
**
trailer -> ( arglist )
2148
is
trailer -> ( arglist )
2148
>
trailer -> ( arglist )
2148
!=
trailer -> ( arglist )
2148
/
trailer -> ( arglist )
2148
NEWLINE
trailer -> ( arglist )
2148
in
trailer -> ( arglist )
2148
.
trailer -> ( arglist )
2148
|
trailer -> ( arglist )
2148
>=
trailer -> ( arglist )
2148
&
trailer -> ( arglist )
2148
(
trailer -> ( arglist )
2148
^
trailer -> ( arglist )
2148
,
trailer -> ( arglist )
2149
atom_expr
718
2149
and_expr
719
2149
term
720
2149
factor
721
2149
shift_expr
722
2149
arith_expr
723
2149
NUMBER
724
2149
NAME
725
2149
[
726
2149
{
727
2149
expr
728
2149
not_test
729
2149
False
730
2149
xor_expr
731
2149
STRING
732
2149
atom
734
2149
+
735
2149
True
736
2149
-
737
2149
and_test
738
2149
or_test
740
2149
(
741
2149
None
742
2149
lambda
743
2149
power
744
2149
~
745
2149
lambdef
746
2149
comparison
747
2149
test
2384
2149
not
749
2150
,
lambdef -> lambda varargslist : test
2150
=
lambdef -> lambda varargslist : test
2150
NEWLINE
lambdef -> lambda varargslist : test
2151
atom_expr
755
2151
and_expr
756
2151
term
757
2151
factor
758
2151
shift_expr
759
2151
arith_expr
760
2151
NUMBER
761
2151
NAME
762
2151
[
763
2151
{
764
2151
expr
765
2151
False
766
2151
xor_expr
767
2151
STRING
768
2151
+
769
2151
True
770
2151
-
771
2151
and_test
772
2151
or_test
773
2151
(
774
2151
None
775
2151
atom
776
2151
power
777
2151
~
778
2151
not_test
779
2151
comparison
780
2151
lambda
781
2151
not
782
2151
test
2385
2151
lambdef
784
2152
*
trailer -> [ subscriptlist ]
2152
not
trailer -> [ subscriptlist ]
2152
(
trailer -> [ subscriptlist ]
2152
<<
trailer -> [ subscriptlist ]
2152
>>
trailer -> [ subscriptlist ]
2152
//
trailer -> [ subscriptlist ]
2152
=
trailer -> [ subscriptlist ]
2152
or
trailer -> [ subscriptlist ]
2152
is
trailer -> [ subscriptlist ]
2152
[
trailer -> [ subscriptlist ]
2152
|
trailer -> [ subscriptlist ]
2152
%
trailer -> [ subscriptlist ]
2152
<=
trailer -> [ subscriptlist ]
2152
and
trailer -> [ subscriptlist ]
2152
**
trailer -> [ subscriptlist ]
2152
if
trailer -> [ subscriptlist ]
2152
-
trailer -> [ subscriptlist ]
2152
in
trailer -> [ subscriptlist ]
2152
^
trailer -> [ subscriptlist ]
2152
+
trailer -> [ subscriptlist ]
2152
>=
trailer -> [ subscriptlist ]
2152
.
trailer -> [ subscriptlist ]
2152
&
trailer -> [ subscriptlist ]
2152
/
trailer -> [ subscriptlist ]
2152
!=
trailer -> [ subscriptlist ]
2152
<
trailer -> [ subscriptlist ]
2152
==
trailer -> [ subscriptlist ]
2152
>
trailer -> [ subscriptlist ]
2152
@
trailer -> [ subscriptlist ]
2153
%
trailer -> ( arglist )
2153
and
trailer -> ( arglist )
2153
+
trailer -> ( arglist )
2153
=
trailer -> ( arglist )
2153
or
trailer -> ( arglist )
2153
not
trailer -> ( arglist )
2153
-
trailer -> ( arglist )
2153
@
trailer -> ( arglist )
2153
[
trailer -> ( arglist )
2153
>>
trailer -> ( arglist )
2153
<=
trailer -> ( arglist )
2153
if
trailer -> ( arglist )
2153
//
trailer -> ( arglist )
2153
==
trailer -> ( arglist )
2153
<<
trailer -> ( arglist )
2153
*
trailer -> ( arglist )
2153
<
trailer -> ( arglist )
2153
**
trailer -> ( arglist )
2153
is
trailer -> ( arglist )
2153
>
trailer -> ( arglist )
2153
!=
trailer -> ( arglist )
2153
/
trailer -> ( arglist )
2153
in
trailer -> ( arglist )
2153
.
trailer -> ( arglist )
2153
|
trailer -> ( arglist )
2153
>=
trailer -> ( arglist )
2153
&
trailer -> ( arglist )
2153
(
trailer -> ( arglist )
2153
^
trailer -> ( arglist )
2154
=
lambdef -> lambda varargslist : test
2155
,
test -> or_test if or_test else test
2155
NEWLINE
test -> or_test if or_test else test
2156
NEWLINE
test -> or_test if or_test else test
2156
from
test -> or_test if or_test else test
2157
*
power -> atom_expr ** factor
2157
in
power -> atom_expr ** factor
2157
<
power -> atom_expr ** factor
2157
if
power -> atom_expr ** factor
2157
-
power -> atom_expr ** factor
2157
>>
power -> atom_expr ** factor
2157
<=
power -> atom_expr ** factor
2157
and
power -> atom_expr ** factor
2157
==
power -> atom_expr ** factor
2157
NEWLINE
power -> atom_expr ** factor
2157
%
power -> atom_expr ** factor
2157
/
power -> atom_expr ** factor
2157
^
power -> atom_expr ** factor
2157
<<
power -> atom_expr ** factor
2157
>
power -> atom_expr ** factor
2157
//
power -> atom_expr ** factor
2157
is
power -> atom_expr ** factor
2157
@
power -> atom_expr ** factor
2157
+
power -> atom_expr ** factor
2157
|
power -> atom_expr ** factor
2157
!=
power -> atom_expr ** factor
2157
>=
power -> atom_expr ** factor
2157
or
power -> atom_expr ** factor
2157
&
power -> atom_expr ** factor
2157
not
power -> atom_expr ** factor
2158
and
xor_expr -> and_expr ^ xor_expr
2158
<
xor_expr -> and_expr ^ xor_expr
2158
>
xor_expr -> and_expr ^ xor_expr
2158
in
xor_expr -> and_expr ^ xor_expr
2158
|
xor_expr -> and_expr ^ xor_expr
2158
<=
xor_expr -> and_expr ^ xor_expr
2158
NEWLINE
xor_expr -> and_expr ^ xor_expr
2158
not
xor_expr -> and_expr ^ xor_expr
2158
or
xor_expr -> and_expr ^ xor_expr
2158
if
xor_expr -> and_expr ^ xor_expr
2158
is
xor_expr -> and_expr ^ xor_expr
2158
==
xor_expr -> and_expr ^ xor_expr
2158
!=
xor_expr -> and_expr ^ xor_expr
2158
>=
xor_expr -> and_expr ^ xor_expr
2159
<=
arith_expr -> term + arith_expr
2159
>=
arith_expr -> term + arith_expr
2159
if
arith_expr -> term + arith_expr
2159
>>
arith_expr -> term + arith_expr
2159
NEWLINE
arith_expr -> term + arith_expr
2159
==
arith_expr -> term + arith_expr
2159
&
arith_expr -> term + arith_expr
2159
>
arith_expr -> term + arith_expr
2159
!=
arith_expr -> term + arith_expr
2159
or
arith_expr -> term + arith_expr
2159
^
arith_expr -> term + arith_expr
2159
not
arith_expr -> term + arith_expr
2159
|
arith_expr -> term + arith_expr
2159
is
arith_expr -> term + arith_expr
2159
in
arith_expr -> term + arith_expr
2159
<<
arith_expr -> term + arith_expr
2159
<
arith_expr -> term + arith_expr
2159
and
arith_expr -> term + arith_expr
2160
<=
arith_expr -> term - arith_expr
2160
<<
arith_expr -> term - arith_expr
2160
or
arith_expr -> term - arith_expr
2160
is
arith_expr -> term - arith_expr
2160
==
arith_expr -> term - arith_expr
2160
!=
arith_expr -> term - arith_expr
2160
and
arith_expr -> term - arith_expr
2160
|
arith_expr -> term - arith_expr
2160
if
arith_expr -> term - arith_expr
2160
&
arith_expr -> term - arith_expr
2160
^
arith_expr -> term - arith_expr
2160
in
arith_expr -> term - arith_expr
2160
>>
arith_expr -> term - arith_expr
2160
NEWLINE
arith_expr -> term - arith_expr
2160
>
arith_expr -> term - arith_expr
2160
not
arith_expr -> term - arith_expr
2160
>=
arith_expr -> term - arith_expr
2160
<
arith_expr -> term - arith_expr
2161
|
term -> factor * term
2161
-
term -> factor * term
2161
in
term -> factor * term
2161
and
term -> factor * term
2161
NEWLINE
term -> factor * term
2161
<<
term -> factor * term
2161
>=
term -> factor * term
2161
if
term -> factor * term
2161
or
term -> factor * term
2161
<=
term -> factor * term
2161
is
term -> factor * term
2161
^
term -> factor * term
2161
!=
term -> factor * term
2161
==
term -> factor * term
2161
&
term -> factor * term
2161
>
term -> factor * term
2161
not
term -> factor * term
2161
<
term -> factor * term
2161
+
term -> factor * term
2161
>>
term -> factor * term
2162
!=
term -> factor % term
2162
>>
term -> factor % term
2162
==
term -> factor % term
2162
>=
term -> factor % term
2162
^
term -> factor % term
2162
not
term -> factor % term
2162
or
term -> factor % term
2162
if
term -> factor % term
2162
<=
term -> factor % term
2162
<
term -> factor % term
2162
is
term -> factor % term
2162
-
term -> factor % term
2162
in
term -> factor % term
2162
>
term -> factor % term
2162
<<
term -> factor % term
2162
and
term -> factor % term
2162
NEWLINE
term -> factor % term
2162
|
term -> factor % term
2162
+
term -> factor % term
2162
&
term -> factor % term
2163
is
term -> factor // term
2163
if
term -> factor // term
2163
>
term -> factor // term
2163
==
term -> factor // term
2163
+
term -> factor // term
2163
^
term -> factor // term
2163
-
term -> factor // term
2163
in
term -> factor // term
2163
>>
term -> factor // term
2163
NEWLINE
term -> factor // term
2163
|
term -> factor // term
2163
<<
term -> factor // term
2163
!=
term -> factor // term
2163
&
term -> factor // term
2163
not
term -> factor // term
2163
<=
term -> factor // term
2163
<
term -> factor // term
2163
and
term -> factor // term
2163
>=
term -> factor // term
2163
or
term -> factor // term
2164
>=
term -> factor / term
2164
!=
term -> factor / term
2164
not
term -> factor / term
2164
^
term -> factor / term
2164
in
term -> factor / term
2164
and
term -> factor / term
2164
<<
term -> factor / term
2164
+
term -> factor / term
2164
>
term -> factor / term
2164
|
term -> factor / term
2164
or
term -> factor / term
2164
if
term -> factor / term
2164
>>
term -> factor / term
2164
NEWLINE
term -> factor / term
2164
<
term -> factor / term
2164
&
term -> factor / term
2164
-
term -> factor / term
2164
is
term -> factor / term
2164
==
term -> factor / term
2164
<=
term -> factor / term
2165
-
term -> factor @ term
2165
&
term -> factor @ term
2165
^
term -> factor @ term
2165
NEWLINE
term -> factor @ term
2165
!=
term -> factor @ term
2165
<<
term -> factor @ term
2165
is
term -> factor @ term
2165
<=
term -> factor @ term
2165
==
term -> factor @ term
2165
+
term -> factor @ term
2165
and
term -> factor @ term
2165
>
term -> factor @ term
2165
if
term -> factor @ term
2165
not
term -> factor @ term
2165
>>
term -> factor @ term
2165
>=
term -> factor @ term
2165
|
term -> factor @ term
2165
in
term -> factor @ term
2165
<
term -> factor @ term
2165
or
term -> factor @ term
2166
if
and_expr -> shift_expr & and_expr
2166
!=
and_expr -> shift_expr & and_expr
2166
<=
and_expr -> shift_expr & and_expr
2166
not
and_expr -> shift_expr & and_expr
2166
^
and_expr -> shift_expr & and_expr
2166
|
and_expr -> shift_expr & and_expr
2166
or
and_expr -> shift_expr & and_expr
2166
in
and_expr -> shift_expr & and_expr
2166
>
and_expr -> shift_expr & and_expr
2166
and
and_expr -> shift_expr & and_expr
2166
==
and_expr -> shift_expr & and_expr
2166
NEWLINE
and_expr -> shift_expr & and_expr
2166
<
and_expr -> shift_expr & and_expr
2166
is
and_expr -> shift_expr & and_expr
2166
>=
and_expr -> shift_expr & and_expr
2167
NEWLINE
shift_expr -> arith_expr << shift_expr
2167
^
shift_expr -> arith_expr << shift_expr
2167
|
shift_expr -> arith_expr << shift_expr
2167
&
shift_expr -> arith_expr << shift_expr
2167
and
shift_expr -> arith_expr << shift_expr
2167
is
shift_expr -> arith_expr << shift_expr
2167
in
shift_expr -> arith_expr << shift_expr
2167
<=
shift_expr -> arith_expr << shift_expr
2167
<
shift_expr -> arith_expr << shift_expr
2167
not
shift_expr -> arith_expr << shift_expr
2167
==
shift_expr -> arith_expr << shift_expr
2167
>=
shift_expr -> arith_expr << shift_expr
2167
if
shift_expr -> arith_expr << shift_expr
2167
>
shift_expr -> arith_expr << shift_expr
2167
or
shift_expr -> arith_expr << shift_expr
2167
!=
shift_expr -> arith_expr << shift_expr
2168
or
shift_expr -> arith_expr >> shift_expr
2168
and
shift_expr -> arith_expr >> shift_expr
2168
>=
shift_expr -> arith_expr >> shift_expr
2168
NEWLINE
shift_expr -> arith_expr >> shift_expr
2168
not
shift_expr -> arith_expr >> shift_expr
2168
^
shift_expr -> arith_expr >> shift_expr
2168
is
shift_expr -> arith_expr >> shift_expr
2168
if
shift_expr -> arith_expr >> shift_expr
2168
in
shift_expr -> arith_expr >> shift_expr
2168
<=
shift_expr -> arith_expr >> shift_expr
2168
==
shift_expr -> arith_expr >> shift_expr
2168
<
shift_expr -> arith_expr >> shift_expr
2168
!=
shift_expr -> arith_expr >> shift_expr
2168
|
shift_expr -> arith_expr >> shift_expr
2168
>
shift_expr -> arith_expr >> shift_expr
2168
&
shift_expr -> arith_expr >> shift_expr
2169
and
atom -> [ test_list_comp ]
2169
<=
atom -> [ test_list_comp ]
2169
**
atom -> [ test_list_comp ]
2169
^
atom -> [ test_list_comp ]
2169
NEWLINE
atom -> [ test_list_comp ]
2169
[
atom -> [ test_list_comp ]
2169
!=
atom -> [ test_list_comp ]
2169
<
atom -> [ test_list_comp ]
2169
/
atom -> [ test_list_comp ]
2169
-
atom -> [ test_list_comp ]
2169
>=
atom -> [ test_list_comp ]
2169
if
atom -> [ test_list_comp ]
2169
%
atom -> [ test_list_comp ]
2169
is
atom -> [ test_list_comp ]
2169
+
atom -> [ test_list_comp ]
2169
&
atom -> [ test_list_comp ]
2169
@
atom -> [ test_list_comp ]
2169
or
atom -> [ test_list_comp ]
2169
in
atom -> [ test_list_comp ]
2169
==
atom -> [ test_list_comp ]
2169
not
atom -> [ test_list_comp ]
2169
.
atom -> [ test_list_comp ]
2169
|
atom -> [ test_list_comp ]
2169
>
atom -> [ test_list_comp ]
2169
<<
atom -> [ test_list_comp ]
2169
//
atom -> [ test_list_comp ]
2169
(
atom -> [ test_list_comp ]
2169
*
atom -> [ test_list_comp ]
2169
>>
atom -> [ test_list_comp ]
2170
if
comparison -> expr comp_op comparison
2170
or
comparison -> expr comp_op comparison
2170
NEWLINE
comparison -> expr comp_op comparison
2170
and
comparison -> expr comp_op comparison
2171
NEWLINE
expr -> xor_expr | expr
2171
>
expr -> xor_expr | expr
2171
is
expr -> xor_expr | expr
2171
<
expr -> xor_expr | expr
2171
if
expr -> xor_expr | expr
2171
>=
expr -> xor_expr | expr
2171
or
expr -> xor_expr | expr
2171
and
expr -> xor_expr | expr
2171
in
expr -> xor_expr | expr
2171
!=
expr -> xor_expr | expr
2171
<=
expr -> xor_expr | expr
2171
==
expr -> xor_expr | expr
2171
not
expr -> xor_expr | expr
2172
NEWLINE
atom -> ( test_list_comp )
2172
if
atom -> ( test_list_comp )
2172
or
atom -> ( test_list_comp )
2172
*
atom -> ( test_list_comp )
2172
|
atom -> ( test_list_comp )
2172
>>
atom -> ( test_list_comp )
2172
%
atom -> ( test_list_comp )
2172
not
atom -> ( test_list_comp )
2172
//
atom -> ( test_list_comp )
2172
+
atom -> ( test_list_comp )
2172
and
atom -> ( test_list_comp )
2172
>
atom -> ( test_list_comp )
2172
[
atom -> ( test_list_comp )
2172
^
atom -> ( test_list_comp )
2172
!=
atom -> ( test_list_comp )
2172
<<
atom -> ( test_list_comp )
2172
**
atom -> ( test_list_comp )
2172
is
atom -> ( test_list_comp )
2172
<=
atom -> ( test_list_comp )
2172
-
atom -> ( test_list_comp )
2172
&
atom -> ( test_list_comp )
2172
(
atom -> ( test_list_comp )
2172
in
atom -> ( test_list_comp )
2172
@
atom -> ( test_list_comp )
2172
.
atom -> ( test_list_comp )
2172
<
atom -> ( test_list_comp )
2172
/
atom -> ( test_list_comp )
2172
==
atom -> ( test_list_comp )
2172
>=
atom -> ( test_list_comp )
2173
NEWLINE
lambdef -> lambda : test
2174
atom_expr
1384
2174
and_expr
1385
2174
term
1386
2174
factor
1387
2174
shift_expr
1388
2174
arith_expr
1389
2174
NUMBER
1390
2174
NAME
1391
2174
[
1392
2174
{
1393
2174
expr
1394
2174
False
1395
2174
xor_expr
1396
2174
STRING
1397
2174
+
1398
2174
True
1399
2174
-
1400
2174
(
1401
2174
None
1402
2174
lambda
1403
2174
atom
1404
2174
or_test
1405
2174
power
1406
2174
~
1407
2174
test
2386
2174
lambdef
1408
2174
comparison
1409
2174
not_test
1411
2174
and_test
1412
2174
not
1413
2175
]
2387
2176
)
2388
2177
<
trailer -> ( )
2177
.
trailer -> ( )
2177
*
trailer -> ( )
2177
or
trailer -> ( )
2177
is
trailer -> ( )
2177
/
trailer -> ( )
2177
+
trailer -> ( )
2177
@
trailer -> ( )
2177
>
trailer -> ( )
2177
//
trailer -> ( )
2177
|
trailer -> ( )
2177
!=
trailer -> ( )
2177
&
trailer -> ( )
2177
^
trailer -> ( )
2177
<=
trailer -> ( )
2177
%
trailer -> ( )
2177
>>
trailer -> ( )
2177
**
trailer -> ( )
2177
and
trailer -> ( )
2177
(
trailer -> ( )
2177
==
trailer -> ( )
2177
if
trailer -> ( )
2177
[
trailer -> ( )
2177
<<
trailer -> ( )
2177
NEWLINE
trailer -> ( )
2177
in
trailer -> ( )
2177
-
trailer -> ( )
2177
not
trailer -> ( )
2177
>=
trailer -> ( )
2178
|
trailer -> . NAME
2178
@
trailer -> . NAME
2178
^
trailer -> . NAME
2178
>
trailer -> . NAME
2178
+
trailer -> . NAME
2178
.
trailer -> . NAME
2178
!=
trailer -> . NAME
2178
<<
trailer -> . NAME
2178
<=
trailer -> . NAME
2178
[
trailer -> . NAME
2178
*
trailer -> . NAME
2178
(
trailer -> . NAME
2178
//
trailer -> . NAME
2178
**
trailer -> . NAME
2178
-
trailer -> . NAME
2178
in
trailer -> . NAME
2178
>=
trailer -> . NAME
2178
&
trailer -> . NAME
2178
==
trailer -> . NAME
2178
or
trailer -> . NAME
2178
and
trailer -> . NAME
2178
%
trailer -> . NAME
2178
is
trailer -> . NAME
2178
<
trailer -> . NAME
2178
not
trailer -> . NAME
2178
/
trailer -> . NAME
2178
if
trailer -> . NAME
2178
NEWLINE
trailer -> . NAME
2178
>>
trailer -> . NAME
2179
&
trailer_expr -> trailer trailer_expr
2179
not
trailer_expr -> trailer trailer_expr
2179
and
trailer_expr -> trailer trailer_expr
2179
+
trailer_expr -> trailer trailer_expr
2179
==
trailer_expr -> trailer trailer_expr
2179
**
trailer_expr -> trailer trailer_expr
2179
/
trailer_expr -> trailer trailer_expr
2179
^
trailer_expr -> trailer trailer_expr
2179
>
trailer_expr -> trailer trailer_expr
2179
*
trailer_expr -> trailer trailer_expr
2179
NEWLINE
trailer_expr -> trailer trailer_expr
2179
//
trailer_expr -> trailer trailer_expr
2179
>>
trailer_expr -> trailer trailer_expr
2179
<<
trailer_expr -> trailer trailer_expr
2179
>=
trailer_expr -> trailer trailer_expr
2179
<=
trailer_expr -> trailer trailer_expr
2179
-
trailer_expr -> trailer trailer_expr
2179
is
trailer_expr -> trailer trailer_expr
2179
in
trailer_expr -> trailer trailer_expr
2179
<
trailer_expr -> trailer trailer_expr
2179
|
trailer_expr -> trailer trailer_expr
2179
if
trailer_expr -> trailer trailer_expr
2179
%
trailer_expr -> trailer trailer_expr
2179
@
trailer_expr -> trailer trailer_expr
2179
!=
trailer_expr -> trailer trailer_expr
2179
or
trailer_expr -> trailer trailer_expr
2180
else
2389
2181
NEWLINE
and_test -> not_test and and_test
2181
or
and_test -> not_test and and_test
2181
if
and_test -> not_test and and_test
2182
if
or_test -> and_test or or_test
2182
NEWLINE
or_test -> and_test or or_test
2183
pass
while_stmt -> while test : suite else : suite
2183
yield
while_stmt -> while test : suite else : suite
2183
del
while_stmt -> while test : suite else : suite
2183
NEWLINE
while_stmt -> while test : suite else : suite
2183
while
while_stmt -> while test : suite else : suite
2183
not
while_stmt -> while test : suite else : suite
2183
lambda
while_stmt -> while test : suite else : suite
2183
STRING
while_stmt -> while test : suite else : suite
2183
-
while_stmt -> while test : suite else : suite
2183
+
while_stmt -> while test : suite else : suite
2183
@
while_stmt -> while test : suite else : suite
2183
~
while_stmt -> while test : suite else : suite
2183
break
while_stmt -> while test : suite else : suite
2183
with
while_stmt -> while test : suite else : suite
2183
assert
while_stmt -> while test : suite else : suite
2183
global
while_stmt -> while test : suite else : suite
2183
try
while_stmt -> while test : suite else : suite
2183
{
while_stmt -> while test : suite else : suite
2183
raise
while_stmt -> while test : suite else : suite
2183
True
while_stmt -> while test : suite else : suite
2183
for
while_stmt -> while test : suite else : suite
2183
(
while_stmt -> while test : suite else : suite
2183
def
while_stmt -> while test : suite else : suite
2183
[
while_stmt -> while test : suite else : suite
2183
None
while_stmt -> while test : suite else : suite
2183
class
while_stmt -> while test : suite else : suite
2183
NAME
while_stmt -> while test : suite else : suite
2183
nonlocal
while_stmt -> while test : suite else : suite
2183
NUMBER
while_stmt -> while test : suite else : suite
2183
if
while_stmt -> while test : suite else : suite
2183
False
while_stmt -> while test : suite else : suite
2183
return
while_stmt -> while test : suite else : suite
2183
continue
while_stmt -> while test : suite else : suite
2183
$
while_stmt -> while test : suite else : suite
2184
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2184
del
suite -> NEWLINE INDENT stmt_list DEDENT
2184
@
suite -> NEWLINE INDENT stmt_list DEDENT
2184
for
suite -> NEWLINE INDENT stmt_list DEDENT
2184
def
suite -> NEWLINE INDENT stmt_list DEDENT
2184
{
suite -> NEWLINE INDENT stmt_list DEDENT
2184
try
suite -> NEWLINE INDENT stmt_list DEDENT
2184
with
suite -> NEWLINE INDENT stmt_list DEDENT
2184
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2184
global
suite -> NEWLINE INDENT stmt_list DEDENT
2184
break
suite -> NEWLINE INDENT stmt_list DEDENT
2184
False
suite -> NEWLINE INDENT stmt_list DEDENT
2184
[
suite -> NEWLINE INDENT stmt_list DEDENT
2184
while
suite -> NEWLINE INDENT stmt_list DEDENT
2184
True
suite -> NEWLINE INDENT stmt_list DEDENT
2184
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2184
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2184
class
suite -> NEWLINE INDENT stmt_list DEDENT
2184
not
suite -> NEWLINE INDENT stmt_list DEDENT
2184
~
suite -> NEWLINE INDENT stmt_list DEDENT
2184
$
suite -> NEWLINE INDENT stmt_list DEDENT
2184
-
suite -> NEWLINE INDENT stmt_list DEDENT
2184
None
suite -> NEWLINE INDENT stmt_list DEDENT
2184
(
suite -> NEWLINE INDENT stmt_list DEDENT
2184
return
suite -> NEWLINE INDENT stmt_list DEDENT
2184
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2184
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2184
if
suite -> NEWLINE INDENT stmt_list DEDENT
2184
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2184
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2184
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2184
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2184
else
suite -> NEWLINE INDENT stmt_list DEDENT
2184
+
suite -> NEWLINE INDENT stmt_list DEDENT
2184
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2185
*
trailer -> [ subscriptlist ]
2185
not
trailer -> [ subscriptlist ]
2185
(
trailer -> [ subscriptlist ]
2185
<<
trailer -> [ subscriptlist ]
2185
,
trailer -> [ subscriptlist ]
2185
>>
trailer -> [ subscriptlist ]
2185
//
trailer -> [ subscriptlist ]
2185
or
trailer -> [ subscriptlist ]
2185
]
trailer -> [ subscriptlist ]
2185
is
trailer -> [ subscriptlist ]
2185
[
trailer -> [ subscriptlist ]
2185
|
trailer -> [ subscriptlist ]
2185
%
trailer -> [ subscriptlist ]
2185
<=
trailer -> [ subscriptlist ]
2185
and
trailer -> [ subscriptlist ]
2185
**
trailer -> [ subscriptlist ]
2185
if
trailer -> [ subscriptlist ]
2185
-
trailer -> [ subscriptlist ]
2185
in
trailer -> [ subscriptlist ]
2185
^
trailer -> [ subscriptlist ]
2185
+
trailer -> [ subscriptlist ]
2185
>=
trailer -> [ subscriptlist ]
2185
.
trailer -> [ subscriptlist ]
2185
&
trailer -> [ subscriptlist ]
2185
/
trailer -> [ subscriptlist ]
2185
!=
trailer -> [ subscriptlist ]
2185
<
trailer -> [ subscriptlist ]
2185
==
trailer -> [ subscriptlist ]
2185
>
trailer -> [ subscriptlist ]
2185
@
trailer -> [ subscriptlist ]
2186
%
trailer -> ( arglist )
2186
and
trailer -> ( arglist )
2186
+
trailer -> ( arglist )
2186
or
trailer -> ( arglist )
2186
not
trailer -> ( arglist )
2186
-
trailer -> ( arglist )
2186
@
trailer -> ( arglist )
2186
[
trailer -> ( arglist )
2186
>>
trailer -> ( arglist )
2186
<=
trailer -> ( arglist )
2186
if
trailer -> ( arglist )
2186
]
trailer -> ( arglist )
2186
//
trailer -> ( arglist )
2186
==
trailer -> ( arglist )
2186
<<
trailer -> ( arglist )
2186
*
trailer -> ( arglist )
2186
<
trailer -> ( arglist )
2186
**
trailer -> ( arglist )
2186
is
trailer -> ( arglist )
2186
>
trailer -> ( arglist )
2186
!=
trailer -> ( arglist )
2186
/
trailer -> ( arglist )
2186
in
trailer -> ( arglist )
2186
.
trailer -> ( arglist )
2186
|
trailer -> ( arglist )
2186
>=
trailer -> ( arglist )
2186
&
trailer -> ( arglist )
2186
(
trailer -> ( arglist )
2186
^
trailer -> ( arglist )
2186
,
trailer -> ( arglist )
2187
atom_expr
908
2187
and_expr
909
2187
term
910
2187
factor
911
2187
shift_expr
912
2187
arith_expr
913
2187
NUMBER
914
2187
NAME
915
2187
[
916
2187
{
917
2187
expr
918
2187
not_test
919
2187
False
920
2187
xor_expr
921
2187
atom
922
2187
STRING
923
2187
+
924
2187
(
925
2187
True
926
2187
-
927
2187
None
928
2187
or_test
929
2187
and_test
931
2187
power
932
2187
~
933
2187
lambda
934
2187
test
2390
2187
not
935
2187
comparison
936
2187
lambdef
938
2188
,
lambdef -> lambda varargslist : test
2188
]
lambdef -> lambda varargslist : test
2189
and_test
1876
2189
atom_expr
1877
2189
and_expr
1878
2189
term
1879
2189
factor
1880
2189
shift_expr
1881
2189
arith_expr
1882
2189
NUMBER
1883
2189
NAME
1884
2189
[
1885
2189
{
1886
2189
expr
1887
2189
False
1888
2189
xor_expr
1889
2189
atom
1890
2189
STRING
1891
2189
+
1892
2189
(
1893
2189
True
1894
2189
-
1895
2189
None
1896
2189
comparison
1897
2189
power
1898
2189
~
1899
2189
not_test
1900
2189
not
1902
2189
or_test
2391
2190
atom_expr
1877
2190
NUMBER
1883
2190
NAME
1884
2190
[
1885
2190
{
1886
2190
False
1888
2190
atom
1890
2190
STRING
1891
2190
+
1892
2190
(
1893
2190
True
1894
2190
-
1895
2190
None
1896
2190
power
1898
2190
~
1899
2190
factor
2392
2191
atom_expr
1877
2191
and_expr
1878
2191
term
1879
2191
factor
1880
2191
shift_expr
1881
2191
arith_expr
1882
2191
NUMBER
1883
2191
NAME
1884
2191
[
1885
2191
{
1886
2191
False
1888
2191
atom
1890
2191
STRING
1891
2191
xor_expr
2393
2191
+
1892
2191
(
1893
2191
True
1894
2191
-
1895
2191
None
1896
2191
power
1898
2191
~
1899
2192
atom_expr
1877
2192
factor
1880
2192
term
1879
2192
NUMBER
1883
2192
NAME
1884
2192
[
1885
2192
{
1886
2192
False
1888
2192
atom
1890
2192
STRING
1891
2192
+
1892
2192
(
1893
2192
True
1894
2192
-
1895
2192
None
1896
2192
arith_expr
2394
2192
power
1898
2192
~
1899
2193
atom_expr
1877
2193
factor
1880
2193
term
1879
2193
NUMBER
1883
2193
NAME
1884
2193
[
1885
2193
{
1886
2193
False
1888
2193
atom
1890
2193
STRING
1891
2193
+
1892
2193
(
1893
2193
True
1894
2193
-
1895
2193
arith_expr
2395
2193
None
1896
2193
power
1898
2193
~
1899
2194
atom_expr
1877
2194
factor
1880
2194
NUMBER
1883
2194
NAME
1884
2194
[
1885
2194
{
1886
2194
False
1888
2194
atom
1890
2194
STRING
1891
2194
+
1892
2194
(
1893
2194
term
2396
2194
True
1894
2194
-
1895
2194
None
1896
2194
power
1898
2194
~
1899
2195
atom_expr
1877
2195
factor
1880
2195
NUMBER
1883
2195
NAME
1884
2195
[
1885
2195
{
1886
2195
term
2397
2195
False
1888
2195
atom
1890
2195
STRING
1891
2195
+
1892
2195
(
1893
2195
True
1894
2195
-
1895
2195
None
1896
2195
power
1898
2195
~
1899
2196
atom_expr
1877
2196
factor
1880
2196
NUMBER
1883
2196
NAME
1884
2196
[
1885
2196
{
1886
2196
False
1888
2196
atom
1890
2196
STRING
1891
2196
+
1892
2196
term
2398
2196
(
1893
2196
True
1894
2196
-
1895
2196
None
1896
2196
power
1898
2196
~
1899
2197
atom_expr
1877
2197
factor
1880
2197
NUMBER
1883
2197
NAME
1884
2197
[
1885
2197
{
1886
2197
False
1888
2197
atom
1890
2197
STRING
1891
2197
+
1892
2197
(
1893
2197
True
1894
2197
-
1895
2197
None
1896
2197
term
2399
2197
power
1898
2197
~
1899
2198
atom_expr
1877
2198
factor
1880
2198
NUMBER
1883
2198
NAME
1884
2198
[
1885
2198
{
1886
2198
False
1888
2198
atom
1890
2198
STRING
1891
2198
+
1892
2198
(
1893
2198
True
1894
2198
-
1895
2198
None
1896
2198
term
2400
2198
power
1898
2198
~
1899
2199
atom_expr
1877
2199
factor
1880
2199
term
1879
2199
shift_expr
1881
2199
arith_expr
1882
2199
NUMBER
1883
2199
NAME
1884
2199
[
1885
2199
{
1886
2199
False
1888
2199
atom
1890
2199
STRING
1891
2199
+
1892
2199
(
1893
2199
True
1894
2199
-
1895
2199
None
1896
2199
power
1898
2199
~
1899
2199
and_expr
2401
2200
atom_expr
1877
2200
factor
1880
2200
term
1879
2200
arith_expr
1882
2200
NUMBER
1883
2200
NAME
1884
2200
[
1885
2200
{
1886
2200
False
1888
2200
atom
1890
2200
STRING
1891
2200
+
1892
2200
(
1893
2200
True
1894
2200
-
1895
2200
None
1896
2200
power
1898
2200
~
1899
2200
shift_expr
2402
2201
atom_expr
1877
2201
factor
1880
2201
term
1879
2201
arith_expr
1882
2201
NUMBER
1883
2201
NAME
1884
2201
[
1885
2201
{
1886
2201
False
1888
2201
atom
1890
2201
STRING
1891
2201
+
1892
2201
shift_expr
2403
2201
(
1893
2201
True
1894
2201
-
1895
2201
None
1896
2201
power
1898
2201
~
1899
2202
]
2404
2203
in
atom -> [ ]
2203
>=
atom -> [ ]
2203
%
atom -> [ ]
2203
is
atom -> [ ]
2203
^
atom -> [ ]
2203
//
atom -> [ ]
2203
or
atom -> [ ]
2203
not
atom -> [ ]
2203
[
atom -> [ ]
2203
and
atom -> [ ]
2203
/
atom -> [ ]
2203
!=
atom -> [ ]
2203
>
atom -> [ ]
2203
]
atom -> [ ]
2203
&
atom -> [ ]
2203
**
atom -> [ ]
2203
@
atom -> [ ]
2203
==
atom -> [ ]
2203
<<
atom -> [ ]
2203
if
atom -> [ ]
2203
<
atom -> [ ]
2203
(
atom -> [ ]
2203
<=
atom -> [ ]
2203
*
atom -> [ ]
2203
.
atom -> [ ]
2203
>>
atom -> [ ]
2203
|
atom -> [ ]
2203
-
atom -> [ ]
2203
+
atom -> [ ]
2203
for
atom -> [ ]
2204
<<
atom -> { }
2204
+
atom -> { }
2204
//
atom -> { }
2204
is
atom -> { }
2204
>=
atom -> { }
2204
<=
atom -> { }
2204
>
atom -> { }
2204
*
atom -> { }
2204
^
atom -> { }
2204
%
atom -> { }
2204
>>
atom -> { }
2204
.
atom -> { }
2204
not
atom -> { }
2204
==
atom -> { }
2204
if
atom -> { }
2204
in
atom -> { }
2204
<
atom -> { }
2204
|
atom -> { }
2204
]
atom -> { }
2204
(
atom -> { }
2204
/
atom -> { }
2204
for
atom -> { }
2204
and
atom -> { }
2204
**
atom -> { }
2204
@
atom -> { }
2204
-
atom -> { }
2204
&
atom -> { }
2204
!=
atom -> { }
2204
or
atom -> { }
2204
[
atom -> { }
2205
atom_expr
1877
2205
and_expr
1878
2205
term
1879
2205
factor
1880
2205
shift_expr
1881
2205
arith_expr
1882
2205
NUMBER
1883
2205
NAME
1884
2205
[
1885
2205
{
1886
2205
expr
1887
2205
False
1888
2205
xor_expr
1889
2205
atom
1890
2205
STRING
1891
2205
comparison
2405
2205
+
1892
2205
(
1893
2205
True
1894
2205
-
1895
2205
None
1896
2205
power
1898
2205
~
1899
2206
atom_expr
1877
2206
and_expr
1878
2206
term
1879
2206
factor
1880
2206
shift_expr
1881
2206
expr
2406
2206
arith_expr
1882
2206
NUMBER
1883
2206
NAME
1884
2206
[
1885
2206
{
1886
2206
False
1888
2206
xor_expr
1889
2206
atom
1890
2206
STRING
1891
2206
+
1892
2206
(
1893
2206
True
1894
2206
-
1895
2206
None
1896
2206
power
1898
2206
~
1899
2207
atom_expr
472
2207
and_expr
473
2207
term
474
2207
factor
475
2207
shift_expr
476
2207
arith_expr
477
2207
NUMBER
478
2207
NAME
479
2207
[
480
2207
{
481
2207
expr
482
2207
not_test
483
2207
False
484
2207
xor_expr
485
2207
atom
487
2207
STRING
488
2207
+
489
2207
(
490
2207
True
491
2207
-
492
2207
None
493
2207
subscriptlist
2407
2207
or_test
494
2207
and_test
495
2207
power
496
2207
~
497
2207
lambda
498
2207
:
maybe_test -> 
2207
maybe_test
499
2207
test
500
2207
not
501
2207
comparison
502
2207
lambdef
503
2207
subscript
504
2208
and_test
505
2208
atom_expr
506
2208
and_expr
507
2208
term
508
2208
factor
509
2208
shift_expr
510
2208
arith_expr
511
2208
NUMBER
512
2208
NAME
513
2208
not
514
2208
[
515
2208
{
516
2208
expr
517
2208
not_test
519
2208
False
520
2208
xor_expr
521
2208
STRING
522
2208
lambda
523
2208
arglist
2408
2208
atom
525
2208
)
2409
2208
+
526
2208
True
527
2208
-
528
2208
or_test
529
2208
(
530
2208
None
531
2208
comparison
532
2208
power
533
2208
test
534
2208
~
535
2208
*
536
2208
lambdef
537
2208
**
538
2208
argument
539
2209
NAME
2410
2210
trailer_expr
2411
2210
[
2207
2210
(
2208
2210
.
2209
2210
trailer
2210
2210
<<
trailer_expr -> 
2210
@
trailer_expr -> 
2210
!=
trailer_expr -> 
2210
-
trailer_expr -> 
2210
]
trailer_expr -> 
2210
^
trailer_expr -> 
2210
<
trailer_expr -> 
2210
for
trailer_expr -> 
2210
/
trailer_expr -> 
2210
is
trailer_expr -> 
2210
==
trailer_expr -> 
2210
&
trailer_expr -> 
2210
>=
trailer_expr -> 
2210
or
trailer_expr -> 
2210
in
trailer_expr -> 
2210
*
trailer_expr -> 
2210
not
trailer_expr -> 
2210
**
trailer_expr -> 
2210
<=
trailer_expr -> 
2210
+
trailer_expr -> 
2210
//
trailer_expr -> 
2210
%
trailer_expr -> 
2210
>
trailer_expr -> 
2210
|
trailer_expr -> 
2210
if
trailer_expr -> 
2210
and
trailer_expr -> 
2210
>>
trailer_expr -> 
2211
==
atom_expr -> atom trailer_expr
2211
%
atom_expr -> atom trailer_expr
2211
+
atom_expr -> atom trailer_expr
2211
not
atom_expr -> atom trailer_expr
2211
or
atom_expr -> atom trailer_expr
2211
//
atom_expr -> atom trailer_expr
2211
and
atom_expr -> atom trailer_expr
2211
!=
atom_expr -> atom trailer_expr
2211
<<
atom_expr -> atom trailer_expr
2211
for
atom_expr -> atom trailer_expr
2211
if
atom_expr -> atom trailer_expr
2211
-
atom_expr -> atom trailer_expr
2211
>>
atom_expr -> atom trailer_expr
2211
**
atom_expr -> atom trailer_expr
2211
/
atom_expr -> atom trailer_expr
2211
<
atom_expr -> atom trailer_expr
2211
in
atom_expr -> atom trailer_expr
2211
&
atom_expr -> atom trailer_expr
2211
is
atom_expr -> atom trailer_expr
2211
|
atom_expr -> atom trailer_expr
2211
]
atom_expr -> atom trailer_expr
2211
>
atom_expr -> atom trailer_expr
2211
>=
atom_expr -> atom trailer_expr
2211
<=
atom_expr -> atom trailer_expr
2211
@
atom_expr -> atom trailer_expr
2211
*
atom_expr -> atom trailer_expr
2211
^
atom_expr -> atom trailer_expr
2212
<<
factor -> + factor
2212
&
factor -> + factor
2212
>
factor -> + factor
2212
if
factor -> + factor
2212
not
factor -> + factor
2212
+
factor -> + factor
2212
^
factor -> + factor
2212
==
factor -> + factor
2212
/
factor -> + factor
2212
|
factor -> + factor
2212
>=
factor -> + factor
2212
for
factor -> + factor
2212
%
factor -> + factor
2212
<
factor -> + factor
2212
is
factor -> + factor
2212
]
factor -> + factor
2212
or
factor -> + factor
2212
@
factor -> + factor
2212
//
factor -> + factor
2212
and
factor -> + factor
2212
-
factor -> + factor
2212
in
factor -> + factor
2212
*
factor -> + factor
2212
!=
factor -> + factor
2212
>>
factor -> + factor
2212
<=
factor -> + factor
2213
)
2412
2214
>=
atom -> ( )
2214
]
atom -> ( )
2214
>>
atom -> ( )
2214
not
atom -> ( )
2214
if
atom -> ( )
2214
&
atom -> ( )
2214
^
atom -> ( )
2214
.
atom -> ( )
2214
for
atom -> ( )
2214
/
atom -> ( )
2214
in
atom -> ( )
2214
>
atom -> ( )
2214
%
atom -> ( )
2214
(
atom -> ( )
2214
==
atom -> ( )
2214
[
atom -> ( )
2214
<=
atom -> ( )
2214
+
atom -> ( )
2214
|
atom -> ( )
2214
-
atom -> ( )
2214
or
atom -> ( )
2214
@
atom -> ( )
2214
<<
atom -> ( )
2214
is
atom -> ( )
2214
**
atom -> ( )
2214
*
atom -> ( )
2214
and
atom -> ( )
2214
<
atom -> ( )
2214
!=
atom -> ( )
2214
//
atom -> ( )
2215
@
factor -> - factor
2215
^
factor -> - factor
2215
==
factor -> - factor
2215
]
factor -> - factor
2215
in
factor -> - factor
2215
>>
factor -> - factor
2215
//
factor -> - factor
2215
and
factor -> - factor
2215
for
factor -> - factor
2215
<=
factor -> - factor
2215
!=
factor -> - factor
2215
-
factor -> - factor
2215
&
factor -> - factor
2215
not
factor -> - factor
2215
>
factor -> - factor
2215
*
factor -> - factor
2215
%
factor -> - factor
2215
/
factor -> - factor
2215
<
factor -> - factor
2215
|
factor -> - factor
2215
+
factor -> - factor
2215
if
factor -> - factor
2215
<<
factor -> - factor
2215
is
factor -> - factor
2215
or
factor -> - factor
2215
>=
factor -> - factor
2216
for
factor -> ~ factor
2216
<<
factor -> ~ factor
2216
in
factor -> ~ factor
2216
<=
factor -> ~ factor
2216
if
factor -> ~ factor
2216
|
factor -> ~ factor
2216
<
factor -> ~ factor
2216
>>
factor -> ~ factor
2216
==
factor -> ~ factor
2216
>=
factor -> ~ factor
2216
!=
factor -> ~ factor
2216
//
factor -> ~ factor
2216
*
factor -> ~ factor
2216
/
factor -> ~ factor
2216
+
factor -> ~ factor
2216
]
factor -> ~ factor
2216
is
factor -> ~ factor
2216
not
factor -> ~ factor
2216
and
factor -> ~ factor
2216
^
factor -> ~ factor
2216
@
factor -> ~ factor
2216
>
factor -> ~ factor
2216
-
factor -> ~ factor
2216
or
factor -> ~ factor
2216
&
factor -> ~ factor
2216
%
factor -> ~ factor
2217
atom_expr
1877
2217
and_expr
1878
2217
term
1879
2217
factor
1880
2217
shift_expr
1881
2217
arith_expr
1882
2217
NUMBER
1883
2217
NAME
1884
2217
[
1885
2217
{
1886
2217
expr
1887
2217
False
1888
2217
xor_expr
1889
2217
atom
1890
2217
STRING
1891
2217
+
1892
2217
(
1893
2217
True
1894
2217
-
1895
2217
None
1896
2217
comparison
1897
2217
and_test
2413
2217
power
1898
2217
~
1899
2217
not_test
1900
2217
not
1902
2218
]
comp_iter -> comp_for
2219
]
comp_iter -> comp_if
2220
and_test
1876
2220
atom_expr
1877
2220
and_expr
1878
2220
term
1879
2220
factor
1880
2220
shift_expr
1881
2220
arith_expr
1882
2220
NUMBER
1883
2220
NAME
1884
2220
[
1885
2220
{
1886
2220
expr
1887
2220
False
1888
2220
xor_expr
1889
2220
atom
1890
2220
STRING
1891
2220
+
1892
2220
(
1893
2220
True
1894
2220
-
1895
2220
None
1896
2220
comparison
1897
2220
power
1898
2220
~
1899
2220
lambda
2414
2220
lambdef_nocond
2415
2220
not_test
1900
2220
or_test
2416
2220
not
1902
2220
test_nocond
2417
2221
]
comp_for -> for expr_list in or_test comp_iter
2222
for
not_test -> not not_test
2222
if
not_test -> not not_test
2222
]
not_test -> not not_test
2222
or
not_test -> not not_test
2222
and
not_test -> not not_test
2223
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2223
del
suite -> NEWLINE INDENT stmt_list DEDENT
2223
@
suite -> NEWLINE INDENT stmt_list DEDENT
2223
for
suite -> NEWLINE INDENT stmt_list DEDENT
2223
def
suite -> NEWLINE INDENT stmt_list DEDENT
2223
{
suite -> NEWLINE INDENT stmt_list DEDENT
2223
try
suite -> NEWLINE INDENT stmt_list DEDENT
2223
with
suite -> NEWLINE INDENT stmt_list DEDENT
2223
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2223
global
suite -> NEWLINE INDENT stmt_list DEDENT
2223
break
suite -> NEWLINE INDENT stmt_list DEDENT
2223
False
suite -> NEWLINE INDENT stmt_list DEDENT
2223
[
suite -> NEWLINE INDENT stmt_list DEDENT
2223
while
suite -> NEWLINE INDENT stmt_list DEDENT
2223
True
suite -> NEWLINE INDENT stmt_list DEDENT
2223
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2223
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2223
class
suite -> NEWLINE INDENT stmt_list DEDENT
2223
not
suite -> NEWLINE INDENT stmt_list DEDENT
2223
~
suite -> NEWLINE INDENT stmt_list DEDENT
2223
$
suite -> NEWLINE INDENT stmt_list DEDENT
2223
-
suite -> NEWLINE INDENT stmt_list DEDENT
2223
None
suite -> NEWLINE INDENT stmt_list DEDENT
2223
(
suite -> NEWLINE INDENT stmt_list DEDENT
2223
return
suite -> NEWLINE INDENT stmt_list DEDENT
2223
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2223
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2223
if
suite -> NEWLINE INDENT stmt_list DEDENT
2223
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2223
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2223
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2223
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2223
+
suite -> NEWLINE INDENT stmt_list DEDENT
2223
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2224
NEWLINE
classdef -> class NAME ( arglist ) : suite
2224
while
classdef -> class NAME ( arglist ) : suite
2224
yield
classdef -> class NAME ( arglist ) : suite
2224
global
classdef -> class NAME ( arglist ) : suite
2224
$
classdef -> class NAME ( arglist ) : suite
2224
(
classdef -> class NAME ( arglist ) : suite
2224
class
classdef -> class NAME ( arglist ) : suite
2224
@
classdef -> class NAME ( arglist ) : suite
2224
None
classdef -> class NAME ( arglist ) : suite
2224
NUMBER
classdef -> class NAME ( arglist ) : suite
2224
False
classdef -> class NAME ( arglist ) : suite
2224
raise
classdef -> class NAME ( arglist ) : suite
2224
not
classdef -> class NAME ( arglist ) : suite
2224
lambda
classdef -> class NAME ( arglist ) : suite
2224
{
classdef -> class NAME ( arglist ) : suite
2224
+
classdef -> class NAME ( arglist ) : suite
2224
break
classdef -> class NAME ( arglist ) : suite
2224
nonlocal
classdef -> class NAME ( arglist ) : suite
2224
with
classdef -> class NAME ( arglist ) : suite
2224
continue
classdef -> class NAME ( arglist ) : suite
2224
def
classdef -> class NAME ( arglist ) : suite
2224
assert
classdef -> class NAME ( arglist ) : suite
2224
~
classdef -> class NAME ( arglist ) : suite
2224
NAME
classdef -> class NAME ( arglist ) : suite
2224
STRING
classdef -> class NAME ( arglist ) : suite
2224
-
classdef -> class NAME ( arglist ) : suite
2224
True
classdef -> class NAME ( arglist ) : suite
2224
if
classdef -> class NAME ( arglist ) : suite
2224
pass
classdef -> class NAME ( arglist ) : suite
2224
return
classdef -> class NAME ( arglist ) : suite
2224
del
classdef -> class NAME ( arglist ) : suite
2224
try
classdef -> class NAME ( arglist ) : suite
2224
[
classdef -> class NAME ( arglist ) : suite
2224
for
classdef -> class NAME ( arglist ) : suite
2225
]
test -> or_test if or_test else test
2225
,
test -> or_test if or_test else test
2225
:
test -> or_test if or_test else test
2226
,
sliceop -> : maybe_test
2226
]
sliceop -> : maybe_test
2227
,
maybe_test -> test
2227
]
maybe_test -> test
2228
for
test -> or_test if or_test else test
2228
,
test -> or_test if or_test else test
2228
=
test -> or_test if or_test else test
2228
)
test -> or_test if or_test else test
2229
comp_for
2418
2229
comp_iter
2419
2229
,
comp_iter -> 
2229
comp_if
2420
2229
if
2421
2229
)
comp_iter -> 
2229
for
1018
2230
)
lambdef -> lambda varargslist : test
2230
,
lambdef -> lambda varargslist : test
2231
)
trailer -> [ subscriptlist ]
2231
*
trailer -> [ subscriptlist ]
2231
not
trailer -> [ subscriptlist ]
2231
(
trailer -> [ subscriptlist ]
2231
<<
trailer -> [ subscriptlist ]
2231
,
trailer -> [ subscriptlist ]
2231
>>
trailer -> [ subscriptlist ]
2231
//
trailer -> [ subscriptlist ]
2231
or
trailer -> [ subscriptlist ]
2231
is
trailer -> [ subscriptlist ]
2231
[
trailer -> [ subscriptlist ]
2231
|
trailer -> [ subscriptlist ]
2231
%
trailer -> [ subscriptlist ]
2231
<=
trailer -> [ subscriptlist ]
2231
and
trailer -> [ subscriptlist ]
2231
**
trailer -> [ subscriptlist ]
2231
if
trailer -> [ subscriptlist ]
2231
-
trailer -> [ subscriptlist ]
2231
in
trailer -> [ subscriptlist ]
2231
^
trailer -> [ subscriptlist ]
2231
+
trailer -> [ subscriptlist ]
2231
>=
trailer -> [ subscriptlist ]
2231
.
trailer -> [ subscriptlist ]
2231
&
trailer -> [ subscriptlist ]
2231
/
trailer -> [ subscriptlist ]
2231
!=
trailer -> [ subscriptlist ]
2231
<
trailer -> [ subscriptlist ]
2231
==
trailer -> [ subscriptlist ]
2231
>
trailer -> [ subscriptlist ]
2231
@
trailer -> [ subscriptlist ]
2232
%
trailer -> ( arglist )
2232
and
trailer -> ( arglist )
2232
+
trailer -> ( arglist )
2232
or
trailer -> ( arglist )
2232
not
trailer -> ( arglist )
2232
-
trailer -> ( arglist )
2232
@
trailer -> ( arglist )
2232
[
trailer -> ( arglist )
2232
>>
trailer -> ( arglist )
2232
<=
trailer -> ( arglist )
2232
if
trailer -> ( arglist )
2232
//
trailer -> ( arglist )
2232
==
trailer -> ( arglist )
2232
<<
trailer -> ( arglist )
2232
*
trailer -> ( arglist )
2232
<
trailer -> ( arglist )
2232
**
trailer -> ( arglist )
2232
is
trailer -> ( arglist )
2232
>
trailer -> ( arglist )
2232
!=
trailer -> ( arglist )
2232
/
trailer -> ( arglist )
2232
in
trailer -> ( arglist )
2232
.
trailer -> ( arglist )
2232
|
trailer -> ( arglist )
2232
)
trailer -> ( arglist )
2232
>=
trailer -> ( arglist )
2232
&
trailer -> ( arglist )
2232
(
trailer -> ( arglist )
2232
^
trailer -> ( arglist )
2232
,
trailer -> ( arglist )
2233
atom_expr
1020
2233
and_expr
1021
2233
term
1022
2233
factor
1023
2233
shift_expr
1024
2233
arith_expr
1025
2233
NUMBER
1026
2233
NAME
1027
2233
not
1028
2233
[
1029
2233
{
1030
2233
expr
1031
2233
not_test
1032
2233
False
1033
2233
xor_expr
1034
2233
STRING
1035
2233
lambda
1036
2233
atom
1037
2233
+
1038
2233
True
1039
2233
-
1040
2233
(
1041
2233
None
1042
2233
power
1043
2233
and_test
1044
2233
~
1045
2233
test
2422
2233
or_test
1047
2233
comparison
1048
2233
lambdef
1049
2234
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2234
del
suite -> NEWLINE INDENT stmt_list DEDENT
2234
@
suite -> NEWLINE INDENT stmt_list DEDENT
2234
for
suite -> NEWLINE INDENT stmt_list DEDENT
2234
def
suite -> NEWLINE INDENT stmt_list DEDENT
2234
{
suite -> NEWLINE INDENT stmt_list DEDENT
2234
try
suite -> NEWLINE INDENT stmt_list DEDENT
2234
with
suite -> NEWLINE INDENT stmt_list DEDENT
2234
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2234
global
suite -> NEWLINE INDENT stmt_list DEDENT
2234
break
suite -> NEWLINE INDENT stmt_list DEDENT
2234
False
suite -> NEWLINE INDENT stmt_list DEDENT
2234
[
suite -> NEWLINE INDENT stmt_list DEDENT
2234
while
suite -> NEWLINE INDENT stmt_list DEDENT
2234
True
suite -> NEWLINE INDENT stmt_list DEDENT
2234
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2234
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2234
class
suite -> NEWLINE INDENT stmt_list DEDENT
2234
not
suite -> NEWLINE INDENT stmt_list DEDENT
2234
~
suite -> NEWLINE INDENT stmt_list DEDENT
2234
$
suite -> NEWLINE INDENT stmt_list DEDENT
2234
-
suite -> NEWLINE INDENT stmt_list DEDENT
2234
elif
suite -> NEWLINE INDENT stmt_list DEDENT
2234
None
suite -> NEWLINE INDENT stmt_list DEDENT
2234
(
suite -> NEWLINE INDENT stmt_list DEDENT
2234
return
suite -> NEWLINE INDENT stmt_list DEDENT
2234
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2234
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2234
if
suite -> NEWLINE INDENT stmt_list DEDENT
2234
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2234
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2234
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2234
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2234
else
suite -> NEWLINE INDENT stmt_list DEDENT
2234
+
suite -> NEWLINE INDENT stmt_list DEDENT
2234
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2235
atom_expr
6
2235
factor
10
2235
[
3
2235
term
15
2235
STRING
43
2235
arith_expr
32
2235
NUMBER
8
2235
small_stmt
1052
2235
NAME
37
2235
{
5
2235
expr
7
2235
not
51
2235
True
9
2235
shift_expr
12
2235
atom
13
2235
xor_expr
14
2235
NEWLINE
1053
2235
(
34
2235
None
29
2235
and_test
20
2235
and_expr
21
2235
False
23
2235
or_test
25
2235
test
33
2235
lambda
28
2235
+
30
2235
suite
2423
2235
simple_stmt
1054
2235
nonlocal
66
2235
-
36
2235
not_test
40
2235
power
47
2235
lambdef
41
2235
~
44
2235
comparison
48
2235
assert
67
2235
global_stmt
68
2235
continue
49
2235
expr_stmt
50
2235
test_list
62
2235
raise
69
2235
del_stmt
52
2235
yield_stmt
53
2235
raise_stmt
70
2235
yield
56
2235
assert_stmt
57
2235
global
71
2235
nonlocal_stmt
72
2235
break_stmt
58
2235
return_stmt
75
2235
return
59
2235
pass
60
2235
continue_stmt
61
2235
flow_stmt
76
2235
break
63
2235
del
64
2235
pass_stmt
65
2236
atom_expr
6
2236
factor
10
2236
[
3
2236
term
15
2236
STRING
43
2236
arith_expr
32
2236
NUMBER
8
2236
small_stmt
4
2236
NAME
37
2236
{
5
2236
expr
7
2236
not
51
2236
True
9
2236
shift_expr
12
2236
atom
13
2236
xor_expr
14
2236
NEWLINE
942
2236
(
34
2236
None
29
2236
and_test
20
2236
and_expr
21
2236
False
23
2236
or_test
25
2236
test
33
2236
lambda
28
2236
suite
2424
2236
+
30
2236
simple_stmt
943
2236
nonlocal
66
2236
-
36
2236
not_test
40
2236
power
47
2236
lambdef
41
2236
~
44
2236
comparison
48
2236
assert
67
2236
global_stmt
68
2236
continue
49
2236
expr_stmt
50
2236
test_list
62
2236
raise
69
2236
del_stmt
52
2236
yield_stmt
53
2236
raise_stmt
70
2236
yield
56
2236
assert_stmt
57
2236
global
71
2236
nonlocal_stmt
72
2236
break_stmt
58
2236
return_stmt
75
2236
return
59
2236
pass
60
2236
continue_stmt
61
2236
flow_stmt
76
2236
break
63
2236
del
64
2236
pass_stmt
65
2237
NEWLINE
2425
2238
finally
2426
2238
for
try_stmt -> try : suite except_clause else : suite
2238
def
try_stmt -> try : suite except_clause else : suite
2238
lambda
try_stmt -> try : suite except_clause else : suite
2238
@
try_stmt -> try : suite except_clause else : suite
2238
global
try_stmt -> try : suite except_clause else : suite
2238
nonlocal
try_stmt -> try : suite except_clause else : suite
2238
with
try_stmt -> try : suite except_clause else : suite
2238
try
try_stmt -> try : suite except_clause else : suite
2238
$
try_stmt -> try : suite except_clause else : suite
2238
NAME
try_stmt -> try : suite except_clause else : suite
2238
assert
try_stmt -> try : suite except_clause else : suite
2238
{
try_stmt -> try : suite except_clause else : suite
2238
+
try_stmt -> try : suite except_clause else : suite
2238
True
try_stmt -> try : suite except_clause else : suite
2238
break
try_stmt -> try : suite except_clause else : suite
2238
return
try_stmt -> try : suite except_clause else : suite
2238
[
try_stmt -> try : suite except_clause else : suite
2238
STRING
try_stmt -> try : suite except_clause else : suite
2238
False
try_stmt -> try : suite except_clause else : suite
2238
pass
try_stmt -> try : suite except_clause else : suite
2238
~
try_stmt -> try : suite except_clause else : suite
2238
yield
try_stmt -> try : suite except_clause else : suite
2238
class
try_stmt -> try : suite except_clause else : suite
2238
raise
try_stmt -> try : suite except_clause else : suite
2238
NEWLINE
try_stmt -> try : suite except_clause else : suite
2238
None
try_stmt -> try : suite except_clause else : suite
2238
-
try_stmt -> try : suite except_clause else : suite
2238
while
try_stmt -> try : suite except_clause else : suite
2238
del
try_stmt -> try : suite except_clause else : suite
2238
not
try_stmt -> try : suite except_clause else : suite
2238
(
try_stmt -> try : suite except_clause else : suite
2238
NUMBER
try_stmt -> try : suite except_clause else : suite
2238
if
try_stmt -> try : suite except_clause else : suite
2238
continue
try_stmt -> try : suite except_clause else : suite
2239
INDENT
2427
2240
continue
suite -> simple_stmt
2240
not
suite -> simple_stmt
2240
yield
suite -> simple_stmt
2240
for
suite -> simple_stmt
2240
False
suite -> simple_stmt
2240
NUMBER
suite -> simple_stmt
2240
with
suite -> simple_stmt
2240
lambda
suite -> simple_stmt
2240
{
suite -> simple_stmt
2240
None
suite -> simple_stmt
2240
(
suite -> simple_stmt
2240
while
suite -> simple_stmt
2240
if
suite -> simple_stmt
2240
try
suite -> simple_stmt
2240
NAME
suite -> simple_stmt
2240
True
suite -> simple_stmt
2240
global
suite -> simple_stmt
2240
STRING
suite -> simple_stmt
2240
pass
suite -> simple_stmt
2240
$
suite -> simple_stmt
2240
[
suite -> simple_stmt
2240
assert
suite -> simple_stmt
2240
NEWLINE
suite -> simple_stmt
2240
raise
suite -> simple_stmt
2240
-
suite -> simple_stmt
2240
class
suite -> simple_stmt
2240
del
suite -> simple_stmt
2240
@
suite -> simple_stmt
2240
finally
suite -> simple_stmt
2240
~
suite -> simple_stmt
2240
+
suite -> simple_stmt
2240
return
suite -> simple_stmt
2240
break
suite -> simple_stmt
2240
nonlocal
suite -> simple_stmt
2240
def
suite -> simple_stmt
2241
-
try_stmt -> try : suite except_clause finally : suite
2241
(
try_stmt -> try : suite except_clause finally : suite
2241
{
try_stmt -> try : suite except_clause finally : suite
2241
not
try_stmt -> try : suite except_clause finally : suite
2241
~
try_stmt -> try : suite except_clause finally : suite
2241
class
try_stmt -> try : suite except_clause finally : suite
2241
pass
try_stmt -> try : suite except_clause finally : suite
2241
def
try_stmt -> try : suite except_clause finally : suite
2241
[
try_stmt -> try : suite except_clause finally : suite
2241
break
try_stmt -> try : suite except_clause finally : suite
2241
STRING
try_stmt -> try : suite except_clause finally : suite
2241
False
try_stmt -> try : suite except_clause finally : suite
2241
raise
try_stmt -> try : suite except_clause finally : suite
2241
nonlocal
try_stmt -> try : suite except_clause finally : suite
2241
with
try_stmt -> try : suite except_clause finally : suite
2241
NUMBER
try_stmt -> try : suite except_clause finally : suite
2241
NAME
try_stmt -> try : suite except_clause finally : suite
2241
NEWLINE
try_stmt -> try : suite except_clause finally : suite
2241
while
try_stmt -> try : suite except_clause finally : suite
2241
if
try_stmt -> try : suite except_clause finally : suite
2241
assert
try_stmt -> try : suite except_clause finally : suite
2241
global
try_stmt -> try : suite except_clause finally : suite
2241
None
try_stmt -> try : suite except_clause finally : suite
2241
@
try_stmt -> try : suite except_clause finally : suite
2241
$
try_stmt -> try : suite except_clause finally : suite
2241
True
try_stmt -> try : suite except_clause finally : suite
2241
return
try_stmt -> try : suite except_clause finally : suite
2241
yield
try_stmt -> try : suite except_clause finally : suite
2241
del
try_stmt -> try : suite except_clause finally : suite
2241
+
try_stmt -> try : suite except_clause finally : suite
2241
lambda
try_stmt -> try : suite except_clause finally : suite
2241
for
try_stmt -> try : suite except_clause finally : suite
2241
try
try_stmt -> try : suite except_clause finally : suite
2241
continue
try_stmt -> try : suite except_clause finally : suite
2242
*
power -> atom_expr ** factor
2242
:
power -> atom_expr ** factor
2242
in
power -> atom_expr ** factor
2242
<
power -> atom_expr ** factor
2242
if
power -> atom_expr ** factor
2242
-
power -> atom_expr ** factor
2242
>>
power -> atom_expr ** factor
2242
<=
power -> atom_expr ** factor
2242
and
power -> atom_expr ** factor
2242
==
power -> atom_expr ** factor
2242
%
power -> atom_expr ** factor
2242
/
power -> atom_expr ** factor
2242
as
power -> atom_expr ** factor
2242
^
power -> atom_expr ** factor
2242
<<
power -> atom_expr ** factor
2242
>
power -> atom_expr ** factor
2242
//
power -> atom_expr ** factor
2242
is
power -> atom_expr ** factor
2242
@
power -> atom_expr ** factor
2242
+
power -> atom_expr ** factor
2242
|
power -> atom_expr ** factor
2242
!=
power -> atom_expr ** factor
2242
>=
power -> atom_expr ** factor
2242
or
power -> atom_expr ** factor
2242
&
power -> atom_expr ** factor
2242
not
power -> atom_expr ** factor
2243
as
xor_expr -> and_expr ^ xor_expr
2243
and
xor_expr -> and_expr ^ xor_expr
2243
<
xor_expr -> and_expr ^ xor_expr
2243
>
xor_expr -> and_expr ^ xor_expr
2243
in
xor_expr -> and_expr ^ xor_expr
2243
|
xor_expr -> and_expr ^ xor_expr
2243
<=
xor_expr -> and_expr ^ xor_expr
2243
not
xor_expr -> and_expr ^ xor_expr
2243
:
xor_expr -> and_expr ^ xor_expr
2243
or
xor_expr -> and_expr ^ xor_expr
2243
if
xor_expr -> and_expr ^ xor_expr
2243
is
xor_expr -> and_expr ^ xor_expr
2243
==
xor_expr -> and_expr ^ xor_expr
2243
!=
xor_expr -> and_expr ^ xor_expr
2243
>=
xor_expr -> and_expr ^ xor_expr
2244
<=
arith_expr -> term + arith_expr
2244
&
arith_expr -> term + arith_expr
2244
>
arith_expr -> term + arith_expr
2244
>=
arith_expr -> term + arith_expr
2244
not
arith_expr -> term + arith_expr
2244
|
arith_expr -> term + arith_expr
2244
in
arith_expr -> term + arith_expr
2244
:
arith_expr -> term + arith_expr
2244
if
arith_expr -> term + arith_expr
2244
>>
arith_expr -> term + arith_expr
2244
as
arith_expr -> term + arith_expr
2244
is
arith_expr -> term + arith_expr
2244
^
arith_expr -> term + arith_expr
2244
<<
arith_expr -> term + arith_expr
2244
<
arith_expr -> term + arith_expr
2244
==
arith_expr -> term + arith_expr
2244
!=
arith_expr -> term + arith_expr
2244
or
arith_expr -> term + arith_expr
2244
and
arith_expr -> term + arith_expr
2245
<=
arith_expr -> term - arith_expr
2245
if
arith_expr -> term - arith_expr
2245
not
arith_expr -> term - arith_expr
2245
as
arith_expr -> term - arith_expr
2245
|
arith_expr -> term - arith_expr
2245
>>
arith_expr -> term - arith_expr
2245
:
arith_expr -> term - arith_expr
2245
>=
arith_expr -> term - arith_expr
2245
<<
arith_expr -> term - arith_expr
2245
is
arith_expr -> term - arith_expr
2245
!=
arith_expr -> term - arith_expr
2245
in
arith_expr -> term - arith_expr
2245
<
arith_expr -> term - arith_expr
2245
or
arith_expr -> term - arith_expr
2245
==
arith_expr -> term - arith_expr
2245
and
arith_expr -> term - arith_expr
2245
&
arith_expr -> term - arith_expr
2245
^
arith_expr -> term - arith_expr
2245
>
arith_expr -> term - arith_expr
2246
|
term -> factor * term
2246
-
term -> factor * term
2246
in
term -> factor * term
2246
and
term -> factor * term
2246
<<
term -> factor * term
2246
>=
term -> factor * term
2246
if
term -> factor * term
2246
or
term -> factor * term
2246
<=
term -> factor * term
2246
is
term -> factor * term
2246
:
term -> factor * term
2246
^
term -> factor * term
2246
!=
term -> factor * term
2246
as
term -> factor * term
2246
==
term -> factor * term
2246
&
term -> factor * term
2246
>
term -> factor * term
2246
not
term -> factor * term
2246
<
term -> factor * term
2246
+
term -> factor * term
2246
>>
term -> factor * term
2247
!=
term -> factor % term
2247
>>
term -> factor % term
2247
==
term -> factor % term
2247
>=
term -> factor % term
2247
^
term -> factor % term
2247
not
term -> factor % term
2247
or
term -> factor % term
2247
if
term -> factor % term
2247
<=
term -> factor % term
2247
:
term -> factor % term
2247
<
term -> factor % term
2247
is
term -> factor % term
2247
-
term -> factor % term
2247
as
term -> factor % term
2247
in
term -> factor % term
2247
>
term -> factor % term
2247
<<
term -> factor % term
2247
and
term -> factor % term
2247
|
term -> factor % term
2247
+
term -> factor % term
2247
&
term -> factor % term
2248
is
term -> factor // term
2248
if
term -> factor // term
2248
>
term -> factor // term
2248
==
term -> factor // term
2248
+
term -> factor // term
2248
^
term -> factor // term
2248
-
term -> factor // term
2248
in
term -> factor // term
2248
>>
term -> factor // term
2248
|
term -> factor // term
2248
<<
term -> factor // term
2248
!=
term -> factor // term
2248
&
term -> factor // term
2248
not
term -> factor // term
2248
<=
term -> factor // term
2248
<
term -> factor // term
2248
:
term -> factor // term
2248
and
term -> factor // term
2248
>=
term -> factor // term
2248
or
term -> factor // term
2248
as
term -> factor // term
2249
>=
term -> factor / term
2249
!=
term -> factor / term
2249
as
term -> factor / term
2249
not
term -> factor / term
2249
^
term -> factor / term
2249
in
term -> factor / term
2249
and
term -> factor / term
2249
<<
term -> factor / term
2249
+
term -> factor / term
2249
>
term -> factor / term
2249
|
term -> factor / term
2249
or
term -> factor / term
2249
if
term -> factor / term
2249
>>
term -> factor / term
2249
<
term -> factor / term
2249
&
term -> factor / term
2249
-
term -> factor / term
2249
is
term -> factor / term
2249
==
term -> factor / term
2249
<=
term -> factor / term
2249
:
term -> factor / term
2250
-
term -> factor @ term
2250
&
term -> factor @ term
2250
as
term -> factor @ term
2250
^
term -> factor @ term
2250
:
term -> factor @ term
2250
!=
term -> factor @ term
2250
<<
term -> factor @ term
2250
is
term -> factor @ term
2250
<=
term -> factor @ term
2250
and
term -> factor @ term
2250
+
term -> factor @ term
2250
==
term -> factor @ term
2250
>
term -> factor @ term
2250
if
term -> factor @ term
2250
not
term -> factor @ term
2250
>>
term -> factor @ term
2250
>=
term -> factor @ term
2250
|
term -> factor @ term
2250
in
term -> factor @ term
2250
<
term -> factor @ term
2250
or
term -> factor @ term
2251
if
and_expr -> shift_expr & and_expr
2251
!=
and_expr -> shift_expr & and_expr
2251
<=
and_expr -> shift_expr & and_expr
2251
not
and_expr -> shift_expr & and_expr
2251
^
and_expr -> shift_expr & and_expr
2251
|
and_expr -> shift_expr & and_expr
2251
or
and_expr -> shift_expr & and_expr
2251
in
and_expr -> shift_expr & and_expr
2251
>
and_expr -> shift_expr & and_expr
2251
and
and_expr -> shift_expr & and_expr
2251
==
and_expr -> shift_expr & and_expr
2251
as
and_expr -> shift_expr & and_expr
2251
:
and_expr -> shift_expr & and_expr
2251
<
and_expr -> shift_expr & and_expr
2251
is
and_expr -> shift_expr & and_expr
2251
>=
and_expr -> shift_expr & and_expr
2252
^
shift_expr -> arith_expr << shift_expr
2252
|
shift_expr -> arith_expr << shift_expr
2252
&
shift_expr -> arith_expr << shift_expr
2252
:
shift_expr -> arith_expr << shift_expr
2252
and
shift_expr -> arith_expr << shift_expr
2252
is
shift_expr -> arith_expr << shift_expr
2252
as
shift_expr -> arith_expr << shift_expr
2252
in
shift_expr -> arith_expr << shift_expr
2252
<=
shift_expr -> arith_expr << shift_expr
2252
<
shift_expr -> arith_expr << shift_expr
2252
not
shift_expr -> arith_expr << shift_expr
2252
==
shift_expr -> arith_expr << shift_expr
2252
>=
shift_expr -> arith_expr << shift_expr
2252
if
shift_expr -> arith_expr << shift_expr
2252
>
shift_expr -> arith_expr << shift_expr
2252
or
shift_expr -> arith_expr << shift_expr
2252
!=
shift_expr -> arith_expr << shift_expr
2253
or
shift_expr -> arith_expr >> shift_expr
2253
and
shift_expr -> arith_expr >> shift_expr
2253
as
shift_expr -> arith_expr >> shift_expr
2253
>=
shift_expr -> arith_expr >> shift_expr
2253
not
shift_expr -> arith_expr >> shift_expr
2253
^
shift_expr -> arith_expr >> shift_expr
2253
:
shift_expr -> arith_expr >> shift_expr
2253
is
shift_expr -> arith_expr >> shift_expr
2253
in
shift_expr -> arith_expr >> shift_expr
2253
if
shift_expr -> arith_expr >> shift_expr
2253
<=
shift_expr -> arith_expr >> shift_expr
2253
==
shift_expr -> arith_expr >> shift_expr
2253
<
shift_expr -> arith_expr >> shift_expr
2253
!=
shift_expr -> arith_expr >> shift_expr
2253
|
shift_expr -> arith_expr >> shift_expr
2253
>
shift_expr -> arith_expr >> shift_expr
2253
&
shift_expr -> arith_expr >> shift_expr
2254
else
2428
2255
and
atom -> [ test_list_comp ]
2255
<=
atom -> [ test_list_comp ]
2255
**
atom -> [ test_list_comp ]
2255
^
atom -> [ test_list_comp ]
2255
[
atom -> [ test_list_comp ]
2255
!=
atom -> [ test_list_comp ]
2255
<
atom -> [ test_list_comp ]
2255
/
atom -> [ test_list_comp ]
2255
-
atom -> [ test_list_comp ]
2255
>=
atom -> [ test_list_comp ]
2255
if
atom -> [ test_list_comp ]
2255
as
atom -> [ test_list_comp ]
2255
%
atom -> [ test_list_comp ]
2255
is
atom -> [ test_list_comp ]
2255
+
atom -> [ test_list_comp ]
2255
&
atom -> [ test_list_comp ]
2255
@
atom -> [ test_list_comp ]
2255
or
atom -> [ test_list_comp ]
2255
in
atom -> [ test_list_comp ]
2255
==
atom -> [ test_list_comp ]
2255
not
atom -> [ test_list_comp ]
2255
.
atom -> [ test_list_comp ]
2255
|
atom -> [ test_list_comp ]
2255
>
atom -> [ test_list_comp ]
2255
<<
atom -> [ test_list_comp ]
2255
//
atom -> [ test_list_comp ]
2255
(
atom -> [ test_list_comp ]
2255
*
atom -> [ test_list_comp ]
2255
:
atom -> [ test_list_comp ]
2255
>>
atom -> [ test_list_comp ]
2256
if
comparison -> expr comp_op comparison
2256
or
comparison -> expr comp_op comparison
2256
and
comparison -> expr comp_op comparison
2256
:
comparison -> expr comp_op comparison
2256
as
comparison -> expr comp_op comparison
2257
>
expr -> xor_expr | expr
2257
is
expr -> xor_expr | expr
2257
<
expr -> xor_expr | expr
2257
if
expr -> xor_expr | expr
2257
as
expr -> xor_expr | expr
2257
>=
expr -> xor_expr | expr
2257
or
expr -> xor_expr | expr
2257
and
expr -> xor_expr | expr
2257
in
expr -> xor_expr | expr
2257
!=
expr -> xor_expr | expr
2257
:
expr -> xor_expr | expr
2257
<=
expr -> xor_expr | expr
2257
==
expr -> xor_expr | expr
2257
not
expr -> xor_expr | expr
2258
:
2429
2259
except_clause
2263
2259
maybe_except_clause
2430
2259
except
1057
2259
break
maybe_except_clause -> 
2259
class
maybe_except_clause -> 
2259
False
maybe_except_clause -> 
2259
for
maybe_except_clause -> 
2259
@
maybe_except_clause -> 
2259
lambda
maybe_except_clause -> 
2259
{
maybe_except_clause -> 
2259
while
maybe_except_clause -> 
2259
NUMBER
maybe_except_clause -> 
2259
def
maybe_except_clause -> 
2259
else
maybe_except_clause -> 
2259
-
maybe_except_clause -> 
2259
del
maybe_except_clause -> 
2259
None
maybe_except_clause -> 
2259
True
maybe_except_clause -> 
2259
STRING
maybe_except_clause -> 
2259
pass
maybe_except_clause -> 
2259
nonlocal
maybe_except_clause -> 
2259
+
maybe_except_clause -> 
2259
try
maybe_except_clause -> 
2259
continue
maybe_except_clause -> 
2259
assert
maybe_except_clause -> 
2259
NAME
maybe_except_clause -> 
2259
~
maybe_except_clause -> 
2259
NEWLINE
maybe_except_clause -> 
2259
[
maybe_except_clause -> 
2259
if
maybe_except_clause -> 
2259
return
maybe_except_clause -> 
2259
raise
maybe_except_clause -> 
2259
$
maybe_except_clause -> 
2259
yield
maybe_except_clause -> 
2259
(
maybe_except_clause -> 
2259
finally
maybe_except_clause -> 
2259
not
maybe_except_clause -> 
2259
with
maybe_except_clause -> 
2259
global
maybe_except_clause -> 
2260
if
atom -> ( test_list_comp )
2260
or
atom -> ( test_list_comp )
2260
*
atom -> ( test_list_comp )
2260
|
atom -> ( test_list_comp )
2260
>>
atom -> ( test_list_comp )
2260
%
atom -> ( test_list_comp )
2260
not
atom -> ( test_list_comp )
2260
//
atom -> ( test_list_comp )
2260
+
atom -> ( test_list_comp )
2260
and
atom -> ( test_list_comp )
2260
>
atom -> ( test_list_comp )
2260
[
atom -> ( test_list_comp )
2260
^
atom -> ( test_list_comp )
2260
:
atom -> ( test_list_comp )
2260
!=
atom -> ( test_list_comp )
2260
<<
atom -> ( test_list_comp )
2260
**
atom -> ( test_list_comp )
2260
is
atom -> ( test_list_comp )
2260
<=
atom -> ( test_list_comp )
2260
-
atom -> ( test_list_comp )
2260
&
atom -> ( test_list_comp )
2260
(
atom -> ( test_list_comp )
2260
in
atom -> ( test_list_comp )
2260
@
atom -> ( test_list_comp )
2260
.
atom -> ( test_list_comp )
2260
<
atom -> ( test_list_comp )
2260
as
atom -> ( test_list_comp )
2260
/
atom -> ( test_list_comp )
2260
==
atom -> ( test_list_comp )
2260
>=
atom -> ( test_list_comp )
2261
lambda
simple_stmt -> small_stmt NEWLINE
2261
yield
simple_stmt -> small_stmt NEWLINE
2261
NEWLINE
simple_stmt -> small_stmt NEWLINE
2261
NAME
simple_stmt -> small_stmt NEWLINE
2261
STRING
simple_stmt -> small_stmt NEWLINE
2261
pass
simple_stmt -> small_stmt NEWLINE
2261
None
simple_stmt -> small_stmt NEWLINE
2261
(
simple_stmt -> small_stmt NEWLINE
2261
assert
simple_stmt -> small_stmt NEWLINE
2261
@
simple_stmt -> small_stmt NEWLINE
2261
def
simple_stmt -> small_stmt NEWLINE
2261
if
simple_stmt -> small_stmt NEWLINE
2261
+
simple_stmt -> small_stmt NEWLINE
2261
continue
simple_stmt -> small_stmt NEWLINE
2261
not
simple_stmt -> small_stmt NEWLINE
2261
try
simple_stmt -> small_stmt NEWLINE
2261
False
simple_stmt -> small_stmt NEWLINE
2261
with
simple_stmt -> small_stmt NEWLINE
2261
else
simple_stmt -> small_stmt NEWLINE
2261
global
simple_stmt -> small_stmt NEWLINE
2261
return
simple_stmt -> small_stmt NEWLINE
2261
raise
simple_stmt -> small_stmt NEWLINE
2261
except
simple_stmt -> small_stmt NEWLINE
2261
True
simple_stmt -> small_stmt NEWLINE
2261
-
simple_stmt -> small_stmt NEWLINE
2261
del
simple_stmt -> small_stmt NEWLINE
2261
NUMBER
simple_stmt -> small_stmt NEWLINE
2261
{
simple_stmt -> small_stmt NEWLINE
2261
for
simple_stmt -> small_stmt NEWLINE
2261
class
simple_stmt -> small_stmt NEWLINE
2261
break
simple_stmt -> small_stmt NEWLINE
2261
[
simple_stmt -> small_stmt NEWLINE
2261
nonlocal
simple_stmt -> small_stmt NEWLINE
2261
while
simple_stmt -> small_stmt NEWLINE
2261
$
simple_stmt -> small_stmt NEWLINE
2261
~
simple_stmt -> small_stmt NEWLINE
2261
finally
simple_stmt -> small_stmt NEWLINE
2262
while
1591
2262
decorators
1592
2262
[
3
2262
small_stmt
1593
2262
stmt_list
2431
2262
{
5
2262
atom_expr
6
2262
expr
7
2262
NUMBER
8
2262
True
9
2262
factor
10
2262
class
1594
2262
shift_expr
12
2262
atom
13
2262
xor_expr
14
2262
term
15
2262
if
1595
2262
try
1596
2262
with
1597
2262
decorated
1598
2262
and_test
20
2262
and_expr
21
2262
for_stmt
1599
2262
False
23
2262
def
1600
2262
or_test
25
2262
with_stmt
1601
2262
funcdef
1602
2262
lambda
28
2262
try_stmt
1603
2262
None
29
2262
+
30
2262
if_stmt
1604
2262
arith_expr
32
2262
test
33
2262
(
34
2262
compound_stmt
1605
2262
-
36
2262
NAME
37
2262
while_stmt
1606
2262
not_test
40
2262
lambdef
41
2262
for
1607
2262
STRING
43
2262
~
44
2262
simple_stmt
1608
2262
classdef
1609
2262
power
47
2262
comparison
48
2262
continue
49
2262
expr_stmt
50
2262
not
51
2262
del_stmt
52
2262
yield_stmt
53
2262
@
54
2262
decorator
55
2262
yield
56
2262
assert_stmt
57
2262
break_stmt
58
2262
return
59
2262
pass
60
2262
continue_stmt
61
2262
test_list
62
2262
break
63
2262
del
64
2262
pass_stmt
65
2262
nonlocal
66
2262
assert
67
2262
global_stmt
68
2262
raise
69
2262
stmt
1611
2262
raise_stmt
70
2262
global
71
2262
nonlocal_stmt
72
2262
return_stmt
75
2262
flow_stmt
76
2263
NAME
maybe_except_clause -> except_clause
2263
class
maybe_except_clause -> except_clause
2263
STRING
maybe_except_clause -> except_clause
2263
[
maybe_except_clause -> except_clause
2263
NUMBER
maybe_except_clause -> except_clause
2263
try
maybe_except_clause -> except_clause
2263
return
maybe_except_clause -> except_clause
2263
finally
maybe_except_clause -> except_clause
2263
while
maybe_except_clause -> except_clause
2263
global
maybe_except_clause -> except_clause
2263
else
maybe_except_clause -> except_clause
2263
if
maybe_except_clause -> except_clause
2263
-
maybe_except_clause -> except_clause
2263
continue
maybe_except_clause -> except_clause
2263
not
maybe_except_clause -> except_clause
2263
False
maybe_except_clause -> except_clause
2263
None
maybe_except_clause -> except_clause
2263
assert
maybe_except_clause -> except_clause
2263
$
maybe_except_clause -> except_clause
2263
lambda
maybe_except_clause -> except_clause
2263
raise
maybe_except_clause -> except_clause
2263
yield
maybe_except_clause -> except_clause
2263
True
maybe_except_clause -> except_clause
2263
break
maybe_except_clause -> except_clause
2263
pass
maybe_except_clause -> except_clause
2263
~
maybe_except_clause -> except_clause
2263
def
maybe_except_clause -> except_clause
2263
for
maybe_except_clause -> except_clause
2263
@
maybe_except_clause -> except_clause
2263
(
maybe_except_clause -> except_clause
2263
NEWLINE
maybe_except_clause -> except_clause
2263
+
maybe_except_clause -> except_clause
2263
{
maybe_except_clause -> except_clause
2263
with
maybe_except_clause -> except_clause
2263
nonlocal
maybe_except_clause -> except_clause
2263
del
maybe_except_clause -> except_clause
2264
def
except_clause -> except : suite maybe_except_clause
2264
assert
except_clause -> except : suite maybe_except_clause
2264
global
except_clause -> except : suite maybe_except_clause
2264
raise
except_clause -> except : suite maybe_except_clause
2264
while
except_clause -> except : suite maybe_except_clause
2264
~
except_clause -> except : suite maybe_except_clause
2264
True
except_clause -> except : suite maybe_except_clause
2264
break
except_clause -> except : suite maybe_except_clause
2264
[
except_clause -> except : suite maybe_except_clause
2264
False
except_clause -> except : suite maybe_except_clause
2264
NAME
except_clause -> except : suite maybe_except_clause
2264
None
except_clause -> except : suite maybe_except_clause
2264
NUMBER
except_clause -> except : suite maybe_except_clause
2264
with
except_clause -> except : suite maybe_except_clause
2264
STRING
except_clause -> except : suite maybe_except_clause
2264
else
except_clause -> except : suite maybe_except_clause
2264
if
except_clause -> except : suite maybe_except_clause
2264
return
except_clause -> except : suite maybe_except_clause
2264
pass
except_clause -> except : suite maybe_except_clause
2264
try
except_clause -> except : suite maybe_except_clause
2264
lambda
except_clause -> except : suite maybe_except_clause
2264
NEWLINE
except_clause -> except : suite maybe_except_clause
2264
+
except_clause -> except : suite maybe_except_clause
2264
$
except_clause -> except : suite maybe_except_clause
2264
-
except_clause -> except : suite maybe_except_clause
2264
class
except_clause -> except : suite maybe_except_clause
2264
{
except_clause -> except : suite maybe_except_clause
2264
continue
except_clause -> except : suite maybe_except_clause
2264
nonlocal
except_clause -> except : suite maybe_except_clause
2264
del
except_clause -> except : suite maybe_except_clause
2264
@
except_clause -> except : suite maybe_except_clause
2264
finally
except_clause -> except : suite maybe_except_clause
2264
not
except_clause -> except : suite maybe_except_clause
2264
yield
except_clause -> except : suite maybe_except_clause
2264
for
except_clause -> except : suite maybe_except_clause
2264
(
except_clause -> except : suite maybe_except_clause
2265
]
2432
2266
)
2433
2267
<
trailer -> ( )
2267
.
trailer -> ( )
2267
*
trailer -> ( )
2267
or
trailer -> ( )
2267
is
trailer -> ( )
2267
:
trailer -> ( )
2267
/
trailer -> ( )
2267
+
trailer -> ( )
2267
@
trailer -> ( )
2267
>
trailer -> ( )
2267
//
trailer -> ( )
2267
|
trailer -> ( )
2267
!=
trailer -> ( )
2267
&
trailer -> ( )
2267
^
trailer -> ( )
2267
<=
trailer -> ( )
2267
%
trailer -> ( )
2267
>>
trailer -> ( )
2267
**
trailer -> ( )
2267
and
trailer -> ( )
2267
(
trailer -> ( )
2267
==
trailer -> ( )
2267
if
trailer -> ( )
2267
[
trailer -> ( )
2267
<<
trailer -> ( )
2267
in
trailer -> ( )
2267
-
trailer -> ( )
2267
as
trailer -> ( )
2267
not
trailer -> ( )
2267
>=
trailer -> ( )
2268
|
trailer -> . NAME
2268
@
trailer -> . NAME
2268
^
trailer -> . NAME
2268
>
trailer -> . NAME
2268
+
trailer -> . NAME
2268
.
trailer -> . NAME
2268
:
trailer -> . NAME
2268
!=
trailer -> . NAME
2268
<<
trailer -> . NAME
2268
as
trailer -> . NAME
2268
<=
trailer -> . NAME
2268
[
trailer -> . NAME
2268
*
trailer -> . NAME
2268
(
trailer -> . NAME
2268
//
trailer -> . NAME
2268
**
trailer -> . NAME
2268
-
trailer -> . NAME
2268
in
trailer -> . NAME
2268
>=
trailer -> . NAME
2268
==
trailer -> . NAME
2268
or
trailer -> . NAME
2268
and
trailer -> . NAME
2268
%
trailer -> . NAME
2268
is
trailer -> . NAME
2268
<
trailer -> . NAME
2268
not
trailer -> . NAME
2268
/
trailer -> . NAME
2268
if
trailer -> . NAME
2268
&
trailer -> . NAME
2268
>>
trailer -> . NAME
2269
&
trailer_expr -> trailer trailer_expr
2269
not
trailer_expr -> trailer trailer_expr
2269
and
trailer_expr -> trailer trailer_expr
2269
+
trailer_expr -> trailer trailer_expr
2269
==
trailer_expr -> trailer trailer_expr
2269
**
trailer_expr -> trailer trailer_expr
2269
/
trailer_expr -> trailer trailer_expr
2269
^
trailer_expr -> trailer trailer_expr
2269
>
trailer_expr -> trailer trailer_expr
2269
*
trailer_expr -> trailer trailer_expr
2269
//
trailer_expr -> trailer trailer_expr
2269
>>
trailer_expr -> trailer trailer_expr
2269
<<
trailer_expr -> trailer trailer_expr
2269
>=
trailer_expr -> trailer trailer_expr
2269
:
trailer_expr -> trailer trailer_expr
2269
<=
trailer_expr -> trailer trailer_expr
2269
-
trailer_expr -> trailer trailer_expr
2269
is
trailer_expr -> trailer trailer_expr
2269
in
trailer_expr -> trailer trailer_expr
2269
as
trailer_expr -> trailer trailer_expr
2269
<
trailer_expr -> trailer trailer_expr
2269
|
trailer_expr -> trailer trailer_expr
2269
if
trailer_expr -> trailer trailer_expr
2269
%
trailer_expr -> trailer trailer_expr
2269
@
trailer_expr -> trailer trailer_expr
2269
!=
trailer_expr -> trailer trailer_expr
2269
or
trailer_expr -> trailer trailer_expr
2270
atom_expr
1560
2270
and_expr
1561
2270
term
1562
2270
factor
1563
2270
shift_expr
1564
2270
arith_expr
1565
2270
NUMBER
1566
2270
or_test
1567
2270
NAME
1568
2270
[
1569
2270
{
1570
2270
expr
1571
2270
False
1572
2270
xor_expr
1573
2270
STRING
1574
2270
+
1576
2270
True
1577
2270
(
1578
2270
None
1579
2270
-
1580
2270
test
2434
2270
atom
1582
2270
power
1583
2270
~
1584
2270
lambda
1585
2270
not_test
1586
2270
and_test
1587
2270
not
1588
2270
comparison
1589
2270
lambdef
1590
2271
as
lambdef -> lambda : test
2271
:
lambdef -> lambda : test
2272
:
and_test -> not_test and and_test
2272
or
and_test -> not_test and and_test
2272
if
and_test -> not_test and and_test
2272
as
and_test -> not_test and and_test
2273
as
or_test -> and_test or or_test
2273
if
or_test -> and_test or or_test
2273
:
or_test -> and_test or or_test
2274
suite
2435
2274
factor
10
2274
atom_expr
6
2274
[
3
2274
term
15
2274
STRING
43
2274
arith_expr
32
2274
NUMBER
8
2274
small_stmt
2436
2274
NAME
37
2274
{
5
2274
expr
7
2274
not
51
2274
True
9
2274
shift_expr
12
2274
atom
13
2274
xor_expr
14
2274
NEWLINE
2437
2274
(
34
2274
None
29
2274
and_test
20
2274
and_expr
21
2274
False
23
2274
or_test
25
2274
test
33
2274
lambda
28
2274
+
30
2274
simple_stmt
2438
2274
nonlocal
66
2274
-
36
2274
not_test
40
2274
power
47
2274
lambdef
41
2274
~
44
2274
comparison
48
2274
assert
67
2274
global_stmt
68
2274
continue
49
2274
expr_stmt
50
2274
test_list
62
2274
raise
69
2274
del_stmt
52
2274
yield_stmt
53
2274
raise_stmt
70
2274
yield
56
2274
assert_stmt
57
2274
global
71
2274
nonlocal_stmt
72
2274
break_stmt
58
2274
return_stmt
75
2274
return
59
2274
pass
60
2274
continue_stmt
61
2274
flow_stmt
76
2274
break
63
2274
del
64
2274
pass_stmt
65
2275
atom_expr
6
2275
factor
10
2275
[
3
2275
term
15
2275
STRING
43
2275
arith_expr
32
2275
NUMBER
8
2275
small_stmt
1593
2275
NAME
37
2275
{
5
2275
expr
7
2275
not
51
2275
True
9
2275
shift_expr
12
2275
atom
13
2275
xor_expr
14
2275
NEWLINE
2439
2275
(
34
2275
None
29
2275
and_test
20
2275
and_expr
21
2275
False
23
2275
or_test
25
2275
test
33
2275
lambda
28
2275
+
30
2275
simple_stmt
2440
2275
suite
2441
2275
nonlocal
66
2275
-
36
2275
not_test
40
2275
power
47
2275
lambdef
41
2275
~
44
2275
comparison
48
2275
assert
67
2275
global_stmt
68
2275
continue
49
2275
expr_stmt
50
2275
test_list
62
2275
raise
69
2275
del_stmt
52
2275
yield_stmt
53
2275
raise_stmt
70
2275
yield
56
2275
assert_stmt
57
2275
global
71
2275
nonlocal_stmt
72
2275
break_stmt
58
2275
return_stmt
75
2275
return
59
2275
pass
60
2275
continue_stmt
61
2275
flow_stmt
76
2275
break
63
2275
del
64
2275
pass_stmt
65
2276
and_test
505
2276
atom_expr
506
2276
and_expr
507
2276
term
508
2276
factor
509
2276
shift_expr
510
2276
arith_expr
511
2276
NUMBER
512
2276
NAME
513
2276
not
514
2276
[
515
2276
{
516
2276
expr
517
2276
arglist
2442
2276
not_test
519
2276
False
520
2276
xor_expr
521
2276
STRING
522
2276
lambda
523
2276
atom
525
2276
+
526
2276
True
527
2276
-
528
2276
or_test
529
2276
(
530
2276
None
531
2276
comparison
532
2276
power
533
2276
test
534
2276
~
535
2276
)
2443
2276
*
536
2276
lambdef
537
2276
**
538
2276
argument
539
2277
atom_expr
6
2277
factor
10
2277
[
3
2277
term
15
2277
STRING
43
2277
arith_expr
32
2277
NUMBER
8
2277
small_stmt
2444
2277
NAME
37
2277
{
5
2277
expr
7
2277
not
51
2277
True
9
2277
shift_expr
12
2277
atom
13
2277
xor_expr
14
2277
NEWLINE
2445
2277
(
34
2277
None
29
2277
and_test
20
2277
and_expr
21
2277
False
23
2277
or_test
25
2277
test
33
2277
lambda
28
2277
+
30
2277
simple_stmt
2446
2277
suite
2447
2277
nonlocal
66
2277
-
36
2277
not_test
40
2277
power
47
2277
lambdef
41
2277
~
44
2277
comparison
48
2277
assert
67
2277
global_stmt
68
2277
continue
49
2277
expr_stmt
50
2277
test_list
62
2277
raise
69
2277
del_stmt
52
2277
yield_stmt
53
2277
raise_stmt
70
2277
yield
56
2277
assert_stmt
57
2277
global
71
2277
nonlocal_stmt
72
2277
break_stmt
58
2277
return_stmt
75
2277
return
59
2277
pass
60
2277
continue_stmt
61
2277
flow_stmt
76
2277
break
63
2277
del
64
2277
pass_stmt
65
2278
except_clause
2448
2278
except
2449
2279
atom_expr
6
2279
factor
10
2279
[
3
2279
term
15
2279
STRING
43
2279
arith_expr
32
2279
NUMBER
8
2279
small_stmt
1593
2279
NAME
37
2279
{
5
2279
expr
7
2279
not
51
2279
True
9
2279
shift_expr
12
2279
atom
13
2279
xor_expr
14
2279
NEWLINE
2439
2279
(
34
2279
None
29
2279
and_test
20
2279
and_expr
21
2279
False
23
2279
or_test
25
2279
test
33
2279
lambda
28
2279
+
30
2279
simple_stmt
2440
2279
nonlocal
66
2279
-
36
2279
not_test
40
2279
suite
2450
2279
power
47
2279
lambdef
41
2279
~
44
2279
comparison
48
2279
assert
67
2279
global_stmt
68
2279
continue
49
2279
expr_stmt
50
2279
test_list
62
2279
raise
69
2279
del_stmt
52
2279
yield_stmt
53
2279
raise_stmt
70
2279
yield
56
2279
assert_stmt
57
2279
global
71
2279
nonlocal_stmt
72
2279
break_stmt
58
2279
return_stmt
75
2279
return
59
2279
pass
60
2279
continue_stmt
61
2279
flow_stmt
76
2279
break
63
2279
del
64
2279
pass_stmt
65
2280
parameters
2451
2280
)
2452
2280
**
1112
2280
NAME
1113
2280
*
1114
2280
param
1115
2280
tfpdef
1116
2281
atom_expr
1182
2281
and_expr
1183
2281
term
1184
2281
factor
1185
2281
shift_expr
1186
2281
arith_expr
1187
2281
NUMBER
1188
2281
NAME
1189
2281
[
1190
2281
{
1191
2281
expr
1192
2281
not_test
1193
2281
False
1194
2281
test_list
2453
2281
xor_expr
1196
2281
STRING
1197
2281
atom
1198
2281
+
1199
2281
True
1200
2281
(
1201
2281
-
1202
2281
None
1203
2281
and_test
1204
2281
power
1205
2281
~
1206
2281
lambda
1207
2281
not
1208
2281
comparison
1209
2281
test
1210
2281
lambdef
1211
2281
or_test
1212
2282
<<
trailer -> [ subscriptlist ]
2282
:
trailer -> [ subscriptlist ]
2282
,
trailer -> [ subscriptlist ]
2282
%
trailer -> [ subscriptlist ]
2282
|
trailer -> [ subscriptlist ]
2282
*
trailer -> [ subscriptlist ]
2282
(
trailer -> [ subscriptlist ]
2282
.
trailer -> [ subscriptlist ]
2282
>>
trailer -> [ subscriptlist ]
2282
//
trailer -> [ subscriptlist ]
2282
**
trailer -> [ subscriptlist ]
2282
&
trailer -> [ subscriptlist ]
2282
/
trailer -> [ subscriptlist ]
2282
-
trailer -> [ subscriptlist ]
2282
+
trailer -> [ subscriptlist ]
2282
[
trailer -> [ subscriptlist ]
2282
^
trailer -> [ subscriptlist ]
2282
@
trailer -> [ subscriptlist ]
2283
[
trailer -> ( arglist )
2283
>>
trailer -> ( arglist )
2283
/
trailer -> ( arglist )
2283
%
trailer -> ( arglist )
2283
+
trailer -> ( arglist )
2283
//
trailer -> ( arglist )
2283
<<
trailer -> ( arglist )
2283
*
trailer -> ( arglist )
2283
**
trailer -> ( arglist )
2283
&
trailer -> ( arglist )
2283
.
trailer -> ( arglist )
2283
-
trailer -> ( arglist )
2283
@
trailer -> ( arglist )
2283
(
trailer -> ( arglist )
2283
^
trailer -> ( arglist )
2283
|
trailer -> ( arglist )
2283
,
trailer -> ( arglist )
2283
:
trailer -> ( arglist )
2284
STRING
funcdef -> def NAME ( parameters ) : suite
2284
break
funcdef -> def NAME ( parameters ) : suite
2284
(
funcdef -> def NAME ( parameters ) : suite
2284
if
funcdef -> def NAME ( parameters ) : suite
2284
pass
funcdef -> def NAME ( parameters ) : suite
2284
for
funcdef -> def NAME ( parameters ) : suite
2284
while
funcdef -> def NAME ( parameters ) : suite
2284
del
funcdef -> def NAME ( parameters ) : suite
2284
continue
funcdef -> def NAME ( parameters ) : suite
2284
True
funcdef -> def NAME ( parameters ) : suite
2284
nonlocal
funcdef -> def NAME ( parameters ) : suite
2284
NUMBER
funcdef -> def NAME ( parameters ) : suite
2284
{
funcdef -> def NAME ( parameters ) : suite
2284
@
funcdef -> def NAME ( parameters ) : suite
2284
assert
funcdef -> def NAME ( parameters ) : suite
2284
None
funcdef -> def NAME ( parameters ) : suite
2284
False
funcdef -> def NAME ( parameters ) : suite
2284
try
funcdef -> def NAME ( parameters ) : suite
2284
[
funcdef -> def NAME ( parameters ) : suite
2284
with
funcdef -> def NAME ( parameters ) : suite
2284
-
funcdef -> def NAME ( parameters ) : suite
2284
def
funcdef -> def NAME ( parameters ) : suite
2284
class
funcdef -> def NAME ( parameters ) : suite
2284
lambda
funcdef -> def NAME ( parameters ) : suite
2284
raise
funcdef -> def NAME ( parameters ) : suite
2284
not
funcdef -> def NAME ( parameters ) : suite
2284
NEWLINE
funcdef -> def NAME ( parameters ) : suite
2284
NAME
funcdef -> def NAME ( parameters ) : suite
2284
$
funcdef -> def NAME ( parameters ) : suite
2284
return
funcdef -> def NAME ( parameters ) : suite
2284
global
funcdef -> def NAME ( parameters ) : suite
2284
yield
funcdef -> def NAME ( parameters ) : suite
2284
~
funcdef -> def NAME ( parameters ) : suite
2284
+
funcdef -> def NAME ( parameters ) : suite
2285
)
tfpdef -> NAME : test
2285
,
tfpdef -> NAME : test
2286
atom_expr
2023
2286
NUMBER
2029
2286
NAME
2030
2286
[
2032
2286
{
2033
2286
False
2036
2286
STRING
2038
2286
atom
2040
2286
+
2041
2286
True
2042
2286
-
2043
2286
(
2046
2286
factor
2454
2286
None
2047
2286
power
2048
2286
~
2049
2287
atom_expr
2023
2287
and_expr
2024
2287
term
2025
2287
factor
2026
2287
shift_expr
2027
2287
arith_expr
2028
2287
NUMBER
2029
2287
NAME
2030
2287
[
2032
2287
{
2033
2287
False
2036
2287
STRING
2038
2287
xor_expr
2455
2287
atom
2040
2287
+
2041
2287
True
2042
2287
-
2043
2287
(
2046
2287
None
2047
2287
power
2048
2287
~
2049
2288
atom_expr
2023
2288
factor
2026
2288
term
2025
2288
NUMBER
2029
2288
NAME
2030
2288
[
2032
2288
{
2033
2288
False
2036
2288
STRING
2038
2288
atom
2040
2288
+
2041
2288
True
2042
2288
-
2043
2288
(
2046
2288
None
2047
2288
power
2048
2288
arith_expr
2456
2288
~
2049
2289
atom_expr
2023
2289
factor
2026
2289
term
2025
2289
NUMBER
2029
2289
NAME
2030
2289
[
2032
2289
{
2033
2289
False
2036
2289
STRING
2038
2289
atom
2040
2289
+
2041
2289
True
2042
2289
-
2043
2289
arith_expr
2457
2289
(
2046
2289
None
2047
2289
power
2048
2289
~
2049
2290
atom_expr
2023
2290
factor
2026
2290
NUMBER
2029
2290
NAME
2030
2290
[
2032
2290
{
2033
2290
False
2036
2290
STRING
2038
2290
atom
2040
2290
+
2041
2290
term
2458
2290
True
2042
2290
-
2043
2290
(
2046
2290
None
2047
2290
power
2048
2290
~
2049
2291
atom_expr
2023
2291
factor
2026
2291
NUMBER
2029
2291
NAME
2030
2291
[
2032
2291
{
2033
2291
False
2036
2291
STRING
2038
2291
atom
2040
2291
+
2041
2291
True
2042
2291
-
2043
2291
(
2046
2291
None
2047
2291
power
2048
2291
term
2459
2291
~
2049
2292
atom_expr
2023
2292
factor
2026
2292
NUMBER
2029
2292
NAME
2030
2292
[
2032
2292
{
2033
2292
False
2036
2292
STRING
2038
2292
atom
2040
2292
+
2041
2292
term
2460
2292
True
2042
2292
-
2043
2292
(
2046
2292
None
2047
2292
power
2048
2292
~
2049
2293
atom_expr
2023
2293
term
2461
2293
factor
2026
2293
NUMBER
2029
2293
NAME
2030
2293
[
2032
2293
{
2033
2293
False
2036
2293
STRING
2038
2293
atom
2040
2293
+
2041
2293
True
2042
2293
-
2043
2293
(
2046
2293
None
2047
2293
power
2048
2293
~
2049
2294
atom_expr
2023
2294
factor
2026
2294
NUMBER
2029
2294
NAME
2030
2294
[
2032
2294
{
2033
2294
False
2036
2294
STRING
2038
2294
atom
2040
2294
+
2041
2294
True
2042
2294
-
2043
2294
(
2046
2294
None
2047
2294
term
2462
2294
power
2048
2294
~
2049
2295
atom_expr
2023
2295
factor
2026
2295
term
2025
2295
shift_expr
2027
2295
arith_expr
2028
2295
NUMBER
2029
2295
NAME
2030
2295
[
2032
2295
{
2033
2295
False
2036
2295
STRING
2038
2295
atom
2040
2295
+
2041
2295
True
2042
2295
-
2043
2295
(
2046
2295
None
2047
2295
power
2048
2295
~
2049
2295
and_expr
2463
2296
atom_expr
2023
2296
factor
2026
2296
term
2025
2296
arith_expr
2028
2296
NUMBER
2029
2296
NAME
2030
2296
shift_expr
2464
2296
[
2032
2296
{
2033
2296
False
2036
2296
STRING
2038
2296
atom
2040
2296
+
2041
2296
True
2042
2296
-
2043
2296
(
2046
2296
None
2047
2296
power
2048
2296
~
2049
2297
atom_expr
2023
2297
factor
2026
2297
term
2025
2297
arith_expr
2028
2297
NUMBER
2029
2297
NAME
2030
2297
[
2032
2297
{
2033
2297
False
2036
2297
STRING
2038
2297
shift_expr
2465
2297
atom
2040
2297
+
2041
2297
True
2042
2297
-
2043
2297
(
2046
2297
None
2047
2297
power
2048
2297
~
2049
2298
if
not_test -> not not_test
2298
)
not_test -> not not_test
2298
,
not_test -> not not_test
2298
or
not_test -> not not_test
2298
=
not_test -> not not_test
2298
and
not_test -> not not_test
2299
]
2466
2300
in
atom -> [ ]
2300
>=
atom -> [ ]
2300
%
atom -> [ ]
2300
is
atom -> [ ]
2300
^
atom -> [ ]
2300
//
atom -> [ ]
2300
or
atom -> [ ]
2300
not
atom -> [ ]
2300
[
atom -> [ ]
2300
and
atom -> [ ]
2300
/
atom -> [ ]
2300
!=
atom -> [ ]
2300
>
atom -> [ ]
2300
=
atom -> [ ]
2300
&
atom -> [ ]
2300
**
atom -> [ ]
2300
@
atom -> [ ]
2300
==
atom -> [ ]
2300
<<
atom -> [ ]
2300
if
atom -> [ ]
2300
<
atom -> [ ]
2300
,
atom -> [ ]
2300
(
atom -> [ ]
2300
<=
atom -> [ ]
2300
*
atom -> [ ]
2300
.
atom -> [ ]
2300
>>
atom -> [ ]
2300
|
atom -> [ ]
2300
)
atom -> [ ]
2300
-
atom -> [ ]
2300
+
atom -> [ ]
2301
<<
atom -> { }
2301
+
atom -> { }
2301
//
atom -> { }
2301
is
atom -> { }
2301
>=
atom -> { }
2301
<=
atom -> { }
2301
>
atom -> { }
2301
*
atom -> { }
2301
^
atom -> { }
2301
%
atom -> { }
2301
>>
atom -> { }
2301
)
atom -> { }
2301
.
atom -> { }
2301
not
atom -> { }
2301
==
atom -> { }
2301
if
atom -> { }
2301
in
atom -> { }
2301
<
atom -> { }
2301
|
atom -> { }
2301
(
atom -> { }
2301
/
atom -> { }
2301
and
atom -> { }
2301
**
atom -> { }
2301
@
atom -> { }
2301
=
atom -> { }
2301
-
atom -> { }
2301
&
atom -> { }
2301
,
atom -> { }
2301
!=
atom -> { }
2301
or
atom -> { }
2301
[
atom -> { }
2302
atom_expr
2023
2302
and_expr
2024
2302
term
2025
2302
factor
2026
2302
shift_expr
2027
2302
arith_expr
2028
2302
NUMBER
2029
2302
NAME
2030
2302
[
2032
2302
{
2033
2302
expr
2034
2302
False
2036
2302
xor_expr
2037
2302
STRING
2038
2302
comparison
2467
2302
atom
2040
2302
+
2041
2302
True
2042
2302
-
2043
2302
(
2046
2302
None
2047
2302
power
2048
2302
~
2049
2303
atom_expr
2023
2303
and_expr
2024
2303
term
2025
2303
factor
2026
2303
shift_expr
2027
2303
arith_expr
2028
2303
NUMBER
2029
2303
NAME
2030
2303
not
2031
2303
[
2032
2303
{
2033
2303
expr
2034
2303
not_test
2035
2303
False
2036
2303
xor_expr
2037
2303
STRING
2038
2303
atom
2040
2303
+
2041
2303
True
2042
2303
-
2043
2303
(
2046
2303
None
2047
2303
power
2048
2303
and_test
2468
2303
~
2049
2303
comparison
2050
2304
atom_expr
2023
2304
and_expr
2024
2304
term
2025
2304
factor
2026
2304
shift_expr
2027
2304
arith_expr
2028
2304
NUMBER
2029
2304
NAME
2030
2304
[
2032
2304
{
2033
2304
False
2036
2304
xor_expr
2037
2304
STRING
2038
2304
atom
2040
2304
+
2041
2304
True
2042
2304
-
2043
2304
(
2046
2304
None
2047
2304
power
2048
2304
expr
2469
2304
~
2049
2305
atom_expr
2023
2305
and_expr
2024
2305
term
2025
2305
factor
2026
2305
shift_expr
2027
2305
arith_expr
2028
2305
NUMBER
2029
2305
NAME
2030
2305
not
2031
2305
[
2032
2305
{
2033
2305
expr
2034
2305
not_test
2035
2305
False
2036
2305
xor_expr
2037
2305
STRING
2038
2305
lambda
2039
2305
atom
2040
2305
+
2041
2305
True
2042
2305
-
2043
2305
and_test
2044
2305
or_test
2045
2305
(
2046
2305
None
2047
2305
power
2048
2305
~
2049
2305
test
2470
2305
comparison
2050
2305
lambdef
2051
2306
:
2471
2307
atom_expr
472
2307
and_expr
473
2307
term
474
2307
factor
475
2307
shift_expr
476
2307
arith_expr
477
2307
NUMBER
478
2307
NAME
479
2307
[
480
2307
{
481
2307
expr
482
2307
not_test
483
2307
False
484
2307
xor_expr
485
2307
atom
487
2307
subscriptlist
2472
2307
STRING
488
2307
+
489
2307
(
490
2307
True
491
2307
-
492
2307
None
493
2307
or_test
494
2307
and_test
495
2307
power
496
2307
~
497
2307
lambda
498
2307
:
maybe_test -> 
2307
maybe_test
499
2307
test
500
2307
not
501
2307
comparison
502
2307
lambdef
503
2307
subscript
504
2308
and_test
505
2308
atom_expr
506
2308
and_expr
507
2308
term
508
2308
factor
509
2308
shift_expr
510
2308
arith_expr
511
2308
NUMBER
512
2308
NAME
513
2308
not
514
2308
[
515
2308
{
516
2308
expr
517
2308
)
2473
2308
not_test
519
2308
False
520
2308
xor_expr
521
2308
STRING
522
2308
lambda
523
2308
arglist
2474
2308
atom
525
2308
+
526
2308
True
527
2308
-
528
2308
or_test
529
2308
(
530
2308
None
531
2308
comparison
532
2308
power
533
2308
test
534
2308
~
535
2308
*
536
2308
lambdef
537
2308
**
538
2308
argument
539
2309
NAME
2475
2310
trailer_expr
2476
2310
[
2307
2310
(
2308
2310
.
2309
2310
trailer
2310
2310
<<
trailer_expr -> 
2310
@
trailer_expr -> 
2310
!=
trailer_expr -> 
2310
-
trailer_expr -> 
2310
^
trailer_expr -> 
2310
<
trailer_expr -> 
2310
/
trailer_expr -> 
2310
is
trailer_expr -> 
2310
==
trailer_expr -> 
2310
&
trailer_expr -> 
2310
>=
trailer_expr -> 
2310
or
trailer_expr -> 
2310
in
trailer_expr -> 
2310
=
trailer_expr -> 
2310
*
trailer_expr -> 
2310
not
trailer_expr -> 
2310
)
trailer_expr -> 
2310
**
trailer_expr -> 
2310
<=
trailer_expr -> 
2310
+
trailer_expr -> 
2310
//
trailer_expr -> 
2310
%
trailer_expr -> 
2310
>
trailer_expr -> 
2310
,
trailer_expr -> 
2310
|
trailer_expr -> 
2310
if
trailer_expr -> 
2310
and
trailer_expr -> 
2310
>>
trailer_expr -> 
2311
==
atom_expr -> atom trailer_expr
2311
%
atom_expr -> atom trailer_expr
2311
+
atom_expr -> atom trailer_expr
2311
not
atom_expr -> atom trailer_expr
2311
or
atom_expr -> atom trailer_expr
2311
//
atom_expr -> atom trailer_expr
2311
and
atom_expr -> atom trailer_expr
2311
!=
atom_expr -> atom trailer_expr
2311
<<
atom_expr -> atom trailer_expr
2311
if
atom_expr -> atom trailer_expr
2311
-
atom_expr -> atom trailer_expr
2311
=
atom_expr -> atom trailer_expr
2311
)
atom_expr -> atom trailer_expr
2311
>>
atom_expr -> atom trailer_expr
2311
**
atom_expr -> atom trailer_expr
2311
/
atom_expr -> atom trailer_expr
2311
<
atom_expr -> atom trailer_expr
2311
in
atom_expr -> atom trailer_expr
2311
&
atom_expr -> atom trailer_expr
2311
is
atom_expr -> atom trailer_expr
2311
|
atom_expr -> atom trailer_expr
2311
>
atom_expr -> atom trailer_expr
2311
>=
atom_expr -> atom trailer_expr
2311
<=
atom_expr -> atom trailer_expr
2311
@
atom_expr -> atom trailer_expr
2311
*
atom_expr -> atom trailer_expr
2311
,
atom_expr -> atom trailer_expr
2311
^
atom_expr -> atom trailer_expr
2312
<<
factor -> + factor
2312
,
factor -> + factor
2312
&
factor -> + factor
2312
>
factor -> + factor
2312
if
factor -> + factor
2312
not
factor -> + factor
2312
+
factor -> + factor
2312
)
factor -> + factor
2312
^
factor -> + factor
2312
==
factor -> + factor
2312
/
factor -> + factor
2312
|
factor -> + factor
2312
>=
factor -> + factor
2312
%
factor -> + factor
2312
<
factor -> + factor
2312
is
factor -> + factor
2312
or
factor -> + factor
2312
@
factor -> + factor
2312
//
factor -> + factor
2312
and
factor -> + factor
2312
=
factor -> + factor
2312
-
factor -> + factor
2312
in
factor -> + factor
2312
*
factor -> + factor
2312
!=
factor -> + factor
2312
>>
factor -> + factor
2312
<=
factor -> + factor
2313
@
factor -> - factor
2313
^
factor -> - factor
2313
==
factor -> - factor
2313
in
factor -> - factor
2313
>>
factor -> - factor
2313
)
factor -> - factor
2313
,
factor -> - factor
2313
//
factor -> - factor
2313
and
factor -> - factor
2313
<=
factor -> - factor
2313
!=
factor -> - factor
2313
-
factor -> - factor
2313
&
factor -> - factor
2313
=
factor -> - factor
2313
not
factor -> - factor
2313
>
factor -> - factor
2313
*
factor -> - factor
2313
%
factor -> - factor
2313
/
factor -> - factor
2313
<
factor -> - factor
2313
|
factor -> - factor
2313
+
factor -> - factor
2313
if
factor -> - factor
2313
<<
factor -> - factor
2313
is
factor -> - factor
2313
or
factor -> - factor
2313
>=
factor -> - factor
2314
atom_expr
2023
2314
and_expr
2024
2314
term
2025
2314
factor
2026
2314
shift_expr
2027
2314
arith_expr
2028
2314
NUMBER
2029
2314
NAME
2030
2314
not
2031
2314
[
2032
2314
{
2033
2314
expr
2034
2314
not_test
2035
2314
False
2036
2314
xor_expr
2037
2314
STRING
2038
2314
atom
2040
2314
+
2041
2314
True
2042
2314
-
2043
2314
and_test
2044
2314
(
2046
2314
None
2047
2314
power
2048
2314
~
2049
2314
comparison
2050
2314
or_test
2477
2315
atom_expr
590
2315
and_expr
591
2315
term
592
2315
[
593
2315
shift_expr
594
2315
arith_expr
595
2315
NUMBER
596
2315
NAME
597
2315
factor
598
2315
{
599
2315
expr
600
2315
False
601
2315
xor_expr
602
2315
STRING
603
2315
+
604
2315
True
605
2315
-
606
2315
(
607
2315
None
608
2315
atom
609
2315
power
610
2315
~
611
2315
not_test
612
2315
or_test
2478
2315
not
613
2315
comparison
614
2315
and_test
615
2316
)
2479
2317
)
atom -> ( )
2317
>=
atom -> ( )
2317
>>
atom -> ( )
2317
not
atom -> ( )
2317
if
atom -> ( )
2317
&
atom -> ( )
2317
^
atom -> ( )
2317
.
atom -> ( )
2317
/
atom -> ( )
2317
in
atom -> ( )
2317
>
atom -> ( )
2317
%
atom -> ( )
2317
(
atom -> ( )
2317
==
atom -> ( )
2317
,
atom -> ( )
2317
[
atom -> ( )
2317
<=
atom -> ( )
2317
+
atom -> ( )
2317
|
atom -> ( )
2317
-
atom -> ( )
2317
or
atom -> ( )
2317
=
atom -> ( )
2317
@
atom -> ( )
2317
<<
atom -> ( )
2317
is
atom -> ( )
2317
**
atom -> ( )
2317
*
atom -> ( )
2317
and
atom -> ( )
2317
<
atom -> ( )
2317
!=
atom -> ( )
2317
//
atom -> ( )
2318
=
factor -> ~ factor
2318
<<
factor -> ~ factor
2318
in
factor -> ~ factor
2318
<=
factor -> ~ factor
2318
if
factor -> ~ factor
2318
|
factor -> ~ factor
2318
<
factor -> ~ factor
2318
>>
factor -> ~ factor
2318
==
factor -> ~ factor
2318
>=
factor -> ~ factor
2318
!=
factor -> ~ factor
2318
,
factor -> ~ factor
2318
//
factor -> ~ factor
2318
*
factor -> ~ factor
2318
/
factor -> ~ factor
2318
+
factor -> ~ factor
2318
is
factor -> ~ factor
2318
not
factor -> ~ factor
2318
and
factor -> ~ factor
2318
)
factor -> ~ factor
2318
^
factor -> ~ factor
2318
@
factor -> ~ factor
2318
>
factor -> ~ factor
2318
-
factor -> ~ factor
2318
or
factor -> ~ factor
2318
&
factor -> ~ factor
2318
%
factor -> ~ factor
2319
and_test
2058
2319
atom_expr
2059
2319
and_expr
2060
2319
term
2061
2319
factor
2062
2319
shift_expr
2063
2319
arith_expr
2064
2319
NUMBER
2065
2319
NAME
2066
2319
not
2067
2319
[
2068
2319
{
2069
2319
expr
2070
2319
False
2071
2319
xor_expr
2072
2319
STRING
2073
2319
+
2074
2319
True
2075
2319
-
2076
2319
(
2077
2319
None
2078
2319
comparison
2079
2319
power
2080
2319
atom
2081
2319
~
2082
2319
not_test
2083
2319
or_test
2480
2320
atom_expr
2059
2320
NUMBER
2065
2320
NAME
2066
2320
[
2068
2320
{
2069
2320
False
2071
2320
STRING
2073
2320
+
2074
2320
True
2075
2320
-
2076
2320
(
2077
2320
None
2078
2320
power
2080
2320
atom
2081
2320
~
2082
2320
factor
2481
2321
atom_expr
2059
2321
and_expr
2060
2321
term
2061
2321
factor
2062
2321
shift_expr
2063
2321
arith_expr
2064
2321
NUMBER
2065
2321
NAME
2066
2321
[
2068
2321
{
2069
2321
False
2071
2321
STRING
2073
2321
xor_expr
2482
2321
+
2074
2321
True
2075
2321
-
2076
2321
(
2077
2321
None
2078
2321
power
2080
2321
atom
2081
2321
~
2082
2322
atom_expr
2059
2322
factor
2062
2322
term
2061
2322
NUMBER
2065
2322
NAME
2066
2322
[
2068
2322
{
2069
2322
False
2071
2322
STRING
2073
2322
+
2074
2322
True
2075
2322
-
2076
2322
(
2077
2322
None
2078
2322
power
2080
2322
arith_expr
2483
2322
atom
2081
2322
~
2082
2323
atom_expr
2059
2323
factor
2062
2323
term
2061
2323
NUMBER
2065
2323
NAME
2066
2323
[
2068
2323
{
2069
2323
False
2071
2323
STRING
2073
2323
+
2074
2323
True
2075
2323
-
2076
2323
arith_expr
2484
2323
(
2077
2323
None
2078
2323
power
2080
2323
atom
2081
2323
~
2082
2324
atom_expr
2059
2324
factor
2062
2324
NUMBER
2065
2324
NAME
2066
2324
[
2068
2324
{
2069
2324
False
2071
2324
STRING
2073
2324
+
2074
2324
term
2485
2324
True
2075
2324
-
2076
2324
(
2077
2324
None
2078
2324
power
2080
2324
atom
2081
2324
~
2082
2325
atom_expr
2059
2325
factor
2062
2325
NUMBER
2065
2325
NAME
2066
2325
[
2068
2325
{
2069
2325
False
2071
2325
STRING
2073
2325
+
2074
2325
term
2486
2325
True
2075
2325
-
2076
2325
(
2077
2325
None
2078
2325
power
2080
2325
atom
2081
2325
~
2082
2326
atom_expr
2059
2326
factor
2062
2326
NUMBER
2065
2326
NAME
2066
2326
[
2068
2326
{
2069
2326
term
2487
2326
False
2071
2326
STRING
2073
2326
+
2074
2326
True
2075
2326
-
2076
2326
(
2077
2326
None
2078
2326
power
2080
2326
atom
2081
2326
~
2082
2327
atom_expr
2059
2327
factor
2062
2327
NUMBER
2065
2327
NAME
2066
2327
[
2068
2327
{
2069
2327
False
2071
2327
STRING
2073
2327
+
2074
2327
True
2075
2327
-
2076
2327
(
2077
2327
None
2078
2327
power
2080
2327
term
2488
2327
atom
2081
2327
~
2082
2328
atom_expr
2059
2328
factor
2062
2328
NUMBER
2065
2328
NAME
2066
2328
[
2068
2328
{
2069
2328
False
2071
2328
STRING
2073
2328
+
2074
2328
True
2075
2328
-
2076
2328
(
2077
2328
None
2078
2328
term
2489
2328
power
2080
2328
atom
2081
2328
~
2082
2329
atom_expr
2059
2329
factor
2062
2329
term
2061
2329
shift_expr
2063
2329
arith_expr
2064
2329
NUMBER
2065
2329
NAME
2066
2329
[
2068
2329
{
2069
2329
False
2071
2329
STRING
2073
2329
+
2074
2329
True
2075
2329
-
2076
2329
(
2077
2329
None
2078
2329
power
2080
2329
atom
2081
2329
~
2082
2329
and_expr
2490
2330
atom_expr
2059
2330
factor
2062
2330
term
2061
2330
arith_expr
2064
2330
NUMBER
2065
2330
NAME
2066
2330
[
2068
2330
{
2069
2330
False
2071
2330
STRING
2073
2330
+
2074
2330
True
2075
2330
-
2076
2330
(
2077
2330
None
2078
2330
power
2080
2330
atom
2081
2330
~
2082
2330
shift_expr
2491
2331
atom_expr
2059
2331
factor
2062
2331
term
2061
2331
arith_expr
2064
2331
NUMBER
2065
2331
NAME
2066
2331
[
2068
2331
{
2069
2331
False
2071
2331
STRING
2073
2331
shift_expr
2492
2331
+
2074
2331
True
2075
2331
-
2076
2331
(
2077
2331
None
2078
2331
power
2080
2331
atom
2081
2331
~
2082
2332
for
not_test -> not not_test
2332
if
not_test -> not not_test
2332
)
not_test -> not not_test
2332
or
not_test -> not not_test
2332
and
not_test -> not not_test
2333
]
2493
2334
in
atom -> [ ]
2334
>=
atom -> [ ]
2334
%
atom -> [ ]
2334
is
atom -> [ ]
2334
^
atom -> [ ]
2334
//
atom -> [ ]
2334
or
atom -> [ ]
2334
not
atom -> [ ]
2334
[
atom -> [ ]
2334
and
atom -> [ ]
2334
/
atom -> [ ]
2334
!=
atom -> [ ]
2334
>
atom -> [ ]
2334
&
atom -> [ ]
2334
**
atom -> [ ]
2334
@
atom -> [ ]
2334
==
atom -> [ ]
2334
<<
atom -> [ ]
2334
if
atom -> [ ]
2334
<
atom -> [ ]
2334
(
atom -> [ ]
2334
<=
atom -> [ ]
2334
*
atom -> [ ]
2334
.
atom -> [ ]
2334
>>
atom -> [ ]
2334
|
atom -> [ ]
2334
)
atom -> [ ]
2334
-
atom -> [ ]
2334
+
atom -> [ ]
2334
for
atom -> [ ]
2335
<<
atom -> { }
2335
+
atom -> { }
2335
//
atom -> { }
2335
is
atom -> { }
2335
>=
atom -> { }
2335
<=
atom -> { }
2335
>
atom -> { }
2335
*
atom -> { }
2335
^
atom -> { }
2335
%
atom -> { }
2335
>>
atom -> { }
2335
)
atom -> { }
2335
.
atom -> { }
2335
not
atom -> { }
2335
==
atom -> { }
2335
if
atom -> { }
2335
in
atom -> { }
2335
<
atom -> { }
2335
|
atom -> { }
2335
(
atom -> { }
2335
/
atom -> { }
2335
for
atom -> { }
2335
and
atom -> { }
2335
**
atom -> { }
2335
@
atom -> { }
2335
-
atom -> { }
2335
&
atom -> { }
2335
!=
atom -> { }
2335
or
atom -> { }
2335
[
atom -> { }
2336
atom_expr
2059
2336
and_expr
2060
2336
term
2061
2336
factor
2062
2336
shift_expr
2063
2336
arith_expr
2064
2336
NUMBER
2065
2336
NAME
2066
2336
[
2068
2336
{
2069
2336
expr
2070
2336
False
2071
2336
xor_expr
2072
2336
STRING
2073
2336
comparison
2494
2336
+
2074
2336
True
2075
2336
-
2076
2336
(
2077
2336
None
2078
2336
power
2080
2336
atom
2081
2336
~
2082
2337
atom_expr
2059
2337
and_expr
2060
2337
term
2061
2337
factor
2062
2337
shift_expr
2063
2337
expr
2495
2337
arith_expr
2064
2337
NUMBER
2065
2337
NAME
2066
2337
[
2068
2337
{
2069
2337
False
2071
2337
xor_expr
2072
2337
STRING
2073
2337
+
2074
2337
True
2075
2337
-
2076
2337
(
2077
2337
None
2078
2337
power
2080
2337
atom
2081
2337
~
2082
2338
<<
factor -> + factor
2338
&
factor -> + factor
2338
>
factor -> + factor
2338
if
factor -> + factor
2338
not
factor -> + factor
2338
+
factor -> + factor
2338
)
factor -> + factor
2338
^
factor -> + factor
2338
==
factor -> + factor
2338
/
factor -> + factor
2338
|
factor -> + factor
2338
>=
factor -> + factor
2338
for
factor -> + factor
2338
%
factor -> + factor
2338
<
factor -> + factor
2338
is
factor -> + factor
2338
or
factor -> + factor
2338
@
factor -> + factor
2338
//
factor -> + factor
2338
and
factor -> + factor
2338
-
factor -> + factor
2338
in
factor -> + factor
2338
*
factor -> + factor
2338
!=
factor -> + factor
2338
>>
factor -> + factor
2338
<=
factor -> + factor
2339
@
factor -> - factor
2339
^
factor -> - factor
2339
==
factor -> - factor
2339
in
factor -> - factor
2339
>>
factor -> - factor
2339
)
factor -> - factor
2339
//
factor -> - factor
2339
and
factor -> - factor
2339
for
factor -> - factor
2339
<=
factor -> - factor
2339
!=
factor -> - factor
2339
-
factor -> - factor
2339
&
factor -> - factor
2339
not
factor -> - factor
2339
>
factor -> - factor
2339
*
factor -> - factor
2339
%
factor -> - factor
2339
/
factor -> - factor
2339
<
factor -> - factor
2339
|
factor -> - factor
2339
+
factor -> - factor
2339
if
factor -> - factor
2339
<<
factor -> - factor
2339
is
factor -> - factor
2339
or
factor -> - factor
2339
>=
factor -> - factor
2340
)
2496
2341
)
atom -> ( )
2341
>=
atom -> ( )
2341
>>
atom -> ( )
2341
not
atom -> ( )
2341
if
atom -> ( )
2341
&
atom -> ( )
2341
^
atom -> ( )
2341
.
atom -> ( )
2341
for
atom -> ( )
2341
/
atom -> ( )
2341
in
atom -> ( )
2341
>
atom -> ( )
2341
%
atom -> ( )
2341
(
atom -> ( )
2341
==
atom -> ( )
2341
[
atom -> ( )
2341
<=
atom -> ( )
2341
+
atom -> ( )
2341
|
atom -> ( )
2341
-
atom -> ( )
2341
or
atom -> ( )
2341
@
atom -> ( )
2341
<<
atom -> ( )
2341
is
atom -> ( )
2341
**
atom -> ( )
2341
*
atom -> ( )
2341
and
atom -> ( )
2341
<
atom -> ( )
2341
!=
atom -> ( )
2341
//
atom -> ( )
2342
atom_expr
472
2342
and_expr
473
2342
term
474
2342
factor
475
2342
shift_expr
476
2342
arith_expr
477
2342
NUMBER
478
2342
NAME
479
2342
[
480
2342
{
481
2342
expr
482
2342
not_test
483
2342
False
484
2342
xor_expr
485
2342
atom
487
2342
STRING
488
2342
+
489
2342
(
490
2342
True
491
2342
-
492
2342
None
493
2342
subscriptlist
2497
2342
or_test
494
2342
and_test
495
2342
power
496
2342
~
497
2342
lambda
498
2342
:
maybe_test -> 
2342
maybe_test
499
2342
test
500
2342
not
501
2342
comparison
502
2342
lambdef
503
2342
subscript
504
2343
and_test
505
2343
atom_expr
506
2343
and_expr
507
2343
term
508
2343
factor
509
2343
shift_expr
510
2343
arith_expr
511
2343
NUMBER
512
2343
NAME
513
2343
not
514
2343
[
515
2343
{
516
2343
expr
517
2343
not_test
519
2343
False
520
2343
xor_expr
521
2343
STRING
522
2343
lambda
523
2343
arglist
2498
2343
atom
525
2343
)
2499
2343
+
526
2343
True
527
2343
-
528
2343
or_test
529
2343
(
530
2343
None
531
2343
comparison
532
2343
power
533
2343
test
534
2343
~
535
2343
*
536
2343
lambdef
537
2343
**
538
2343
argument
539
2344
NAME
2500
2345
trailer_expr
2501
2345
[
2342
2345
(
2343
2345
.
2344
2345
trailer
2345
2345
<<
trailer_expr -> 
2345
@
trailer_expr -> 
2345
!=
trailer_expr -> 
2345
-
trailer_expr -> 
2345
^
trailer_expr -> 
2345
<
trailer_expr -> 
2345
for
trailer_expr -> 
2345
/
trailer_expr -> 
2345
is
trailer_expr -> 
2345
==
trailer_expr -> 
2345
&
trailer_expr -> 
2345
>=
trailer_expr -> 
2345
or
trailer_expr -> 
2345
in
trailer_expr -> 
2345
*
trailer_expr -> 
2345
not
trailer_expr -> 
2345
)
trailer_expr -> 
2345
**
trailer_expr -> 
2345
<=
trailer_expr -> 
2345
+
trailer_expr -> 
2345
//
trailer_expr -> 
2345
%
trailer_expr -> 
2345
>
trailer_expr -> 
2345
|
trailer_expr -> 
2345
if
trailer_expr -> 
2345
and
trailer_expr -> 
2345
>>
trailer_expr -> 
2346
==
atom_expr -> atom trailer_expr
2346
%
atom_expr -> atom trailer_expr
2346
+
atom_expr -> atom trailer_expr
2346
not
atom_expr -> atom trailer_expr
2346
or
atom_expr -> atom trailer_expr
2346
//
atom_expr -> atom trailer_expr
2346
and
atom_expr -> atom trailer_expr
2346
!=
atom_expr -> atom trailer_expr
2346
<<
atom_expr -> atom trailer_expr
2346
for
atom_expr -> atom trailer_expr
2346
if
atom_expr -> atom trailer_expr
2346
-
atom_expr -> atom trailer_expr
2346
)
atom_expr -> atom trailer_expr
2346
>>
atom_expr -> atom trailer_expr
2346
**
atom_expr -> atom trailer_expr
2346
/
atom_expr -> atom trailer_expr
2346
<
atom_expr -> atom trailer_expr
2346
in
atom_expr -> atom trailer_expr
2346
&
atom_expr -> atom trailer_expr
2346
is
atom_expr -> atom trailer_expr
2346
|
atom_expr -> atom trailer_expr
2346
>
atom_expr -> atom trailer_expr
2346
>=
atom_expr -> atom trailer_expr
2346
<=
atom_expr -> atom trailer_expr
2346
@
atom_expr -> atom trailer_expr
2346
*
atom_expr -> atom trailer_expr
2346
^
atom_expr -> atom trailer_expr
2347
for
factor -> ~ factor
2347
<<
factor -> ~ factor
2347
in
factor -> ~ factor
2347
<=
factor -> ~ factor
2347
if
factor -> ~ factor
2347
|
factor -> ~ factor
2347
<
factor -> ~ factor
2347
>>
factor -> ~ factor
2347
==
factor -> ~ factor
2347
>=
factor -> ~ factor
2347
!=
factor -> ~ factor
2347
//
factor -> ~ factor
2347
*
factor -> ~ factor
2347
/
factor -> ~ factor
2347
+
factor -> ~ factor
2347
is
factor -> ~ factor
2347
not
factor -> ~ factor
2347
and
factor -> ~ factor
2347
)
factor -> ~ factor
2347
^
factor -> ~ factor
2347
@
factor -> ~ factor
2347
>
factor -> ~ factor
2347
-
factor -> ~ factor
2347
or
factor -> ~ factor
2347
&
factor -> ~ factor
2347
%
factor -> ~ factor
2348
atom_expr
2059
2348
and_expr
2060
2348
term
2061
2348
factor
2062
2348
shift_expr
2063
2348
arith_expr
2064
2348
NUMBER
2065
2348
NAME
2066
2348
not
2067
2348
[
2068
2348
{
2069
2348
expr
2070
2348
False
2071
2348
xor_expr
2072
2348
STRING
2073
2348
+
2074
2348
True
2075
2348
-
2076
2348
(
2077
2348
None
2078
2348
comparison
2079
2348
power
2080
2348
and_test
2502
2348
atom
2081
2348
~
2082
2348
not_test
2083
2349
)
comp_for -> for expr_list in or_test comp_iter
2350
)
comp_iter -> comp_if
2351
)
comp_iter -> comp_for
2352
and_test
2058
2352
atom_expr
2059
2352
and_expr
2060
2352
term
2061
2352
factor
2062
2352
shift_expr
2063
2352
arith_expr
2064
2352
NUMBER
2065
2352
NAME
2066
2352
not
2067
2352
[
2068
2352
{
2069
2352
expr
2070
2352
False
2071
2352
xor_expr
2072
2352
STRING
2073
2352
+
2074
2352
True
2075
2352
-
2076
2352
(
2077
2352
None
2078
2352
comparison
2079
2352
power
2080
2352
atom
2081
2352
~
2082
2352
lambdef_nocond
2503
2352
not_test
2083
2352
or_test
2504
2352
test_nocond
2505
2352
lambda
2506
2353
:
2507
2354
*
trailer -> [ subscriptlist ]
2354
not
trailer -> [ subscriptlist ]
2354
(
trailer -> [ subscriptlist ]
2354
<<
trailer -> [ subscriptlist ]
2354
:
trailer -> [ subscriptlist ]
2354
,
trailer -> [ subscriptlist ]
2354
>>
trailer -> [ subscriptlist ]
2354
//
trailer -> [ subscriptlist ]
2354
or
trailer -> [ subscriptlist ]
2354
is
trailer -> [ subscriptlist ]
2354
[
trailer -> [ subscriptlist ]
2354
|
trailer -> [ subscriptlist ]
2354
%
trailer -> [ subscriptlist ]
2354
<=
trailer -> [ subscriptlist ]
2354
and
trailer -> [ subscriptlist ]
2354
**
trailer -> [ subscriptlist ]
2354
if
trailer -> [ subscriptlist ]
2354
-
trailer -> [ subscriptlist ]
2354
in
trailer -> [ subscriptlist ]
2354
^
trailer -> [ subscriptlist ]
2354
+
trailer -> [ subscriptlist ]
2354
>=
trailer -> [ subscriptlist ]
2354
.
trailer -> [ subscriptlist ]
2354
&
trailer -> [ subscriptlist ]
2354
/
trailer -> [ subscriptlist ]
2354
!=
trailer -> [ subscriptlist ]
2354
<
trailer -> [ subscriptlist ]
2354
==
trailer -> [ subscriptlist ]
2354
>
trailer -> [ subscriptlist ]
2354
@
trailer -> [ subscriptlist ]
2355
%
trailer -> ( arglist )
2355
and
trailer -> ( arglist )
2355
+
trailer -> ( arglist )
2355
or
trailer -> ( arglist )
2355
not
trailer -> ( arglist )
2355
-
trailer -> ( arglist )
2355
@
trailer -> ( arglist )
2355
[
trailer -> ( arglist )
2355
>>
trailer -> ( arglist )
2355
<=
trailer -> ( arglist )
2355
if
trailer -> ( arglist )
2355
//
trailer -> ( arglist )
2355
==
trailer -> ( arglist )
2355
<<
trailer -> ( arglist )
2355
*
trailer -> ( arglist )
2355
<
trailer -> ( arglist )
2355
**
trailer -> ( arglist )
2355
is
trailer -> ( arglist )
2355
>
trailer -> ( arglist )
2355
!=
trailer -> ( arglist )
2355
/
trailer -> ( arglist )
2355
in
trailer -> ( arglist )
2355
.
trailer -> ( arglist )
2355
|
trailer -> ( arglist )
2355
>=
trailer -> ( arglist )
2355
&
trailer -> ( arglist )
2355
(
trailer -> ( arglist )
2355
^
trailer -> ( arglist )
2355
,
trailer -> ( arglist )
2355
:
trailer -> ( arglist )
2356
:
lambdef -> lambda varargslist : test
2356
,
lambdef -> lambda varargslist : test
2357
atom_expr
1182
2357
and_expr
1183
2357
term
1184
2357
factor
1185
2357
shift_expr
1186
2357
arith_expr
1187
2357
NUMBER
1188
2357
NAME
1189
2357
[
1190
2357
{
1191
2357
expr
1192
2357
not_test
1193
2357
False
1194
2357
xor_expr
1196
2357
STRING
1197
2357
atom
1198
2357
+
1199
2357
True
1200
2357
(
1201
2357
None
1203
2357
-
1202
2357
and_test
1204
2357
power
1205
2357
~
1206
2357
lambda
1207
2357
test
2508
2357
not
1208
2357
comparison
1209
2357
lambdef
1211
2357
or_test
1212
2358
*
power -> atom_expr ** factor
2358
in
power -> atom_expr ** factor
2358
<
power -> atom_expr ** factor
2358
if
power -> atom_expr ** factor
2358
-
power -> atom_expr ** factor
2358
>>
power -> atom_expr ** factor
2358
<=
power -> atom_expr ** factor
2358
and
power -> atom_expr ** factor
2358
==
power -> atom_expr ** factor
2358
NEWLINE
power -> atom_expr ** factor
2358
%
power -> atom_expr ** factor
2358
=
power -> atom_expr ** factor
2358
/
power -> atom_expr ** factor
2358
^
power -> atom_expr ** factor
2358
<<
power -> atom_expr ** factor
2358
>
power -> atom_expr ** factor
2358
//
power -> atom_expr ** factor
2358
is
power -> atom_expr ** factor
2358
@
power -> atom_expr ** factor
2358
+
power -> atom_expr ** factor
2358
|
power -> atom_expr ** factor
2358
!=
power -> atom_expr ** factor
2358
>=
power -> atom_expr ** factor
2358
or
power -> atom_expr ** factor
2358
&
power -> atom_expr ** factor
2358
not
power -> atom_expr ** factor
2359
and
xor_expr -> and_expr ^ xor_expr
2359
<
xor_expr -> and_expr ^ xor_expr
2359
>
xor_expr -> and_expr ^ xor_expr
2359
in
xor_expr -> and_expr ^ xor_expr
2359
|
xor_expr -> and_expr ^ xor_expr
2359
<=
xor_expr -> and_expr ^ xor_expr
2359
NEWLINE
xor_expr -> and_expr ^ xor_expr
2359
=
xor_expr -> and_expr ^ xor_expr
2359
not
xor_expr -> and_expr ^ xor_expr
2359
or
xor_expr -> and_expr ^ xor_expr
2359
if
xor_expr -> and_expr ^ xor_expr
2359
is
xor_expr -> and_expr ^ xor_expr
2359
==
xor_expr -> and_expr ^ xor_expr
2359
!=
xor_expr -> and_expr ^ xor_expr
2359
>=
xor_expr -> and_expr ^ xor_expr
2360
<=
arith_expr -> term + arith_expr
2360
NEWLINE
arith_expr -> term + arith_expr
2360
&
arith_expr -> term + arith_expr
2360
>
arith_expr -> term + arith_expr
2360
>=
arith_expr -> term + arith_expr
2360
not
arith_expr -> term + arith_expr
2360
|
arith_expr -> term + arith_expr
2360
in
arith_expr -> term + arith_expr
2360
if
arith_expr -> term + arith_expr
2360
>>
arith_expr -> term + arith_expr
2360
is
arith_expr -> term + arith_expr
2360
^
arith_expr -> term + arith_expr
2360
<<
arith_expr -> term + arith_expr
2360
<
arith_expr -> term + arith_expr
2360
==
arith_expr -> term + arith_expr
2360
!=
arith_expr -> term + arith_expr
2360
or
arith_expr -> term + arith_expr
2360
=
arith_expr -> term + arith_expr
2360
and
arith_expr -> term + arith_expr
2361
<=
arith_expr -> term - arith_expr
2361
if
arith_expr -> term - arith_expr
2361
not
arith_expr -> term - arith_expr
2361
|
arith_expr -> term - arith_expr
2361
>>
arith_expr -> term - arith_expr
2361
NEWLINE
arith_expr -> term - arith_expr
2361
>=
arith_expr -> term - arith_expr
2361
<<
arith_expr -> term - arith_expr
2361
=
arith_expr -> term - arith_expr
2361
is
arith_expr -> term - arith_expr
2361
!=
arith_expr -> term - arith_expr
2361
in
arith_expr -> term - arith_expr
2361
<
arith_expr -> term - arith_expr
2361
or
arith_expr -> term - arith_expr
2361
==
arith_expr -> term - arith_expr
2361
and
arith_expr -> term - arith_expr
2361
&
arith_expr -> term - arith_expr
2361
^
arith_expr -> term - arith_expr
2361
>
arith_expr -> term - arith_expr
2362
>=
term -> factor / term
2362
!=
term -> factor / term
2362
not
term -> factor / term
2362
^
term -> factor / term
2362
in
term -> factor / term
2362
and
term -> factor / term
2362
<<
term -> factor / term
2362
+
term -> factor / term
2362
>
term -> factor / term
2362
|
term -> factor / term
2362
or
term -> factor / term
2362
if
term -> factor / term
2362
>>
term -> factor / term
2362
NEWLINE
term -> factor / term
2362
<
term -> factor / term
2362
&
term -> factor / term
2362
-
term -> factor / term
2362
is
term -> factor / term
2362
==
term -> factor / term
2362
<=
term -> factor / term
2362
=
term -> factor / term
2363
|
term -> factor * term
2363
-
term -> factor * term
2363
in
term -> factor * term
2363
and
term -> factor * term
2363
NEWLINE
term -> factor * term
2363
<<
term -> factor * term
2363
>=
term -> factor * term
2363
if
term -> factor * term
2363
or
term -> factor * term
2363
<=
term -> factor * term
2363
is
term -> factor * term
2363
^
term -> factor * term
2363
!=
term -> factor * term
2363
=
term -> factor * term
2363
==
term -> factor * term
2363
&
term -> factor * term
2363
>
term -> factor * term
2363
not
term -> factor * term
2363
<
term -> factor * term
2363
+
term -> factor * term
2363
>>
term -> factor * term
2364
!=
term -> factor % term
2364
>>
term -> factor % term
2364
==
term -> factor % term
2364
>=
term -> factor % term
2364
^
term -> factor % term
2364
not
term -> factor % term
2364
or
term -> factor % term
2364
if
term -> factor % term
2364
<=
term -> factor % term
2364
<
term -> factor % term
2364
is
term -> factor % term
2364
-
term -> factor % term
2364
=
term -> factor % term
2364
in
term -> factor % term
2364
>
term -> factor % term
2364
<<
term -> factor % term
2364
and
term -> factor % term
2364
NEWLINE
term -> factor % term
2364
|
term -> factor % term
2364
+
term -> factor % term
2364
&
term -> factor % term
2365
is
term -> factor // term
2365
if
term -> factor // term
2365
>
term -> factor // term
2365
==
term -> factor // term
2365
+
term -> factor // term
2365
^
term -> factor // term
2365
-
term -> factor // term
2365
in
term -> factor // term
2365
>>
term -> factor // term
2365
NEWLINE
term -> factor // term
2365
|
term -> factor // term
2365
=
term -> factor // term
2365
<<
term -> factor // term
2365
!=
term -> factor // term
2365
&
term -> factor // term
2365
not
term -> factor // term
2365
<=
term -> factor // term
2365
<
term -> factor // term
2365
and
term -> factor // term
2365
>=
term -> factor // term
2365
or
term -> factor // term
2366
=
term -> factor @ term
2366
-
term -> factor @ term
2366
&
term -> factor @ term
2366
^
term -> factor @ term
2366
NEWLINE
term -> factor @ term
2366
!=
term -> factor @ term
2366
<<
term -> factor @ term
2366
is
term -> factor @ term
2366
<=
term -> factor @ term
2366
==
term -> factor @ term
2366
+
term -> factor @ term
2366
and
term -> factor @ term
2366
>
term -> factor @ term
2366
if
term -> factor @ term
2366
not
term -> factor @ term
2366
>>
term -> factor @ term
2366
>=
term -> factor @ term
2366
|
term -> factor @ term
2366
in
term -> factor @ term
2366
<
term -> factor @ term
2366
or
term -> factor @ term
2367
if
and_expr -> shift_expr & and_expr
2367
!=
and_expr -> shift_expr & and_expr
2367
<=
and_expr -> shift_expr & and_expr
2367
not
and_expr -> shift_expr & and_expr
2367
=
and_expr -> shift_expr & and_expr
2367
^
and_expr -> shift_expr & and_expr
2367
|
and_expr -> shift_expr & and_expr
2367
or
and_expr -> shift_expr & and_expr
2367
in
and_expr -> shift_expr & and_expr
2367
>
and_expr -> shift_expr & and_expr
2367
and
and_expr -> shift_expr & and_expr
2367
==
and_expr -> shift_expr & and_expr
2367
NEWLINE
and_expr -> shift_expr & and_expr
2367
<
and_expr -> shift_expr & and_expr
2367
is
and_expr -> shift_expr & and_expr
2367
>=
and_expr -> shift_expr & and_expr
2368
NEWLINE
shift_expr -> arith_expr << shift_expr
2368
^
shift_expr -> arith_expr << shift_expr
2368
|
shift_expr -> arith_expr << shift_expr
2368
&
shift_expr -> arith_expr << shift_expr
2368
and
shift_expr -> arith_expr << shift_expr
2368
is
shift_expr -> arith_expr << shift_expr
2368
in
shift_expr -> arith_expr << shift_expr
2368
<=
shift_expr -> arith_expr << shift_expr
2368
<
shift_expr -> arith_expr << shift_expr
2368
not
shift_expr -> arith_expr << shift_expr
2368
==
shift_expr -> arith_expr << shift_expr
2368
>=
shift_expr -> arith_expr << shift_expr
2368
if
shift_expr -> arith_expr << shift_expr
2368
>
shift_expr -> arith_expr << shift_expr
2368
=
shift_expr -> arith_expr << shift_expr
2368
or
shift_expr -> arith_expr << shift_expr
2368
!=
shift_expr -> arith_expr << shift_expr
2369
or
shift_expr -> arith_expr >> shift_expr
2369
and
shift_expr -> arith_expr >> shift_expr
2369
>=
shift_expr -> arith_expr >> shift_expr
2369
NEWLINE
shift_expr -> arith_expr >> shift_expr
2369
not
shift_expr -> arith_expr >> shift_expr
2369
^
shift_expr -> arith_expr >> shift_expr
2369
is
shift_expr -> arith_expr >> shift_expr
2369
if
shift_expr -> arith_expr >> shift_expr
2369
in
shift_expr -> arith_expr >> shift_expr
2369
<=
shift_expr -> arith_expr >> shift_expr
2369
=
shift_expr -> arith_expr >> shift_expr
2369
==
shift_expr -> arith_expr >> shift_expr
2369
<
shift_expr -> arith_expr >> shift_expr
2369
!=
shift_expr -> arith_expr >> shift_expr
2369
|
shift_expr -> arith_expr >> shift_expr
2369
>
shift_expr -> arith_expr >> shift_expr
2369
&
shift_expr -> arith_expr >> shift_expr
2370
and
atom -> [ test_list_comp ]
2370
<=
atom -> [ test_list_comp ]
2370
**
atom -> [ test_list_comp ]
2370
^
atom -> [ test_list_comp ]
2370
NEWLINE
atom -> [ test_list_comp ]
2370
[
atom -> [ test_list_comp ]
2370
!=
atom -> [ test_list_comp ]
2370
<
atom -> [ test_list_comp ]
2370
/
atom -> [ test_list_comp ]
2370
-
atom -> [ test_list_comp ]
2370
>=
atom -> [ test_list_comp ]
2370
if
atom -> [ test_list_comp ]
2370
%
atom -> [ test_list_comp ]
2370
is
atom -> [ test_list_comp ]
2370
+
atom -> [ test_list_comp ]
2370
&
atom -> [ test_list_comp ]
2370
@
atom -> [ test_list_comp ]
2370
or
atom -> [ test_list_comp ]
2370
in
atom -> [ test_list_comp ]
2370
==
atom -> [ test_list_comp ]
2370
not
atom -> [ test_list_comp ]
2370
.
atom -> [ test_list_comp ]
2370
|
atom -> [ test_list_comp ]
2370
=
atom -> [ test_list_comp ]
2370
>
atom -> [ test_list_comp ]
2370
<<
atom -> [ test_list_comp ]
2370
//
atom -> [ test_list_comp ]
2370
(
atom -> [ test_list_comp ]
2370
*
atom -> [ test_list_comp ]
2370
>>
atom -> [ test_list_comp ]
2371
if
comparison -> expr comp_op comparison
2371
or
comparison -> expr comp_op comparison
2371
NEWLINE
comparison -> expr comp_op comparison
2371
and
comparison -> expr comp_op comparison
2371
=
comparison -> expr comp_op comparison
2372
NEWLINE
expr -> xor_expr | expr
2372
>
expr -> xor_expr | expr
2372
is
expr -> xor_expr | expr
2372
<
expr -> xor_expr | expr
2372
if
expr -> xor_expr | expr
2372
>=
expr -> xor_expr | expr
2372
or
expr -> xor_expr | expr
2372
and
expr -> xor_expr | expr
2372
in
expr -> xor_expr | expr
2372
!=
expr -> xor_expr | expr
2372
<=
expr -> xor_expr | expr
2372
==
expr -> xor_expr | expr
2372
=
expr -> xor_expr | expr
2372
not
expr -> xor_expr | expr
2373
if
or_test -> and_test or or_test
2373
NEWLINE
or_test -> and_test or or_test
2373
=
or_test -> and_test or or_test
2374
else
2509
2375
NEWLINE
atom -> ( test_list_comp )
2375
if
atom -> ( test_list_comp )
2375
or
atom -> ( test_list_comp )
2375
*
atom -> ( test_list_comp )
2375
|
atom -> ( test_list_comp )
2375
>>
atom -> ( test_list_comp )
2375
%
atom -> ( test_list_comp )
2375
not
atom -> ( test_list_comp )
2375
//
atom -> ( test_list_comp )
2375
+
atom -> ( test_list_comp )
2375
and
atom -> ( test_list_comp )
2375
>
atom -> ( test_list_comp )
2375
[
atom -> ( test_list_comp )
2375
^
atom -> ( test_list_comp )
2375
!=
atom -> ( test_list_comp )
2375
<<
atom -> ( test_list_comp )
2375
**
atom -> ( test_list_comp )
2375
is
atom -> ( test_list_comp )
2375
<=
atom -> ( test_list_comp )
2375
-
atom -> ( test_list_comp )
2375
&
atom -> ( test_list_comp )
2375
(
atom -> ( test_list_comp )
2375
in
atom -> ( test_list_comp )
2375
@
atom -> ( test_list_comp )
2375
.
atom -> ( test_list_comp )
2375
<
atom -> ( test_list_comp )
2375
/
atom -> ( test_list_comp )
2375
==
atom -> ( test_list_comp )
2375
>=
atom -> ( test_list_comp )
2375
=
atom -> ( test_list_comp )
2376
=
lambdef -> lambda : test
2376
NEWLINE
lambdef -> lambda : test
2377
atom_expr
1736
2377
and_expr
1737
2377
term
1738
2377
factor
1739
2377
shift_expr
1740
2377
arith_expr
1741
2377
NUMBER
1742
2377
NAME
1743
2377
[
1744
2377
{
1745
2377
expr
1746
2377
False
1747
2377
xor_expr
1748
2377
STRING
1749
2377
+
1750
2377
True
1751
2377
-
1752
2377
and_test
1753
2377
or_test
1754
2377
(
1755
2377
None
1756
2377
lambda
1757
2377
atom
1758
2377
power
1759
2377
~
1760
2377
test
2510
2377
not_test
1761
2377
lambdef
1762
2377
comparison
1763
2377
not
1764
2378
]
2511
2379
)
2512
2380
<
trailer -> ( )
2380
.
trailer -> ( )
2380
*
trailer -> ( )
2380
or
trailer -> ( )
2380
is
trailer -> ( )
2380
=
trailer -> ( )
2380
/
trailer -> ( )
2380
+
trailer -> ( )
2380
@
trailer -> ( )
2380
>
trailer -> ( )
2380
//
trailer -> ( )
2380
|
trailer -> ( )
2380
!=
trailer -> ( )
2380
&
trailer -> ( )
2380
^
trailer -> ( )
2380
<=
trailer -> ( )
2380
%
trailer -> ( )
2380
>>
trailer -> ( )
2380
**
trailer -> ( )
2380
and
trailer -> ( )
2380
(
trailer -> ( )
2380
==
trailer -> ( )
2380
if
trailer -> ( )
2380
[
trailer -> ( )
2380
<<
trailer -> ( )
2380
NEWLINE
trailer -> ( )
2380
in
trailer -> ( )
2380
-
trailer -> ( )
2380
not
trailer -> ( )
2380
>=
trailer -> ( )
2381
|
trailer -> . NAME
2381
@
trailer -> . NAME
2381
^
trailer -> . NAME
2381
>
trailer -> . NAME
2381
+
trailer -> . NAME
2381
.
trailer -> . NAME
2381
!=
trailer -> . NAME
2381
<<
trailer -> . NAME
2381
<=
trailer -> . NAME
2381
[
trailer -> . NAME
2381
*
trailer -> . NAME
2381
(
trailer -> . NAME
2381
//
trailer -> . NAME
2381
**
trailer -> . NAME
2381
-
trailer -> . NAME
2381
in
trailer -> . NAME
2381
>=
trailer -> . NAME
2381
=
trailer -> . NAME
2381
&
trailer -> . NAME
2381
==
trailer -> . NAME
2381
or
trailer -> . NAME
2381
and
trailer -> . NAME
2381
%
trailer -> . NAME
2381
is
trailer -> . NAME
2381
<
trailer -> . NAME
2381
not
trailer -> . NAME
2381
/
trailer -> . NAME
2381
if
trailer -> . NAME
2381
NEWLINE
trailer -> . NAME
2381
>>
trailer -> . NAME
2382
&
trailer_expr -> trailer trailer_expr
2382
not
trailer_expr -> trailer trailer_expr
2382
and
trailer_expr -> trailer trailer_expr
2382
+
trailer_expr -> trailer trailer_expr
2382
==
trailer_expr -> trailer trailer_expr
2382
**
trailer_expr -> trailer trailer_expr
2382
/
trailer_expr -> trailer trailer_expr
2382
=
trailer_expr -> trailer trailer_expr
2382
^
trailer_expr -> trailer trailer_expr
2382
>
trailer_expr -> trailer trailer_expr
2382
*
trailer_expr -> trailer trailer_expr
2382
NEWLINE
trailer_expr -> trailer trailer_expr
2382
//
trailer_expr -> trailer trailer_expr
2382
>>
trailer_expr -> trailer trailer_expr
2382
<<
trailer_expr -> trailer trailer_expr
2382
>=
trailer_expr -> trailer trailer_expr
2382
<=
trailer_expr -> trailer trailer_expr
2382
-
trailer_expr -> trailer trailer_expr
2382
is
trailer_expr -> trailer trailer_expr
2382
in
trailer_expr -> trailer trailer_expr
2382
<
trailer_expr -> trailer trailer_expr
2382
|
trailer_expr -> trailer trailer_expr
2382
if
trailer_expr -> trailer trailer_expr
2382
%
trailer_expr -> trailer trailer_expr
2382
@
trailer_expr -> trailer trailer_expr
2382
!=
trailer_expr -> trailer trailer_expr
2382
or
trailer_expr -> trailer trailer_expr
2383
or
and_test -> not_test and and_test
2383
NEWLINE
and_test -> not_test and and_test
2383
=
and_test -> not_test and and_test
2383
if
and_test -> not_test and and_test
2384
,
test -> or_test if or_test else test
2384
=
test -> or_test if or_test else test
2384
NEWLINE
test -> or_test if or_test else test
2385
=
test -> or_test if or_test else test
2386
NEWLINE
lambdef -> lambda varargslist : test
2387
*
trailer -> [ subscriptlist ]
2387
not
trailer -> [ subscriptlist ]
2387
(
trailer -> [ subscriptlist ]
2387
<<
trailer -> [ subscriptlist ]
2387
>>
trailer -> [ subscriptlist ]
2387
//
trailer -> [ subscriptlist ]
2387
NEWLINE
trailer -> [ subscriptlist ]
2387
or
trailer -> [ subscriptlist ]
2387
is
trailer -> [ subscriptlist ]
2387
[
trailer -> [ subscriptlist ]
2387
|
trailer -> [ subscriptlist ]
2387
%
trailer -> [ subscriptlist ]
2387
<=
trailer -> [ subscriptlist ]
2387
and
trailer -> [ subscriptlist ]
2387
**
trailer -> [ subscriptlist ]
2387
if
trailer -> [ subscriptlist ]
2387
-
trailer -> [ subscriptlist ]
2387
in
trailer -> [ subscriptlist ]
2387
^
trailer -> [ subscriptlist ]
2387
+
trailer -> [ subscriptlist ]
2387
>=
trailer -> [ subscriptlist ]
2387
.
trailer -> [ subscriptlist ]
2387
&
trailer -> [ subscriptlist ]
2387
/
trailer -> [ subscriptlist ]
2387
!=
trailer -> [ subscriptlist ]
2387
<
trailer -> [ subscriptlist ]
2387
==
trailer -> [ subscriptlist ]
2387
>
trailer -> [ subscriptlist ]
2387
@
trailer -> [ subscriptlist ]
2388
%
trailer -> ( arglist )
2388
and
trailer -> ( arglist )
2388
+
trailer -> ( arglist )
2388
or
trailer -> ( arglist )
2388
not
trailer -> ( arglist )
2388
-
trailer -> ( arglist )
2388
@
trailer -> ( arglist )
2388
[
trailer -> ( arglist )
2388
>>
trailer -> ( arglist )
2388
<=
trailer -> ( arglist )
2388
if
trailer -> ( arglist )
2388
//
trailer -> ( arglist )
2388
==
trailer -> ( arglist )
2388
<<
trailer -> ( arglist )
2388
*
trailer -> ( arglist )
2388
<
trailer -> ( arglist )
2388
**
trailer -> ( arglist )
2388
is
trailer -> ( arglist )
2388
>
trailer -> ( arglist )
2388
!=
trailer -> ( arglist )
2388
/
trailer -> ( arglist )
2388
NEWLINE
trailer -> ( arglist )
2388
in
trailer -> ( arglist )
2388
.
trailer -> ( arglist )
2388
|
trailer -> ( arglist )
2388
>=
trailer -> ( arglist )
2388
&
trailer -> ( arglist )
2388
(
trailer -> ( arglist )
2388
^
trailer -> ( arglist )
2389
atom_expr
1384
2389
and_expr
1385
2389
term
1386
2389
factor
1387
2389
shift_expr
1388
2389
arith_expr
1389
2389
NUMBER
1390
2389
NAME
1391
2389
[
1392
2389
{
1393
2389
expr
1394
2389
False
1395
2389
xor_expr
1396
2389
STRING
1397
2389
+
1398
2389
True
1399
2389
-
1400
2389
(
1401
2389
None
1402
2389
lambda
1403
2389
atom
1404
2389
or_test
1405
2389
power
1406
2389
~
1407
2389
lambdef
1408
2389
comparison
1409
2389
not_test
1411
2389
and_test
1412
2389
not
1413
2389
test
2513
2390
]
test -> or_test if or_test else test
2390
,
test -> or_test if or_test else test
2391
]
or_test -> and_test or or_test
2391
if
or_test -> and_test or or_test
2391
for
or_test -> and_test or or_test
2392
*
power -> atom_expr ** factor
2392
in
power -> atom_expr ** factor
2392
<
power -> atom_expr ** factor
2392
if
power -> atom_expr ** factor
2392
-
power -> atom_expr ** factor
2392
>>
power -> atom_expr ** factor
2392
]
power -> atom_expr ** factor
2392
<=
power -> atom_expr ** factor
2392
and
power -> atom_expr ** factor
2392
==
power -> atom_expr ** factor
2392
%
power -> atom_expr ** factor
2392
/
power -> atom_expr ** factor
2392
^
power -> atom_expr ** factor
2392
<<
power -> atom_expr ** factor
2392
>
power -> atom_expr ** factor
2392
//
power -> atom_expr ** factor
2392
is
power -> atom_expr ** factor
2392
for
power -> atom_expr ** factor
2392
@
power -> atom_expr ** factor
2392
+
power -> atom_expr ** factor
2392
|
power -> atom_expr ** factor
2392
!=
power -> atom_expr ** factor
2392
>=
power -> atom_expr ** factor
2392
or
power -> atom_expr ** factor
2392
&
power -> atom_expr ** factor
2392
not
power -> atom_expr ** factor
2393
and
xor_expr -> and_expr ^ xor_expr
2393
<
xor_expr -> and_expr ^ xor_expr
2393
>
xor_expr -> and_expr ^ xor_expr
2393
in
xor_expr -> and_expr ^ xor_expr
2393
|
xor_expr -> and_expr ^ xor_expr
2393
<=
xor_expr -> and_expr ^ xor_expr
2393
for
xor_expr -> and_expr ^ xor_expr
2393
]
xor_expr -> and_expr ^ xor_expr
2393
not
xor_expr -> and_expr ^ xor_expr
2393
or
xor_expr -> and_expr ^ xor_expr
2393
if
xor_expr -> and_expr ^ xor_expr
2393
is
xor_expr -> and_expr ^ xor_expr
2393
==
xor_expr -> and_expr ^ xor_expr
2393
!=
xor_expr -> and_expr ^ xor_expr
2393
>=
xor_expr -> and_expr ^ xor_expr
2394
<=
arith_expr -> term + arith_expr
2394
&
arith_expr -> term + arith_expr
2394
>
arith_expr -> term + arith_expr
2394
]
arith_expr -> term + arith_expr
2394
>=
arith_expr -> term + arith_expr
2394
not
arith_expr -> term + arith_expr
2394
|
arith_expr -> term + arith_expr
2394
in
arith_expr -> term + arith_expr
2394
if
arith_expr -> term + arith_expr
2394
>>
arith_expr -> term + arith_expr
2394
is
arith_expr -> term + arith_expr
2394
^
arith_expr -> term + arith_expr
2394
<<
arith_expr -> term + arith_expr
2394
<
arith_expr -> term + arith_expr
2394
==
arith_expr -> term + arith_expr
2394
!=
arith_expr -> term + arith_expr
2394
for
arith_expr -> term + arith_expr
2394
or
arith_expr -> term + arith_expr
2394
and
arith_expr -> term + arith_expr
2395
<=
arith_expr -> term - arith_expr
2395
if
arith_expr -> term - arith_expr
2395
not
arith_expr -> term - arith_expr
2395
|
arith_expr -> term - arith_expr
2395
>>
arith_expr -> term - arith_expr
2395
>=
arith_expr -> term - arith_expr
2395
<<
arith_expr -> term - arith_expr
2395
is
arith_expr -> term - arith_expr
2395
!=
arith_expr -> term - arith_expr
2395
in
arith_expr -> term - arith_expr
2395
<
arith_expr -> term - arith_expr
2395
]
arith_expr -> term - arith_expr
2395
or
arith_expr -> term - arith_expr
2395
for
arith_expr -> term - arith_expr
2395
==
arith_expr -> term - arith_expr
2395
and
arith_expr -> term - arith_expr
2395
&
arith_expr -> term - arith_expr
2395
^
arith_expr -> term - arith_expr
2395
>
arith_expr -> term - arith_expr
2396
|
term -> factor * term
2396
-
term -> factor * term
2396
in
term -> factor * term
2396
and
term -> factor * term
2396
<<
term -> factor * term
2396
>=
term -> factor * term
2396
if
term -> factor * term
2396
]
term -> factor * term
2396
or
term -> factor * term
2396
<=
term -> factor * term
2396
is
term -> factor * term
2396
^
term -> factor * term
2396
!=
term -> factor * term
2396
==
term -> factor * term
2396
&
term -> factor * term
2396
>
term -> factor * term
2396
not
term -> factor * term
2396
for
term -> factor * term
2396
<
term -> factor * term
2396
+
term -> factor * term
2396
>>
term -> factor * term
2397
!=
term -> factor % term
2397
>>
term -> factor % term
2397
for
term -> factor % term
2397
==
term -> factor % term
2397
>=
term -> factor % term
2397
^
term -> factor % term
2397
not
term -> factor % term
2397
or
term -> factor % term
2397
if
term -> factor % term
2397
<=
term -> factor % term
2397
<
term -> factor % term
2397
is
term -> factor % term
2397
-
term -> factor % term
2397
in
term -> factor % term
2397
]
term -> factor % term
2397
>
term -> factor % term
2397
<<
term -> factor % term
2397
and
term -> factor % term
2397
|
term -> factor % term
2397
+
term -> factor % term
2397
&
term -> factor % term
2398
is
term -> factor // term
2398
if
term -> factor // term
2398
>
term -> factor // term
2398
==
term -> factor // term
2398
+
term -> factor // term
2398
^
term -> factor // term
2398
]
term -> factor // term
2398
-
term -> factor // term
2398
in
term -> factor // term
2398
>>
term -> factor // term
2398
|
term -> factor // term
2398
<<
term -> factor // term
2398
!=
term -> factor // term
2398
&
term -> factor // term
2398
not
term -> factor // term
2398
<=
term -> factor // term
2398
<
term -> factor // term
2398
for
term -> factor // term
2398
and
term -> factor // term
2398
>=
term -> factor // term
2398
or
term -> factor // term
2399
>=
term -> factor / term
2399
!=
term -> factor / term
2399
]
term -> factor / term
2399
not
term -> factor / term
2399
^
term -> factor / term
2399
in
term -> factor / term
2399
and
term -> factor / term
2399
<<
term -> factor / term
2399
for
term -> factor / term
2399
+
term -> factor / term
2399
>
term -> factor / term
2399
|
term -> factor / term
2399
or
term -> factor / term
2399
if
term -> factor / term
2399
>>
term -> factor / term
2399
<
term -> factor / term
2399
&
term -> factor / term
2399
-
term -> factor / term
2399
is
term -> factor / term
2399
==
term -> factor / term
2399
<=
term -> factor / term
2400
-
term -> factor @ term
2400
&
term -> factor @ term
2400
^
term -> factor @ term
2400
]
term -> factor @ term
2400
<
term -> factor @ term
2400
!=
term -> factor @ term
2400
<<
term -> factor @ term
2400
is
term -> factor @ term
2400
for
term -> factor @ term
2400
<=
term -> factor @ term
2400
and
term -> factor @ term
2400
+
term -> factor @ term
2400
>
term -> factor @ term
2400
if
term -> factor @ term
2400
not
term -> factor @ term
2400
>>
term -> factor @ term
2400
>=
term -> factor @ term
2400
|
term -> factor @ term
2400
in
term -> factor @ term
2400
==
term -> factor @ term
2400
or
term -> factor @ term
2401
if
and_expr -> shift_expr & and_expr
2401
!=
and_expr -> shift_expr & and_expr
2401
<=
and_expr -> shift_expr & and_expr
2401
not
and_expr -> shift_expr & and_expr
2401
^
and_expr -> shift_expr & and_expr
2401
|
and_expr -> shift_expr & and_expr
2401
or
and_expr -> shift_expr & and_expr
2401
]
and_expr -> shift_expr & and_expr
2401
in
and_expr -> shift_expr & and_expr
2401
>
and_expr -> shift_expr & and_expr
2401
for
and_expr -> shift_expr & and_expr
2401
and
and_expr -> shift_expr & and_expr
2401
==
and_expr -> shift_expr & and_expr
2401
<
and_expr -> shift_expr & and_expr
2401
is
and_expr -> shift_expr & and_expr
2401
>=
and_expr -> shift_expr & and_expr
2402
for
shift_expr -> arith_expr << shift_expr
2402
^
shift_expr -> arith_expr << shift_expr
2402
|
shift_expr -> arith_expr << shift_expr
2402
&
shift_expr -> arith_expr << shift_expr
2402
and
shift_expr -> arith_expr << shift_expr
2402
is
shift_expr -> arith_expr << shift_expr
2402
in
shift_expr -> arith_expr << shift_expr
2402
<=
shift_expr -> arith_expr << shift_expr
2402
]
shift_expr -> arith_expr << shift_expr
2402
not
shift_expr -> arith_expr << shift_expr
2402
==
shift_expr -> arith_expr << shift_expr
2402
>=
shift_expr -> arith_expr << shift_expr
2402
if
shift_expr -> arith_expr << shift_expr
2402
<
shift_expr -> arith_expr << shift_expr
2402
>
shift_expr -> arith_expr << shift_expr
2402
or
shift_expr -> arith_expr << shift_expr
2402
!=
shift_expr -> arith_expr << shift_expr
2403
or
shift_expr -> arith_expr >> shift_expr
2403
and
shift_expr -> arith_expr >> shift_expr
2403
>=
shift_expr -> arith_expr >> shift_expr
2403
for
shift_expr -> arith_expr >> shift_expr
2403
not
shift_expr -> arith_expr >> shift_expr
2403
^
shift_expr -> arith_expr >> shift_expr
2403
is
shift_expr -> arith_expr >> shift_expr
2403
if
shift_expr -> arith_expr >> shift_expr
2403
in
shift_expr -> arith_expr >> shift_expr
2403
<=
shift_expr -> arith_expr >> shift_expr
2403
]
shift_expr -> arith_expr >> shift_expr
2403
==
shift_expr -> arith_expr >> shift_expr
2403
<
shift_expr -> arith_expr >> shift_expr
2403
!=
shift_expr -> arith_expr >> shift_expr
2403
|
shift_expr -> arith_expr >> shift_expr
2403
>
shift_expr -> arith_expr >> shift_expr
2403
&
shift_expr -> arith_expr >> shift_expr
2404
and
atom -> [ test_list_comp ]
2404
<=
atom -> [ test_list_comp ]
2404
**
atom -> [ test_list_comp ]
2404
^
atom -> [ test_list_comp ]
2404
[
atom -> [ test_list_comp ]
2404
!=
atom -> [ test_list_comp ]
2404
<
atom -> [ test_list_comp ]
2404
/
atom -> [ test_list_comp ]
2404
-
atom -> [ test_list_comp ]
2404
>=
atom -> [ test_list_comp ]
2404
if
atom -> [ test_list_comp ]
2404
]
atom -> [ test_list_comp ]
2404
%
atom -> [ test_list_comp ]
2404
is
atom -> [ test_list_comp ]
2404
+
atom -> [ test_list_comp ]
2404
&
atom -> [ test_list_comp ]
2404
@
atom -> [ test_list_comp ]
2404
or
atom -> [ test_list_comp ]
2404
in
atom -> [ test_list_comp ]
2404
==
atom -> [ test_list_comp ]
2404
not
atom -> [ test_list_comp ]
2404
.
atom -> [ test_list_comp ]
2404
|
atom -> [ test_list_comp ]
2404
>
atom -> [ test_list_comp ]
2404
<<
atom -> [ test_list_comp ]
2404
//
atom -> [ test_list_comp ]
2404
(
atom -> [ test_list_comp ]
2404
for
atom -> [ test_list_comp ]
2404
*
atom -> [ test_list_comp ]
2404
>>
atom -> [ test_list_comp ]
2405
if
comparison -> expr comp_op comparison
2405
or
comparison -> expr comp_op comparison
2405
and
comparison -> expr comp_op comparison
2405
for
comparison -> expr comp_op comparison
2405
]
comparison -> expr comp_op comparison
2406
>
expr -> xor_expr | expr
2406
]
expr -> xor_expr | expr
2406
is
expr -> xor_expr | expr
2406
if
expr -> xor_expr | expr
2406
<
expr -> xor_expr | expr
2406
>=
expr -> xor_expr | expr
2406
or
expr -> xor_expr | expr
2406
and
expr -> xor_expr | expr
2406
in
expr -> xor_expr | expr
2406
!=
expr -> xor_expr | expr
2406
<=
expr -> xor_expr | expr
2406
==
expr -> xor_expr | expr
2406
for
expr -> xor_expr | expr
2406
not
expr -> xor_expr | expr
2407
]
2514
2408
)
2515
2409
<
trailer -> ( )
2409
.
trailer -> ( )
2409
*
trailer -> ( )
2409
or
trailer -> ( )
2409
is
trailer -> ( )
2409
/
trailer -> ( )
2409
+
trailer -> ( )
2409
@
trailer -> ( )
2409
>
trailer -> ( )
2409
//
trailer -> ( )
2409
|
trailer -> ( )
2409
!=
trailer -> ( )
2409
&
trailer -> ( )
2409
^
trailer -> ( )
2409
<=
trailer -> ( )
2409
]
trailer -> ( )
2409
%
trailer -> ( )
2409
>>
trailer -> ( )
2409
**
trailer -> ( )
2409
and
trailer -> ( )
2409
(
trailer -> ( )
2409
for
trailer -> ( )
2409
==
trailer -> ( )
2409
if
trailer -> ( )
2409
[
trailer -> ( )
2409
<<
trailer -> ( )
2409
in
trailer -> ( )
2409
-
trailer -> ( )
2409
not
trailer -> ( )
2409
>=
trailer -> ( )
2410
|
trailer -> . NAME
2410
@
trailer -> . NAME
2410
^
trailer -> . NAME
2410
>
trailer -> . NAME
2410
+
trailer -> . NAME
2410
.
trailer -> . NAME
2410
!=
trailer -> . NAME
2410
<<
trailer -> . NAME
2410
<=
trailer -> . NAME
2410
[
trailer -> . NAME
2410
*
trailer -> . NAME
2410
(
trailer -> . NAME
2410
//
trailer -> . NAME
2410
**
trailer -> . NAME
2410
-
trailer -> . NAME
2410
]
trailer -> . NAME
2410
in
trailer -> . NAME
2410
>=
trailer -> . NAME
2410
==
trailer -> . NAME
2410
or
trailer -> . NAME
2410
and
trailer -> . NAME
2410
%
trailer -> . NAME
2410
is
trailer -> . NAME
2410
for
trailer -> . NAME
2410
<
trailer -> . NAME
2410
not
trailer -> . NAME
2410
/
trailer -> . NAME
2410
if
trailer -> . NAME
2410
&
trailer -> . NAME
2410
>>
trailer -> . NAME
2411
&
trailer_expr -> trailer trailer_expr
2411
not
trailer_expr -> trailer trailer_expr
2411
and
trailer_expr -> trailer trailer_expr
2411
+
trailer_expr -> trailer trailer_expr
2411
==
trailer_expr -> trailer trailer_expr
2411
**
trailer_expr -> trailer trailer_expr
2411
/
trailer_expr -> trailer trailer_expr
2411
^
trailer_expr -> trailer trailer_expr
2411
>
trailer_expr -> trailer trailer_expr
2411
*
trailer_expr -> trailer trailer_expr
2411
//
trailer_expr -> trailer trailer_expr
2411
>>
trailer_expr -> trailer trailer_expr
2411
<<
trailer_expr -> trailer trailer_expr
2411
>=
trailer_expr -> trailer trailer_expr
2411
<=
trailer_expr -> trailer trailer_expr
2411
-
trailer_expr -> trailer trailer_expr
2411
is
trailer_expr -> trailer trailer_expr
2411
]
trailer_expr -> trailer trailer_expr
2411
in
trailer_expr -> trailer trailer_expr
2411
<
trailer_expr -> trailer trailer_expr
2411
|
trailer_expr -> trailer trailer_expr
2411
if
trailer_expr -> trailer trailer_expr
2411
%
trailer_expr -> trailer trailer_expr
2411
for
trailer_expr -> trailer trailer_expr
2411
@
trailer_expr -> trailer trailer_expr
2411
!=
trailer_expr -> trailer trailer_expr
2411
or
trailer_expr -> trailer trailer_expr
2412
if
atom -> ( test_list_comp )
2412
or
atom -> ( test_list_comp )
2412
*
atom -> ( test_list_comp )
2412
|
atom -> ( test_list_comp )
2412
>>
atom -> ( test_list_comp )
2412
%
atom -> ( test_list_comp )
2412
not
atom -> ( test_list_comp )
2412
//
atom -> ( test_list_comp )
2412
for
atom -> ( test_list_comp )
2412
+
atom -> ( test_list_comp )
2412
and
atom -> ( test_list_comp )
2412
>
atom -> ( test_list_comp )
2412
[
atom -> ( test_list_comp )
2412
^
atom -> ( test_list_comp )
2412
!=
atom -> ( test_list_comp )
2412
<<
atom -> ( test_list_comp )
2412
**
atom -> ( test_list_comp )
2412
is
atom -> ( test_list_comp )
2412
<=
atom -> ( test_list_comp )
2412
-
atom -> ( test_list_comp )
2412
&
atom -> ( test_list_comp )
2412
(
atom -> ( test_list_comp )
2412
in
atom -> ( test_list_comp )
2412
@
atom -> ( test_list_comp )
2412
.
atom -> ( test_list_comp )
2412
<
atom -> ( test_list_comp )
2412
/
atom -> ( test_list_comp )
2412
==
atom -> ( test_list_comp )
2412
>=
atom -> ( test_list_comp )
2412
]
atom -> ( test_list_comp )
2413
or
and_test -> not_test and and_test
2413
]
and_test -> not_test and and_test
2413
for
and_test -> not_test and and_test
2413
if
and_test -> not_test and and_test
2414
:
2516
2414
vfpdef
212
2414
varargslist
2517
2414
NAME
211
2415
]
test_nocond -> lambdef_nocond
2415
for
test_nocond -> lambdef_nocond
2415
if
test_nocond -> lambdef_nocond
2416
if
test_nocond -> or_test
2416
]
test_nocond -> or_test
2416
for
test_nocond -> or_test
2417
comp_if
2219
2417
]
comp_iter -> 
2417
comp_iter
2518
2417
if
2220
2417
comp_for
2218
2417
for
455
2418
)
comp_iter -> comp_for
2418
,
comp_iter -> comp_for
2419
)
comp_for -> for expr_list in or_test comp_iter
2419
,
comp_for -> for expr_list in or_test comp_iter
2420
,
comp_iter -> comp_if
2420
)
comp_iter -> comp_if
2421
and_test
217
2421
atom_expr
218
2421
and_expr
219
2421
term
220
2421
factor
221
2421
shift_expr
222
2421
arith_expr
223
2421
NUMBER
224
2421
NAME
225
2421
not
226
2421
[
227
2421
{
228
2421
expr
229
2421
not_test
231
2421
False
232
2421
xor_expr
234
2421
STRING
235
2421
atom
237
2421
+
238
2421
True
239
2421
-
240
2421
(
241
2421
None
242
2421
comparison
243
2421
power
244
2421
or_test
2519
2421
~
245
2421
lambdef_nocond
2520
2421
test_nocond
2521
2421
lambda
2522
2422
,
test -> or_test if or_test else test
2422
)
test -> or_test if or_test else test
2423
not
elif_clause -> 
2423
elif_clause
2523
2423
elif
1556
2423
continue
elif_clause -> 
2423
nonlocal
elif_clause -> 
2423
else
elif_clause -> 
2423
[
elif_clause -> 
2423
-
elif_clause -> 
2423
break
elif_clause -> 
2423
pass
elif_clause -> 
2423
{
elif_clause -> 
2423
with
elif_clause -> 
2423
None
elif_clause -> 
2423
lambda
elif_clause -> 
2423
try
elif_clause -> 
2423
return
elif_clause -> 
2423
raise
elif_clause -> 
2423
~
elif_clause -> 
2423
while
elif_clause -> 
2423
(
elif_clause -> 
2423
NUMBER
elif_clause -> 
2423
+
elif_clause -> 
2423
del
elif_clause -> 
2423
$
elif_clause -> 
2423
NAME
elif_clause -> 
2423
assert
elif_clause -> 
2423
class
elif_clause -> 
2423
@
elif_clause -> 
2423
STRING
elif_clause -> 
2423
global
elif_clause -> 
2423
True
elif_clause -> 
2423
for
elif_clause -> 
2423
def
elif_clause -> 
2423
yield
elif_clause -> 
2423
False
elif_clause -> 
2423
NEWLINE
elif_clause -> 
2423
if
elif_clause -> 
2424
break
if_stmt -> if test : suite elif_clause else : suite
2424
continue
if_stmt -> if test : suite elif_clause else : suite
2424
None
if_stmt -> if test : suite elif_clause else : suite
2424
assert
if_stmt -> if test : suite elif_clause else : suite
2424
NEWLINE
if_stmt -> if test : suite elif_clause else : suite
2424
nonlocal
if_stmt -> if test : suite elif_clause else : suite
2424
-
if_stmt -> if test : suite elif_clause else : suite
2424
if
if_stmt -> if test : suite elif_clause else : suite
2424
return
if_stmt -> if test : suite elif_clause else : suite
2424
True
if_stmt -> if test : suite elif_clause else : suite
2424
try
if_stmt -> if test : suite elif_clause else : suite
2424
(
if_stmt -> if test : suite elif_clause else : suite
2424
+
if_stmt -> if test : suite elif_clause else : suite
2424
not
if_stmt -> if test : suite elif_clause else : suite
2424
$
if_stmt -> if test : suite elif_clause else : suite
2424
NAME
if_stmt -> if test : suite elif_clause else : suite
2424
while
if_stmt -> if test : suite elif_clause else : suite
2424
pass
if_stmt -> if test : suite elif_clause else : suite
2424
@
if_stmt -> if test : suite elif_clause else : suite
2424
NUMBER
if_stmt -> if test : suite elif_clause else : suite
2424
yield
if_stmt -> if test : suite elif_clause else : suite
2424
{
if_stmt -> if test : suite elif_clause else : suite
2424
with
if_stmt -> if test : suite elif_clause else : suite
2424
~
if_stmt -> if test : suite elif_clause else : suite
2424
del
if_stmt -> if test : suite elif_clause else : suite
2424
STRING
if_stmt -> if test : suite elif_clause else : suite
2424
False
if_stmt -> if test : suite elif_clause else : suite
2424
lambda
if_stmt -> if test : suite elif_clause else : suite
2424
class
if_stmt -> if test : suite elif_clause else : suite
2424
raise
if_stmt -> if test : suite elif_clause else : suite
2424
for
if_stmt -> if test : suite elif_clause else : suite
2424
global
if_stmt -> if test : suite elif_clause else : suite
2424
[
if_stmt -> if test : suite elif_clause else : suite
2424
def
if_stmt -> if test : suite elif_clause else : suite
2425
lambda
simple_stmt -> small_stmt NEWLINE
2425
yield
simple_stmt -> small_stmt NEWLINE
2425
NEWLINE
simple_stmt -> small_stmt NEWLINE
2425
NAME
simple_stmt -> small_stmt NEWLINE
2425
STRING
simple_stmt -> small_stmt NEWLINE
2425
pass
simple_stmt -> small_stmt NEWLINE
2425
None
simple_stmt -> small_stmt NEWLINE
2425
(
simple_stmt -> small_stmt NEWLINE
2425
assert
simple_stmt -> small_stmt NEWLINE
2425
@
simple_stmt -> small_stmt NEWLINE
2425
def
simple_stmt -> small_stmt NEWLINE
2425
if
simple_stmt -> small_stmt NEWLINE
2425
+
simple_stmt -> small_stmt NEWLINE
2425
continue
simple_stmt -> small_stmt NEWLINE
2425
not
simple_stmt -> small_stmt NEWLINE
2425
try
simple_stmt -> small_stmt NEWLINE
2425
False
simple_stmt -> small_stmt NEWLINE
2425
with
simple_stmt -> small_stmt NEWLINE
2425
global
simple_stmt -> small_stmt NEWLINE
2425
return
simple_stmt -> small_stmt NEWLINE
2425
raise
simple_stmt -> small_stmt NEWLINE
2425
True
simple_stmt -> small_stmt NEWLINE
2425
-
simple_stmt -> small_stmt NEWLINE
2425
del
simple_stmt -> small_stmt NEWLINE
2425
NUMBER
simple_stmt -> small_stmt NEWLINE
2425
{
simple_stmt -> small_stmt NEWLINE
2425
for
simple_stmt -> small_stmt NEWLINE
2425
class
simple_stmt -> small_stmt NEWLINE
2425
break
simple_stmt -> small_stmt NEWLINE
2425
[
simple_stmt -> small_stmt NEWLINE
2425
nonlocal
simple_stmt -> small_stmt NEWLINE
2425
while
simple_stmt -> small_stmt NEWLINE
2425
$
simple_stmt -> small_stmt NEWLINE
2425
~
simple_stmt -> small_stmt NEWLINE
2425
finally
simple_stmt -> small_stmt NEWLINE
2426
:
2524
2427
while
1591
2427
decorators
1592
2427
[
3
2427
small_stmt
1593
2427
stmt_list
2525
2427
{
5
2427
atom_expr
6
2427
expr
7
2427
NUMBER
8
2427
True
9
2427
factor
10
2427
class
1594
2427
shift_expr
12
2427
atom
13
2427
xor_expr
14
2427
term
15
2427
if
1595
2427
try
1596
2427
with
1597
2427
decorated
1598
2427
and_test
20
2427
and_expr
21
2427
for_stmt
1599
2427
False
23
2427
def
1600
2427
or_test
25
2427
with_stmt
1601
2427
funcdef
1602
2427
lambda
28
2427
try_stmt
1603
2427
None
29
2427
+
30
2427
if_stmt
1604
2427
arith_expr
32
2427
test
33
2427
(
34
2427
compound_stmt
1605
2427
-
36
2427
NAME
37
2427
while_stmt
1606
2427
not_test
40
2427
lambdef
41
2427
for
1607
2427
STRING
43
2427
~
44
2427
simple_stmt
1608
2427
classdef
1609
2427
power
47
2427
comparison
48
2427
continue
49
2427
expr_stmt
50
2427
not
51
2427
del_stmt
52
2427
yield_stmt
53
2427
@
54
2427
decorator
55
2427
yield
56
2427
assert_stmt
57
2427
break_stmt
58
2427
return
59
2427
pass
60
2427
continue_stmt
61
2427
test_list
62
2427
break
63
2427
del
64
2427
pass_stmt
65
2427
nonlocal
66
2427
assert
67
2427
global_stmt
68
2427
raise
69
2427
stmt
1611
2427
raise_stmt
70
2427
global
71
2427
nonlocal_stmt
72
2427
return_stmt
75
2427
flow_stmt
76
2428
atom_expr
1560
2428
and_expr
1561
2428
term
1562
2428
factor
1563
2428
shift_expr
1564
2428
arith_expr
1565
2428
NUMBER
1566
2428
or_test
1567
2428
NAME
1568
2428
[
1569
2428
{
1570
2428
expr
1571
2428
False
1572
2428
xor_expr
1573
2428
STRING
1574
2428
+
1576
2428
True
1577
2428
(
1578
2428
None
1579
2428
-
1580
2428
atom
1582
2428
power
1583
2428
~
1584
2428
lambda
1585
2428
not_test
1586
2428
and_test
1587
2428
not
1588
2428
comparison
1589
2428
lambdef
1590
2428
test
2526
2429
atom_expr
6
2429
factor
10
2429
[
3
2429
suite
2527
2429
term
15
2429
STRING
43
2429
arith_expr
32
2429
NUMBER
8
2429
small_stmt
1972
2429
NAME
37
2429
{
5
2429
expr
7
2429
not
51
2429
True
9
2429
shift_expr
12
2429
atom
13
2429
xor_expr
14
2429
NEWLINE
1973
2429
(
34
2429
None
29
2429
and_test
20
2429
and_expr
21
2429
False
23
2429
or_test
25
2429
test
33
2429
lambda
28
2429
+
30
2429
simple_stmt
1974
2429
nonlocal
66
2429
-
36
2429
not_test
40
2429
power
47
2429
lambdef
41
2429
~
44
2429
comparison
48
2429
assert
67
2429
global_stmt
68
2429
continue
49
2429
expr_stmt
50
2429
test_list
62
2429
raise
69
2429
del_stmt
52
2429
yield_stmt
53
2429
raise_stmt
70
2429
yield
56
2429
assert_stmt
57
2429
global
71
2429
nonlocal_stmt
72
2429
break_stmt
58
2429
return_stmt
75
2429
return
59
2429
pass
60
2429
continue_stmt
61
2429
flow_stmt
76
2429
break
63
2429
del
64
2429
pass_stmt
65
2430
else
except_clause -> except test : suite maybe_except_clause
2430
global
except_clause -> except test : suite maybe_except_clause
2430
[
except_clause -> except test : suite maybe_except_clause
2430
-
except_clause -> except test : suite maybe_except_clause
2430
{
except_clause -> except test : suite maybe_except_clause
2430
assert
except_clause -> except test : suite maybe_except_clause
2430
raise
except_clause -> except test : suite maybe_except_clause
2430
True
except_clause -> except test : suite maybe_except_clause
2430
None
except_clause -> except test : suite maybe_except_clause
2430
NEWLINE
except_clause -> except test : suite maybe_except_clause
2430
continue
except_clause -> except test : suite maybe_except_clause
2430
@
except_clause -> except test : suite maybe_except_clause
2430
+
except_clause -> except test : suite maybe_except_clause
2430
pass
except_clause -> except test : suite maybe_except_clause
2430
def
except_clause -> except test : suite maybe_except_clause
2430
finally
except_clause -> except test : suite maybe_except_clause
2430
NAME
except_clause -> except test : suite maybe_except_clause
2430
break
except_clause -> except test : suite maybe_except_clause
2430
False
except_clause -> except test : suite maybe_except_clause
2430
with
except_clause -> except test : suite maybe_except_clause
2430
for
except_clause -> except test : suite maybe_except_clause
2430
return
except_clause -> except test : suite maybe_except_clause
2430
del
except_clause -> except test : suite maybe_except_clause
2430
not
except_clause -> except test : suite maybe_except_clause
2430
while
except_clause -> except test : suite maybe_except_clause
2430
if
except_clause -> except test : suite maybe_except_clause
2430
$
except_clause -> except test : suite maybe_except_clause
2430
~
except_clause -> except test : suite maybe_except_clause
2430
NUMBER
except_clause -> except test : suite maybe_except_clause
2430
try
except_clause -> except test : suite maybe_except_clause
2430
STRING
except_clause -> except test : suite maybe_except_clause
2430
lambda
except_clause -> except test : suite maybe_except_clause
2430
(
except_clause -> except test : suite maybe_except_clause
2430
nonlocal
except_clause -> except test : suite maybe_except_clause
2430
yield
except_clause -> except test : suite maybe_except_clause
2430
class
except_clause -> except test : suite maybe_except_clause
2431
DEDENT
2528
2432
*
trailer -> [ subscriptlist ]
2432
not
trailer -> [ subscriptlist ]
2432
(
trailer -> [ subscriptlist ]
2432
<<
trailer -> [ subscriptlist ]
2432
:
trailer -> [ subscriptlist ]
2432
>>
trailer -> [ subscriptlist ]
2432
//
trailer -> [ subscriptlist ]
2432
or
trailer -> [ subscriptlist ]
2432
is
trailer -> [ subscriptlist ]
2432
as
trailer -> [ subscriptlist ]
2432
[
trailer -> [ subscriptlist ]
2432
|
trailer -> [ subscriptlist ]
2432
%
trailer -> [ subscriptlist ]
2432
<=
trailer -> [ subscriptlist ]
2432
and
trailer -> [ subscriptlist ]
2432
**
trailer -> [ subscriptlist ]
2432
if
trailer -> [ subscriptlist ]
2432
-
trailer -> [ subscriptlist ]
2432
in
trailer -> [ subscriptlist ]
2432
^
trailer -> [ subscriptlist ]
2432
+
trailer -> [ subscriptlist ]
2432
>=
trailer -> [ subscriptlist ]
2432
.
trailer -> [ subscriptlist ]
2432
&
trailer -> [ subscriptlist ]
2432
/
trailer -> [ subscriptlist ]
2432
!=
trailer -> [ subscriptlist ]
2432
<
trailer -> [ subscriptlist ]
2432
==
trailer -> [ subscriptlist ]
2432
>
trailer -> [ subscriptlist ]
2432
@
trailer -> [ subscriptlist ]
2433
%
trailer -> ( arglist )
2433
and
trailer -> ( arglist )
2433
+
trailer -> ( arglist )
2433
or
trailer -> ( arglist )
2433
not
trailer -> ( arglist )
2433
-
trailer -> ( arglist )
2433
@
trailer -> ( arglist )
2433
[
trailer -> ( arglist )
2433
>>
trailer -> ( arglist )
2433
<=
trailer -> ( arglist )
2433
if
trailer -> ( arglist )
2433
//
trailer -> ( arglist )
2433
==
trailer -> ( arglist )
2433
<<
trailer -> ( arglist )
2433
*
trailer -> ( arglist )
2433
<
trailer -> ( arglist )
2433
**
trailer -> ( arglist )
2433
is
trailer -> ( arglist )
2433
>
trailer -> ( arglist )
2433
!=
trailer -> ( arglist )
2433
/
trailer -> ( arglist )
2433
in
trailer -> ( arglist )
2433
.
trailer -> ( arglist )
2433
|
trailer -> ( arglist )
2433
as
trailer -> ( arglist )
2433
>=
trailer -> ( arglist )
2433
&
trailer -> ( arglist )
2433
(
trailer -> ( arglist )
2433
^
trailer -> ( arglist )
2433
:
trailer -> ( arglist )
2434
:
lambdef -> lambda varargslist : test
2434
as
lambdef -> lambda varargslist : test
2435
def
while_stmt -> while test : suite
2435
assert
while_stmt -> while test : suite
2435
else
2529
2435
not
while_stmt -> while test : suite
2435
break
while_stmt -> while test : suite
2435
True
while_stmt -> while test : suite
2435
+
while_stmt -> while test : suite
2435
~
while_stmt -> while test : suite
2435
nonlocal
while_stmt -> while test : suite
2435
{
while_stmt -> while test : suite
2435
False
while_stmt -> while test : suite
2435
while
while_stmt -> while test : suite
2435
lambda
while_stmt -> while test : suite
2435
STRING
while_stmt -> while test : suite
2435
try
while_stmt -> while test : suite
2435
del
while_stmt -> while test : suite
2435
return
while_stmt -> while test : suite
2435
raise
while_stmt -> while test : suite
2435
NUMBER
while_stmt -> while test : suite
2435
None
while_stmt -> while test : suite
2435
NAME
while_stmt -> while test : suite
2435
yield
while_stmt -> while test : suite
2435
if
while_stmt -> while test : suite
2435
[
while_stmt -> while test : suite
2435
global
while_stmt -> while test : suite
2435
pass
while_stmt -> while test : suite
2435
class
while_stmt -> while test : suite
2435
for
while_stmt -> while test : suite
2435
continue
while_stmt -> while test : suite
2435
-
while_stmt -> while test : suite
2435
with
while_stmt -> while test : suite
2435
DEDENT
while_stmt -> while test : suite
2435
@
while_stmt -> while test : suite
2435
(
while_stmt -> while test : suite
2436
NEWLINE
2530
2437
INDENT
2531
2438
continue
suite -> simple_stmt
2438
not
suite -> simple_stmt
2438
yield
suite -> simple_stmt
2438
for
suite -> simple_stmt
2438
False
suite -> simple_stmt
2438
NUMBER
suite -> simple_stmt
2438
with
suite -> simple_stmt
2438
lambda
suite -> simple_stmt
2438
{
suite -> simple_stmt
2438
None
suite -> simple_stmt
2438
DEDENT
suite -> simple_stmt
2438
(
suite -> simple_stmt
2438
while
suite -> simple_stmt
2438
if
suite -> simple_stmt
2438
try
suite -> simple_stmt
2438
NAME
suite -> simple_stmt
2438
else
suite -> simple_stmt
2438
True
suite -> simple_stmt
2438
global
suite -> simple_stmt
2438
STRING
suite -> simple_stmt
2438
pass
suite -> simple_stmt
2438
[
suite -> simple_stmt
2438
assert
suite -> simple_stmt
2438
raise
suite -> simple_stmt
2438
-
suite -> simple_stmt
2438
class
suite -> simple_stmt
2438
del
suite -> simple_stmt
2438
@
suite -> simple_stmt
2438
~
suite -> simple_stmt
2438
+
suite -> simple_stmt
2438
return
suite -> simple_stmt
2438
break
suite -> simple_stmt
2438
nonlocal
suite -> simple_stmt
2438
def
suite -> simple_stmt
2439
INDENT
2532
2440
continue
suite -> simple_stmt
2440
not
suite -> simple_stmt
2440
yield
suite -> simple_stmt
2440
for
suite -> simple_stmt
2440
False
suite -> simple_stmt
2440
NUMBER
suite -> simple_stmt
2440
with
suite -> simple_stmt
2440
lambda
suite -> simple_stmt
2440
{
suite -> simple_stmt
2440
None
suite -> simple_stmt
2440
DEDENT
suite -> simple_stmt
2440
(
suite -> simple_stmt
2440
while
suite -> simple_stmt
2440
if
suite -> simple_stmt
2440
try
suite -> simple_stmt
2440
NAME
suite -> simple_stmt
2440
True
suite -> simple_stmt
2440
global
suite -> simple_stmt
2440
STRING
suite -> simple_stmt
2440
pass
suite -> simple_stmt
2440
[
suite -> simple_stmt
2440
assert
suite -> simple_stmt
2440
raise
suite -> simple_stmt
2440
-
suite -> simple_stmt
2440
class
suite -> simple_stmt
2440
del
suite -> simple_stmt
2440
@
suite -> simple_stmt
2440
~
suite -> simple_stmt
2440
+
suite -> simple_stmt
2440
return
suite -> simple_stmt
2440
break
suite -> simple_stmt
2440
nonlocal
suite -> simple_stmt
2440
def
suite -> simple_stmt
2441
raise
classdef -> class NAME : suite
2441
while
classdef -> class NAME : suite
2441
True
classdef -> class NAME : suite
2441
try
classdef -> class NAME : suite
2441
lambda
classdef -> class NAME : suite
2441
break
classdef -> class NAME : suite
2441
[
classdef -> class NAME : suite
2441
DEDENT
classdef -> class NAME : suite
2441
assert
classdef -> class NAME : suite
2441
NAME
classdef -> class NAME : suite
2441
False
classdef -> class NAME : suite
2441
-
classdef -> class NAME : suite
2441
@
classdef -> class NAME : suite
2441
nonlocal
classdef -> class NAME : suite
2441
None
classdef -> class NAME : suite
2441
STRING
classdef -> class NAME : suite
2441
def
classdef -> class NAME : suite
2441
with
classdef -> class NAME : suite
2441
for
classdef -> class NAME : suite
2441
continue
classdef -> class NAME : suite
2441
~
classdef -> class NAME : suite
2441
yield
classdef -> class NAME : suite
2441
+
classdef -> class NAME : suite
2441
{
classdef -> class NAME : suite
2441
(
classdef -> class NAME : suite
2441
del
classdef -> class NAME : suite
2441
class
classdef -> class NAME : suite
2441
return
classdef -> class NAME : suite
2441
NUMBER
classdef -> class NAME : suite
2441
pass
classdef -> class NAME : suite
2441
global
classdef -> class NAME : suite
2441
if
classdef -> class NAME : suite
2441
not
classdef -> class NAME : suite
2442
)
2533
2443
:
2534
2444
NEWLINE
2535
2445
INDENT
2536
2446
continue
suite -> simple_stmt
2446
not
suite -> simple_stmt
2446
yield
suite -> simple_stmt
2446
for
suite -> simple_stmt
2446
False
suite -> simple_stmt
2446
NUMBER
suite -> simple_stmt
2446
with
suite -> simple_stmt
2446
lambda
suite -> simple_stmt
2446
{
suite -> simple_stmt
2446
None
suite -> simple_stmt
2446
DEDENT
suite -> simple_stmt
2446
(
suite -> simple_stmt
2446
while
suite -> simple_stmt
2446
if
suite -> simple_stmt
2446
try
suite -> simple_stmt
2446
NAME
suite -> simple_stmt
2446
else
suite -> simple_stmt
2446
True
suite -> simple_stmt
2446
elif
suite -> simple_stmt
2446
global
suite -> simple_stmt
2446
STRING
suite -> simple_stmt
2446
pass
suite -> simple_stmt
2446
[
suite -> simple_stmt
2446
assert
suite -> simple_stmt
2446
raise
suite -> simple_stmt
2446
-
suite -> simple_stmt
2446
class
suite -> simple_stmt
2446
del
suite -> simple_stmt
2446
@
suite -> simple_stmt
2446
~
suite -> simple_stmt
2446
+
suite -> simple_stmt
2446
return
suite -> simple_stmt
2446
break
suite -> simple_stmt
2446
nonlocal
suite -> simple_stmt
2446
def
suite -> simple_stmt
2447
elif
2537
2447
nonlocal
elif_clause -> 
2447
else
elif_clause -> 
2447
elif_clause
2538
2447
[
elif_clause -> 
2447
break
elif_clause -> 
2447
None
elif_clause -> 
2447
raise
elif_clause -> 
2447
~
elif_clause -> 
2447
while
elif_clause -> 
2447
NUMBER
elif_clause -> 
2447
assert
elif_clause -> 
2447
class
elif_clause -> 
2447
@
elif_clause -> 
2447
global
elif_clause -> 
2447
True
elif_clause -> 
2447
for
elif_clause -> 
2447
def
elif_clause -> 
2447
DEDENT
elif_clause -> 
2447
if
elif_clause -> 
2447
not
elif_clause -> 
2447
continue
elif_clause -> 
2447
-
elif_clause -> 
2447
pass
elif_clause -> 
2447
{
elif_clause -> 
2447
with
elif_clause -> 
2447
lambda
elif_clause -> 
2447
try
elif_clause -> 
2447
return
elif_clause -> 
2447
(
elif_clause -> 
2447
+
elif_clause -> 
2447
del
elif_clause -> 
2447
NAME
elif_clause -> 
2447
STRING
elif_clause -> 
2447
yield
elif_clause -> 
2447
False
elif_clause -> 
2448
else
2539
2448
assert
try_stmt -> try : suite except_clause
2448
global
try_stmt -> try : suite except_clause
2448
finally
2540
2448
yield
try_stmt -> try : suite except_clause
2448
return
try_stmt -> try : suite except_clause
2448
while
try_stmt -> try : suite except_clause
2448
def
try_stmt -> try : suite except_clause
2448
DEDENT
try_stmt -> try : suite except_clause
2448
lambda
try_stmt -> try : suite except_clause
2448
{
try_stmt -> try : suite except_clause
2448
raise
try_stmt -> try : suite except_clause
2448
nonlocal
try_stmt -> try : suite except_clause
2448
for
try_stmt -> try : suite except_clause
2448
try
try_stmt -> try : suite except_clause
2448
False
try_stmt -> try : suite except_clause
2448
-
try_stmt -> try : suite except_clause
2448
[
try_stmt -> try : suite except_clause
2448
~
try_stmt -> try : suite except_clause
2448
not
try_stmt -> try : suite except_clause
2448
continue
try_stmt -> try : suite except_clause
2448
del
try_stmt -> try : suite except_clause
2448
(
try_stmt -> try : suite except_clause
2448
NUMBER
try_stmt -> try : suite except_clause
2448
STRING
try_stmt -> try : suite except_clause
2448
with
try_stmt -> try : suite except_clause
2448
class
try_stmt -> try : suite except_clause
2448
None
try_stmt -> try : suite except_clause
2448
NAME
try_stmt -> try : suite except_clause
2448
if
try_stmt -> try : suite except_clause
2448
break
try_stmt -> try : suite except_clause
2448
@
try_stmt -> try : suite except_clause
2448
+
try_stmt -> try : suite except_clause
2448
pass
try_stmt -> try : suite except_clause
2448
True
try_stmt -> try : suite except_clause
2449
atom_expr
1560
2449
and_expr
1561
2449
term
1562
2449
factor
1563
2449
shift_expr
1564
2449
arith_expr
1565
2449
NUMBER
1566
2449
or_test
1567
2449
NAME
1568
2449
[
1569
2449
test
2541
2449
{
1570
2449
expr
1571
2449
False
1572
2449
xor_expr
1573
2449
STRING
1574
2449
+
1576
2449
True
1577
2449
(
1578
2449
None
1579
2449
-
1580
2449
:
2542
2449
atom
1582
2449
power
1583
2449
~
1584
2449
lambda
1585
2449
not_test
1586
2449
and_test
1587
2449
not
1588
2449
comparison
1589
2449
lambdef
1590
2450
with
with_stmt -> with with_items : suite
2450
lambda
with_stmt -> with with_items : suite
2450
assert
with_stmt -> with with_items : suite
2450
continue
with_stmt -> with with_items : suite
2450
None
with_stmt -> with with_items : suite
2450
-
with_stmt -> with with_items : suite
2450
break
with_stmt -> with with_items : suite
2450
nonlocal
with_stmt -> with with_items : suite
2450
NAME
with_stmt -> with with_items : suite
2450
for
with_stmt -> with with_items : suite
2450
NUMBER
with_stmt -> with with_items : suite
2450
(
with_stmt -> with with_items : suite
2450
STRING
with_stmt -> with with_items : suite
2450
while
with_stmt -> with with_items : suite
2450
False
with_stmt -> with with_items : suite
2450
try
with_stmt -> with with_items : suite
2450
del
with_stmt -> with with_items : suite
2450
yield
with_stmt -> with with_items : suite
2450
{
with_stmt -> with with_items : suite
2450
class
with_stmt -> with with_items : suite
2450
+
with_stmt -> with with_items : suite
2450
@
with_stmt -> with with_items : suite
2450
~
with_stmt -> with with_items : suite
2450
def
with_stmt -> with with_items : suite
2450
DEDENT
with_stmt -> with with_items : suite
2450
global
with_stmt -> with with_items : suite
2450
not
with_stmt -> with with_items : suite
2450
True
with_stmt -> with with_items : suite
2450
return
with_stmt -> with with_items : suite
2450
pass
with_stmt -> with with_items : suite
2450
if
with_stmt -> with with_items : suite
2450
raise
with_stmt -> with with_items : suite
2450
[
with_stmt -> with with_items : suite
2451
)
2543
2452
:
2544
2453
:
2545
2454
*
power -> atom_expr ** factor
2454
in
power -> atom_expr ** factor
2454
)
power -> atom_expr ** factor
2454
<
power -> atom_expr ** factor
2454
if
power -> atom_expr ** factor
2454
-
power -> atom_expr ** factor
2454
>>
power -> atom_expr ** factor
2454
<=
power -> atom_expr ** factor
2454
and
power -> atom_expr ** factor
2454
==
power -> atom_expr ** factor
2454
%
power -> atom_expr ** factor
2454
=
power -> atom_expr ** factor
2454
/
power -> atom_expr ** factor
2454
^
power -> atom_expr ** factor
2454
<<
power -> atom_expr ** factor
2454
,
power -> atom_expr ** factor
2454
>
power -> atom_expr ** factor
2454
//
power -> atom_expr ** factor
2454
is
power -> atom_expr ** factor
2454
@
power -> atom_expr ** factor
2454
+
power -> atom_expr ** factor
2454
|
power -> atom_expr ** factor
2454
!=
power -> atom_expr ** factor
2454
>=
power -> atom_expr ** factor
2454
or
power -> atom_expr ** factor
2454
&
power -> atom_expr ** factor
2454
not
power -> atom_expr ** factor
2455
and
xor_expr -> and_expr ^ xor_expr
2455
<
xor_expr -> and_expr ^ xor_expr
2455
>
xor_expr -> and_expr ^ xor_expr
2455
in
xor_expr -> and_expr ^ xor_expr
2455
|
xor_expr -> and_expr ^ xor_expr
2455
<=
xor_expr -> and_expr ^ xor_expr
2455
)
xor_expr -> and_expr ^ xor_expr
2455
!=
xor_expr -> and_expr ^ xor_expr
2455
=
xor_expr -> and_expr ^ xor_expr
2455
not
xor_expr -> and_expr ^ xor_expr
2455
or
xor_expr -> and_expr ^ xor_expr
2455
if
xor_expr -> and_expr ^ xor_expr
2455
is
xor_expr -> and_expr ^ xor_expr
2455
==
xor_expr -> and_expr ^ xor_expr
2455
,
xor_expr -> and_expr ^ xor_expr
2455
>=
xor_expr -> and_expr ^ xor_expr
2456
<=
arith_expr -> term + arith_expr
2456
&
arith_expr -> term + arith_expr
2456
>
arith_expr -> term + arith_expr
2456
,
arith_expr -> term + arith_expr
2456
)
arith_expr -> term + arith_expr
2456
>=
arith_expr -> term + arith_expr
2456
not
arith_expr -> term + arith_expr
2456
|
arith_expr -> term + arith_expr
2456
in
arith_expr -> term + arith_expr
2456
if
arith_expr -> term + arith_expr
2456
>>
arith_expr -> term + arith_expr
2456
is
arith_expr -> term + arith_expr
2456
^
arith_expr -> term + arith_expr
2456
<<
arith_expr -> term + arith_expr
2456
<
arith_expr -> term + arith_expr
2456
==
arith_expr -> term + arith_expr
2456
!=
arith_expr -> term + arith_expr
2456
or
arith_expr -> term + arith_expr
2456
=
arith_expr -> term + arith_expr
2456
and
arith_expr -> term + arith_expr
2457
<=
arith_expr -> term - arith_expr
2457
if
arith_expr -> term - arith_expr
2457
)
arith_expr -> term - arith_expr
2457
not
arith_expr -> term - arith_expr
2457
|
arith_expr -> term - arith_expr
2457
,
arith_expr -> term - arith_expr
2457
>>
arith_expr -> term - arith_expr
2457
>=
arith_expr -> term - arith_expr
2457
<<
arith_expr -> term - arith_expr
2457
=
arith_expr -> term - arith_expr
2457
is
arith_expr -> term - arith_expr
2457
!=
arith_expr -> term - arith_expr
2457
in
arith_expr -> term - arith_expr
2457
<
arith_expr -> term - arith_expr
2457
or
arith_expr -> term - arith_expr
2457
==
arith_expr -> term - arith_expr
2457
and
arith_expr -> term - arith_expr
2457
&
arith_expr -> term - arith_expr
2457
^
arith_expr -> term - arith_expr
2457
>
arith_expr -> term - arith_expr
2458
is
term -> factor // term
2458
if
term -> factor // term
2458
>
term -> factor // term
2458
)
term -> factor // term
2458
==
term -> factor // term
2458
+
term -> factor // term
2458
^
term -> factor // term
2458
-
term -> factor // term
2458
,
term -> factor // term
2458
in
term -> factor // term
2458
>>
term -> factor // term
2458
|
term -> factor // term
2458
=
term -> factor // term
2458
<<
term -> factor // term
2458
!=
term -> factor // term
2458
&
term -> factor // term
2458
not
term -> factor // term
2458
<=
term -> factor // term
2458
<
term -> factor // term
2458
and
term -> factor // term
2458
>=
term -> factor // term
2458
or
term -> factor // term
2459
>=
term -> factor / term
2459
!=
term -> factor / term
2459
)
term -> factor / term
2459
not
term -> factor / term
2459
^
term -> factor / term
2459
in
term -> factor / term
2459
and
term -> factor / term
2459
<<
term -> factor / term
2459
,
term -> factor / term
2459
+
term -> factor / term
2459
>
term -> factor / term
2459
|
term -> factor / term
2459
or
term -> factor / term
2459
if
term -> factor / term
2459
>>
term -> factor / term
2459
<
term -> factor / term
2459
&
term -> factor / term
2459
-
term -> factor / term
2459
is
term -> factor / term
2459
==
term -> factor / term
2459
<=
term -> factor / term
2459
=
term -> factor / term
2460
|
term -> factor * term
2460
-
term -> factor * term
2460
in
term -> factor * term
2460
and
term -> factor * term
2460
<<
term -> factor * term
2460
>=
term -> factor * term
2460
if
term -> factor * term
2460
or
term -> factor * term
2460
<=
term -> factor * term
2460
is
term -> factor * term
2460
^
term -> factor * term
2460
!=
term -> factor * term
2460
=
term -> factor * term
2460
==
term -> factor * term
2460
,
term -> factor * term
2460
&
term -> factor * term
2460
>
term -> factor * term
2460
not
term -> factor * term
2460
<
term -> factor * term
2460
+
term -> factor * term
2460
>>
term -> factor * term
2460
)
term -> factor * term
2461
!=
term -> factor % term
2461
>>
term -> factor % term
2461
)
term -> factor % term
2461
==
term -> factor % term
2461
>=
term -> factor % term
2461
,
term -> factor % term
2461
^
term -> factor % term
2461
not
term -> factor % term
2461
or
term -> factor % term
2461
if
term -> factor % term
2461
<=
term -> factor % term
2461
<
term -> factor % term
2461
is
term -> factor % term
2461
-
term -> factor % term
2461
=
term -> factor % term
2461
in
term -> factor % term
2461
>
term -> factor % term
2461
<<
term -> factor % term
2461
and
term -> factor % term
2461
|
term -> factor % term
2461
+
term -> factor % term
2461
&
term -> factor % term
2462
=
term -> factor @ term
2462
-
term -> factor @ term
2462
&
term -> factor @ term
2462
^
term -> factor @ term
2462
<
term -> factor @ term
2462
!=
term -> factor @ term
2462
<<
term -> factor @ term
2462
is
term -> factor @ term
2462
<=
term -> factor @ term
2462
and
term -> factor @ term
2462
+
term -> factor @ term
2462
,
term -> factor @ term
2462
>
term -> factor @ term
2462
if
term -> factor @ term
2462
not
term -> factor @ term
2462
>>
term -> factor @ term
2462
>=
term -> factor @ term
2462
|
term -> factor @ term
2462
in
term -> factor @ term
2462
==
term -> factor @ term
2462
or
term -> factor @ term
2462
)
term -> factor @ term
2463
if
and_expr -> shift_expr & and_expr
2463
!=
and_expr -> shift_expr & and_expr
2463
<=
and_expr -> shift_expr & and_expr
2463
not
and_expr -> shift_expr & and_expr
2463
,
and_expr -> shift_expr & and_expr
2463
)
and_expr -> shift_expr & and_expr
2463
=
and_expr -> shift_expr & and_expr
2463
^
and_expr -> shift_expr & and_expr
2463
|
and_expr -> shift_expr & and_expr
2463
or
and_expr -> shift_expr & and_expr
2463
in
and_expr -> shift_expr & and_expr
2463
>
and_expr -> shift_expr & and_expr
2463
and
and_expr -> shift_expr & and_expr
2463
==
and_expr -> shift_expr & and_expr
2463
<
and_expr -> shift_expr & and_expr
2463
is
and_expr -> shift_expr & and_expr
2463
>=
and_expr -> shift_expr & and_expr
2464
,
shift_expr -> arith_expr << shift_expr
2464
^
shift_expr -> arith_expr << shift_expr
2464
|
shift_expr -> arith_expr << shift_expr
2464
&
shift_expr -> arith_expr << shift_expr
2464
and
shift_expr -> arith_expr << shift_expr
2464
is
shift_expr -> arith_expr << shift_expr
2464
)
shift_expr -> arith_expr << shift_expr
2464
in
shift_expr -> arith_expr << shift_expr
2464
<=
shift_expr -> arith_expr << shift_expr
2464
<
shift_expr -> arith_expr << shift_expr
2464
not
shift_expr -> arith_expr << shift_expr
2464
==
shift_expr -> arith_expr << shift_expr
2464
>=
shift_expr -> arith_expr << shift_expr
2464
if
shift_expr -> arith_expr << shift_expr
2464
>
shift_expr -> arith_expr << shift_expr
2464
=
shift_expr -> arith_expr << shift_expr
2464
or
shift_expr -> arith_expr << shift_expr
2464
!=
shift_expr -> arith_expr << shift_expr
2465
or
shift_expr -> arith_expr >> shift_expr
2465
and
shift_expr -> arith_expr >> shift_expr
2465
>=
shift_expr -> arith_expr >> shift_expr
2465
not
shift_expr -> arith_expr >> shift_expr
2465
^
shift_expr -> arith_expr >> shift_expr
2465
is
shift_expr -> arith_expr >> shift_expr
2465
if
shift_expr -> arith_expr >> shift_expr
2465
in
shift_expr -> arith_expr >> shift_expr
2465
<=
shift_expr -> arith_expr >> shift_expr
2465
=
shift_expr -> arith_expr >> shift_expr
2465
==
shift_expr -> arith_expr >> shift_expr
2465
,
shift_expr -> arith_expr >> shift_expr
2465
<
shift_expr -> arith_expr >> shift_expr
2465
!=
shift_expr -> arith_expr >> shift_expr
2465
|
shift_expr -> arith_expr >> shift_expr
2465
>
shift_expr -> arith_expr >> shift_expr
2465
)
shift_expr -> arith_expr >> shift_expr
2465
&
shift_expr -> arith_expr >> shift_expr
2466
and
atom -> [ test_list_comp ]
2466
<=
atom -> [ test_list_comp ]
2466
**
atom -> [ test_list_comp ]
2466
^
atom -> [ test_list_comp ]
2466
[
atom -> [ test_list_comp ]
2466
,
atom -> [ test_list_comp ]
2466
!=
atom -> [ test_list_comp ]
2466
<
atom -> [ test_list_comp ]
2466
/
atom -> [ test_list_comp ]
2466
-
atom -> [ test_list_comp ]
2466
>=
atom -> [ test_list_comp ]
2466
if
atom -> [ test_list_comp ]
2466
%
atom -> [ test_list_comp ]
2466
is
atom -> [ test_list_comp ]
2466
+
atom -> [ test_list_comp ]
2466
)
atom -> [ test_list_comp ]
2466
&
atom -> [ test_list_comp ]
2466
@
atom -> [ test_list_comp ]
2466
or
atom -> [ test_list_comp ]
2466
in
atom -> [ test_list_comp ]
2466
==
atom -> [ test_list_comp ]
2466
not
atom -> [ test_list_comp ]
2466
.
atom -> [ test_list_comp ]
2466
|
atom -> [ test_list_comp ]
2466
=
atom -> [ test_list_comp ]
2466
>
atom -> [ test_list_comp ]
2466
<<
atom -> [ test_list_comp ]
2466
//
atom -> [ test_list_comp ]
2466
(
atom -> [ test_list_comp ]
2466
*
atom -> [ test_list_comp ]
2466
>>
atom -> [ test_list_comp ]
2467
if
comparison -> expr comp_op comparison
2467
or
comparison -> expr comp_op comparison
2467
and
comparison -> expr comp_op comparison
2467
)
comparison -> expr comp_op comparison
2467
=
comparison -> expr comp_op comparison
2467
,
comparison -> expr comp_op comparison
2468
,
and_test -> not_test and and_test
2468
or
and_test -> not_test and and_test
2468
=
and_test -> not_test and and_test
2468
if
and_test -> not_test and and_test
2468
)
and_test -> not_test and and_test
2469
>
expr -> xor_expr | expr
2469
is
expr -> xor_expr | expr
2469
<
expr -> xor_expr | expr
2469
if
expr -> xor_expr | expr
2469
>=
expr -> xor_expr | expr
2469
or
expr -> xor_expr | expr
2469
and
expr -> xor_expr | expr
2469
in
expr -> xor_expr | expr
2469
!=
expr -> xor_expr | expr
2469
)
expr -> xor_expr | expr
2469
<=
expr -> xor_expr | expr
2469
==
expr -> xor_expr | expr
2469
=
expr -> xor_expr | expr
2469
,
expr -> xor_expr | expr
2469
not
expr -> xor_expr | expr
2470
,
lambdef -> lambda : test
2470
)
lambdef -> lambda : test
2470
=
lambdef -> lambda : test
2471
atom_expr
2023
2471
and_expr
2024
2471
term
2025
2471
factor
2026
2471
shift_expr
2027
2471
arith_expr
2028
2471
NUMBER
2029
2471
NAME
2030
2471
not
2031
2471
[
2032
2471
{
2033
2471
expr
2034
2471
not_test
2035
2471
False
2036
2471
xor_expr
2037
2471
STRING
2038
2471
lambda
2039
2471
atom
2040
2471
+
2041
2471
True
2042
2471
-
2043
2471
and_test
2044
2471
or_test
2045
2471
(
2046
2471
None
2047
2471
power
2048
2471
~
2049
2471
comparison
2050
2471
test
2546
2471
lambdef
2051
2472
]
2547
2473
<
trailer -> ( )
2473
.
trailer -> ( )
2473
*
trailer -> ( )
2473
or
trailer -> ( )
2473
is
trailer -> ( )
2473
=
trailer -> ( )
2473
/
trailer -> ( )
2473
+
trailer -> ( )
2473
@
trailer -> ( )
2473
>
trailer -> ( )
2473
//
trailer -> ( )
2473
|
trailer -> ( )
2473
!=
trailer -> ( )
2473
&
trailer -> ( )
2473
^
trailer -> ( )
2473
)
trailer -> ( )
2473
<=
trailer -> ( )
2473
%
trailer -> ( )
2473
>>
trailer -> ( )
2473
**
trailer -> ( )
2473
and
trailer -> ( )
2473
(
trailer -> ( )
2473
,
trailer -> ( )
2473
==
trailer -> ( )
2473
if
trailer -> ( )
2473
[
trailer -> ( )
2473
<<
trailer -> ( )
2473
in
trailer -> ( )
2473
-
trailer -> ( )
2473
not
trailer -> ( )
2473
>=
trailer -> ( )
2474
)
2548
2475
|
trailer -> . NAME
2475
@
trailer -> . NAME
2475
^
trailer -> . NAME
2475
>
trailer -> . NAME
2475
+
trailer -> . NAME
2475
.
trailer -> . NAME
2475
!=
trailer -> . NAME
2475
<<
trailer -> . NAME
2475
<=
trailer -> . NAME
2475
[
trailer -> . NAME
2475
*
trailer -> . NAME
2475
(
trailer -> . NAME
2475
//
trailer -> . NAME
2475
**
trailer -> . NAME
2475
-
trailer -> . NAME
2475
)
trailer -> . NAME
2475
in
trailer -> . NAME
2475
>=
trailer -> . NAME
2475
=
trailer -> . NAME
2475
,
trailer -> . NAME
2475
==
trailer -> . NAME
2475
or
trailer -> . NAME
2475
and
trailer -> . NAME
2475
%
trailer -> . NAME
2475
is
trailer -> . NAME
2475
<
trailer -> . NAME
2475
not
trailer -> . NAME
2475
/
trailer -> . NAME
2475
if
trailer -> . NAME
2475
&
trailer -> . NAME
2475
>>
trailer -> . NAME
2476
&
trailer_expr -> trailer trailer_expr
2476
not
trailer_expr -> trailer trailer_expr
2476
and
trailer_expr -> trailer trailer_expr
2476
+
trailer_expr -> trailer trailer_expr
2476
==
trailer_expr -> trailer trailer_expr
2476
**
trailer_expr -> trailer trailer_expr
2476
/
trailer_expr -> trailer trailer_expr
2476
=
trailer_expr -> trailer trailer_expr
2476
^
trailer_expr -> trailer trailer_expr
2476
,
trailer_expr -> trailer trailer_expr
2476
>
trailer_expr -> trailer trailer_expr
2476
*
trailer_expr -> trailer trailer_expr
2476
//
trailer_expr -> trailer trailer_expr
2476
>>
trailer_expr -> trailer trailer_expr
2476
<<
trailer_expr -> trailer trailer_expr
2476
>=
trailer_expr -> trailer trailer_expr
2476
)
trailer_expr -> trailer trailer_expr
2476
<=
trailer_expr -> trailer trailer_expr
2476
-
trailer_expr -> trailer trailer_expr
2476
is
trailer_expr -> trailer trailer_expr
2476
in
trailer_expr -> trailer trailer_expr
2476
<
trailer_expr -> trailer trailer_expr
2476
|
trailer_expr -> trailer trailer_expr
2476
if
trailer_expr -> trailer trailer_expr
2476
%
trailer_expr -> trailer trailer_expr
2476
@
trailer_expr -> trailer trailer_expr
2476
!=
trailer_expr -> trailer trailer_expr
2476
or
trailer_expr -> trailer trailer_expr
2477
,
or_test -> and_test or or_test
2477
)
or_test -> and_test or or_test
2477
if
or_test -> and_test or or_test
2477
=
or_test -> and_test or or_test
2478
else
2549
2479
if
atom -> ( test_list_comp )
2479
or
atom -> ( test_list_comp )
2479
*
atom -> ( test_list_comp )
2479
|
atom -> ( test_list_comp )
2479
>>
atom -> ( test_list_comp )
2479
%
atom -> ( test_list_comp )
2479
not
atom -> ( test_list_comp )
2479
//
atom -> ( test_list_comp )
2479
+
atom -> ( test_list_comp )
2479
and
atom -> ( test_list_comp )
2479
>
atom -> ( test_list_comp )
2479
[
atom -> ( test_list_comp )
2479
^
atom -> ( test_list_comp )
2479
!=
atom -> ( test_list_comp )
2479
<<
atom -> ( test_list_comp )
2479
**
atom -> ( test_list_comp )
2479
is
atom -> ( test_list_comp )
2479
<=
atom -> ( test_list_comp )
2479
-
atom -> ( test_list_comp )
2479
&
atom -> ( test_list_comp )
2479
(
atom -> ( test_list_comp )
2479
,
atom -> ( test_list_comp )
2479
in
atom -> ( test_list_comp )
2479
)
atom -> ( test_list_comp )
2479
@
atom -> ( test_list_comp )
2479
.
atom -> ( test_list_comp )
2479
<
atom -> ( test_list_comp )
2479
/
atom -> ( test_list_comp )
2479
==
atom -> ( test_list_comp )
2479
>=
atom -> ( test_list_comp )
2479
=
atom -> ( test_list_comp )
2480
if
or_test -> and_test or or_test
2480
)
or_test -> and_test or or_test
2480
for
or_test -> and_test or or_test
2481
*
power -> atom_expr ** factor
2481
in
power -> atom_expr ** factor
2481
)
power -> atom_expr ** factor
2481
<
power -> atom_expr ** factor
2481
if
power -> atom_expr ** factor
2481
-
power -> atom_expr ** factor
2481
>>
power -> atom_expr ** factor
2481
<=
power -> atom_expr ** factor
2481
and
power -> atom_expr ** factor
2481
==
power -> atom_expr ** factor
2481
%
power -> atom_expr ** factor
2481
/
power -> atom_expr ** factor
2481
^
power -> atom_expr ** factor
2481
<<
power -> atom_expr ** factor
2481
>
power -> atom_expr ** factor
2481
//
power -> atom_expr ** factor
2481
is
power -> atom_expr ** factor
2481
for
power -> atom_expr ** factor
2481
@
power -> atom_expr ** factor
2481
+
power -> atom_expr ** factor
2481
|
power -> atom_expr ** factor
2481
!=
power -> atom_expr ** factor
2481
>=
power -> atom_expr ** factor
2481
or
power -> atom_expr ** factor
2481
&
power -> atom_expr ** factor
2481
not
power -> atom_expr ** factor
2482
and
xor_expr -> and_expr ^ xor_expr
2482
<
xor_expr -> and_expr ^ xor_expr
2482
>
xor_expr -> and_expr ^ xor_expr
2482
in
xor_expr -> and_expr ^ xor_expr
2482
|
xor_expr -> and_expr ^ xor_expr
2482
<=
xor_expr -> and_expr ^ xor_expr
2482
for
xor_expr -> and_expr ^ xor_expr
2482
)
xor_expr -> and_expr ^ xor_expr
2482
not
xor_expr -> and_expr ^ xor_expr
2482
or
xor_expr -> and_expr ^ xor_expr
2482
if
xor_expr -> and_expr ^ xor_expr
2482
is
xor_expr -> and_expr ^ xor_expr
2482
==
xor_expr -> and_expr ^ xor_expr
2482
!=
xor_expr -> and_expr ^ xor_expr
2482
>=
xor_expr -> and_expr ^ xor_expr
2483
<=
arith_expr -> term + arith_expr
2483
&
arith_expr -> term + arith_expr
2483
>
arith_expr -> term + arith_expr
2483
)
arith_expr -> term + arith_expr
2483
>=
arith_expr -> term + arith_expr
2483
not
arith_expr -> term + arith_expr
2483
|
arith_expr -> term + arith_expr
2483
in
arith_expr -> term + arith_expr
2483
if
arith_expr -> term + arith_expr
2483
>>
arith_expr -> term + arith_expr
2483
is
arith_expr -> term + arith_expr
2483
^
arith_expr -> term + arith_expr
2483
<<
arith_expr -> term + arith_expr
2483
<
arith_expr -> term + arith_expr
2483
==
arith_expr -> term + arith_expr
2483
!=
arith_expr -> term + arith_expr
2483
for
arith_expr -> term + arith_expr
2483
or
arith_expr -> term + arith_expr
2483
and
arith_expr -> term + arith_expr
2484
<=
arith_expr -> term - arith_expr
2484
if
arith_expr -> term - arith_expr
2484
)
arith_expr -> term - arith_expr
2484
not
arith_expr -> term - arith_expr
2484
|
arith_expr -> term - arith_expr
2484
>>
arith_expr -> term - arith_expr
2484
>=
arith_expr -> term - arith_expr
2484
<<
arith_expr -> term - arith_expr
2484
is
arith_expr -> term - arith_expr
2484
!=
arith_expr -> term - arith_expr
2484
in
arith_expr -> term - arith_expr
2484
<
arith_expr -> term - arith_expr
2484
or
arith_expr -> term - arith_expr
2484
for
arith_expr -> term - arith_expr
2484
==
arith_expr -> term - arith_expr
2484
and
arith_expr -> term - arith_expr
2484
&
arith_expr -> term - arith_expr
2484
^
arith_expr -> term - arith_expr
2484
>
arith_expr -> term - arith_expr
2485
is
term -> factor // term
2485
if
term -> factor // term
2485
>
term -> factor // term
2485
)
term -> factor // term
2485
==
term -> factor // term
2485
+
term -> factor // term
2485
^
term -> factor // term
2485
-
term -> factor // term
2485
in
term -> factor // term
2485
>>
term -> factor // term
2485
|
term -> factor // term
2485
<<
term -> factor // term
2485
!=
term -> factor // term
2485
&
term -> factor // term
2485
not
term -> factor // term
2485
<=
term -> factor // term
2485
<
term -> factor // term
2485
for
term -> factor // term
2485
and
term -> factor // term
2485
>=
term -> factor // term
2485
or
term -> factor // term
2486
|
term -> factor * term
2486
-
term -> factor * term
2486
in
term -> factor * term
2486
and
term -> factor * term
2486
<<
term -> factor * term
2486
>=
term -> factor * term
2486
if
term -> factor * term
2486
or
term -> factor * term
2486
<=
term -> factor * term
2486
is
term -> factor * term
2486
^
term -> factor * term
2486
!=
term -> factor * term
2486
==
term -> factor * term
2486
&
term -> factor * term
2486
>
term -> factor * term
2486
not
term -> factor * term
2486
for
term -> factor * term
2486
<
term -> factor * term
2486
+
term -> factor * term
2486
>>
term -> factor * term
2486
)
term -> factor * term
2487
!=
term -> factor % term
2487
>>
term -> factor % term
2487
)
term -> factor % term
2487
for
term -> factor % term
2487
==
term -> factor % term
2487
>=
term -> factor % term
2487
^
term -> factor % term
2487
not
term -> factor % term
2487
or
term -> factor % term
2487
if
term -> factor % term
2487
<=
term -> factor % term
2487
<
term -> factor % term
2487
is
term -> factor % term
2487
-
term -> factor % term
2487
in
term -> factor % term
2487
>
term -> factor % term
2487
<<
term -> factor % term
2487
and
term -> factor % term
2487
|
term -> factor % term
2487
+
term -> factor % term
2487
&
term -> factor % term
2488
>=
term -> factor / term
2488
!=
term -> factor / term
2488
)
term -> factor / term
2488
not
term -> factor / term
2488
^
term -> factor / term
2488
in
term -> factor / term
2488
and
term -> factor / term
2488
<<
term -> factor / term
2488
for
term -> factor / term
2488
+
term -> factor / term
2488
>
term -> factor / term
2488
|
term -> factor / term
2488
or
term -> factor / term
2488
if
term -> factor / term
2488
>>
term -> factor / term
2488
<
term -> factor / term
2488
&
term -> factor / term
2488
-
term -> factor / term
2488
is
term -> factor / term
2488
==
term -> factor / term
2488
<=
term -> factor / term
2489
-
term -> factor @ term
2489
&
term -> factor @ term
2489
^
term -> factor @ term
2489
<
term -> factor @ term
2489
!=
term -> factor @ term
2489
<<
term -> factor @ term
2489
is
term -> factor @ term
2489
for
term -> factor @ term
2489
<=
term -> factor @ term
2489
and
term -> factor @ term
2489
+
term -> factor @ term
2489
>
term -> factor @ term
2489
if
term -> factor @ term
2489
not
term -> factor @ term
2489
>>
term -> factor @ term
2489
>=
term -> factor @ term
2489
|
term -> factor @ term
2489
in
term -> factor @ term
2489
==
term -> factor @ term
2489
or
term -> factor @ term
2489
)
term -> factor @ term
2490
if
and_expr -> shift_expr & and_expr
2490
!=
and_expr -> shift_expr & and_expr
2490
<=
and_expr -> shift_expr & and_expr
2490
not
and_expr -> shift_expr & and_expr
2490
)
and_expr -> shift_expr & and_expr
2490
^
and_expr -> shift_expr & and_expr
2490
|
and_expr -> shift_expr & and_expr
2490
or
and_expr -> shift_expr & and_expr
2490
in
and_expr -> shift_expr & and_expr
2490
>
and_expr -> shift_expr & and_expr
2490
for
and_expr -> shift_expr & and_expr
2490
and
and_expr -> shift_expr & and_expr
2490
==
and_expr -> shift_expr & and_expr
2490
<
and_expr -> shift_expr & and_expr
2490
is
and_expr -> shift_expr & and_expr
2490
>=
and_expr -> shift_expr & and_expr
2491
for
shift_expr -> arith_expr << shift_expr
2491
^
shift_expr -> arith_expr << shift_expr
2491
|
shift_expr -> arith_expr << shift_expr
2491
&
shift_expr -> arith_expr << shift_expr
2491
and
shift_expr -> arith_expr << shift_expr
2491
is
shift_expr -> arith_expr << shift_expr
2491
)
shift_expr -> arith_expr << shift_expr
2491
in
shift_expr -> arith_expr << shift_expr
2491
<=
shift_expr -> arith_expr << shift_expr
2491
<
shift_expr -> arith_expr << shift_expr
2491
not
shift_expr -> arith_expr << shift_expr
2491
==
shift_expr -> arith_expr << shift_expr
2491
>=
shift_expr -> arith_expr << shift_expr
2491
if
shift_expr -> arith_expr << shift_expr
2491
>
shift_expr -> arith_expr << shift_expr
2491
or
shift_expr -> arith_expr << shift_expr
2491
!=
shift_expr -> arith_expr << shift_expr
2492
or
shift_expr -> arith_expr >> shift_expr
2492
and
shift_expr -> arith_expr >> shift_expr
2492
>=
shift_expr -> arith_expr >> shift_expr
2492
for
shift_expr -> arith_expr >> shift_expr
2492
not
shift_expr -> arith_expr >> shift_expr
2492
^
shift_expr -> arith_expr >> shift_expr
2492
is
shift_expr -> arith_expr >> shift_expr
2492
if
shift_expr -> arith_expr >> shift_expr
2492
in
shift_expr -> arith_expr >> shift_expr
2492
<=
shift_expr -> arith_expr >> shift_expr
2492
==
shift_expr -> arith_expr >> shift_expr
2492
<
shift_expr -> arith_expr >> shift_expr
2492
!=
shift_expr -> arith_expr >> shift_expr
2492
|
shift_expr -> arith_expr >> shift_expr
2492
>
shift_expr -> arith_expr >> shift_expr
2492
)
shift_expr -> arith_expr >> shift_expr
2492
&
shift_expr -> arith_expr >> shift_expr
2493
and
atom -> [ test_list_comp ]
2493
<=
atom -> [ test_list_comp ]
2493
**
atom -> [ test_list_comp ]
2493
^
atom -> [ test_list_comp ]
2493
[
atom -> [ test_list_comp ]
2493
!=
atom -> [ test_list_comp ]
2493
<
atom -> [ test_list_comp ]
2493
/
atom -> [ test_list_comp ]
2493
-
atom -> [ test_list_comp ]
2493
>=
atom -> [ test_list_comp ]
2493
if
atom -> [ test_list_comp ]
2493
%
atom -> [ test_list_comp ]
2493
is
atom -> [ test_list_comp ]
2493
+
atom -> [ test_list_comp ]
2493
)
atom -> [ test_list_comp ]
2493
&
atom -> [ test_list_comp ]
2493
@
atom -> [ test_list_comp ]
2493
or
atom -> [ test_list_comp ]
2493
in
atom -> [ test_list_comp ]
2493
==
atom -> [ test_list_comp ]
2493
not
atom -> [ test_list_comp ]
2493
.
atom -> [ test_list_comp ]
2493
|
atom -> [ test_list_comp ]
2493
>
atom -> [ test_list_comp ]
2493
<<
atom -> [ test_list_comp ]
2493
//
atom -> [ test_list_comp ]
2493
(
atom -> [ test_list_comp ]
2493
for
atom -> [ test_list_comp ]
2493
*
atom -> [ test_list_comp ]
2493
>>
atom -> [ test_list_comp ]
2494
if
comparison -> expr comp_op comparison
2494
or
comparison -> expr comp_op comparison
2494
and
comparison -> expr comp_op comparison
2494
for
comparison -> expr comp_op comparison
2494
)
comparison -> expr comp_op comparison
2495
>
expr -> xor_expr | expr
2495
is
expr -> xor_expr | expr
2495
<
expr -> xor_expr | expr
2495
if
expr -> xor_expr | expr
2495
>=
expr -> xor_expr | expr
2495
or
expr -> xor_expr | expr
2495
and
expr -> xor_expr | expr
2495
in
expr -> xor_expr | expr
2495
!=
expr -> xor_expr | expr
2495
)
expr -> xor_expr | expr
2495
<=
expr -> xor_expr | expr
2495
==
expr -> xor_expr | expr
2495
for
expr -> xor_expr | expr
2495
not
expr -> xor_expr | expr
2496
if
atom -> ( test_list_comp )
2496
or
atom -> ( test_list_comp )
2496
*
atom -> ( test_list_comp )
2496
|
atom -> ( test_list_comp )
2496
>>
atom -> ( test_list_comp )
2496
%
atom -> ( test_list_comp )
2496
not
atom -> ( test_list_comp )
2496
//
atom -> ( test_list_comp )
2496
for
atom -> ( test_list_comp )
2496
+
atom -> ( test_list_comp )
2496
and
atom -> ( test_list_comp )
2496
>
atom -> ( test_list_comp )
2496
[
atom -> ( test_list_comp )
2496
^
atom -> ( test_list_comp )
2496
!=
atom -> ( test_list_comp )
2496
<<
atom -> ( test_list_comp )
2496
**
atom -> ( test_list_comp )
2496
is
atom -> ( test_list_comp )
2496
<=
atom -> ( test_list_comp )
2496
-
atom -> ( test_list_comp )
2496
&
atom -> ( test_list_comp )
2496
(
atom -> ( test_list_comp )
2496
in
atom -> ( test_list_comp )
2496
)
atom -> ( test_list_comp )
2496
@
atom -> ( test_list_comp )
2496
.
atom -> ( test_list_comp )
2496
<
atom -> ( test_list_comp )
2496
/
atom -> ( test_list_comp )
2496
==
atom -> ( test_list_comp )
2496
>=
atom -> ( test_list_comp )
2497
]
2550
2498
)
2551
2499
<
trailer -> ( )
2499
.
trailer -> ( )
2499
*
trailer -> ( )
2499
or
trailer -> ( )
2499
is
trailer -> ( )
2499
/
trailer -> ( )
2499
+
trailer -> ( )
2499
@
trailer -> ( )
2499
>
trailer -> ( )
2499
//
trailer -> ( )
2499
|
trailer -> ( )
2499
!=
trailer -> ( )
2499
&
trailer -> ( )
2499
^
trailer -> ( )
2499
)
trailer -> ( )
2499
<=
trailer -> ( )
2499
%
trailer -> ( )
2499
>>
trailer -> ( )
2499
**
trailer -> ( )
2499
and
trailer -> ( )
2499
(
trailer -> ( )
2499
for
trailer -> ( )
2499
==
trailer -> ( )
2499
if
trailer -> ( )
2499
[
trailer -> ( )
2499
<<
trailer -> ( )
2499
in
trailer -> ( )
2499
-
trailer -> ( )
2499
not
trailer -> ( )
2499
>=
trailer -> ( )
2500
|
trailer -> . NAME
2500
@
trailer -> . NAME
2500
^
trailer -> . NAME
2500
>
trailer -> . NAME
2500
+
trailer -> . NAME
2500
.
trailer -> . NAME
2500
!=
trailer -> . NAME
2500
<<
trailer -> . NAME
2500
<=
trailer -> . NAME
2500
[
trailer -> . NAME
2500
*
trailer -> . NAME
2500
(
trailer -> . NAME
2500
//
trailer -> . NAME
2500
**
trailer -> . NAME
2500
-
trailer -> . NAME
2500
)
trailer -> . NAME
2500
in
trailer -> . NAME
2500
>=
trailer -> . NAME
2500
==
trailer -> . NAME
2500
or
trailer -> . NAME
2500
and
trailer -> . NAME
2500
%
trailer -> . NAME
2500
is
trailer -> . NAME
2500
for
trailer -> . NAME
2500
<
trailer -> . NAME
2500
not
trailer -> . NAME
2500
/
trailer -> . NAME
2500
if
trailer -> . NAME
2500
&
trailer -> . NAME
2500
>>
trailer -> . NAME
2501
&
trailer_expr -> trailer trailer_expr
2501
not
trailer_expr -> trailer trailer_expr
2501
and
trailer_expr -> trailer trailer_expr
2501
+
trailer_expr -> trailer trailer_expr
2501
==
trailer_expr -> trailer trailer_expr
2501
**
trailer_expr -> trailer trailer_expr
2501
/
trailer_expr -> trailer trailer_expr
2501
^
trailer_expr -> trailer trailer_expr
2501
>
trailer_expr -> trailer trailer_expr
2501
*
trailer_expr -> trailer trailer_expr
2501
//
trailer_expr -> trailer trailer_expr
2501
>>
trailer_expr -> trailer trailer_expr
2501
<<
trailer_expr -> trailer trailer_expr
2501
>=
trailer_expr -> trailer trailer_expr
2501
)
trailer_expr -> trailer trailer_expr
2501
<=
trailer_expr -> trailer trailer_expr
2501
-
trailer_expr -> trailer trailer_expr
2501
is
trailer_expr -> trailer trailer_expr
2501
in
trailer_expr -> trailer trailer_expr
2501
<
trailer_expr -> trailer trailer_expr
2501
|
trailer_expr -> trailer trailer_expr
2501
if
trailer_expr -> trailer trailer_expr
2501
%
trailer_expr -> trailer trailer_expr
2501
for
trailer_expr -> trailer trailer_expr
2501
@
trailer_expr -> trailer trailer_expr
2501
!=
trailer_expr -> trailer trailer_expr
2501
or
trailer_expr -> trailer trailer_expr
2502
)
and_test -> not_test and and_test
2502
or
and_test -> not_test and and_test
2502
for
and_test -> not_test and and_test
2502
if
and_test -> not_test and and_test
2503
)
test_nocond -> lambdef_nocond
2503
for
test_nocond -> lambdef_nocond
2503
if
test_nocond -> lambdef_nocond
2504
if
test_nocond -> or_test
2504
)
test_nocond -> or_test
2504
for
test_nocond -> or_test
2505
)
comp_iter -> 
2505
for
656
2505
comp_if
2350
2505
comp_iter
2552
2505
comp_for
2351
2505
if
2352
2506
vfpdef
212
2506
varargslist
2553
2506
:
2554
2506
NAME
211
2507
atom_expr
6
2507
factor
10
2507
[
3
2507
term
15
2507
STRING
43
2507
arith_expr
32
2507
NUMBER
8
2507
small_stmt
4
2507
NAME
37
2507
{
5
2507
expr
7
2507
not
51
2507
True
9
2507
shift_expr
12
2507
atom
13
2507
xor_expr
14
2507
NEWLINE
942
2507
(
34
2507
None
29
2507
and_test
20
2507
and_expr
21
2507
False
23
2507
or_test
25
2507
test
33
2507
suite
2555
2507
lambda
28
2507
+
30
2507
simple_stmt
943
2507
nonlocal
66
2507
-
36
2507
not_test
40
2507
power
47
2507
lambdef
41
2507
~
44
2507
comparison
48
2507
assert
67
2507
global_stmt
68
2507
continue
49
2507
expr_stmt
50
2507
test_list
62
2507
raise
69
2507
del_stmt
52
2507
yield_stmt
53
2507
raise_stmt
70
2507
yield
56
2507
assert_stmt
57
2507
global
71
2507
nonlocal_stmt
72
2507
break_stmt
58
2507
return_stmt
75
2507
return
59
2507
pass
60
2507
continue_stmt
61
2507
flow_stmt
76
2507
break
63
2507
del
64
2507
pass_stmt
65
2508
,
test -> or_test if or_test else test
2508
:
test -> or_test if or_test else test
2509
atom_expr
1736
2509
and_expr
1737
2509
term
1738
2509
factor
1739
2509
shift_expr
1740
2509
arith_expr
1741
2509
NUMBER
1742
2509
NAME
1743
2509
[
1744
2509
{
1745
2509
expr
1746
2509
False
1747
2509
xor_expr
1748
2509
STRING
1749
2509
+
1750
2509
True
1751
2509
-
1752
2509
and_test
1753
2509
or_test
1754
2509
(
1755
2509
None
1756
2509
lambda
1757
2509
atom
1758
2509
power
1759
2509
~
1760
2509
not_test
1761
2509
lambdef
1762
2509
comparison
1763
2509
not
1764
2509
test
2556
2510
=
lambdef -> lambda varargslist : test
2510
NEWLINE
lambdef -> lambda varargslist : test
2511
*
trailer -> [ subscriptlist ]
2511
not
trailer -> [ subscriptlist ]
2511
(
trailer -> [ subscriptlist ]
2511
<<
trailer -> [ subscriptlist ]
2511
>>
trailer -> [ subscriptlist ]
2511
//
trailer -> [ subscriptlist ]
2511
NEWLINE
trailer -> [ subscriptlist ]
2511
=
trailer -> [ subscriptlist ]
2511
or
trailer -> [ subscriptlist ]
2511
is
trailer -> [ subscriptlist ]
2511
[
trailer -> [ subscriptlist ]
2511
|
trailer -> [ subscriptlist ]
2511
%
trailer -> [ subscriptlist ]
2511
<=
trailer -> [ subscriptlist ]
2511
and
trailer -> [ subscriptlist ]
2511
**
trailer -> [ subscriptlist ]
2511
if
trailer -> [ subscriptlist ]
2511
-
trailer -> [ subscriptlist ]
2511
in
trailer -> [ subscriptlist ]
2511
^
trailer -> [ subscriptlist ]
2511
+
trailer -> [ subscriptlist ]
2511
>=
trailer -> [ subscriptlist ]
2511
.
trailer -> [ subscriptlist ]
2511
&
trailer -> [ subscriptlist ]
2511
/
trailer -> [ subscriptlist ]
2511
!=
trailer -> [ subscriptlist ]
2511
<
trailer -> [ subscriptlist ]
2511
==
trailer -> [ subscriptlist ]
2511
>
trailer -> [ subscriptlist ]
2511
@
trailer -> [ subscriptlist ]
2512
%
trailer -> ( arglist )
2512
and
trailer -> ( arglist )
2512
+
trailer -> ( arglist )
2512
=
trailer -> ( arglist )
2512
or
trailer -> ( arglist )
2512
not
trailer -> ( arglist )
2512
-
trailer -> ( arglist )
2512
@
trailer -> ( arglist )
2512
[
trailer -> ( arglist )
2512
>>
trailer -> ( arglist )
2512
<=
trailer -> ( arglist )
2512
if
trailer -> ( arglist )
2512
//
trailer -> ( arglist )
2512
==
trailer -> ( arglist )
2512
<<
trailer -> ( arglist )
2512
*
trailer -> ( arglist )
2512
<
trailer -> ( arglist )
2512
**
trailer -> ( arglist )
2512
is
trailer -> ( arglist )
2512
>
trailer -> ( arglist )
2512
!=
trailer -> ( arglist )
2512
/
trailer -> ( arglist )
2512
NEWLINE
trailer -> ( arglist )
2512
in
trailer -> ( arglist )
2512
.
trailer -> ( arglist )
2512
|
trailer -> ( arglist )
2512
>=
trailer -> ( arglist )
2512
&
trailer -> ( arglist )
2512
(
trailer -> ( arglist )
2512
^
trailer -> ( arglist )
2513
NEWLINE
test -> or_test if or_test else test
2514
*
trailer -> [ subscriptlist ]
2514
for
trailer -> [ subscriptlist ]
2514
not
trailer -> [ subscriptlist ]
2514
(
trailer -> [ subscriptlist ]
2514
<<
trailer -> [ subscriptlist ]
2514
>>
trailer -> [ subscriptlist ]
2514
//
trailer -> [ subscriptlist ]
2514
or
trailer -> [ subscriptlist ]
2514
]
trailer -> [ subscriptlist ]
2514
is
trailer -> [ subscriptlist ]
2514
[
trailer -> [ subscriptlist ]
2514
|
trailer -> [ subscriptlist ]
2514
%
trailer -> [ subscriptlist ]
2514
<=
trailer -> [ subscriptlist ]
2514
and
trailer -> [ subscriptlist ]
2514
**
trailer -> [ subscriptlist ]
2514
if
trailer -> [ subscriptlist ]
2514
-
trailer -> [ subscriptlist ]
2514
in
trailer -> [ subscriptlist ]
2514
^
trailer -> [ subscriptlist ]
2514
+
trailer -> [ subscriptlist ]
2514
>=
trailer -> [ subscriptlist ]
2514
.
trailer -> [ subscriptlist ]
2514
&
trailer -> [ subscriptlist ]
2514
/
trailer -> [ subscriptlist ]
2514
!=
trailer -> [ subscriptlist ]
2514
<
trailer -> [ subscriptlist ]
2514
==
trailer -> [ subscriptlist ]
2514
>
trailer -> [ subscriptlist ]
2514
@
trailer -> [ subscriptlist ]
2515
%
trailer -> ( arglist )
2515
and
trailer -> ( arglist )
2515
+
trailer -> ( arglist )
2515
or
trailer -> ( arglist )
2515
not
trailer -> ( arglist )
2515
-
trailer -> ( arglist )
2515
@
trailer -> ( arglist )
2515
[
trailer -> ( arglist )
2515
>>
trailer -> ( arglist )
2515
<=
trailer -> ( arglist )
2515
if
trailer -> ( arglist )
2515
]
trailer -> ( arglist )
2515
//
trailer -> ( arglist )
2515
==
trailer -> ( arglist )
2515
<<
trailer -> ( arglist )
2515
*
trailer -> ( arglist )
2515
<
trailer -> ( arglist )
2515
**
trailer -> ( arglist )
2515
is
trailer -> ( arglist )
2515
>
trailer -> ( arglist )
2515
!=
trailer -> ( arglist )
2515
/
trailer -> ( arglist )
2515
for
trailer -> ( arglist )
2515
in
trailer -> ( arglist )
2515
.
trailer -> ( arglist )
2515
|
trailer -> ( arglist )
2515
>=
trailer -> ( arglist )
2515
&
trailer -> ( arglist )
2515
(
trailer -> ( arglist )
2515
^
trailer -> ( arglist )
2516
and_test
1876
2516
atom_expr
1877
2516
and_expr
1878
2516
term
1879
2516
factor
1880
2516
shift_expr
1881
2516
arith_expr
1882
2516
NUMBER
1883
2516
NAME
1884
2516
[
1885
2516
{
1886
2516
expr
1887
2516
False
1888
2516
xor_expr
1889
2516
atom
1890
2516
STRING
1891
2516
+
1892
2516
(
1893
2516
True
1894
2516
-
1895
2516
None
1896
2516
comparison
1897
2516
power
1898
2516
~
1899
2516
lambda
2414
2516
lambdef_nocond
2415
2516
not_test
1900
2516
or_test
2416
2516
not
1902
2516
test_nocond
2557
2517
:
2558
2518
]
comp_if -> if test_nocond comp_iter
2519
if
test_nocond -> or_test
2519
,
test_nocond -> or_test
2519
)
test_nocond -> or_test
2519
for
test_nocond -> or_test
2520
)
test_nocond -> lambdef_nocond
2520
for
test_nocond -> lambdef_nocond
2520
if
test_nocond -> lambdef_nocond
2520
,
test_nocond -> lambdef_nocond
2521
comp_for
2418
2521
,
comp_iter -> 
2521
comp_iter
2559
2521
comp_if
2420
2521
if
2421
2521
)
comp_iter -> 
2521
for
1018
2522
vfpdef
212
2522
varargslist
2560
2522
:
2561
2522
NAME
211
2523
nonlocal
elif_clause -> elif test : suite elif_clause
2523
False
elif_clause -> elif test : suite elif_clause
2523
NAME
elif_clause -> elif test : suite elif_clause
2523
yield
elif_clause -> elif test : suite elif_clause
2523
lambda
elif_clause -> elif test : suite elif_clause
2523
global
elif_clause -> elif test : suite elif_clause
2523
+
elif_clause -> elif test : suite elif_clause
2523
if
elif_clause -> elif test : suite elif_clause
2523
assert
elif_clause -> elif test : suite elif_clause
2523
else
elif_clause -> elif test : suite elif_clause
2523
class
elif_clause -> elif test : suite elif_clause
2523
del
elif_clause -> elif test : suite elif_clause
2523
while
elif_clause -> elif test : suite elif_clause
2523
True
elif_clause -> elif test : suite elif_clause
2523
-
elif_clause -> elif test : suite elif_clause
2523
None
elif_clause -> elif test : suite elif_clause
2523
with
elif_clause -> elif test : suite elif_clause
2523
{
elif_clause -> elif test : suite elif_clause
2523
@
elif_clause -> elif test : suite elif_clause
2523
def
elif_clause -> elif test : suite elif_clause
2523
$
elif_clause -> elif test : suite elif_clause
2523
return
elif_clause -> elif test : suite elif_clause
2523
STRING
elif_clause -> elif test : suite elif_clause
2523
raise
elif_clause -> elif test : suite elif_clause
2523
pass
elif_clause -> elif test : suite elif_clause
2523
continue
elif_clause -> elif test : suite elif_clause
2523
[
elif_clause -> elif test : suite elif_clause
2523
try
elif_clause -> elif test : suite elif_clause
2523
break
elif_clause -> elif test : suite elif_clause
2523
NEWLINE
elif_clause -> elif test : suite elif_clause
2523
NUMBER
elif_clause -> elif test : suite elif_clause
2523
~
elif_clause -> elif test : suite elif_clause
2523
for
elif_clause -> elif test : suite elif_clause
2523
(
elif_clause -> elif test : suite elif_clause
2523
not
elif_clause -> elif test : suite elif_clause
2524
atom_expr
6
2524
factor
10
2524
[
3
2524
term
15
2524
STRING
43
2524
arith_expr
32
2524
NUMBER
8
2524
small_stmt
4
2524
NAME
37
2524
{
5
2524
expr
7
2524
not
51
2524
True
9
2524
shift_expr
12
2524
atom
13
2524
xor_expr
14
2524
suite
2562
2524
NEWLINE
942
2524
(
34
2524
None
29
2524
and_test
20
2524
and_expr
21
2524
False
23
2524
or_test
25
2524
test
33
2524
lambda
28
2524
+
30
2524
simple_stmt
943
2524
nonlocal
66
2524
-
36
2524
not_test
40
2524
power
47
2524
lambdef
41
2524
~
44
2524
comparison
48
2524
assert
67
2524
global_stmt
68
2524
continue
49
2524
expr_stmt
50
2524
test_list
62
2524
raise
69
2524
del_stmt
52
2524
yield_stmt
53
2524
raise_stmt
70
2524
yield
56
2524
assert_stmt
57
2524
global
71
2524
nonlocal_stmt
72
2524
break_stmt
58
2524
return_stmt
75
2524
return
59
2524
pass
60
2524
continue_stmt
61
2524
flow_stmt
76
2524
break
63
2524
del
64
2524
pass_stmt
65
2525
DEDENT
2563
2526
as
test -> or_test if or_test else test
2526
:
test -> or_test if or_test else test
2527
maybe_except_clause
2564
2527
except_clause
2263
2527
except
1057
2527
break
maybe_except_clause -> 
2527
class
maybe_except_clause -> 
2527
False
maybe_except_clause -> 
2527
@
maybe_except_clause -> 
2527
for
maybe_except_clause -> 
2527
lambda
maybe_except_clause -> 
2527
{
maybe_except_clause -> 
2527
while
maybe_except_clause -> 
2527
NUMBER
maybe_except_clause -> 
2527
def
maybe_except_clause -> 
2527
else
maybe_except_clause -> 
2527
-
maybe_except_clause -> 
2527
del
maybe_except_clause -> 
2527
None
maybe_except_clause -> 
2527
True
maybe_except_clause -> 
2527
STRING
maybe_except_clause -> 
2527
pass
maybe_except_clause -> 
2527
nonlocal
maybe_except_clause -> 
2527
+
maybe_except_clause -> 
2527
try
maybe_except_clause -> 
2527
continue
maybe_except_clause -> 
2527
assert
maybe_except_clause -> 
2527
NAME
maybe_except_clause -> 
2527
~
maybe_except_clause -> 
2527
NEWLINE
maybe_except_clause -> 
2527
[
maybe_except_clause -> 
2527
if
maybe_except_clause -> 
2527
return
maybe_except_clause -> 
2527
raise
maybe_except_clause -> 
2527
$
maybe_except_clause -> 
2527
yield
maybe_except_clause -> 
2527
(
maybe_except_clause -> 
2527
finally
maybe_except_clause -> 
2527
not
maybe_except_clause -> 
2527
with
maybe_except_clause -> 
2527
global
maybe_except_clause -> 
2528
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2528
except
suite -> NEWLINE INDENT stmt_list DEDENT
2528
del
suite -> NEWLINE INDENT stmt_list DEDENT
2528
@
suite -> NEWLINE INDENT stmt_list DEDENT
2528
for
suite -> NEWLINE INDENT stmt_list DEDENT
2528
def
suite -> NEWLINE INDENT stmt_list DEDENT
2528
{
suite -> NEWLINE INDENT stmt_list DEDENT
2528
try
suite -> NEWLINE INDENT stmt_list DEDENT
2528
with
suite -> NEWLINE INDENT stmt_list DEDENT
2528
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2528
global
suite -> NEWLINE INDENT stmt_list DEDENT
2528
break
suite -> NEWLINE INDENT stmt_list DEDENT
2528
False
suite -> NEWLINE INDENT stmt_list DEDENT
2528
[
suite -> NEWLINE INDENT stmt_list DEDENT
2528
while
suite -> NEWLINE INDENT stmt_list DEDENT
2528
True
suite -> NEWLINE INDENT stmt_list DEDENT
2528
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2528
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2528
class
suite -> NEWLINE INDENT stmt_list DEDENT
2528
not
suite -> NEWLINE INDENT stmt_list DEDENT
2528
~
suite -> NEWLINE INDENT stmt_list DEDENT
2528
$
suite -> NEWLINE INDENT stmt_list DEDENT
2528
-
suite -> NEWLINE INDENT stmt_list DEDENT
2528
None
suite -> NEWLINE INDENT stmt_list DEDENT
2528
(
suite -> NEWLINE INDENT stmt_list DEDENT
2528
return
suite -> NEWLINE INDENT stmt_list DEDENT
2528
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2528
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2528
if
suite -> NEWLINE INDENT stmt_list DEDENT
2528
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2528
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2528
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2528
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2528
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2528
else
suite -> NEWLINE INDENT stmt_list DEDENT
2528
+
suite -> NEWLINE INDENT stmt_list DEDENT
2528
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2529
:
2565
2530
lambda
simple_stmt -> small_stmt NEWLINE
2530
yield
simple_stmt -> small_stmt NEWLINE
2530
NAME
simple_stmt -> small_stmt NEWLINE
2530
STRING
simple_stmt -> small_stmt NEWLINE
2530
pass
simple_stmt -> small_stmt NEWLINE
2530
None
simple_stmt -> small_stmt NEWLINE
2530
(
simple_stmt -> small_stmt NEWLINE
2530
assert
simple_stmt -> small_stmt NEWLINE
2530
@
simple_stmt -> small_stmt NEWLINE
2530
def
simple_stmt -> small_stmt NEWLINE
2530
if
simple_stmt -> small_stmt NEWLINE
2530
+
simple_stmt -> small_stmt NEWLINE
2530
continue
simple_stmt -> small_stmt NEWLINE
2530
not
simple_stmt -> small_stmt NEWLINE
2530
try
simple_stmt -> small_stmt NEWLINE
2530
False
simple_stmt -> small_stmt NEWLINE
2530
with
simple_stmt -> small_stmt NEWLINE
2530
else
simple_stmt -> small_stmt NEWLINE
2530
global
simple_stmt -> small_stmt NEWLINE
2530
return
simple_stmt -> small_stmt NEWLINE
2530
raise
simple_stmt -> small_stmt NEWLINE
2530
True
simple_stmt -> small_stmt NEWLINE
2530
-
simple_stmt -> small_stmt NEWLINE
2530
del
simple_stmt -> small_stmt NEWLINE
2530
DEDENT
simple_stmt -> small_stmt NEWLINE
2530
NUMBER
simple_stmt -> small_stmt NEWLINE
2530
{
simple_stmt -> small_stmt NEWLINE
2530
for
simple_stmt -> small_stmt NEWLINE
2530
class
simple_stmt -> small_stmt NEWLINE
2530
break
simple_stmt -> small_stmt NEWLINE
2530
[
simple_stmt -> small_stmt NEWLINE
2530
nonlocal
simple_stmt -> small_stmt NEWLINE
2530
while
simple_stmt -> small_stmt NEWLINE
2530
~
simple_stmt -> small_stmt NEWLINE
2531
while
1591
2531
decorators
1592
2531
[
3
2531
small_stmt
1593
2531
stmt_list
2566
2531
{
5
2531
atom_expr
6
2531
expr
7
2531
NUMBER
8
2531
True
9
2531
factor
10
2531
class
1594
2531
shift_expr
12
2531
atom
13
2531
xor_expr
14
2531
term
15
2531
if
1595
2531
try
1596
2531
with
1597
2531
decorated
1598
2531
and_test
20
2531
and_expr
21
2531
for_stmt
1599
2531
False
23
2531
def
1600
2531
or_test
25
2531
with_stmt
1601
2531
funcdef
1602
2531
lambda
28
2531
try_stmt
1603
2531
None
29
2531
+
30
2531
if_stmt
1604
2531
arith_expr
32
2531
test
33
2531
(
34
2531
compound_stmt
1605
2531
-
36
2531
NAME
37
2531
while_stmt
1606
2531
not_test
40
2531
lambdef
41
2531
for
1607
2531
STRING
43
2531
~
44
2531
simple_stmt
1608
2531
classdef
1609
2531
power
47
2531
comparison
48
2531
continue
49
2531
expr_stmt
50
2531
not
51
2531
del_stmt
52
2531
yield_stmt
53
2531
@
54
2531
decorator
55
2531
yield
56
2531
assert_stmt
57
2531
break_stmt
58
2531
return
59
2531
pass
60
2531
continue_stmt
61
2531
test_list
62
2531
break
63
2531
del
64
2531
pass_stmt
65
2531
nonlocal
66
2531
assert
67
2531
global_stmt
68
2531
raise
69
2531
stmt
1611
2531
raise_stmt
70
2531
global
71
2531
nonlocal_stmt
72
2531
return_stmt
75
2531
flow_stmt
76
2532
while
1591
2532
decorators
1592
2532
[
3
2532
small_stmt
1593
2532
stmt_list
2567
2532
{
5
2532
atom_expr
6
2532
expr
7
2532
NUMBER
8
2532
True
9
2532
factor
10
2532
class
1594
2532
shift_expr
12
2532
atom
13
2532
xor_expr
14
2532
term
15
2532
if
1595
2532
try
1596
2532
with
1597
2532
decorated
1598
2532
and_test
20
2532
and_expr
21
2532
for_stmt
1599
2532
False
23
2532
def
1600
2532
or_test
25
2532
with_stmt
1601
2532
funcdef
1602
2532
lambda
28
2532
try_stmt
1603
2532
None
29
2532
+
30
2532
if_stmt
1604
2532
arith_expr
32
2532
test
33
2532
(
34
2532
compound_stmt
1605
2532
-
36
2532
NAME
37
2532
while_stmt
1606
2532
not_test
40
2532
lambdef
41
2532
for
1607
2532
STRING
43
2532
~
44
2532
simple_stmt
1608
2532
classdef
1609
2532
power
47
2532
comparison
48
2532
continue
49
2532
expr_stmt
50
2532
not
51
2532
del_stmt
52
2532
yield_stmt
53
2532
@
54
2532
decorator
55
2532
yield
56
2532
assert_stmt
57
2532
break_stmt
58
2532
return
59
2532
pass
60
2532
continue_stmt
61
2532
test_list
62
2532
break
63
2532
del
64
2532
pass_stmt
65
2532
nonlocal
66
2532
assert
67
2532
global_stmt
68
2532
raise
69
2532
stmt
1611
2532
raise_stmt
70
2532
global
71
2532
nonlocal_stmt
72
2532
return_stmt
75
2532
flow_stmt
76
2533
:
2568
2534
atom_expr
6
2534
factor
10
2534
[
3
2534
term
15
2534
STRING
43
2534
arith_expr
32
2534
NUMBER
8
2534
small_stmt
1593
2534
NAME
37
2534
{
5
2534
expr
7
2534
not
51
2534
True
9
2534
shift_expr
12
2534
atom
13
2534
xor_expr
14
2534
NEWLINE
2439
2534
(
34
2534
None
29
2534
and_test
20
2534
and_expr
21
2534
False
23
2534
or_test
25
2534
test
33
2534
lambda
28
2534
+
30
2534
simple_stmt
2440
2534
suite
2569
2534
nonlocal
66
2534
-
36
2534
not_test
40
2534
power
47
2534
lambdef
41
2534
~
44
2534
comparison
48
2534
assert
67
2534
global_stmt
68
2534
continue
49
2534
expr_stmt
50
2534
test_list
62
2534
raise
69
2534
del_stmt
52
2534
yield_stmt
53
2534
raise_stmt
70
2534
yield
56
2534
assert_stmt
57
2534
global
71
2534
nonlocal_stmt
72
2534
break_stmt
58
2534
return_stmt
75
2534
return
59
2534
pass
60
2534
continue_stmt
61
2534
flow_stmt
76
2534
break
63
2534
del
64
2534
pass_stmt
65
2535
lambda
simple_stmt -> small_stmt NEWLINE
2535
yield
simple_stmt -> small_stmt NEWLINE
2535
NAME
simple_stmt -> small_stmt NEWLINE
2535
STRING
simple_stmt -> small_stmt NEWLINE
2535
pass
simple_stmt -> small_stmt NEWLINE
2535
None
simple_stmt -> small_stmt NEWLINE
2535
(
simple_stmt -> small_stmt NEWLINE
2535
assert
simple_stmt -> small_stmt NEWLINE
2535
@
simple_stmt -> small_stmt NEWLINE
2535
def
simple_stmt -> small_stmt NEWLINE
2535
if
simple_stmt -> small_stmt NEWLINE
2535
+
simple_stmt -> small_stmt NEWLINE
2535
continue
simple_stmt -> small_stmt NEWLINE
2535
not
simple_stmt -> small_stmt NEWLINE
2535
try
simple_stmt -> small_stmt NEWLINE
2535
elif
simple_stmt -> small_stmt NEWLINE
2535
False
simple_stmt -> small_stmt NEWLINE
2535
with
simple_stmt -> small_stmt NEWLINE
2535
else
simple_stmt -> small_stmt NEWLINE
2535
global
simple_stmt -> small_stmt NEWLINE
2535
return
simple_stmt -> small_stmt NEWLINE
2535
raise
simple_stmt -> small_stmt NEWLINE
2535
True
simple_stmt -> small_stmt NEWLINE
2535
-
simple_stmt -> small_stmt NEWLINE
2535
del
simple_stmt -> small_stmt NEWLINE
2535
DEDENT
simple_stmt -> small_stmt NEWLINE
2535
NUMBER
simple_stmt -> small_stmt NEWLINE
2535
{
simple_stmt -> small_stmt NEWLINE
2535
for
simple_stmt -> small_stmt NEWLINE
2535
class
simple_stmt -> small_stmt NEWLINE
2535
break
simple_stmt -> small_stmt NEWLINE
2535
[
simple_stmt -> small_stmt NEWLINE
2535
nonlocal
simple_stmt -> small_stmt NEWLINE
2535
while
simple_stmt -> small_stmt NEWLINE
2535
~
simple_stmt -> small_stmt NEWLINE
2536
while
1591
2536
decorators
1592
2536
[
3
2536
small_stmt
1593
2536
stmt_list
2570
2536
{
5
2536
atom_expr
6
2536
expr
7
2536
NUMBER
8
2536
True
9
2536
factor
10
2536
class
1594
2536
shift_expr
12
2536
atom
13
2536
xor_expr
14
2536
term
15
2536
if
1595
2536
try
1596
2536
with
1597
2536
decorated
1598
2536
and_test
20
2536
and_expr
21
2536
for_stmt
1599
2536
False
23
2536
def
1600
2536
or_test
25
2536
with_stmt
1601
2536
funcdef
1602
2536
lambda
28
2536
try_stmt
1603
2536
None
29
2536
+
30
2536
if_stmt
1604
2536
arith_expr
32
2536
test
33
2536
(
34
2536
compound_stmt
1605
2536
-
36
2536
NAME
37
2536
while_stmt
1606
2536
not_test
40
2536
lambdef
41
2536
for
1607
2536
STRING
43
2536
~
44
2536
simple_stmt
1608
2536
classdef
1609
2536
power
47
2536
comparison
48
2536
continue
49
2536
expr_stmt
50
2536
not
51
2536
del_stmt
52
2536
yield_stmt
53
2536
@
54
2536
decorator
55
2536
yield
56
2536
assert_stmt
57
2536
break_stmt
58
2536
return
59
2536
pass
60
2536
continue_stmt
61
2536
test_list
62
2536
break
63
2536
del
64
2536
pass_stmt
65
2536
nonlocal
66
2536
assert
67
2536
global_stmt
68
2536
raise
69
2536
stmt
1611
2536
raise_stmt
70
2536
global
71
2536
nonlocal_stmt
72
2536
return_stmt
75
2536
flow_stmt
76
2537
atom_expr
79
2537
and_expr
80
2537
term
81
2537
factor
82
2537
shift_expr
83
2537
arith_expr
84
2537
NUMBER
85
2537
NAME
86
2537
[
87
2537
{
88
2537
expr
89
2537
False
90
2537
xor_expr
91
2537
STRING
92
2537
+
93
2537
test
2571
2537
True
94
2537
(
95
2537
None
96
2537
-
97
2537
atom
98
2537
power
99
2537
~
100
2537
lambda
101
2537
not_test
102
2537
not
103
2537
comparison
104
2537
and_test
105
2537
lambdef
106
2537
or_test
107
2538
yield
if_stmt -> if test : suite elif_clause
2538
return
if_stmt -> if test : suite elif_clause
2538
-
if_stmt -> if test : suite elif_clause
2538
else
2572
2538
with
if_stmt -> if test : suite elif_clause
2538
{
if_stmt -> if test : suite elif_clause
2538
True
if_stmt -> if test : suite elif_clause
2538
nonlocal
if_stmt -> if test : suite elif_clause
2538
+
if_stmt -> if test : suite elif_clause
2538
raise
if_stmt -> if test : suite elif_clause
2538
break
if_stmt -> if test : suite elif_clause
2538
NAME
if_stmt -> if test : suite elif_clause
2538
STRING
if_stmt -> if test : suite elif_clause
2538
try
if_stmt -> if test : suite elif_clause
2538
@
if_stmt -> if test : suite elif_clause
2538
if
if_stmt -> if test : suite elif_clause
2538
del
if_stmt -> if test : suite elif_clause
2538
False
if_stmt -> if test : suite elif_clause
2538
global
if_stmt -> if test : suite elif_clause
2538
while
if_stmt -> if test : suite elif_clause
2538
DEDENT
if_stmt -> if test : suite elif_clause
2538
continue
if_stmt -> if test : suite elif_clause
2538
lambda
if_stmt -> if test : suite elif_clause
2538
for
if_stmt -> if test : suite elif_clause
2538
None
if_stmt -> if test : suite elif_clause
2538
not
if_stmt -> if test : suite elif_clause
2538
pass
if_stmt -> if test : suite elif_clause
2538
(
if_stmt -> if test : suite elif_clause
2538
assert
if_stmt -> if test : suite elif_clause
2538
[
if_stmt -> if test : suite elif_clause
2538
NUMBER
if_stmt -> if test : suite elif_clause
2538
def
if_stmt -> if test : suite elif_clause
2538
class
if_stmt -> if test : suite elif_clause
2538
~
if_stmt -> if test : suite elif_clause
2539
:
2573
2540
:
2574
2541
as
2575
2541
:
2576
2542
atom_expr
6
2542
factor
10
2542
[
3
2542
term
15
2542
STRING
43
2542
arith_expr
32
2542
NUMBER
8
2542
small_stmt
2577
2542
NAME
37
2542
{
5
2542
expr
7
2542
not
51
2542
True
9
2542
shift_expr
12
2542
atom
13
2542
xor_expr
14
2542
NEWLINE
2578
2542
(
34
2542
None
29
2542
and_test
20
2542
and_expr
21
2542
False
23
2542
or_test
25
2542
test
33
2542
lambda
28
2542
+
30
2542
simple_stmt
2579
2542
nonlocal
66
2542
suite
2580
2542
-
36
2542
not_test
40
2542
power
47
2542
lambdef
41
2542
~
44
2542
comparison
48
2542
assert
67
2542
global_stmt
68
2542
continue
49
2542
expr_stmt
50
2542
test_list
62
2542
raise
69
2542
del_stmt
52
2542
yield_stmt
53
2542
raise_stmt
70
2542
yield
56
2542
assert_stmt
57
2542
global
71
2542
nonlocal_stmt
72
2542
break_stmt
58
2542
return_stmt
75
2542
return
59
2542
pass
60
2542
continue_stmt
61
2542
flow_stmt
76
2542
break
63
2542
del
64
2542
pass_stmt
65
2543
:
2581
2544
atom_expr
6
2544
factor
10
2544
[
3
2544
term
15
2544
STRING
43
2544
arith_expr
32
2544
NUMBER
8
2544
small_stmt
1593
2544
NAME
37
2544
{
5
2544
expr
7
2544
not
51
2544
True
9
2544
shift_expr
12
2544
atom
13
2544
xor_expr
14
2544
NEWLINE
2439
2544
(
34
2544
None
29
2544
and_test
20
2544
and_expr
21
2544
False
23
2544
or_test
25
2544
test
33
2544
lambda
28
2544
+
30
2544
simple_stmt
2440
2544
suite
2582
2544
nonlocal
66
2544
-
36
2544
not_test
40
2544
power
47
2544
lambdef
41
2544
~
44
2544
comparison
48
2544
assert
67
2544
global_stmt
68
2544
continue
49
2544
expr_stmt
50
2544
test_list
62
2544
raise
69
2544
del_stmt
52
2544
yield_stmt
53
2544
raise_stmt
70
2544
yield
56
2544
assert_stmt
57
2544
global
71
2544
nonlocal_stmt
72
2544
break_stmt
58
2544
return_stmt
75
2544
return
59
2544
pass
60
2544
continue_stmt
61
2544
flow_stmt
76
2544
break
63
2544
del
64
2544
pass_stmt
65
2545
atom_expr
6
2545
factor
10
2545
[
3
2545
term
15
2545
STRING
43
2545
arith_expr
32
2545
NUMBER
8
2545
small_stmt
2436
2545
NAME
37
2545
{
5
2545
expr
7
2545
not
51
2545
suite
2583
2545
True
9
2545
shift_expr
12
2545
atom
13
2545
xor_expr
14
2545
NEWLINE
2437
2545
(
34
2545
None
29
2545
and_test
20
2545
and_expr
21
2545
False
23
2545
or_test
25
2545
test
33
2545
lambda
28
2545
+
30
2545
simple_stmt
2438
2545
nonlocal
66
2545
-
36
2545
not_test
40
2545
power
47
2545
lambdef
41
2545
~
44
2545
comparison
48
2545
assert
67
2545
global_stmt
68
2545
continue
49
2545
expr_stmt
50
2545
test_list
62
2545
raise
69
2545
del_stmt
52
2545
yield_stmt
53
2545
raise_stmt
70
2545
yield
56
2545
assert_stmt
57
2545
global
71
2545
nonlocal_stmt
72
2545
break_stmt
58
2545
return_stmt
75
2545
return
59
2545
pass
60
2545
continue_stmt
61
2545
flow_stmt
76
2545
break
63
2545
del
64
2545
pass_stmt
65
2546
)
lambdef -> lambda varargslist : test
2546
,
lambdef -> lambda varargslist : test
2546
=
lambdef -> lambda varargslist : test
2547
)
trailer -> [ subscriptlist ]
2547
*
trailer -> [ subscriptlist ]
2547
not
trailer -> [ subscriptlist ]
2547
(
trailer -> [ subscriptlist ]
2547
<<
trailer -> [ subscriptlist ]
2547
,
trailer -> [ subscriptlist ]
2547
>>
trailer -> [ subscriptlist ]
2547
//
trailer -> [ subscriptlist ]
2547
=
trailer -> [ subscriptlist ]
2547
or
trailer -> [ subscriptlist ]
2547
is
trailer -> [ subscriptlist ]
2547
[
trailer -> [ subscriptlist ]
2547
|
trailer -> [ subscriptlist ]
2547
%
trailer -> [ subscriptlist ]
2547
<=
trailer -> [ subscriptlist ]
2547
and
trailer -> [ subscriptlist ]
2547
**
trailer -> [ subscriptlist ]
2547
if
trailer -> [ subscriptlist ]
2547
-
trailer -> [ subscriptlist ]
2547
in
trailer -> [ subscriptlist ]
2547
^
trailer -> [ subscriptlist ]
2547
+
trailer -> [ subscriptlist ]
2547
>=
trailer -> [ subscriptlist ]
2547
.
trailer -> [ subscriptlist ]
2547
&
trailer -> [ subscriptlist ]
2547
/
trailer -> [ subscriptlist ]
2547
!=
trailer -> [ subscriptlist ]
2547
<
trailer -> [ subscriptlist ]
2547
==
trailer -> [ subscriptlist ]
2547
>
trailer -> [ subscriptlist ]
2547
@
trailer -> [ subscriptlist ]
2548
%
trailer -> ( arglist )
2548
and
trailer -> ( arglist )
2548
+
trailer -> ( arglist )
2548
=
trailer -> ( arglist )
2548
or
trailer -> ( arglist )
2548
not
trailer -> ( arglist )
2548
-
trailer -> ( arglist )
2548
@
trailer -> ( arglist )
2548
[
trailer -> ( arglist )
2548
>>
trailer -> ( arglist )
2548
<=
trailer -> ( arglist )
2548
if
trailer -> ( arglist )
2548
//
trailer -> ( arglist )
2548
==
trailer -> ( arglist )
2548
<<
trailer -> ( arglist )
2548
*
trailer -> ( arglist )
2548
<
trailer -> ( arglist )
2548
**
trailer -> ( arglist )
2548
is
trailer -> ( arglist )
2548
>
trailer -> ( arglist )
2548
!=
trailer -> ( arglist )
2548
/
trailer -> ( arglist )
2548
in
trailer -> ( arglist )
2548
.
trailer -> ( arglist )
2548
|
trailer -> ( arglist )
2548
)
trailer -> ( arglist )
2548
>=
trailer -> ( arglist )
2548
&
trailer -> ( arglist )
2548
(
trailer -> ( arglist )
2548
^
trailer -> ( arglist )
2548
,
trailer -> ( arglist )
2549
atom_expr
2023
2549
and_expr
2024
2549
term
2025
2549
factor
2026
2549
shift_expr
2027
2549
arith_expr
2028
2549
NUMBER
2029
2549
NAME
2030
2549
not
2031
2549
[
2032
2549
{
2033
2549
expr
2034
2549
not_test
2035
2549
False
2036
2549
xor_expr
2037
2549
STRING
2038
2549
lambda
2039
2549
atom
2040
2549
+
2041
2549
True
2042
2549
-
2043
2549
and_test
2044
2549
or_test
2045
2549
(
2046
2549
None
2047
2549
power
2048
2549
~
2049
2549
test
2584
2549
comparison
2050
2549
lambdef
2051
2550
)
trailer -> [ subscriptlist ]
2550
*
trailer -> [ subscriptlist ]
2550
for
trailer -> [ subscriptlist ]
2550
not
trailer -> [ subscriptlist ]
2550
(
trailer -> [ subscriptlist ]
2550
<<
trailer -> [ subscriptlist ]
2550
>>
trailer -> [ subscriptlist ]
2550
//
trailer -> [ subscriptlist ]
2550
or
trailer -> [ subscriptlist ]
2550
is
trailer -> [ subscriptlist ]
2550
[
trailer -> [ subscriptlist ]
2550
|
trailer -> [ subscriptlist ]
2550
%
trailer -> [ subscriptlist ]
2550
<=
trailer -> [ subscriptlist ]
2550
and
trailer -> [ subscriptlist ]
2550
**
trailer -> [ subscriptlist ]
2550
if
trailer -> [ subscriptlist ]
2550
-
trailer -> [ subscriptlist ]
2550
in
trailer -> [ subscriptlist ]
2550
^
trailer -> [ subscriptlist ]
2550
+
trailer -> [ subscriptlist ]
2550
>=
trailer -> [ subscriptlist ]
2550
.
trailer -> [ subscriptlist ]
2550
&
trailer -> [ subscriptlist ]
2550
/
trailer -> [ subscriptlist ]
2550
!=
trailer -> [ subscriptlist ]
2550
<
trailer -> [ subscriptlist ]
2550
==
trailer -> [ subscriptlist ]
2550
>
trailer -> [ subscriptlist ]
2550
@
trailer -> [ subscriptlist ]
2551
%
trailer -> ( arglist )
2551
and
trailer -> ( arglist )
2551
+
trailer -> ( arglist )
2551
or
trailer -> ( arglist )
2551
not
trailer -> ( arglist )
2551
-
trailer -> ( arglist )
2551
@
trailer -> ( arglist )
2551
[
trailer -> ( arglist )
2551
>>
trailer -> ( arglist )
2551
<=
trailer -> ( arglist )
2551
if
trailer -> ( arglist )
2551
//
trailer -> ( arglist )
2551
==
trailer -> ( arglist )
2551
<<
trailer -> ( arglist )
2551
*
trailer -> ( arglist )
2551
<
trailer -> ( arglist )
2551
**
trailer -> ( arglist )
2551
is
trailer -> ( arglist )
2551
>
trailer -> ( arglist )
2551
!=
trailer -> ( arglist )
2551
/
trailer -> ( arglist )
2551
for
trailer -> ( arglist )
2551
in
trailer -> ( arglist )
2551
.
trailer -> ( arglist )
2551
|
trailer -> ( arglist )
2551
)
trailer -> ( arglist )
2551
>=
trailer -> ( arglist )
2551
&
trailer -> ( arglist )
2551
(
trailer -> ( arglist )
2551
^
trailer -> ( arglist )
2552
)
comp_if -> if test_nocond comp_iter
2553
:
2585
2554
and_test
2058
2554
atom_expr
2059
2554
and_expr
2060
2554
term
2061
2554
factor
2062
2554
shift_expr
2063
2554
arith_expr
2064
2554
NUMBER
2065
2554
NAME
2066
2554
not
2067
2554
[
2068
2554
{
2069
2554
expr
2070
2554
False
2071
2554
xor_expr
2072
2554
STRING
2073
2554
+
2074
2554
True
2075
2554
-
2076
2554
(
2077
2554
None
2078
2554
comparison
2079
2554
power
2080
2554
atom
2081
2554
~
2082
2554
lambdef_nocond
2503
2554
not_test
2083
2554
or_test
2504
2554
test_nocond
2586
2554
lambda
2506
2555
return
for_stmt -> for expr_list in test_list : suite else : suite
2555
STRING
for_stmt -> for expr_list in test_list : suite else : suite
2555
class
for_stmt -> for expr_list in test_list : suite else : suite
2555
NAME
for_stmt -> for expr_list in test_list : suite else : suite
2555
[
for_stmt -> for expr_list in test_list : suite else : suite
2555
@
for_stmt -> for expr_list in test_list : suite else : suite
2555
if
for_stmt -> for expr_list in test_list : suite else : suite
2555
break
for_stmt -> for expr_list in test_list : suite else : suite
2555
(
for_stmt -> for expr_list in test_list : suite else : suite
2555
not
for_stmt -> for expr_list in test_list : suite else : suite
2555
assert
for_stmt -> for expr_list in test_list : suite else : suite
2555
while
for_stmt -> for expr_list in test_list : suite else : suite
2555
NUMBER
for_stmt -> for expr_list in test_list : suite else : suite
2555
pass
for_stmt -> for expr_list in test_list : suite else : suite
2555
{
for_stmt -> for expr_list in test_list : suite else : suite
2555
lambda
for_stmt -> for expr_list in test_list : suite else : suite
2555
for
for_stmt -> for expr_list in test_list : suite else : suite
2555
None
for_stmt -> for expr_list in test_list : suite else : suite
2555
global
for_stmt -> for expr_list in test_list : suite else : suite
2555
yield
for_stmt -> for expr_list in test_list : suite else : suite
2555
del
for_stmt -> for expr_list in test_list : suite else : suite
2555
+
for_stmt -> for expr_list in test_list : suite else : suite
2555
~
for_stmt -> for expr_list in test_list : suite else : suite
2555
NEWLINE
for_stmt -> for expr_list in test_list : suite else : suite
2555
False
for_stmt -> for expr_list in test_list : suite else : suite
2555
def
for_stmt -> for expr_list in test_list : suite else : suite
2555
try
for_stmt -> for expr_list in test_list : suite else : suite
2555
raise
for_stmt -> for expr_list in test_list : suite else : suite
2555
nonlocal
for_stmt -> for expr_list in test_list : suite else : suite
2555
-
for_stmt -> for expr_list in test_list : suite else : suite
2555
$
for_stmt -> for expr_list in test_list : suite else : suite
2555
True
for_stmt -> for expr_list in test_list : suite else : suite
2555
continue
for_stmt -> for expr_list in test_list : suite else : suite
2555
with
for_stmt -> for expr_list in test_list : suite else : suite
2556
=
test -> or_test if or_test else test
2556
NEWLINE
test -> or_test if or_test else test
2557
if
lambdef_nocond -> lambda : test_nocond
2557
]
lambdef_nocond -> lambda : test_nocond
2557
for
lambdef_nocond -> lambda : test_nocond
2558
and_test
1876
2558
atom_expr
1877
2558
and_expr
1878
2558
term
1879
2558
factor
1880
2558
shift_expr
1881
2558
arith_expr
1882
2558
NUMBER
1883
2558
NAME
1884
2558
[
1885
2558
{
1886
2558
expr
1887
2558
False
1888
2558
xor_expr
1889
2558
atom
1890
2558
STRING
1891
2558
+
1892
2558
(
1893
2558
True
1894
2558
-
1895
2558
None
1896
2558
comparison
1897
2558
power
1898
2558
~
1899
2558
lambda
2414
2558
lambdef_nocond
2415
2558
test_nocond
2587
2558
not_test
1900
2558
or_test
2416
2558
not
1902
2559
)
comp_if -> if test_nocond comp_iter
2559
,
comp_if -> if test_nocond comp_iter
2560
:
2588
2561
and_test
217
2561
atom_expr
218
2561
and_expr
219
2561
term
220
2561
factor
221
2561
shift_expr
222
2561
arith_expr
223
2561
NUMBER
224
2561
NAME
225
2561
not
226
2561
[
227
2561
{
228
2561
expr
229
2561
not_test
231
2561
False
232
2561
xor_expr
234
2561
STRING
235
2561
atom
237
2561
+
238
2561
True
239
2561
-
240
2561
(
241
2561
None
242
2561
test_nocond
2589
2561
comparison
243
2561
power
244
2561
or_test
2519
2561
~
245
2561
lambdef_nocond
2520
2561
lambda
2522
2562
False
try_stmt -> try : suite except_clause else : suite finally : suite
2562
del
try_stmt -> try : suite except_clause else : suite finally : suite
2562
NUMBER
try_stmt -> try : suite except_clause else : suite finally : suite
2562
None
try_stmt -> try : suite except_clause else : suite finally : suite
2562
if
try_stmt -> try : suite except_clause else : suite finally : suite
2562
assert
try_stmt -> try : suite except_clause else : suite finally : suite
2562
not
try_stmt -> try : suite except_clause else : suite finally : suite
2562
STRING
try_stmt -> try : suite except_clause else : suite finally : suite
2562
yield
try_stmt -> try : suite except_clause else : suite finally : suite
2562
lambda
try_stmt -> try : suite except_clause else : suite finally : suite
2562
break
try_stmt -> try : suite except_clause else : suite finally : suite
2562
~
try_stmt -> try : suite except_clause else : suite finally : suite
2562
raise
try_stmt -> try : suite except_clause else : suite finally : suite
2562
True
try_stmt -> try : suite except_clause else : suite finally : suite
2562
pass
try_stmt -> try : suite except_clause else : suite finally : suite
2562
def
try_stmt -> try : suite except_clause else : suite finally : suite
2562
(
try_stmt -> try : suite except_clause else : suite finally : suite
2562
-
try_stmt -> try : suite except_clause else : suite finally : suite
2562
nonlocal
try_stmt -> try : suite except_clause else : suite finally : suite
2562
$
try_stmt -> try : suite except_clause else : suite finally : suite
2562
global
try_stmt -> try : suite except_clause else : suite finally : suite
2562
return
try_stmt -> try : suite except_clause else : suite finally : suite
2562
@
try_stmt -> try : suite except_clause else : suite finally : suite
2562
NEWLINE
try_stmt -> try : suite except_clause else : suite finally : suite
2562
class
try_stmt -> try : suite except_clause else : suite finally : suite
2562
{
try_stmt -> try : suite except_clause else : suite finally : suite
2562
NAME
try_stmt -> try : suite except_clause else : suite finally : suite
2562
while
try_stmt -> try : suite except_clause else : suite finally : suite
2562
+
try_stmt -> try : suite except_clause else : suite finally : suite
2562
with
try_stmt -> try : suite except_clause else : suite finally : suite
2562
try
try_stmt -> try : suite except_clause else : suite finally : suite
2562
[
try_stmt -> try : suite except_clause else : suite finally : suite
2562
for
try_stmt -> try : suite except_clause else : suite finally : suite
2562
continue
try_stmt -> try : suite except_clause else : suite finally : suite
2563
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2563
del
suite -> NEWLINE INDENT stmt_list DEDENT
2563
@
suite -> NEWLINE INDENT stmt_list DEDENT
2563
for
suite -> NEWLINE INDENT stmt_list DEDENT
2563
def
suite -> NEWLINE INDENT stmt_list DEDENT
2563
{
suite -> NEWLINE INDENT stmt_list DEDENT
2563
try
suite -> NEWLINE INDENT stmt_list DEDENT
2563
with
suite -> NEWLINE INDENT stmt_list DEDENT
2563
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2563
global
suite -> NEWLINE INDENT stmt_list DEDENT
2563
break
suite -> NEWLINE INDENT stmt_list DEDENT
2563
False
suite -> NEWLINE INDENT stmt_list DEDENT
2563
[
suite -> NEWLINE INDENT stmt_list DEDENT
2563
while
suite -> NEWLINE INDENT stmt_list DEDENT
2563
True
suite -> NEWLINE INDENT stmt_list DEDENT
2563
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2563
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2563
class
suite -> NEWLINE INDENT stmt_list DEDENT
2563
not
suite -> NEWLINE INDENT stmt_list DEDENT
2563
~
suite -> NEWLINE INDENT stmt_list DEDENT
2563
$
suite -> NEWLINE INDENT stmt_list DEDENT
2563
-
suite -> NEWLINE INDENT stmt_list DEDENT
2563
None
suite -> NEWLINE INDENT stmt_list DEDENT
2563
(
suite -> NEWLINE INDENT stmt_list DEDENT
2563
return
suite -> NEWLINE INDENT stmt_list DEDENT
2563
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2563
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2563
if
suite -> NEWLINE INDENT stmt_list DEDENT
2563
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2563
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2563
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2563
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2563
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2563
+
suite -> NEWLINE INDENT stmt_list DEDENT
2563
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2564
nonlocal
except_clause -> except test as NAME : suite maybe_except_clause
2564
else
except_clause -> except test as NAME : suite maybe_except_clause
2564
None
except_clause -> except test as NAME : suite maybe_except_clause
2564
assert
except_clause -> except test as NAME : suite maybe_except_clause
2564
with
except_clause -> except test as NAME : suite maybe_except_clause
2564
lambda
except_clause -> except test as NAME : suite maybe_except_clause
2564
global
except_clause -> except test as NAME : suite maybe_except_clause
2564
STRING
except_clause -> except test as NAME : suite maybe_except_clause
2564
~
except_clause -> except test as NAME : suite maybe_except_clause
2564
while
except_clause -> except test as NAME : suite maybe_except_clause
2564
return
except_clause -> except test as NAME : suite maybe_except_clause
2564
del
except_clause -> except test as NAME : suite maybe_except_clause
2564
break
except_clause -> except test as NAME : suite maybe_except_clause
2564
try
except_clause -> except test as NAME : suite maybe_except_clause
2564
NEWLINE
except_clause -> except test as NAME : suite maybe_except_clause
2564
NUMBER
except_clause -> except test as NAME : suite maybe_except_clause
2564
yield
except_clause -> except test as NAME : suite maybe_except_clause
2564
-
except_clause -> except test as NAME : suite maybe_except_clause
2564
@
except_clause -> except test as NAME : suite maybe_except_clause
2564
if
except_clause -> except test as NAME : suite maybe_except_clause
2564
finally
except_clause -> except test as NAME : suite maybe_except_clause
2564
class
except_clause -> except test as NAME : suite maybe_except_clause
2564
[
except_clause -> except test as NAME : suite maybe_except_clause
2564
$
except_clause -> except test as NAME : suite maybe_except_clause
2564
raise
except_clause -> except test as NAME : suite maybe_except_clause
2564
{
except_clause -> except test as NAME : suite maybe_except_clause
2564
pass
except_clause -> except test as NAME : suite maybe_except_clause
2564
not
except_clause -> except test as NAME : suite maybe_except_clause
2564
continue
except_clause -> except test as NAME : suite maybe_except_clause
2564
(
except_clause -> except test as NAME : suite maybe_except_clause
2564
def
except_clause -> except test as NAME : suite maybe_except_clause
2564
NAME
except_clause -> except test as NAME : suite maybe_except_clause
2564
False
except_clause -> except test as NAME : suite maybe_except_clause
2564
for
except_clause -> except test as NAME : suite maybe_except_clause
2564
+
except_clause -> except test as NAME : suite maybe_except_clause
2564
True
except_clause -> except test as NAME : suite maybe_except_clause
2565
atom_expr
6
2565
factor
10
2565
[
3
2565
term
15
2565
STRING
43
2565
arith_expr
32
2565
NUMBER
8
2565
small_stmt
1593
2565
NAME
37
2565
{
5
2565
expr
7
2565
not
51
2565
True
9
2565
shift_expr
12
2565
atom
13
2565
xor_expr
14
2565
suite
2590
2565
NEWLINE
2439
2565
(
34
2565
None
29
2565
and_test
20
2565
and_expr
21
2565
False
23
2565
or_test
25
2565
test
33
2565
lambda
28
2565
+
30
2565
simple_stmt
2440
2565
nonlocal
66
2565
-
36
2565
not_test
40
2565
power
47
2565
lambdef
41
2565
~
44
2565
comparison
48
2565
assert
67
2565
global_stmt
68
2565
continue
49
2565
expr_stmt
50
2565
test_list
62
2565
raise
69
2565
del_stmt
52
2565
yield_stmt
53
2565
raise_stmt
70
2565
yield
56
2565
assert_stmt
57
2565
global
71
2565
nonlocal_stmt
72
2565
break_stmt
58
2565
return_stmt
75
2565
return
59
2565
pass
60
2565
continue_stmt
61
2565
flow_stmt
76
2565
break
63
2565
del
64
2565
pass_stmt
65
2566
DEDENT
2591
2567
DEDENT
2592
2568
atom_expr
6
2568
factor
10
2568
[
3
2568
term
15
2568
STRING
43
2568
arith_expr
32
2568
NUMBER
8
2568
small_stmt
1593
2568
NAME
37
2568
{
5
2568
suite
2593
2568
expr
7
2568
not
51
2568
True
9
2568
shift_expr
12
2568
atom
13
2568
xor_expr
14
2568
NEWLINE
2439
2568
(
34
2568
None
29
2568
and_test
20
2568
and_expr
21
2568
False
23
2568
or_test
25
2568
test
33
2568
lambda
28
2568
+
30
2568
simple_stmt
2440
2568
nonlocal
66
2568
-
36
2568
not_test
40
2568
power
47
2568
lambdef
41
2568
~
44
2568
comparison
48
2568
assert
67
2568
global_stmt
68
2568
continue
49
2568
expr_stmt
50
2568
test_list
62
2568
raise
69
2568
del_stmt
52
2568
yield_stmt
53
2568
raise_stmt
70
2568
yield
56
2568
assert_stmt
57
2568
global
71
2568
nonlocal_stmt
72
2568
break_stmt
58
2568
return_stmt
75
2568
return
59
2568
pass
60
2568
continue_stmt
61
2568
flow_stmt
76
2568
break
63
2568
del
64
2568
pass_stmt
65
2569
raise
classdef -> class NAME ( ) : suite
2569
{
classdef -> class NAME ( ) : suite
2569
[
classdef -> class NAME ( ) : suite
2569
for
classdef -> class NAME ( ) : suite
2569
@
classdef -> class NAME ( ) : suite
2569
(
classdef -> class NAME ( ) : suite
2569
STRING
classdef -> class NAME ( ) : suite
2569
pass
classdef -> class NAME ( ) : suite
2569
not
classdef -> class NAME ( ) : suite
2569
nonlocal
classdef -> class NAME ( ) : suite
2569
global
classdef -> class NAME ( ) : suite
2569
try
classdef -> class NAME ( ) : suite
2569
break
classdef -> class NAME ( ) : suite
2569
None
classdef -> class NAME ( ) : suite
2569
-
classdef -> class NAME ( ) : suite
2569
return
classdef -> class NAME ( ) : suite
2569
def
classdef -> class NAME ( ) : suite
2569
while
classdef -> class NAME ( ) : suite
2569
~
classdef -> class NAME ( ) : suite
2569
continue
classdef -> class NAME ( ) : suite
2569
if
classdef -> class NAME ( ) : suite
2569
yield
classdef -> class NAME ( ) : suite
2569
del
classdef -> class NAME ( ) : suite
2569
lambda
classdef -> class NAME ( ) : suite
2569
+
classdef -> class NAME ( ) : suite
2569
NUMBER
classdef -> class NAME ( ) : suite
2569
with
classdef -> class NAME ( ) : suite
2569
assert
classdef -> class NAME ( ) : suite
2569
DEDENT
classdef -> class NAME ( ) : suite
2569
class
classdef -> class NAME ( ) : suite
2569
False
classdef -> class NAME ( ) : suite
2569
True
classdef -> class NAME ( ) : suite
2569
NAME
classdef -> class NAME ( ) : suite
2570
DEDENT
2594
2571
:
2595
2572
:
2596
2573
atom_expr
6
2573
factor
10
2573
[
3
2573
term
15
2573
STRING
43
2573
arith_expr
32
2573
NUMBER
8
2573
small_stmt
2597
2573
NAME
37
2573
{
5
2573
expr
7
2573
not
51
2573
suite
2598
2573
True
9
2573
shift_expr
12
2573
atom
13
2573
xor_expr
14
2573
NEWLINE
2599
2573
(
34
2573
None
29
2573
and_test
20
2573
and_expr
21
2573
False
23
2573
or_test
25
2573
test
33
2573
lambda
28
2573
+
30
2573
simple_stmt
2600
2573
nonlocal
66
2573
-
36
2573
not_test
40
2573
power
47
2573
lambdef
41
2573
~
44
2573
comparison
48
2573
assert
67
2573
global_stmt
68
2573
continue
49
2573
expr_stmt
50
2573
test_list
62
2573
raise
69
2573
del_stmt
52
2573
yield_stmt
53
2573
raise_stmt
70
2573
yield
56
2573
assert_stmt
57
2573
global
71
2573
nonlocal_stmt
72
2573
break_stmt
58
2573
return_stmt
75
2573
return
59
2573
pass
60
2573
continue_stmt
61
2573
flow_stmt
76
2573
break
63
2573
del
64
2573
pass_stmt
65
2574
atom_expr
6
2574
factor
10
2574
[
3
2574
term
15
2574
STRING
43
2574
arith_expr
32
2574
NUMBER
8
2574
small_stmt
1593
2574
suite
2601
2574
NAME
37
2574
{
5
2574
expr
7
2574
not
51
2574
True
9
2574
shift_expr
12
2574
atom
13
2574
xor_expr
14
2574
NEWLINE
2439
2574
(
34
2574
None
29
2574
and_test
20
2574
and_expr
21
2574
False
23
2574
or_test
25
2574
test
33
2574
lambda
28
2574
+
30
2574
simple_stmt
2440
2574
nonlocal
66
2574
-
36
2574
not_test
40
2574
power
47
2574
lambdef
41
2574
~
44
2574
comparison
48
2574
assert
67
2574
global_stmt
68
2574
continue
49
2574
expr_stmt
50
2574
test_list
62
2574
raise
69
2574
del_stmt
52
2574
yield_stmt
53
2574
raise_stmt
70
2574
yield
56
2574
assert_stmt
57
2574
global
71
2574
nonlocal_stmt
72
2574
break_stmt
58
2574
return_stmt
75
2574
return
59
2574
pass
60
2574
continue_stmt
61
2574
flow_stmt
76
2574
break
63
2574
del
64
2574
pass_stmt
65
2575
NAME
2602
2576
atom_expr
6
2576
factor
10
2576
[
3
2576
term
15
2576
STRING
43
2576
arith_expr
32
2576
NUMBER
8
2576
small_stmt
2577
2576
NAME
37
2576
{
5
2576
expr
7
2576
not
51
2576
True
9
2576
shift_expr
12
2576
atom
13
2576
xor_expr
14
2576
NEWLINE
2578
2576
(
34
2576
None
29
2576
and_test
20
2576
and_expr
21
2576
False
23
2576
or_test
25
2576
test
33
2576
lambda
28
2576
+
30
2576
suite
2603
2576
simple_stmt
2579
2576
nonlocal
66
2576
-
36
2576
not_test
40
2576
power
47
2576
lambdef
41
2576
~
44
2576
comparison
48
2576
assert
67
2576
global_stmt
68
2576
continue
49
2576
expr_stmt
50
2576
test_list
62
2576
raise
69
2576
del_stmt
52
2576
yield_stmt
53
2576
raise_stmt
70
2576
yield
56
2576
assert_stmt
57
2576
global
71
2576
nonlocal_stmt
72
2576
break_stmt
58
2576
return_stmt
75
2576
return
59
2576
pass
60
2576
continue_stmt
61
2576
flow_stmt
76
2576
break
63
2576
del
64
2576
pass_stmt
65
2577
NEWLINE
2604
2578
INDENT
2605
2579
continue
suite -> simple_stmt
2579
not
suite -> simple_stmt
2579
yield
suite -> simple_stmt
2579
for
suite -> simple_stmt
2579
False
suite -> simple_stmt
2579
NUMBER
suite -> simple_stmt
2579
with
suite -> simple_stmt
2579
lambda
suite -> simple_stmt
2579
{
suite -> simple_stmt
2579
None
suite -> simple_stmt
2579
DEDENT
suite -> simple_stmt
2579
(
suite -> simple_stmt
2579
while
suite -> simple_stmt
2579
if
suite -> simple_stmt
2579
try
suite -> simple_stmt
2579
NAME
suite -> simple_stmt
2579
else
suite -> simple_stmt
2579
True
suite -> simple_stmt
2579
global
suite -> simple_stmt
2579
STRING
suite -> simple_stmt
2579
except
suite -> simple_stmt
2579
pass
suite -> simple_stmt
2579
[
suite -> simple_stmt
2579
assert
suite -> simple_stmt
2579
raise
suite -> simple_stmt
2579
-
suite -> simple_stmt
2579
class
suite -> simple_stmt
2579
del
suite -> simple_stmt
2579
@
suite -> simple_stmt
2579
finally
suite -> simple_stmt
2579
~
suite -> simple_stmt
2579
+
suite -> simple_stmt
2579
return
suite -> simple_stmt
2579
break
suite -> simple_stmt
2579
nonlocal
suite -> simple_stmt
2579
def
suite -> simple_stmt
2580
maybe_except_clause
2606
2580
except
2449
2580
break
maybe_except_clause -> 
2580
class
maybe_except_clause -> 
2580
except_clause
2607
2580
False
maybe_except_clause -> 
2580
for
maybe_except_clause -> 
2580
@
maybe_except_clause -> 
2580
lambda
maybe_except_clause -> 
2580
{
maybe_except_clause -> 
2580
while
maybe_except_clause -> 
2580
NUMBER
maybe_except_clause -> 
2580
def
maybe_except_clause -> 
2580
else
maybe_except_clause -> 
2580
-
maybe_except_clause -> 
2580
del
maybe_except_clause -> 
2580
None
maybe_except_clause -> 
2580
True
maybe_except_clause -> 
2580
STRING
maybe_except_clause -> 
2580
pass
maybe_except_clause -> 
2580
nonlocal
maybe_except_clause -> 
2580
+
maybe_except_clause -> 
2580
DEDENT
maybe_except_clause -> 
2580
try
maybe_except_clause -> 
2580
continue
maybe_except_clause -> 
2580
assert
maybe_except_clause -> 
2580
NAME
maybe_except_clause -> 
2580
~
maybe_except_clause -> 
2580
[
maybe_except_clause -> 
2580
if
maybe_except_clause -> 
2580
return
maybe_except_clause -> 
2580
raise
maybe_except_clause -> 
2580
yield
maybe_except_clause -> 
2580
(
maybe_except_clause -> 
2580
finally
maybe_except_clause -> 
2580
not
maybe_except_clause -> 
2580
with
maybe_except_clause -> 
2580
global
maybe_except_clause -> 
2581
atom_expr
6
2581
factor
10
2581
[
3
2581
term
15
2581
STRING
43
2581
arith_expr
32
2581
NUMBER
8
2581
small_stmt
1593
2581
NAME
37
2581
suite
2608
2581
{
5
2581
expr
7
2581
not
51
2581
True
9
2581
shift_expr
12
2581
atom
13
2581
xor_expr
14
2581
NEWLINE
2439
2581
(
34
2581
None
29
2581
and_test
20
2581
and_expr
21
2581
False
23
2581
or_test
25
2581
test
33
2581
lambda
28
2581
+
30
2581
simple_stmt
2440
2581
nonlocal
66
2581
-
36
2581
not_test
40
2581
power
47
2581
lambdef
41
2581
~
44
2581
comparison
48
2581
assert
67
2581
global_stmt
68
2581
continue
49
2581
expr_stmt
50
2581
test_list
62
2581
raise
69
2581
del_stmt
52
2581
yield_stmt
53
2581
raise_stmt
70
2581
yield
56
2581
assert_stmt
57
2581
global
71
2581
nonlocal_stmt
72
2581
break_stmt
58
2581
return_stmt
75
2581
return
59
2581
pass
60
2581
continue_stmt
61
2581
flow_stmt
76
2581
break
63
2581
del
64
2581
pass_stmt
65
2582
assert
funcdef -> def NAME ( ) : suite
2582
None
funcdef -> def NAME ( ) : suite
2582
False
funcdef -> def NAME ( ) : suite
2582
try
funcdef -> def NAME ( ) : suite
2582
break
funcdef -> def NAME ( ) : suite
2582
nonlocal
funcdef -> def NAME ( ) : suite
2582
for
funcdef -> def NAME ( ) : suite
2582
DEDENT
funcdef -> def NAME ( ) : suite
2582
if
funcdef -> def NAME ( ) : suite
2582
(
funcdef -> def NAME ( ) : suite
2582
def
funcdef -> def NAME ( ) : suite
2582
continue
funcdef -> def NAME ( ) : suite
2582
raise
funcdef -> def NAME ( ) : suite
2582
-
funcdef -> def NAME ( ) : suite
2582
NAME
funcdef -> def NAME ( ) : suite
2582
+
funcdef -> def NAME ( ) : suite
2582
del
funcdef -> def NAME ( ) : suite
2582
STRING
funcdef -> def NAME ( ) : suite
2582
NUMBER
funcdef -> def NAME ( ) : suite
2582
{
funcdef -> def NAME ( ) : suite
2582
~
funcdef -> def NAME ( ) : suite
2582
pass
funcdef -> def NAME ( ) : suite
2582
[
funcdef -> def NAME ( ) : suite
2582
while
funcdef -> def NAME ( ) : suite
2582
lambda
funcdef -> def NAME ( ) : suite
2582
return
funcdef -> def NAME ( ) : suite
2582
@
funcdef -> def NAME ( ) : suite
2582
with
funcdef -> def NAME ( ) : suite
2582
global
funcdef -> def NAME ( ) : suite
2582
yield
funcdef -> def NAME ( ) : suite
2582
class
funcdef -> def NAME ( ) : suite
2582
True
funcdef -> def NAME ( ) : suite
2582
not
funcdef -> def NAME ( ) : suite
2583
raise
for_stmt -> for expr_list in test_list : suite
2583
else
2609
2583
assert
for_stmt -> for expr_list in test_list : suite
2583
True
for_stmt -> for expr_list in test_list : suite
2583
lambda
for_stmt -> for expr_list in test_list : suite
2583
@
for_stmt -> for expr_list in test_list : suite
2583
continue
for_stmt -> for expr_list in test_list : suite
2583
+
for_stmt -> for expr_list in test_list : suite
2583
try
for_stmt -> for expr_list in test_list : suite
2583
with
for_stmt -> for expr_list in test_list : suite
2583
for
for_stmt -> for expr_list in test_list : suite
2583
-
for_stmt -> for expr_list in test_list : suite
2583
while
for_stmt -> for expr_list in test_list : suite
2583
~
for_stmt -> for expr_list in test_list : suite
2583
yield
for_stmt -> for expr_list in test_list : suite
2583
del
for_stmt -> for expr_list in test_list : suite
2583
pass
for_stmt -> for expr_list in test_list : suite
2583
(
for_stmt -> for expr_list in test_list : suite
2583
NUMBER
for_stmt -> for expr_list in test_list : suite
2583
NAME
for_stmt -> for expr_list in test_list : suite
2583
STRING
for_stmt -> for expr_list in test_list : suite
2583
{
for_stmt -> for expr_list in test_list : suite
2583
if
for_stmt -> for expr_list in test_list : suite
2583
def
for_stmt -> for expr_list in test_list : suite
2583
DEDENT
for_stmt -> for expr_list in test_list : suite
2583
[
for_stmt -> for expr_list in test_list : suite
2583
class
for_stmt -> for expr_list in test_list : suite
2583
global
for_stmt -> for expr_list in test_list : suite
2583
break
for_stmt -> for expr_list in test_list : suite
2583
return
for_stmt -> for expr_list in test_list : suite
2583
False
for_stmt -> for expr_list in test_list : suite
2583
None
for_stmt -> for expr_list in test_list : suite
2583
not
for_stmt -> for expr_list in test_list : suite
2583
nonlocal
for_stmt -> for expr_list in test_list : suite
2584
,
test -> or_test if or_test else test
2584
=
test -> or_test if or_test else test
2584
)
test -> or_test if or_test else test
2585
and_test
2058
2585
atom_expr
2059
2585
and_expr
2060
2585
term
2061
2585
factor
2062
2585
shift_expr
2063
2585
arith_expr
2064
2585
NUMBER
2065
2585
NAME
2066
2585
not
2067
2585
[
2068
2585
{
2069
2585
expr
2070
2585
False
2071
2585
xor_expr
2072
2585
STRING
2073
2585
+
2074
2585
True
2075
2585
-
2076
2585
(
2077
2585
None
2078
2585
comparison
2079
2585
power
2080
2585
atom
2081
2585
~
2082
2585
lambdef_nocond
2503
2585
test_nocond
2610
2585
not_test
2083
2585
or_test
2504
2585
lambda
2506
2586
if
lambdef_nocond -> lambda : test_nocond
2586
)
lambdef_nocond -> lambda : test_nocond
2586
for
lambdef_nocond -> lambda : test_nocond
2587
if
lambdef_nocond -> lambda varargslist : test_nocond
2587
for
lambdef_nocond -> lambda varargslist : test_nocond
2587
]
lambdef_nocond -> lambda varargslist : test_nocond
2588
and_test
217
2588
atom_expr
218
2588
and_expr
219
2588
term
220
2588
factor
221
2588
shift_expr
222
2588
arith_expr
223
2588
NUMBER
224
2588
NAME
225
2588
not
226
2588
[
227
2588
{
228
2588
expr
229
2588
not_test
231
2588
False
232
2588
xor_expr
234
2588
STRING
235
2588
atom
237
2588
+
238
2588
True
239
2588
-
240
2588
(
241
2588
None
242
2588
comparison
243
2588
power
244
2588
or_test
2519
2588
~
245
2588
lambdef_nocond
2520
2588
test_nocond
2611
2588
lambda
2522
2589
if
lambdef_nocond -> lambda : test_nocond
2589
)
lambdef_nocond -> lambda : test_nocond
2589
,
lambdef_nocond -> lambda : test_nocond
2589
for
lambdef_nocond -> lambda : test_nocond
2590
pass
while_stmt -> while test : suite else : suite
2590
yield
while_stmt -> while test : suite else : suite
2590
del
while_stmt -> while test : suite else : suite
2590
while
while_stmt -> while test : suite else : suite
2590
not
while_stmt -> while test : suite else : suite
2590
return
while_stmt -> while test : suite else : suite
2590
lambda
while_stmt -> while test : suite else : suite
2590
STRING
while_stmt -> while test : suite else : suite
2590
-
while_stmt -> while test : suite else : suite
2590
+
while_stmt -> while test : suite else : suite
2590
@
while_stmt -> while test : suite else : suite
2590
~
while_stmt -> while test : suite else : suite
2590
break
while_stmt -> while test : suite else : suite
2590
with
while_stmt -> while test : suite else : suite
2590
assert
while_stmt -> while test : suite else : suite
2590
global
while_stmt -> while test : suite else : suite
2590
try
while_stmt -> while test : suite else : suite
2590
{
while_stmt -> while test : suite else : suite
2590
DEDENT
while_stmt -> while test : suite else : suite
2590
raise
while_stmt -> while test : suite else : suite
2590
True
while_stmt -> while test : suite else : suite
2590
for
while_stmt -> while test : suite else : suite
2590
(
while_stmt -> while test : suite else : suite
2590
def
while_stmt -> while test : suite else : suite
2590
[
while_stmt -> while test : suite else : suite
2590
None
while_stmt -> while test : suite else : suite
2590
class
while_stmt -> while test : suite else : suite
2590
NAME
while_stmt -> while test : suite else : suite
2590
NUMBER
while_stmt -> while test : suite else : suite
2590
if
while_stmt -> while test : suite else : suite
2590
False
while_stmt -> while test : suite else : suite
2590
nonlocal
while_stmt -> while test : suite else : suite
2590
continue
while_stmt -> while test : suite else : suite
2591
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2591
del
suite -> NEWLINE INDENT stmt_list DEDENT
2591
@
suite -> NEWLINE INDENT stmt_list DEDENT
2591
for
suite -> NEWLINE INDENT stmt_list DEDENT
2591
def
suite -> NEWLINE INDENT stmt_list DEDENT
2591
{
suite -> NEWLINE INDENT stmt_list DEDENT
2591
try
suite -> NEWLINE INDENT stmt_list DEDENT
2591
with
suite -> NEWLINE INDENT stmt_list DEDENT
2591
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2591
global
suite -> NEWLINE INDENT stmt_list DEDENT
2591
break
suite -> NEWLINE INDENT stmt_list DEDENT
2591
False
suite -> NEWLINE INDENT stmt_list DEDENT
2591
[
suite -> NEWLINE INDENT stmt_list DEDENT
2591
while
suite -> NEWLINE INDENT stmt_list DEDENT
2591
True
suite -> NEWLINE INDENT stmt_list DEDENT
2591
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2591
class
suite -> NEWLINE INDENT stmt_list DEDENT
2591
not
suite -> NEWLINE INDENT stmt_list DEDENT
2591
~
suite -> NEWLINE INDENT stmt_list DEDENT
2591
-
suite -> NEWLINE INDENT stmt_list DEDENT
2591
None
suite -> NEWLINE INDENT stmt_list DEDENT
2591
(
suite -> NEWLINE INDENT stmt_list DEDENT
2591
return
suite -> NEWLINE INDENT stmt_list DEDENT
2591
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2591
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2591
if
suite -> NEWLINE INDENT stmt_list DEDENT
2591
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2591
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2591
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2591
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2591
else
suite -> NEWLINE INDENT stmt_list DEDENT
2591
+
suite -> NEWLINE INDENT stmt_list DEDENT
2591
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2591
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2592
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2592
del
suite -> NEWLINE INDENT stmt_list DEDENT
2592
@
suite -> NEWLINE INDENT stmt_list DEDENT
2592
for
suite -> NEWLINE INDENT stmt_list DEDENT
2592
def
suite -> NEWLINE INDENT stmt_list DEDENT
2592
{
suite -> NEWLINE INDENT stmt_list DEDENT
2592
try
suite -> NEWLINE INDENT stmt_list DEDENT
2592
with
suite -> NEWLINE INDENT stmt_list DEDENT
2592
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2592
global
suite -> NEWLINE INDENT stmt_list DEDENT
2592
break
suite -> NEWLINE INDENT stmt_list DEDENT
2592
False
suite -> NEWLINE INDENT stmt_list DEDENT
2592
[
suite -> NEWLINE INDENT stmt_list DEDENT
2592
while
suite -> NEWLINE INDENT stmt_list DEDENT
2592
True
suite -> NEWLINE INDENT stmt_list DEDENT
2592
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2592
class
suite -> NEWLINE INDENT stmt_list DEDENT
2592
not
suite -> NEWLINE INDENT stmt_list DEDENT
2592
~
suite -> NEWLINE INDENT stmt_list DEDENT
2592
-
suite -> NEWLINE INDENT stmt_list DEDENT
2592
None
suite -> NEWLINE INDENT stmt_list DEDENT
2592
(
suite -> NEWLINE INDENT stmt_list DEDENT
2592
return
suite -> NEWLINE INDENT stmt_list DEDENT
2592
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2592
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2592
if
suite -> NEWLINE INDENT stmt_list DEDENT
2592
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2592
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2592
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2592
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2592
+
suite -> NEWLINE INDENT stmt_list DEDENT
2592
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2592
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2593
DEDENT
classdef -> class NAME ( arglist ) : suite
2593
while
classdef -> class NAME ( arglist ) : suite
2593
yield
classdef -> class NAME ( arglist ) : suite
2593
global
classdef -> class NAME ( arglist ) : suite
2593
(
classdef -> class NAME ( arglist ) : suite
2593
class
classdef -> class NAME ( arglist ) : suite
2593
@
classdef -> class NAME ( arglist ) : suite
2593
None
classdef -> class NAME ( arglist ) : suite
2593
NUMBER
classdef -> class NAME ( arglist ) : suite
2593
False
classdef -> class NAME ( arglist ) : suite
2593
raise
classdef -> class NAME ( arglist ) : suite
2593
not
classdef -> class NAME ( arglist ) : suite
2593
lambda
classdef -> class NAME ( arglist ) : suite
2593
{
classdef -> class NAME ( arglist ) : suite
2593
+
classdef -> class NAME ( arglist ) : suite
2593
break
classdef -> class NAME ( arglist ) : suite
2593
nonlocal
classdef -> class NAME ( arglist ) : suite
2593
with
classdef -> class NAME ( arglist ) : suite
2593
continue
classdef -> class NAME ( arglist ) : suite
2593
def
classdef -> class NAME ( arglist ) : suite
2593
assert
classdef -> class NAME ( arglist ) : suite
2593
~
classdef -> class NAME ( arglist ) : suite
2593
NAME
classdef -> class NAME ( arglist ) : suite
2593
STRING
classdef -> class NAME ( arglist ) : suite
2593
-
classdef -> class NAME ( arglist ) : suite
2593
True
classdef -> class NAME ( arglist ) : suite
2593
if
classdef -> class NAME ( arglist ) : suite
2593
pass
classdef -> class NAME ( arglist ) : suite
2593
return
classdef -> class NAME ( arglist ) : suite
2593
del
classdef -> class NAME ( arglist ) : suite
2593
try
classdef -> class NAME ( arglist ) : suite
2593
[
classdef -> class NAME ( arglist ) : suite
2593
for
classdef -> class NAME ( arglist ) : suite
2594
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2594
del
suite -> NEWLINE INDENT stmt_list DEDENT
2594
@
suite -> NEWLINE INDENT stmt_list DEDENT
2594
for
suite -> NEWLINE INDENT stmt_list DEDENT
2594
def
suite -> NEWLINE INDENT stmt_list DEDENT
2594
{
suite -> NEWLINE INDENT stmt_list DEDENT
2594
try
suite -> NEWLINE INDENT stmt_list DEDENT
2594
with
suite -> NEWLINE INDENT stmt_list DEDENT
2594
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2594
global
suite -> NEWLINE INDENT stmt_list DEDENT
2594
break
suite -> NEWLINE INDENT stmt_list DEDENT
2594
False
suite -> NEWLINE INDENT stmt_list DEDENT
2594
[
suite -> NEWLINE INDENT stmt_list DEDENT
2594
while
suite -> NEWLINE INDENT stmt_list DEDENT
2594
True
suite -> NEWLINE INDENT stmt_list DEDENT
2594
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2594
class
suite -> NEWLINE INDENT stmt_list DEDENT
2594
not
suite -> NEWLINE INDENT stmt_list DEDENT
2594
~
suite -> NEWLINE INDENT stmt_list DEDENT
2594
-
suite -> NEWLINE INDENT stmt_list DEDENT
2594
elif
suite -> NEWLINE INDENT stmt_list DEDENT
2594
None
suite -> NEWLINE INDENT stmt_list DEDENT
2594
(
suite -> NEWLINE INDENT stmt_list DEDENT
2594
return
suite -> NEWLINE INDENT stmt_list DEDENT
2594
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2594
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2594
if
suite -> NEWLINE INDENT stmt_list DEDENT
2594
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2594
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2594
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2594
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2594
else
suite -> NEWLINE INDENT stmt_list DEDENT
2594
+
suite -> NEWLINE INDENT stmt_list DEDENT
2594
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2594
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2595
atom_expr
6
2595
factor
10
2595
[
3
2595
term
15
2595
STRING
43
2595
arith_expr
32
2595
NUMBER
8
2595
small_stmt
2444
2595
NAME
37
2595
{
5
2595
expr
7
2595
not
51
2595
True
9
2595
shift_expr
12
2595
atom
13
2595
xor_expr
14
2595
NEWLINE
2445
2595
(
34
2595
None
29
2595
and_test
20
2595
and_expr
21
2595
False
23
2595
or_test
25
2595
test
33
2595
lambda
28
2595
+
30
2595
suite
2612
2595
simple_stmt
2446
2595
nonlocal
66
2595
-
36
2595
not_test
40
2595
power
47
2595
lambdef
41
2595
~
44
2595
comparison
48
2595
assert
67
2595
global_stmt
68
2595
continue
49
2595
expr_stmt
50
2595
test_list
62
2595
raise
69
2595
del_stmt
52
2595
yield_stmt
53
2595
raise_stmt
70
2595
yield
56
2595
assert_stmt
57
2595
global
71
2595
nonlocal_stmt
72
2595
break_stmt
58
2595
return_stmt
75
2595
return
59
2595
pass
60
2595
continue_stmt
61
2595
flow_stmt
76
2595
break
63
2595
del
64
2595
pass_stmt
65
2596
atom_expr
6
2596
factor
10
2596
[
3
2596
term
15
2596
STRING
43
2596
arith_expr
32
2596
NUMBER
8
2596
small_stmt
1593
2596
NAME
37
2596
{
5
2596
expr
7
2596
not
51
2596
True
9
2596
shift_expr
12
2596
atom
13
2596
xor_expr
14
2596
NEWLINE
2439
2596
(
34
2596
None
29
2596
and_test
20
2596
and_expr
21
2596
False
23
2596
or_test
25
2596
test
33
2596
lambda
28
2596
suite
2613
2596
+
30
2596
simple_stmt
2440
2596
nonlocal
66
2596
-
36
2596
not_test
40
2596
power
47
2596
lambdef
41
2596
~
44
2596
comparison
48
2596
assert
67
2596
global_stmt
68
2596
continue
49
2596
expr_stmt
50
2596
test_list
62
2596
raise
69
2596
del_stmt
52
2596
yield_stmt
53
2596
raise_stmt
70
2596
yield
56
2596
assert_stmt
57
2596
global
71
2596
nonlocal_stmt
72
2596
break_stmt
58
2596
return_stmt
75
2596
return
59
2596
pass
60
2596
continue_stmt
61
2596
flow_stmt
76
2596
break
63
2596
del
64
2596
pass_stmt
65
2597
NEWLINE
2614
2598
for
try_stmt -> try : suite except_clause else : suite
2598
finally
2615
2598
def
try_stmt -> try : suite except_clause else : suite
2598
lambda
try_stmt -> try : suite except_clause else : suite
2598
@
try_stmt -> try : suite except_clause else : suite
2598
global
try_stmt -> try : suite except_clause else : suite
2598
nonlocal
try_stmt -> try : suite except_clause else : suite
2598
with
try_stmt -> try : suite except_clause else : suite
2598
try
try_stmt -> try : suite except_clause else : suite
2598
assert
try_stmt -> try : suite except_clause else : suite
2598
NAME
try_stmt -> try : suite except_clause else : suite
2598
{
try_stmt -> try : suite except_clause else : suite
2598
+
try_stmt -> try : suite except_clause else : suite
2598
True
try_stmt -> try : suite except_clause else : suite
2598
break
try_stmt -> try : suite except_clause else : suite
2598
return
try_stmt -> try : suite except_clause else : suite
2598
[
try_stmt -> try : suite except_clause else : suite
2598
STRING
try_stmt -> try : suite except_clause else : suite
2598
False
try_stmt -> try : suite except_clause else : suite
2598
pass
try_stmt -> try : suite except_clause else : suite
2598
~
try_stmt -> try : suite except_clause else : suite
2598
yield
try_stmt -> try : suite except_clause else : suite
2598
class
try_stmt -> try : suite except_clause else : suite
2598
raise
try_stmt -> try : suite except_clause else : suite
2598
None
try_stmt -> try : suite except_clause else : suite
2598
-
try_stmt -> try : suite except_clause else : suite
2598
while
try_stmt -> try : suite except_clause else : suite
2598
del
try_stmt -> try : suite except_clause else : suite
2598
DEDENT
try_stmt -> try : suite except_clause else : suite
2598
not
try_stmt -> try : suite except_clause else : suite
2598
(
try_stmt -> try : suite except_clause else : suite
2598
NUMBER
try_stmt -> try : suite except_clause else : suite
2598
if
try_stmt -> try : suite except_clause else : suite
2598
continue
try_stmt -> try : suite except_clause else : suite
2599
INDENT
2616
2600
continue
suite -> simple_stmt
2600
not
suite -> simple_stmt
2600
yield
suite -> simple_stmt
2600
for
suite -> simple_stmt
2600
False
suite -> simple_stmt
2600
NUMBER
suite -> simple_stmt
2600
with
suite -> simple_stmt
2600
lambda
suite -> simple_stmt
2600
{
suite -> simple_stmt
2600
None
suite -> simple_stmt
2600
DEDENT
suite -> simple_stmt
2600
(
suite -> simple_stmt
2600
while
suite -> simple_stmt
2600
if
suite -> simple_stmt
2600
try
suite -> simple_stmt
2600
NAME
suite -> simple_stmt
2600
True
suite -> simple_stmt
2600
global
suite -> simple_stmt
2600
STRING
suite -> simple_stmt
2600
pass
suite -> simple_stmt
2600
[
suite -> simple_stmt
2600
assert
suite -> simple_stmt
2600
raise
suite -> simple_stmt
2600
-
suite -> simple_stmt
2600
class
suite -> simple_stmt
2600
del
suite -> simple_stmt
2600
@
suite -> simple_stmt
2600
finally
suite -> simple_stmt
2600
~
suite -> simple_stmt
2600
+
suite -> simple_stmt
2600
return
suite -> simple_stmt
2600
break
suite -> simple_stmt
2600
nonlocal
suite -> simple_stmt
2600
def
suite -> simple_stmt
2601
-
try_stmt -> try : suite except_clause finally : suite
2601
(
try_stmt -> try : suite except_clause finally : suite
2601
{
try_stmt -> try : suite except_clause finally : suite
2601
not
try_stmt -> try : suite except_clause finally : suite
2601
~
try_stmt -> try : suite except_clause finally : suite
2601
class
try_stmt -> try : suite except_clause finally : suite
2601
pass
try_stmt -> try : suite except_clause finally : suite
2601
def
try_stmt -> try : suite except_clause finally : suite
2601
DEDENT
try_stmt -> try : suite except_clause finally : suite
2601
break
try_stmt -> try : suite except_clause finally : suite
2601
STRING
try_stmt -> try : suite except_clause finally : suite
2601
[
try_stmt -> try : suite except_clause finally : suite
2601
False
try_stmt -> try : suite except_clause finally : suite
2601
raise
try_stmt -> try : suite except_clause finally : suite
2601
nonlocal
try_stmt -> try : suite except_clause finally : suite
2601
with
try_stmt -> try : suite except_clause finally : suite
2601
NUMBER
try_stmt -> try : suite except_clause finally : suite
2601
NAME
try_stmt -> try : suite except_clause finally : suite
2601
while
try_stmt -> try : suite except_clause finally : suite
2601
if
try_stmt -> try : suite except_clause finally : suite
2601
assert
try_stmt -> try : suite except_clause finally : suite
2601
global
try_stmt -> try : suite except_clause finally : suite
2601
None
try_stmt -> try : suite except_clause finally : suite
2601
@
try_stmt -> try : suite except_clause finally : suite
2601
True
try_stmt -> try : suite except_clause finally : suite
2601
return
try_stmt -> try : suite except_clause finally : suite
2601
yield
try_stmt -> try : suite except_clause finally : suite
2601
del
try_stmt -> try : suite except_clause finally : suite
2601
+
try_stmt -> try : suite except_clause finally : suite
2601
lambda
try_stmt -> try : suite except_clause finally : suite
2601
for
try_stmt -> try : suite except_clause finally : suite
2601
try
try_stmt -> try : suite except_clause finally : suite
2601
continue
try_stmt -> try : suite except_clause finally : suite
2602
:
2617
2603
maybe_except_clause
2618
2603
except
2449
2603
break
maybe_except_clause -> 
2603
class
maybe_except_clause -> 
2603
except_clause
2607
2603
False
maybe_except_clause -> 
2603
for
maybe_except_clause -> 
2603
@
maybe_except_clause -> 
2603
lambda
maybe_except_clause -> 
2603
{
maybe_except_clause -> 
2603
while
maybe_except_clause -> 
2603
NUMBER
maybe_except_clause -> 
2603
def
maybe_except_clause -> 
2603
else
maybe_except_clause -> 
2603
-
maybe_except_clause -> 
2603
del
maybe_except_clause -> 
2603
None
maybe_except_clause -> 
2603
True
maybe_except_clause -> 
2603
STRING
maybe_except_clause -> 
2603
pass
maybe_except_clause -> 
2603
nonlocal
maybe_except_clause -> 
2603
+
maybe_except_clause -> 
2603
DEDENT
maybe_except_clause -> 
2603
try
maybe_except_clause -> 
2603
continue
maybe_except_clause -> 
2603
assert
maybe_except_clause -> 
2603
NAME
maybe_except_clause -> 
2603
~
maybe_except_clause -> 
2603
[
maybe_except_clause -> 
2603
if
maybe_except_clause -> 
2603
return
maybe_except_clause -> 
2603
raise
maybe_except_clause -> 
2603
yield
maybe_except_clause -> 
2603
(
maybe_except_clause -> 
2603
finally
maybe_except_clause -> 
2603
not
maybe_except_clause -> 
2603
with
maybe_except_clause -> 
2603
global
maybe_except_clause -> 
2604
lambda
simple_stmt -> small_stmt NEWLINE
2604
yield
simple_stmt -> small_stmt NEWLINE
2604
NAME
simple_stmt -> small_stmt NEWLINE
2604
STRING
simple_stmt -> small_stmt NEWLINE
2604
pass
simple_stmt -> small_stmt NEWLINE
2604
None
simple_stmt -> small_stmt NEWLINE
2604
(
simple_stmt -> small_stmt NEWLINE
2604
assert
simple_stmt -> small_stmt NEWLINE
2604
@
simple_stmt -> small_stmt NEWLINE
2604
def
simple_stmt -> small_stmt NEWLINE
2604
if
simple_stmt -> small_stmt NEWLINE
2604
+
simple_stmt -> small_stmt NEWLINE
2604
continue
simple_stmt -> small_stmt NEWLINE
2604
not
simple_stmt -> small_stmt NEWLINE
2604
try
simple_stmt -> small_stmt NEWLINE
2604
False
simple_stmt -> small_stmt NEWLINE
2604
with
simple_stmt -> small_stmt NEWLINE
2604
else
simple_stmt -> small_stmt NEWLINE
2604
global
simple_stmt -> small_stmt NEWLINE
2604
return
simple_stmt -> small_stmt NEWLINE
2604
raise
simple_stmt -> small_stmt NEWLINE
2604
except
simple_stmt -> small_stmt NEWLINE
2604
True
simple_stmt -> small_stmt NEWLINE
2604
-
simple_stmt -> small_stmt NEWLINE
2604
del
simple_stmt -> small_stmt NEWLINE
2604
DEDENT
simple_stmt -> small_stmt NEWLINE
2604
NUMBER
simple_stmt -> small_stmt NEWLINE
2604
{
simple_stmt -> small_stmt NEWLINE
2604
for
simple_stmt -> small_stmt NEWLINE
2604
class
simple_stmt -> small_stmt NEWLINE
2604
break
simple_stmt -> small_stmt NEWLINE
2604
[
simple_stmt -> small_stmt NEWLINE
2604
nonlocal
simple_stmt -> small_stmt NEWLINE
2604
while
simple_stmt -> small_stmt NEWLINE
2604
~
simple_stmt -> small_stmt NEWLINE
2604
finally
simple_stmt -> small_stmt NEWLINE
2605
while
1591
2605
decorators
1592
2605
[
3
2605
small_stmt
1593
2605
stmt_list
2619
2605
{
5
2605
atom_expr
6
2605
expr
7
2605
NUMBER
8
2605
True
9
2605
factor
10
2605
class
1594
2605
shift_expr
12
2605
atom
13
2605
xor_expr
14
2605
term
15
2605
if
1595
2605
try
1596
2605
with
1597
2605
decorated
1598
2605
and_test
20
2605
and_expr
21
2605
for_stmt
1599
2605
False
23
2605
def
1600
2605
or_test
25
2605
with_stmt
1601
2605
funcdef
1602
2605
lambda
28
2605
try_stmt
1603
2605
None
29
2605
+
30
2605
if_stmt
1604
2605
arith_expr
32
2605
test
33
2605
(
34
2605
compound_stmt
1605
2605
-
36
2605
NAME
37
2605
while_stmt
1606
2605
not_test
40
2605
lambdef
41
2605
for
1607
2605
STRING
43
2605
~
44
2605
simple_stmt
1608
2605
classdef
1609
2605
power
47
2605
comparison
48
2605
continue
49
2605
expr_stmt
50
2605
not
51
2605
del_stmt
52
2605
yield_stmt
53
2605
@
54
2605
decorator
55
2605
yield
56
2605
assert_stmt
57
2605
break_stmt
58
2605
return
59
2605
pass
60
2605
continue_stmt
61
2605
test_list
62
2605
break
63
2605
del
64
2605
pass_stmt
65
2605
nonlocal
66
2605
assert
67
2605
global_stmt
68
2605
raise
69
2605
stmt
1611
2605
raise_stmt
70
2605
global
71
2605
nonlocal_stmt
72
2605
return_stmt
75
2605
flow_stmt
76
2606
def
except_clause -> except : suite maybe_except_clause
2606
assert
except_clause -> except : suite maybe_except_clause
2606
global
except_clause -> except : suite maybe_except_clause
2606
raise
except_clause -> except : suite maybe_except_clause
2606
while
except_clause -> except : suite maybe_except_clause
2606
~
except_clause -> except : suite maybe_except_clause
2606
True
except_clause -> except : suite maybe_except_clause
2606
break
except_clause -> except : suite maybe_except_clause
2606
[
except_clause -> except : suite maybe_except_clause
2606
False
except_clause -> except : suite maybe_except_clause
2606
NAME
except_clause -> except : suite maybe_except_clause
2606
None
except_clause -> except : suite maybe_except_clause
2606
NUMBER
except_clause -> except : suite maybe_except_clause
2606
with
except_clause -> except : suite maybe_except_clause
2606
STRING
except_clause -> except : suite maybe_except_clause
2606
else
except_clause -> except : suite maybe_except_clause
2606
if
except_clause -> except : suite maybe_except_clause
2606
return
except_clause -> except : suite maybe_except_clause
2606
pass
except_clause -> except : suite maybe_except_clause
2606
try
except_clause -> except : suite maybe_except_clause
2606
DEDENT
except_clause -> except : suite maybe_except_clause
2606
lambda
except_clause -> except : suite maybe_except_clause
2606
+
except_clause -> except : suite maybe_except_clause
2606
-
except_clause -> except : suite maybe_except_clause
2606
class
except_clause -> except : suite maybe_except_clause
2606
{
except_clause -> except : suite maybe_except_clause
2606
continue
except_clause -> except : suite maybe_except_clause
2606
nonlocal
except_clause -> except : suite maybe_except_clause
2606
del
except_clause -> except : suite maybe_except_clause
2606
@
except_clause -> except : suite maybe_except_clause
2606
finally
except_clause -> except : suite maybe_except_clause
2606
not
except_clause -> except : suite maybe_except_clause
2606
yield
except_clause -> except : suite maybe_except_clause
2606
for
except_clause -> except : suite maybe_except_clause
2606
(
except_clause -> except : suite maybe_except_clause
2607
NAME
maybe_except_clause -> except_clause
2607
class
maybe_except_clause -> except_clause
2607
STRING
maybe_except_clause -> except_clause
2607
[
maybe_except_clause -> except_clause
2607
NUMBER
maybe_except_clause -> except_clause
2607
try
maybe_except_clause -> except_clause
2607
return
maybe_except_clause -> except_clause
2607
finally
maybe_except_clause -> except_clause
2607
while
maybe_except_clause -> except_clause
2607
global
maybe_except_clause -> except_clause
2607
else
maybe_except_clause -> except_clause
2607
if
maybe_except_clause -> except_clause
2607
-
maybe_except_clause -> except_clause
2607
continue
maybe_except_clause -> except_clause
2607
not
maybe_except_clause -> except_clause
2607
False
maybe_except_clause -> except_clause
2607
None
maybe_except_clause -> except_clause
2607
assert
maybe_except_clause -> except_clause
2607
DEDENT
maybe_except_clause -> except_clause
2607
lambda
maybe_except_clause -> except_clause
2607
raise
maybe_except_clause -> except_clause
2607
yield
maybe_except_clause -> except_clause
2607
True
maybe_except_clause -> except_clause
2607
break
maybe_except_clause -> except_clause
2607
pass
maybe_except_clause -> except_clause
2607
~
maybe_except_clause -> except_clause
2607
def
maybe_except_clause -> except_clause
2607
for
maybe_except_clause -> except_clause
2607
@
maybe_except_clause -> except_clause
2607
(
maybe_except_clause -> except_clause
2607
+
maybe_except_clause -> except_clause
2607
{
maybe_except_clause -> except_clause
2607
with
maybe_except_clause -> except_clause
2607
nonlocal
maybe_except_clause -> except_clause
2607
del
maybe_except_clause -> except_clause
2608
STRING
funcdef -> def NAME ( parameters ) : suite
2608
break
funcdef -> def NAME ( parameters ) : suite
2608
(
funcdef -> def NAME ( parameters ) : suite
2608
if
funcdef -> def NAME ( parameters ) : suite
2608
pass
funcdef -> def NAME ( parameters ) : suite
2608
for
funcdef -> def NAME ( parameters ) : suite
2608
while
funcdef -> def NAME ( parameters ) : suite
2608
del
funcdef -> def NAME ( parameters ) : suite
2608
continue
funcdef -> def NAME ( parameters ) : suite
2608
True
funcdef -> def NAME ( parameters ) : suite
2608
nonlocal
funcdef -> def NAME ( parameters ) : suite
2608
NUMBER
funcdef -> def NAME ( parameters ) : suite
2608
{
funcdef -> def NAME ( parameters ) : suite
2608
@
funcdef -> def NAME ( parameters ) : suite
2608
assert
funcdef -> def NAME ( parameters ) : suite
2608
None
funcdef -> def NAME ( parameters ) : suite
2608
False
funcdef -> def NAME ( parameters ) : suite
2608
try
funcdef -> def NAME ( parameters ) : suite
2608
[
funcdef -> def NAME ( parameters ) : suite
2608
DEDENT
funcdef -> def NAME ( parameters ) : suite
2608
with
funcdef -> def NAME ( parameters ) : suite
2608
-
funcdef -> def NAME ( parameters ) : suite
2608
def
funcdef -> def NAME ( parameters ) : suite
2608
class
funcdef -> def NAME ( parameters ) : suite
2608
lambda
funcdef -> def NAME ( parameters ) : suite
2608
raise
funcdef -> def NAME ( parameters ) : suite
2608
not
funcdef -> def NAME ( parameters ) : suite
2608
NAME
funcdef -> def NAME ( parameters ) : suite
2608
return
funcdef -> def NAME ( parameters ) : suite
2608
global
funcdef -> def NAME ( parameters ) : suite
2608
yield
funcdef -> def NAME ( parameters ) : suite
2608
~
funcdef -> def NAME ( parameters ) : suite
2608
+
funcdef -> def NAME ( parameters ) : suite
2609
:
2620
2610
if
lambdef_nocond -> lambda varargslist : test_nocond
2610
)
lambdef_nocond -> lambda varargslist : test_nocond
2610
for
lambdef_nocond -> lambda varargslist : test_nocond
2611
if
lambdef_nocond -> lambda varargslist : test_nocond
2611
)
lambdef_nocond -> lambda varargslist : test_nocond
2611
for
lambdef_nocond -> lambda varargslist : test_nocond
2611
,
lambdef_nocond -> lambda varargslist : test_nocond
2612
not
elif_clause -> 
2612
elif_clause
2621
2612
elif
2537
2612
continue
elif_clause -> 
2612
nonlocal
elif_clause -> 
2612
else
elif_clause -> 
2612
[
elif_clause -> 
2612
-
elif_clause -> 
2612
break
elif_clause -> 
2612
pass
elif_clause -> 
2612
{
elif_clause -> 
2612
with
elif_clause -> 
2612
None
elif_clause -> 
2612
lambda
elif_clause -> 
2612
try
elif_clause -> 
2612
return
elif_clause -> 
2612
raise
elif_clause -> 
2612
~
elif_clause -> 
2612
while
elif_clause -> 
2612
(
elif_clause -> 
2612
NUMBER
elif_clause -> 
2612
+
elif_clause -> 
2612
del
elif_clause -> 
2612
NAME
elif_clause -> 
2612
assert
elif_clause -> 
2612
class
elif_clause -> 
2612
@
elif_clause -> 
2612
STRING
elif_clause -> 
2612
global
elif_clause -> 
2612
True
elif_clause -> 
2612
for
elif_clause -> 
2612
def
elif_clause -> 
2612
yield
elif_clause -> 
2612
False
elif_clause -> 
2612
DEDENT
elif_clause -> 
2612
if
elif_clause -> 
2613
break
if_stmt -> if test : suite elif_clause else : suite
2613
continue
if_stmt -> if test : suite elif_clause else : suite
2613
None
if_stmt -> if test : suite elif_clause else : suite
2613
assert
if_stmt -> if test : suite elif_clause else : suite
2613
nonlocal
if_stmt -> if test : suite elif_clause else : suite
2613
-
if_stmt -> if test : suite elif_clause else : suite
2613
if
if_stmt -> if test : suite elif_clause else : suite
2613
return
if_stmt -> if test : suite elif_clause else : suite
2613
True
if_stmt -> if test : suite elif_clause else : suite
2613
try
if_stmt -> if test : suite elif_clause else : suite
2613
(
if_stmt -> if test : suite elif_clause else : suite
2613
+
if_stmt -> if test : suite elif_clause else : suite
2613
not
if_stmt -> if test : suite elif_clause else : suite
2613
DEDENT
if_stmt -> if test : suite elif_clause else : suite
2613
NAME
if_stmt -> if test : suite elif_clause else : suite
2613
while
if_stmt -> if test : suite elif_clause else : suite
2613
pass
if_stmt -> if test : suite elif_clause else : suite
2613
@
if_stmt -> if test : suite elif_clause else : suite
2613
NUMBER
if_stmt -> if test : suite elif_clause else : suite
2613
yield
if_stmt -> if test : suite elif_clause else : suite
2613
{
if_stmt -> if test : suite elif_clause else : suite
2613
with
if_stmt -> if test : suite elif_clause else : suite
2613
~
if_stmt -> if test : suite elif_clause else : suite
2613
del
if_stmt -> if test : suite elif_clause else : suite
2613
STRING
if_stmt -> if test : suite elif_clause else : suite
2613
False
if_stmt -> if test : suite elif_clause else : suite
2613
lambda
if_stmt -> if test : suite elif_clause else : suite
2613
class
if_stmt -> if test : suite elif_clause else : suite
2613
raise
if_stmt -> if test : suite elif_clause else : suite
2613
for
if_stmt -> if test : suite elif_clause else : suite
2613
global
if_stmt -> if test : suite elif_clause else : suite
2613
[
if_stmt -> if test : suite elif_clause else : suite
2613
def
if_stmt -> if test : suite elif_clause else : suite
2614
lambda
simple_stmt -> small_stmt NEWLINE
2614
yield
simple_stmt -> small_stmt NEWLINE
2614
NAME
simple_stmt -> small_stmt NEWLINE
2614
STRING
simple_stmt -> small_stmt NEWLINE
2614
pass
simple_stmt -> small_stmt NEWLINE
2614
None
simple_stmt -> small_stmt NEWLINE
2614
(
simple_stmt -> small_stmt NEWLINE
2614
assert
simple_stmt -> small_stmt NEWLINE
2614
@
simple_stmt -> small_stmt NEWLINE
2614
def
simple_stmt -> small_stmt NEWLINE
2614
if
simple_stmt -> small_stmt NEWLINE
2614
+
simple_stmt -> small_stmt NEWLINE
2614
continue
simple_stmt -> small_stmt NEWLINE
2614
not
simple_stmt -> small_stmt NEWLINE
2614
try
simple_stmt -> small_stmt NEWLINE
2614
False
simple_stmt -> small_stmt NEWLINE
2614
with
simple_stmt -> small_stmt NEWLINE
2614
global
simple_stmt -> small_stmt NEWLINE
2614
return
simple_stmt -> small_stmt NEWLINE
2614
raise
simple_stmt -> small_stmt NEWLINE
2614
True
simple_stmt -> small_stmt NEWLINE
2614
-
simple_stmt -> small_stmt NEWLINE
2614
del
simple_stmt -> small_stmt NEWLINE
2614
DEDENT
simple_stmt -> small_stmt NEWLINE
2614
NUMBER
simple_stmt -> small_stmt NEWLINE
2614
{
simple_stmt -> small_stmt NEWLINE
2614
for
simple_stmt -> small_stmt NEWLINE
2614
class
simple_stmt -> small_stmt NEWLINE
2614
break
simple_stmt -> small_stmt NEWLINE
2614
[
simple_stmt -> small_stmt NEWLINE
2614
nonlocal
simple_stmt -> small_stmt NEWLINE
2614
while
simple_stmt -> small_stmt NEWLINE
2614
~
simple_stmt -> small_stmt NEWLINE
2614
finally
simple_stmt -> small_stmt NEWLINE
2615
:
2622
2616
while
1591
2616
decorators
1592
2616
[
3
2616
small_stmt
1593
2616
stmt_list
2623
2616
{
5
2616
atom_expr
6
2616
expr
7
2616
NUMBER
8
2616
True
9
2616
factor
10
2616
class
1594
2616
shift_expr
12
2616
atom
13
2616
xor_expr
14
2616
term
15
2616
if
1595
2616
try
1596
2616
with
1597
2616
decorated
1598
2616
and_test
20
2616
and_expr
21
2616
for_stmt
1599
2616
False
23
2616
def
1600
2616
or_test
25
2616
with_stmt
1601
2616
funcdef
1602
2616
lambda
28
2616
try_stmt
1603
2616
None
29
2616
+
30
2616
if_stmt
1604
2616
arith_expr
32
2616
test
33
2616
(
34
2616
compound_stmt
1605
2616
-
36
2616
NAME
37
2616
while_stmt
1606
2616
not_test
40
2616
lambdef
41
2616
for
1607
2616
STRING
43
2616
~
44
2616
simple_stmt
1608
2616
classdef
1609
2616
power
47
2616
comparison
48
2616
continue
49
2616
expr_stmt
50
2616
not
51
2616
del_stmt
52
2616
yield_stmt
53
2616
@
54
2616
decorator
55
2616
yield
56
2616
assert_stmt
57
2616
break_stmt
58
2616
return
59
2616
pass
60
2616
continue_stmt
61
2616
test_list
62
2616
break
63
2616
del
64
2616
pass_stmt
65
2616
nonlocal
66
2616
assert
67
2616
global_stmt
68
2616
raise
69
2616
stmt
1611
2616
raise_stmt
70
2616
global
71
2616
nonlocal_stmt
72
2616
return_stmt
75
2616
flow_stmt
76
2617
atom_expr
6
2617
factor
10
2617
[
3
2617
suite
2624
2617
term
15
2617
STRING
43
2617
arith_expr
32
2617
NUMBER
8
2617
small_stmt
2577
2617
NAME
37
2617
{
5
2617
expr
7
2617
not
51
2617
True
9
2617
shift_expr
12
2617
atom
13
2617
xor_expr
14
2617
NEWLINE
2578
2617
(
34
2617
None
29
2617
and_test
20
2617
and_expr
21
2617
False
23
2617
or_test
25
2617
test
33
2617
lambda
28
2617
+
30
2617
simple_stmt
2579
2617
nonlocal
66
2617
-
36
2617
not_test
40
2617
power
47
2617
lambdef
41
2617
~
44
2617
comparison
48
2617
assert
67
2617
global_stmt
68
2617
continue
49
2617
expr_stmt
50
2617
test_list
62
2617
raise
69
2617
del_stmt
52
2617
yield_stmt
53
2617
raise_stmt
70
2617
yield
56
2617
assert_stmt
57
2617
global
71
2617
nonlocal_stmt
72
2617
break_stmt
58
2617
return_stmt
75
2617
return
59
2617
pass
60
2617
continue_stmt
61
2617
flow_stmt
76
2617
break
63
2617
del
64
2617
pass_stmt
65
2618
else
except_clause -> except test : suite maybe_except_clause
2618
global
except_clause -> except test : suite maybe_except_clause
2618
[
except_clause -> except test : suite maybe_except_clause
2618
-
except_clause -> except test : suite maybe_except_clause
2618
{
except_clause -> except test : suite maybe_except_clause
2618
assert
except_clause -> except test : suite maybe_except_clause
2618
raise
except_clause -> except test : suite maybe_except_clause
2618
True
except_clause -> except test : suite maybe_except_clause
2618
None
except_clause -> except test : suite maybe_except_clause
2618
continue
except_clause -> except test : suite maybe_except_clause
2618
@
except_clause -> except test : suite maybe_except_clause
2618
+
except_clause -> except test : suite maybe_except_clause
2618
pass
except_clause -> except test : suite maybe_except_clause
2618
def
except_clause -> except test : suite maybe_except_clause
2618
finally
except_clause -> except test : suite maybe_except_clause
2618
NAME
except_clause -> except test : suite maybe_except_clause
2618
break
except_clause -> except test : suite maybe_except_clause
2618
False
except_clause -> except test : suite maybe_except_clause
2618
with
except_clause -> except test : suite maybe_except_clause
2618
for
except_clause -> except test : suite maybe_except_clause
2618
return
except_clause -> except test : suite maybe_except_clause
2618
DEDENT
except_clause -> except test : suite maybe_except_clause
2618
del
except_clause -> except test : suite maybe_except_clause
2618
not
except_clause -> except test : suite maybe_except_clause
2618
while
except_clause -> except test : suite maybe_except_clause
2618
if
except_clause -> except test : suite maybe_except_clause
2618
~
except_clause -> except test : suite maybe_except_clause
2618
NUMBER
except_clause -> except test : suite maybe_except_clause
2618
try
except_clause -> except test : suite maybe_except_clause
2618
STRING
except_clause -> except test : suite maybe_except_clause
2618
lambda
except_clause -> except test : suite maybe_except_clause
2618
(
except_clause -> except test : suite maybe_except_clause
2618
nonlocal
except_clause -> except test : suite maybe_except_clause
2618
yield
except_clause -> except test : suite maybe_except_clause
2618
class
except_clause -> except test : suite maybe_except_clause
2619
DEDENT
2625
2620
atom_expr
6
2620
factor
10
2620
[
3
2620
term
15
2620
STRING
43
2620
arith_expr
32
2620
NUMBER
8
2620
small_stmt
1593
2620
NAME
37
2620
{
5
2620
expr
7
2620
not
51
2620
True
9
2620
shift_expr
12
2620
atom
13
2620
xor_expr
14
2620
NEWLINE
2439
2620
(
34
2620
None
29
2620
and_test
20
2620
and_expr
21
2620
False
23
2620
or_test
25
2620
test
33
2620
suite
2626
2620
lambda
28
2620
+
30
2620
simple_stmt
2440
2620
nonlocal
66
2620
-
36
2620
not_test
40
2620
power
47
2620
lambdef
41
2620
~
44
2620
comparison
48
2620
assert
67
2620
global_stmt
68
2620
continue
49
2620
expr_stmt
50
2620
test_list
62
2620
raise
69
2620
del_stmt
52
2620
yield_stmt
53
2620
raise_stmt
70
2620
yield
56
2620
assert_stmt
57
2620
global
71
2620
nonlocal_stmt
72
2620
break_stmt
58
2620
return_stmt
75
2620
return
59
2620
pass
60
2620
continue_stmt
61
2620
flow_stmt
76
2620
break
63
2620
del
64
2620
pass_stmt
65
2621
nonlocal
elif_clause -> elif test : suite elif_clause
2621
False
elif_clause -> elif test : suite elif_clause
2621
NAME
elif_clause -> elif test : suite elif_clause
2621
yield
elif_clause -> elif test : suite elif_clause
2621
lambda
elif_clause -> elif test : suite elif_clause
2621
global
elif_clause -> elif test : suite elif_clause
2621
+
elif_clause -> elif test : suite elif_clause
2621
if
elif_clause -> elif test : suite elif_clause
2621
assert
elif_clause -> elif test : suite elif_clause
2621
else
elif_clause -> elif test : suite elif_clause
2621
class
elif_clause -> elif test : suite elif_clause
2621
del
elif_clause -> elif test : suite elif_clause
2621
while
elif_clause -> elif test : suite elif_clause
2621
True
elif_clause -> elif test : suite elif_clause
2621
-
elif_clause -> elif test : suite elif_clause
2621
None
elif_clause -> elif test : suite elif_clause
2621
with
elif_clause -> elif test : suite elif_clause
2621
{
elif_clause -> elif test : suite elif_clause
2621
@
elif_clause -> elif test : suite elif_clause
2621
def
elif_clause -> elif test : suite elif_clause
2621
return
elif_clause -> elif test : suite elif_clause
2621
STRING
elif_clause -> elif test : suite elif_clause
2621
DEDENT
elif_clause -> elif test : suite elif_clause
2621
raise
elif_clause -> elif test : suite elif_clause
2621
pass
elif_clause -> elif test : suite elif_clause
2621
continue
elif_clause -> elif test : suite elif_clause
2621
[
elif_clause -> elif test : suite elif_clause
2621
try
elif_clause -> elif test : suite elif_clause
2621
break
elif_clause -> elif test : suite elif_clause
2621
NUMBER
elif_clause -> elif test : suite elif_clause
2621
~
elif_clause -> elif test : suite elif_clause
2621
for
elif_clause -> elif test : suite elif_clause
2621
(
elif_clause -> elif test : suite elif_clause
2621
not
elif_clause -> elif test : suite elif_clause
2622
atom_expr
6
2622
factor
10
2622
[
3
2622
term
15
2622
STRING
43
2622
arith_expr
32
2622
NUMBER
8
2622
small_stmt
1593
2622
NAME
37
2622
{
5
2622
expr
7
2622
not
51
2622
True
9
2622
shift_expr
12
2622
atom
13
2622
xor_expr
14
2622
suite
2627
2622
NEWLINE
2439
2622
(
34
2622
None
29
2622
and_test
20
2622
and_expr
21
2622
False
23
2622
or_test
25
2622
test
33
2622
lambda
28
2622
+
30
2622
simple_stmt
2440
2622
nonlocal
66
2622
-
36
2622
not_test
40
2622
power
47
2622
lambdef
41
2622
~
44
2622
comparison
48
2622
assert
67
2622
global_stmt
68
2622
continue
49
2622
expr_stmt
50
2622
test_list
62
2622
raise
69
2622
del_stmt
52
2622
yield_stmt
53
2622
raise_stmt
70
2622
yield
56
2622
assert_stmt
57
2622
global
71
2622
nonlocal_stmt
72
2622
break_stmt
58
2622
return_stmt
75
2622
return
59
2622
pass
60
2622
continue_stmt
61
2622
flow_stmt
76
2622
break
63
2622
del
64
2622
pass_stmt
65
2623
DEDENT
2628
2624
maybe_except_clause
2629
2624
except
2449
2624
break
maybe_except_clause -> 
2624
class
maybe_except_clause -> 
2624
except_clause
2607
2624
False
maybe_except_clause -> 
2624
for
maybe_except_clause -> 
2624
@
maybe_except_clause -> 
2624
lambda
maybe_except_clause -> 
2624
{
maybe_except_clause -> 
2624
while
maybe_except_clause -> 
2624
NUMBER
maybe_except_clause -> 
2624
def
maybe_except_clause -> 
2624
else
maybe_except_clause -> 
2624
-
maybe_except_clause -> 
2624
del
maybe_except_clause -> 
2624
None
maybe_except_clause -> 
2624
True
maybe_except_clause -> 
2624
STRING
maybe_except_clause -> 
2624
pass
maybe_except_clause -> 
2624
nonlocal
maybe_except_clause -> 
2624
+
maybe_except_clause -> 
2624
DEDENT
maybe_except_clause -> 
2624
try
maybe_except_clause -> 
2624
continue
maybe_except_clause -> 
2624
assert
maybe_except_clause -> 
2624
NAME
maybe_except_clause -> 
2624
~
maybe_except_clause -> 
2624
[
maybe_except_clause -> 
2624
if
maybe_except_clause -> 
2624
return
maybe_except_clause -> 
2624
raise
maybe_except_clause -> 
2624
yield
maybe_except_clause -> 
2624
(
maybe_except_clause -> 
2624
finally
maybe_except_clause -> 
2624
not
maybe_except_clause -> 
2624
with
maybe_except_clause -> 
2624
global
maybe_except_clause -> 
2625
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2625
except
suite -> NEWLINE INDENT stmt_list DEDENT
2625
del
suite -> NEWLINE INDENT stmt_list DEDENT
2625
@
suite -> NEWLINE INDENT stmt_list DEDENT
2625
for
suite -> NEWLINE INDENT stmt_list DEDENT
2625
def
suite -> NEWLINE INDENT stmt_list DEDENT
2625
{
suite -> NEWLINE INDENT stmt_list DEDENT
2625
try
suite -> NEWLINE INDENT stmt_list DEDENT
2625
with
suite -> NEWLINE INDENT stmt_list DEDENT
2625
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2625
global
suite -> NEWLINE INDENT stmt_list DEDENT
2625
break
suite -> NEWLINE INDENT stmt_list DEDENT
2625
False
suite -> NEWLINE INDENT stmt_list DEDENT
2625
[
suite -> NEWLINE INDENT stmt_list DEDENT
2625
while
suite -> NEWLINE INDENT stmt_list DEDENT
2625
True
suite -> NEWLINE INDENT stmt_list DEDENT
2625
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2625
class
suite -> NEWLINE INDENT stmt_list DEDENT
2625
not
suite -> NEWLINE INDENT stmt_list DEDENT
2625
~
suite -> NEWLINE INDENT stmt_list DEDENT
2625
-
suite -> NEWLINE INDENT stmt_list DEDENT
2625
None
suite -> NEWLINE INDENT stmt_list DEDENT
2625
(
suite -> NEWLINE INDENT stmt_list DEDENT
2625
return
suite -> NEWLINE INDENT stmt_list DEDENT
2625
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2625
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2625
if
suite -> NEWLINE INDENT stmt_list DEDENT
2625
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2625
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2625
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2625
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2625
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2625
else
suite -> NEWLINE INDENT stmt_list DEDENT
2625
+
suite -> NEWLINE INDENT stmt_list DEDENT
2625
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2625
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2626
return
for_stmt -> for expr_list in test_list : suite else : suite
2626
STRING
for_stmt -> for expr_list in test_list : suite else : suite
2626
class
for_stmt -> for expr_list in test_list : suite else : suite
2626
NAME
for_stmt -> for expr_list in test_list : suite else : suite
2626
[
for_stmt -> for expr_list in test_list : suite else : suite
2626
DEDENT
for_stmt -> for expr_list in test_list : suite else : suite
2626
@
for_stmt -> for expr_list in test_list : suite else : suite
2626
if
for_stmt -> for expr_list in test_list : suite else : suite
2626
break
for_stmt -> for expr_list in test_list : suite else : suite
2626
(
for_stmt -> for expr_list in test_list : suite else : suite
2626
not
for_stmt -> for expr_list in test_list : suite else : suite
2626
assert
for_stmt -> for expr_list in test_list : suite else : suite
2626
while
for_stmt -> for expr_list in test_list : suite else : suite
2626
NUMBER
for_stmt -> for expr_list in test_list : suite else : suite
2626
pass
for_stmt -> for expr_list in test_list : suite else : suite
2626
{
for_stmt -> for expr_list in test_list : suite else : suite
2626
lambda
for_stmt -> for expr_list in test_list : suite else : suite
2626
for
for_stmt -> for expr_list in test_list : suite else : suite
2626
None
for_stmt -> for expr_list in test_list : suite else : suite
2626
global
for_stmt -> for expr_list in test_list : suite else : suite
2626
yield
for_stmt -> for expr_list in test_list : suite else : suite
2626
del
for_stmt -> for expr_list in test_list : suite else : suite
2626
+
for_stmt -> for expr_list in test_list : suite else : suite
2626
~
for_stmt -> for expr_list in test_list : suite else : suite
2626
False
for_stmt -> for expr_list in test_list : suite else : suite
2626
def
for_stmt -> for expr_list in test_list : suite else : suite
2626
try
for_stmt -> for expr_list in test_list : suite else : suite
2626
raise
for_stmt -> for expr_list in test_list : suite else : suite
2626
nonlocal
for_stmt -> for expr_list in test_list : suite else : suite
2626
-
for_stmt -> for expr_list in test_list : suite else : suite
2626
True
for_stmt -> for expr_list in test_list : suite else : suite
2626
continue
for_stmt -> for expr_list in test_list : suite else : suite
2626
with
for_stmt -> for expr_list in test_list : suite else : suite
2627
False
try_stmt -> try : suite except_clause else : suite finally : suite
2627
del
try_stmt -> try : suite except_clause else : suite finally : suite
2627
NUMBER
try_stmt -> try : suite except_clause else : suite finally : suite
2627
None
try_stmt -> try : suite except_clause else : suite finally : suite
2627
if
try_stmt -> try : suite except_clause else : suite finally : suite
2627
assert
try_stmt -> try : suite except_clause else : suite finally : suite
2627
not
try_stmt -> try : suite except_clause else : suite finally : suite
2627
STRING
try_stmt -> try : suite except_clause else : suite finally : suite
2627
yield
try_stmt -> try : suite except_clause else : suite finally : suite
2627
lambda
try_stmt -> try : suite except_clause else : suite finally : suite
2627
break
try_stmt -> try : suite except_clause else : suite finally : suite
2627
~
try_stmt -> try : suite except_clause else : suite finally : suite
2627
raise
try_stmt -> try : suite except_clause else : suite finally : suite
2627
True
try_stmt -> try : suite except_clause else : suite finally : suite
2627
pass
try_stmt -> try : suite except_clause else : suite finally : suite
2627
def
try_stmt -> try : suite except_clause else : suite finally : suite
2627
(
try_stmt -> try : suite except_clause else : suite finally : suite
2627
-
try_stmt -> try : suite except_clause else : suite finally : suite
2627
DEDENT
try_stmt -> try : suite except_clause else : suite finally : suite
2627
nonlocal
try_stmt -> try : suite except_clause else : suite finally : suite
2627
global
try_stmt -> try : suite except_clause else : suite finally : suite
2627
return
try_stmt -> try : suite except_clause else : suite finally : suite
2627
@
try_stmt -> try : suite except_clause else : suite finally : suite
2627
class
try_stmt -> try : suite except_clause else : suite finally : suite
2627
{
try_stmt -> try : suite except_clause else : suite finally : suite
2627
NAME
try_stmt -> try : suite except_clause else : suite finally : suite
2627
while
try_stmt -> try : suite except_clause else : suite finally : suite
2627
+
try_stmt -> try : suite except_clause else : suite finally : suite
2627
with
try_stmt -> try : suite except_clause else : suite finally : suite
2627
try
try_stmt -> try : suite except_clause else : suite finally : suite
2627
[
try_stmt -> try : suite except_clause else : suite finally : suite
2627
for
try_stmt -> try : suite except_clause else : suite finally : suite
2627
continue
try_stmt -> try : suite except_clause else : suite finally : suite
2628
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2628
del
suite -> NEWLINE INDENT stmt_list DEDENT
2628
@
suite -> NEWLINE INDENT stmt_list DEDENT
2628
for
suite -> NEWLINE INDENT stmt_list DEDENT
2628
def
suite -> NEWLINE INDENT stmt_list DEDENT
2628
{
suite -> NEWLINE INDENT stmt_list DEDENT
2628
try
suite -> NEWLINE INDENT stmt_list DEDENT
2628
with
suite -> NEWLINE INDENT stmt_list DEDENT
2628
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2628
global
suite -> NEWLINE INDENT stmt_list DEDENT
2628
break
suite -> NEWLINE INDENT stmt_list DEDENT
2628
False
suite -> NEWLINE INDENT stmt_list DEDENT
2628
[
suite -> NEWLINE INDENT stmt_list DEDENT
2628
while
suite -> NEWLINE INDENT stmt_list DEDENT
2628
True
suite -> NEWLINE INDENT stmt_list DEDENT
2628
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2628
class
suite -> NEWLINE INDENT stmt_list DEDENT
2628
not
suite -> NEWLINE INDENT stmt_list DEDENT
2628
~
suite -> NEWLINE INDENT stmt_list DEDENT
2628
-
suite -> NEWLINE INDENT stmt_list DEDENT
2628
None
suite -> NEWLINE INDENT stmt_list DEDENT
2628
(
suite -> NEWLINE INDENT stmt_list DEDENT
2628
return
suite -> NEWLINE INDENT stmt_list DEDENT
2628
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2628
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2628
if
suite -> NEWLINE INDENT stmt_list DEDENT
2628
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2628
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2628
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2628
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2628
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2628
+
suite -> NEWLINE INDENT stmt_list DEDENT
2628
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2628
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2629
nonlocal
except_clause -> except test as NAME : suite maybe_except_clause
2629
else
except_clause -> except test as NAME : suite maybe_except_clause
2629
None
except_clause -> except test as NAME : suite maybe_except_clause
2629
assert
except_clause -> except test as NAME : suite maybe_except_clause
2629
DEDENT
except_clause -> except test as NAME : suite maybe_except_clause
2629
with
except_clause -> except test as NAME : suite maybe_except_clause
2629
lambda
except_clause -> except test as NAME : suite maybe_except_clause
2629
global
except_clause -> except test as NAME : suite maybe_except_clause
2629
STRING
except_clause -> except test as NAME : suite maybe_except_clause
2629
~
except_clause -> except test as NAME : suite maybe_except_clause
2629
while
except_clause -> except test as NAME : suite maybe_except_clause
2629
return
except_clause -> except test as NAME : suite maybe_except_clause
2629
del
except_clause -> except test as NAME : suite maybe_except_clause
2629
break
except_clause -> except test as NAME : suite maybe_except_clause
2629
try
except_clause -> except test as NAME : suite maybe_except_clause
2629
NUMBER
except_clause -> except test as NAME : suite maybe_except_clause
2629
yield
except_clause -> except test as NAME : suite maybe_except_clause
2629
-
except_clause -> except test as NAME : suite maybe_except_clause
2629
@
except_clause -> except test as NAME : suite maybe_except_clause
2629
if
except_clause -> except test as NAME : suite maybe_except_clause
2629
finally
except_clause -> except test as NAME : suite maybe_except_clause
2629
class
except_clause -> except test as NAME : suite maybe_except_clause
2629
[
except_clause -> except test as NAME : suite maybe_except_clause
2629
raise
except_clause -> except test as NAME : suite maybe_except_clause
2629
continue
except_clause -> except test as NAME : suite maybe_except_clause
2629
{
except_clause -> except test as NAME : suite maybe_except_clause
2629
not
except_clause -> except test as NAME : suite maybe_except_clause
2629
pass
except_clause -> except test as NAME : suite maybe_except_clause
2629
(
except_clause -> except test as NAME : suite maybe_except_clause
2629
def
except_clause -> except test as NAME : suite maybe_except_clause
2629
NAME
except_clause -> except test as NAME : suite maybe_except_clause
2629
False
except_clause -> except test as NAME : suite maybe_except_clause
2629
for
except_clause -> except test as NAME : suite maybe_except_clause
2629
+
except_clause -> except test as NAME : suite maybe_except_clause
2629
True
except_clause -> except test as NAME : suite maybe_except_clause
