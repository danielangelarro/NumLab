0
factor
1
0
decorators
2
0
(
3
0
STRING
4
0
expr
5
0
term
6
0
conf
7
0
not
8
0
while
9
0
or_test
10
0
if
11
0
~
12
0
atom_expr
13
0
comparison
14
0
None
15
0
class
16
0
xor_expr
17
0
arith_expr
18
0
+
19
0
confdef
20
0
decorated
21
0
atom
22
0
def
23
0
compound_stmt
24
0
try
25
0
NUMBER
26
0
NAME
27
0
False
28
0
shift_expr
29
0
try_stmt
30
0
while_stmt
31
0
[
32
0
and_expr
33
0
not_test
34
0
{
35
0
-
36
0
simple_stmt
37
0
for
38
0
and_test
39
0
@
40
0
funcdef
41
0
small_stmt
42
0
power
43
0
classdef
44
0
lambdef
45
0
lambda
46
0
test
47
0
True
48
0
with_stmt
49
0
if_stmt
50
0
for_stmt
51
0
with
52
0
$
program -> 
0
flow_stmt
53
0
break
54
0
raise
55
0
yield
56
0
assert
57
0
continue_stmt
58
0
stat_stmt
59
0
return_stmt
60
0
test_list
61
0
continue
62
0
yield_stmt
63
0
decorator
64
0
sim_stmt
65
0
resetstats
66
0
del
67
0
return
68
0
raise_stmt
69
0
nonlocal
70
0
pass_stmt
71
0
expr_stmt
72
0
program
73
0
assert_stmt
74
0
endsim
75
0
pass
76
0
global_stmt
77
0
del_stmt
78
0
global
79
0
stmt
80
0
NEWLINE
81
0
break_stmt
82
0
begsim
83
0
nonlocal_stmt
84
1
/
85
1
//
86
1
@
87
1
if
term -> factor
1
%
88
1
*
89
1
<<
term -> factor
1
-
term -> factor
1
>=
term -> factor
1
or
term -> factor
1
<=
term -> factor
1
-=
term -> factor
1
>
term -> factor
1
&=
term -> factor
1
in
term -> factor
1
<
term -> factor
1
^=
term -> factor
1
@=
term -> factor
1
NEWLINE
term -> factor
1
>>
term -> factor
1
+=
term -> factor
1
*=
term -> factor
1
,
term -> factor
1
==
term -> factor
1
=
term -> factor
1
/=
term -> factor
1
is
term -> factor
1
+
term -> factor
1
<<=
term -> factor
1
|
term -> factor
1
//=
term -> factor
1
!=
term -> factor
1
:
term -> factor
1
**=
term -> factor
1
&
term -> factor
1
not
term -> factor
1
%=
term -> factor
1
>>=
term -> factor
1
and
term -> factor
1
|=
term -> factor
1
^
term -> factor
2
classdef
90
2
class
16
2
funcdef
91
2
def
23
3
~
92
3
factor
93
3
STRING
94
3
shift_expr
95
3
arith_expr
96
3
term
97
3
NUMBER
98
3
and_expr
99
3
{
100
3
atom_expr
101
3
[
102
3
-
103
3
)
104
3
None
105
3
(
106
3
atom
107
3
test_list_comp
108
3
+
109
3
NAME
110
3
power
111
3
test_list
112
3
True
113
3
comparison
114
3
xor_expr
115
3
lambdef
116
3
False
117
3
not_test
118
3
or_test
119
3
test
120
3
lambda
121
3
and_test
122
3
not
123
3
expr
124
4
+=
atom -> STRING
4
==
atom -> STRING
4
>
atom -> STRING
4
-=
atom -> STRING
4
<=
atom -> STRING
4
&=
atom -> STRING
4
/=
atom -> STRING
4
&
atom -> STRING
4
,
atom -> STRING
4
@=
atom -> STRING
4
>=
atom -> STRING
4
.
atom -> STRING
4
@
atom -> STRING
4
[
atom -> STRING
4
^
atom -> STRING
4
NEWLINE
atom -> STRING
4
%
atom -> STRING
4
>>=
atom -> STRING
4
<<=
atom -> STRING
4
=
atom -> STRING
4
**
atom -> STRING
4
-
atom -> STRING
4
//
atom -> STRING
4
>>
atom -> STRING
4
**=
atom -> STRING
4
<
atom -> STRING
4
|
atom -> STRING
4
(
atom -> STRING
4
is
atom -> STRING
4
^=
atom -> STRING
4
and
atom -> STRING
4
*
atom -> STRING
4
or
atom -> STRING
4
*=
atom -> STRING
4
not
atom -> STRING
4
<<
atom -> STRING
4
|=
atom -> STRING
4
/
atom -> STRING
4
+
atom -> STRING
4
!=
atom -> STRING
4
in
atom -> STRING
4
//=
atom -> STRING
4
:
atom -> STRING
4
if
atom -> STRING
4
%=
atom -> STRING
5
!=
125
5
=
comparison -> expr
5
,
comparison -> expr
5
is
126
5
>=
127
5
in
128
5
<
129
5
comp_op
130
5
==
131
5
<=
132
5
not
133
5
**=
comparison -> expr
5
%=
comparison -> expr
5
+=
comparison -> expr
5
>
134
5
>>=
comparison -> expr
5
NEWLINE
comparison -> expr
5
//=
comparison -> expr
5
^=
comparison -> expr
5
/=
comparison -> expr
5
&=
comparison -> expr
5
@=
comparison -> expr
5
-=
comparison -> expr
5
:
comparison -> expr
5
or
comparison -> expr
5
<<=
comparison -> expr
5
*=
comparison -> expr
5
if
comparison -> expr
5
|=
comparison -> expr
5
and
comparison -> expr
6
+
135
6
-
136
6
%=
arith_expr -> term
6
^
arith_expr -> term
6
<<=
arith_expr -> term
6
&
arith_expr -> term
6
==
arith_expr -> term
6
!=
arith_expr -> term
6
if
arith_expr -> term
6
>>=
arith_expr -> term
6
|=
arith_expr -> term
6
<<
arith_expr -> term
6
*=
arith_expr -> term
6
**=
arith_expr -> term
6
>
arith_expr -> term
6
^=
arith_expr -> term
6
NEWLINE
arith_expr -> term
6
//=
arith_expr -> term
6
/=
arith_expr -> term
6
=
arith_expr -> term
6
<=
arith_expr -> term
6
@=
arith_expr -> term
6
is
arith_expr -> term
6
and
arith_expr -> term
6
<
arith_expr -> term
6
or
arith_expr -> term
6
,
arith_expr -> term
6
>=
arith_expr -> term
6
>>
arith_expr -> term
6
+=
arith_expr -> term
6
|
arith_expr -> term
6
not
arith_expr -> term
6
&=
arith_expr -> term
6
-=
arith_expr -> term
6
:
arith_expr -> term
6
in
arith_expr -> term
7
NAME
137
8
expr
5
8
factor
1
8
(
3
8
STRING
4
8
term
6
8
not
8
8
~
12
8
atom_expr
13
8
comparison
14
8
shift_expr
29
8
None
15
8
power
43
8
+
19
8
xor_expr
17
8
arith_expr
18
8
[
32
8
atom
22
8
NUMBER
26
8
NAME
27
8
-
36
8
False
28
8
{
35
8
and_expr
33
8
True
48
8
not_test
138
9
~
139
9
factor
140
9
test
141
9
shift_expr
142
9
STRING
143
9
expr
144
9
term
145
9
NUMBER
146
9
{
147
9
atom_expr
148
9
[
149
9
-
150
9
None
151
9
+
152
9
(
153
9
arith_expr
154
9
atom
155
9
and_expr
156
9
NAME
157
9
power
158
9
True
159
9
comparison
160
9
xor_expr
161
9
lambda
162
9
False
163
9
not_test
164
9
and_test
165
9
not
166
9
or_test
167
9
lambdef
168
10
if
169
10
^=
test -> or_test
10
|=
test -> or_test
10
&=
test -> or_test
10
=
test -> or_test
10
//=
test -> or_test
10
:
test -> or_test
10
+=
test -> or_test
10
/=
test -> or_test
10
**=
test -> or_test
10
%=
test -> or_test
10
<<=
test -> or_test
10
,
test -> or_test
10
>>=
test -> or_test
10
@=
test -> or_test
10
-=
test -> or_test
10
NEWLINE
test -> or_test
10
*=
test -> or_test
11
~
139
11
factor
140
11
STRING
143
11
shift_expr
142
11
expr
144
11
term
145
11
NUMBER
146
11
test
170
11
{
147
11
atom_expr
148
11
[
149
11
-
150
11
None
151
11
+
152
11
(
153
11
arith_expr
154
11
atom
155
11
and_expr
156
11
NAME
157
11
power
158
11
True
159
11
comparison
160
11
xor_expr
161
11
lambda
162
11
False
163
11
not_test
164
11
and_test
165
11
not
166
11
or_test
167
11
lambdef
168
12
~
12
12
(
3
12
STRING
4
12
factor
171
12
NUMBER
26
12
None
15
12
{
35
12
atom_expr
13
12
[
32
12
atom
22
12
-
36
12
+
19
12
power
43
12
NAME
27
12
True
48
12
False
28
13
**
172
13
*
power -> atom_expr
13
>=
power -> atom_expr
13
^
power -> atom_expr
13
%=
power -> atom_expr
13
=
power -> atom_expr
13
<
power -> atom_expr
13
|
power -> atom_expr
13
is
power -> atom_expr
13
|=
power -> atom_expr
13
-=
power -> atom_expr
13
+
power -> atom_expr
13
<=
power -> atom_expr
13
*=
power -> atom_expr
13
or
power -> atom_expr
13
@=
power -> atom_expr
13
-
power -> atom_expr
13
not
power -> atom_expr
13
>
power -> atom_expr
13
,
power -> atom_expr
13
^=
power -> atom_expr
13
/
power -> atom_expr
13
<<
power -> atom_expr
13
>>
power -> atom_expr
13
>>=
power -> atom_expr
13
&=
power -> atom_expr
13
//=
power -> atom_expr
13
<<=
power -> atom_expr
13
@
power -> atom_expr
13
**=
power -> atom_expr
13
/=
power -> atom_expr
13
NEWLINE
power -> atom_expr
13
:
power -> atom_expr
13
in
power -> atom_expr
13
!=
power -> atom_expr
13
if
power -> atom_expr
13
and
power -> atom_expr
13
==
power -> atom_expr
13
&
power -> atom_expr
13
//
power -> atom_expr
13
%
power -> atom_expr
13
+=
power -> atom_expr
14
%=
not_test -> comparison
14
**=
not_test -> comparison
14
-=
not_test -> comparison
14
NEWLINE
not_test -> comparison
14
<<=
not_test -> comparison
14
+=
not_test -> comparison
14
//=
not_test -> comparison
14
=
not_test -> comparison
14
^=
not_test -> comparison
14
@=
not_test -> comparison
14
:
not_test -> comparison
14
>>=
not_test -> comparison
14
/=
not_test -> comparison
14
&=
not_test -> comparison
14
or
not_test -> comparison
14
if
not_test -> comparison
14
,
not_test -> comparison
14
and
not_test -> comparison
14
*=
not_test -> comparison
14
|=
not_test -> comparison
15
not
atom -> None
15
/=
atom -> None
15
or
atom -> None
15
==
atom -> None
15
*
atom -> None
15
-
atom -> None
15
^=
atom -> None
15
^
atom -> None
15
|=
atom -> None
15
>>
atom -> None
15
if
atom -> None
15
=
atom -> None
15
//=
atom -> None
15
,
atom -> None
15
<<
atom -> None
15
and
atom -> None
15
|
atom -> None
15
NEWLINE
atom -> None
15
&
atom -> None
15
!=
atom -> None
15
@
atom -> None
15
.
atom -> None
15
&=
atom -> None
15
/
atom -> None
15
%
atom -> None
15
>>=
atom -> None
15
>
atom -> None
15
is
atom -> None
15
**=
atom -> None
15
<
atom -> None
15
(
atom -> None
15
@=
atom -> None
15
**
atom -> None
15
//
atom -> None
15
*=
atom -> None
15
+=
atom -> None
15
in
atom -> None
15
>=
atom -> None
15
<=
atom -> None
15
-=
atom -> None
15
+
atom -> None
15
[
atom -> None
15
<<=
atom -> None
15
:
atom -> None
15
%=
atom -> None
16
NAME
173
17
|
174
17
not
expr -> xor_expr
17
*=
expr -> xor_expr
17
**=
expr -> xor_expr
17
or
expr -> xor_expr
17
/=
expr -> xor_expr
17
==
expr -> xor_expr
17
in
expr -> xor_expr
17
&=
expr -> xor_expr
17
if
expr -> xor_expr
17
NEWLINE
expr -> xor_expr
17
:
expr -> xor_expr
17
<=
expr -> xor_expr
17
%=
expr -> xor_expr
17
is
expr -> xor_expr
17
<
expr -> xor_expr
17
+=
expr -> xor_expr
17
>=
expr -> xor_expr
17
-=
expr -> xor_expr
17
//=
expr -> xor_expr
17
^=
expr -> xor_expr
17
<<=
expr -> xor_expr
17
=
expr -> xor_expr
17
>>=
expr -> xor_expr
17
|=
expr -> xor_expr
17
>
expr -> xor_expr
17
@=
expr -> xor_expr
17
and
expr -> xor_expr
17
!=
expr -> xor_expr
17
,
expr -> xor_expr
18
=
shift_expr -> arith_expr
18
**=
shift_expr -> arith_expr
18
>>
175
18
<<
176
18
+=
shift_expr -> arith_expr
18
^=
shift_expr -> arith_expr
18
:
shift_expr -> arith_expr
18
!=
shift_expr -> arith_expr
18
>>=
shift_expr -> arith_expr
18
or
shift_expr -> arith_expr
18
<<=
shift_expr -> arith_expr
18
<=
shift_expr -> arith_expr
18
and
shift_expr -> arith_expr
18
>=
shift_expr -> arith_expr
18
@=
shift_expr -> arith_expr
18
NEWLINE
shift_expr -> arith_expr
18
>
shift_expr -> arith_expr
18
,
shift_expr -> arith_expr
18
is
shift_expr -> arith_expr
18
<
shift_expr -> arith_expr
18
if
shift_expr -> arith_expr
18
&=
shift_expr -> arith_expr
18
==
shift_expr -> arith_expr
18
%=
shift_expr -> arith_expr
18
//=
shift_expr -> arith_expr
18
^
shift_expr -> arith_expr
18
|
shift_expr -> arith_expr
18
/=
shift_expr -> arith_expr
18
not
shift_expr -> arith_expr
18
in
shift_expr -> arith_expr
18
*=
shift_expr -> arith_expr
18
|=
shift_expr -> arith_expr
18
-=
shift_expr -> arith_expr
18
&
shift_expr -> arith_expr
19
~
12
19
(
3
19
STRING
4
19
NUMBER
26
19
None
15
19
{
35
19
atom_expr
13
19
factor
177
19
atom
22
19
[
32
19
-
36
19
+
19
19
power
43
19
NAME
27
19
True
48
19
False
28
20
~
compound_stmt -> confdef
20
del
compound_stmt -> confdef
20
return
compound_stmt -> confdef
20
NUMBER
compound_stmt -> confdef
20
nonlocal
compound_stmt -> confdef
20
None
compound_stmt -> confdef
20
NAME
compound_stmt -> confdef
20
break
compound_stmt -> confdef
20
pass
compound_stmt -> confdef
20
not
compound_stmt -> confdef
20
{
compound_stmt -> confdef
20
yield
compound_stmt -> confdef
20
-
compound_stmt -> confdef
20
False
compound_stmt -> confdef
20
NEWLINE
compound_stmt -> confdef
20
global
compound_stmt -> confdef
20
class
compound_stmt -> confdef
20
continue
compound_stmt -> confdef
20
for
compound_stmt -> confdef
20
assert
compound_stmt -> confdef
20
STRING
compound_stmt -> confdef
20
try
compound_stmt -> confdef
20
lambda
compound_stmt -> confdef
20
while
compound_stmt -> confdef
20
endsim
compound_stmt -> confdef
20
begsim
compound_stmt -> confdef
20
if
compound_stmt -> confdef
20
True
compound_stmt -> confdef
20
(
compound_stmt -> confdef
20
with
compound_stmt -> confdef
20
raise
compound_stmt -> confdef
20
[
compound_stmt -> confdef
20
conf
compound_stmt -> confdef
20
resetstats
compound_stmt -> confdef
20
def
compound_stmt -> confdef
20
+
compound_stmt -> confdef
20
@
compound_stmt -> confdef
20
$
compound_stmt -> confdef
21
not
compound_stmt -> decorated
21
with
compound_stmt -> decorated
21
if
compound_stmt -> decorated
21
class
compound_stmt -> decorated
21
{
compound_stmt -> decorated
21
True
compound_stmt -> decorated
21
return
compound_stmt -> decorated
21
False
compound_stmt -> decorated
21
del
compound_stmt -> decorated
21
raise
compound_stmt -> decorated
21
-
compound_stmt -> decorated
21
global
compound_stmt -> decorated
21
while
compound_stmt -> decorated
21
continue
compound_stmt -> decorated
21
endsim
compound_stmt -> decorated
21
+
compound_stmt -> decorated
21
NAME
compound_stmt -> decorated
21
pass
compound_stmt -> decorated
21
break
compound_stmt -> decorated
21
STRING
compound_stmt -> decorated
21
NUMBER
compound_stmt -> decorated
21
NEWLINE
compound_stmt -> decorated
21
nonlocal
compound_stmt -> decorated
21
@
compound_stmt -> decorated
21
resetstats
compound_stmt -> decorated
21
yield
compound_stmt -> decorated
21
(
compound_stmt -> decorated
21
begsim
compound_stmt -> decorated
21
$
compound_stmt -> decorated
21
None
compound_stmt -> decorated
21
try
compound_stmt -> decorated
21
lambda
compound_stmt -> decorated
21
assert
compound_stmt -> decorated
21
~
compound_stmt -> decorated
21
def
compound_stmt -> decorated
21
for
compound_stmt -> decorated
21
conf
compound_stmt -> decorated
21
[
compound_stmt -> decorated
22
.
178
22
[
179
22
&=
trailer_expr -> 
22
trailer
180
22
(
181
22
trailer_expr
182
22
,
trailer_expr -> 
22
|
trailer_expr -> 
22
//=
trailer_expr -> 
22
or
trailer_expr -> 
22
>>=
trailer_expr -> 
22
**
trailer_expr -> 
22
>>
trailer_expr -> 
22
-
trailer_expr -> 
22
%
trailer_expr -> 
22
is
trailer_expr -> 
22
if
trailer_expr -> 
22
NEWLINE
trailer_expr -> 
22
>
trailer_expr -> 
22
|=
trailer_expr -> 
22
^
trailer_expr -> 
22
@
trailer_expr -> 
22
+=
trailer_expr -> 
22
not
trailer_expr -> 
22
//
trailer_expr -> 
22
<<
trailer_expr -> 
22
%=
trailer_expr -> 
22
*
trailer_expr -> 
22
in
trailer_expr -> 
22
&
trailer_expr -> 
22
and
trailer_expr -> 
22
<=
trailer_expr -> 
22
>=
trailer_expr -> 
22
=
trailer_expr -> 
22
<<=
trailer_expr -> 
22
:
trailer_expr -> 
22
+
trailer_expr -> 
22
-=
trailer_expr -> 
22
**=
trailer_expr -> 
22
/=
trailer_expr -> 
22
!=
trailer_expr -> 
22
/
trailer_expr -> 
22
@=
trailer_expr -> 
22
<
trailer_expr -> 
22
^=
trailer_expr -> 
22
==
trailer_expr -> 
22
*=
trailer_expr -> 
23
NAME
183
24
resetstats
stmt -> compound_stmt
24
begsim
stmt -> compound_stmt
24
try
stmt -> compound_stmt
24
assert
stmt -> compound_stmt
24
yield
stmt -> compound_stmt
24
STRING
stmt -> compound_stmt
24
{
stmt -> compound_stmt
24
del
stmt -> compound_stmt
24
while
stmt -> compound_stmt
24
if
stmt -> compound_stmt
24
def
stmt -> compound_stmt
24
NAME
stmt -> compound_stmt
24
NUMBER
stmt -> compound_stmt
24
class
stmt -> compound_stmt
24
NEWLINE
stmt -> compound_stmt
24
nonlocal
stmt -> compound_stmt
24
[
stmt -> compound_stmt
24
continue
stmt -> compound_stmt
24
conf
stmt -> compound_stmt
24
None
stmt -> compound_stmt
24
True
stmt -> compound_stmt
24
not
stmt -> compound_stmt
24
(
stmt -> compound_stmt
24
@
stmt -> compound_stmt
24
-
stmt -> compound_stmt
24
break
stmt -> compound_stmt
24
lambda
stmt -> compound_stmt
24
pass
stmt -> compound_stmt
24
for
stmt -> compound_stmt
24
raise
stmt -> compound_stmt
24
+
stmt -> compound_stmt
24
return
stmt -> compound_stmt
24
~
stmt -> compound_stmt
24
False
stmt -> compound_stmt
24
$
stmt -> compound_stmt
24
endsim
stmt -> compound_stmt
24
global
stmt -> compound_stmt
24
with
stmt -> compound_stmt
25
:
184
26
<<
atom -> NUMBER
26
+=
atom -> NUMBER
26
:
atom -> NUMBER
26
-
atom -> NUMBER
26
-=
atom -> NUMBER
26
^
atom -> NUMBER
26
or
atom -> NUMBER
26
**=
atom -> NUMBER
26
|=
atom -> NUMBER
26
>>=
atom -> NUMBER
26
==
atom -> NUMBER
26
!=
atom -> NUMBER
26
/
atom -> NUMBER
26
and
atom -> NUMBER
26
%
atom -> NUMBER
26
,
atom -> NUMBER
26
>=
atom -> NUMBER
26
@
atom -> NUMBER
26
NEWLINE
atom -> NUMBER
26
|
atom -> NUMBER
26
[
atom -> NUMBER
26
//
atom -> NUMBER
26
.
atom -> NUMBER
26
%=
atom -> NUMBER
26
/=
atom -> NUMBER
26
^=
atom -> NUMBER
26
=
atom -> NUMBER
26
not
atom -> NUMBER
26
<
atom -> NUMBER
26
>>
atom -> NUMBER
26
//=
atom -> NUMBER
26
if
atom -> NUMBER
26
>
atom -> NUMBER
26
<=
atom -> NUMBER
26
<<=
atom -> NUMBER
26
&
atom -> NUMBER
26
is
atom -> NUMBER
26
**
atom -> NUMBER
26
in
atom -> NUMBER
26
&=
atom -> NUMBER
26
+
atom -> NUMBER
26
*=
atom -> NUMBER
26
@=
atom -> NUMBER
26
(
atom -> NUMBER
26
*
atom -> NUMBER
27
<=
atom -> NAME
27
/=
atom -> NAME
27
@
atom -> NAME
27
^=
atom -> NAME
27
%=
atom -> NAME
27
>>
atom -> NAME
27
==
atom -> NAME
27
>
atom -> NAME
27
*
atom -> NAME
27
-
atom -> NAME
27
&
atom -> NAME
27
is
atom -> NAME
27
|=
atom -> NAME
27
.
atom -> NAME
27
>>=
atom -> NAME
27
or
atom -> NAME
27
*=
atom -> NAME
27
in
atom -> NAME
27
NEWLINE
atom -> NAME
27
<<
atom -> NAME
27
+
atom -> NAME
27
,
atom -> NAME
27
if
atom -> NAME
27
|
atom -> NAME
27
and
atom -> NAME
27
//=
atom -> NAME
27
=
atom -> NAME
27
^
atom -> NAME
27
[
atom -> NAME
27
**=
atom -> NAME
27
/
atom -> NAME
27
not
atom -> NAME
27
!=
atom -> NAME
27
%
atom -> NAME
27
:
atom -> NAME
27
+=
atom -> NAME
27
<<=
atom -> NAME
27
<
atom -> NAME
27
&=
atom -> NAME
27
>=
atom -> NAME
27
@=
atom -> NAME
27
**
atom -> NAME
27
(
atom -> NAME
27
-=
atom -> NAME
27
//
atom -> NAME
28
^=
atom -> False
28
<=
atom -> False
28
//=
atom -> False
28
%=
atom -> False
28
*
atom -> False
28
>>=
atom -> False
28
/=
atom -> False
28
not
atom -> False
28
-=
atom -> False
28
!=
atom -> False
28
<<=
atom -> False
28
and
atom -> False
28
@
atom -> False
28
=
atom -> False
28
if
atom -> False
28
>
atom -> False
28
<<
atom -> False
28
**=
atom -> False
28
,
atom -> False
28
:
atom -> False
28
+
atom -> False
28
/
atom -> False
28
==
atom -> False
28
&
atom -> False
28
+=
atom -> False
28
in
atom -> False
28
^
atom -> False
28
[
atom -> False
28
@=
atom -> False
28
|=
atom -> False
28
is
atom -> False
28
%
atom -> False
28
>=
atom -> False
28
//
atom -> False
28
(
atom -> False
28
*=
atom -> False
28
NEWLINE
atom -> False
28
|
atom -> False
28
&=
atom -> False
28
<
atom -> False
28
.
atom -> False
28
or
atom -> False
28
**
atom -> False
28
>>
atom -> False
28
-
atom -> False
29
NEWLINE
and_expr -> shift_expr
29
&
185
29
in
and_expr -> shift_expr
29
%=
and_expr -> shift_expr
29
^=
and_expr -> shift_expr
29
<<=
and_expr -> shift_expr
29
//=
and_expr -> shift_expr
29
**=
and_expr -> shift_expr
29
,
and_expr -> shift_expr
29
@=
and_expr -> shift_expr
29
not
and_expr -> shift_expr
29
-=
and_expr -> shift_expr
29
|=
and_expr -> shift_expr
29
:
and_expr -> shift_expr
29
+=
and_expr -> shift_expr
29
<
and_expr -> shift_expr
29
&=
and_expr -> shift_expr
29
!=
and_expr -> shift_expr
29
>=
and_expr -> shift_expr
29
if
and_expr -> shift_expr
29
and
and_expr -> shift_expr
29
|
and_expr -> shift_expr
29
is
and_expr -> shift_expr
29
*=
and_expr -> shift_expr
29
<=
and_expr -> shift_expr
29
>
and_expr -> shift_expr
29
=
and_expr -> shift_expr
29
^
and_expr -> shift_expr
29
/=
and_expr -> shift_expr
29
or
and_expr -> shift_expr
29
>>=
and_expr -> shift_expr
29
==
and_expr -> shift_expr
30
for
compound_stmt -> try_stmt
30
lambda
compound_stmt -> try_stmt
30
raise
compound_stmt -> try_stmt
30
NEWLINE
compound_stmt -> try_stmt
30
@
compound_stmt -> try_stmt
30
resetstats
compound_stmt -> try_stmt
30
(
compound_stmt -> try_stmt
30
not
compound_stmt -> try_stmt
30
assert
compound_stmt -> try_stmt
30
class
compound_stmt -> try_stmt
30
try
compound_stmt -> try_stmt
30
$
compound_stmt -> try_stmt
30
break
compound_stmt -> try_stmt
30
{
compound_stmt -> try_stmt
30
del
compound_stmt -> try_stmt
30
False
compound_stmt -> try_stmt
30
[
compound_stmt -> try_stmt
30
nonlocal
compound_stmt -> try_stmt
30
None
compound_stmt -> try_stmt
30
global
compound_stmt -> try_stmt
30
yield
compound_stmt -> try_stmt
30
begsim
compound_stmt -> try_stmt
30
continue
compound_stmt -> try_stmt
30
True
compound_stmt -> try_stmt
30
while
compound_stmt -> try_stmt
30
pass
compound_stmt -> try_stmt
30
endsim
compound_stmt -> try_stmt
30
def
compound_stmt -> try_stmt
30
-
compound_stmt -> try_stmt
30
if
compound_stmt -> try_stmt
30
with
compound_stmt -> try_stmt
30
NUMBER
compound_stmt -> try_stmt
30
NAME
compound_stmt -> try_stmt
30
STRING
compound_stmt -> try_stmt
30
~
compound_stmt -> try_stmt
30
conf
compound_stmt -> try_stmt
30
+
compound_stmt -> try_stmt
30
return
compound_stmt -> try_stmt
31
lambda
compound_stmt -> while_stmt
31
def
compound_stmt -> while_stmt
31
class
compound_stmt -> while_stmt
31
pass
compound_stmt -> while_stmt
31
NEWLINE
compound_stmt -> while_stmt
31
None
compound_stmt -> while_stmt
31
$
compound_stmt -> while_stmt
31
for
compound_stmt -> while_stmt
31
resetstats
compound_stmt -> while_stmt
31
return
compound_stmt -> while_stmt
31
NAME
compound_stmt -> while_stmt
31
with
compound_stmt -> while_stmt
31
global
compound_stmt -> while_stmt
31
{
compound_stmt -> while_stmt
31
not
compound_stmt -> while_stmt
31
True
compound_stmt -> while_stmt
31
yield
compound_stmt -> while_stmt
31
assert
compound_stmt -> while_stmt
31
break
compound_stmt -> while_stmt
31
@
compound_stmt -> while_stmt
31
NUMBER
compound_stmt -> while_stmt
31
continue
compound_stmt -> while_stmt
31
del
compound_stmt -> while_stmt
31
False
compound_stmt -> while_stmt
31
conf
compound_stmt -> while_stmt
31
[
compound_stmt -> while_stmt
31
begsim
compound_stmt -> while_stmt
31
(
compound_stmt -> while_stmt
31
endsim
compound_stmt -> while_stmt
31
nonlocal
compound_stmt -> while_stmt
31
if
compound_stmt -> while_stmt
31
raise
compound_stmt -> while_stmt
31
STRING
compound_stmt -> while_stmt
31
-
compound_stmt -> while_stmt
31
+
compound_stmt -> while_stmt
31
try
compound_stmt -> while_stmt
31
while
compound_stmt -> while_stmt
31
~
compound_stmt -> while_stmt
32
~
186
32
factor
187
32
STRING
188
32
shift_expr
189
32
test_list_comp
190
32
arith_expr
191
32
term
192
32
atom_expr
193
32
]
194
32
test
195
32
NUMBER
196
32
and_expr
197
32
{
198
32
[
199
32
-
200
32
None
201
32
(
202
32
atom
203
32
+
204
32
NAME
205
32
power
206
32
True
207
32
comparison
208
32
xor_expr
209
32
lambdef
210
32
False
211
32
not_test
212
32
or_test
213
32
and_test
214
32
lambda
215
32
not
216
32
expr
217
32
test_list
218
33
-=
xor_expr -> and_expr
33
^=
xor_expr -> and_expr
33
^
219
33
not
xor_expr -> and_expr
33
@=
xor_expr -> and_expr
33
=
xor_expr -> and_expr
33
if
xor_expr -> and_expr
33
|
xor_expr -> and_expr
33
>
xor_expr -> and_expr
33
<
xor_expr -> and_expr
33
**=
xor_expr -> and_expr
33
NEWLINE
xor_expr -> and_expr
33
%=
xor_expr -> and_expr
33
+=
xor_expr -> and_expr
33
or
xor_expr -> and_expr
33
/=
xor_expr -> and_expr
33
>>=
xor_expr -> and_expr
33
:
xor_expr -> and_expr
33
>=
xor_expr -> and_expr
33
and
xor_expr -> and_expr
33
in
xor_expr -> and_expr
33
is
xor_expr -> and_expr
33
==
xor_expr -> and_expr
33
!=
xor_expr -> and_expr
33
&=
xor_expr -> and_expr
33
<=
xor_expr -> and_expr
33
*=
xor_expr -> and_expr
33
|=
xor_expr -> and_expr
33
,
xor_expr -> and_expr
33
<<=
xor_expr -> and_expr
33
//=
xor_expr -> and_expr
34
or
and_test -> not_test
34
and
220
34
:
and_test -> not_test
34
//=
and_test -> not_test
34
&=
and_test -> not_test
34
NEWLINE
and_test -> not_test
34
*=
and_test -> not_test
34
,
and_test -> not_test
34
if
and_test -> not_test
34
/=
and_test -> not_test
34
<<=
and_test -> not_test
34
^=
and_test -> not_test
34
%=
and_test -> not_test
34
|=
and_test -> not_test
34
-=
and_test -> not_test
34
=
and_test -> not_test
34
+=
and_test -> not_test
34
**=
and_test -> not_test
34
@=
and_test -> not_test
34
>>=
and_test -> not_test
35
}
221
36
~
12
36
factor
222
36
(
3
36
STRING
4
36
NUMBER
26
36
None
15
36
{
35
36
atom_expr
13
36
[
32
36
atom
22
36
-
36
36
+
19
36
power
43
36
NAME
27
36
True
48
36
False
28
37
nonlocal
stmt -> simple_stmt
37
def
stmt -> simple_stmt
37
True
stmt -> simple_stmt
37
endsim
stmt -> simple_stmt
37
raise
stmt -> simple_stmt
37
return
stmt -> simple_stmt
37
~
stmt -> simple_stmt
37
break
stmt -> simple_stmt
37
NAME
stmt -> simple_stmt
37
for
stmt -> simple_stmt
37
lambda
stmt -> simple_stmt
37
None
stmt -> simple_stmt
37
{
stmt -> simple_stmt
37
+
stmt -> simple_stmt
37
$
stmt -> simple_stmt
37
[
stmt -> simple_stmt
37
not
stmt -> simple_stmt
37
continue
stmt -> simple_stmt
37
del
stmt -> simple_stmt
37
global
stmt -> simple_stmt
37
if
stmt -> simple_stmt
37
pass
stmt -> simple_stmt
37
-
stmt -> simple_stmt
37
begsim
stmt -> simple_stmt
37
(
stmt -> simple_stmt
37
while
stmt -> simple_stmt
37
NUMBER
stmt -> simple_stmt
37
@
stmt -> simple_stmt
37
try
stmt -> simple_stmt
37
conf
stmt -> simple_stmt
37
yield
stmt -> simple_stmt
37
STRING
stmt -> simple_stmt
37
assert
stmt -> simple_stmt
37
False
stmt -> simple_stmt
37
resetstats
stmt -> simple_stmt
37
class
stmt -> simple_stmt
37
with
stmt -> simple_stmt
37
NEWLINE
stmt -> simple_stmt
38
~
223
38
factor
224
38
STRING
225
38
None
226
38
arith_expr
227
38
[
228
38
expr
229
38
NUMBER
230
38
{
231
38
(
232
38
and_expr
233
38
atom
234
38
-
235
38
expr_list
236
38
atom_expr
237
38
+
238
38
False
239
38
True
240
38
power
241
38
term
242
38
NAME
243
38
shift_expr
244
38
xor_expr
245
39
+=
or_test -> and_test
39
//=
or_test -> and_test
39
NEWLINE
or_test -> and_test
39
-=
or_test -> and_test
39
or
246
39
,
or_test -> and_test
39
**=
or_test -> and_test
39
|=
or_test -> and_test
39
>>=
or_test -> and_test
39
&=
or_test -> and_test
39
=
or_test -> and_test
39
if
or_test -> and_test
39
%=
or_test -> and_test
39
<<=
or_test -> and_test
39
^=
or_test -> and_test
39
:
or_test -> and_test
39
/=
or_test -> and_test
39
*=
or_test -> and_test
39
@=
or_test -> and_test
40
dotted_name
247
40
NAME
248
41
STRING
compound_stmt -> funcdef
41
lambda
compound_stmt -> funcdef
41
False
compound_stmt -> funcdef
41
[
compound_stmt -> funcdef
41
try
compound_stmt -> funcdef
41
+
compound_stmt -> funcdef
41
NEWLINE
compound_stmt -> funcdef
41
del
compound_stmt -> funcdef
41
with
compound_stmt -> funcdef
41
for
compound_stmt -> funcdef
41
class
compound_stmt -> funcdef
41
return
compound_stmt -> funcdef
41
-
compound_stmt -> funcdef
41
$
compound_stmt -> funcdef
41
yield
compound_stmt -> funcdef
41
not
compound_stmt -> funcdef
41
endsim
compound_stmt -> funcdef
41
break
compound_stmt -> funcdef
41
while
compound_stmt -> funcdef
41
{
compound_stmt -> funcdef
41
(
compound_stmt -> funcdef
41
def
compound_stmt -> funcdef
41
NUMBER
compound_stmt -> funcdef
41
conf
compound_stmt -> funcdef
41
None
compound_stmt -> funcdef
41
NAME
compound_stmt -> funcdef
41
assert
compound_stmt -> funcdef
41
pass
compound_stmt -> funcdef
41
raise
compound_stmt -> funcdef
41
True
compound_stmt -> funcdef
41
begsim
compound_stmt -> funcdef
41
nonlocal
compound_stmt -> funcdef
41
resetstats
compound_stmt -> funcdef
41
~
compound_stmt -> funcdef
41
if
compound_stmt -> funcdef
41
@
compound_stmt -> funcdef
41
continue
compound_stmt -> funcdef
41
global
compound_stmt -> funcdef
42
NEWLINE
249
43
if
factor -> power
43
is
factor -> power
43
%
factor -> power
43
==
factor -> power
43
>=
factor -> power
43
or
factor -> power
43
and
factor -> power
43
/
factor -> power
43
<
factor -> power
43
+
factor -> power
43
:
factor -> power
43
,
factor -> power
43
&=
factor -> power
43
//
factor -> power
43
*=
factor -> power
43
|=
factor -> power
43
@
factor -> power
43
in
factor -> power
43
/=
factor -> power
43
<<=
factor -> power
43
**=
factor -> power
43
NEWLINE
factor -> power
43
//=
factor -> power
43
=
factor -> power
43
<=
factor -> power
43
&
factor -> power
43
-=
factor -> power
43
!=
factor -> power
43
+=
factor -> power
43
|
factor -> power
43
>
factor -> power
43
<<
factor -> power
43
*
factor -> power
43
%=
factor -> power
43
>>=
factor -> power
43
^
factor -> power
43
-
factor -> power
43
^=
factor -> power
43
@=
factor -> power
43
not
factor -> power
43
>>
factor -> power
44
continue
compound_stmt -> classdef
44
(
compound_stmt -> classdef
44
[
compound_stmt -> classdef
44
STRING
compound_stmt -> classdef
44
-
compound_stmt -> classdef
44
NAME
compound_stmt -> classdef
44
resetstats
compound_stmt -> classdef
44
yield
compound_stmt -> classdef
44
class
compound_stmt -> classdef
44
lambda
compound_stmt -> classdef
44
+
compound_stmt -> classdef
44
$
compound_stmt -> classdef
44
assert
compound_stmt -> classdef
44
with
compound_stmt -> classdef
44
@
compound_stmt -> classdef
44
endsim
compound_stmt -> classdef
44
del
compound_stmt -> classdef
44
raise
compound_stmt -> classdef
44
None
compound_stmt -> classdef
44
~
compound_stmt -> classdef
44
if
compound_stmt -> classdef
44
global
compound_stmt -> classdef
44
return
compound_stmt -> classdef
44
while
compound_stmt -> classdef
44
NEWLINE
compound_stmt -> classdef
44
def
compound_stmt -> classdef
44
nonlocal
compound_stmt -> classdef
44
pass
compound_stmt -> classdef
44
begsim
compound_stmt -> classdef
44
try
compound_stmt -> classdef
44
conf
compound_stmt -> classdef
44
for
compound_stmt -> classdef
44
True
compound_stmt -> classdef
44
{
compound_stmt -> classdef
44
break
compound_stmt -> classdef
44
NUMBER
compound_stmt -> classdef
44
not
compound_stmt -> classdef
44
False
compound_stmt -> classdef
45
%=
test -> lambdef
45
,
test -> lambdef
45
=
test -> lambdef
45
**=
test -> lambdef
45
*=
test -> lambdef
45
>>=
test -> lambdef
45
^=
test -> lambdef
45
+=
test -> lambdef
45
<<=
test -> lambdef
45
//=
test -> lambdef
45
|=
test -> lambdef
45
&=
test -> lambdef
45
/=
test -> lambdef
45
-=
test -> lambdef
45
NEWLINE
test -> lambdef
45
:
test -> lambdef
45
@=
test -> lambdef
46
:
250
46
NAME
251
46
varargslist
252
46
vfpdef
253
47
,
254
47
**=
test_list -> test
47
%=
test_list -> test
47
^=
test_list -> test
47
+=
test_list -> test
47
NEWLINE
test_list -> test
47
|=
test_list -> test
47
<<=
test_list -> test
47
>>=
test_list -> test
47
=
test_list -> test
47
/=
test_list -> test
47
@=
test_list -> test
47
//=
test_list -> test
47
&=
test_list -> test
47
-=
test_list -> test
47
*=
test_list -> test
47
:
test_list -> test
48
**=
atom -> True
48
>
atom -> True
48
|
atom -> True
48
@=
atom -> True
48
-
atom -> True
48
NEWLINE
atom -> True
48
==
atom -> True
48
<<
atom -> True
48
//=
atom -> True
48
+=
atom -> True
48
&=
atom -> True
48
>>=
atom -> True
48
/=
atom -> True
48
%=
atom -> True
48
%
atom -> True
48
if
atom -> True
48
/
atom -> True
48
[
atom -> True
48
:
atom -> True
48
-=
atom -> True
48
<=
atom -> True
48
<
atom -> True
48
*
atom -> True
48
&
atom -> True
48
+
atom -> True
48
|=
atom -> True
48
//
atom -> True
48
!=
atom -> True
48
>>
atom -> True
48
**
atom -> True
48
<<=
atom -> True
48
and
atom -> True
48
^
atom -> True
48
is
atom -> True
48
or
atom -> True
48
.
atom -> True
48
,
atom -> True
48
(
atom -> True
48
*=
atom -> True
48
^=
atom -> True
48
>=
atom -> True
48
@
atom -> True
48
=
atom -> True
48
not
atom -> True
48
in
atom -> True
49
pass
compound_stmt -> with_stmt
49
raise
compound_stmt -> with_stmt
49
if
compound_stmt -> with_stmt
49
+
compound_stmt -> with_stmt
49
del
compound_stmt -> with_stmt
49
endsim
compound_stmt -> with_stmt
49
assert
compound_stmt -> with_stmt
49
True
compound_stmt -> with_stmt
49
class
compound_stmt -> with_stmt
49
{
compound_stmt -> with_stmt
49
global
compound_stmt -> with_stmt
49
not
compound_stmt -> with_stmt
49
with
compound_stmt -> with_stmt
49
return
compound_stmt -> with_stmt
49
(
compound_stmt -> with_stmt
49
NUMBER
compound_stmt -> with_stmt
49
[
compound_stmt -> with_stmt
49
STRING
compound_stmt -> with_stmt
49
nonlocal
compound_stmt -> with_stmt
49
False
compound_stmt -> with_stmt
49
~
compound_stmt -> with_stmt
49
yield
compound_stmt -> with_stmt
49
conf
compound_stmt -> with_stmt
49
try
compound_stmt -> with_stmt
49
lambda
compound_stmt -> with_stmt
49
@
compound_stmt -> with_stmt
49
for
compound_stmt -> with_stmt
49
$
compound_stmt -> with_stmt
49
NEWLINE
compound_stmt -> with_stmt
49
break
compound_stmt -> with_stmt
49
begsim
compound_stmt -> with_stmt
49
None
compound_stmt -> with_stmt
49
NAME
compound_stmt -> with_stmt
49
while
compound_stmt -> with_stmt
49
def
compound_stmt -> with_stmt
49
resetstats
compound_stmt -> with_stmt
49
continue
compound_stmt -> with_stmt
49
-
compound_stmt -> with_stmt
50
del
compound_stmt -> if_stmt
50
endsim
compound_stmt -> if_stmt
50
NUMBER
compound_stmt -> if_stmt
50
pass
compound_stmt -> if_stmt
50
STRING
compound_stmt -> if_stmt
50
~
compound_stmt -> if_stmt
50
+
compound_stmt -> if_stmt
50
NAME
compound_stmt -> if_stmt
50
while
compound_stmt -> if_stmt
50
not
compound_stmt -> if_stmt
50
$
compound_stmt -> if_stmt
50
False
compound_stmt -> if_stmt
50
continue
compound_stmt -> if_stmt
50
raise
compound_stmt -> if_stmt
50
try
compound_stmt -> if_stmt
50
None
compound_stmt -> if_stmt
50
begsim
compound_stmt -> if_stmt
50
global
compound_stmt -> if_stmt
50
{
compound_stmt -> if_stmt
50
return
compound_stmt -> if_stmt
50
@
compound_stmt -> if_stmt
50
conf
compound_stmt -> if_stmt
50
class
compound_stmt -> if_stmt
50
resetstats
compound_stmt -> if_stmt
50
if
compound_stmt -> if_stmt
50
NEWLINE
compound_stmt -> if_stmt
50
True
compound_stmt -> if_stmt
50
def
compound_stmt -> if_stmt
50
lambda
compound_stmt -> if_stmt
50
nonlocal
compound_stmt -> if_stmt
50
yield
compound_stmt -> if_stmt
50
[
compound_stmt -> if_stmt
50
with
compound_stmt -> if_stmt
50
-
compound_stmt -> if_stmt
50
(
compound_stmt -> if_stmt
50
break
compound_stmt -> if_stmt
50
assert
compound_stmt -> if_stmt
50
for
compound_stmt -> if_stmt
51
if
compound_stmt -> for_stmt
51
try
compound_stmt -> for_stmt
51
global
compound_stmt -> for_stmt
51
endsim
compound_stmt -> for_stmt
51
NEWLINE
compound_stmt -> for_stmt
51
yield
compound_stmt -> for_stmt
51
break
compound_stmt -> for_stmt
51
raise
compound_stmt -> for_stmt
51
continue
compound_stmt -> for_stmt
51
NUMBER
compound_stmt -> for_stmt
51
def
compound_stmt -> for_stmt
51
$
compound_stmt -> for_stmt
51
~
compound_stmt -> for_stmt
51
del
compound_stmt -> for_stmt
51
{
compound_stmt -> for_stmt
51
return
compound_stmt -> for_stmt
51
while
compound_stmt -> for_stmt
51
resetstats
compound_stmt -> for_stmt
51
assert
compound_stmt -> for_stmt
51
begsim
compound_stmt -> for_stmt
51
[
compound_stmt -> for_stmt
51
+
compound_stmt -> for_stmt
51
pass
compound_stmt -> for_stmt
51
True
compound_stmt -> for_stmt
51
lambda
compound_stmt -> for_stmt
51
NAME
compound_stmt -> for_stmt
51
class
compound_stmt -> for_stmt
51
conf
compound_stmt -> for_stmt
51
-
compound_stmt -> for_stmt
51
(
compound_stmt -> for_stmt
51
for
compound_stmt -> for_stmt
51
not
compound_stmt -> for_stmt
51
@
compound_stmt -> for_stmt
51
nonlocal
compound_stmt -> for_stmt
51
False
compound_stmt -> for_stmt
51
None
compound_stmt -> for_stmt
51
with
compound_stmt -> for_stmt
51
STRING
compound_stmt -> for_stmt
52
~
255
52
factor
256
52
STRING
257
52
shift_expr
258
52
expr
259
52
arith_expr
260
52
term
261
52
NUMBER
262
52
{
263
52
and_test
264
52
atom_expr
265
52
[
266
52
-
267
52
None
268
52
+
269
52
(
270
52
with_items
271
52
atom
272
52
and_expr
273
52
NAME
274
52
power
275
52
True
276
52
comparison
277
52
xor_expr
278
52
lambda
279
52
False
280
52
not_test
281
52
with_item
282
52
test
283
52
or_test
284
52
lambdef
285
52
not
286
53
NEWLINE
small_stmt -> flow_stmt
54
NEWLINE
break_stmt -> break
55
~
287
55
factor
288
55
STRING
289
55
shift_expr
290
55
term
291
55
NUMBER
292
55
{
293
55
atom_expr
294
55
[
295
55
-
296
55
None
297
55
lambda
298
55
NAME
299
55
(
300
55
arith_expr
301
55
atom
302
55
+
303
55
and_expr
304
55
power
305
55
True
306
55
comparison
307
55
xor_expr
308
55
False
309
55
NEWLINE
raise_stmt -> raise
55
not_test
310
55
lambdef
311
55
expr
312
55
or_test
313
55
and_test
314
55
not
315
55
test
316
56
expr
317
56
factor
318
56
~
319
56
STRING
320
56
None
321
56
arith_expr
322
56
[
323
56
NUMBER
324
56
{
325
56
(
326
56
atom
327
56
-
328
56
atom_expr
329
56
+
330
56
NEWLINE
yield_stmt -> yield
56
False
331
56
and_expr
332
56
True
333
56
power
334
56
term
335
56
shift_expr
336
56
NAME
337
56
xor_expr
338
56
expr_list
339
57
~
340
57
factor
341
57
STRING
342
57
shift_expr
343
57
arith_expr
344
57
term
345
57
NUMBER
346
57
test_list
347
57
{
348
57
atom_expr
349
57
[
350
57
-
351
57
None
352
57
(
353
57
atom
354
57
+
355
57
and_expr
356
57
NAME
357
57
power
358
57
True
359
57
comparison
360
57
lambda
361
57
xor_expr
362
57
False
363
57
not_test
364
57
lambdef
365
57
test
366
57
or_test
367
57
and_test
368
57
not
369
57
expr
370
58
NEWLINE
flow_stmt -> continue_stmt
59
NEWLINE
small_stmt -> stat_stmt
60
NEWLINE
flow_stmt -> return_stmt
61
&=
371
61
@=
372
61
**=
373
61
%=
374
61
^=
375
61
+=
376
61
>>=
377
61
*=
378
61
/=
379
61
<<=
380
61
//=
381
61
-=
382
61
|=
383
61
assign
384
61
annassign
385
61
=
386
61
:
387
61
augassign
388
61
NEWLINE
assign -> 
62
NEWLINE
continue_stmt -> continue
63
NEWLINE
flow_stmt -> yield_stmt
64
@
40
64
decorator
64
64
class
decorators -> decorator
64
decorators
389
64
def
decorators -> decorator
65
NEWLINE
small_stmt -> sim_stmt
66
NEWLINE
stat_stmt -> resetstats
67
expr
317
67
factor
318
67
~
319
67
STRING
320
67
None
321
67
arith_expr
322
67
[
323
67
NUMBER
324
67
{
325
67
(
326
67
atom
327
67
-
328
67
atom_expr
329
67
+
330
67
False
331
67
and_expr
332
67
True
333
67
power
334
67
term
335
67
shift_expr
336
67
NAME
337
67
xor_expr
338
67
expr_list
390
68
~
340
68
factor
341
68
STRING
342
68
shift_expr
343
68
arith_expr
344
68
term
345
68
NUMBER
346
68
{
348
68
atom_expr
349
68
[
350
68
-
351
68
None
352
68
(
353
68
atom
354
68
+
355
68
test_list
391
68
and_expr
356
68
NAME
357
68
power
358
68
True
359
68
comparison
360
68
lambda
361
68
xor_expr
362
68
False
363
68
not_test
364
68
lambdef
365
68
test
366
68
or_test
367
68
and_test
368
68
not
369
68
expr
370
68
NEWLINE
return_stmt -> return
69
NEWLINE
flow_stmt -> raise_stmt
70
NAME
392
70
namelist
393
71
NEWLINE
small_stmt -> pass_stmt
72
NEWLINE
small_stmt -> expr_stmt
73
$
OK
74
NEWLINE
small_stmt -> assert_stmt
75
NEWLINE
sim_stmt -> endsim
76
NEWLINE
pass_stmt -> pass
77
NEWLINE
small_stmt -> global_stmt
78
NEWLINE
small_stmt -> del_stmt
79
NAME
392
79
namelist
394
80
factor
1
80
decorators
2
80
(
3
80
STRING
4
80
expr
5
80
term
6
80
conf
7
80
not
8
80
while
9
80
or_test
10
80
if
11
80
~
12
80
atom_expr
13
80
comparison
14
80
None
15
80
class
16
80
xor_expr
17
80
arith_expr
18
80
+
19
80
confdef
20
80
decorated
21
80
atom
22
80
def
23
80
compound_stmt
24
80
try
25
80
NUMBER
26
80
NAME
27
80
False
28
80
shift_expr
29
80
try_stmt
30
80
while_stmt
31
80
[
32
80
and_expr
33
80
not_test
34
80
{
35
80
-
36
80
simple_stmt
37
80
for
38
80
and_test
39
80
@
40
80
funcdef
41
80
small_stmt
42
80
power
43
80
classdef
44
80
lambdef
45
80
lambda
46
80
test
47
80
True
48
80
with_stmt
49
80
if_stmt
50
80
for_stmt
51
80
with
52
80
$
program -> 
80
flow_stmt
53
80
break
54
80
raise
55
80
yield
56
80
assert
57
80
continue_stmt
58
80
stat_stmt
59
80
return_stmt
60
80
test_list
61
80
continue
62
80
yield_stmt
63
80
decorator
64
80
sim_stmt
65
80
resetstats
66
80
del
67
80
return
68
80
raise_stmt
69
80
nonlocal
70
80
pass_stmt
71
80
expr_stmt
72
80
assert_stmt
74
80
endsim
75
80
pass
76
80
global_stmt
77
80
del_stmt
78
80
global
79
80
program
395
80
stmt
80
80
NEWLINE
81
80
break_stmt
82
80
begsim
83
80
nonlocal_stmt
84
81
factor
1
81
decorators
2
81
(
3
81
STRING
4
81
expr
5
81
term
6
81
conf
7
81
not
8
81
while
9
81
or_test
10
81
if
11
81
~
12
81
atom_expr
13
81
comparison
14
81
None
15
81
class
16
81
xor_expr
17
81
arith_expr
18
81
+
19
81
confdef
20
81
decorated
21
81
atom
22
81
def
23
81
compound_stmt
24
81
try
25
81
NUMBER
26
81
NAME
27
81
False
28
81
shift_expr
29
81
try_stmt
30
81
while_stmt
31
81
[
32
81
and_expr
33
81
not_test
34
81
{
35
81
-
36
81
simple_stmt
37
81
for
38
81
and_test
39
81
@
40
81
funcdef
41
81
small_stmt
42
81
power
43
81
classdef
44
81
lambdef
45
81
lambda
46
81
test
47
81
True
48
81
with_stmt
49
81
if_stmt
50
81
for_stmt
51
81
with
52
81
$
program -> 
81
flow_stmt
53
81
break
54
81
raise
55
81
yield
56
81
assert
57
81
continue_stmt
58
81
stat_stmt
59
81
return_stmt
60
81
test_list
61
81
continue
62
81
yield_stmt
63
81
decorator
64
81
sim_stmt
65
81
resetstats
66
81
del
67
81
return
68
81
raise_stmt
69
81
nonlocal
70
81
pass_stmt
71
81
expr_stmt
72
81
assert_stmt
74
81
program
396
81
endsim
75
81
pass
76
81
global_stmt
77
81
del_stmt
78
81
global
79
81
stmt
80
81
NEWLINE
81
81
break_stmt
82
81
begsim
83
81
nonlocal_stmt
84
82
NEWLINE
flow_stmt -> break_stmt
83
~
397
83
factor
398
83
STRING
399
83
shift_expr
400
83
term
401
83
NUMBER
402
83
{
403
83
atom_expr
404
83
[
405
83
-
406
83
None
407
83
(
408
83
arith_expr
409
83
atom
410
83
+
411
83
and_expr
412
83
NAME
413
83
power
414
83
True
415
83
comparison
416
83
lambda
417
83
xor_expr
418
83
False
419
83
not_test
420
83
lambdef
421
83
test
422
83
or_test
423
83
and_test
424
83
not
425
83
expr
426
84
NEWLINE
small_stmt -> nonlocal_stmt
85
factor
1
85
(
3
85
STRING
4
85
~
12
85
atom_expr
13
85
None
15
85
power
43
85
+
19
85
[
32
85
atom
22
85
NUMBER
26
85
NAME
27
85
-
36
85
False
28
85
{
35
85
term
427
85
True
48
86
factor
1
86
(
3
86
STRING
4
86
~
12
86
atom_expr
13
86
None
15
86
power
43
86
+
19
86
term
428
86
[
32
86
atom
22
86
NUMBER
26
86
NAME
27
86
-
36
86
False
28
86
{
35
86
True
48
87
factor
1
87
(
3
87
STRING
4
87
~
12
87
atom_expr
13
87
None
15
87
power
43
87
+
19
87
[
32
87
atom
22
87
NUMBER
26
87
NAME
27
87
-
36
87
False
28
87
{
35
87
term
429
87
True
48
88
factor
1
88
(
3
88
STRING
4
88
~
12
88
atom_expr
13
88
None
15
88
power
43
88
+
19
88
[
32
88
atom
22
88
NUMBER
26
88
term
430
88
NAME
27
88
-
36
88
False
28
88
{
35
88
True
48
89
factor
1
89
(
3
89
STRING
4
89
~
12
89
atom_expr
13
89
None
15
89
power
43
89
+
19
89
term
431
89
[
32
89
atom
22
89
NUMBER
26
89
NAME
27
89
-
36
89
False
28
89
{
35
89
True
48
90
begsim
decorated -> decorators classdef
90
class
decorated -> decorators classdef
90
for
decorated -> decorators classdef
90
~
decorated -> decorators classdef
90
lambda
decorated -> decorators classdef
90
-
decorated -> decorators classdef
90
(
decorated -> decorators classdef
90
raise
decorated -> decorators classdef
90
pass
decorated -> decorators classdef
90
not
decorated -> decorators classdef
90
@
decorated -> decorators classdef
90
endsim
decorated -> decorators classdef
90
global
decorated -> decorators classdef
90
False
decorated -> decorators classdef
90
resetstats
decorated -> decorators classdef
90
try
decorated -> decorators classdef
90
continue
decorated -> decorators classdef
90
yield
decorated -> decorators classdef
90
{
decorated -> decorators classdef
90
conf
decorated -> decorators classdef
90
def
decorated -> decorators classdef
90
STRING
decorated -> decorators classdef
90
NEWLINE
decorated -> decorators classdef
90
None
decorated -> decorators classdef
90
assert
decorated -> decorators classdef
90
[
decorated -> decorators classdef
90
$
decorated -> decorators classdef
90
break
decorated -> decorators classdef
90
while
decorated -> decorators classdef
90
if
decorated -> decorators classdef
90
nonlocal
decorated -> decorators classdef
90
with
decorated -> decorators classdef
90
return
decorated -> decorators classdef
90
NAME
decorated -> decorators classdef
90
+
decorated -> decorators classdef
90
del
decorated -> decorators classdef
90
True
decorated -> decorators classdef
90
NUMBER
decorated -> decorators classdef
91
return
decorated -> decorators funcdef
91
begsim
decorated -> decorators funcdef
91
global
decorated -> decorators funcdef
91
False
decorated -> decorators funcdef
91
{
decorated -> decorators funcdef
91
$
decorated -> decorators funcdef
91
NUMBER
decorated -> decorators funcdef
91
-
decorated -> decorators funcdef
91
not
decorated -> decorators funcdef
91
for
decorated -> decorators funcdef
91
raise
decorated -> decorators funcdef
91
+
decorated -> decorators funcdef
91
(
decorated -> decorators funcdef
91
assert
decorated -> decorators funcdef
91
try
decorated -> decorators funcdef
91
yield
decorated -> decorators funcdef
91
continue
decorated -> decorators funcdef
91
resetstats
decorated -> decorators funcdef
91
~
decorated -> decorators funcdef
91
while
decorated -> decorators funcdef
91
lambda
decorated -> decorators funcdef
91
pass
decorated -> decorators funcdef
91
del
decorated -> decorators funcdef
91
NAME
decorated -> decorators funcdef
91
conf
decorated -> decorators funcdef
91
True
decorated -> decorators funcdef
91
[
decorated -> decorators funcdef
91
STRING
decorated -> decorators funcdef
91
None
decorated -> decorators funcdef
91
nonlocal
decorated -> decorators funcdef
91
endsim
decorated -> decorators funcdef
91
@
decorated -> decorators funcdef
91
class
decorated -> decorators funcdef
91
NEWLINE
decorated -> decorators funcdef
91
break
decorated -> decorators funcdef
91
if
decorated -> decorators funcdef
91
def
decorated -> decorators funcdef
91
with
decorated -> decorators funcdef
92
~
92
92
STRING
94
92
NUMBER
98
92
{
100
92
[
102
92
atom_expr
101
92
None
105
92
-
103
92
factor
432
92
(
106
92
atom
107
92
+
109
92
NAME
110
92
power
111
92
True
113
92
False
117
93
/
433
93
@
434
93
if
term -> factor
93
%
435
93
<<
term -> factor
93
-
term -> factor
93
//
436
93
*
437
93
>=
term -> factor
93
or
term -> factor
93
<=
term -> factor
93
>
term -> factor
93
)
term -> factor
93
in
term -> factor
93
<
term -> factor
93
>>
term -> factor
93
for
term -> factor
93
,
term -> factor
93
==
term -> factor
93
is
term -> factor
93
+
term -> factor
93
|
term -> factor
93
!=
term -> factor
93
&
term -> factor
93
not
term -> factor
93
and
term -> factor
93
^
term -> factor
94
==
atom -> STRING
94
>
atom -> STRING
94
for
atom -> STRING
94
<=
atom -> STRING
94
,
atom -> STRING
94
&
atom -> STRING
94
.
atom -> STRING
94
>=
atom -> STRING
94
@
atom -> STRING
94
[
atom -> STRING
94
^
atom -> STRING
94
%
atom -> STRING
94
**
atom -> STRING
94
-
atom -> STRING
94
//
atom -> STRING
94
>>
atom -> STRING
94
<
atom -> STRING
94
|
atom -> STRING
94
(
atom -> STRING
94
is
atom -> STRING
94
and
atom -> STRING
94
*
atom -> STRING
94
or
atom -> STRING
94
not
atom -> STRING
94
<<
atom -> STRING
94
/
atom -> STRING
94
+
atom -> STRING
94
!=
atom -> STRING
94
in
atom -> STRING
94
)
atom -> STRING
94
if
atom -> STRING
95
&
438
95
in
and_expr -> shift_expr
95
,
and_expr -> shift_expr
95
for
and_expr -> shift_expr
95
not
and_expr -> shift_expr
95
!=
and_expr -> shift_expr
95
>=
and_expr -> shift_expr
95
if
and_expr -> shift_expr
95
)
and_expr -> shift_expr
95
and
and_expr -> shift_expr
95
|
and_expr -> shift_expr
95
is
and_expr -> shift_expr
95
<=
and_expr -> shift_expr
95
>
and_expr -> shift_expr
95
^
and_expr -> shift_expr
95
or
and_expr -> shift_expr
95
<
and_expr -> shift_expr
95
==
and_expr -> shift_expr
96
>>
439
96
^
shift_expr -> arith_expr
96
<<
440
96
or
shift_expr -> arith_expr
96
|
shift_expr -> arith_expr
96
<=
shift_expr -> arith_expr
96
for
shift_expr -> arith_expr
96
is
shift_expr -> arith_expr
96
<
shift_expr -> arith_expr
96
if
shift_expr -> arith_expr
96
not
shift_expr -> arith_expr
96
in
shift_expr -> arith_expr
96
and
shift_expr -> arith_expr
96
>=
shift_expr -> arith_expr
96
==
shift_expr -> arith_expr
96
)
shift_expr -> arith_expr
96
!=
shift_expr -> arith_expr
96
>
shift_expr -> arith_expr
96
,
shift_expr -> arith_expr
96
&
shift_expr -> arith_expr
97
+
441
97
-
442
97
if
arith_expr -> term
97
<=
arith_expr -> term
97
for
arith_expr -> term
97
|
arith_expr -> term
97
not
arith_expr -> term
97
^
arith_expr -> term
97
<<
arith_expr -> term
97
&
arith_expr -> term
97
==
arith_expr -> term
97
is
arith_expr -> term
97
!=
arith_expr -> term
97
>
arith_expr -> term
97
and
arith_expr -> term
97
<
arith_expr -> term
97
or
arith_expr -> term
97
,
arith_expr -> term
97
)
arith_expr -> term
97
>=
arith_expr -> term
97
>>
arith_expr -> term
97
in
arith_expr -> term
98
<<
atom -> NUMBER
98
)
atom -> NUMBER
98
-
atom -> NUMBER
98
^
atom -> NUMBER
98
or
atom -> NUMBER
98
==
atom -> NUMBER
98
!=
atom -> NUMBER
98
/
atom -> NUMBER
98
and
atom -> NUMBER
98
%
atom -> NUMBER
98
,
atom -> NUMBER
98
>=
atom -> NUMBER
98
@
atom -> NUMBER
98
|
atom -> NUMBER
98
[
atom -> NUMBER
98
//
atom -> NUMBER
98
.
atom -> NUMBER
98
not
atom -> NUMBER
98
for
atom -> NUMBER
98
<
atom -> NUMBER
98
>>
atom -> NUMBER
98
if
atom -> NUMBER
98
<=
atom -> NUMBER
98
>
atom -> NUMBER
98
&
atom -> NUMBER
98
is
atom -> NUMBER
98
**
atom -> NUMBER
98
in
atom -> NUMBER
98
+
atom -> NUMBER
98
(
atom -> NUMBER
98
*
atom -> NUMBER
99
not
xor_expr -> and_expr
99
^
443
99
)
xor_expr -> and_expr
99
if
xor_expr -> and_expr
99
|
xor_expr -> and_expr
99
>
xor_expr -> and_expr
99
<
xor_expr -> and_expr
99
for
xor_expr -> and_expr
99
or
xor_expr -> and_expr
99
>=
xor_expr -> and_expr
99
in
xor_expr -> and_expr
99
and
xor_expr -> and_expr
99
is
xor_expr -> and_expr
99
==
xor_expr -> and_expr
99
!=
xor_expr -> and_expr
99
<=
xor_expr -> and_expr
99
,
xor_expr -> and_expr
100
}
444
101
**
445
101
or
power -> atom_expr
101
for
power -> atom_expr
101
*
power -> atom_expr
101
>=
power -> atom_expr
101
^
power -> atom_expr
101
in
power -> atom_expr
101
!=
power -> atom_expr
101
if
power -> atom_expr
101
@
power -> atom_expr
101
-
power -> atom_expr
101
and
power -> atom_expr
101
not
power -> atom_expr
101
==
power -> atom_expr
101
<
power -> atom_expr
101
&
power -> atom_expr
101
|
power -> atom_expr
101
//
power -> atom_expr
101
>
power -> atom_expr
101
,
power -> atom_expr
101
%
power -> atom_expr
101
/
power -> atom_expr
101
is
power -> atom_expr
101
<<
power -> atom_expr
101
>>
power -> atom_expr
101
+
power -> atom_expr
101
)
power -> atom_expr
101
<=
power -> atom_expr
102
~
186
102
factor
187
102
STRING
188
102
shift_expr
189
102
test_list_comp
446
102
arith_expr
191
102
term
192
102
atom_expr
193
102
]
447
102
test
195
102
NUMBER
196
102
and_expr
197
102
{
198
102
[
199
102
-
200
102
None
201
102
(
202
102
atom
203
102
+
204
102
NAME
205
102
power
206
102
True
207
102
comparison
208
102
xor_expr
209
102
lambdef
210
102
False
211
102
not_test
212
102
or_test
213
102
and_test
214
102
lambda
215
102
not
216
102
expr
217
102
test_list
218
103
~
92
103
STRING
94
103
NUMBER
98
103
factor
448
103
{
100
103
[
102
103
atom_expr
101
103
None
105
103
-
103
103
(
106
103
atom
107
103
+
109
103
NAME
110
103
power
111
103
True
113
103
False
117
104
&=
atom -> ( )
104
-
atom -> ( )
104
==
atom -> ( )
104
/=
atom -> ( )
104
/
atom -> ( )
104
<<=
atom -> ( )
104
<=
atom -> ( )
104
%=
atom -> ( )
104
&
atom -> ( )
104
(
atom -> ( )
104
[
atom -> ( )
104
,
atom -> ( )
104
=
atom -> ( )
104
^
atom -> ( )
104
-=
atom -> ( )
104
or
atom -> ( )
104
+
atom -> ( )
104
NEWLINE
atom -> ( )
104
>>
atom -> ( )
104
is
atom -> ( )
104
*
atom -> ( )
104
+=
atom -> ( )
104
if
atom -> ( )
104
|=
atom -> ( )
104
and
atom -> ( )
104
//=
atom -> ( )
104
>=
atom -> ( )
104
>
atom -> ( )
104
*=
atom -> ( )
104
@
atom -> ( )
104
:
atom -> ( )
104
in
atom -> ( )
104
not
atom -> ( )
104
^=
atom -> ( )
104
@=
atom -> ( )
104
<
atom -> ( )
104
.
atom -> ( )
104
//
atom -> ( )
104
%
atom -> ( )
104
<<
atom -> ( )
104
|
atom -> ( )
104
**=
atom -> ( )
104
>>=
atom -> ( )
104
**
atom -> ( )
104
!=
atom -> ( )
105
not
atom -> None
105
or
atom -> None
105
==
atom -> None
105
*
atom -> None
105
for
atom -> None
105
-
atom -> None
105
^
atom -> None
105
>>
atom -> None
105
if
atom -> None
105
,
atom -> None
105
<<
atom -> None
105
and
atom -> None
105
|
atom -> None
105
&
atom -> None
105
!=
atom -> None
105
@
atom -> None
105
.
atom -> None
105
/
atom -> None
105
%
atom -> None
105
>
atom -> None
105
is
atom -> None
105
<
atom -> None
105
)
atom -> None
105
(
atom -> None
105
**
atom -> None
105
//
atom -> None
105
in
atom -> None
105
<=
atom -> None
105
>=
atom -> None
105
+
atom -> None
105
[
atom -> None
106
~
92
106
factor
93
106
STRING
94
106
shift_expr
95
106
arith_expr
96
106
term
97
106
NUMBER
98
106
and_expr
99
106
{
100
106
atom_expr
101
106
[
102
106
-
103
106
)
449
106
None
105
106
(
106
106
atom
107
106
test_list_comp
450
106
+
109
106
NAME
110
106
power
111
106
test_list
112
106
True
113
106
comparison
114
106
xor_expr
115
106
lambdef
116
106
False
117
106
not_test
118
106
or_test
119
106
test
120
106
lambda
121
106
and_test
122
106
not
123
106
expr
124
107
[
451
107
(
452
107
.
453
107
//
trailer_expr -> 
107
trailer
454
107
<<
trailer_expr -> 
107
trailer_expr
455
107
*
trailer_expr -> 
107
in
trailer_expr -> 
107
&
trailer_expr -> 
107
and
trailer_expr -> 
107
<=
trailer_expr -> 
107
,
trailer_expr -> 
107
|
trailer_expr -> 
107
or
trailer_expr -> 
107
>=
trailer_expr -> 
107
for
trailer_expr -> 
107
+
trailer_expr -> 
107
**
trailer_expr -> 
107
>>
trailer_expr -> 
107
!=
trailer_expr -> 
107
-
trailer_expr -> 
107
/
trailer_expr -> 
107
%
trailer_expr -> 
107
is
trailer_expr -> 
107
<
trailer_expr -> 
107
if
trailer_expr -> 
107
>
trailer_expr -> 
107
^
trailer_expr -> 
107
==
trailer_expr -> 
107
@
trailer_expr -> 
107
)
trailer_expr -> 
107
not
trailer_expr -> 
108
)
456
109
~
92
109
STRING
94
109
NUMBER
98
109
{
100
109
factor
457
109
atom_expr
101
109
[
102
109
None
105
109
-
103
109
(
106
109
atom
107
109
+
109
109
NAME
110
109
power
111
109
True
113
109
False
117
110
<=
atom -> NAME
110
@
atom -> NAME
110
>>
atom -> NAME
110
==
atom -> NAME
110
>
atom -> NAME
110
*
atom -> NAME
110
-
atom -> NAME
110
&
atom -> NAME
110
is
atom -> NAME
110
.
atom -> NAME
110
or
atom -> NAME
110
in
atom -> NAME
110
for
atom -> NAME
110
)
atom -> NAME
110
<<
atom -> NAME
110
+
atom -> NAME
110
,
atom -> NAME
110
if
atom -> NAME
110
|
atom -> NAME
110
and
atom -> NAME
110
^
atom -> NAME
110
/
atom -> NAME
110
[
atom -> NAME
110
not
atom -> NAME
110
!=
atom -> NAME
110
%
atom -> NAME
110
<
atom -> NAME
110
>=
atom -> NAME
110
**
atom -> NAME
110
(
atom -> NAME
110
//
atom -> NAME
111
if
factor -> power
111
is
factor -> power
111
%
factor -> power
111
==
factor -> power
111
>=
factor -> power
111
or
factor -> power
111
and
factor -> power
111
/
factor -> power
111
<
factor -> power
111
+
factor -> power
111
,
factor -> power
111
//
factor -> power
111
for
factor -> power
111
@
factor -> power
111
in
factor -> power
111
)
factor -> power
111
<=
factor -> power
111
&
factor -> power
111
!=
factor -> power
111
<<
factor -> power
111
|
factor -> power
111
>
factor -> power
111
*
factor -> power
111
^
factor -> power
111
-
factor -> power
111
not
factor -> power
111
>>
factor -> power
112
)
test_list_comp -> test_list
113
for
atom -> True
113
>
atom -> True
113
|
atom -> True
113
-
atom -> True
113
==
atom -> True
113
<<
atom -> True
113
if
atom -> True
113
%
atom -> True
113
/
atom -> True
113
[
atom -> True
113
*
atom -> True
113
<=
atom -> True
113
<
atom -> True
113
&
atom -> True
113
+
atom -> True
113
**
atom -> True
113
!=
atom -> True
113
>>
atom -> True
113
//
atom -> True
113
and
atom -> True
113
^
atom -> True
113
is
atom -> True
113
or
atom -> True
113
)
atom -> True
113
.
atom -> True
113
,
atom -> True
113
(
atom -> True
113
>=
atom -> True
113
@
atom -> True
113
not
atom -> True
113
in
atom -> True
114
for
not_test -> comparison
114
or
not_test -> comparison
114
if
not_test -> comparison
114
and
not_test -> comparison
114
,
not_test -> comparison
114
)
not_test -> comparison
115
not
expr -> xor_expr
115
or
expr -> xor_expr
115
|
458
115
==
expr -> xor_expr
115
in
expr -> xor_expr
115
if
expr -> xor_expr
115
<=
expr -> xor_expr
115
is
expr -> xor_expr
115
<
expr -> xor_expr
115
>=
expr -> xor_expr
115
for
expr -> xor_expr
115
>
expr -> xor_expr
115
)
expr -> xor_expr
115
and
expr -> xor_expr
115
!=
expr -> xor_expr
115
,
expr -> xor_expr
116
,
test -> lambdef
116
)
test -> lambdef
116
for
test -> lambdef
117
<=
atom -> False
117
*
atom -> False
117
not
atom -> False
117
!=
atom -> False
117
for
atom -> False
117
@
atom -> False
117
and
atom -> False
117
if
atom -> False
117
<<
atom -> False
117
>
atom -> False
117
,
atom -> False
117
+
atom -> False
117
/
atom -> False
117
==
atom -> False
117
&
atom -> False
117
^
atom -> False
117
)
atom -> False
117
[
atom -> False
117
in
atom -> False
117
is
atom -> False
117
%
atom -> False
117
>=
atom -> False
117
//
atom -> False
117
(
atom -> False
117
|
atom -> False
117
<
atom -> False
117
.
atom -> False
117
or
atom -> False
117
**
atom -> False
117
>>
atom -> False
117
-
atom -> False
118
or
and_test -> not_test
118
,
and_test -> not_test
118
if
and_test -> not_test
118
and
459
118
)
and_test -> not_test
118
for
and_test -> not_test
119
for
test -> or_test
119
if
460
119
)
test -> or_test
119
,
test -> or_test
120
)
test_list -> test
120
comp_for
461
120
,
462
120
for
463
121
:
464
121
NAME
251
121
vfpdef
253
121
varargslist
465
122
)
or_test -> and_test
122
or
466
122
if
or_test -> and_test
122
,
or_test -> and_test
122
for
or_test -> and_test
123
~
92
123
factor
93
123
STRING
94
123
shift_expr
95
123
arith_expr
96
123
term
97
123
NUMBER
98
123
and_expr
99
123
{
100
123
atom_expr
101
123
[
102
123
-
103
123
None
105
123
(
106
123
atom
107
123
+
109
123
NAME
110
123
power
111
123
True
113
123
comparison
114
123
xor_expr
115
123
False
117
123
not_test
467
123
not
123
123
expr
124
124
!=
125
124
,
comparison -> expr
124
is
126
124
>=
127
124
in
128
124
<
129
124
==
131
124
comp_op
468
124
<=
132
124
not
133
124
>
134
124
)
comparison -> expr
124
for
comparison -> expr
124
or
comparison -> expr
124
if
comparison -> expr
124
and
comparison -> expr
125
False
comp_op -> !=
125
STRING
comp_op -> !=
125
True
comp_op -> !=
125
~
comp_op -> !=
125
NUMBER
comp_op -> !=
125
(
comp_op -> !=
125
[
comp_op -> !=
125
-
comp_op -> !=
125
+
comp_op -> !=
125
None
comp_op -> !=
125
{
comp_op -> !=
125
NAME
comp_op -> !=
126
not
469
126
NAME
comp_op -> is
126
None
comp_op -> is
126
True
comp_op -> is
126
[
comp_op -> is
126
STRING
comp_op -> is
126
NUMBER
comp_op -> is
126
+
comp_op -> is
126
(
comp_op -> is
126
{
comp_op -> is
126
False
comp_op -> is
126
~
comp_op -> is
126
-
comp_op -> is
127
NAME
comp_op -> >=
127
[
comp_op -> >=
127
False
comp_op -> >=
127
-
comp_op -> >=
127
+
comp_op -> >=
127
True
comp_op -> >=
127
{
comp_op -> >=
127
STRING
comp_op -> >=
127
NUMBER
comp_op -> >=
127
None
comp_op -> >=
127
~
comp_op -> >=
127
(
comp_op -> >=
128
(
comp_op -> in
128
+
comp_op -> in
128
None
comp_op -> in
128
NUMBER
comp_op -> in
128
-
comp_op -> in
128
{
comp_op -> in
128
False
comp_op -> in
128
NAME
comp_op -> in
128
True
comp_op -> in
128
STRING
comp_op -> in
128
[
comp_op -> in
128
~
comp_op -> in
129
None
comp_op -> <
129
True
comp_op -> <
129
(
comp_op -> <
129
STRING
comp_op -> <
129
False
comp_op -> <
129
-
comp_op -> <
129
[
comp_op -> <
129
NAME
comp_op -> <
129
{
comp_op -> <
129
~
comp_op -> <
129
NUMBER
comp_op -> <
129
+
comp_op -> <
130
expr
5
130
factor
1
130
(
3
130
STRING
4
130
term
6
130
~
12
130
atom_expr
13
130
shift_expr
29
130
None
15
130
power
43
130
+
19
130
xor_expr
17
130
arith_expr
18
130
[
32
130
atom
22
130
NUMBER
26
130
NAME
27
130
-
36
130
False
28
130
{
35
130
and_expr
33
130
comparison
470
130
True
48
131
True
comp_op -> ==
131
None
comp_op -> ==
131
+
comp_op -> ==
131
-
comp_op -> ==
131
NAME
comp_op -> ==
131
~
comp_op -> ==
131
NUMBER
comp_op -> ==
131
(
comp_op -> ==
131
False
comp_op -> ==
131
{
comp_op -> ==
131
STRING
comp_op -> ==
131
[
comp_op -> ==
132
[
comp_op -> <=
132
NAME
comp_op -> <=
132
~
comp_op -> <=
132
None
comp_op -> <=
132
True
comp_op -> <=
132
-
comp_op -> <=
132
{
comp_op -> <=
132
(
comp_op -> <=
132
STRING
comp_op -> <=
132
+
comp_op -> <=
132
NUMBER
comp_op -> <=
132
False
comp_op -> <=
133
in
471
134
-
comp_op -> >
134
None
comp_op -> >
134
False
comp_op -> >
134
+
comp_op -> >
134
STRING
comp_op -> >
134
[
comp_op -> >
134
(
comp_op -> >
134
{
comp_op -> >
134
NAME
comp_op -> >
134
True
comp_op -> >
134
NUMBER
comp_op -> >
134
~
comp_op -> >
135
~
12
135
factor
1
135
(
3
135
STRING
4
135
arith_expr
472
135
term
6
135
NUMBER
26
135
None
15
135
{
35
135
atom_expr
13
135
[
32
135
atom
22
135
-
36
135
+
19
135
power
43
135
NAME
27
135
True
48
135
False
28
136
~
12
136
factor
1
136
(
3
136
STRING
4
136
term
6
136
arith_expr
473
136
NUMBER
26
136
None
15
136
{
35
136
atom_expr
13
136
[
32
136
-
36
136
atom
22
136
+
19
136
power
43
136
NAME
27
136
True
48
136
False
28
137
:
474
138
/=
not_test -> not not_test
138
NEWLINE
not_test -> not not_test
138
@=
not_test -> not not_test
138
//=
not_test -> not not_test
138
:
not_test -> not not_test
138
|=
not_test -> not not_test
138
&=
not_test -> not not_test
138
-=
not_test -> not not_test
138
**=
not_test -> not not_test
138
or
not_test -> not not_test
138
>>=
not_test -> not not_test
138
,
not_test -> not not_test
138
=
not_test -> not not_test
138
*=
not_test -> not not_test
138
+=
not_test -> not not_test
138
^=
not_test -> not not_test
138
if
not_test -> not not_test
138
<<=
not_test -> not not_test
138
and
not_test -> not not_test
138
%=
not_test -> not not_test
139
~
139
139
STRING
143
139
NUMBER
146
139
{
147
139
[
149
139
atom_expr
148
139
None
151
139
-
150
139
+
152
139
factor
475
139
(
153
139
atom
155
139
NAME
157
139
power
158
139
True
159
139
False
163
140
/
476
140
@
477
140
if
term -> factor
140
%
478
140
*
479
140
<<
term -> factor
140
-
term -> factor
140
//
480
140
>=
term -> factor
140
or
term -> factor
140
<=
term -> factor
140
>
term -> factor
140
in
term -> factor
140
<
term -> factor
140
>>
term -> factor
140
==
term -> factor
140
is
term -> factor
140
+
term -> factor
140
|
term -> factor
140
!=
term -> factor
140
:
term -> factor
140
&
term -> factor
140
not
term -> factor
140
and
term -> factor
140
^
term -> factor
141
:
481
142
&
482
142
in
and_expr -> shift_expr
142
not
and_expr -> shift_expr
142
:
and_expr -> shift_expr
142
<
and_expr -> shift_expr
142
!=
and_expr -> shift_expr
142
>=
and_expr -> shift_expr
142
if
and_expr -> shift_expr
142
and
and_expr -> shift_expr
142
|
and_expr -> shift_expr
142
is
and_expr -> shift_expr
142
<=
and_expr -> shift_expr
142
>
and_expr -> shift_expr
142
^
and_expr -> shift_expr
142
or
and_expr -> shift_expr
142
==
and_expr -> shift_expr
143
==
atom -> STRING
143
>
atom -> STRING
143
<=
atom -> STRING
143
&
atom -> STRING
143
.
atom -> STRING
143
>=
atom -> STRING
143
@
atom -> STRING
143
[
atom -> STRING
143
^
atom -> STRING
143
%
atom -> STRING
143
**
atom -> STRING
143
-
atom -> STRING
143
//
atom -> STRING
143
>>
atom -> STRING
143
<
atom -> STRING
143
|
atom -> STRING
143
(
atom -> STRING
143
is
atom -> STRING
143
and
atom -> STRING
143
*
atom -> STRING
143
or
atom -> STRING
143
not
atom -> STRING
143
<<
atom -> STRING
143
/
atom -> STRING
143
+
atom -> STRING
143
!=
atom -> STRING
143
in
atom -> STRING
143
:
atom -> STRING
143
if
atom -> STRING
144
!=
125
144
is
126
144
>=
127
144
in
128
144
<
129
144
==
131
144
<=
132
144
not
133
144
>
134
144
comp_op
483
144
:
comparison -> expr
144
or
comparison -> expr
144
if
comparison -> expr
144
and
comparison -> expr
145
+
484
145
if
arith_expr -> term
145
-
485
145
<=
arith_expr -> term
145
|
arith_expr -> term
145
not
arith_expr -> term
145
^
arith_expr -> term
145
<<
arith_expr -> term
145
&
arith_expr -> term
145
==
arith_expr -> term
145
is
arith_expr -> term
145
!=
arith_expr -> term
145
>
arith_expr -> term
145
and
arith_expr -> term
145
:
arith_expr -> term
145
<
arith_expr -> term
145
or
arith_expr -> term
145
>=
arith_expr -> term
145
>>
arith_expr -> term
145
in
arith_expr -> term
146
<<
atom -> NUMBER
146
:
atom -> NUMBER
146
-
atom -> NUMBER
146
^
atom -> NUMBER
146
or
atom -> NUMBER
146
==
atom -> NUMBER
146
!=
atom -> NUMBER
146
/
atom -> NUMBER
146
and
atom -> NUMBER
146
%
atom -> NUMBER
146
>=
atom -> NUMBER
146
@
atom -> NUMBER
146
|
atom -> NUMBER
146
[
atom -> NUMBER
146
//
atom -> NUMBER
146
.
atom -> NUMBER
146
not
atom -> NUMBER
146
<
atom -> NUMBER
146
>>
atom -> NUMBER
146
if
atom -> NUMBER
146
<=
atom -> NUMBER
146
>
atom -> NUMBER
146
&
atom -> NUMBER
146
is
atom -> NUMBER
146
**
atom -> NUMBER
146
in
atom -> NUMBER
146
+
atom -> NUMBER
146
(
atom -> NUMBER
146
*
atom -> NUMBER
147
}
486
148
**
487
148
or
power -> atom_expr
148
:
power -> atom_expr
148
*
power -> atom_expr
148
>=
power -> atom_expr
148
^
power -> atom_expr
148
in
power -> atom_expr
148
!=
power -> atom_expr
148
if
power -> atom_expr
148
@
power -> atom_expr
148
-
power -> atom_expr
148
and
power -> atom_expr
148
not
power -> atom_expr
148
==
power -> atom_expr
148
<
power -> atom_expr
148
&
power -> atom_expr
148
|
power -> atom_expr
148
//
power -> atom_expr
148
>
power -> atom_expr
148
%
power -> atom_expr
148
/
power -> atom_expr
148
is
power -> atom_expr
148
<<
power -> atom_expr
148
>>
power -> atom_expr
148
+
power -> atom_expr
148
<=
power -> atom_expr
149
~
186
149
factor
187
149
STRING
188
149
shift_expr
189
149
test_list_comp
488
149
arith_expr
191
149
term
192
149
atom_expr
193
149
]
489
149
test
195
149
NUMBER
196
149
and_expr
197
149
{
198
149
[
199
149
-
200
149
None
201
149
(
202
149
atom
203
149
+
204
149
NAME
205
149
power
206
149
True
207
149
comparison
208
149
xor_expr
209
149
lambdef
210
149
False
211
149
not_test
212
149
or_test
213
149
and_test
214
149
lambda
215
149
not
216
149
expr
217
149
test_list
218
150
~
139
150
STRING
143
150
NUMBER
146
150
factor
490
150
{
147
150
[
149
150
atom_expr
148
150
None
151
150
-
150
150
+
152
150
(
153
150
atom
155
150
NAME
157
150
power
158
150
True
159
150
False
163
151
not
atom -> None
151
or
atom -> None
151
==
atom -> None
151
*
atom -> None
151
-
atom -> None
151
^
atom -> None
151
>>
atom -> None
151
if
atom -> None
151
<<
atom -> None
151
and
atom -> None
151
|
atom -> None
151
&
atom -> None
151
!=
atom -> None
151
@
atom -> None
151
.
atom -> None
151
/
atom -> None
151
%
atom -> None
151
>
atom -> None
151
is
atom -> None
151
<
atom -> None
151
(
atom -> None
151
**
atom -> None
151
//
atom -> None
151
in
atom -> None
151
<=
atom -> None
151
>=
atom -> None
151
+
atom -> None
151
[
atom -> None
151
:
atom -> None
152
~
139
152
STRING
143
152
NUMBER
146
152
{
147
152
factor
491
152
atom_expr
148
152
[
149
152
None
151
152
-
150
152
+
152
152
(
153
152
atom
155
152
NAME
157
152
power
158
152
True
159
152
False
163
153
~
92
153
factor
93
153
STRING
94
153
shift_expr
95
153
arith_expr
96
153
term
97
153
NUMBER
98
153
and_expr
99
153
{
100
153
atom_expr
101
153
[
102
153
-
103
153
None
105
153
(
106
153
atom
107
153
+
109
153
)
492
153
NAME
110
153
test_list_comp
493
153
power
111
153
test_list
112
153
True
113
153
comparison
114
153
xor_expr
115
153
lambdef
116
153
False
117
153
not_test
118
153
or_test
119
153
test
120
153
lambda
121
153
and_test
122
153
not
123
153
expr
124
154
>>
494
154
^
shift_expr -> arith_expr
154
<<
495
154
or
shift_expr -> arith_expr
154
|
shift_expr -> arith_expr
154
<=
shift_expr -> arith_expr
154
is
shift_expr -> arith_expr
154
<
shift_expr -> arith_expr
154
if
shift_expr -> arith_expr
154
not
shift_expr -> arith_expr
154
in
shift_expr -> arith_expr
154
and
shift_expr -> arith_expr
154
>=
shift_expr -> arith_expr
154
==
shift_expr -> arith_expr
154
:
shift_expr -> arith_expr
154
!=
shift_expr -> arith_expr
154
>
shift_expr -> arith_expr
154
&
shift_expr -> arith_expr
155
[
496
155
(
497
155
//
trailer_expr -> 
155
trailer
498
155
<<
trailer_expr -> 
155
trailer_expr
499
155
*
trailer_expr -> 
155
in
trailer_expr -> 
155
&
trailer_expr -> 
155
.
500
155
and
trailer_expr -> 
155
<=
trailer_expr -> 
155
|
trailer_expr -> 
155
or
trailer_expr -> 
155
>=
trailer_expr -> 
155
:
trailer_expr -> 
155
+
trailer_expr -> 
155
**
trailer_expr -> 
155
>>
trailer_expr -> 
155
!=
trailer_expr -> 
155
-
trailer_expr -> 
155
/
trailer_expr -> 
155
%
trailer_expr -> 
155
is
trailer_expr -> 
155
<
trailer_expr -> 
155
if
trailer_expr -> 
155
>
trailer_expr -> 
155
^
trailer_expr -> 
155
==
trailer_expr -> 
155
@
trailer_expr -> 
155
not
trailer_expr -> 
156
not
xor_expr -> and_expr
156
if
xor_expr -> and_expr
156
|
xor_expr -> and_expr
156
>
xor_expr -> and_expr
156
^
501
156
<
xor_expr -> and_expr
156
or
xor_expr -> and_expr
156
:
xor_expr -> and_expr
156
>=
xor_expr -> and_expr
156
in
xor_expr -> and_expr
156
and
xor_expr -> and_expr
156
is
xor_expr -> and_expr
156
==
xor_expr -> and_expr
156
!=
xor_expr -> and_expr
156
<=
xor_expr -> and_expr
157
<=
atom -> NAME
157
@
atom -> NAME
157
>>
atom -> NAME
157
==
atom -> NAME
157
>
atom -> NAME
157
*
atom -> NAME
157
-
atom -> NAME
157
&
atom -> NAME
157
is
atom -> NAME
157
.
atom -> NAME
157
or
atom -> NAME
157
in
atom -> NAME
157
<<
atom -> NAME
157
+
atom -> NAME
157
if
atom -> NAME
157
|
atom -> NAME
157
and
atom -> NAME
157
^
atom -> NAME
157
/
atom -> NAME
157
[
atom -> NAME
157
not
atom -> NAME
157
!=
atom -> NAME
157
%
atom -> NAME
157
:
atom -> NAME
157
<
atom -> NAME
157
>=
atom -> NAME
157
**
atom -> NAME
157
(
atom -> NAME
157
//
atom -> NAME
158
if
factor -> power
158
is
factor -> power
158
%
factor -> power
158
==
factor -> power
158
>=
factor -> power
158
or
factor -> power
158
and
factor -> power
158
/
factor -> power
158
<
factor -> power
158
+
factor -> power
158
:
factor -> power
158
//
factor -> power
158
@
factor -> power
158
in
factor -> power
158
<=
factor -> power
158
&
factor -> power
158
!=
factor -> power
158
<<
factor -> power
158
|
factor -> power
158
>
factor -> power
158
*
factor -> power
158
^
factor -> power
158
-
factor -> power
158
not
factor -> power
158
>>
factor -> power
159
>
atom -> True
159
|
atom -> True
159
-
atom -> True
159
==
atom -> True
159
<<
atom -> True
159
if
atom -> True
159
%
atom -> True
159
/
atom -> True
159
[
atom -> True
159
:
atom -> True
159
*
atom -> True
159
<=
atom -> True
159
<
atom -> True
159
&
atom -> True
159
+
atom -> True
159
**
atom -> True
159
!=
atom -> True
159
>>
atom -> True
159
//
atom -> True
159
and
atom -> True
159
^
atom -> True
159
is
atom -> True
159
or
atom -> True
159
.
atom -> True
159
(
atom -> True
159
>=
atom -> True
159
@
atom -> True
159
not
atom -> True
159
in
atom -> True
160
if
not_test -> comparison
160
and
not_test -> comparison
160
:
not_test -> comparison
160
or
not_test -> comparison
161
not
expr -> xor_expr
161
or
expr -> xor_expr
161
==
expr -> xor_expr
161
in
expr -> xor_expr
161
|
502
161
if
expr -> xor_expr
161
:
expr -> xor_expr
161
<=
expr -> xor_expr
161
is
expr -> xor_expr
161
<
expr -> xor_expr
161
>=
expr -> xor_expr
161
>
expr -> xor_expr
161
and
expr -> xor_expr
161
!=
expr -> xor_expr
162
NAME
251
162
vfpdef
253
162
:
503
162
varargslist
504
163
<=
atom -> False
163
*
atom -> False
163
not
atom -> False
163
!=
atom -> False
163
@
atom -> False
163
and
atom -> False
163
if
atom -> False
163
<<
atom -> False
163
>
atom -> False
163
:
atom -> False
163
+
atom -> False
163
/
atom -> False
163
==
atom -> False
163
&
atom -> False
163
^
atom -> False
163
in
atom -> False
163
[
atom -> False
163
is
atom -> False
163
%
atom -> False
163
>=
atom -> False
163
//
atom -> False
163
(
atom -> False
163
|
atom -> False
163
<
atom -> False
163
.
atom -> False
163
or
atom -> False
163
**
atom -> False
163
>>
atom -> False
163
-
atom -> False
164
or
and_test -> not_test
164
if
and_test -> not_test
164
and
505
164
:
and_test -> not_test
165
if
or_test -> and_test
165
or
506
165
:
or_test -> and_test
166
~
139
166
factor
140
166
STRING
143
166
shift_expr
142
166
expr
144
166
term
145
166
NUMBER
146
166
{
147
166
atom_expr
148
166
[
149
166
-
150
166
None
151
166
+
152
166
(
153
166
arith_expr
154
166
atom
155
166
and_expr
156
166
NAME
157
166
power
158
166
True
159
166
comparison
160
166
xor_expr
161
166
False
163
166
not_test
507
166
not
166
167
if
508
167
:
test -> or_test
168
:
test -> lambdef
169
~
509
169
factor
510
169
STRING
511
169
shift_expr
512
169
term
513
169
NUMBER
514
169
{
515
169
atom_expr
516
169
[
517
169
-
518
169
None
519
169
(
520
169
atom
521
169
arith_expr
522
169
False
523
169
+
524
169
or_test
525
169
NAME
526
169
power
527
169
True
528
169
xor_expr
529
169
comparison
530
169
and_expr
531
169
not_test
532
169
not
533
169
expr
534
169
and_test
535
170
:
536
171
,
factor -> ~ factor
171
<
factor -> ~ factor
171
*=
factor -> ~ factor
171
in
factor -> ~ factor
171
==
factor -> ~ factor
171
|
factor -> ~ factor
171
<<
factor -> ~ factor
171
>
factor -> ~ factor
171
not
factor -> ~ factor
171
<=
factor -> ~ factor
171
//
factor -> ~ factor
171
**=
factor -> ~ factor
171
>=
factor -> ~ factor
171
/=
factor -> ~ factor
171
<<=
factor -> ~ factor
171
-=
factor -> ~ factor
171
|=
factor -> ~ factor
171
//=
factor -> ~ factor
171
>>
factor -> ~ factor
171
@=
factor -> ~ factor
171
&=
factor -> ~ factor
171
-
factor -> ~ factor
171
*
factor -> ~ factor
171
/
factor -> ~ factor
171
>>=
factor -> ~ factor
171
if
factor -> ~ factor
171
:
factor -> ~ factor
171
^
factor -> ~ factor
171
+=
factor -> ~ factor
171
and
factor -> ~ factor
171
is
factor -> ~ factor
171
+
factor -> ~ factor
171
or
factor -> ~ factor
171
&
factor -> ~ factor
171
=
factor -> ~ factor
171
^=
factor -> ~ factor
171
NEWLINE
factor -> ~ factor
171
!=
factor -> ~ factor
171
%
factor -> ~ factor
171
%=
factor -> ~ factor
171
@
factor -> ~ factor
172
~
12
172
(
3
172
STRING
4
172
NUMBER
26
172
factor
537
172
None
15
172
{
35
172
atom_expr
13
172
[
32
172
atom
22
172
-
36
172
+
19
172
power
43
172
NAME
27
172
True
48
172
False
28
173
:
538
173
(
539
174
factor
1
174
(
3
174
STRING
4
174
term
6
174
~
12
174
atom_expr
13
174
shift_expr
29
174
None
15
174
power
43
174
+
19
174
xor_expr
17
174
arith_expr
18
174
[
32
174
atom
22
174
NUMBER
26
174
NAME
27
174
-
36
174
False
28
174
{
35
174
and_expr
33
174
True
48
174
expr
540
175
factor
1
175
(
3
175
STRING
4
175
term
6
175
~
12
175
atom_expr
13
175
None
15
175
shift_expr
541
175
power
43
175
+
19
175
arith_expr
18
175
[
32
175
atom
22
175
NUMBER
26
175
NAME
27
175
-
36
175
False
28
175
{
35
175
True
48
176
factor
1
176
(
3
176
STRING
4
176
term
6
176
~
12
176
atom_expr
13
176
None
15
176
power
43
176
+
19
176
arith_expr
18
176
[
32
176
atom
22
176
NUMBER
26
176
NAME
27
176
-
36
176
False
28
176
{
35
176
shift_expr
542
176
True
48
177
<
factor -> + factor
177
,
factor -> + factor
177
in
factor -> + factor
177
|
factor -> + factor
177
==
factor -> + factor
177
>
factor -> + factor
177
*=
factor -> + factor
177
-
factor -> + factor
177
**=
factor -> + factor
177
@=
factor -> + factor
177
^=
factor -> + factor
177
and
factor -> + factor
177
*
factor -> + factor
177
>>=
factor -> + factor
177
-=
factor -> + factor
177
if
factor -> + factor
177
%
factor -> + factor
177
@
factor -> + factor
177
is
factor -> + factor
177
//
factor -> + factor
177
&
factor -> + factor
177
^
factor -> + factor
177
<<=
factor -> + factor
177
>=
factor -> + factor
177
+=
factor -> + factor
177
/=
factor -> + factor
177
%=
factor -> + factor
177
|=
factor -> + factor
177
not
factor -> + factor
177
/
factor -> + factor
177
:
factor -> + factor
177
=
factor -> + factor
177
NEWLINE
factor -> + factor
177
or
factor -> + factor
177
!=
factor -> + factor
177
<<
factor -> + factor
177
>>
factor -> + factor
177
<=
factor -> + factor
177
//=
factor -> + factor
177
+
factor -> + factor
177
&=
factor -> + factor
178
NAME
543
179
~
544
179
factor
545
179
STRING
546
179
shift_expr
547
179
expr
548
179
arith_expr
549
179
term
550
179
atom_expr
551
179
NUMBER
552
179
subscript
553
179
{
554
179
[
555
179
-
556
179
None
557
179
+
558
179
(
559
179
subscriptlist
560
179
atom
561
179
and_expr
562
179
NAME
563
179
power
564
179
True
565
179
comparison
566
179
xor_expr
567
179
lambda
568
179
False
569
179
not_test
570
179
and_test
571
179
test
572
179
or_test
573
179
not
574
179
:
maybe_test -> 
179
maybe_test
575
179
lambdef
576
180
.
178
180
trailer_expr
577
180
[
179
180
&=
trailer_expr -> 
180
trailer
180
180
(
181
180
,
trailer_expr -> 
180
|
trailer_expr -> 
180
//=
trailer_expr -> 
180
or
trailer_expr -> 
180
>>=
trailer_expr -> 
180
**
trailer_expr -> 
180
>>
trailer_expr -> 
180
-
trailer_expr -> 
180
%
trailer_expr -> 
180
is
trailer_expr -> 
180
>
trailer_expr -> 
180
NEWLINE
trailer_expr -> 
180
if
trailer_expr -> 
180
|=
trailer_expr -> 
180
^
trailer_expr -> 
180
@
trailer_expr -> 
180
+=
trailer_expr -> 
180
not
trailer_expr -> 
180
//
trailer_expr -> 
180
<<
trailer_expr -> 
180
%=
trailer_expr -> 
180
*
trailer_expr -> 
180
in
trailer_expr -> 
180
&
trailer_expr -> 
180
and
trailer_expr -> 
180
<=
trailer_expr -> 
180
>=
trailer_expr -> 
180
<<=
trailer_expr -> 
180
=
trailer_expr -> 
180
:
trailer_expr -> 
180
+
trailer_expr -> 
180
-=
trailer_expr -> 
180
**=
trailer_expr -> 
180
/=
trailer_expr -> 
180
!=
trailer_expr -> 
180
/
trailer_expr -> 
180
@=
trailer_expr -> 
180
<
trailer_expr -> 
180
^=
trailer_expr -> 
180
==
trailer_expr -> 
180
*=
trailer_expr -> 
181
)
578
181
~
579
181
factor
580
181
STRING
581
181
shift_expr
582
181
arith_expr
583
181
term
584
181
NUMBER
585
181
and_expr
586
181
{
587
181
arglist
588
181
atom_expr
589
181
[
590
181
-
591
181
None
592
181
(
593
181
atom
594
181
+
595
181
not_test
596
181
test
597
181
NAME
598
181
power
599
181
True
600
181
comparison
601
181
xor_expr
602
181
lambdef
603
181
False
604
181
argument
605
181
and_test
606
181
lambda
607
181
or_test
608
181
expr
609
181
not
610
181
**
611
181
*
612
182
//=
atom_expr -> atom trailer_expr
182
@=
atom_expr -> atom trailer_expr
182
<=
atom_expr -> atom trailer_expr
182
or
atom_expr -> atom trailer_expr
182
,
atom_expr -> atom trailer_expr
182
*
atom_expr -> atom trailer_expr
182
>=
atom_expr -> atom trailer_expr
182
**
atom_expr -> atom trailer_expr
182
&
atom_expr -> atom trailer_expr
182
+=
atom_expr -> atom trailer_expr
182
%
atom_expr -> atom trailer_expr
182
<<=
atom_expr -> atom trailer_expr
182
if
atom_expr -> atom trailer_expr
182
>>=
atom_expr -> atom trailer_expr
182
+
atom_expr -> atom trailer_expr
182
//
atom_expr -> atom trailer_expr
182
is
atom_expr -> atom trailer_expr
182
^=
atom_expr -> atom trailer_expr
182
:
atom_expr -> atom trailer_expr
182
!=
atom_expr -> atom trailer_expr
182
%=
atom_expr -> atom trailer_expr
182
|
atom_expr -> atom trailer_expr
182
<
atom_expr -> atom trailer_expr
182
**=
atom_expr -> atom trailer_expr
182
@
atom_expr -> atom trailer_expr
182
-
atom_expr -> atom trailer_expr
182
NEWLINE
atom_expr -> atom trailer_expr
182
not
atom_expr -> atom trailer_expr
182
in
atom_expr -> atom trailer_expr
182
^
atom_expr -> atom trailer_expr
182
/
atom_expr -> atom trailer_expr
182
=
atom_expr -> atom trailer_expr
182
>
atom_expr -> atom trailer_expr
182
==
atom_expr -> atom trailer_expr
182
-=
atom_expr -> atom trailer_expr
182
/=
atom_expr -> atom trailer_expr
182
*=
atom_expr -> atom trailer_expr
182
&=
atom_expr -> atom trailer_expr
182
<<
atom_expr -> atom trailer_expr
182
>>
atom_expr -> atom trailer_expr
182
|=
atom_expr -> atom trailer_expr
182
and
atom_expr -> atom trailer_expr
183
(
613
184
expr
5
184
factor
1
184
(
3
184
STRING
4
184
suite
614
184
term
6
184
not
8
184
or_test
10
184
~
12
184
atom_expr
13
184
comparison
14
184
shift_expr
29
184
None
15
184
power
43
184
+
19
184
xor_expr
17
184
arith_expr
18
184
[
32
184
atom
22
184
NUMBER
26
184
and_test
39
184
NAME
27
184
-
36
184
False
28
184
lambda
46
184
test
47
184
not_test
34
184
{
35
184
and_expr
33
184
lambdef
45
184
True
48
184
endsim
75
184
flow_stmt
53
184
pass
76
184
break
54
184
raise
55
184
yield
56
184
assert
57
184
global_stmt
77
184
continue_stmt
58
184
del_stmt
78
184
stat_stmt
59
184
global
79
184
return_stmt
60
184
test_list
61
184
continue
62
184
yield_stmt
63
184
simple_stmt
615
184
return
68
184
sim_stmt
65
184
resetstats
66
184
small_stmt
616
184
break_stmt
82
184
del
67
184
NEWLINE
617
184
raise_stmt
69
184
nonlocal
70
184
pass_stmt
71
184
begsim
83
184
expr_stmt
72
184
nonlocal_stmt
84
184
assert_stmt
74
185
factor
1
185
(
3
185
STRING
4
185
term
6
185
~
12
185
and_expr
618
185
atom_expr
13
185
shift_expr
29
185
None
15
185
power
43
185
+
19
185
arith_expr
18
185
[
32
185
atom
22
185
NUMBER
26
185
NAME
27
185
-
36
185
False
28
185
{
35
185
True
48
186
~
186
186
STRING
188
186
atom_expr
193
186
NUMBER
196
186
{
198
186
[
199
186
None
201
186
-
200
186
factor
619
186
(
202
186
atom
203
186
+
204
186
NAME
205
186
power
206
186
True
207
186
False
211
187
/
620
187
@
621
187
if
term -> factor
187
*
622
187
%
623
187
<<
term -> factor
187
-
term -> factor
187
//
624
187
>=
term -> factor
187
or
term -> factor
187
<=
term -> factor
187
]
term -> factor
187
>
term -> factor
187
in
term -> factor
187
<
term -> factor
187
>>
term -> factor
187
for
term -> factor
187
,
term -> factor
187
==
term -> factor
187
is
term -> factor
187
+
term -> factor
187
|
term -> factor
187
!=
term -> factor
187
&
term -> factor
187
not
term -> factor
187
and
term -> factor
187
^
term -> factor
188
==
atom -> STRING
188
>
atom -> STRING
188
for
atom -> STRING
188
<=
atom -> STRING
188
,
atom -> STRING
188
&
atom -> STRING
188
.
atom -> STRING
188
>=
atom -> STRING
188
@
atom -> STRING
188
[
atom -> STRING
188
^
atom -> STRING
188
%
atom -> STRING
188
**
atom -> STRING
188
-
atom -> STRING
188
//
atom -> STRING
188
>>
atom -> STRING
188
<
atom -> STRING
188
|
atom -> STRING
188
(
atom -> STRING
188
]
atom -> STRING
188
is
atom -> STRING
188
and
atom -> STRING
188
*
atom -> STRING
188
or
atom -> STRING
188
not
atom -> STRING
188
<<
atom -> STRING
188
/
atom -> STRING
188
+
atom -> STRING
188
!=
atom -> STRING
188
in
atom -> STRING
188
if
atom -> STRING
189
&
625
189
in
and_expr -> shift_expr
189
,
and_expr -> shift_expr
189
for
and_expr -> shift_expr
189
not
and_expr -> shift_expr
189
!=
and_expr -> shift_expr
189
>=
and_expr -> shift_expr
189
if
and_expr -> shift_expr
189
and
and_expr -> shift_expr
189
|
and_expr -> shift_expr
189
is
and_expr -> shift_expr
189
<=
and_expr -> shift_expr
189
>
and_expr -> shift_expr
189
]
and_expr -> shift_expr
189
^
and_expr -> shift_expr
189
or
and_expr -> shift_expr
189
<
and_expr -> shift_expr
189
==
and_expr -> shift_expr
190
]
626
191
>>
627
191
^
shift_expr -> arith_expr
191
<<
628
191
or
shift_expr -> arith_expr
191
|
shift_expr -> arith_expr
191
<=
shift_expr -> arith_expr
191
for
shift_expr -> arith_expr
191
is
shift_expr -> arith_expr
191
<
shift_expr -> arith_expr
191
if
shift_expr -> arith_expr
191
not
shift_expr -> arith_expr
191
in
shift_expr -> arith_expr
191
and
shift_expr -> arith_expr
191
>=
shift_expr -> arith_expr
191
==
shift_expr -> arith_expr
191
]
shift_expr -> arith_expr
191
!=
shift_expr -> arith_expr
191
>
shift_expr -> arith_expr
191
,
shift_expr -> arith_expr
191
&
shift_expr -> arith_expr
192
+
629
192
-
630
192
if
arith_expr -> term
192
<=
arith_expr -> term
192
for
arith_expr -> term
192
|
arith_expr -> term
192
not
arith_expr -> term
192
^
arith_expr -> term
192
<<
arith_expr -> term
192
&
arith_expr -> term
192
==
arith_expr -> term
192
is
arith_expr -> term
192
!=
arith_expr -> term
192
]
arith_expr -> term
192
>
arith_expr -> term
192
and
arith_expr -> term
192
<
arith_expr -> term
192
or
arith_expr -> term
192
,
arith_expr -> term
192
>=
arith_expr -> term
192
>>
arith_expr -> term
192
in
arith_expr -> term
193
**
631
193
or
power -> atom_expr
193
for
power -> atom_expr
193
*
power -> atom_expr
193
>=
power -> atom_expr
193
^
power -> atom_expr
193
in
power -> atom_expr
193
!=
power -> atom_expr
193
if
power -> atom_expr
193
@
power -> atom_expr
193
-
power -> atom_expr
193
and
power -> atom_expr
193
not
power -> atom_expr
193
==
power -> atom_expr
193
<
power -> atom_expr
193
&
power -> atom_expr
193
|
power -> atom_expr
193
//
power -> atom_expr
193
>
power -> atom_expr
193
,
power -> atom_expr
193
%
power -> atom_expr
193
/
power -> atom_expr
193
is
power -> atom_expr
193
<<
power -> atom_expr
193
>>
power -> atom_expr
193
]
power -> atom_expr
193
+
power -> atom_expr
193
<=
power -> atom_expr
194
==
atom -> [ ]
194
%
atom -> [ ]
194
^=
atom -> [ ]
194
**
atom -> [ ]
194
.
atom -> [ ]
194
<<
atom -> [ ]
194
**=
atom -> [ ]
194
not
atom -> [ ]
194
/
atom -> [ ]
194
*
atom -> [ ]
194
if
atom -> [ ]
194
!=
atom -> [ ]
194
<=
atom -> [ ]
194
@
atom -> [ ]
194
-
atom -> [ ]
194
*=
atom -> [ ]
194
>>
atom -> [ ]
194
/=
atom -> [ ]
194
|=
atom -> [ ]
194
NEWLINE
atom -> [ ]
194
|
atom -> [ ]
194
^
atom -> [ ]
194
<<=
atom -> [ ]
194
@=
atom -> [ ]
194
//=
atom -> [ ]
194
,
atom -> [ ]
194
:
atom -> [ ]
194
<
atom -> [ ]
194
[
atom -> [ ]
194
is
atom -> [ ]
194
in
atom -> [ ]
194
>
atom -> [ ]
194
-=
atom -> [ ]
194
+=
atom -> [ ]
194
=
atom -> [ ]
194
%=
atom -> [ ]
194
+
atom -> [ ]
194
>=
atom -> [ ]
194
&=
atom -> [ ]
194
and
atom -> [ ]
194
or
atom -> [ ]
194
&
atom -> [ ]
194
>>=
atom -> [ ]
194
(
atom -> [ ]
194
//
atom -> [ ]
195
for
632
195
comp_for
633
195
,
634
195
]
test_list -> test
196
<<
atom -> NUMBER
196
-
atom -> NUMBER
196
^
atom -> NUMBER
196
or
atom -> NUMBER
196
]
atom -> NUMBER
196
==
atom -> NUMBER
196
!=
atom -> NUMBER
196
/
atom -> NUMBER
196
and
atom -> NUMBER
196
%
atom -> NUMBER
196
,
atom -> NUMBER
196
>=
atom -> NUMBER
196
@
atom -> NUMBER
196
|
atom -> NUMBER
196
[
atom -> NUMBER
196
//
atom -> NUMBER
196
.
atom -> NUMBER
196
not
atom -> NUMBER
196
for
atom -> NUMBER
196
<
atom -> NUMBER
196
>>
atom -> NUMBER
196
if
atom -> NUMBER
196
<=
atom -> NUMBER
196
>
atom -> NUMBER
196
&
atom -> NUMBER
196
is
atom -> NUMBER
196
**
atom -> NUMBER
196
in
atom -> NUMBER
196
+
atom -> NUMBER
196
(
atom -> NUMBER
196
*
atom -> NUMBER
197
not
xor_expr -> and_expr
197
^
635
197
if
xor_expr -> and_expr
197
|
xor_expr -> and_expr
197
>
xor_expr -> and_expr
197
<
xor_expr -> and_expr
197
for
xor_expr -> and_expr
197
]
xor_expr -> and_expr
197
or
xor_expr -> and_expr
197
>=
xor_expr -> and_expr
197
in
xor_expr -> and_expr
197
and
xor_expr -> and_expr
197
is
xor_expr -> and_expr
197
==
xor_expr -> and_expr
197
!=
xor_expr -> and_expr
197
<=
xor_expr -> and_expr
197
,
xor_expr -> and_expr
198
}
636
199
~
186
199
factor
187
199
STRING
188
199
shift_expr
189
199
test_list_comp
637
199
arith_expr
191
199
term
192
199
atom_expr
193
199
]
638
199
test
195
199
NUMBER
196
199
and_expr
197
199
{
198
199
[
199
199
-
200
199
None
201
199
(
202
199
atom
203
199
+
204
199
NAME
205
199
power
206
199
True
207
199
comparison
208
199
xor_expr
209
199
lambdef
210
199
False
211
199
not_test
212
199
or_test
213
199
and_test
214
199
lambda
215
199
not
216
199
expr
217
199
test_list
218
200
~
186
200
STRING
188
200
atom_expr
193
200
NUMBER
196
200
factor
639
200
{
198
200
[
199
200
None
201
200
-
200
200
(
202
200
atom
203
200
+
204
200
NAME
205
200
power
206
200
True
207
200
False
211
201
not
atom -> None
201
or
atom -> None
201
==
atom -> None
201
*
atom -> None
201
for
atom -> None
201
-
atom -> None
201
^
atom -> None
201
>>
atom -> None
201
if
atom -> None
201
,
atom -> None
201
<<
atom -> None
201
and
atom -> None
201
|
atom -> None
201
&
atom -> None
201
!=
atom -> None
201
@
atom -> None
201
.
atom -> None
201
/
atom -> None
201
%
atom -> None
201
>
atom -> None
201
is
atom -> None
201
]
atom -> None
201
<
atom -> None
201
(
atom -> None
201
**
atom -> None
201
//
atom -> None
201
in
atom -> None
201
<=
atom -> None
201
>=
atom -> None
201
+
atom -> None
201
[
atom -> None
202
~
92
202
factor
93
202
STRING
94
202
shift_expr
95
202
arith_expr
96
202
term
97
202
NUMBER
98
202
and_expr
99
202
{
100
202
atom_expr
101
202
[
102
202
-
103
202
)
640
202
None
105
202
(
106
202
atom
107
202
test_list_comp
641
202
+
109
202
NAME
110
202
power
111
202
test_list
112
202
True
113
202
comparison
114
202
xor_expr
115
202
lambdef
116
202
False
117
202
not_test
118
202
or_test
119
202
test
120
202
lambda
121
202
and_test
122
202
not
123
202
expr
124
203
[
642
203
(
643
203
.
644
203
//
trailer_expr -> 
203
trailer
645
203
<<
trailer_expr -> 
203
trailer_expr
646
203
*
trailer_expr -> 
203
in
trailer_expr -> 
203
&
trailer_expr -> 
203
and
trailer_expr -> 
203
<=
trailer_expr -> 
203
,
trailer_expr -> 
203
|
trailer_expr -> 
203
or
trailer_expr -> 
203
>=
trailer_expr -> 
203
for
trailer_expr -> 
203
+
trailer_expr -> 
203
**
trailer_expr -> 
203
>>
trailer_expr -> 
203
!=
trailer_expr -> 
203
-
trailer_expr -> 
203
/
trailer_expr -> 
203
]
trailer_expr -> 
203
%
trailer_expr -> 
203
is
trailer_expr -> 
203
<
trailer_expr -> 
203
if
trailer_expr -> 
203
>
trailer_expr -> 
203
^
trailer_expr -> 
203
==
trailer_expr -> 
203
@
trailer_expr -> 
203
not
trailer_expr -> 
204
~
186
204
STRING
188
204
atom_expr
193
204
NUMBER
196
204
{
198
204
factor
647
204
[
199
204
None
201
204
-
200
204
(
202
204
atom
203
204
+
204
204
NAME
205
204
power
206
204
True
207
204
False
211
205
<=
atom -> NAME
205
@
atom -> NAME
205
>>
atom -> NAME
205
==
atom -> NAME
205
>
atom -> NAME
205
*
atom -> NAME
205
-
atom -> NAME
205
&
atom -> NAME
205
is
atom -> NAME
205
.
atom -> NAME
205
or
atom -> NAME
205
in
atom -> NAME
205
for
atom -> NAME
205
<<
atom -> NAME
205
+
atom -> NAME
205
,
atom -> NAME
205
if
atom -> NAME
205
|
atom -> NAME
205
and
atom -> NAME
205
^
atom -> NAME
205
/
atom -> NAME
205
[
atom -> NAME
205
not
atom -> NAME
205
!=
atom -> NAME
205
%
atom -> NAME
205
]
atom -> NAME
205
<
atom -> NAME
205
>=
atom -> NAME
205
**
atom -> NAME
205
(
atom -> NAME
205
//
atom -> NAME
206
if
factor -> power
206
is
factor -> power
206
%
factor -> power
206
]
factor -> power
206
==
factor -> power
206
>=
factor -> power
206
or
factor -> power
206
and
factor -> power
206
/
factor -> power
206
<
factor -> power
206
+
factor -> power
206
,
factor -> power
206
//
factor -> power
206
for
factor -> power
206
@
factor -> power
206
in
factor -> power
206
<=
factor -> power
206
&
factor -> power
206
!=
factor -> power
206
<<
factor -> power
206
|
factor -> power
206
>
factor -> power
206
*
factor -> power
206
^
factor -> power
206
-
factor -> power
206
not
factor -> power
206
>>
factor -> power
207
for
atom -> True
207
]
atom -> True
207
>
atom -> True
207
|
atom -> True
207
-
atom -> True
207
==
atom -> True
207
<<
atom -> True
207
if
atom -> True
207
%
atom -> True
207
/
atom -> True
207
[
atom -> True
207
*
atom -> True
207
<=
atom -> True
207
<
atom -> True
207
&
atom -> True
207
+
atom -> True
207
**
atom -> True
207
!=
atom -> True
207
>>
atom -> True
207
//
atom -> True
207
and
atom -> True
207
^
atom -> True
207
is
atom -> True
207
or
atom -> True
207
.
atom -> True
207
,
atom -> True
207
(
atom -> True
207
>=
atom -> True
207
@
atom -> True
207
not
atom -> True
207
in
atom -> True
208
for
not_test -> comparison
208
or
not_test -> comparison
208
if
not_test -> comparison
208
,
not_test -> comparison
208
and
not_test -> comparison
208
]
not_test -> comparison
209
not
expr -> xor_expr
209
or
expr -> xor_expr
209
|
648
209
==
expr -> xor_expr
209
in
expr -> xor_expr
209
if
expr -> xor_expr
209
<=
expr -> xor_expr
209
]
expr -> xor_expr
209
is
expr -> xor_expr
209
<
expr -> xor_expr
209
>=
expr -> xor_expr
209
for
expr -> xor_expr
209
>
expr -> xor_expr
209
and
expr -> xor_expr
209
!=
expr -> xor_expr
209
,
expr -> xor_expr
210
,
test -> lambdef
210
for
test -> lambdef
210
]
test -> lambdef
211
<=
atom -> False
211
*
atom -> False
211
]
atom -> False
211
not
atom -> False
211
!=
atom -> False
211
for
atom -> False
211
@
atom -> False
211
and
atom -> False
211
if
atom -> False
211
<<
atom -> False
211
>
atom -> False
211
,
atom -> False
211
+
atom -> False
211
/
atom -> False
211
==
atom -> False
211
&
atom -> False
211
^
atom -> False
211
in
atom -> False
211
[
atom -> False
211
is
atom -> False
211
%
atom -> False
211
>=
atom -> False
211
//
atom -> False
211
(
atom -> False
211
|
atom -> False
211
<
atom -> False
211
.
atom -> False
211
or
atom -> False
211
**
atom -> False
211
>>
atom -> False
211
-
atom -> False
212
or
and_test -> not_test
212
,
and_test -> not_test
212
if
and_test -> not_test
212
and
649
212
]
and_test -> not_test
212
for
and_test -> not_test
213
for
test -> or_test
213
if
650
213
]
test -> or_test
213
,
test -> or_test
214
or
651
214
if
or_test -> and_test
214
,
or_test -> and_test
214
]
or_test -> and_test
214
for
or_test -> and_test
215
:
652
215
NAME
251
215
varargslist
653
215
vfpdef
253
216
~
186
216
factor
187
216
STRING
188
216
shift_expr
189
216
arith_expr
191
216
term
192
216
atom_expr
193
216
NUMBER
196
216
and_expr
197
216
{
198
216
[
199
216
-
200
216
None
201
216
(
202
216
atom
203
216
+
204
216
NAME
205
216
power
206
216
True
207
216
comparison
208
216
xor_expr
209
216
False
211
216
not_test
654
216
not
216
216
expr
217
217
!=
125
217
,
comparison -> expr
217
is
126
217
>=
127
217
in
128
217
<
129
217
==
131
217
comp_op
655
217
<=
132
217
not
133
217
>
134
217
for
comparison -> expr
217
or
comparison -> expr
217
if
comparison -> expr
217
and
comparison -> expr
217
]
comparison -> expr
218
]
test_list_comp -> test_list
219
factor
1
219
(
3
219
STRING
4
219
term
6
219
~
12
219
atom_expr
13
219
shift_expr
29
219
xor_expr
656
219
None
15
219
power
43
219
+
19
219
arith_expr
18
219
[
32
219
atom
22
219
NUMBER
26
219
NAME
27
219
-
36
219
False
28
219
{
35
219
and_expr
33
219
True
48
220
expr
5
220
factor
1
220
(
3
220
STRING
4
220
term
6
220
not
8
220
~
12
220
atom_expr
13
220
comparison
14
220
shift_expr
29
220
None
15
220
power
43
220
+
19
220
xor_expr
17
220
arith_expr
18
220
[
32
220
atom
22
220
NUMBER
26
220
NAME
27
220
-
36
220
False
28
220
not_test
34
220
{
35
220
and_expr
33
220
True
48
220
and_test
657
221
//
atom -> { }
221
@=
atom -> { }
221
[
atom -> { }
221
^=
atom -> { }
221
|
atom -> { }
221
>
atom -> { }
221
>=
atom -> { }
221
NEWLINE
atom -> { }
221
==
atom -> { }
221
&
atom -> { }
221
not
atom -> { }
221
**
atom -> { }
221
in
atom -> { }
221
,
atom -> { }
221
or
atom -> { }
221
:
atom -> { }
221
+=
atom -> { }
221
<
atom -> { }
221
!=
atom -> { }
221
+
atom -> { }
221
<<
atom -> { }
221
-=
atom -> { }
221
^
atom -> { }
221
&=
atom -> { }
221
<=
atom -> { }
221
if
atom -> { }
221
*=
atom -> { }
221
/
atom -> { }
221
**=
atom -> { }
221
-
atom -> { }
221
<<=
atom -> { }
221
is
atom -> { }
221
>>
atom -> { }
221
>>=
atom -> { }
221
%
atom -> { }
221
%=
atom -> { }
221
|=
atom -> { }
221
.
atom -> { }
221
(
atom -> { }
221
and
atom -> { }
221
=
atom -> { }
221
/=
atom -> { }
221
*
atom -> { }
221
@
atom -> { }
221
//=
atom -> { }
222
**=
factor -> - factor
222
if
factor -> - factor
222
@=
factor -> - factor
222
/
factor -> - factor
222
<<=
factor -> - factor
222
*
factor -> - factor
222
//=
factor -> - factor
222
+=
factor -> - factor
222
,
factor -> - factor
222
not
factor -> - factor
222
<
factor -> - factor
222
or
factor -> - factor
222
//
factor -> - factor
222
!=
factor -> - factor
222
%
factor -> - factor
222
&=
factor -> - factor
222
|
factor -> - factor
222
>
factor -> - factor
222
+
factor -> - factor
222
:
factor -> - factor
222
|=
factor -> - factor
222
=
factor -> - factor
222
-
factor -> - factor
222
^
factor -> - factor
222
in
factor -> - factor
222
*=
factor -> - factor
222
-=
factor -> - factor
222
<<
factor -> - factor
222
NEWLINE
factor -> - factor
222
&
factor -> - factor
222
<=
factor -> - factor
222
==
factor -> - factor
222
and
factor -> - factor
222
@
factor -> - factor
222
>=
factor -> - factor
222
is
factor -> - factor
222
>>
factor -> - factor
222
^=
factor -> - factor
222
>>=
factor -> - factor
222
%=
factor -> - factor
222
/=
factor -> - factor
223
~
223
223
STRING
225
223
None
226
223
[
228
223
NUMBER
230
223
{
231
223
(
232
223
atom
234
223
-
235
223
atom_expr
237
223
+
238
223
False
239
223
True
240
223
power
241
223
NAME
243
223
factor
658
224
/
659
224
@
660
224
%
661
224
<<
term -> factor
224
//
662
224
-
term -> factor
224
*
663
224
,
term -> factor
224
in
term -> factor
224
&
term -> factor
224
+
term -> factor
224
>>
term -> factor
224
^
term -> factor
224
|
term -> factor
225
/
atom -> STRING
225
&
atom -> STRING
225
+
atom -> STRING
225
.
atom -> STRING
225
(
atom -> STRING
225
|
atom -> STRING
225
@
atom -> STRING
225
[
atom -> STRING
225
^
atom -> STRING
225
*
atom -> STRING
225
%
atom -> STRING
225
in
atom -> STRING
225
<<
atom -> STRING
225
,
atom -> STRING
225
**
atom -> STRING
225
-
atom -> STRING
225
//
atom -> STRING
225
>>
atom -> STRING
226
//
atom -> None
226
**
atom -> None
226
,
atom -> None
226
*
atom -> None
226
%
atom -> None
226
<<
atom -> None
226
in
atom -> None
226
-
atom -> None
226
/
atom -> None
226
|
atom -> None
226
&
atom -> None
226
+
atom -> None
226
@
atom -> None
226
[
atom -> None
226
^
atom -> None
226
>>
atom -> None
226
(
atom -> None
226
.
atom -> None
227
in
shift_expr -> arith_expr
227
<<
664
227
>>
665
227
^
shift_expr -> arith_expr
227
,
shift_expr -> arith_expr
227
&
shift_expr -> arith_expr
227
|
shift_expr -> arith_expr
228
~
186
228
factor
187
228
STRING
188
228
shift_expr
189
228
test_list_comp
666
228
arith_expr
191
228
term
192
228
atom_expr
193
228
NUMBER
196
228
test
195
228
and_expr
197
228
{
198
228
[
199
228
-
200
228
None
201
228
(
202
228
atom
203
228
+
204
228
]
667
228
NAME
205
228
power
206
228
True
207
228
comparison
208
228
xor_expr
209
228
lambdef
210
228
False
211
228
not_test
212
228
or_test
213
228
and_test
214
228
lambda
215
228
not
216
228
expr
217
228
test_list
218
229
,
668
229
in
expr_list -> expr
230
<<
atom -> NUMBER
230
|
atom -> NUMBER
230
[
atom -> NUMBER
230
//
atom -> NUMBER
230
.
atom -> NUMBER
230
&
atom -> NUMBER
230
**
atom -> NUMBER
230
-
atom -> NUMBER
230
in
atom -> NUMBER
230
/
atom -> NUMBER
230
^
atom -> NUMBER
230
+
atom -> NUMBER
230
%
atom -> NUMBER
230
,
atom -> NUMBER
230
@
atom -> NUMBER
230
>>
atom -> NUMBER
230
(
atom -> NUMBER
230
*
atom -> NUMBER
231
}
669
232
~
92
232
factor
93
232
STRING
94
232
shift_expr
95
232
arith_expr
96
232
term
97
232
NUMBER
98
232
and_expr
99
232
{
100
232
atom_expr
101
232
[
102
232
-
103
232
)
670
232
None
105
232
(
106
232
atom
107
232
test_list_comp
671
232
+
109
232
NAME
110
232
power
111
232
test_list
112
232
True
113
232
comparison
114
232
xor_expr
115
232
lambdef
116
232
False
117
232
not_test
118
232
or_test
119
232
test
120
232
lambda
121
232
and_test
122
232
not
123
232
expr
124
233
^
672
233
,
xor_expr -> and_expr
233
|
xor_expr -> and_expr
233
in
xor_expr -> and_expr
234
[
673
234
trailer_expr
674
234
**
trailer_expr -> 
234
//
trailer_expr -> 
234
trailer
675
234
<<
trailer_expr -> 
234
.
676
234
(
677
234
*
trailer_expr -> 
234
in
trailer_expr -> 
234
&
trailer_expr -> 
234
>>
trailer_expr -> 
234
-
trailer_expr -> 
234
/
trailer_expr -> 
234
,
trailer_expr -> 
234
%
trailer_expr -> 
234
|
trailer_expr -> 
234
^
trailer_expr -> 
234
@
trailer_expr -> 
234
+
trailer_expr -> 
235
~
223
235
STRING
225
235
None
226
235
[
228
235
NUMBER
230
235
factor
678
235
{
231
235
(
232
235
atom
234
235
-
235
235
atom_expr
237
235
+
238
235
False
239
235
True
240
235
power
241
235
NAME
243
236
in
679
237
**
680
237
*
power -> atom_expr
237
^
power -> atom_expr
237
in
power -> atom_expr
237
@
power -> atom_expr
237
-
power -> atom_expr
237
|
power -> atom_expr
237
&
power -> atom_expr
237
//
power -> atom_expr
237
,
power -> atom_expr
237
%
power -> atom_expr
237
/
power -> atom_expr
237
<<
power -> atom_expr
237
>>
power -> atom_expr
237
+
power -> atom_expr
238
~
223
238
STRING
225
238
None
226
238
[
228
238
NUMBER
230
238
{
231
238
(
232
238
factor
681
238
atom
234
238
-
235
238
atom_expr
237
238
+
238
238
False
239
238
True
240
238
power
241
238
NAME
243
239
//
atom -> False
239
**
atom -> False
239
^
atom -> False
239
(
atom -> False
239
[
atom -> False
239
|
atom -> False
239
@
atom -> False
239
in
atom -> False
239
<<
atom -> False
239
,
atom -> False
239
%
atom -> False
239
.
atom -> False
239
*
atom -> False
239
+
atom -> False
239
/
atom -> False
239
>>
atom -> False
239
&
atom -> False
239
-
atom -> False
240
**
atom -> True
240
//
atom -> True
240
>>
atom -> True
240
.
atom -> True
240
%
atom -> True
240
|
atom -> True
240
,
atom -> True
240
/
atom -> True
240
-
atom -> True
240
[
atom -> True
240
^
atom -> True
240
(
atom -> True
240
*
atom -> True
240
@
atom -> True
240
<<
atom -> True
240
&
atom -> True
240
+
atom -> True
240
in
atom -> True
241
//
factor -> power
241
<<
factor -> power
241
|
factor -> power
241
*
factor -> power
241
%
factor -> power
241
@
factor -> power
241
in
factor -> power
241
^
factor -> power
241
-
factor -> power
241
/
factor -> power
241
&
factor -> power
241
+
factor -> power
241
,
factor -> power
241
>>
factor -> power
242
-
682
242
+
683
242
|
arith_expr -> term
242
^
arith_expr -> term
242
<<
arith_expr -> term
242
&
arith_expr -> term
242
,
arith_expr -> term
242
>>
arith_expr -> term
242
in
arith_expr -> term
243
*
atom -> NAME
243
&
atom -> NAME
243
-
atom -> NAME
243
@
atom -> NAME
243
.
atom -> NAME
243
^
atom -> NAME
243
[
atom -> NAME
243
**
atom -> NAME
243
/
atom -> NAME
243
in
atom -> NAME
243
>>
atom -> NAME
243
<<
atom -> NAME
243
+
atom -> NAME
243
%
atom -> NAME
243
,
atom -> NAME
243
(
atom -> NAME
243
|
atom -> NAME
243
//
atom -> NAME
244
&
684
244
^
and_expr -> shift_expr
244
in
and_expr -> shift_expr
244
|
and_expr -> shift_expr
244
,
and_expr -> shift_expr
245
|
685
245
,
expr -> xor_expr
245
in
expr -> xor_expr
246
or_test
686
246
expr
5
246
factor
1
246
(
3
246
STRING
4
246
term
6
246
not
8
246
~
12
246
atom_expr
13
246
comparison
14
246
shift_expr
29
246
None
15
246
power
43
246
+
19
246
xor_expr
17
246
arith_expr
18
246
[
32
246
atom
22
246
NUMBER
26
246
and_test
39
246
NAME
27
246
-
36
246
False
28
246
not_test
34
246
{
35
246
and_expr
33
246
True
48
247
NEWLINE
687
247
(
688
248
(
dotted_name -> NAME
248
.
689
248
NEWLINE
dotted_name -> NAME
249
~
simple_stmt -> small_stmt NEWLINE
249
begsim
simple_stmt -> small_stmt NEWLINE
249
endsim
simple_stmt -> small_stmt NEWLINE
249
if
simple_stmt -> small_stmt NEWLINE
249
break
simple_stmt -> small_stmt NEWLINE
249
False
simple_stmt -> small_stmt NEWLINE
249
def
simple_stmt -> small_stmt NEWLINE
249
STRING
simple_stmt -> small_stmt NEWLINE
249
assert
simple_stmt -> small_stmt NEWLINE
249
lambda
simple_stmt -> small_stmt NEWLINE
249
yield
simple_stmt -> small_stmt NEWLINE
249
True
simple_stmt -> small_stmt NEWLINE
249
+
simple_stmt -> small_stmt NEWLINE
249
try
simple_stmt -> small_stmt NEWLINE
249
for
simple_stmt -> small_stmt NEWLINE
249
conf
simple_stmt -> small_stmt NEWLINE
249
nonlocal
simple_stmt -> small_stmt NEWLINE
249
continue
simple_stmt -> small_stmt NEWLINE
249
-
simple_stmt -> small_stmt NEWLINE
249
resetstats
simple_stmt -> small_stmt NEWLINE
249
raise
simple_stmt -> small_stmt NEWLINE
249
(
simple_stmt -> small_stmt NEWLINE
249
None
simple_stmt -> small_stmt NEWLINE
249
NEWLINE
simple_stmt -> small_stmt NEWLINE
249
while
simple_stmt -> small_stmt NEWLINE
249
not
simple_stmt -> small_stmt NEWLINE
249
$
simple_stmt -> small_stmt NEWLINE
249
NAME
simple_stmt -> small_stmt NEWLINE
249
del
simple_stmt -> small_stmt NEWLINE
249
with
simple_stmt -> small_stmt NEWLINE
249
global
simple_stmt -> small_stmt NEWLINE
249
@
simple_stmt -> small_stmt NEWLINE
249
class
simple_stmt -> small_stmt NEWLINE
249
{
simple_stmt -> small_stmt NEWLINE
249
NUMBER
simple_stmt -> small_stmt NEWLINE
249
[
simple_stmt -> small_stmt NEWLINE
249
pass
simple_stmt -> small_stmt NEWLINE
249
return
simple_stmt -> small_stmt NEWLINE
250
expr
5
250
factor
1
250
(
3
250
STRING
4
250
term
6
250
not
8
250
or_test
10
250
~
12
250
test
690
250
atom_expr
13
250
comparison
14
250
shift_expr
29
250
None
15
250
power
43
250
+
19
250
xor_expr
17
250
arith_expr
18
250
[
32
250
atom
22
250
NUMBER
26
250
and_test
39
250
NAME
27
250
-
36
250
False
28
250
lambda
46
250
not_test
34
250
{
35
250
and_expr
33
250
lambdef
45
250
True
48
251
,
vfpdef -> NAME
251
:
vfpdef -> NAME
252
:
691
253
:
varargslist -> vfpdef
253
,
692
254
expr
5
254
factor
1
254
(
3
254
STRING
4
254
term
6
254
not
8
254
or_test
10
254
~
12
254
atom_expr
13
254
comparison
14
254
shift_expr
29
254
None
15
254
power
43
254
+
19
254
xor_expr
17
254
arith_expr
18
254
[
32
254
atom
22
254
NUMBER
26
254
and_test
39
254
NAME
27
254
-
36
254
False
28
254
lambda
46
254
test
47
254
test_list
693
254
not_test
34
254
{
35
254
and_expr
33
254
lambdef
45
254
True
48
255
~
255
255
STRING
257
255
NUMBER
262
255
{
263
255
[
266
255
atom_expr
265
255
None
268
255
-
267
255
+
269
255
factor
694
255
(
270
255
atom
272
255
NAME
274
255
power
275
255
True
276
255
False
280
256
/
695
256
as
term -> factor
256
@
696
256
if
term -> factor
256
%
697
256
*
698
256
<<
term -> factor
256
-
term -> factor
256
//
699
256
>=
term -> factor
256
or
term -> factor
256
<=
term -> factor
256
>
term -> factor
256
in
term -> factor
256
<
term -> factor
256
>>
term -> factor
256
,
term -> factor
256
==
term -> factor
256
is
term -> factor
256
+
term -> factor
256
|
term -> factor
256
!=
term -> factor
256
:
term -> factor
256
&
term -> factor
256
not
term -> factor
256
and
term -> factor
256
^
term -> factor
257
==
atom -> STRING
257
>
atom -> STRING
257
<=
atom -> STRING
257
,
atom -> STRING
257
&
atom -> STRING
257
.
atom -> STRING
257
>=
atom -> STRING
257
@
atom -> STRING
257
[
atom -> STRING
257
^
atom -> STRING
257
%
atom -> STRING
257
**
atom -> STRING
257
-
atom -> STRING
257
//
atom -> STRING
257
>>
atom -> STRING
257
<
atom -> STRING
257
|
atom -> STRING
257
(
atom -> STRING
257
is
atom -> STRING
257
and
atom -> STRING
257
*
atom -> STRING
257
or
atom -> STRING
257
not
atom -> STRING
257
<<
atom -> STRING
257
as
atom -> STRING
257
/
atom -> STRING
257
+
atom -> STRING
257
!=
atom -> STRING
257
in
atom -> STRING
257
:
atom -> STRING
257
if
atom -> STRING
258
&
700
258
in
and_expr -> shift_expr
258
,
and_expr -> shift_expr
258
not
and_expr -> shift_expr
258
:
and_expr -> shift_expr
258
<
and_expr -> shift_expr
258
!=
and_expr -> shift_expr
258
>=
and_expr -> shift_expr
258
if
and_expr -> shift_expr
258
and
and_expr -> shift_expr
258
|
and_expr -> shift_expr
258
is
and_expr -> shift_expr
258
<=
and_expr -> shift_expr
258
>
and_expr -> shift_expr
258
as
and_expr -> shift_expr
258
^
and_expr -> shift_expr
258
or
and_expr -> shift_expr
258
==
and_expr -> shift_expr
259
!=
125
259
,
comparison -> expr
259
is
126
259
>=
127
259
in
128
259
<
129
259
==
131
259
<=
132
259
not
133
259
>
134
259
comp_op
701
259
:
comparison -> expr
259
as
comparison -> expr
259
or
comparison -> expr
259
if
comparison -> expr
259
and
comparison -> expr
260
>>
702
260
^
shift_expr -> arith_expr
260
<<
703
260
or
shift_expr -> arith_expr
260
as
shift_expr -> arith_expr
260
|
shift_expr -> arith_expr
260
<=
shift_expr -> arith_expr
260
is
shift_expr -> arith_expr
260
<
shift_expr -> arith_expr
260
if
shift_expr -> arith_expr
260
not
shift_expr -> arith_expr
260
in
shift_expr -> arith_expr
260
and
shift_expr -> arith_expr
260
>=
shift_expr -> arith_expr
260
==
shift_expr -> arith_expr
260
:
shift_expr -> arith_expr
260
!=
shift_expr -> arith_expr
260
>
shift_expr -> arith_expr
260
,
shift_expr -> arith_expr
260
&
shift_expr -> arith_expr
261
as
arith_expr -> term
261
+
704
261
-
705
261
if
arith_expr -> term
261
<=
arith_expr -> term
261
|
arith_expr -> term
261
not
arith_expr -> term
261
^
arith_expr -> term
261
<<
arith_expr -> term
261
&
arith_expr -> term
261
==
arith_expr -> term
261
is
arith_expr -> term
261
!=
arith_expr -> term
261
>
arith_expr -> term
261
and
arith_expr -> term
261
:
arith_expr -> term
261
<
arith_expr -> term
261
or
arith_expr -> term
261
,
arith_expr -> term
261
>=
arith_expr -> term
261
>>
arith_expr -> term
261
in
arith_expr -> term
262
<<
atom -> NUMBER
262
:
atom -> NUMBER
262
-
atom -> NUMBER
262
^
atom -> NUMBER
262
or
atom -> NUMBER
262
==
atom -> NUMBER
262
!=
atom -> NUMBER
262
/
atom -> NUMBER
262
and
atom -> NUMBER
262
%
atom -> NUMBER
262
,
atom -> NUMBER
262
>=
atom -> NUMBER
262
@
atom -> NUMBER
262
|
atom -> NUMBER
262
[
atom -> NUMBER
262
//
atom -> NUMBER
262
.
atom -> NUMBER
262
not
atom -> NUMBER
262
<
atom -> NUMBER
262
>>
atom -> NUMBER
262
if
atom -> NUMBER
262
<=
atom -> NUMBER
262
>
atom -> NUMBER
262
as
atom -> NUMBER
262
&
atom -> NUMBER
262
is
atom -> NUMBER
262
**
atom -> NUMBER
262
in
atom -> NUMBER
262
+
atom -> NUMBER
262
(
atom -> NUMBER
262
*
atom -> NUMBER
263
}
706
264
or
707
264
if
or_test -> and_test
264
,
or_test -> and_test
264
:
or_test -> and_test
264
as
or_test -> and_test
265
**
708
265
or
power -> atom_expr
265
:
power -> atom_expr
265
*
power -> atom_expr
265
>=
power -> atom_expr
265
^
power -> atom_expr
265
in
power -> atom_expr
265
!=
power -> atom_expr
265
if
power -> atom_expr
265
@
power -> atom_expr
265
-
power -> atom_expr
265
and
power -> atom_expr
265
not
power -> atom_expr
265
==
power -> atom_expr
265
as
power -> atom_expr
265
<
power -> atom_expr
265
&
power -> atom_expr
265
|
power -> atom_expr
265
//
power -> atom_expr
265
>
power -> atom_expr
265
,
power -> atom_expr
265
%
power -> atom_expr
265
/
power -> atom_expr
265
is
power -> atom_expr
265
<<
power -> atom_expr
265
>>
power -> atom_expr
265
+
power -> atom_expr
265
<=
power -> atom_expr
266
~
186
266
factor
187
266
STRING
188
266
shift_expr
189
266
test_list_comp
709
266
arith_expr
191
266
term
192
266
atom_expr
193
266
]
710
266
test
195
266
NUMBER
196
266
and_expr
197
266
{
198
266
[
199
266
-
200
266
None
201
266
(
202
266
atom
203
266
+
204
266
NAME
205
266
power
206
266
True
207
266
comparison
208
266
xor_expr
209
266
lambdef
210
266
False
211
266
not_test
212
266
or_test
213
266
and_test
214
266
lambda
215
266
not
216
266
expr
217
266
test_list
218
267
~
255
267
STRING
257
267
NUMBER
262
267
factor
711
267
{
263
267
[
266
267
atom_expr
265
267
None
268
267
-
267
267
+
269
267
(
270
267
atom
272
267
NAME
274
267
power
275
267
True
276
267
False
280
268
not
atom -> None
268
or
atom -> None
268
==
atom -> None
268
*
atom -> None
268
-
atom -> None
268
^
atom -> None
268
>>
atom -> None
268
if
atom -> None
268
,
atom -> None
268
<<
atom -> None
268
and
atom -> None
268
|
atom -> None
268
&
atom -> None
268
!=
atom -> None
268
@
atom -> None
268
.
atom -> None
268
/
atom -> None
268
%
atom -> None
268
>
atom -> None
268
is
atom -> None
268
as
atom -> None
268
<
atom -> None
268
(
atom -> None
268
**
atom -> None
268
//
atom -> None
268
in
atom -> None
268
<=
atom -> None
268
>=
atom -> None
268
+
atom -> None
268
[
atom -> None
268
:
atom -> None
269
~
255
269
STRING
257
269
NUMBER
262
269
{
263
269
factor
712
269
atom_expr
265
269
[
266
269
None
268
269
-
267
269
+
269
269
(
270
269
atom
272
269
NAME
274
269
power
275
269
True
276
269
False
280
270
~
92
270
factor
93
270
STRING
94
270
shift_expr
95
270
arith_expr
96
270
term
97
270
NUMBER
98
270
and_expr
99
270
{
100
270
atom_expr
101
270
[
102
270
-
103
270
)
713
270
None
105
270
(
106
270
atom
107
270
test_list_comp
714
270
+
109
270
NAME
110
270
power
111
270
test_list
112
270
True
113
270
comparison
114
270
xor_expr
115
270
lambdef
116
270
False
117
270
not_test
118
270
or_test
119
270
test
120
270
lambda
121
270
and_test
122
270
not
123
270
expr
124
271
:
715
272
[
716
272
(
717
272
//
trailer_expr -> 
272
trailer
718
272
<<
trailer_expr -> 
272
trailer_expr
719
272
*
trailer_expr -> 
272
in
trailer_expr -> 
272
&
trailer_expr -> 
272
.
720
272
and
trailer_expr -> 
272
<=
trailer_expr -> 
272
,
trailer_expr -> 
272
|
trailer_expr -> 
272
or
trailer_expr -> 
272
>=
trailer_expr -> 
272
:
trailer_expr -> 
272
+
trailer_expr -> 
272
**
trailer_expr -> 
272
>>
trailer_expr -> 
272
!=
trailer_expr -> 
272
-
trailer_expr -> 
272
/
trailer_expr -> 
272
%
trailer_expr -> 
272
is
trailer_expr -> 
272
as
trailer_expr -> 
272
<
trailer_expr -> 
272
if
trailer_expr -> 
272
>
trailer_expr -> 
272
^
trailer_expr -> 
272
==
trailer_expr -> 
272
@
trailer_expr -> 
272
not
trailer_expr -> 
273
not
xor_expr -> and_expr
273
if
xor_expr -> and_expr
273
|
xor_expr -> and_expr
273
>
xor_expr -> and_expr
273
^
721
273
<
xor_expr -> and_expr
273
as
xor_expr -> and_expr
273
or
xor_expr -> and_expr
273
:
xor_expr -> and_expr
273
>=
xor_expr -> and_expr
273
in
xor_expr -> and_expr
273
and
xor_expr -> and_expr
273
is
xor_expr -> and_expr
273
==
xor_expr -> and_expr
273
!=
xor_expr -> and_expr
273
<=
xor_expr -> and_expr
273
,
xor_expr -> and_expr
274
<=
atom -> NAME
274
@
atom -> NAME
274
>>
atom -> NAME
274
==
atom -> NAME
274
>
atom -> NAME
274
*
atom -> NAME
274
-
atom -> NAME
274
&
atom -> NAME
274
is
atom -> NAME
274
.
atom -> NAME
274
or
atom -> NAME
274
in
atom -> NAME
274
as
atom -> NAME
274
<<
atom -> NAME
274
+
atom -> NAME
274
,
atom -> NAME
274
if
atom -> NAME
274
|
atom -> NAME
274
and
atom -> NAME
274
^
atom -> NAME
274
[
atom -> NAME
274
/
atom -> NAME
274
not
atom -> NAME
274
!=
atom -> NAME
274
%
atom -> NAME
274
:
atom -> NAME
274
<
atom -> NAME
274
>=
atom -> NAME
274
**
atom -> NAME
274
(
atom -> NAME
274
//
atom -> NAME
275
if
factor -> power
275
is
factor -> power
275
%
factor -> power
275
==
factor -> power
275
>=
factor -> power
275
or
factor -> power
275
and
factor -> power
275
/
factor -> power
275
<
factor -> power
275
+
factor -> power
275
:
factor -> power
275
,
factor -> power
275
//
factor -> power
275
@
factor -> power
275
in
factor -> power
275
as
factor -> power
275
<=
factor -> power
275
&
factor -> power
275
!=
factor -> power
275
<<
factor -> power
275
|
factor -> power
275
>
factor -> power
275
*
factor -> power
275
^
factor -> power
275
-
factor -> power
275
not
factor -> power
275
>>
factor -> power
276
>
atom -> True
276
|
atom -> True
276
-
atom -> True
276
==
atom -> True
276
<<
atom -> True
276
if
atom -> True
276
%
atom -> True
276
/
atom -> True
276
[
atom -> True
276
:
atom -> True
276
*
atom -> True
276
<=
atom -> True
276
<
atom -> True
276
&
atom -> True
276
+
atom -> True
276
**
atom -> True
276
!=
atom -> True
276
>>
atom -> True
276
//
atom -> True
276
and
atom -> True
276
as
atom -> True
276
^
atom -> True
276
is
atom -> True
276
or
atom -> True
276
.
atom -> True
276
,
atom -> True
276
(
atom -> True
276
>=
atom -> True
276
@
atom -> True
276
not
atom -> True
276
in
atom -> True
277
:
not_test -> comparison
277
as
not_test -> comparison
277
or
not_test -> comparison
277
if
not_test -> comparison
277
and
not_test -> comparison
277
,
not_test -> comparison
278
not
expr -> xor_expr
278
or
expr -> xor_expr
278
==
expr -> xor_expr
278
in
expr -> xor_expr
278
|
722
278
as
expr -> xor_expr
278
if
expr -> xor_expr
278
:
expr -> xor_expr
278
<=
expr -> xor_expr
278
is
expr -> xor_expr
278
<
expr -> xor_expr
278
>=
expr -> xor_expr
278
>
expr -> xor_expr
278
and
expr -> xor_expr
278
!=
expr -> xor_expr
278
,
expr -> xor_expr
279
:
723
279
NAME
251
279
vfpdef
253
279
varargslist
724
280
<=
atom -> False
280
as
atom -> False
280
*
atom -> False
280
not
atom -> False
280
!=
atom -> False
280
@
atom -> False
280
and
atom -> False
280
if
atom -> False
280
<<
atom -> False
280
>
atom -> False
280
,
atom -> False
280
:
atom -> False
280
+
atom -> False
280
/
atom -> False
280
==
atom -> False
280
&
atom -> False
280
^
atom -> False
280
in
atom -> False
280
[
atom -> False
280
is
atom -> False
280
%
atom -> False
280
>=
atom -> False
280
//
atom -> False
280
(
atom -> False
280
|
atom -> False
280
<
atom -> False
280
.
atom -> False
280
or
atom -> False
280
**
atom -> False
280
>>
atom -> False
280
-
atom -> False
281
or
and_test -> not_test
281
and
725
281
if
and_test -> not_test
281
,
and_test -> not_test
281
:
and_test -> not_test
281
as
and_test -> not_test
282
:
with_items -> with_item
282
,
726
283
as
727
283
,
with_item -> test
283
:
with_item -> test
284
if
728
284
:
test -> or_test
284
as
test -> or_test
284
,
test -> or_test
285
,
test -> lambdef
285
:
test -> lambdef
285
as
test -> lambdef
286
~
255
286
factor
256
286
STRING
257
286
shift_expr
258
286
expr
259
286
arith_expr
260
286
term
261
286
NUMBER
262
286
{
263
286
atom_expr
265
286
[
266
286
-
267
286
None
268
286
not_test
729
286
+
269
286
(
270
286
atom
272
286
and_expr
273
286
NAME
274
286
power
275
286
True
276
286
comparison
277
286
xor_expr
278
286
False
280
286
not
286
287
~
287
287
STRING
289
287
NUMBER
292
287
{
293
287
[
295
287
atom_expr
294
287
None
297
287
-
296
287
factor
730
287
NAME
299
287
(
300
287
atom
302
287
+
303
287
power
305
287
True
306
287
False
309
288
/
731
288
@
732
288
if
term -> factor
288
%
733
288
<<
term -> factor
288
-
term -> factor
288
//
734
288
*
735
288
>=
term -> factor
288
or
term -> factor
288
<=
term -> factor
288
>
term -> factor
288
from
term -> factor
288
in
term -> factor
288
<
term -> factor
288
NEWLINE
term -> factor
288
>>
term -> factor
288
==
term -> factor
288
+
term -> factor
288
is
term -> factor
288
|
term -> factor
288
!=
term -> factor
288
&
term -> factor
288
not
term -> factor
288
and
term -> factor
288
^
term -> factor
289
from
atom -> STRING
289
==
atom -> STRING
289
>
atom -> STRING
289
<=
atom -> STRING
289
&
atom -> STRING
289
.
atom -> STRING
289
>=
atom -> STRING
289
@
atom -> STRING
289
[
atom -> STRING
289
^
atom -> STRING
289
NEWLINE
atom -> STRING
289
%
atom -> STRING
289
**
atom -> STRING
289
-
atom -> STRING
289
//
atom -> STRING
289
>>
atom -> STRING
289
<
atom -> STRING
289
|
atom -> STRING
289
(
atom -> STRING
289
is
atom -> STRING
289
and
atom -> STRING
289
*
atom -> STRING
289
or
atom -> STRING
289
not
atom -> STRING
289
<<
atom -> STRING
289
/
atom -> STRING
289
+
atom -> STRING
289
!=
atom -> STRING
289
in
atom -> STRING
289
if
atom -> STRING
290
NEWLINE
and_expr -> shift_expr
290
&
736
290
in
and_expr -> shift_expr
290
not
and_expr -> shift_expr
290
!=
and_expr -> shift_expr
290
>=
and_expr -> shift_expr
290
if
and_expr -> shift_expr
290
and
and_expr -> shift_expr
290
|
and_expr -> shift_expr
290
is
and_expr -> shift_expr
290
<=
and_expr -> shift_expr
290
>
and_expr -> shift_expr
290
from
and_expr -> shift_expr
290
^
and_expr -> shift_expr
290
or
and_expr -> shift_expr
290
<
and_expr -> shift_expr
290
==
and_expr -> shift_expr
291
+
737
291
if
arith_expr -> term
291
-
738
291
<=
arith_expr -> term
291
|
arith_expr -> term
291
not
arith_expr -> term
291
from
arith_expr -> term
291
^
arith_expr -> term
291
<<
arith_expr -> term
291
&
arith_expr -> term
291
==
arith_expr -> term
291
is
arith_expr -> term
291
!=
arith_expr -> term
291
>
arith_expr -> term
291
and
arith_expr -> term
291
<
arith_expr -> term
291
or
arith_expr -> term
291
NEWLINE
arith_expr -> term
291
>=
arith_expr -> term
291
>>
arith_expr -> term
291
in
arith_expr -> term
292
<<
atom -> NUMBER
292
-
atom -> NUMBER
292
^
atom -> NUMBER
292
or
atom -> NUMBER
292
==
atom -> NUMBER
292
!=
atom -> NUMBER
292
/
atom -> NUMBER
292
and
atom -> NUMBER
292
%
atom -> NUMBER
292
>=
atom -> NUMBER
292
@
atom -> NUMBER
292
NEWLINE
atom -> NUMBER
292
|
atom -> NUMBER
292
[
atom -> NUMBER
292
//
atom -> NUMBER
292
.
atom -> NUMBER
292
from
atom -> NUMBER
292
not
atom -> NUMBER
292
<
atom -> NUMBER
292
>>
atom -> NUMBER
292
if
atom -> NUMBER
292
<=
atom -> NUMBER
292
>
atom -> NUMBER
292
&
atom -> NUMBER
292
is
atom -> NUMBER
292
**
atom -> NUMBER
292
in
atom -> NUMBER
292
+
atom -> NUMBER
292
(
atom -> NUMBER
292
*
atom -> NUMBER
293
}
739
294
**
740
294
or
power -> atom_expr
294
*
power -> atom_expr
294
>=
power -> atom_expr
294
^
power -> atom_expr
294
in
power -> atom_expr
294
!=
power -> atom_expr
294
if
power -> atom_expr
294
@
power -> atom_expr
294
-
power -> atom_expr
294
and
power -> atom_expr
294
not
power -> atom_expr
294
==
power -> atom_expr
294
<
power -> atom_expr
294
&
power -> atom_expr
294
|
power -> atom_expr
294
//
power -> atom_expr
294
>
power -> atom_expr
294
NEWLINE
power -> atom_expr
294
from
power -> atom_expr
294
%
power -> atom_expr
294
/
power -> atom_expr
294
is
power -> atom_expr
294
<<
power -> atom_expr
294
>>
power -> atom_expr
294
+
power -> atom_expr
294
<=
power -> atom_expr
295
~
186
295
factor
187
295
STRING
188
295
shift_expr
189
295
test_list_comp
741
295
arith_expr
191
295
term
192
295
atom_expr
193
295
]
742
295
test
195
295
NUMBER
196
295
and_expr
197
295
{
198
295
[
199
295
-
200
295
None
201
295
(
202
295
atom
203
295
+
204
295
NAME
205
295
power
206
295
True
207
295
comparison
208
295
xor_expr
209
295
lambdef
210
295
False
211
295
not_test
212
295
or_test
213
295
and_test
214
295
lambda
215
295
not
216
295
expr
217
295
test_list
218
296
~
287
296
STRING
289
296
NUMBER
292
296
factor
743
296
{
293
296
[
295
296
atom_expr
294
296
None
297
296
-
296
296
NAME
299
296
(
300
296
atom
302
296
+
303
296
power
305
296
True
306
296
False
309
297
not
atom -> None
297
or
atom -> None
297
==
atom -> None
297
*
atom -> None
297
-
atom -> None
297
^
atom -> None
297
>>
atom -> None
297
if
atom -> None
297
<<
atom -> None
297
and
atom -> None
297
|
atom -> None
297
NEWLINE
atom -> None
297
&
atom -> None
297
!=
atom -> None
297
@
atom -> None
297
from
atom -> None
297
.
atom -> None
297
/
atom -> None
297
%
atom -> None
297
>
atom -> None
297
is
atom -> None
297
<
atom -> None
297
(
atom -> None
297
**
atom -> None
297
//
atom -> None
297
in
atom -> None
297
<=
atom -> None
297
>=
atom -> None
297
+
atom -> None
297
[
atom -> None
298
NAME
251
298
:
744
298
vfpdef
253
298
varargslist
745
299
<=
atom -> NAME
299
@
atom -> NAME
299
>>
atom -> NAME
299
==
atom -> NAME
299
>
atom -> NAME
299
*
atom -> NAME
299
-
atom -> NAME
299
&
atom -> NAME
299
is
atom -> NAME
299
.
atom -> NAME
299
or
atom -> NAME
299
in
atom -> NAME
299
NEWLINE
atom -> NAME
299
<<
atom -> NAME
299
+
atom -> NAME
299
if
atom -> NAME
299
|
atom -> NAME
299
and
atom -> NAME
299
^
atom -> NAME
299
[
atom -> NAME
299
/
atom -> NAME
299
not
atom -> NAME
299
!=
atom -> NAME
299
%
atom -> NAME
299
<
atom -> NAME
299
>=
atom -> NAME
299
**
atom -> NAME
299
from
atom -> NAME
299
(
atom -> NAME
299
//
atom -> NAME
300
~
92
300
factor
93
300
STRING
94
300
shift_expr
95
300
arith_expr
96
300
term
97
300
NUMBER
98
300
and_expr
99
300
{
100
300
atom_expr
101
300
[
102
300
-
103
300
None
105
300
(
106
300
atom
107
300
+
109
300
)
746
300
NAME
110
300
test_list_comp
747
300
power
111
300
test_list
112
300
True
113
300
comparison
114
300
xor_expr
115
300
lambdef
116
300
False
117
300
not_test
118
300
or_test
119
300
test
120
300
lambda
121
300
and_test
122
300
not
123
300
expr
124
301
>>
748
301
^
shift_expr -> arith_expr
301
<<
749
301
or
shift_expr -> arith_expr
301
|
shift_expr -> arith_expr
301
<=
shift_expr -> arith_expr
301
is
shift_expr -> arith_expr
301
<
shift_expr -> arith_expr
301
if
shift_expr -> arith_expr
301
not
shift_expr -> arith_expr
301
in
shift_expr -> arith_expr
301
and
shift_expr -> arith_expr
301
>=
shift_expr -> arith_expr
301
==
shift_expr -> arith_expr
301
!=
shift_expr -> arith_expr
301
>
shift_expr -> arith_expr
301
NEWLINE
shift_expr -> arith_expr
301
from
shift_expr -> arith_expr
301
&
shift_expr -> arith_expr
302
[
750
302
(
751
302
//
trailer_expr -> 
302
trailer
752
302
<<
trailer_expr -> 
302
trailer_expr
753
302
*
trailer_expr -> 
302
in
trailer_expr -> 
302
&
trailer_expr -> 
302
.
754
302
and
trailer_expr -> 
302
<=
trailer_expr -> 
302
|
trailer_expr -> 
302
or
trailer_expr -> 
302
>=
trailer_expr -> 
302
+
trailer_expr -> 
302
**
trailer_expr -> 
302
>>
trailer_expr -> 
302
!=
trailer_expr -> 
302
-
trailer_expr -> 
302
/
trailer_expr -> 
302
%
trailer_expr -> 
302
is
trailer_expr -> 
302
<
trailer_expr -> 
302
from
trailer_expr -> 
302
if
trailer_expr -> 
302
NEWLINE
trailer_expr -> 
302
>
trailer_expr -> 
302
^
trailer_expr -> 
302
==
trailer_expr -> 
302
@
trailer_expr -> 
302
not
trailer_expr -> 
303
~
287
303
STRING
289
303
NUMBER
292
303
{
293
303
factor
755
303
atom_expr
294
303
[
295
303
None
297
303
-
296
303
NAME
299
303
(
300
303
atom
302
303
+
303
303
power
305
303
True
306
303
False
309
304
not
xor_expr -> and_expr
304
if
xor_expr -> and_expr
304
|
xor_expr -> and_expr
304
>
xor_expr -> and_expr
304
^
756
304
<
xor_expr -> and_expr
304
NEWLINE
xor_expr -> and_expr
304
from
xor_expr -> and_expr
304
or
xor_expr -> and_expr
304
>=
xor_expr -> and_expr
304
in
xor_expr -> and_expr
304
and
xor_expr -> and_expr
304
is
xor_expr -> and_expr
304
==
xor_expr -> and_expr
304
!=
xor_expr -> and_expr
304
<=
xor_expr -> and_expr
305
if
factor -> power
305
is
factor -> power
305
%
factor -> power
305
==
factor -> power
305
>=
factor -> power
305
or
factor -> power
305
and
factor -> power
305
/
factor -> power
305
<
factor -> power
305
+
factor -> power
305
//
factor -> power
305
@
factor -> power
305
in
factor -> power
305
from
factor -> power
305
NEWLINE
factor -> power
305
<=
factor -> power
305
&
factor -> power
305
!=
factor -> power
305
<<
factor -> power
305
|
factor -> power
305
>
factor -> power
305
*
factor -> power
305
^
factor -> power
305
-
factor -> power
305
not
factor -> power
305
>>
factor -> power
306
>
atom -> True
306
|
atom -> True
306
-
atom -> True
306
NEWLINE
atom -> True
306
==
atom -> True
306
<<
atom -> True
306
if
atom -> True
306
%
atom -> True
306
from
atom -> True
306
/
atom -> True
306
[
atom -> True
306
*
atom -> True
306
<=
atom -> True
306
<
atom -> True
306
&
atom -> True
306
+
atom -> True
306
**
atom -> True
306
!=
atom -> True
306
>>
atom -> True
306
//
atom -> True
306
and
atom -> True
306
^
atom -> True
306
is
atom -> True
306
or
atom -> True
306
.
atom -> True
306
(
atom -> True
306
>=
atom -> True
306
@
atom -> True
306
not
atom -> True
306
in
atom -> True
307
or
not_test -> comparison
307
from
not_test -> comparison
307
if
not_test -> comparison
307
and
not_test -> comparison
307
NEWLINE
not_test -> comparison
308
not
expr -> xor_expr
308
or
expr -> xor_expr
308
==
expr -> xor_expr
308
in
expr -> xor_expr
308
|
757
308
if
expr -> xor_expr
308
NEWLINE
expr -> xor_expr
308
<=
expr -> xor_expr
308
is
expr -> xor_expr
308
<
expr -> xor_expr
308
from
expr -> xor_expr
308
>=
expr -> xor_expr
308
>
expr -> xor_expr
308
and
expr -> xor_expr
308
!=
expr -> xor_expr
309
<=
atom -> False
309
*
atom -> False
309
not
atom -> False
309
!=
atom -> False
309
@
atom -> False
309
and
atom -> False
309
if
atom -> False
309
<<
atom -> False
309
>
atom -> False
309
+
atom -> False
309
/
atom -> False
309
==
atom -> False
309
&
atom -> False
309
^
atom -> False
309
in
atom -> False
309
[
atom -> False
309
is
atom -> False
309
%
atom -> False
309
from
atom -> False
309
>=
atom -> False
309
//
atom -> False
309
(
atom -> False
309
NEWLINE
atom -> False
309
|
atom -> False
309
<
atom -> False
309
.
atom -> False
309
or
atom -> False
309
**
atom -> False
309
>>
atom -> False
309
-
atom -> False
310
or
and_test -> not_test
310
if
and_test -> not_test
310
and
758
310
from
and_test -> not_test
310
NEWLINE
and_test -> not_test
311
from
test -> lambdef
311
NEWLINE
test -> lambdef
312
!=
125
312
is
126
312
>=
127
312
in
128
312
<
129
312
==
131
312
<=
132
312
not
133
312
>
134
312
from
comparison -> expr
312
comp_op
759
312
NEWLINE
comparison -> expr
312
or
comparison -> expr
312
if
comparison -> expr
312
and
comparison -> expr
313
if
760
313
from
test -> or_test
313
NEWLINE
test -> or_test
314
or
761
314
if
or_test -> and_test
314
NEWLINE
or_test -> and_test
314
from
or_test -> and_test
315
~
287
315
factor
288
315
STRING
289
315
shift_expr
290
315
term
291
315
NUMBER
292
315
not_test
762
315
{
293
315
atom_expr
294
315
[
295
315
-
296
315
None
297
315
NAME
299
315
(
300
315
arith_expr
301
315
atom
302
315
+
303
315
and_expr
304
315
power
305
315
True
306
315
comparison
307
315
xor_expr
308
315
False
309
315
expr
312
315
not
315
316
from
763
316
NEWLINE
raise_stmt -> raise test
317
NEWLINE
expr_list -> expr
317
,
764
318
/
765
318
@
766
318
%
767
318
<<
term -> factor
318
//
768
318
-
term -> factor
318
*
769
318
,
term -> factor
318
&
term -> factor
318
+
term -> factor
318
NEWLINE
term -> factor
318
>>
term -> factor
318
^
term -> factor
318
|
term -> factor
319
~
319
319
STRING
320
319
None
321
319
[
323
319
NUMBER
324
319
{
325
319
(
326
319
atom
327
319
-
328
319
atom_expr
329
319
+
330
319
False
331
319
True
333
319
power
334
319
NAME
337
319
factor
770
320
/
atom -> STRING
320
&
atom -> STRING
320
+
atom -> STRING
320
.
atom -> STRING
320
(
atom -> STRING
320
|
atom -> STRING
320
@
atom -> STRING
320
[
atom -> STRING
320
^
atom -> STRING
320
*
atom -> STRING
320
NEWLINE
atom -> STRING
320
%
atom -> STRING
320
<<
atom -> STRING
320
,
atom -> STRING
320
**
atom -> STRING
320
-
atom -> STRING
320
//
atom -> STRING
320
>>
atom -> STRING
321
//
atom -> None
321
**
atom -> None
321
,
atom -> None
321
*
atom -> None
321
%
atom -> None
321
<<
atom -> None
321
-
atom -> None
321
/
atom -> None
321
|
atom -> None
321
NEWLINE
atom -> None
321
&
atom -> None
321
+
atom -> None
321
@
atom -> None
321
[
atom -> None
321
^
atom -> None
321
>>
atom -> None
321
(
atom -> None
321
.
atom -> None
322
>>
771
322
^
shift_expr -> arith_expr
322
NEWLINE
shift_expr -> arith_expr
322
<<
772
322
,
shift_expr -> arith_expr
322
&
shift_expr -> arith_expr
322
|
shift_expr -> arith_expr
323
~
186
323
factor
187
323
STRING
188
323
shift_expr
189
323
test_list_comp
773
323
arith_expr
191
323
term
192
323
atom_expr
193
323
NUMBER
196
323
test
195
323
and_expr
197
323
{
198
323
[
199
323
-
200
323
None
201
323
(
202
323
atom
203
323
+
204
323
]
774
323
NAME
205
323
power
206
323
True
207
323
comparison
208
323
xor_expr
209
323
lambdef
210
323
False
211
323
not_test
212
323
or_test
213
323
and_test
214
323
lambda
215
323
not
216
323
expr
217
323
test_list
218
324
<<
atom -> NUMBER
324
|
atom -> NUMBER
324
[
atom -> NUMBER
324
//
atom -> NUMBER
324
.
atom -> NUMBER
324
NEWLINE
atom -> NUMBER
324
**
atom -> NUMBER
324
-
atom -> NUMBER
324
&
atom -> NUMBER
324
/
atom -> NUMBER
324
^
atom -> NUMBER
324
+
atom -> NUMBER
324
%
atom -> NUMBER
324
,
atom -> NUMBER
324
@
atom -> NUMBER
324
>>
atom -> NUMBER
324
(
atom -> NUMBER
324
*
atom -> NUMBER
325
}
775
326
~
92
326
factor
93
326
STRING
94
326
shift_expr
95
326
arith_expr
96
326
term
97
326
NUMBER
98
326
and_expr
99
326
{
100
326
atom_expr
101
326
[
102
326
-
103
326
)
776
326
None
105
326
(
106
326
atom
107
326
test_list_comp
777
326
+
109
326
NAME
110
326
power
111
326
test_list
112
326
True
113
326
comparison
114
326
xor_expr
115
326
lambdef
116
326
False
117
326
not_test
118
326
or_test
119
326
test
120
326
lambda
121
326
and_test
122
326
not
123
326
expr
124
327
[
778
327
trailer
779
327
trailer_expr
780
327
**
trailer_expr -> 
327
//
trailer_expr -> 
327
<<
trailer_expr -> 
327
.
781
327
(
782
327
*
trailer_expr -> 
327
&
trailer_expr -> 
327
>>
trailer_expr -> 
327
-
trailer_expr -> 
327
/
trailer_expr -> 
327
,
trailer_expr -> 
327
%
trailer_expr -> 
327
|
trailer_expr -> 
327
NEWLINE
trailer_expr -> 
327
^
trailer_expr -> 
327
@
trailer_expr -> 
327
+
trailer_expr -> 
328
~
319
328
STRING
320
328
None
321
328
[
323
328
NUMBER
324
328
factor
783
328
{
325
328
(
326
328
atom
327
328
-
328
328
atom_expr
329
328
+
330
328
False
331
328
True
333
328
power
334
328
NAME
337
329
**
784
329
*
power -> atom_expr
329
^
power -> atom_expr
329
@
power -> atom_expr
329
-
power -> atom_expr
329
|
power -> atom_expr
329
&
power -> atom_expr
329
//
power -> atom_expr
329
NEWLINE
power -> atom_expr
329
,
power -> atom_expr
329
%
power -> atom_expr
329
/
power -> atom_expr
329
<<
power -> atom_expr
329
>>
power -> atom_expr
329
+
power -> atom_expr
330
~
319
330
STRING
320
330
None
321
330
[
323
330
NUMBER
324
330
{
325
330
(
326
330
factor
785
330
atom
327
330
-
328
330
atom_expr
329
330
+
330
330
False
331
330
True
333
330
power
334
330
NAME
337
331
//
atom -> False
331
**
atom -> False
331
^
atom -> False
331
(
atom -> False
331
NEWLINE
atom -> False
331
[
atom -> False
331
@
atom -> False
331
|
atom -> False
331
<<
atom -> False
331
,
atom -> False
331
%
atom -> False
331
.
atom -> False
331
*
atom -> False
331
+
atom -> False
331
/
atom -> False
331
>>
atom -> False
331
&
atom -> False
331
-
atom -> False
332
^
786
332
NEWLINE
xor_expr -> and_expr
332
,
xor_expr -> and_expr
332
|
xor_expr -> and_expr
333
**
atom -> True
333
//
atom -> True
333
>>
atom -> True
333
.
atom -> True
333
%
atom -> True
333
|
atom -> True
333
,
atom -> True
333
/
atom -> True
333
NEWLINE
atom -> True
333
[
atom -> True
333
^
atom -> True
333
(
atom -> True
333
*
atom -> True
333
-
atom -> True
333
@
atom -> True
333
<<
atom -> True
333
&
atom -> True
333
+
atom -> True
334
//
factor -> power
334
<<
factor -> power
334
|
factor -> power
334
*
factor -> power
334
%
factor -> power
334
NEWLINE
factor -> power
334
@
factor -> power
334
^
factor -> power
334
-
factor -> power
334
/
factor -> power
334
&
factor -> power
334
+
factor -> power
334
,
factor -> power
334
>>
factor -> power
335
-
787
335
+
788
335
|
arith_expr -> term
335
^
arith_expr -> term
335
<<
arith_expr -> term
335
&
arith_expr -> term
335
,
arith_expr -> term
335
NEWLINE
arith_expr -> term
335
>>
arith_expr -> term
336
NEWLINE
and_expr -> shift_expr
336
&
789
336
^
and_expr -> shift_expr
336
|
and_expr -> shift_expr
336
,
and_expr -> shift_expr
337
*
atom -> NAME
337
&
atom -> NAME
337
-
atom -> NAME
337
@
atom -> NAME
337
.
atom -> NAME
337
^
atom -> NAME
337
[
atom -> NAME
337
**
atom -> NAME
337
/
atom -> NAME
337
NEWLINE
atom -> NAME
337
>>
atom -> NAME
337
<<
atom -> NAME
337
+
atom -> NAME
337
%
atom -> NAME
337
,
atom -> NAME
337
(
atom -> NAME
337
|
atom -> NAME
337
//
atom -> NAME
338
NEWLINE
expr -> xor_expr
338
|
790
338
,
expr -> xor_expr
339
NEWLINE
yield_stmt -> yield expr_list
340
~
340
340
STRING
342
340
NUMBER
346
340
{
348
340
[
350
340
atom_expr
349
340
None
352
340
-
351
340
factor
791
340
(
353
340
atom
354
340
+
355
340
NAME
357
340
power
358
340
True
359
340
False
363
341
/
792
341
@
793
341
if
term -> factor
341
%
794
341
<<
term -> factor
341
-
term -> factor
341
//
795
341
*
796
341
>=
term -> factor
341
or
term -> factor
341
<=
term -> factor
341
>
term -> factor
341
in
term -> factor
341
<
term -> factor
341
NEWLINE
term -> factor
341
>>
term -> factor
341
,
term -> factor
341
==
term -> factor
341
is
term -> factor
341
+
term -> factor
341
|
term -> factor
341
!=
term -> factor
341
&
term -> factor
341
not
term -> factor
341
and
term -> factor
341
^
term -> factor
342
==
atom -> STRING
342
>
atom -> STRING
342
<=
atom -> STRING
342
,
atom -> STRING
342
&
atom -> STRING
342
.
atom -> STRING
342
>=
atom -> STRING
342
@
atom -> STRING
342
[
atom -> STRING
342
^
atom -> STRING
342
NEWLINE
atom -> STRING
342
%
atom -> STRING
342
**
atom -> STRING
342
-
atom -> STRING
342
//
atom -> STRING
342
>>
atom -> STRING
342
<
atom -> STRING
342
|
atom -> STRING
342
(
atom -> STRING
342
is
atom -> STRING
342
and
atom -> STRING
342
*
atom -> STRING
342
or
atom -> STRING
342
not
atom -> STRING
342
<<
atom -> STRING
342
/
atom -> STRING
342
+
atom -> STRING
342
!=
atom -> STRING
342
in
atom -> STRING
342
if
atom -> STRING
343
NEWLINE
and_expr -> shift_expr
343
&
797
343
in
and_expr -> shift_expr
343
,
and_expr -> shift_expr
343
not
and_expr -> shift_expr
343
!=
and_expr -> shift_expr
343
>=
and_expr -> shift_expr
343
if
and_expr -> shift_expr
343
and
and_expr -> shift_expr
343
|
and_expr -> shift_expr
343
is
and_expr -> shift_expr
343
<=
and_expr -> shift_expr
343
>
and_expr -> shift_expr
343
^
and_expr -> shift_expr
343
or
and_expr -> shift_expr
343
<
and_expr -> shift_expr
343
==
and_expr -> shift_expr
344
>>
798
344
^
shift_expr -> arith_expr
344
<<
799
344
or
shift_expr -> arith_expr
344
|
shift_expr -> arith_expr
344
<=
shift_expr -> arith_expr
344
is
shift_expr -> arith_expr
344
<
shift_expr -> arith_expr
344
if
shift_expr -> arith_expr
344
not
shift_expr -> arith_expr
344
in
shift_expr -> arith_expr
344
and
shift_expr -> arith_expr
344
>=
shift_expr -> arith_expr
344
==
shift_expr -> arith_expr
344
!=
shift_expr -> arith_expr
344
>
shift_expr -> arith_expr
344
NEWLINE
shift_expr -> arith_expr
344
,
shift_expr -> arith_expr
344
&
shift_expr -> arith_expr
345
+
800
345
-
801
345
if
arith_expr -> term
345
<=
arith_expr -> term
345
|
arith_expr -> term
345
not
arith_expr -> term
345
^
arith_expr -> term
345
<<
arith_expr -> term
345
&
arith_expr -> term
345
==
arith_expr -> term
345
is
arith_expr -> term
345
!=
arith_expr -> term
345
>
arith_expr -> term
345
and
arith_expr -> term
345
<
arith_expr -> term
345
or
arith_expr -> term
345
NEWLINE
arith_expr -> term
345
,
arith_expr -> term
345
>=
arith_expr -> term
345
>>
arith_expr -> term
345
in
arith_expr -> term
346
<<
atom -> NUMBER
346
-
atom -> NUMBER
346
^
atom -> NUMBER
346
or
atom -> NUMBER
346
==
atom -> NUMBER
346
!=
atom -> NUMBER
346
/
atom -> NUMBER
346
and
atom -> NUMBER
346
%
atom -> NUMBER
346
,
atom -> NUMBER
346
>=
atom -> NUMBER
346
@
atom -> NUMBER
346
NEWLINE
atom -> NUMBER
346
|
atom -> NUMBER
346
[
atom -> NUMBER
346
//
atom -> NUMBER
346
.
atom -> NUMBER
346
not
atom -> NUMBER
346
<
atom -> NUMBER
346
>>
atom -> NUMBER
346
if
atom -> NUMBER
346
<=
atom -> NUMBER
346
>
atom -> NUMBER
346
&
atom -> NUMBER
346
is
atom -> NUMBER
346
**
atom -> NUMBER
346
in
atom -> NUMBER
346
+
atom -> NUMBER
346
(
atom -> NUMBER
346
*
atom -> NUMBER
347
NEWLINE
assert_stmt -> assert test_list
348
}
802
349
**
803
349
or
power -> atom_expr
349
*
power -> atom_expr
349
>=
power -> atom_expr
349
^
power -> atom_expr
349
in
power -> atom_expr
349
!=
power -> atom_expr
349
if
power -> atom_expr
349
@
power -> atom_expr
349
-
power -> atom_expr
349
and
power -> atom_expr
349
not
power -> atom_expr
349
==
power -> atom_expr
349
<
power -> atom_expr
349
&
power -> atom_expr
349
|
power -> atom_expr
349
//
power -> atom_expr
349
>
power -> atom_expr
349
NEWLINE
power -> atom_expr
349
,
power -> atom_expr
349
%
power -> atom_expr
349
/
power -> atom_expr
349
is
power -> atom_expr
349
<<
power -> atom_expr
349
>>
power -> atom_expr
349
+
power -> atom_expr
349
<=
power -> atom_expr
350
~
186
350
factor
187
350
STRING
188
350
shift_expr
189
350
test_list_comp
804
350
arith_expr
191
350
term
192
350
atom_expr
193
350
]
805
350
test
195
350
NUMBER
196
350
and_expr
197
350
{
198
350
[
199
350
-
200
350
None
201
350
(
202
350
atom
203
350
+
204
350
NAME
205
350
power
206
350
True
207
350
comparison
208
350
xor_expr
209
350
lambdef
210
350
False
211
350
not_test
212
350
or_test
213
350
and_test
214
350
lambda
215
350
not
216
350
expr
217
350
test_list
218
351
~
340
351
STRING
342
351
NUMBER
346
351
factor
806
351
{
348
351
[
350
351
atom_expr
349
351
None
352
351
-
351
351
(
353
351
atom
354
351
+
355
351
NAME
357
351
power
358
351
True
359
351
False
363
352
not
atom -> None
352
or
atom -> None
352
==
atom -> None
352
*
atom -> None
352
-
atom -> None
352
^
atom -> None
352
>>
atom -> None
352
if
atom -> None
352
,
atom -> None
352
<<
atom -> None
352
and
atom -> None
352
|
atom -> None
352
NEWLINE
atom -> None
352
&
atom -> None
352
!=
atom -> None
352
@
atom -> None
352
.
atom -> None
352
/
atom -> None
352
%
atom -> None
352
>
atom -> None
352
is
atom -> None
352
<
atom -> None
352
(
atom -> None
352
**
atom -> None
352
//
atom -> None
352
in
atom -> None
352
<=
atom -> None
352
>=
atom -> None
352
+
atom -> None
352
[
atom -> None
353
~
92
353
factor
93
353
STRING
94
353
shift_expr
95
353
arith_expr
96
353
term
97
353
NUMBER
98
353
and_expr
99
353
{
100
353
atom_expr
101
353
[
102
353
-
103
353
)
807
353
None
105
353
(
106
353
atom
107
353
test_list_comp
808
353
+
109
353
NAME
110
353
power
111
353
test_list
112
353
True
113
353
comparison
114
353
xor_expr
115
353
lambdef
116
353
False
117
353
not_test
118
353
or_test
119
353
test
120
353
lambda
121
353
and_test
122
353
not
123
353
expr
124
354
[
809
354
(
810
354
//
trailer_expr -> 
354
trailer
811
354
<<
trailer_expr -> 
354
trailer_expr
812
354
*
trailer_expr -> 
354
in
trailer_expr -> 
354
&
trailer_expr -> 
354
.
813
354
and
trailer_expr -> 
354
<=
trailer_expr -> 
354
,
trailer_expr -> 
354
|
trailer_expr -> 
354
or
trailer_expr -> 
354
>=
trailer_expr -> 
354
+
trailer_expr -> 
354
**
trailer_expr -> 
354
>>
trailer_expr -> 
354
!=
trailer_expr -> 
354
-
trailer_expr -> 
354
/
trailer_expr -> 
354
%
trailer_expr -> 
354
is
trailer_expr -> 
354
<
trailer_expr -> 
354
if
trailer_expr -> 
354
NEWLINE
trailer_expr -> 
354
>
trailer_expr -> 
354
^
trailer_expr -> 
354
==
trailer_expr -> 
354
@
trailer_expr -> 
354
not
trailer_expr -> 
355
~
340
355
STRING
342
355
NUMBER
346
355
{
348
355
factor
814
355
atom_expr
349
355
[
350
355
None
352
355
-
351
355
(
353
355
atom
354
355
+
355
355
NAME
357
355
power
358
355
True
359
355
False
363
356
not
xor_expr -> and_expr
356
if
xor_expr -> and_expr
356
|
xor_expr -> and_expr
356
>
xor_expr -> and_expr
356
^
815
356
<
xor_expr -> and_expr
356
NEWLINE
xor_expr -> and_expr
356
or
xor_expr -> and_expr
356
>=
xor_expr -> and_expr
356
in
xor_expr -> and_expr
356
and
xor_expr -> and_expr
356
is
xor_expr -> and_expr
356
==
xor_expr -> and_expr
356
!=
xor_expr -> and_expr
356
<=
xor_expr -> and_expr
356
,
xor_expr -> and_expr
357
<=
atom -> NAME
357
@
atom -> NAME
357
>>
atom -> NAME
357
==
atom -> NAME
357
>
atom -> NAME
357
*
atom -> NAME
357
-
atom -> NAME
357
&
atom -> NAME
357
is
atom -> NAME
357
.
atom -> NAME
357
or
atom -> NAME
357
in
atom -> NAME
357
NEWLINE
atom -> NAME
357
<<
atom -> NAME
357
+
atom -> NAME
357
,
atom -> NAME
357
if
atom -> NAME
357
|
atom -> NAME
357
and
atom -> NAME
357
^
atom -> NAME
357
[
atom -> NAME
357
/
atom -> NAME
357
not
atom -> NAME
357
!=
atom -> NAME
357
%
atom -> NAME
357
<
atom -> NAME
357
>=
atom -> NAME
357
**
atom -> NAME
357
(
atom -> NAME
357
//
atom -> NAME
358
if
factor -> power
358
is
factor -> power
358
%
factor -> power
358
==
factor -> power
358
>=
factor -> power
358
or
factor -> power
358
and
factor -> power
358
/
factor -> power
358
<
factor -> power
358
+
factor -> power
358
,
factor -> power
358
//
factor -> power
358
@
factor -> power
358
in
factor -> power
358
NEWLINE
factor -> power
358
<=
factor -> power
358
&
factor -> power
358
!=
factor -> power
358
<<
factor -> power
358
|
factor -> power
358
>
factor -> power
358
*
factor -> power
358
^
factor -> power
358
-
factor -> power
358
not
factor -> power
358
>>
factor -> power
359
>
atom -> True
359
|
atom -> True
359
-
atom -> True
359
NEWLINE
atom -> True
359
==
atom -> True
359
<<
atom -> True
359
if
atom -> True
359
%
atom -> True
359
/
atom -> True
359
[
atom -> True
359
*
atom -> True
359
<=
atom -> True
359
<
atom -> True
359
&
atom -> True
359
+
atom -> True
359
**
atom -> True
359
!=
atom -> True
359
>>
atom -> True
359
//
atom -> True
359
and
atom -> True
359
^
atom -> True
359
is
atom -> True
359
or
atom -> True
359
.
atom -> True
359
,
atom -> True
359
(
atom -> True
359
>=
atom -> True
359
@
atom -> True
359
not
atom -> True
359
in
atom -> True
360
or
not_test -> comparison
360
if
not_test -> comparison
360
,
not_test -> comparison
360
and
not_test -> comparison
360
NEWLINE
not_test -> comparison
361
:
816
361
varargslist
817
361
NAME
251
361
vfpdef
253
362
not
expr -> xor_expr
362
or
expr -> xor_expr
362
==
expr -> xor_expr
362
in
expr -> xor_expr
362
|
818
362
if
expr -> xor_expr
362
NEWLINE
expr -> xor_expr
362
<=
expr -> xor_expr
362
is
expr -> xor_expr
362
<
expr -> xor_expr
362
>=
expr -> xor_expr
362
>
expr -> xor_expr
362
and
expr -> xor_expr
362
!=
expr -> xor_expr
362
,
expr -> xor_expr
363
<=
atom -> False
363
*
atom -> False
363
not
atom -> False
363
!=
atom -> False
363
@
atom -> False
363
and
atom -> False
363
if
atom -> False
363
<<
atom -> False
363
>
atom -> False
363
,
atom -> False
363
+
atom -> False
363
/
atom -> False
363
==
atom -> False
363
&
atom -> False
363
^
atom -> False
363
in
atom -> False
363
[
atom -> False
363
is
atom -> False
363
%
atom -> False
363
>=
atom -> False
363
//
atom -> False
363
(
atom -> False
363
NEWLINE
atom -> False
363
|
atom -> False
363
<
atom -> False
363
.
atom -> False
363
or
atom -> False
363
**
atom -> False
363
>>
atom -> False
363
-
atom -> False
364
or
and_test -> not_test
364
,
and_test -> not_test
364
if
and_test -> not_test
364
and
819
364
NEWLINE
and_test -> not_test
365
,
test -> lambdef
365
NEWLINE
test -> lambdef
366
NEWLINE
test_list -> test
366
,
820
367
NEWLINE
test -> or_test
367
if
821
367
,
test -> or_test
368
if
or_test -> and_test
368
or
822
368
NEWLINE
or_test -> and_test
368
,
or_test -> and_test
369
~
340
369
factor
341
369
STRING
342
369
shift_expr
343
369
arith_expr
344
369
term
345
369
NUMBER
346
369
{
348
369
atom_expr
349
369
[
350
369
-
351
369
None
352
369
(
353
369
atom
354
369
+
355
369
and_expr
356
369
NAME
357
369
power
358
369
True
359
369
comparison
360
369
xor_expr
362
369
False
363
369
not_test
823
369
not
369
369
expr
370
370
!=
125
370
,
comparison -> expr
370
is
126
370
>=
127
370
in
128
370
<
129
370
==
131
370
<=
132
370
not
133
370
>
134
370
comp_op
824
370
NEWLINE
comparison -> expr
370
or
comparison -> expr
370
if
comparison -> expr
370
and
comparison -> expr
371
not
augassign -> &=
371
lambda
augassign -> &=
371
None
augassign -> &=
371
False
augassign -> &=
371
True
augassign -> &=
371
~
augassign -> &=
371
-
augassign -> &=
371
STRING
augassign -> &=
371
+
augassign -> &=
371
NAME
augassign -> &=
371
[
augassign -> &=
371
(
augassign -> &=
371
yield
augassign -> &=
371
NUMBER
augassign -> &=
371
{
augassign -> &=
372
False
augassign -> @=
372
None
augassign -> @=
372
[
augassign -> @=
372
(
augassign -> @=
372
yield
augassign -> @=
372
{
augassign -> @=
372
STRING
augassign -> @=
372
NUMBER
augassign -> @=
372
lambda
augassign -> @=
372
not
augassign -> @=
372
+
augassign -> @=
372
True
augassign -> @=
372
-
augassign -> @=
372
NAME
augassign -> @=
372
~
augassign -> @=
373
{
augassign -> **=
373
[
augassign -> **=
373
yield
augassign -> **=
373
~
augassign -> **=
373
not
augassign -> **=
373
lambda
augassign -> **=
373
NAME
augassign -> **=
373
(
augassign -> **=
373
True
augassign -> **=
373
STRING
augassign -> **=
373
False
augassign -> **=
373
+
augassign -> **=
373
-
augassign -> **=
373
None
augassign -> **=
373
NUMBER
augassign -> **=
374
~
augassign -> %=
374
-
augassign -> %=
374
NAME
augassign -> %=
374
STRING
augassign -> %=
374
lambda
augassign -> %=
374
yield
augassign -> %=
374
[
augassign -> %=
374
NUMBER
augassign -> %=
374
+
augassign -> %=
374
(
augassign -> %=
374
None
augassign -> %=
374
True
augassign -> %=
374
False
augassign -> %=
374
not
augassign -> %=
374
{
augassign -> %=
375
~
augassign -> ^=
375
[
augassign -> ^=
375
lambda
augassign -> ^=
375
+
augassign -> ^=
375
NUMBER
augassign -> ^=
375
-
augassign -> ^=
375
{
augassign -> ^=
375
not
augassign -> ^=
375
NAME
augassign -> ^=
375
False
augassign -> ^=
375
True
augassign -> ^=
375
None
augassign -> ^=
375
STRING
augassign -> ^=
375
yield
augassign -> ^=
375
(
augassign -> ^=
376
[
augassign -> +=
376
+
augassign -> +=
376
True
augassign -> +=
376
(
augassign -> +=
376
STRING
augassign -> +=
376
NUMBER
augassign -> +=
376
yield
augassign -> +=
376
-
augassign -> +=
376
lambda
augassign -> +=
376
not
augassign -> +=
376
False
augassign -> +=
376
NAME
augassign -> +=
376
{
augassign -> +=
376
None
augassign -> +=
376
~
augassign -> +=
377
NAME
augassign -> >>=
377
[
augassign -> >>=
377
lambda
augassign -> >>=
377
STRING
augassign -> >>=
377
None
augassign -> >>=
377
~
augassign -> >>=
377
-
augassign -> >>=
377
(
augassign -> >>=
377
not
augassign -> >>=
377
+
augassign -> >>=
377
False
augassign -> >>=
377
{
augassign -> >>=
377
NUMBER
augassign -> >>=
377
yield
augassign -> >>=
377
True
augassign -> >>=
378
NUMBER
augassign -> *=
378
False
augassign -> *=
378
STRING
augassign -> *=
378
lambda
augassign -> *=
378
(
augassign -> *=
378
None
augassign -> *=
378
~
augassign -> *=
378
NAME
augassign -> *=
378
[
augassign -> *=
378
True
augassign -> *=
378
-
augassign -> *=
378
+
augassign -> *=
378
not
augassign -> *=
378
yield
augassign -> *=
378
{
augassign -> *=
379
None
augassign -> /=
379
STRING
augassign -> /=
379
-
augassign -> /=
379
lambda
augassign -> /=
379
False
augassign -> /=
379
(
augassign -> /=
379
~
augassign -> /=
379
True
augassign -> /=
379
{
augassign -> /=
379
NAME
augassign -> /=
379
+
augassign -> /=
379
not
augassign -> /=
379
[
augassign -> /=
379
NUMBER
augassign -> /=
379
yield
augassign -> /=
380
+
augassign -> <<=
380
None
augassign -> <<=
380
-
augassign -> <<=
380
NUMBER
augassign -> <<=
380
NAME
augassign -> <<=
380
False
augassign -> <<=
380
True
augassign -> <<=
380
yield
augassign -> <<=
380
~
augassign -> <<=
380
[
augassign -> <<=
380
not
augassign -> <<=
380
(
augassign -> <<=
380
STRING
augassign -> <<=
380
{
augassign -> <<=
380
lambda
augassign -> <<=
381
STRING
augassign -> //=
381
~
augassign -> //=
381
+
augassign -> //=
381
NUMBER
augassign -> //=
381
(
augassign -> //=
381
False
augassign -> //=
381
not
augassign -> //=
381
True
augassign -> //=
381
lambda
augassign -> //=
381
{
augassign -> //=
381
NAME
augassign -> //=
381
[
augassign -> //=
381
yield
augassign -> //=
381
None
augassign -> //=
381
-
augassign -> //=
382
yield
augassign -> -=
382
+
augassign -> -=
382
[
augassign -> -=
382
STRING
augassign -> -=
382
None
augassign -> -=
382
{
augassign -> -=
382
(
augassign -> -=
382
NUMBER
augassign -> -=
382
-
augassign -> -=
382
NAME
augassign -> -=
382
True
augassign -> -=
382
lambda
augassign -> -=
382
~
augassign -> -=
382
not
augassign -> -=
382
False
augassign -> -=
383
[
augassign -> |=
383
{
augassign -> |=
383
~
augassign -> |=
383
None
augassign -> |=
383
+
augassign -> |=
383
not
augassign -> |=
383
-
augassign -> |=
383
lambda
augassign -> |=
383
True
augassign -> |=
383
False
augassign -> |=
383
NUMBER
augassign -> |=
383
yield
augassign -> |=
383
(
augassign -> |=
383
NAME
augassign -> |=
383
STRING
augassign -> |=
384
NEWLINE
expr_stmt -> test_list assign
385
NEWLINE
expr_stmt -> test_list annassign
386
~
825
386
factor
826
386
STRING
827
386
shift_expr
828
386
arith_expr
829
386
term
830
386
NUMBER
831
386
{
832
386
atom_expr
833
386
[
834
386
-
835
386
None
836
386
(
837
386
atom
838
386
and_expr
839
386
+
840
386
not_test
841
386
test
842
386
NAME
843
386
test_list
844
386
power
845
386
True
846
386
comparison
847
386
xor_expr
848
386
lambda
849
386
False
850
386
and_test
851
386
lambdef
852
386
expr
853
386
not
854
386
or_test
855
386
yield
856
386
yield_expr
857
387
~
858
387
factor
859
387
STRING
860
387
shift_expr
861
387
term
862
387
NUMBER
863
387
{
864
387
atom_expr
865
387
[
866
387
-
867
387
None
868
387
(
869
387
arith_expr
870
387
atom
871
387
and_expr
872
387
+
873
387
not_test
874
387
NAME
875
387
power
876
387
True
877
387
comparison
878
387
xor_expr
879
387
False
880
387
and_test
881
387
lambda
882
387
expr
883
387
not
884
387
test
885
387
or_test
886
387
lambdef
887
388
~
340
388
factor
341
388
STRING
342
388
shift_expr
343
388
arith_expr
344
388
term
345
388
NUMBER
346
388
{
348
388
atom_expr
349
388
[
350
388
-
351
388
None
352
388
(
353
388
atom
354
388
+
355
388
and_expr
356
388
NAME
357
388
power
358
388
True
359
388
comparison
360
388
lambda
361
388
xor_expr
362
388
False
363
388
not_test
364
388
lambdef
365
388
test
366
388
or_test
367
388
and_test
368
388
not
369
388
expr
370
388
yield
888
388
yield_or_testlist
889
388
test_list
890
388
yield_expr
891
389
def
decorators -> decorator decorators
389
class
decorators -> decorator decorators
390
NEWLINE
del_stmt -> del expr_list
391
NEWLINE
return_stmt -> return test_list
392
,
892
392
NEWLINE
namelist -> NAME
393
NEWLINE
nonlocal_stmt -> nonlocal namelist
394
NEWLINE
global_stmt -> global namelist
395
$
program -> stmt program
396
$
program -> NEWLINE program
397
~
397
397
STRING
399
397
NUMBER
402
397
{
403
397
[
405
397
atom_expr
404
397
None
407
397
-
406
397
factor
893
397
(
408
397
atom
410
397
+
411
397
NAME
413
397
power
414
397
True
415
397
False
419
398
/
894
398
@
895
398
if
term -> factor
398
%
896
398
<<
term -> factor
398
-
term -> factor
398
//
897
398
*
898
398
>=
term -> factor
398
or
term -> factor
398
<=
term -> factor
398
>
term -> factor
398
in
term -> factor
398
<
term -> factor
398
NEWLINE
term -> factor
398
>>
term -> factor
398
==
term -> factor
398
is
term -> factor
398
+
term -> factor
398
|
term -> factor
398
!=
term -> factor
398
&
term -> factor
398
not
term -> factor
398
and
term -> factor
398
^
term -> factor
399
==
atom -> STRING
399
>
atom -> STRING
399
<=
atom -> STRING
399
&
atom -> STRING
399
.
atom -> STRING
399
>=
atom -> STRING
399
@
atom -> STRING
399
[
atom -> STRING
399
^
atom -> STRING
399
NEWLINE
atom -> STRING
399
%
atom -> STRING
399
**
atom -> STRING
399
-
atom -> STRING
399
//
atom -> STRING
399
>>
atom -> STRING
399
<
atom -> STRING
399
|
atom -> STRING
399
(
atom -> STRING
399
is
atom -> STRING
399
and
atom -> STRING
399
*
atom -> STRING
399
or
atom -> STRING
399
not
atom -> STRING
399
<<
atom -> STRING
399
/
atom -> STRING
399
+
atom -> STRING
399
!=
atom -> STRING
399
in
atom -> STRING
399
if
atom -> STRING
400
NEWLINE
and_expr -> shift_expr
400
&
899
400
in
and_expr -> shift_expr
400
not
and_expr -> shift_expr
400
!=
and_expr -> shift_expr
400
>=
and_expr -> shift_expr
400
if
and_expr -> shift_expr
400
and
and_expr -> shift_expr
400
|
and_expr -> shift_expr
400
is
and_expr -> shift_expr
400
<=
and_expr -> shift_expr
400
>
and_expr -> shift_expr
400
^
and_expr -> shift_expr
400
or
and_expr -> shift_expr
400
<
and_expr -> shift_expr
400
==
and_expr -> shift_expr
401
+
900
401
if
arith_expr -> term
401
-
901
401
<=
arith_expr -> term
401
|
arith_expr -> term
401
not
arith_expr -> term
401
^
arith_expr -> term
401
<<
arith_expr -> term
401
&
arith_expr -> term
401
==
arith_expr -> term
401
is
arith_expr -> term
401
!=
arith_expr -> term
401
>
arith_expr -> term
401
and
arith_expr -> term
401
<
arith_expr -> term
401
or
arith_expr -> term
401
NEWLINE
arith_expr -> term
401
>=
arith_expr -> term
401
>>
arith_expr -> term
401
in
arith_expr -> term
402
<<
atom -> NUMBER
402
-
atom -> NUMBER
402
^
atom -> NUMBER
402
or
atom -> NUMBER
402
==
atom -> NUMBER
402
!=
atom -> NUMBER
402
/
atom -> NUMBER
402
and
atom -> NUMBER
402
%
atom -> NUMBER
402
>=
atom -> NUMBER
402
@
atom -> NUMBER
402
NEWLINE
atom -> NUMBER
402
|
atom -> NUMBER
402
[
atom -> NUMBER
402
//
atom -> NUMBER
402
.
atom -> NUMBER
402
not
atom -> NUMBER
402
<
atom -> NUMBER
402
>>
atom -> NUMBER
402
if
atom -> NUMBER
402
<=
atom -> NUMBER
402
>
atom -> NUMBER
402
&
atom -> NUMBER
402
is
atom -> NUMBER
402
**
atom -> NUMBER
402
in
atom -> NUMBER
402
+
atom -> NUMBER
402
(
atom -> NUMBER
402
*
atom -> NUMBER
403
}
902
404
**
903
404
or
power -> atom_expr
404
*
power -> atom_expr
404
>=
power -> atom_expr
404
^
power -> atom_expr
404
in
power -> atom_expr
404
!=
power -> atom_expr
404
if
power -> atom_expr
404
@
power -> atom_expr
404
-
power -> atom_expr
404
and
power -> atom_expr
404
not
power -> atom_expr
404
==
power -> atom_expr
404
<
power -> atom_expr
404
&
power -> atom_expr
404
|
power -> atom_expr
404
//
power -> atom_expr
404
>
power -> atom_expr
404
NEWLINE
power -> atom_expr
404
%
power -> atom_expr
404
/
power -> atom_expr
404
is
power -> atom_expr
404
<<
power -> atom_expr
404
>>
power -> atom_expr
404
+
power -> atom_expr
404
<=
power -> atom_expr
405
~
186
405
factor
187
405
STRING
188
405
shift_expr
189
405
test_list_comp
904
405
arith_expr
191
405
term
192
405
atom_expr
193
405
]
905
405
test
195
405
NUMBER
196
405
and_expr
197
405
{
198
405
[
199
405
-
200
405
None
201
405
(
202
405
atom
203
405
+
204
405
NAME
205
405
power
206
405
True
207
405
comparison
208
405
xor_expr
209
405
lambdef
210
405
False
211
405
not_test
212
405
or_test
213
405
and_test
214
405
lambda
215
405
not
216
405
expr
217
405
test_list
218
406
~
397
406
STRING
399
406
NUMBER
402
406
factor
906
406
{
403
406
[
405
406
atom_expr
404
406
None
407
406
-
406
406
(
408
406
atom
410
406
+
411
406
NAME
413
406
power
414
406
True
415
406
False
419
407
not
atom -> None
407
or
atom -> None
407
==
atom -> None
407
*
atom -> None
407
-
atom -> None
407
^
atom -> None
407
>>
atom -> None
407
if
atom -> None
407
<<
atom -> None
407
and
atom -> None
407
|
atom -> None
407
NEWLINE
atom -> None
407
&
atom -> None
407
!=
atom -> None
407
@
atom -> None
407
.
atom -> None
407
/
atom -> None
407
%
atom -> None
407
>
atom -> None
407
is
atom -> None
407
<
atom -> None
407
(
atom -> None
407
**
atom -> None
407
//
atom -> None
407
in
atom -> None
407
<=
atom -> None
407
>=
atom -> None
407
+
atom -> None
407
[
atom -> None
408
~
92
408
factor
93
408
STRING
94
408
shift_expr
95
408
arith_expr
96
408
term
97
408
NUMBER
98
408
and_expr
99
408
{
100
408
atom_expr
101
408
[
102
408
-
103
408
None
105
408
(
106
408
atom
107
408
+
109
408
)
907
408
NAME
110
408
test_list_comp
908
408
power
111
408
test_list
112
408
True
113
408
comparison
114
408
xor_expr
115
408
lambdef
116
408
False
117
408
not_test
118
408
or_test
119
408
test
120
408
lambda
121
408
and_test
122
408
not
123
408
expr
124
409
>>
909
409
^
shift_expr -> arith_expr
409
<<
910
409
or
shift_expr -> arith_expr
409
|
shift_expr -> arith_expr
409
<=
shift_expr -> arith_expr
409
is
shift_expr -> arith_expr
409
<
shift_expr -> arith_expr
409
if
shift_expr -> arith_expr
409
not
shift_expr -> arith_expr
409
in
shift_expr -> arith_expr
409
and
shift_expr -> arith_expr
409
>=
shift_expr -> arith_expr
409
==
shift_expr -> arith_expr
409
!=
shift_expr -> arith_expr
409
>
shift_expr -> arith_expr
409
NEWLINE
shift_expr -> arith_expr
409
&
shift_expr -> arith_expr
410
[
911
410
(
912
410
//
trailer_expr -> 
410
trailer
913
410
<<
trailer_expr -> 
410
trailer_expr
914
410
*
trailer_expr -> 
410
in
trailer_expr -> 
410
&
trailer_expr -> 
410
.
915
410
and
trailer_expr -> 
410
<=
trailer_expr -> 
410
|
trailer_expr -> 
410
or
trailer_expr -> 
410
>=
trailer_expr -> 
410
+
trailer_expr -> 
410
**
trailer_expr -> 
410
>>
trailer_expr -> 
410
!=
trailer_expr -> 
410
-
trailer_expr -> 
410
/
trailer_expr -> 
410
%
trailer_expr -> 
410
is
trailer_expr -> 
410
<
trailer_expr -> 
410
if
trailer_expr -> 
410
NEWLINE
trailer_expr -> 
410
>
trailer_expr -> 
410
^
trailer_expr -> 
410
==
trailer_expr -> 
410
@
trailer_expr -> 
410
not
trailer_expr -> 
411
~
397
411
STRING
399
411
NUMBER
402
411
{
403
411
factor
916
411
atom_expr
404
411
[
405
411
None
407
411
-
406
411
(
408
411
atom
410
411
+
411
411
NAME
413
411
power
414
411
True
415
411
False
419
412
not
xor_expr -> and_expr
412
if
xor_expr -> and_expr
412
|
xor_expr -> and_expr
412
>
xor_expr -> and_expr
412
^
917
412
<
xor_expr -> and_expr
412
NEWLINE
xor_expr -> and_expr
412
or
xor_expr -> and_expr
412
>=
xor_expr -> and_expr
412
in
xor_expr -> and_expr
412
and
xor_expr -> and_expr
412
is
xor_expr -> and_expr
412
==
xor_expr -> and_expr
412
!=
xor_expr -> and_expr
412
<=
xor_expr -> and_expr
413
<=
atom -> NAME
413
@
atom -> NAME
413
>>
atom -> NAME
413
==
atom -> NAME
413
>
atom -> NAME
413
*
atom -> NAME
413
-
atom -> NAME
413
&
atom -> NAME
413
is
atom -> NAME
413
.
atom -> NAME
413
or
atom -> NAME
413
in
atom -> NAME
413
NEWLINE
atom -> NAME
413
<<
atom -> NAME
413
+
atom -> NAME
413
if
atom -> NAME
413
|
atom -> NAME
413
and
atom -> NAME
413
^
atom -> NAME
413
/
atom -> NAME
413
[
atom -> NAME
413
not
atom -> NAME
413
!=
atom -> NAME
413
%
atom -> NAME
413
<
atom -> NAME
413
>=
atom -> NAME
413
**
atom -> NAME
413
(
atom -> NAME
413
//
atom -> NAME
414
if
factor -> power
414
is
factor -> power
414
%
factor -> power
414
==
factor -> power
414
>=
factor -> power
414
or
factor -> power
414
and
factor -> power
414
/
factor -> power
414
<
factor -> power
414
+
factor -> power
414
//
factor -> power
414
@
factor -> power
414
in
factor -> power
414
NEWLINE
factor -> power
414
<=
factor -> power
414
&
factor -> power
414
!=
factor -> power
414
<<
factor -> power
414
|
factor -> power
414
>
factor -> power
414
*
factor -> power
414
^
factor -> power
414
-
factor -> power
414
not
factor -> power
414
>>
factor -> power
415
>
atom -> True
415
|
atom -> True
415
-
atom -> True
415
NEWLINE
atom -> True
415
==
atom -> True
415
<<
atom -> True
415
if
atom -> True
415
%
atom -> True
415
/
atom -> True
415
[
atom -> True
415
*
atom -> True
415
<=
atom -> True
415
<
atom -> True
415
&
atom -> True
415
+
atom -> True
415
**
atom -> True
415
!=
atom -> True
415
>>
atom -> True
415
//
atom -> True
415
and
atom -> True
415
^
atom -> True
415
is
atom -> True
415
or
atom -> True
415
.
atom -> True
415
(
atom -> True
415
>=
atom -> True
415
@
atom -> True
415
not
atom -> True
415
in
atom -> True
416
if
not_test -> comparison
416
and
not_test -> comparison
416
NEWLINE
not_test -> comparison
416
or
not_test -> comparison
417
NAME
251
417
:
918
417
vfpdef
253
417
varargslist
919
418
not
expr -> xor_expr
418
or
expr -> xor_expr
418
==
expr -> xor_expr
418
in
expr -> xor_expr
418
|
920
418
if
expr -> xor_expr
418
NEWLINE
expr -> xor_expr
418
<=
expr -> xor_expr
418
is
expr -> xor_expr
418
<
expr -> xor_expr
418
>=
expr -> xor_expr
418
>
expr -> xor_expr
418
and
expr -> xor_expr
418
!=
expr -> xor_expr
419
<=
atom -> False
419
*
atom -> False
419
not
atom -> False
419
!=
atom -> False
419
@
atom -> False
419
and
atom -> False
419
if
atom -> False
419
<<
atom -> False
419
>
atom -> False
419
+
atom -> False
419
/
atom -> False
419
==
atom -> False
419
&
atom -> False
419
^
atom -> False
419
in
atom -> False
419
[
atom -> False
419
is
atom -> False
419
%
atom -> False
419
>=
atom -> False
419
//
atom -> False
419
(
atom -> False
419
NEWLINE
atom -> False
419
|
atom -> False
419
<
atom -> False
419
.
atom -> False
419
or
atom -> False
419
**
atom -> False
419
>>
atom -> False
419
-
atom -> False
420
or
and_test -> not_test
420
if
and_test -> not_test
420
and
921
420
NEWLINE
and_test -> not_test
421
NEWLINE
test -> lambdef
422
NEWLINE
sim_stmt -> begsim test
423
if
922
423
NEWLINE
test -> or_test
424
NEWLINE
or_test -> and_test
424
if
or_test -> and_test
424
or
923
425
~
397
425
factor
398
425
STRING
399
425
shift_expr
400
425
term
401
425
NUMBER
402
425
{
403
425
atom_expr
404
425
[
405
425
-
406
425
None
407
425
(
408
425
arith_expr
409
425
atom
410
425
+
411
425
and_expr
412
425
NAME
413
425
power
414
425
True
415
425
comparison
416
425
xor_expr
418
425
False
419
425
not_test
924
425
not
425
425
expr
426
426
!=
125
426
is
126
426
>=
127
426
in
128
426
<
129
426
==
131
426
<=
132
426
not
133
426
>
134
426
comp_op
925
426
NEWLINE
comparison -> expr
426
or
comparison -> expr
426
if
comparison -> expr
426
and
comparison -> expr
427
<=
term -> factor / term
427
!=
term -> factor / term
427
-=
term -> factor / term
427
and
term -> factor / term
427
or
term -> factor / term
427
**=
term -> factor / term
427
^=
term -> factor / term
427
|
term -> factor / term
427
^
term -> factor / term
427
@=
term -> factor / term
427
NEWLINE
term -> factor / term
427
>>
term -> factor / term
427
//=
term -> factor / term
427
==
term -> factor / term
427
>
term -> factor / term
427
if
term -> factor / term
427
:
term -> factor / term
427
+=
term -> factor / term
427
&
term -> factor / term
427
=
term -> factor / term
427
&=
term -> factor / term
427
/=
term -> factor / term
427
<<
term -> factor / term
427
+
term -> factor / term
427
-
term -> factor / term
427
not
term -> factor / term
427
in
term -> factor / term
427
|=
term -> factor / term
427
<
term -> factor / term
427
<<=
term -> factor / term
427
>=
term -> factor / term
427
is
term -> factor / term
427
>>=
term -> factor / term
427
*=
term -> factor / term
427
,
term -> factor / term
427
%=
term -> factor / term
428
+
term -> factor // term
428
==
term -> factor // term
428
<<
term -> factor // term
428
@=
term -> factor // term
428
<
term -> factor // term
428
if
term -> factor // term
428
in
term -> factor // term
428
:
term -> factor // term
428
%=
term -> factor // term
428
^=
term -> factor // term
428
<<=
term -> factor // term
428
!=
term -> factor // term
428
+=
term -> factor // term
428
>
term -> factor // term
428
-=
term -> factor // term
428
|=
term -> factor // term
428
**=
term -> factor // term
428
not
term -> factor // term
428
*=
term -> factor // term
428
>>=
term -> factor // term
428
=
term -> factor // term
428
>=
term -> factor // term
428
and
term -> factor // term
428
is
term -> factor // term
428
//=
term -> factor // term
428
or
term -> factor // term
428
-
term -> factor // term
428
&=
term -> factor // term
428
&
term -> factor // term
428
|
term -> factor // term
428
,
term -> factor // term
428
^
term -> factor // term
428
<=
term -> factor // term
428
/=
term -> factor // term
428
NEWLINE
term -> factor // term
428
>>
term -> factor // term
429
is
term -> factor @ term
429
and
term -> factor @ term
429
@=
term -> factor @ term
429
>
term -> factor @ term
429
not
term -> factor @ term
429
**=
term -> factor @ term
429
in
term -> factor @ term
429
*=
term -> factor @ term
429
==
term -> factor @ term
429
/=
term -> factor @ term
429
-=
term -> factor @ term
429
&=
term -> factor @ term
429
<
term -> factor @ term
429
<<=
term -> factor @ term
429
,
term -> factor @ term
429
or
term -> factor @ term
429
!=
term -> factor @ term
429
<<
term -> factor @ term
429
NEWLINE
term -> factor @ term
429
^=
term -> factor @ term
429
%=
term -> factor @ term
429
<=
term -> factor @ term
429
=
term -> factor @ term
429
//=
term -> factor @ term
429
if
term -> factor @ term
429
>>=
term -> factor @ term
429
|
term -> factor @ term
429
+
term -> factor @ term
429
+=
term -> factor @ term
429
-
term -> factor @ term
429
&
term -> factor @ term
429
>=
term -> factor @ term
429
:
term -> factor @ term
429
|=
term -> factor @ term
429
>>
term -> factor @ term
429
^
term -> factor @ term
430
NEWLINE
term -> factor % term
430
^=
term -> factor % term
430
&=
term -> factor % term
430
>
term -> factor % term
430
!=
term -> factor % term
430
&
term -> factor % term
430
>=
term -> factor % term
430
@=
term -> factor % term
430
or
term -> factor % term
430
=
term -> factor % term
430
==
term -> factor % term
430
>>=
term -> factor % term
430
^
term -> factor % term
430
in
term -> factor % term
430
<<=
term -> factor % term
430
,
term -> factor % term
430
|
term -> factor % term
430
and
term -> factor % term
430
/=
term -> factor % term
430
%=
term -> factor % term
430
**=
term -> factor % term
430
if
term -> factor % term
430
not
term -> factor % term
430
+=
term -> factor % term
430
*=
term -> factor % term
430
-=
term -> factor % term
430
//=
term -> factor % term
430
is
term -> factor % term
430
<
term -> factor % term
430
>>
term -> factor % term
430
-
term -> factor % term
430
<=
term -> factor % term
430
|=
term -> factor % term
430
<<
term -> factor % term
430
+
term -> factor % term
430
:
term -> factor % term
431
/=
term -> factor * term
431
//=
term -> factor * term
431
&
term -> factor * term
431
*=
term -> factor * term
431
@=
term -> factor * term
431
-
term -> factor * term
431
&=
term -> factor * term
431
:
term -> factor * term
431
in
term -> factor * term
431
or
term -> factor * term
431
<=
term -> factor * term
431
**=
term -> factor * term
431
,
term -> factor * term
431
|
term -> factor * term
431
and
term -> factor * term
431
<<
term -> factor * term
431
not
term -> factor * term
431
==
term -> factor * term
431
+=
term -> factor * term
431
if
term -> factor * term
431
>
term -> factor * term
431
>>
term -> factor * term
431
<
term -> factor * term
431
<<=
term -> factor * term
431
!=
term -> factor * term
431
|=
term -> factor * term
431
=
term -> factor * term
431
>>=
term -> factor * term
431
%=
term -> factor * term
431
NEWLINE
term -> factor * term
431
>=
term -> factor * term
431
^=
term -> factor * term
431
^
term -> factor * term
431
-=
term -> factor * term
431
+
term -> factor * term
431
is
term -> factor * term
432
,
factor -> ~ factor
432
<
factor -> ~ factor
432
in
factor -> ~ factor
432
==
factor -> ~ factor
432
|
factor -> ~ factor
432
)
factor -> ~ factor
432
<<
factor -> ~ factor
432
>
factor -> ~ factor
432
not
factor -> ~ factor
432
<=
factor -> ~ factor
432
//
factor -> ~ factor
432
>=
factor -> ~ factor
432
>>
factor -> ~ factor
432
-
factor -> ~ factor
432
*
factor -> ~ factor
432
/
factor -> ~ factor
432
if
factor -> ~ factor
432
^
factor -> ~ factor
432
and
factor -> ~ factor
432
is
factor -> ~ factor
432
for
factor -> ~ factor
432
+
factor -> ~ factor
432
or
factor -> ~ factor
432
&
factor -> ~ factor
432
!=
factor -> ~ factor
432
%
factor -> ~ factor
432
@
factor -> ~ factor
433
~
92
433
factor
93
433
STRING
94
433
term
926
433
NUMBER
98
433
{
100
433
[
102
433
atom_expr
101
433
-
103
433
None
105
433
(
106
433
atom
107
433
+
109
433
NAME
110
433
power
111
433
True
113
433
False
117
434
~
92
434
factor
93
434
STRING
94
434
NUMBER
98
434
{
100
434
[
102
434
atom_expr
101
434
-
103
434
None
105
434
(
106
434
atom
107
434
+
109
434
NAME
110
434
power
111
434
True
113
434
False
117
434
term
927
435
~
92
435
factor
93
435
STRING
94
435
NUMBER
98
435
{
100
435
term
928
435
[
102
435
atom_expr
101
435
-
103
435
None
105
435
(
106
435
atom
107
435
+
109
435
NAME
110
435
power
111
435
True
113
435
False
117
436
~
92
436
factor
93
436
STRING
94
436
NUMBER
98
436
{
100
436
[
102
436
atom_expr
101
436
-
103
436
None
105
436
(
106
436
atom
107
436
+
109
436
term
929
436
NAME
110
436
power
111
436
True
113
436
False
117
437
~
92
437
factor
93
437
STRING
94
437
NUMBER
98
437
{
100
437
[
102
437
atom_expr
101
437
-
103
437
None
105
437
(
106
437
term
930
437
atom
107
437
+
109
437
NAME
110
437
power
111
437
True
113
437
False
117
438
~
92
438
factor
93
438
STRING
94
438
shift_expr
95
438
arith_expr
96
438
term
97
438
NUMBER
98
438
{
100
438
atom_expr
101
438
[
102
438
-
103
438
None
105
438
(
106
438
atom
107
438
+
109
438
NAME
110
438
power
111
438
True
113
438
False
117
438
and_expr
931
439
~
92
439
factor
93
439
STRING
94
439
arith_expr
96
439
term
97
439
NUMBER
98
439
{
100
439
[
102
439
atom_expr
101
439
-
103
439
shift_expr
932
439
None
105
439
(
106
439
atom
107
439
+
109
439
NAME
110
439
power
111
439
True
113
439
False
117
440
~
92
440
factor
93
440
STRING
94
440
arith_expr
96
440
term
97
440
NUMBER
98
440
{
100
440
[
102
440
atom_expr
101
440
-
103
440
None
105
440
(
106
440
atom
107
440
+
109
440
shift_expr
933
440
NAME
110
440
power
111
440
True
113
440
False
117
441
~
92
441
factor
93
441
STRING
94
441
arith_expr
934
441
term
97
441
NUMBER
98
441
{
100
441
[
102
441
atom_expr
101
441
-
103
441
None
105
441
(
106
441
atom
107
441
+
109
441
NAME
110
441
power
111
441
True
113
441
False
117
442
~
92
442
factor
93
442
STRING
94
442
term
97
442
arith_expr
935
442
NUMBER
98
442
{
100
442
[
102
442
atom_expr
101
442
-
103
442
None
105
442
(
106
442
atom
107
442
+
109
442
NAME
110
442
power
111
442
True
113
442
False
117
443
~
92
443
factor
93
443
STRING
94
443
shift_expr
95
443
arith_expr
96
443
term
97
443
NUMBER
98
443
and_expr
99
443
{
100
443
atom_expr
101
443
[
102
443
xor_expr
936
443
-
103
443
None
105
443
(
106
443
atom
107
443
+
109
443
NAME
110
443
power
111
443
True
113
443
False
117
444
//
atom -> { }
444
)
atom -> { }
444
[
atom -> { }
444
|
atom -> { }
444
>
atom -> { }
444
>=
atom -> { }
444
==
atom -> { }
444
&
atom -> { }
444
not
atom -> { }
444
**
atom -> { }
444
in
atom -> { }
444
,
atom -> { }
444
or
atom -> { }
444
<
atom -> { }
444
!=
atom -> { }
444
+
atom -> { }
444
<<
atom -> { }
444
^
atom -> { }
444
<=
atom -> { }
444
if
atom -> { }
444
for
atom -> { }
444
/
atom -> { }
444
is
atom -> { }
444
-
atom -> { }
444
>>
atom -> { }
444
%
atom -> { }
444
.
atom -> { }
444
(
atom -> { }
444
and
atom -> { }
444
*
atom -> { }
444
@
atom -> { }
445
~
92
445
STRING
94
445
NUMBER
98
445
factor
937
445
{
100
445
[
102
445
atom_expr
101
445
None
105
445
-
103
445
(
106
445
atom
107
445
+
109
445
NAME
110
445
power
111
445
True
113
445
False
117
446
]
938
447
for
atom -> [ ]
447
==
atom -> [ ]
447
%
atom -> [ ]
447
**
atom -> [ ]
447
.
atom -> [ ]
447
<<
atom -> [ ]
447
not
atom -> [ ]
447
/
atom -> [ ]
447
*
atom -> [ ]
447
if
atom -> [ ]
447
!=
atom -> [ ]
447
<=
atom -> [ ]
447
@
atom -> [ ]
447
-
atom -> [ ]
447
>>
atom -> [ ]
447
^
atom -> [ ]
447
|
atom -> [ ]
447
,
atom -> [ ]
447
<
atom -> [ ]
447
[
atom -> [ ]
447
is
atom -> [ ]
447
in
atom -> [ ]
447
>
atom -> [ ]
447
+
atom -> [ ]
447
>=
atom -> [ ]
447
and
atom -> [ ]
447
or
atom -> [ ]
447
)
atom -> [ ]
447
&
atom -> [ ]
447
(
atom -> [ ]
447
//
atom -> [ ]
448
if
factor -> - factor
448
/
factor -> - factor
448
,
factor -> - factor
448
not
factor -> - factor
448
<
factor -> - factor
448
or
factor -> - factor
448
//
factor -> - factor
448
!=
factor -> - factor
448
%
factor -> - factor
448
|
factor -> - factor
448
for
factor -> - factor
448
>
factor -> - factor
448
+
factor -> - factor
448
-
factor -> - factor
448
^
factor -> - factor
448
in
factor -> - factor
448
<<
factor -> - factor
448
&
factor -> - factor
448
<=
factor -> - factor
448
==
factor -> - factor
448
and
factor -> - factor
448
@
factor -> - factor
448
>=
factor -> - factor
448
is
factor -> - factor
448
>>
factor -> - factor
448
*
factor -> - factor
448
)
factor -> - factor
449
-
atom -> ( )
449
==
atom -> ( )
449
/
atom -> ( )
449
<=
atom -> ( )
449
(
atom -> ( )
449
&
atom -> ( )
449
[
atom -> ( )
449
,
atom -> ( )
449
^
atom -> ( )
449
or
atom -> ( )
449
+
atom -> ( )
449
>>
atom -> ( )
449
)
atom -> ( )
449
is
atom -> ( )
449
*
atom -> ( )
449
if
atom -> ( )
449
and
atom -> ( )
449
>=
atom -> ( )
449
>
atom -> ( )
449
@
atom -> ( )
449
in
atom -> ( )
449
not
atom -> ( )
449
<
atom -> ( )
449
.
atom -> ( )
449
//
atom -> ( )
449
%
atom -> ( )
449
<<
atom -> ( )
449
for
atom -> ( )
449
|
atom -> ( )
449
**
atom -> ( )
449
!=
atom -> ( )
450
)
939
451
~
544
451
factor
545
451
STRING
546
451
shift_expr
547
451
expr
548
451
arith_expr
549
451
term
550
451
atom_expr
551
451
NUMBER
552
451
subscript
553
451
{
554
451
[
555
451
-
556
451
None
557
451
+
558
451
(
559
451
subscriptlist
940
451
atom
561
451
and_expr
562
451
NAME
563
451
power
564
451
True
565
451
comparison
566
451
xor_expr
567
451
lambda
568
451
False
569
451
not_test
570
451
and_test
571
451
test
572
451
or_test
573
451
not
574
451
:
maybe_test -> 
451
maybe_test
575
451
lambdef
576
452
arglist
941
452
)
942
452
~
579
452
factor
580
452
STRING
581
452
shift_expr
582
452
arith_expr
583
452
term
584
452
NUMBER
585
452
and_expr
586
452
{
587
452
atom_expr
589
452
[
590
452
-
591
452
None
592
452
(
593
452
atom
594
452
+
595
452
not_test
596
452
test
597
452
NAME
598
452
power
599
452
True
600
452
comparison
601
452
xor_expr
602
452
lambdef
603
452
False
604
452
argument
605
452
and_test
606
452
lambda
607
452
or_test
608
452
expr
609
452
not
610
452
**
611
452
*
612
453
NAME
943
454
[
451
454
(
452
454
.
453
454
//
trailer_expr -> 
454
trailer
454
454
<<
trailer_expr -> 
454
*
trailer_expr -> 
454
in
trailer_expr -> 
454
&
trailer_expr -> 
454
trailer_expr
944
454
and
trailer_expr -> 
454
<=
trailer_expr -> 
454
,
trailer_expr -> 
454
|
trailer_expr -> 
454
or
trailer_expr -> 
454
>=
trailer_expr -> 
454
for
trailer_expr -> 
454
+
trailer_expr -> 
454
**
trailer_expr -> 
454
>>
trailer_expr -> 
454
!=
trailer_expr -> 
454
-
trailer_expr -> 
454
/
trailer_expr -> 
454
%
trailer_expr -> 
454
is
trailer_expr -> 
454
<
trailer_expr -> 
454
>
trailer_expr -> 
454
if
trailer_expr -> 
454
^
trailer_expr -> 
454
==
trailer_expr -> 
454
@
trailer_expr -> 
454
)
trailer_expr -> 
454
not
trailer_expr -> 
455
for
atom_expr -> atom trailer_expr
455
<=
atom_expr -> atom trailer_expr
455
or
atom_expr -> atom trailer_expr
455
,
atom_expr -> atom trailer_expr
455
*
atom_expr -> atom trailer_expr
455
>=
atom_expr -> atom trailer_expr
455
**
atom_expr -> atom trailer_expr
455
&
atom_expr -> atom trailer_expr
455
%
atom_expr -> atom trailer_expr
455
if
atom_expr -> atom trailer_expr
455
+
atom_expr -> atom trailer_expr
455
//
atom_expr -> atom trailer_expr
455
is
atom_expr -> atom trailer_expr
455
!=
atom_expr -> atom trailer_expr
455
|
atom_expr -> atom trailer_expr
455
<
atom_expr -> atom trailer_expr
455
@
atom_expr -> atom trailer_expr
455
not
atom_expr -> atom trailer_expr
455
-
atom_expr -> atom trailer_expr
455
in
atom_expr -> atom trailer_expr
455
/
atom_expr -> atom trailer_expr
455
^
atom_expr -> atom trailer_expr
455
>
atom_expr -> atom trailer_expr
455
==
atom_expr -> atom trailer_expr
455
<<
atom_expr -> atom trailer_expr
455
>>
atom_expr -> atom trailer_expr
455
and
atom_expr -> atom trailer_expr
455
)
atom_expr -> atom trailer_expr
456
+=
atom -> ( test_list_comp )
456
@
atom -> ( test_list_comp )
456
>>
atom -> ( test_list_comp )
456
<<
atom -> ( test_list_comp )
456
<<=
atom -> ( test_list_comp )
456
:
atom -> ( test_list_comp )
456
==
atom -> ( test_list_comp )
456
is
atom -> ( test_list_comp )
456
or
atom -> ( test_list_comp )
456
<=
atom -> ( test_list_comp )
456
[
atom -> ( test_list_comp )
456
if
atom -> ( test_list_comp )
456
/=
atom -> ( test_list_comp )
456
^
atom -> ( test_list_comp )
456
@=
atom -> ( test_list_comp )
456
<
atom -> ( test_list_comp )
456
and
atom -> ( test_list_comp )
456
=
atom -> ( test_list_comp )
456
.
atom -> ( test_list_comp )
456
^=
atom -> ( test_list_comp )
456
+
atom -> ( test_list_comp )
456
&
atom -> ( test_list_comp )
456
!=
atom -> ( test_list_comp )
456
in
atom -> ( test_list_comp )
456
-=
atom -> ( test_list_comp )
456
**
atom -> ( test_list_comp )
456
not
atom -> ( test_list_comp )
456
//=
atom -> ( test_list_comp )
456
-
atom -> ( test_list_comp )
456
(
atom -> ( test_list_comp )
456
*
atom -> ( test_list_comp )
456
*=
atom -> ( test_list_comp )
456
|
atom -> ( test_list_comp )
456
&=
atom -> ( test_list_comp )
456
NEWLINE
atom -> ( test_list_comp )
456
//
atom -> ( test_list_comp )
456
>
atom -> ( test_list_comp )
456
**=
atom -> ( test_list_comp )
456
>=
atom -> ( test_list_comp )
456
,
atom -> ( test_list_comp )
456
%=
atom -> ( test_list_comp )
456
|=
atom -> ( test_list_comp )
456
>>=
atom -> ( test_list_comp )
456
%
atom -> ( test_list_comp )
456
/
atom -> ( test_list_comp )
457
<
factor -> + factor
457
,
factor -> + factor
457
for
factor -> + factor
457
in
factor -> + factor
457
|
factor -> + factor
457
==
factor -> + factor
457
>
factor -> + factor
457
-
factor -> + factor
457
and
factor -> + factor
457
*
factor -> + factor
457
if
factor -> + factor
457
%
factor -> + factor
457
@
factor -> + factor
457
is
factor -> + factor
457
//
factor -> + factor
457
&
factor -> + factor
457
)
factor -> + factor
457
^
factor -> + factor
457
>=
factor -> + factor
457
not
factor -> + factor
457
/
factor -> + factor
457
or
factor -> + factor
457
!=
factor -> + factor
457
<<
factor -> + factor
457
>>
factor -> + factor
457
<=
factor -> + factor
457
+
factor -> + factor
458
~
92
458
factor
93
458
STRING
94
458
shift_expr
95
458
arith_expr
96
458
term
97
458
expr
945
458
NUMBER
98
458
and_expr
99
458
{
100
458
atom_expr
101
458
[
102
458
-
103
458
None
105
458
(
106
458
atom
107
458
+
109
458
NAME
110
458
power
111
458
True
113
458
xor_expr
115
458
False
117
459
~
92
459
factor
93
459
STRING
94
459
shift_expr
95
459
arith_expr
96
459
term
97
459
NUMBER
98
459
and_expr
99
459
{
100
459
atom_expr
101
459
[
102
459
-
103
459
None
105
459
(
106
459
atom
107
459
+
109
459
NAME
110
459
power
111
459
True
113
459
and_test
946
459
comparison
114
459
xor_expr
115
459
False
117
459
not_test
118
459
not
123
459
expr
124
460
~
509
460
factor
510
460
STRING
511
460
shift_expr
512
460
term
513
460
NUMBER
514
460
{
515
460
atom_expr
516
460
[
517
460
-
518
460
None
519
460
(
520
460
atom
521
460
arith_expr
522
460
False
523
460
+
524
460
NAME
526
460
power
527
460
True
528
460
xor_expr
529
460
comparison
530
460
and_expr
531
460
not_test
532
460
or_test
947
460
not
533
460
expr
534
460
and_test
535
461
)
test_list_comp -> test comp_for
462
~
948
462
factor
949
462
STRING
950
462
shift_expr
951
462
arith_expr
952
462
term
953
462
NUMBER
954
462
{
955
462
atom_expr
956
462
[
957
462
-
958
462
None
959
462
(
960
462
atom
961
462
+
962
462
test_list
963
462
NAME
964
462
power
965
462
True
966
462
comparison
967
462
xor_expr
968
462
False
969
462
and_expr
970
462
not_test
971
462
lambdef
972
462
lambda
973
462
or_test
974
462
and_test
975
462
not
976
462
expr
977
462
test
978
463
~
223
463
factor
224
463
STRING
225
463
None
226
463
arith_expr
227
463
[
228
463
expr
229
463
NUMBER
230
463
{
231
463
(
232
463
and_expr
233
463
atom
234
463
-
235
463
atom_expr
237
463
+
238
463
False
239
463
True
240
463
power
241
463
expr_list
979
463
term
242
463
NAME
243
463
shift_expr
244
463
xor_expr
245
464
~
92
464
factor
93
464
STRING
94
464
shift_expr
95
464
arith_expr
96
464
term
97
464
NUMBER
98
464
and_expr
99
464
{
100
464
atom_expr
101
464
[
102
464
-
103
464
None
105
464
(
106
464
atom
107
464
+
109
464
NAME
110
464
power
111
464
True
113
464
comparison
114
464
xor_expr
115
464
lambdef
116
464
False
117
464
not_test
118
464
or_test
119
464
lambda
121
464
and_test
122
464
not
123
464
test
980
464
expr
124
465
:
981
466
or_test
982
466
factor
93
466
~
92
466
shift_expr
95
466
STRING
94
466
arith_expr
96
466
term
97
466
NUMBER
98
466
and_expr
99
466
{
100
466
atom_expr
101
466
[
102
466
-
103
466
None
105
466
(
106
466
atom
107
466
+
109
466
NAME
110
466
power
111
466
True
113
466
comparison
114
466
xor_expr
115
466
False
117
466
not_test
118
466
and_test
122
466
not
123
466
expr
124
467
)
not_test -> not not_test
467
,
not_test -> not not_test
467
if
not_test -> not not_test
467
and
not_test -> not not_test
467
or
not_test -> not not_test
467
for
not_test -> not not_test
468
~
92
468
factor
93
468
STRING
94
468
shift_expr
95
468
arith_expr
96
468
term
97
468
NUMBER
98
468
and_expr
99
468
{
100
468
atom_expr
101
468
[
102
468
-
103
468
None
105
468
(
106
468
atom
107
468
+
109
468
NAME
110
468
power
111
468
True
113
468
xor_expr
115
468
False
117
468
comparison
983
468
expr
124
469
NUMBER
comp_op -> is not
469
None
comp_op -> is not
469
(
comp_op -> is not
469
[
comp_op -> is not
469
{
comp_op -> is not
469
~
comp_op -> is not
469
-
comp_op -> is not
469
STRING
comp_op -> is not
469
NAME
comp_op -> is not
469
+
comp_op -> is not
469
False
comp_op -> is not
469
True
comp_op -> is not
470
-=
comparison -> expr comp_op comparison
470
*=
comparison -> expr comp_op comparison
470
,
comparison -> expr comp_op comparison
470
:
comparison -> expr comp_op comparison
470
&=
comparison -> expr comp_op comparison
470
and
comparison -> expr comp_op comparison
470
<<=
comparison -> expr comp_op comparison
470
//=
comparison -> expr comp_op comparison
470
=
comparison -> expr comp_op comparison
470
**=
comparison -> expr comp_op comparison
470
/=
comparison -> expr comp_op comparison
470
%=
comparison -> expr comp_op comparison
470
|=
comparison -> expr comp_op comparison
470
^=
comparison -> expr comp_op comparison
470
or
comparison -> expr comp_op comparison
470
>>=
comparison -> expr comp_op comparison
470
NEWLINE
comparison -> expr comp_op comparison
470
@=
comparison -> expr comp_op comparison
470
if
comparison -> expr comp_op comparison
470
+=
comparison -> expr comp_op comparison
471
STRING
comp_op -> not in
471
{
comp_op -> not in
471
True
comp_op -> not in
471
[
comp_op -> not in
471
~
comp_op -> not in
471
(
comp_op -> not in
471
-
comp_op -> not in
471
None
comp_op -> not in
471
NUMBER
comp_op -> not in
471
NAME
comp_op -> not in
471
False
comp_op -> not in
471
+
comp_op -> not in
472
:
arith_expr -> term + arith_expr
472
>>
arith_expr -> term + arith_expr
472
^
arith_expr -> term + arith_expr
472
NEWLINE
arith_expr -> term + arith_expr
472
|=
arith_expr -> term + arith_expr
472
<
arith_expr -> term + arith_expr
472
|
arith_expr -> term + arith_expr
472
and
arith_expr -> term + arith_expr
472
-=
arith_expr -> term + arith_expr
472
&=
arith_expr -> term + arith_expr
472
=
arith_expr -> term + arith_expr
472
*=
arith_expr -> term + arith_expr
472
!=
arith_expr -> term + arith_expr
472
or
arith_expr -> term + arith_expr
472
//=
arith_expr -> term + arith_expr
472
not
arith_expr -> term + arith_expr
472
>>=
arith_expr -> term + arith_expr
472
<<=
arith_expr -> term + arith_expr
472
<=
arith_expr -> term + arith_expr
472
>
arith_expr -> term + arith_expr
472
,
arith_expr -> term + arith_expr
472
if
arith_expr -> term + arith_expr
472
is
arith_expr -> term + arith_expr
472
==
arith_expr -> term + arith_expr
472
^=
arith_expr -> term + arith_expr
472
@=
arith_expr -> term + arith_expr
472
&
arith_expr -> term + arith_expr
472
/=
arith_expr -> term + arith_expr
472
+=
arith_expr -> term + arith_expr
472
>=
arith_expr -> term + arith_expr
472
%=
arith_expr -> term + arith_expr
472
in
arith_expr -> term + arith_expr
472
**=
arith_expr -> term + arith_expr
472
<<
arith_expr -> term + arith_expr
473
//=
arith_expr -> term - arith_expr
473
%=
arith_expr -> term - arith_expr
473
**=
arith_expr -> term - arith_expr
473
==
arith_expr -> term - arith_expr
473
|=
arith_expr -> term - arith_expr
473
<<=
arith_expr -> term - arith_expr
473
is
arith_expr -> term - arith_expr
473
NEWLINE
arith_expr -> term - arith_expr
473
<=
arith_expr -> term - arith_expr
473
not
arith_expr -> term - arith_expr
473
<<
arith_expr -> term - arith_expr
473
@=
arith_expr -> term - arith_expr
473
=
arith_expr -> term - arith_expr
473
&
arith_expr -> term - arith_expr
473
|
arith_expr -> term - arith_expr
473
and
arith_expr -> term - arith_expr
473
&=
arith_expr -> term - arith_expr
473
or
arith_expr -> term - arith_expr
473
,
arith_expr -> term - arith_expr
473
/=
arith_expr -> term - arith_expr
473
^=
arith_expr -> term - arith_expr
473
:
arith_expr -> term - arith_expr
473
>>
arith_expr -> term - arith_expr
473
if
arith_expr -> term - arith_expr
473
>=
arith_expr -> term - arith_expr
473
<
arith_expr -> term - arith_expr
473
^
arith_expr -> term - arith_expr
473
>
arith_expr -> term - arith_expr
473
!=
arith_expr -> term - arith_expr
473
+=
arith_expr -> term - arith_expr
473
>>=
arith_expr -> term - arith_expr
473
*=
arith_expr -> term - arith_expr
473
-=
arith_expr -> term - arith_expr
473
in
arith_expr -> term - arith_expr
474
NEWLINE
984
475
<
factor -> ~ factor
475
in
factor -> ~ factor
475
==
factor -> ~ factor
475
|
factor -> ~ factor
475
<<
factor -> ~ factor
475
>
factor -> ~ factor
475
not
factor -> ~ factor
475
<=
factor -> ~ factor
475
//
factor -> ~ factor
475
>=
factor -> ~ factor
475
>>
factor -> ~ factor
475
-
factor -> ~ factor
475
*
factor -> ~ factor
475
/
factor -> ~ factor
475
if
factor -> ~ factor
475
:
factor -> ~ factor
475
^
factor -> ~ factor
475
and
factor -> ~ factor
475
is
factor -> ~ factor
475
+
factor -> ~ factor
475
or
factor -> ~ factor
475
&
factor -> ~ factor
475
!=
factor -> ~ factor
475
%
factor -> ~ factor
475
@
factor -> ~ factor
476
~
139
476
factor
140
476
STRING
143
476
term
985
476
NUMBER
146
476
{
147
476
[
149
476
atom_expr
148
476
-
150
476
None
151
476
+
152
476
(
153
476
atom
155
476
NAME
157
476
power
158
476
True
159
476
False
163
477
~
139
477
factor
140
477
STRING
143
477
NUMBER
146
477
{
147
477
[
149
477
atom_expr
148
477
-
150
477
None
151
477
+
152
477
(
153
477
atom
155
477
NAME
157
477
power
158
477
True
159
477
False
163
477
term
986
478
~
139
478
factor
140
478
STRING
143
478
NUMBER
146
478
{
147
478
term
987
478
[
149
478
atom_expr
148
478
-
150
478
None
151
478
+
152
478
(
153
478
atom
155
478
NAME
157
478
power
158
478
True
159
478
False
163
479
~
139
479
factor
140
479
STRING
143
479
NUMBER
146
479
{
147
479
[
149
479
atom_expr
148
479
-
150
479
None
151
479
+
152
479
(
153
479
term
988
479
atom
155
479
NAME
157
479
power
158
479
True
159
479
False
163
480
~
139
480
factor
140
480
STRING
143
480
NUMBER
146
480
{
147
480
[
149
480
atom_expr
148
480
-
150
480
None
151
480
+
152
480
(
153
480
atom
155
480
term
989
480
NAME
157
480
power
158
480
True
159
480
False
163
481
expr
5
481
factor
1
481
(
3
481
STRING
4
481
term
6
481
not
8
481
or_test
10
481
~
12
481
atom_expr
13
481
comparison
14
481
shift_expr
29
481
None
15
481
power
43
481
+
19
481
small_stmt
990
481
xor_expr
17
481
arith_expr
18
481
[
32
481
simple_stmt
991
481
atom
22
481
suite
992
481
NUMBER
26
481
and_test
39
481
NAME
27
481
-
36
481
False
28
481
lambda
46
481
test
47
481
NEWLINE
993
481
not_test
34
481
{
35
481
and_expr
33
481
lambdef
45
481
True
48
481
endsim
75
481
flow_stmt
53
481
pass
76
481
break
54
481
raise
55
481
yield
56
481
assert
57
481
global_stmt
77
481
continue_stmt
58
481
del_stmt
78
481
stat_stmt
59
481
global
79
481
return_stmt
60
481
test_list
61
481
continue
62
481
yield_stmt
63
481
return
68
481
sim_stmt
65
481
resetstats
66
481
break_stmt
82
481
del
67
481
raise_stmt
69
481
nonlocal
70
481
pass_stmt
71
481
begsim
83
481
expr_stmt
72
481
nonlocal_stmt
84
481
assert_stmt
74
482
~
139
482
factor
140
482
STRING
143
482
shift_expr
142
482
term
145
482
NUMBER
146
482
{
147
482
atom_expr
148
482
[
149
482
-
150
482
None
151
482
+
152
482
(
153
482
arith_expr
154
482
atom
155
482
NAME
157
482
power
158
482
True
159
482
False
163
482
and_expr
994
483
~
139
483
factor
140
483
STRING
143
483
shift_expr
142
483
expr
144
483
term
145
483
NUMBER
146
483
{
147
483
atom_expr
148
483
[
149
483
-
150
483
None
151
483
+
152
483
(
153
483
arith_expr
154
483
atom
155
483
and_expr
156
483
NAME
157
483
power
158
483
True
159
483
xor_expr
161
483
False
163
483
comparison
995
484
~
139
484
factor
140
484
STRING
143
484
arith_expr
996
484
term
145
484
NUMBER
146
484
{
147
484
[
149
484
atom_expr
148
484
-
150
484
None
151
484
+
152
484
(
153
484
atom
155
484
NAME
157
484
power
158
484
True
159
484
False
163
485
~
139
485
factor
140
485
STRING
143
485
term
145
485
arith_expr
997
485
NUMBER
146
485
{
147
485
[
149
485
atom_expr
148
485
-
150
485
None
151
485
+
152
485
(
153
485
atom
155
485
NAME
157
485
power
158
485
True
159
485
False
163
486
//
atom -> { }
486
[
atom -> { }
486
|
atom -> { }
486
>
atom -> { }
486
>=
atom -> { }
486
==
atom -> { }
486
&
atom -> { }
486
not
atom -> { }
486
**
atom -> { }
486
in
atom -> { }
486
or
atom -> { }
486
:
atom -> { }
486
<
atom -> { }
486
!=
atom -> { }
486
+
atom -> { }
486
<<
atom -> { }
486
^
atom -> { }
486
<=
atom -> { }
486
if
atom -> { }
486
/
atom -> { }
486
is
atom -> { }
486
-
atom -> { }
486
>>
atom -> { }
486
%
atom -> { }
486
.
atom -> { }
486
(
atom -> { }
486
and
atom -> { }
486
*
atom -> { }
486
@
atom -> { }
487
~
139
487
STRING
143
487
NUMBER
146
487
factor
998
487
{
147
487
[
149
487
atom_expr
148
487
None
151
487
-
150
487
+
152
487
(
153
487
atom
155
487
NAME
157
487
power
158
487
True
159
487
False
163
488
]
999
489
==
atom -> [ ]
489
%
atom -> [ ]
489
**
atom -> [ ]
489
.
atom -> [ ]
489
<<
atom -> [ ]
489
not
atom -> [ ]
489
/
atom -> [ ]
489
*
atom -> [ ]
489
if
atom -> [ ]
489
!=
atom -> [ ]
489
<=
atom -> [ ]
489
@
atom -> [ ]
489
-
atom -> [ ]
489
>>
atom -> [ ]
489
^
atom -> [ ]
489
|
atom -> [ ]
489
:
atom -> [ ]
489
<
atom -> [ ]
489
[
atom -> [ ]
489
is
atom -> [ ]
489
in
atom -> [ ]
489
>
atom -> [ ]
489
+
atom -> [ ]
489
>=
atom -> [ ]
489
and
atom -> [ ]
489
or
atom -> [ ]
489
&
atom -> [ ]
489
(
atom -> [ ]
489
//
atom -> [ ]
490
if
factor -> - factor
490
/
factor -> - factor
490
not
factor -> - factor
490
<
factor -> - factor
490
or
factor -> - factor
490
//
factor -> - factor
490
!=
factor -> - factor
490
%
factor -> - factor
490
|
factor -> - factor
490
>
factor -> - factor
490
+
factor -> - factor
490
:
factor -> - factor
490
-
factor -> - factor
490
^
factor -> - factor
490
in
factor -> - factor
490
<<
factor -> - factor
490
&
factor -> - factor
490
<=
factor -> - factor
490
==
factor -> - factor
490
and
factor -> - factor
490
@
factor -> - factor
490
>=
factor -> - factor
490
is
factor -> - factor
490
>>
factor -> - factor
490
*
factor -> - factor
491
<
factor -> + factor
491
in
factor -> + factor
491
|
factor -> + factor
491
==
factor -> + factor
491
>
factor -> + factor
491
-
factor -> + factor
491
and
factor -> + factor
491
*
factor -> + factor
491
if
factor -> + factor
491
%
factor -> + factor
491
@
factor -> + factor
491
is
factor -> + factor
491
//
factor -> + factor
491
&
factor -> + factor
491
^
factor -> + factor
491
>=
factor -> + factor
491
not
factor -> + factor
491
/
factor -> + factor
491
:
factor -> + factor
491
or
factor -> + factor
491
!=
factor -> + factor
491
<<
factor -> + factor
491
>>
factor -> + factor
491
<=
factor -> + factor
491
+
factor -> + factor
492
-
atom -> ( )
492
==
atom -> ( )
492
/
atom -> ( )
492
<=
atom -> ( )
492
(
atom -> ( )
492
&
atom -> ( )
492
[
atom -> ( )
492
^
atom -> ( )
492
or
atom -> ( )
492
+
atom -> ( )
492
>>
atom -> ( )
492
is
atom -> ( )
492
*
atom -> ( )
492
if
atom -> ( )
492
and
atom -> ( )
492
>=
atom -> ( )
492
>
atom -> ( )
492
@
atom -> ( )
492
:
atom -> ( )
492
in
atom -> ( )
492
not
atom -> ( )
492
<
atom -> ( )
492
.
atom -> ( )
492
//
atom -> ( )
492
%
atom -> ( )
492
<<
atom -> ( )
492
|
atom -> ( )
492
**
atom -> ( )
492
!=
atom -> ( )
493
)
1000
494
~
139
494
factor
140
494
STRING
143
494
term
145
494
NUMBER
146
494
{
147
494
[
149
494
atom_expr
148
494
-
150
494
shift_expr
1001
494
None
151
494
+
152
494
(
153
494
arith_expr
154
494
atom
155
494
NAME
157
494
power
158
494
True
159
494
False
163
495
~
139
495
factor
140
495
STRING
143
495
term
145
495
NUMBER
146
495
{
147
495
[
149
495
atom_expr
148
495
-
150
495
None
151
495
+
152
495
(
153
495
arith_expr
154
495
atom
155
495
shift_expr
1002
495
NAME
157
495
power
158
495
True
159
495
False
163
496
~
544
496
factor
545
496
STRING
546
496
shift_expr
547
496
expr
548
496
arith_expr
549
496
term
550
496
atom_expr
551
496
NUMBER
552
496
subscript
553
496
{
554
496
[
555
496
-
556
496
None
557
496
+
558
496
(
559
496
subscriptlist
1003
496
atom
561
496
and_expr
562
496
NAME
563
496
power
564
496
True
565
496
comparison
566
496
xor_expr
567
496
lambda
568
496
False
569
496
not_test
570
496
and_test
571
496
test
572
496
or_test
573
496
not
574
496
:
maybe_test -> 
496
maybe_test
575
496
lambdef
576
497
)
1004
497
~
579
497
factor
580
497
STRING
581
497
shift_expr
582
497
arith_expr
583
497
term
584
497
NUMBER
585
497
and_expr
586
497
{
587
497
atom_expr
589
497
[
590
497
-
591
497
None
592
497
(
593
497
atom
594
497
+
595
497
not_test
596
497
arglist
1005
497
test
597
497
NAME
598
497
power
599
497
True
600
497
comparison
601
497
xor_expr
602
497
lambdef
603
497
False
604
497
argument
605
497
and_test
606
497
lambda
607
497
or_test
608
497
expr
609
497
not
610
497
**
611
497
*
612
498
[
496
498
(
497
498
//
trailer_expr -> 
498
trailer
498
498
<<
trailer_expr -> 
498
*
trailer_expr -> 
498
in
trailer_expr -> 
498
&
trailer_expr -> 
498
trailer_expr
1006
498
and
trailer_expr -> 
498
.
500
498
<=
trailer_expr -> 
498
|
trailer_expr -> 
498
or
trailer_expr -> 
498
>=
trailer_expr -> 
498
:
trailer_expr -> 
498
+
trailer_expr -> 
498
**
trailer_expr -> 
498
>>
trailer_expr -> 
498
!=
trailer_expr -> 
498
-
trailer_expr -> 
498
/
trailer_expr -> 
498
%
trailer_expr -> 
498
is
trailer_expr -> 
498
<
trailer_expr -> 
498
>
trailer_expr -> 
498
if
trailer_expr -> 
498
^
trailer_expr -> 
498
==
trailer_expr -> 
498
@
trailer_expr -> 
498
not
trailer_expr -> 
499
<=
atom_expr -> atom trailer_expr
499
or
atom_expr -> atom trailer_expr
499
*
atom_expr -> atom trailer_expr
499
>=
atom_expr -> atom trailer_expr
499
**
atom_expr -> atom trailer_expr
499
&
atom_expr -> atom trailer_expr
499
%
atom_expr -> atom trailer_expr
499
if
atom_expr -> atom trailer_expr
499
+
atom_expr -> atom trailer_expr
499
:
atom_expr -> atom trailer_expr
499
is
atom_expr -> atom trailer_expr
499
//
atom_expr -> atom trailer_expr
499
!=
atom_expr -> atom trailer_expr
499
|
atom_expr -> atom trailer_expr
499
<
atom_expr -> atom trailer_expr
499
@
atom_expr -> atom trailer_expr
499
not
atom_expr -> atom trailer_expr
499
-
atom_expr -> atom trailer_expr
499
in
atom_expr -> atom trailer_expr
499
/
atom_expr -> atom trailer_expr
499
^
atom_expr -> atom trailer_expr
499
>
atom_expr -> atom trailer_expr
499
==
atom_expr -> atom trailer_expr
499
<<
atom_expr -> atom trailer_expr
499
>>
atom_expr -> atom trailer_expr
499
and
atom_expr -> atom trailer_expr
500
NAME
1007
501
~
139
501
factor
140
501
STRING
143
501
shift_expr
142
501
term
145
501
NUMBER
146
501
{
147
501
atom_expr
148
501
[
149
501
xor_expr
1008
501
-
150
501
None
151
501
+
152
501
(
153
501
arith_expr
154
501
atom
155
501
and_expr
156
501
NAME
157
501
power
158
501
True
159
501
False
163
502
~
139
502
factor
140
502
STRING
143
502
shift_expr
142
502
term
145
502
NUMBER
146
502
{
147
502
atom_expr
148
502
[
149
502
-
150
502
None
151
502
+
152
502
(
153
502
arith_expr
154
502
atom
155
502
and_expr
156
502
NAME
157
502
power
158
502
True
159
502
xor_expr
161
502
False
163
502
expr
1009
503
~
139
503
factor
140
503
STRING
143
503
shift_expr
142
503
expr
144
503
term
145
503
NUMBER
146
503
{
147
503
atom_expr
148
503
[
149
503
-
150
503
None
151
503
+
152
503
(
153
503
arith_expr
154
503
atom
155
503
and_expr
156
503
NAME
157
503
power
158
503
True
159
503
comparison
160
503
xor_expr
161
503
lambda
162
503
False
163
503
not_test
164
503
test
1010
503
and_test
165
503
not
166
503
or_test
167
503
lambdef
168
504
:
1011
505
~
139
505
factor
140
505
STRING
143
505
shift_expr
142
505
expr
144
505
term
145
505
NUMBER
146
505
{
147
505
atom_expr
148
505
[
149
505
-
150
505
None
151
505
+
152
505
(
153
505
arith_expr
154
505
atom
155
505
and_expr
156
505
NAME
157
505
power
158
505
True
159
505
and_test
1012
505
comparison
160
505
xor_expr
161
505
False
163
505
not_test
164
505
not
166
506
or_test
1013
506
factor
140
506
~
139
506
shift_expr
142
506
STRING
143
506
expr
144
506
term
145
506
NUMBER
146
506
{
147
506
atom_expr
148
506
[
149
506
-
150
506
None
151
506
+
152
506
(
153
506
arith_expr
154
506
atom
155
506
and_expr
156
506
NAME
157
506
power
158
506
True
159
506
comparison
160
506
xor_expr
161
506
False
163
506
not_test
164
506
and_test
165
506
not
166
507
and
not_test -> not not_test
507
if
not_test -> not not_test
507
or
not_test -> not not_test
507
:
not_test -> not not_test
508
~
509
508
factor
510
508
STRING
511
508
shift_expr
512
508
term
513
508
NUMBER
514
508
{
515
508
atom_expr
516
508
[
517
508
-
518
508
None
519
508
(
520
508
atom
521
508
arith_expr
522
508
False
523
508
+
524
508
or_test
1014
508
NAME
526
508
power
527
508
True
528
508
xor_expr
529
508
comparison
530
508
and_expr
531
508
not_test
532
508
not
533
508
expr
534
508
and_test
535
509
~
509
509
STRING
511
509
None
519
509
[
517
509
NUMBER
514
509
False
523
509
{
515
509
(
520
509
atom_expr
516
509
-
518
509
atom
521
509
factor
1015
509
+
524
509
NAME
526
509
power
527
509
True
528
510
/
1016
510
@
1017
510
%
1018
510
<<
term -> factor
510
-
term -> factor
510
//
1019
510
*
1020
510
>=
term -> factor
510
else
term -> factor
510
or
term -> factor
510
<=
term -> factor
510
>
term -> factor
510
in
term -> factor
510
<
term -> factor
510
>>
term -> factor
510
==
term -> factor
510
is
term -> factor
510
+
term -> factor
510
|
term -> factor
510
!=
term -> factor
510
&
term -> factor
510
not
term -> factor
510
and
term -> factor
510
^
term -> factor
511
==
atom -> STRING
511
>
atom -> STRING
511
<=
atom -> STRING
511
else
atom -> STRING
511
&
atom -> STRING
511
.
atom -> STRING
511
>=
atom -> STRING
511
@
atom -> STRING
511
[
atom -> STRING
511
^
atom -> STRING
511
%
atom -> STRING
511
**
atom -> STRING
511
-
atom -> STRING
511
//
atom -> STRING
511
>>
atom -> STRING
511
<
atom -> STRING
511
|
atom -> STRING
511
(
atom -> STRING
511
is
atom -> STRING
511
and
atom -> STRING
511
*
atom -> STRING
511
or
atom -> STRING
511
not
atom -> STRING
511
<<
atom -> STRING
511
/
atom -> STRING
511
+
atom -> STRING
511
!=
atom -> STRING
511
in
atom -> STRING
512
&
1021
512
in
and_expr -> shift_expr
512
not
and_expr -> shift_expr
512
else
and_expr -> shift_expr
512
!=
and_expr -> shift_expr
512
>=
and_expr -> shift_expr
512
and
and_expr -> shift_expr
512
|
and_expr -> shift_expr
512
is
and_expr -> shift_expr
512
<=
and_expr -> shift_expr
512
>
and_expr -> shift_expr
512
^
and_expr -> shift_expr
512
or
and_expr -> shift_expr
512
<
and_expr -> shift_expr
512
==
and_expr -> shift_expr
513
+
1022
513
-
1023
513
else
arith_expr -> term
513
<=
arith_expr -> term
513
|
arith_expr -> term
513
not
arith_expr -> term
513
^
arith_expr -> term
513
<<
arith_expr -> term
513
&
arith_expr -> term
513
==
arith_expr -> term
513
is
arith_expr -> term
513
!=
arith_expr -> term
513
>
arith_expr -> term
513
and
arith_expr -> term
513
<
arith_expr -> term
513
or
arith_expr -> term
513
>=
arith_expr -> term
513
>>
arith_expr -> term
513
in
arith_expr -> term
514
<<
atom -> NUMBER
514
-
atom -> NUMBER
514
^
atom -> NUMBER
514
or
atom -> NUMBER
514
else
atom -> NUMBER
514
==
atom -> NUMBER
514
!=
atom -> NUMBER
514
/
atom -> NUMBER
514
and
atom -> NUMBER
514
%
atom -> NUMBER
514
>=
atom -> NUMBER
514
@
atom -> NUMBER
514
|
atom -> NUMBER
514
[
atom -> NUMBER
514
//
atom -> NUMBER
514
.
atom -> NUMBER
514
not
atom -> NUMBER
514
<
atom -> NUMBER
514
>>
atom -> NUMBER
514
<=
atom -> NUMBER
514
>
atom -> NUMBER
514
&
atom -> NUMBER
514
is
atom -> NUMBER
514
**
atom -> NUMBER
514
in
atom -> NUMBER
514
+
atom -> NUMBER
514
(
atom -> NUMBER
514
*
atom -> NUMBER
515
}
1024
516
**
1025
516
or
power -> atom_expr
516
*
power -> atom_expr
516
>=
power -> atom_expr
516
^
power -> atom_expr
516
in
power -> atom_expr
516
!=
power -> atom_expr
516
@
power -> atom_expr
516
-
power -> atom_expr
516
else
power -> atom_expr
516
not
power -> atom_expr
516
and
power -> atom_expr
516
==
power -> atom_expr
516
<
power -> atom_expr
516
&
power -> atom_expr
516
|
power -> atom_expr
516
//
power -> atom_expr
516
>
power -> atom_expr
516
%
power -> atom_expr
516
/
power -> atom_expr
516
is
power -> atom_expr
516
<<
power -> atom_expr
516
>>
power -> atom_expr
516
+
power -> atom_expr
516
<=
power -> atom_expr
517
~
186
517
factor
187
517
STRING
188
517
shift_expr
189
517
test_list_comp
1026
517
arith_expr
191
517
term
192
517
atom_expr
193
517
]
1027
517
test
195
517
NUMBER
196
517
and_expr
197
517
{
198
517
[
199
517
-
200
517
None
201
517
(
202
517
atom
203
517
+
204
517
NAME
205
517
power
206
517
True
207
517
comparison
208
517
xor_expr
209
517
lambdef
210
517
False
211
517
not_test
212
517
or_test
213
517
and_test
214
517
lambda
215
517
not
216
517
expr
217
517
test_list
218
518
~
509
518
STRING
511
518
None
519
518
[
517
518
factor
1028
518
NUMBER
514
518
False
523
518
{
515
518
(
520
518
atom_expr
516
518
-
518
518
atom
521
518
+
524
518
NAME
526
518
power
527
518
True
528
519
not
atom -> None
519
or
atom -> None
519
==
atom -> None
519
*
atom -> None
519
-
atom -> None
519
^
atom -> None
519
>>
atom -> None
519
<<
atom -> None
519
and
atom -> None
519
|
atom -> None
519
&
atom -> None
519
!=
atom -> None
519
@
atom -> None
519
.
atom -> None
519
/
atom -> None
519
%
atom -> None
519
>
atom -> None
519
is
atom -> None
519
<
atom -> None
519
(
atom -> None
519
else
atom -> None
519
**
atom -> None
519
//
atom -> None
519
in
atom -> None
519
<=
atom -> None
519
>=
atom -> None
519
+
atom -> None
519
[
atom -> None
520
~
92
520
factor
93
520
STRING
94
520
shift_expr
95
520
arith_expr
96
520
term
97
520
NUMBER
98
520
and_expr
99
520
{
100
520
atom_expr
101
520
[
102
520
-
103
520
None
105
520
(
106
520
atom
107
520
+
109
520
test_list_comp
1029
520
)
1030
520
NAME
110
520
power
111
520
test_list
112
520
True
113
520
comparison
114
520
xor_expr
115
520
lambdef
116
520
False
117
520
not_test
118
520
or_test
119
520
test
120
520
lambda
121
520
and_test
122
520
not
123
520
expr
124
521
[
1031
521
(
1032
521
//
trailer_expr -> 
521
trailer
1033
521
<<
trailer_expr -> 
521
trailer_expr
1034
521
*
trailer_expr -> 
521
in
trailer_expr -> 
521
&
trailer_expr -> 
521
.
1035
521
and
trailer_expr -> 
521
<=
trailer_expr -> 
521
|
trailer_expr -> 
521
or
trailer_expr -> 
521
>=
trailer_expr -> 
521
else
trailer_expr -> 
521
+
trailer_expr -> 
521
**
trailer_expr -> 
521
>>
trailer_expr -> 
521
!=
trailer_expr -> 
521
-
trailer_expr -> 
521
/
trailer_expr -> 
521
%
trailer_expr -> 
521
is
trailer_expr -> 
521
<
trailer_expr -> 
521
>
trailer_expr -> 
521
^
trailer_expr -> 
521
==
trailer_expr -> 
521
@
trailer_expr -> 
521
not
trailer_expr -> 
522
>>
1036
522
else
shift_expr -> arith_expr
522
^
shift_expr -> arith_expr
522
<<
1037
522
or
shift_expr -> arith_expr
522
|
shift_expr -> arith_expr
522
<=
shift_expr -> arith_expr
522
is
shift_expr -> arith_expr
522
<
shift_expr -> arith_expr
522
not
shift_expr -> arith_expr
522
in
shift_expr -> arith_expr
522
and
shift_expr -> arith_expr
522
>=
shift_expr -> arith_expr
522
==
shift_expr -> arith_expr
522
!=
shift_expr -> arith_expr
522
>
shift_expr -> arith_expr
522
&
shift_expr -> arith_expr
523
<=
atom -> False
523
*
atom -> False
523
not
atom -> False
523
!=
atom -> False
523
@
atom -> False
523
and
atom -> False
523
<<
atom -> False
523
>
atom -> False
523
+
atom -> False
523
/
atom -> False
523
==
atom -> False
523
&
atom -> False
523
^
atom -> False
523
in
atom -> False
523
[
atom -> False
523
else
atom -> False
523
is
atom -> False
523
%
atom -> False
523
>=
atom -> False
523
//
atom -> False
523
(
atom -> False
523
|
atom -> False
523
<
atom -> False
523
.
atom -> False
523
or
atom -> False
523
**
atom -> False
523
>>
atom -> False
523
-
atom -> False
524
~
509
524
factor
1038
524
STRING
511
524
None
519
524
[
517
524
NUMBER
514
524
False
523
524
{
515
524
(
520
524
atom_expr
516
524
-
518
524
atom
521
524
+
524
524
NAME
526
524
power
527
524
True
528
525
else
1039
526
<=
atom -> NAME
526
@
atom -> NAME
526
>>
atom -> NAME
526
==
atom -> NAME
526
>
atom -> NAME
526
else
atom -> NAME
526
*
atom -> NAME
526
-
atom -> NAME
526
&
atom -> NAME
526
is
atom -> NAME
526
.
atom -> NAME
526
or
atom -> NAME
526
in
atom -> NAME
526
<<
atom -> NAME
526
+
atom -> NAME
526
|
atom -> NAME
526
and
atom -> NAME
526
^
atom -> NAME
526
/
atom -> NAME
526
[
atom -> NAME
526
not
atom -> NAME
526
!=
atom -> NAME
526
%
atom -> NAME
526
<
atom -> NAME
526
>=
atom -> NAME
526
**
atom -> NAME
526
(
atom -> NAME
526
//
atom -> NAME
527
is
factor -> power
527
else
factor -> power
527
%
factor -> power
527
==
factor -> power
527
>=
factor -> power
527
or
factor -> power
527
and
factor -> power
527
/
factor -> power
527
<
factor -> power
527
+
factor -> power
527
//
factor -> power
527
@
factor -> power
527
in
factor -> power
527
<=
factor -> power
527
&
factor -> power
527
!=
factor -> power
527
<<
factor -> power
527
|
factor -> power
527
>
factor -> power
527
*
factor -> power
527
^
factor -> power
527
-
factor -> power
527
not
factor -> power
527
>>
factor -> power
528
>
atom -> True
528
|
atom -> True
528
-
atom -> True
528
==
atom -> True
528
<<
atom -> True
528
%
atom -> True
528
/
atom -> True
528
[
atom -> True
528
*
atom -> True
528
<=
atom -> True
528
<
atom -> True
528
&
atom -> True
528
+
atom -> True
528
**
atom -> True
528
!=
atom -> True
528
>>
atom -> True
528
//
atom -> True
528
and
atom -> True
528
^
atom -> True
528
is
atom -> True
528
or
atom -> True
528
.
atom -> True
528
(
atom -> True
528
>=
atom -> True
528
@
atom -> True
528
else
atom -> True
528
not
atom -> True
528
in
atom -> True
529
not
expr -> xor_expr
529
or
expr -> xor_expr
529
else
expr -> xor_expr
529
==
expr -> xor_expr
529
in
expr -> xor_expr
529
|
1040
529
<=
expr -> xor_expr
529
is
expr -> xor_expr
529
<
expr -> xor_expr
529
>=
expr -> xor_expr
529
>
expr -> xor_expr
529
and
expr -> xor_expr
529
!=
expr -> xor_expr
530
else
not_test -> comparison
530
and
not_test -> comparison
530
or
not_test -> comparison
531
not
xor_expr -> and_expr
531
|
xor_expr -> and_expr
531
>
xor_expr -> and_expr
531
^
1041
531
<
xor_expr -> and_expr
531
else
xor_expr -> and_expr
531
or
xor_expr -> and_expr
531
>=
xor_expr -> and_expr
531
in
xor_expr -> and_expr
531
and
xor_expr -> and_expr
531
is
xor_expr -> and_expr
531
==
xor_expr -> and_expr
531
!=
xor_expr -> and_expr
531
<=
xor_expr -> and_expr
532
or
and_test -> not_test
532
else
and_test -> not_test
532
and
1042
533
~
509
533
factor
510
533
STRING
511
533
shift_expr
512
533
term
513
533
NUMBER
514
533
{
515
533
atom_expr
516
533
[
517
533
-
518
533
None
519
533
(
520
533
atom
521
533
arith_expr
522
533
False
523
533
+
524
533
NAME
526
533
power
527
533
True
528
533
xor_expr
529
533
comparison
530
533
and_expr
531
533
not_test
1043
533
not
533
533
expr
534
534
!=
125
534
is
126
534
<=
132
534
in
128
534
>=
127
534
==
131
534
not
133
534
<
129
534
comp_op
1044
534
else
comparison -> expr
534
>
134
534
or
comparison -> expr
534
and
comparison -> expr
535
else
or_test -> and_test
535
or
1045
536
expr
5
536
factor
1
536
(
3
536
STRING
4
536
term
6
536
not
8
536
or_test
10
536
~
12
536
atom_expr
13
536
comparison
14
536
shift_expr
29
536
None
15
536
power
43
536
+
19
536
small_stmt
1046
536
suite
1047
536
xor_expr
17
536
arith_expr
18
536
[
32
536
simple_stmt
1048
536
atom
22
536
NUMBER
26
536
and_test
39
536
NAME
27
536
-
36
536
False
28
536
lambda
46
536
test
47
536
NEWLINE
1049
536
not_test
34
536
{
35
536
and_expr
33
536
lambdef
45
536
True
48
536
endsim
75
536
flow_stmt
53
536
pass
76
536
break
54
536
raise
55
536
yield
56
536
assert
57
536
global_stmt
77
536
continue_stmt
58
536
del_stmt
78
536
stat_stmt
59
536
global
79
536
return_stmt
60
536
test_list
61
536
continue
62
536
yield_stmt
63
536
return
68
536
sim_stmt
65
536
resetstats
66
536
break_stmt
82
536
del
67
536
raise_stmt
69
536
nonlocal
70
536
pass_stmt
71
536
begsim
83
536
expr_stmt
72
536
nonlocal_stmt
84
536
assert_stmt
74
537
//=
power -> atom_expr ** factor
537
@
power -> atom_expr ** factor
537
/=
power -> atom_expr ** factor
537
==
power -> atom_expr ** factor
537
|=
power -> atom_expr ** factor
537
&
power -> atom_expr ** factor
537
-
power -> atom_expr ** factor
537
>
power -> atom_expr ** factor
537
and
power -> atom_expr ** factor
537
NEWLINE
power -> atom_expr ** factor
537
**=
power -> atom_expr ** factor
537
&=
power -> atom_expr ** factor
537
<<=
power -> atom_expr ** factor
537
|
power -> atom_expr ** factor
537
<=
power -> atom_expr ** factor
537
%
power -> atom_expr ** factor
537
or
power -> atom_expr ** factor
537
=
power -> atom_expr ** factor
537
:
power -> atom_expr ** factor
537
*=
power -> atom_expr ** factor
537
*
power -> atom_expr ** factor
537
not
power -> atom_expr ** factor
537
in
power -> atom_expr ** factor
537
<<
power -> atom_expr ** factor
537
%=
power -> atom_expr ** factor
537
^=
power -> atom_expr ** factor
537
//
power -> atom_expr ** factor
537
>>=
power -> atom_expr ** factor
537
/
power -> atom_expr ** factor
537
>>
power -> atom_expr ** factor
537
,
power -> atom_expr ** factor
537
^
power -> atom_expr ** factor
537
@=
power -> atom_expr ** factor
537
if
power -> atom_expr ** factor
537
!=
power -> atom_expr ** factor
537
+=
power -> atom_expr ** factor
537
is
power -> atom_expr ** factor
537
<
power -> atom_expr ** factor
537
+
power -> atom_expr ** factor
537
>=
power -> atom_expr ** factor
537
-=
power -> atom_expr ** factor
538
expr
5
538
factor
1
538
(
3
538
STRING
4
538
term
6
538
not
8
538
or_test
10
538
~
12
538
atom_expr
13
538
comparison
14
538
shift_expr
29
538
None
15
538
power
43
538
+
19
538
small_stmt
42
538
xor_expr
17
538
arith_expr
18
538
[
32
538
simple_stmt
1050
538
atom
22
538
NUMBER
26
538
and_test
39
538
NAME
27
538
-
36
538
False
28
538
lambda
46
538
test
47
538
NEWLINE
1051
538
not_test
34
538
{
35
538
suite
1052
538
and_expr
33
538
lambdef
45
538
True
48
538
endsim
75
538
flow_stmt
53
538
pass
76
538
break
54
538
raise
55
538
yield
56
538
assert
57
538
global_stmt
77
538
continue_stmt
58
538
del_stmt
78
538
stat_stmt
59
538
global
79
538
return_stmt
60
538
test_list
61
538
continue
62
538
yield_stmt
63
538
return
68
538
sim_stmt
65
538
resetstats
66
538
break_stmt
82
538
del
67
538
raise_stmt
69
538
nonlocal
70
538
pass_stmt
71
538
begsim
83
538
expr_stmt
72
538
nonlocal_stmt
84
538
assert_stmt
74
539
~
579
539
factor
580
539
STRING
581
539
shift_expr
582
539
arith_expr
583
539
term
584
539
NUMBER
585
539
and_expr
586
539
{
587
539
atom_expr
589
539
arglist
1053
539
-
591
539
[
590
539
None
592
539
(
593
539
atom
594
539
+
595
539
not_test
596
539
test
597
539
NAME
598
539
power
599
539
True
600
539
comparison
601
539
xor_expr
602
539
lambdef
603
539
False
604
539
argument
605
539
)
1054
539
and_test
606
539
lambda
607
539
or_test
608
539
expr
609
539
not
610
539
**
611
539
*
612
540
and
expr -> xor_expr | expr
540
is
expr -> xor_expr | expr
540
<<=
expr -> xor_expr | expr
540
==
expr -> xor_expr | expr
540
//=
expr -> xor_expr | expr
540
^=
expr -> xor_expr | expr
540
&=
expr -> xor_expr | expr
540
not
expr -> xor_expr | expr
540
<=
expr -> xor_expr | expr
540
-=
expr -> xor_expr | expr
540
>=
expr -> xor_expr | expr
540
+=
expr -> xor_expr | expr
540
%=
expr -> xor_expr | expr
540
/=
expr -> xor_expr | expr
540
<
expr -> xor_expr | expr
540
=
expr -> xor_expr | expr
540
@=
expr -> xor_expr | expr
540
*=
expr -> xor_expr | expr
540
:
expr -> xor_expr | expr
540
>>=
expr -> xor_expr | expr
540
|=
expr -> xor_expr | expr
540
or
expr -> xor_expr | expr
540
,
expr -> xor_expr | expr
540
!=
expr -> xor_expr | expr
540
>
expr -> xor_expr | expr
540
in
expr -> xor_expr | expr
540
**=
expr -> xor_expr | expr
540
NEWLINE
expr -> xor_expr | expr
540
if
expr -> xor_expr | expr
541
|=
shift_expr -> arith_expr >> shift_expr
541
*=
shift_expr -> arith_expr >> shift_expr
541
if
shift_expr -> arith_expr >> shift_expr
541
^=
shift_expr -> arith_expr >> shift_expr
541
<
shift_expr -> arith_expr >> shift_expr
541
+=
shift_expr -> arith_expr >> shift_expr
541
>
shift_expr -> arith_expr >> shift_expr
541
^
shift_expr -> arith_expr >> shift_expr
541
%=
shift_expr -> arith_expr >> shift_expr
541
,
shift_expr -> arith_expr >> shift_expr
541
is
shift_expr -> arith_expr >> shift_expr
541
!=
shift_expr -> arith_expr >> shift_expr
541
or
shift_expr -> arith_expr >> shift_expr
541
in
shift_expr -> arith_expr >> shift_expr
541
-=
shift_expr -> arith_expr >> shift_expr
541
&=
shift_expr -> arith_expr >> shift_expr
541
>=
shift_expr -> arith_expr >> shift_expr
541
//=
shift_expr -> arith_expr >> shift_expr
541
&
shift_expr -> arith_expr >> shift_expr
541
and
shift_expr -> arith_expr >> shift_expr
541
>>=
shift_expr -> arith_expr >> shift_expr
541
<<=
shift_expr -> arith_expr >> shift_expr
541
NEWLINE
shift_expr -> arith_expr >> shift_expr
541
|
shift_expr -> arith_expr >> shift_expr
541
not
shift_expr -> arith_expr >> shift_expr
541
=
shift_expr -> arith_expr >> shift_expr
541
@=
shift_expr -> arith_expr >> shift_expr
541
:
shift_expr -> arith_expr >> shift_expr
541
<=
shift_expr -> arith_expr >> shift_expr
541
==
shift_expr -> arith_expr >> shift_expr
541
/=
shift_expr -> arith_expr >> shift_expr
541
**=
shift_expr -> arith_expr >> shift_expr
542
>
shift_expr -> arith_expr << shift_expr
542
&
shift_expr -> arith_expr << shift_expr
542
not
shift_expr -> arith_expr << shift_expr
542
+=
shift_expr -> arith_expr << shift_expr
542
and
shift_expr -> arith_expr << shift_expr
542
,
shift_expr -> arith_expr << shift_expr
542
>=
shift_expr -> arith_expr << shift_expr
542
<=
shift_expr -> arith_expr << shift_expr
542
**=
shift_expr -> arith_expr << shift_expr
542
^
shift_expr -> arith_expr << shift_expr
542
if
shift_expr -> arith_expr << shift_expr
542
//=
shift_expr -> arith_expr << shift_expr
542
%=
shift_expr -> arith_expr << shift_expr
542
:
shift_expr -> arith_expr << shift_expr
542
in
shift_expr -> arith_expr << shift_expr
542
!=
shift_expr -> arith_expr << shift_expr
542
@=
shift_expr -> arith_expr << shift_expr
542
&=
shift_expr -> arith_expr << shift_expr
542
|=
shift_expr -> arith_expr << shift_expr
542
-=
shift_expr -> arith_expr << shift_expr
542
<
shift_expr -> arith_expr << shift_expr
542
==
shift_expr -> arith_expr << shift_expr
542
NEWLINE
shift_expr -> arith_expr << shift_expr
542
>>=
shift_expr -> arith_expr << shift_expr
542
*=
shift_expr -> arith_expr << shift_expr
542
^=
shift_expr -> arith_expr << shift_expr
542
is
shift_expr -> arith_expr << shift_expr
542
|
shift_expr -> arith_expr << shift_expr
542
=
shift_expr -> arith_expr << shift_expr
542
<<=
shift_expr -> arith_expr << shift_expr
542
or
shift_expr -> arith_expr << shift_expr
542
/=
shift_expr -> arith_expr << shift_expr
543
>>=
trailer -> . NAME
543
=
trailer -> . NAME
543
^=
trailer -> . NAME
543
<=
trailer -> . NAME
543
if
trailer -> . NAME
543
<
trailer -> . NAME
543
%
trailer -> . NAME
543
.
trailer -> . NAME
543
@=
trailer -> . NAME
543
//
trailer -> . NAME
543
/=
trailer -> . NAME
543
:
trailer -> . NAME
543
|
trailer -> . NAME
543
==
trailer -> . NAME
543
+=
trailer -> . NAME
543
>=
trailer -> . NAME
543
[
trailer -> . NAME
543
%=
trailer -> . NAME
543
-=
trailer -> . NAME
543
^
trailer -> . NAME
543
<<
trailer -> . NAME
543
in
trailer -> . NAME
543
&
trailer -> . NAME
543
or
trailer -> . NAME
543
<<=
trailer -> . NAME
543
NEWLINE
trailer -> . NAME
543
*
trailer -> . NAME
543
(
trailer -> . NAME
543
|=
trailer -> . NAME
543
and
trailer -> . NAME
543
-
trailer -> . NAME
543
*=
trailer -> . NAME
543
//=
trailer -> . NAME
543
+
trailer -> . NAME
543
&=
trailer -> . NAME
543
!=
trailer -> . NAME
543
not
trailer -> . NAME
543
**
trailer -> . NAME
543
>>
trailer -> . NAME
543
@
trailer -> . NAME
543
**=
trailer -> . NAME
543
/
trailer -> . NAME
543
is
trailer -> . NAME
543
>
trailer -> . NAME
543
,
trailer -> . NAME
544
~
544
544
STRING
546
544
atom_expr
551
544
NUMBER
552
544
{
554
544
[
555
544
None
557
544
-
556
544
+
558
544
factor
1055
544
(
559
544
atom
561
544
NAME
563
544
power
564
544
True
565
544
False
569
545
/
1056
545
@
1057
545
if
term -> factor
545
*
1058
545
%
1059
545
<<
term -> factor
545
-
term -> factor
545
//
1060
545
>=
term -> factor
545
or
term -> factor
545
<=
term -> factor
545
]
term -> factor
545
>
term -> factor
545
in
term -> factor
545
<
term -> factor
545
>>
term -> factor
545
,
term -> factor
545
==
term -> factor
545
is
term -> factor
545
+
term -> factor
545
|
term -> factor
545
!=
term -> factor
545
:
term -> factor
545
&
term -> factor
545
not
term -> factor
545
and
term -> factor
545
^
term -> factor
546
==
atom -> STRING
546
>
atom -> STRING
546
<=
atom -> STRING
546
,
atom -> STRING
546
&
atom -> STRING
546
.
atom -> STRING
546
>=
atom -> STRING
546
@
atom -> STRING
546
[
atom -> STRING
546
^
atom -> STRING
546
%
atom -> STRING
546
**
atom -> STRING
546
-
atom -> STRING
546
//
atom -> STRING
546
>>
atom -> STRING
546
<
atom -> STRING
546
|
atom -> STRING
546
(
atom -> STRING
546
]
atom -> STRING
546
is
atom -> STRING
546
and
atom -> STRING
546
*
atom -> STRING
546
or
atom -> STRING
546
not
atom -> STRING
546
<<
atom -> STRING
546
/
atom -> STRING
546
+
atom -> STRING
546
!=
atom -> STRING
546
in
atom -> STRING
546
:
atom -> STRING
546
if
atom -> STRING
547
&
1061
547
in
and_expr -> shift_expr
547
,
and_expr -> shift_expr
547
not
and_expr -> shift_expr
547
:
and_expr -> shift_expr
547
<
and_expr -> shift_expr
547
!=
and_expr -> shift_expr
547
>=
and_expr -> shift_expr
547
if
and_expr -> shift_expr
547
and
and_expr -> shift_expr
547
|
and_expr -> shift_expr
547
is
and_expr -> shift_expr
547
<=
and_expr -> shift_expr
547
>
and_expr -> shift_expr
547
]
and_expr -> shift_expr
547
^
and_expr -> shift_expr
547
or
and_expr -> shift_expr
547
==
and_expr -> shift_expr
548
!=
125
548
,
comparison -> expr
548
is
126
548
>=
127
548
in
128
548
<
129
548
==
131
548
<=
132
548
not
133
548
>
134
548
comp_op
1062
548
:
comparison -> expr
548
or
comparison -> expr
548
if
comparison -> expr
548
and
comparison -> expr
548
]
comparison -> expr
549
>>
1063
549
^
shift_expr -> arith_expr
549
<<
1064
549
or
shift_expr -> arith_expr
549
|
shift_expr -> arith_expr
549
<=
shift_expr -> arith_expr
549
is
shift_expr -> arith_expr
549
<
shift_expr -> arith_expr
549
if
shift_expr -> arith_expr
549
not
shift_expr -> arith_expr
549
in
shift_expr -> arith_expr
549
and
shift_expr -> arith_expr
549
>=
shift_expr -> arith_expr
549
==
shift_expr -> arith_expr
549
]
shift_expr -> arith_expr
549
:
shift_expr -> arith_expr
549
!=
shift_expr -> arith_expr
549
>
shift_expr -> arith_expr
549
,
shift_expr -> arith_expr
549
&
shift_expr -> arith_expr
550
+
1065
550
-
1066
550
if
arith_expr -> term
550
<=
arith_expr -> term
550
|
arith_expr -> term
550
not
arith_expr -> term
550
^
arith_expr -> term
550
<<
arith_expr -> term
550
&
arith_expr -> term
550
==
arith_expr -> term
550
is
arith_expr -> term
550
!=
arith_expr -> term
550
]
arith_expr -> term
550
>
arith_expr -> term
550
and
arith_expr -> term
550
:
arith_expr -> term
550
<
arith_expr -> term
550
or
arith_expr -> term
550
,
arith_expr -> term
550
>=
arith_expr -> term
550
>>
arith_expr -> term
550
in
arith_expr -> term
551
**
1067
551
or
power -> atom_expr
551
:
power -> atom_expr
551
*
power -> atom_expr
551
>=
power -> atom_expr
551
^
power -> atom_expr
551
in
power -> atom_expr
551
!=
power -> atom_expr
551
if
power -> atom_expr
551
@
power -> atom_expr
551
-
power -> atom_expr
551
and
power -> atom_expr
551
not
power -> atom_expr
551
==
power -> atom_expr
551
<
power -> atom_expr
551
&
power -> atom_expr
551
|
power -> atom_expr
551
//
power -> atom_expr
551
>
power -> atom_expr
551
,
power -> atom_expr
551
%
power -> atom_expr
551
/
power -> atom_expr
551
is
power -> atom_expr
551
<<
power -> atom_expr
551
>>
power -> atom_expr
551
]
power -> atom_expr
551
+
power -> atom_expr
551
<=
power -> atom_expr
552
<<
atom -> NUMBER
552
:
atom -> NUMBER
552
-
atom -> NUMBER
552
^
atom -> NUMBER
552
or
atom -> NUMBER
552
]
atom -> NUMBER
552
==
atom -> NUMBER
552
!=
atom -> NUMBER
552
/
atom -> NUMBER
552
and
atom -> NUMBER
552
%
atom -> NUMBER
552
,
atom -> NUMBER
552
>=
atom -> NUMBER
552
@
atom -> NUMBER
552
|
atom -> NUMBER
552
[
atom -> NUMBER
552
//
atom -> NUMBER
552
.
atom -> NUMBER
552
not
atom -> NUMBER
552
<
atom -> NUMBER
552
>>
atom -> NUMBER
552
if
atom -> NUMBER
552
<=
atom -> NUMBER
552
>
atom -> NUMBER
552
&
atom -> NUMBER
552
is
atom -> NUMBER
552
**
atom -> NUMBER
552
in
atom -> NUMBER
552
+
atom -> NUMBER
552
(
atom -> NUMBER
552
*
atom -> NUMBER
553
]
subscriptlist -> subscript
553
,
1068
554
}
1069
555
~
186
555
factor
187
555
STRING
188
555
shift_expr
189
555
test_list_comp
1070
555
arith_expr
191
555
term
192
555
atom_expr
193
555
]
1071
555
test
195
555
NUMBER
196
555
and_expr
197
555
{
198
555
[
199
555
-
200
555
None
201
555
(
202
555
atom
203
555
+
204
555
NAME
205
555
power
206
555
True
207
555
comparison
208
555
xor_expr
209
555
lambdef
210
555
False
211
555
not_test
212
555
or_test
213
555
and_test
214
555
lambda
215
555
not
216
555
expr
217
555
test_list
218
556
~
544
556
STRING
546
556
atom_expr
551
556
NUMBER
552
556
factor
1072
556
{
554
556
[
555
556
None
557
556
-
556
556
+
558
556
(
559
556
atom
561
556
NAME
563
556
power
564
556
True
565
556
False
569
557
not
atom -> None
557
or
atom -> None
557
==
atom -> None
557
*
atom -> None
557
-
atom -> None
557
^
atom -> None
557
>>
atom -> None
557
if
atom -> None
557
,
atom -> None
557
<<
atom -> None
557
and
atom -> None
557
|
atom -> None
557
&
atom -> None
557
!=
atom -> None
557
@
atom -> None
557
.
atom -> None
557
/
atom -> None
557
%
atom -> None
557
>
atom -> None
557
is
atom -> None
557
]
atom -> None
557
<
atom -> None
557
(
atom -> None
557
**
atom -> None
557
//
atom -> None
557
in
atom -> None
557
<=
atom -> None
557
>=
atom -> None
557
+
atom -> None
557
[
atom -> None
557
:
atom -> None
558
~
544
558
STRING
546
558
atom_expr
551
558
NUMBER
552
558
{
554
558
factor
1073
558
[
555
558
None
557
558
-
556
558
+
558
558
(
559
558
atom
561
558
NAME
563
558
power
564
558
True
565
558
False
569
559
~
92
559
factor
93
559
STRING
94
559
shift_expr
95
559
arith_expr
96
559
term
97
559
NUMBER
98
559
and_expr
99
559
{
100
559
atom_expr
101
559
[
102
559
-
103
559
)
1074
559
None
105
559
(
106
559
atom
107
559
test_list_comp
1075
559
+
109
559
NAME
110
559
power
111
559
test_list
112
559
True
113
559
comparison
114
559
xor_expr
115
559
lambdef
116
559
False
117
559
not_test
118
559
or_test
119
559
test
120
559
lambda
121
559
and_test
122
559
not
123
559
expr
124
560
]
1076
561
[
1077
561
(
1078
561
//
trailer_expr -> 
561
trailer
1079
561
<<
trailer_expr -> 
561
trailer_expr
1080
561
*
trailer_expr -> 
561
in
trailer_expr -> 
561
&
trailer_expr -> 
561
.
1081
561
and
trailer_expr -> 
561
<=
trailer_expr -> 
561
,
trailer_expr -> 
561
|
trailer_expr -> 
561
or
trailer_expr -> 
561
>=
trailer_expr -> 
561
:
trailer_expr -> 
561
+
trailer_expr -> 
561
**
trailer_expr -> 
561
>>
trailer_expr -> 
561
!=
trailer_expr -> 
561
-
trailer_expr -> 
561
/
trailer_expr -> 
561
]
trailer_expr -> 
561
%
trailer_expr -> 
561
is
trailer_expr -> 
561
<
trailer_expr -> 
561
if
trailer_expr -> 
561
>
trailer_expr -> 
561
^
trailer_expr -> 
561
==
trailer_expr -> 
561
@
trailer_expr -> 
561
not
trailer_expr -> 
562
not
xor_expr -> and_expr
562
^
1082
562
if
xor_expr -> and_expr
562
|
xor_expr -> and_expr
562
>
xor_expr -> and_expr
562
<
xor_expr -> and_expr
562
]
xor_expr -> and_expr
562
or
xor_expr -> and_expr
562
:
xor_expr -> and_expr
562
>=
xor_expr -> and_expr
562
in
xor_expr -> and_expr
562
and
xor_expr -> and_expr
562
is
xor_expr -> and_expr
562
==
xor_expr -> and_expr
562
!=
xor_expr -> and_expr
562
<=
xor_expr -> and_expr
562
,
xor_expr -> and_expr
563
<=
atom -> NAME
563
@
atom -> NAME
563
>>
atom -> NAME
563
==
atom -> NAME
563
>
atom -> NAME
563
*
atom -> NAME
563
-
atom -> NAME
563
&
atom -> NAME
563
is
atom -> NAME
563
.
atom -> NAME
563
or
atom -> NAME
563
in
atom -> NAME
563
<<
atom -> NAME
563
+
atom -> NAME
563
,
atom -> NAME
563
if
atom -> NAME
563
|
atom -> NAME
563
and
atom -> NAME
563
^
atom -> NAME
563
[
atom -> NAME
563
/
atom -> NAME
563
not
atom -> NAME
563
!=
atom -> NAME
563
%
atom -> NAME
563
:
atom -> NAME
563
]
atom -> NAME
563
<
atom -> NAME
563
>=
atom -> NAME
563
**
atom -> NAME
563
(
atom -> NAME
563
//
atom -> NAME
564
if
factor -> power
564
is
factor -> power
564
%
factor -> power
564
]
factor -> power
564
==
factor -> power
564
>=
factor -> power
564
or
factor -> power
564
and
factor -> power
564
/
factor -> power
564
<
factor -> power
564
+
factor -> power
564
:
factor -> power
564
,
factor -> power
564
//
factor -> power
564
@
factor -> power
564
in
factor -> power
564
<=
factor -> power
564
&
factor -> power
564
!=
factor -> power
564
<<
factor -> power
564
|
factor -> power
564
>
factor -> power
564
*
factor -> power
564
^
factor -> power
564
-
factor -> power
564
not
factor -> power
564
>>
factor -> power
565
]
atom -> True
565
>
atom -> True
565
|
atom -> True
565
-
atom -> True
565
==
atom -> True
565
<<
atom -> True
565
if
atom -> True
565
%
atom -> True
565
/
atom -> True
565
[
atom -> True
565
:
atom -> True
565
*
atom -> True
565
<=
atom -> True
565
<
atom -> True
565
&
atom -> True
565
+
atom -> True
565
**
atom -> True
565
!=
atom -> True
565
>>
atom -> True
565
//
atom -> True
565
and
atom -> True
565
^
atom -> True
565
is
atom -> True
565
or
atom -> True
565
.
atom -> True
565
,
atom -> True
565
(
atom -> True
565
>=
atom -> True
565
@
atom -> True
565
not
atom -> True
565
in
atom -> True
566
:
not_test -> comparison
566
or
not_test -> comparison
566
if
not_test -> comparison
566
,
not_test -> comparison
566
and
not_test -> comparison
566
]
not_test -> comparison
567
not
expr -> xor_expr
567
or
expr -> xor_expr
567
==
expr -> xor_expr
567
in
expr -> xor_expr
567
|
1083
567
if
expr -> xor_expr
567
:
expr -> xor_expr
567
<=
expr -> xor_expr
567
]
expr -> xor_expr
567
is
expr -> xor_expr
567
<
expr -> xor_expr
567
>=
expr -> xor_expr
567
>
expr -> xor_expr
567
and
expr -> xor_expr
567
!=
expr -> xor_expr
567
,
expr -> xor_expr
568
NAME
251
568
varargslist
1084
568
vfpdef
253
568
:
1085
569
<=
atom -> False
569
*
atom -> False
569
]
atom -> False
569
not
atom -> False
569
!=
atom -> False
569
@
atom -> False
569
and
atom -> False
569
if
atom -> False
569
<<
atom -> False
569
>
atom -> False
569
,
atom -> False
569
:
atom -> False
569
+
atom -> False
569
/
atom -> False
569
==
atom -> False
569
&
atom -> False
569
^
atom -> False
569
in
atom -> False
569
[
atom -> False
569
is
atom -> False
569
%
atom -> False
569
>=
atom -> False
569
//
atom -> False
569
(
atom -> False
569
|
atom -> False
569
<
atom -> False
569
.
atom -> False
569
or
atom -> False
569
**
atom -> False
569
>>
atom -> False
569
-
atom -> False
570
or
and_test -> not_test
570
,
and_test -> not_test
570
if
and_test -> not_test
570
and
1086
570
:
and_test -> not_test
570
]
and_test -> not_test
571
or
1087
571
if
or_test -> and_test
571
,
or_test -> and_test
571
]
or_test -> and_test
571
:
or_test -> and_test
572
:
maybe_test -> test
572
,
subscript -> test
572
]
subscript -> test
573
if
1088
573
:
test -> or_test
573
]
test -> or_test
573
,
test -> or_test
574
~
544
574
factor
545
574
STRING
546
574
shift_expr
547
574
expr
548
574
arith_expr
549
574
term
550
574
atom_expr
551
574
NUMBER
552
574
{
554
574
[
555
574
-
556
574
None
557
574
+
558
574
(
559
574
atom
561
574
and_expr
562
574
NAME
563
574
power
564
574
True
565
574
comparison
566
574
xor_expr
567
574
False
569
574
not_test
1089
574
not
574
575
:
1090
576
,
test -> lambdef
576
:
test -> lambdef
576
]
test -> lambdef
577
:
trailer_expr -> trailer trailer_expr
577
is
trailer_expr -> trailer trailer_expr
577
//=
trailer_expr -> trailer trailer_expr
577
!=
trailer_expr -> trailer trailer_expr
577
<<
trailer_expr -> trailer trailer_expr
577
/=
trailer_expr -> trailer trailer_expr
577
and
trailer_expr -> trailer trailer_expr
577
&
trailer_expr -> trailer trailer_expr
577
|=
trailer_expr -> trailer trailer_expr
577
//
trailer_expr -> trailer trailer_expr
577
*=
trailer_expr -> trailer trailer_expr
577
|
trailer_expr -> trailer trailer_expr
577
==
trailer_expr -> trailer trailer_expr
577
<
trailer_expr -> trailer trailer_expr
577
or
trailer_expr -> trailer trailer_expr
577
^=
trailer_expr -> trailer trailer_expr
577
^
trailer_expr -> trailer trailer_expr
577
<=
trailer_expr -> trailer trailer_expr
577
@
trailer_expr -> trailer trailer_expr
577
%=
trailer_expr -> trailer trailer_expr
577
**=
trailer_expr -> trailer trailer_expr
577
&=
trailer_expr -> trailer trailer_expr
577
in
trailer_expr -> trailer trailer_expr
577
not
trailer_expr -> trailer trailer_expr
577
=
trailer_expr -> trailer trailer_expr
577
*
trailer_expr -> trailer trailer_expr
577
+
trailer_expr -> trailer trailer_expr
577
-=
trailer_expr -> trailer trailer_expr
577
if
trailer_expr -> trailer trailer_expr
577
**
trailer_expr -> trailer trailer_expr
577
>>
trailer_expr -> trailer trailer_expr
577
<<=
trailer_expr -> trailer trailer_expr
577
>>=
trailer_expr -> trailer trailer_expr
577
>=
trailer_expr -> trailer trailer_expr
577
NEWLINE
trailer_expr -> trailer trailer_expr
577
%
trailer_expr -> trailer trailer_expr
577
@=
trailer_expr -> trailer trailer_expr
577
+=
trailer_expr -> trailer trailer_expr
577
-
trailer_expr -> trailer trailer_expr
577
>
trailer_expr -> trailer trailer_expr
577
/
trailer_expr -> trailer trailer_expr
577
,
trailer_expr -> trailer trailer_expr
578
@=
trailer -> ( )
578
&=
trailer -> ( )
578
,
trailer -> ( )
578
+=
trailer -> ( )
578
/
trailer -> ( )
578
|=
trailer -> ( )
578
[
trailer -> ( )
578
//=
trailer -> ( )
578
%=
trailer -> ( )
578
(
trailer -> ( )
578
**=
trailer -> ( )
578
|
trailer -> ( )
578
<<=
trailer -> ( )
578
<=
trailer -> ( )
578
/=
trailer -> ( )
578
in
trailer -> ( )
578
not
trailer -> ( )
578
>>
trailer -> ( )
578
^
trailer -> ( )
578
.
trailer -> ( )
578
>>=
trailer -> ( )
578
NEWLINE
trailer -> ( )
578
**
trailer -> ( )
578
if
trailer -> ( )
578
+
trailer -> ( )
578
is
trailer -> ( )
578
*=
trailer -> ( )
578
<
trailer -> ( )
578
>
trailer -> ( )
578
==
trailer -> ( )
578
:
trailer -> ( )
578
<<
trailer -> ( )
578
//
trailer -> ( )
578
*
trailer -> ( )
578
-
trailer -> ( )
578
-=
trailer -> ( )
578
=
trailer -> ( )
578
^=
trailer -> ( )
578
>=
trailer -> ( )
578
%
trailer -> ( )
578
and
trailer -> ( )
578
@
trailer -> ( )
578
&
trailer -> ( )
578
!=
trailer -> ( )
578
or
trailer -> ( )
579
~
579
579
STRING
581
579
NUMBER
585
579
{
587
579
[
590
579
atom_expr
589
579
None
592
579
-
591
579
factor
1091
579
(
593
579
atom
594
579
+
595
579
NAME
598
579
power
599
579
True
600
579
False
604
580
/
1092
580
@
1093
580
if
term -> factor
580
%
1094
580
<<
term -> factor
580
-
term -> factor
580
//
1095
580
*
1096
580
>=
term -> factor
580
or
term -> factor
580
<=
term -> factor
580
>
term -> factor
580
)
term -> factor
580
in
term -> factor
580
<
term -> factor
580
>>
term -> factor
580
for
term -> factor
580
,
term -> factor
580
==
term -> factor
580
=
term -> factor
580
is
term -> factor
580
+
term -> factor
580
|
term -> factor
580
!=
term -> factor
580
&
term -> factor
580
not
term -> factor
580
and
term -> factor
580
^
term -> factor
581
==
atom -> STRING
581
>
atom -> STRING
581
for
atom -> STRING
581
<=
atom -> STRING
581
,
atom -> STRING
581
&
atom -> STRING
581
.
atom -> STRING
581
>=
atom -> STRING
581
@
atom -> STRING
581
[
atom -> STRING
581
^
atom -> STRING
581
%
atom -> STRING
581
=
atom -> STRING
581
**
atom -> STRING
581
-
atom -> STRING
581
//
atom -> STRING
581
>>
atom -> STRING
581
<
atom -> STRING
581
|
atom -> STRING
581
(
atom -> STRING
581
is
atom -> STRING
581
and
atom -> STRING
581
*
atom -> STRING
581
or
atom -> STRING
581
not
atom -> STRING
581
<<
atom -> STRING
581
/
atom -> STRING
581
+
atom -> STRING
581
!=
atom -> STRING
581
in
atom -> STRING
581
)
atom -> STRING
581
if
atom -> STRING
582
&
1097
582
in
and_expr -> shift_expr
582
,
and_expr -> shift_expr
582
for
and_expr -> shift_expr
582
not
and_expr -> shift_expr
582
!=
and_expr -> shift_expr
582
>=
and_expr -> shift_expr
582
if
and_expr -> shift_expr
582
)
and_expr -> shift_expr
582
and
and_expr -> shift_expr
582
|
and_expr -> shift_expr
582
is
and_expr -> shift_expr
582
<=
and_expr -> shift_expr
582
>
and_expr -> shift_expr
582
=
and_expr -> shift_expr
582
^
and_expr -> shift_expr
582
or
and_expr -> shift_expr
582
<
and_expr -> shift_expr
582
==
and_expr -> shift_expr
583
>>
1098
583
=
shift_expr -> arith_expr
583
^
shift_expr -> arith_expr
583
<<
1099
583
or
shift_expr -> arith_expr
583
|
shift_expr -> arith_expr
583
<=
shift_expr -> arith_expr
583
for
shift_expr -> arith_expr
583
is
shift_expr -> arith_expr
583
<
shift_expr -> arith_expr
583
if
shift_expr -> arith_expr
583
not
shift_expr -> arith_expr
583
in
shift_expr -> arith_expr
583
and
shift_expr -> arith_expr
583
>=
shift_expr -> arith_expr
583
==
shift_expr -> arith_expr
583
)
shift_expr -> arith_expr
583
!=
shift_expr -> arith_expr
583
>
shift_expr -> arith_expr
583
,
shift_expr -> arith_expr
583
&
shift_expr -> arith_expr
584
+
1100
584
-
1101
584
if
arith_expr -> term
584
=
arith_expr -> term
584
<=
arith_expr -> term
584
for
arith_expr -> term
584
|
arith_expr -> term
584
not
arith_expr -> term
584
^
arith_expr -> term
584
<<
arith_expr -> term
584
&
arith_expr -> term
584
==
arith_expr -> term
584
is
arith_expr -> term
584
!=
arith_expr -> term
584
>
arith_expr -> term
584
and
arith_expr -> term
584
<
arith_expr -> term
584
or
arith_expr -> term
584
,
arith_expr -> term
584
)
arith_expr -> term
584
>=
arith_expr -> term
584
>>
arith_expr -> term
584
in
arith_expr -> term
585
<<
atom -> NUMBER
585
)
atom -> NUMBER
585
-
atom -> NUMBER
585
^
atom -> NUMBER
585
or
atom -> NUMBER
585
==
atom -> NUMBER
585
!=
atom -> NUMBER
585
/
atom -> NUMBER
585
and
atom -> NUMBER
585
%
atom -> NUMBER
585
,
atom -> NUMBER
585
>=
atom -> NUMBER
585
@
atom -> NUMBER
585
|
atom -> NUMBER
585
[
atom -> NUMBER
585
//
atom -> NUMBER
585
.
atom -> NUMBER
585
=
atom -> NUMBER
585
not
atom -> NUMBER
585
for
atom -> NUMBER
585
<
atom -> NUMBER
585
>>
atom -> NUMBER
585
if
atom -> NUMBER
585
<=
atom -> NUMBER
585
>
atom -> NUMBER
585
&
atom -> NUMBER
585
is
atom -> NUMBER
585
**
atom -> NUMBER
585
in
atom -> NUMBER
585
+
atom -> NUMBER
585
(
atom -> NUMBER
585
*
atom -> NUMBER
586
not
xor_expr -> and_expr
586
^
1102
586
)
xor_expr -> and_expr
586
=
xor_expr -> and_expr
586
if
xor_expr -> and_expr
586
|
xor_expr -> and_expr
586
>
xor_expr -> and_expr
586
<
xor_expr -> and_expr
586
for
xor_expr -> and_expr
586
or
xor_expr -> and_expr
586
>=
xor_expr -> and_expr
586
in
xor_expr -> and_expr
586
and
xor_expr -> and_expr
586
is
xor_expr -> and_expr
586
==
xor_expr -> and_expr
586
!=
xor_expr -> and_expr
586
<=
xor_expr -> and_expr
586
,
xor_expr -> and_expr
587
}
1103
588
)
1104
589
**
1105
589
or
power -> atom_expr
589
for
power -> atom_expr
589
*
power -> atom_expr
589
>=
power -> atom_expr
589
^
power -> atom_expr
589
in
power -> atom_expr
589
!=
power -> atom_expr
589
if
power -> atom_expr
589
@
power -> atom_expr
589
=
power -> atom_expr
589
-
power -> atom_expr
589
and
power -> atom_expr
589
not
power -> atom_expr
589
==
power -> atom_expr
589
<
power -> atom_expr
589
&
power -> atom_expr
589
|
power -> atom_expr
589
//
power -> atom_expr
589
>
power -> atom_expr
589
,
power -> atom_expr
589
%
power -> atom_expr
589
/
power -> atom_expr
589
is
power -> atom_expr
589
<<
power -> atom_expr
589
>>
power -> atom_expr
589
+
power -> atom_expr
589
)
power -> atom_expr
589
<=
power -> atom_expr
590
~
186
590
factor
187
590
STRING
188
590
shift_expr
189
590
test_list_comp
1106
590
arith_expr
191
590
term
192
590
atom_expr
193
590
]
1107
590
test
195
590
NUMBER
196
590
and_expr
197
590
{
198
590
[
199
590
-
200
590
None
201
590
(
202
590
atom
203
590
+
204
590
NAME
205
590
power
206
590
True
207
590
comparison
208
590
xor_expr
209
590
lambdef
210
590
False
211
590
not_test
212
590
or_test
213
590
and_test
214
590
lambda
215
590
not
216
590
expr
217
590
test_list
218
591
~
579
591
STRING
581
591
NUMBER
585
591
factor
1108
591
{
587
591
[
590
591
atom_expr
589
591
None
592
591
-
591
591
(
593
591
atom
594
591
+
595
591
NAME
598
591
power
599
591
True
600
591
False
604
592
not
atom -> None
592
or
atom -> None
592
==
atom -> None
592
*
atom -> None
592
for
atom -> None
592
-
atom -> None
592
^
atom -> None
592
>>
atom -> None
592
=
atom -> None
592
if
atom -> None
592
,
atom -> None
592
<<
atom -> None
592
and
atom -> None
592
|
atom -> None
592
&
atom -> None
592
!=
atom -> None
592
@
atom -> None
592
.
atom -> None
592
/
atom -> None
592
%
atom -> None
592
>
atom -> None
592
is
atom -> None
592
<
atom -> None
592
)
atom -> None
592
(
atom -> None
592
**
atom -> None
592
//
atom -> None
592
in
atom -> None
592
<=
atom -> None
592
>=
atom -> None
592
+
atom -> None
592
[
atom -> None
593
~
92
593
factor
93
593
STRING
94
593
shift_expr
95
593
arith_expr
96
593
term
97
593
NUMBER
98
593
and_expr
99
593
{
100
593
atom_expr
101
593
[
102
593
-
103
593
)
1109
593
None
105
593
(
106
593
atom
107
593
test_list_comp
1110
593
+
109
593
NAME
110
593
power
111
593
test_list
112
593
True
113
593
comparison
114
593
xor_expr
115
593
lambdef
116
593
False
117
593
not_test
118
593
or_test
119
593
test
120
593
lambda
121
593
and_test
122
593
not
123
593
expr
124
594
[
1111
594
(
1112
594
.
1113
594
//
trailer_expr -> 
594
trailer
1114
594
<<
trailer_expr -> 
594
trailer_expr
1115
594
*
trailer_expr -> 
594
in
trailer_expr -> 
594
&
trailer_expr -> 
594
and
trailer_expr -> 
594
<=
trailer_expr -> 
594
,
trailer_expr -> 
594
|
trailer_expr -> 
594
or
trailer_expr -> 
594
>=
trailer_expr -> 
594
=
trailer_expr -> 
594
for
trailer_expr -> 
594
+
trailer_expr -> 
594
**
trailer_expr -> 
594
>>
trailer_expr -> 
594
!=
trailer_expr -> 
594
-
trailer_expr -> 
594
/
trailer_expr -> 
594
%
trailer_expr -> 
594
is
trailer_expr -> 
594
<
trailer_expr -> 
594
if
trailer_expr -> 
594
>
trailer_expr -> 
594
^
trailer_expr -> 
594
==
trailer_expr -> 
594
@
trailer_expr -> 
594
)
trailer_expr -> 
594
not
trailer_expr -> 
595
~
579
595
STRING
581
595
NUMBER
585
595
{
587
595
factor
1116
595
atom_expr
589
595
[
590
595
None
592
595
-
591
595
(
593
595
atom
594
595
+
595
595
NAME
598
595
power
599
595
True
600
595
False
604
596
or
and_test -> not_test
596
,
and_test -> not_test
596
if
and_test -> not_test
596
and
1117
596
)
and_test -> not_test
596
=
and_test -> not_test
596
for
and_test -> not_test
597
)
argument -> test
597
=
1118
597
for
1119
597
,
argument -> test
597
comp_for
1120
598
<=
atom -> NAME
598
@
atom -> NAME
598
>>
atom -> NAME
598
==
atom -> NAME
598
>
atom -> NAME
598
*
atom -> NAME
598
-
atom -> NAME
598
&
atom -> NAME
598
is
atom -> NAME
598
.
atom -> NAME
598
or
atom -> NAME
598
in
atom -> NAME
598
for
atom -> NAME
598
)
atom -> NAME
598
<<
atom -> NAME
598
+
atom -> NAME
598
,
atom -> NAME
598
if
atom -> NAME
598
|
atom -> NAME
598
and
atom -> NAME
598
=
atom -> NAME
598
^
atom -> NAME
598
/
atom -> NAME
598
[
atom -> NAME
598
not
atom -> NAME
598
!=
atom -> NAME
598
%
atom -> NAME
598
<
atom -> NAME
598
>=
atom -> NAME
598
**
atom -> NAME
598
(
atom -> NAME
598
//
atom -> NAME
599
if
factor -> power
599
is
factor -> power
599
%
factor -> power
599
==
factor -> power
599
>=
factor -> power
599
or
factor -> power
599
and
factor -> power
599
/
factor -> power
599
<
factor -> power
599
+
factor -> power
599
,
factor -> power
599
//
factor -> power
599
for
factor -> power
599
@
factor -> power
599
in
factor -> power
599
)
factor -> power
599
=
factor -> power
599
<=
factor -> power
599
&
factor -> power
599
!=
factor -> power
599
<<
factor -> power
599
|
factor -> power
599
>
factor -> power
599
*
factor -> power
599
^
factor -> power
599
-
factor -> power
599
not
factor -> power
599
>>
factor -> power
600
for
atom -> True
600
>
atom -> True
600
|
atom -> True
600
-
atom -> True
600
==
atom -> True
600
<<
atom -> True
600
if
atom -> True
600
%
atom -> True
600
/
atom -> True
600
[
atom -> True
600
*
atom -> True
600
<=
atom -> True
600
<
atom -> True
600
&
atom -> True
600
+
atom -> True
600
**
atom -> True
600
!=
atom -> True
600
>>
atom -> True
600
//
atom -> True
600
and
atom -> True
600
^
atom -> True
600
is
atom -> True
600
or
atom -> True
600
)
atom -> True
600
.
atom -> True
600
,
atom -> True
600
(
atom -> True
600
>=
atom -> True
600
@
atom -> True
600
=
atom -> True
600
not
atom -> True
600
in
atom -> True
601
for
not_test -> comparison
601
or
not_test -> comparison
601
if
not_test -> comparison
601
and
not_test -> comparison
601
,
not_test -> comparison
601
=
not_test -> comparison
601
)
not_test -> comparison
602
|
1121
602
not
expr -> xor_expr
602
or
expr -> xor_expr
602
==
expr -> xor_expr
602
in
expr -> xor_expr
602
if
expr -> xor_expr
602
<=
expr -> xor_expr
602
is
expr -> xor_expr
602
<
expr -> xor_expr
602
>=
expr -> xor_expr
602
for
expr -> xor_expr
602
=
expr -> xor_expr
602
>
expr -> xor_expr
602
)
expr -> xor_expr
602
and
expr -> xor_expr
602
!=
expr -> xor_expr
602
,
expr -> xor_expr
603
,
test -> lambdef
603
=
test -> lambdef
603
)
test -> lambdef
603
for
test -> lambdef
604
<=
atom -> False
604
*
atom -> False
604
not
atom -> False
604
!=
atom -> False
604
for
atom -> False
604
@
atom -> False
604
and
atom -> False
604
=
atom -> False
604
if
atom -> False
604
<<
atom -> False
604
>
atom -> False
604
,
atom -> False
604
+
atom -> False
604
/
atom -> False
604
==
atom -> False
604
&
atom -> False
604
^
atom -> False
604
)
atom -> False
604
[
atom -> False
604
in
atom -> False
604
is
atom -> False
604
%
atom -> False
604
>=
atom -> False
604
//
atom -> False
604
(
atom -> False
604
|
atom -> False
604
<
atom -> False
604
.
atom -> False
604
or
atom -> False
604
**
atom -> False
604
>>
atom -> False
604
-
atom -> False
605
)
arglist -> argument
605
,
1122
606
=
or_test -> and_test
606
or
1123
606
)
or_test -> and_test
606
if
or_test -> and_test
606
,
or_test -> and_test
606
for
or_test -> and_test
607
:
1124
607
NAME
251
607
varargslist
1125
607
vfpdef
253
608
=
test -> or_test
608
for
test -> or_test
608
if
1126
608
)
test -> or_test
608
,
test -> or_test
609
!=
125
609
=
comparison -> expr
609
,
comparison -> expr
609
is
126
609
>=
127
609
in
128
609
<
129
609
==
131
609
comp_op
1127
609
<=
132
609
not
133
609
>
134
609
)
comparison -> expr
609
for
comparison -> expr
609
or
comparison -> expr
609
if
comparison -> expr
609
and
comparison -> expr
610
~
579
610
factor
580
610
STRING
581
610
shift_expr
582
610
arith_expr
583
610
term
584
610
NUMBER
585
610
and_expr
586
610
{
587
610
atom_expr
589
610
[
590
610
-
591
610
None
592
610
(
593
610
atom
594
610
+
595
610
NAME
598
610
power
599
610
True
600
610
comparison
601
610
xor_expr
602
610
False
604
610
not_test
1128
610
expr
609
610
not
610
611
~
948
611
factor
949
611
STRING
950
611
shift_expr
951
611
arith_expr
952
611
term
953
611
NUMBER
954
611
test
1129
611
{
955
611
atom_expr
956
611
[
957
611
-
958
611
None
959
611
(
960
611
atom
961
611
+
962
611
NAME
964
611
power
965
611
True
966
611
comparison
967
611
xor_expr
968
611
False
969
611
and_expr
970
611
not_test
971
611
lambdef
972
611
lambda
973
611
or_test
974
611
and_test
975
611
not
976
611
expr
977
612
~
948
612
factor
949
612
STRING
950
612
shift_expr
951
612
arith_expr
952
612
term
953
612
NUMBER
954
612
{
955
612
atom_expr
956
612
[
957
612
-
958
612
None
959
612
(
960
612
atom
961
612
+
962
612
NAME
964
612
power
965
612
test
1130
612
True
966
612
comparison
967
612
xor_expr
968
612
False
969
612
and_expr
970
612
not_test
971
612
lambdef
972
612
lambda
973
612
or_test
974
612
and_test
975
612
not
976
612
expr
977
613
)
1131
613
parameters
1132
613
*
1133
613
NAME
1134
613
**
1135
613
tfpdef
1136
613
param
1137
614
except_clause
1138
614
except
1139
615
except
suite -> simple_stmt
616
NEWLINE
1140
617
INDENT
1141
618
|
and_expr -> shift_expr & and_expr
618
=
and_expr -> shift_expr & and_expr
618
and
and_expr -> shift_expr & and_expr
618
is
and_expr -> shift_expr & and_expr
618
/=
and_expr -> shift_expr & and_expr
618
not
and_expr -> shift_expr & and_expr
618
@=
and_expr -> shift_expr & and_expr
618
<<=
and_expr -> shift_expr & and_expr
618
!=
and_expr -> shift_expr & and_expr
618
>=
and_expr -> shift_expr & and_expr
618
in
and_expr -> shift_expr & and_expr
618
NEWLINE
and_expr -> shift_expr & and_expr
618
**=
and_expr -> shift_expr & and_expr
618
or
and_expr -> shift_expr & and_expr
618
>>=
and_expr -> shift_expr & and_expr
618
==
and_expr -> shift_expr & and_expr
618
//=
and_expr -> shift_expr & and_expr
618
|=
and_expr -> shift_expr & and_expr
618
<
and_expr -> shift_expr & and_expr
618
<=
and_expr -> shift_expr & and_expr
618
:
and_expr -> shift_expr & and_expr
618
,
and_expr -> shift_expr & and_expr
618
-=
and_expr -> shift_expr & and_expr
618
%=
and_expr -> shift_expr & and_expr
618
+=
and_expr -> shift_expr & and_expr
618
*=
and_expr -> shift_expr & and_expr
618
&=
and_expr -> shift_expr & and_expr
618
^
and_expr -> shift_expr & and_expr
618
^=
and_expr -> shift_expr & and_expr
618
>
and_expr -> shift_expr & and_expr
618
if
and_expr -> shift_expr & and_expr
619
,
factor -> ~ factor
619
<
factor -> ~ factor
619
in
factor -> ~ factor
619
==
factor -> ~ factor
619
|
factor -> ~ factor
619
<<
factor -> ~ factor
619
>
factor -> ~ factor
619
not
factor -> ~ factor
619
<=
factor -> ~ factor
619
//
factor -> ~ factor
619
>=
factor -> ~ factor
619
>>
factor -> ~ factor
619
]
factor -> ~ factor
619
-
factor -> ~ factor
619
*
factor -> ~ factor
619
/
factor -> ~ factor
619
if
factor -> ~ factor
619
^
factor -> ~ factor
619
and
factor -> ~ factor
619
is
factor -> ~ factor
619
for
factor -> ~ factor
619
+
factor -> ~ factor
619
or
factor -> ~ factor
619
&
factor -> ~ factor
619
!=
factor -> ~ factor
619
%
factor -> ~ factor
619
@
factor -> ~ factor
620
~
186
620
factor
187
620
STRING
188
620
term
1142
620
atom_expr
193
620
NUMBER
196
620
{
198
620
[
199
620
-
200
620
None
201
620
(
202
620
atom
203
620
+
204
620
NAME
205
620
power
206
620
True
207
620
False
211
621
~
186
621
factor
187
621
STRING
188
621
atom_expr
193
621
NUMBER
196
621
{
198
621
[
199
621
-
200
621
None
201
621
(
202
621
atom
203
621
+
204
621
NAME
205
621
power
206
621
True
207
621
False
211
621
term
1143
622
~
186
622
factor
187
622
STRING
188
622
atom_expr
193
622
NUMBER
196
622
{
198
622
[
199
622
-
200
622
None
201
622
(
202
622
term
1144
622
atom
203
622
+
204
622
NAME
205
622
power
206
622
True
207
622
False
211
623
~
186
623
factor
187
623
STRING
188
623
atom_expr
193
623
NUMBER
196
623
{
198
623
term
1145
623
[
199
623
-
200
623
None
201
623
(
202
623
atom
203
623
+
204
623
NAME
205
623
power
206
623
True
207
623
False
211
624
~
186
624
factor
187
624
STRING
188
624
atom_expr
193
624
NUMBER
196
624
{
198
624
[
199
624
-
200
624
None
201
624
(
202
624
atom
203
624
+
204
624
term
1146
624
NAME
205
624
power
206
624
True
207
624
False
211
625
~
186
625
factor
187
625
STRING
188
625
shift_expr
189
625
arith_expr
191
625
term
192
625
atom_expr
193
625
NUMBER
196
625
{
198
625
[
199
625
-
200
625
None
201
625
(
202
625
atom
203
625
+
204
625
NAME
205
625
power
206
625
True
207
625
False
211
625
and_expr
1147
626
/
atom -> [ test_list_comp ]
626
,
atom -> [ test_list_comp ]
626
*
atom -> [ test_list_comp ]
626
or
atom -> [ test_list_comp ]
626
&=
atom -> [ test_list_comp ]
626
|
atom -> [ test_list_comp ]
626
==
atom -> [ test_list_comp ]
626
is
atom -> [ test_list_comp ]
626
-
atom -> [ test_list_comp ]
626
**
atom -> [ test_list_comp ]
626
%=
atom -> [ test_list_comp ]
626
&
atom -> [ test_list_comp ]
626
(
atom -> [ test_list_comp ]
626
=
atom -> [ test_list_comp ]
626
@=
atom -> [ test_list_comp ]
626
:
atom -> [ test_list_comp ]
626
<
atom -> [ test_list_comp ]
626
<<=
atom -> [ test_list_comp ]
626
@
atom -> [ test_list_comp ]
626
//
atom -> [ test_list_comp ]
626
>
atom -> [ test_list_comp ]
626
if
atom -> [ test_list_comp ]
626
in
atom -> [ test_list_comp ]
626
*=
atom -> [ test_list_comp ]
626
^
atom -> [ test_list_comp ]
626
<<
atom -> [ test_list_comp ]
626
[
atom -> [ test_list_comp ]
626
+=
atom -> [ test_list_comp ]
626
^=
atom -> [ test_list_comp ]
626
!=
atom -> [ test_list_comp ]
626
/=
atom -> [ test_list_comp ]
626
**=
atom -> [ test_list_comp ]
626
<=
atom -> [ test_list_comp ]
626
|=
atom -> [ test_list_comp ]
626
//=
atom -> [ test_list_comp ]
626
and
atom -> [ test_list_comp ]
626
%
atom -> [ test_list_comp ]
626
not
atom -> [ test_list_comp ]
626
-=
atom -> [ test_list_comp ]
626
+
atom -> [ test_list_comp ]
626
>>=
atom -> [ test_list_comp ]
626
>=
atom -> [ test_list_comp ]
626
>>
atom -> [ test_list_comp ]
626
.
atom -> [ test_list_comp ]
626
NEWLINE
atom -> [ test_list_comp ]
627
~
186
627
factor
187
627
STRING
188
627
arith_expr
191
627
term
192
627
atom_expr
193
627
NUMBER
196
627
{
198
627
[
199
627
-
200
627
shift_expr
1148
627
None
201
627
(
202
627
atom
203
627
+
204
627
NAME
205
627
power
206
627
True
207
627
False
211
628
~
186
628
factor
187
628
STRING
188
628
arith_expr
191
628
term
192
628
atom_expr
193
628
NUMBER
196
628
{
198
628
[
199
628
-
200
628
None
201
628
(
202
628
atom
203
628
+
204
628
shift_expr
1149
628
NAME
205
628
power
206
628
True
207
628
False
211
629
~
186
629
arith_expr
1150
629
factor
187
629
STRING
188
629
term
192
629
atom_expr
193
629
NUMBER
196
629
{
198
629
[
199
629
-
200
629
None
201
629
(
202
629
atom
203
629
+
204
629
NAME
205
629
power
206
629
True
207
629
False
211
630
~
186
630
factor
187
630
STRING
188
630
term
192
630
arith_expr
1151
630
atom_expr
193
630
NUMBER
196
630
{
198
630
[
199
630
-
200
630
None
201
630
(
202
630
atom
203
630
+
204
630
NAME
205
630
power
206
630
True
207
630
False
211
631
~
186
631
STRING
188
631
atom_expr
193
631
factor
1152
631
NUMBER
196
631
{
198
631
[
199
631
None
201
631
-
200
631
(
202
631
atom
203
631
+
204
631
NAME
205
631
power
206
631
True
207
631
False
211
632
~
223
632
factor
224
632
STRING
225
632
None
226
632
arith_expr
227
632
[
228
632
expr
229
632
NUMBER
230
632
{
231
632
(
232
632
and_expr
233
632
atom
234
632
-
235
632
atom_expr
237
632
+
238
632
False
239
632
True
240
632
power
241
632
term
242
632
NAME
243
632
shift_expr
244
632
xor_expr
245
632
expr_list
1153
633
]
test_list_comp -> test comp_for
634
~
1154
634
factor
1155
634
STRING
1156
634
shift_expr
1157
634
arith_expr
1158
634
term
1159
634
atom_expr
1160
634
NUMBER
1161
634
test
1162
634
{
1163
634
[
1164
634
-
1165
634
None
1166
634
(
1167
634
test_list
1168
634
atom
1169
634
+
1170
634
and_expr
1171
634
NAME
1172
634
power
1173
634
True
1174
634
comparison
1175
634
xor_expr
1176
634
False
1177
634
not_test
1178
634
and_test
1179
634
or_test
1180
634
not
1181
634
expr
1182
634
lambda
1183
634
lambdef
1184
635
~
186
635
factor
187
635
STRING
188
635
shift_expr
189
635
arith_expr
191
635
term
192
635
atom_expr
193
635
NUMBER
196
635
and_expr
197
635
{
198
635
[
199
635
xor_expr
1185
635
-
200
635
None
201
635
(
202
635
atom
203
635
+
204
635
NAME
205
635
power
206
635
True
207
635
False
211
636
//
atom -> { }
636
[
atom -> { }
636
|
atom -> { }
636
>
atom -> { }
636
>=
atom -> { }
636
==
atom -> { }
636
&
atom -> { }
636
not
atom -> { }
636
**
atom -> { }
636
in
atom -> { }
636
,
atom -> { }
636
or
atom -> { }
636
<
atom -> { }
636
!=
atom -> { }
636
+
atom -> { }
636
<<
atom -> { }
636
^
atom -> { }
636
<=
atom -> { }
636
if
atom -> { }
636
for
atom -> { }
636
/
atom -> { }
636
is
atom -> { }
636
-
atom -> { }
636
>>
atom -> { }
636
%
atom -> { }
636
.
atom -> { }
636
(
atom -> { }
636
and
atom -> { }
636
*
atom -> { }
636
]
atom -> { }
636
@
atom -> { }
637
]
1186
638
for
atom -> [ ]
638
==
atom -> [ ]
638
%
atom -> [ ]
638
**
atom -> [ ]
638
.
atom -> [ ]
638
<<
atom -> [ ]
638
not
atom -> [ ]
638
/
atom -> [ ]
638
*
atom -> [ ]
638
if
atom -> [ ]
638
!=
atom -> [ ]
638
<=
atom -> [ ]
638
@
atom -> [ ]
638
-
atom -> [ ]
638
>>
atom -> [ ]
638
^
atom -> [ ]
638
|
atom -> [ ]
638
,
atom -> [ ]
638
<
atom -> [ ]
638
]
atom -> [ ]
638
[
atom -> [ ]
638
is
atom -> [ ]
638
in
atom -> [ ]
638
>
atom -> [ ]
638
+
atom -> [ ]
638
>=
atom -> [ ]
638
and
atom -> [ ]
638
or
atom -> [ ]
638
&
atom -> [ ]
638
(
atom -> [ ]
638
//
atom -> [ ]
639
if
factor -> - factor
639
/
factor -> - factor
639
]
factor -> - factor
639
,
factor -> - factor
639
not
factor -> - factor
639
<
factor -> - factor
639
or
factor -> - factor
639
//
factor -> - factor
639
!=
factor -> - factor
639
%
factor -> - factor
639
|
factor -> - factor
639
for
factor -> - factor
639
>
factor -> - factor
639
+
factor -> - factor
639
-
factor -> - factor
639
^
factor -> - factor
639
in
factor -> - factor
639
<<
factor -> - factor
639
&
factor -> - factor
639
<=
factor -> - factor
639
==
factor -> - factor
639
and
factor -> - factor
639
@
factor -> - factor
639
>=
factor -> - factor
639
is
factor -> - factor
639
>>
factor -> - factor
639
*
factor -> - factor
640
-
atom -> ( )
640
==
atom -> ( )
640
/
atom -> ( )
640
<=
atom -> ( )
640
(
atom -> ( )
640
&
atom -> ( )
640
[
atom -> ( )
640
,
atom -> ( )
640
^
atom -> ( )
640
or
atom -> ( )
640
+
atom -> ( )
640
>>
atom -> ( )
640
]
atom -> ( )
640
is
atom -> ( )
640
*
atom -> ( )
640
if
atom -> ( )
640
and
atom -> ( )
640
>=
atom -> ( )
640
>
atom -> ( )
640
@
atom -> ( )
640
in
atom -> ( )
640
not
atom -> ( )
640
<
atom -> ( )
640
.
atom -> ( )
640
//
atom -> ( )
640
%
atom -> ( )
640
<<
atom -> ( )
640
for
atom -> ( )
640
|
atom -> ( )
640
**
atom -> ( )
640
!=
atom -> ( )
641
)
1187
642
~
544
642
factor
545
642
STRING
546
642
shift_expr
547
642
expr
548
642
arith_expr
549
642
term
550
642
atom_expr
551
642
NUMBER
552
642
subscript
553
642
{
554
642
[
555
642
-
556
642
None
557
642
+
558
642
(
559
642
subscriptlist
1188
642
atom
561
642
and_expr
562
642
NAME
563
642
power
564
642
True
565
642
comparison
566
642
xor_expr
567
642
lambda
568
642
False
569
642
not_test
570
642
and_test
571
642
test
572
642
or_test
573
642
not
574
642
:
maybe_test -> 
642
maybe_test
575
642
lambdef
576
643
)
1189
643
~
579
643
factor
580
643
STRING
581
643
shift_expr
582
643
arith_expr
583
643
term
584
643
NUMBER
585
643
and_expr
586
643
{
587
643
atom_expr
589
643
[
590
643
-
591
643
None
592
643
(
593
643
atom
594
643
+
595
643
not_test
596
643
arglist
1190
643
test
597
643
NAME
598
643
power
599
643
True
600
643
comparison
601
643
xor_expr
602
643
lambdef
603
643
False
604
643
argument
605
643
and_test
606
643
lambda
607
643
or_test
608
643
expr
609
643
not
610
643
**
611
643
*
612
644
NAME
1191
645
[
642
645
(
643
645
.
644
645
//
trailer_expr -> 
645
trailer
645
645
<<
trailer_expr -> 
645
*
trailer_expr -> 
645
in
trailer_expr -> 
645
&
trailer_expr -> 
645
trailer_expr
1192
645
and
trailer_expr -> 
645
<=
trailer_expr -> 
645
,
trailer_expr -> 
645
|
trailer_expr -> 
645
or
trailer_expr -> 
645
>=
trailer_expr -> 
645
for
trailer_expr -> 
645
+
trailer_expr -> 
645
**
trailer_expr -> 
645
>>
trailer_expr -> 
645
!=
trailer_expr -> 
645
-
trailer_expr -> 
645
/
trailer_expr -> 
645
]
trailer_expr -> 
645
%
trailer_expr -> 
645
is
trailer_expr -> 
645
<
trailer_expr -> 
645
>
trailer_expr -> 
645
if
trailer_expr -> 
645
^
trailer_expr -> 
645
==
trailer_expr -> 
645
@
trailer_expr -> 
645
not
trailer_expr -> 
646
for
atom_expr -> atom trailer_expr
646
<=
atom_expr -> atom trailer_expr
646
or
atom_expr -> atom trailer_expr
646
,
atom_expr -> atom trailer_expr
646
*
atom_expr -> atom trailer_expr
646
>=
atom_expr -> atom trailer_expr
646
**
atom_expr -> atom trailer_expr
646
&
atom_expr -> atom trailer_expr
646
%
atom_expr -> atom trailer_expr
646
if
atom_expr -> atom trailer_expr
646
+
atom_expr -> atom trailer_expr
646
//
atom_expr -> atom trailer_expr
646
is
atom_expr -> atom trailer_expr
646
!=
atom_expr -> atom trailer_expr
646
|
atom_expr -> atom trailer_expr
646
<
atom_expr -> atom trailer_expr
646
@
atom_expr -> atom trailer_expr
646
not
atom_expr -> atom trailer_expr
646
-
atom_expr -> atom trailer_expr
646
in
atom_expr -> atom trailer_expr
646
/
atom_expr -> atom trailer_expr
646
^
atom_expr -> atom trailer_expr
646
>
atom_expr -> atom trailer_expr
646
==
atom_expr -> atom trailer_expr
646
<<
atom_expr -> atom trailer_expr
646
>>
atom_expr -> atom trailer_expr
646
]
atom_expr -> atom trailer_expr
646
and
atom_expr -> atom trailer_expr
647
<
factor -> + factor
647
,
factor -> + factor
647
for
factor -> + factor
647
in
factor -> + factor
647
|
factor -> + factor
647
==
factor -> + factor
647
>
factor -> + factor
647
-
factor -> + factor
647
and
factor -> + factor
647
*
factor -> + factor
647
if
factor -> + factor
647
%
factor -> + factor
647
@
factor -> + factor
647
is
factor -> + factor
647
//
factor -> + factor
647
&
factor -> + factor
647
]
factor -> + factor
647
^
factor -> + factor
647
>=
factor -> + factor
647
not
factor -> + factor
647
/
factor -> + factor
647
or
factor -> + factor
647
!=
factor -> + factor
647
<<
factor -> + factor
647
>>
factor -> + factor
647
<=
factor -> + factor
647
+
factor -> + factor
648
~
186
648
factor
187
648
STRING
188
648
shift_expr
189
648
arith_expr
191
648
term
192
648
expr
1193
648
atom_expr
193
648
NUMBER
196
648
and_expr
197
648
{
198
648
[
199
648
-
200
648
None
201
648
(
202
648
atom
203
648
+
204
648
NAME
205
648
power
206
648
True
207
648
xor_expr
209
648
False
211
649
~
186
649
factor
187
649
STRING
188
649
shift_expr
189
649
arith_expr
191
649
term
192
649
atom_expr
193
649
NUMBER
196
649
and_expr
197
649
{
198
649
[
199
649
-
200
649
None
201
649
(
202
649
atom
203
649
+
204
649
NAME
205
649
power
206
649
True
207
649
and_test
1194
649
comparison
208
649
xor_expr
209
649
False
211
649
not_test
212
649
not
216
649
expr
217
650
~
509
650
factor
510
650
STRING
511
650
shift_expr
512
650
term
513
650
NUMBER
514
650
{
515
650
atom_expr
516
650
[
517
650
-
518
650
None
519
650
(
520
650
atom
521
650
arith_expr
522
650
False
523
650
+
524
650
NAME
526
650
power
527
650
True
528
650
xor_expr
529
650
comparison
530
650
and_expr
531
650
not_test
532
650
or_test
1195
650
not
533
650
expr
534
650
and_test
535
651
or_test
1196
651
factor
187
651
~
186
651
shift_expr
189
651
STRING
188
651
arith_expr
191
651
term
192
651
atom_expr
193
651
NUMBER
196
651
and_expr
197
651
{
198
651
[
199
651
-
200
651
None
201
651
(
202
651
atom
203
651
+
204
651
NAME
205
651
power
206
651
True
207
651
comparison
208
651
xor_expr
209
651
False
211
651
not_test
212
651
and_test
214
651
not
216
651
expr
217
652
~
186
652
factor
187
652
STRING
188
652
shift_expr
189
652
arith_expr
191
652
term
192
652
atom_expr
193
652
NUMBER
196
652
and_expr
197
652
{
198
652
[
199
652
-
200
652
None
201
652
(
202
652
atom
203
652
+
204
652
NAME
205
652
power
206
652
True
207
652
comparison
208
652
xor_expr
209
652
lambdef
210
652
False
211
652
not_test
212
652
or_test
213
652
and_test
214
652
lambda
215
652
not
216
652
expr
217
652
test
1197
653
:
1198
654
,
not_test -> not not_test
654
if
not_test -> not not_test
654
]
not_test -> not not_test
654
and
not_test -> not not_test
654
or
not_test -> not not_test
654
for
not_test -> not not_test
655
~
186
655
factor
187
655
STRING
188
655
shift_expr
189
655
arith_expr
191
655
term
192
655
atom_expr
193
655
NUMBER
196
655
and_expr
197
655
{
198
655
[
199
655
-
200
655
None
201
655
(
202
655
atom
203
655
+
204
655
NAME
205
655
power
206
655
True
207
655
xor_expr
209
655
False
211
655
comparison
1199
655
expr
217
656
^=
xor_expr -> and_expr ^ xor_expr
656
,
xor_expr -> and_expr ^ xor_expr
656
-=
xor_expr -> and_expr ^ xor_expr
656
in
xor_expr -> and_expr ^ xor_expr
656
&=
xor_expr -> and_expr ^ xor_expr
656
or
xor_expr -> and_expr ^ xor_expr
656
==
xor_expr -> and_expr ^ xor_expr
656
:
xor_expr -> and_expr ^ xor_expr
656
*=
xor_expr -> and_expr ^ xor_expr
656
is
xor_expr -> and_expr ^ xor_expr
656
|
xor_expr -> and_expr ^ xor_expr
656
and
xor_expr -> and_expr ^ xor_expr
656
NEWLINE
xor_expr -> and_expr ^ xor_expr
656
!=
xor_expr -> and_expr ^ xor_expr
656
not
xor_expr -> and_expr ^ xor_expr
656
>>=
xor_expr -> and_expr ^ xor_expr
656
<=
xor_expr -> and_expr ^ xor_expr
656
|=
xor_expr -> and_expr ^ xor_expr
656
%=
xor_expr -> and_expr ^ xor_expr
656
=
xor_expr -> and_expr ^ xor_expr
656
@=
xor_expr -> and_expr ^ xor_expr
656
<
xor_expr -> and_expr ^ xor_expr
656
>
xor_expr -> and_expr ^ xor_expr
656
**=
xor_expr -> and_expr ^ xor_expr
656
if
xor_expr -> and_expr ^ xor_expr
656
/=
xor_expr -> and_expr ^ xor_expr
656
<<=
xor_expr -> and_expr ^ xor_expr
656
//=
xor_expr -> and_expr ^ xor_expr
656
>=
xor_expr -> and_expr ^ xor_expr
656
+=
xor_expr -> and_expr ^ xor_expr
657
=
and_test -> not_test and and_test
657
^=
and_test -> not_test and and_test
657
NEWLINE
and_test -> not_test and and_test
657
or
and_test -> not_test and and_test
657
,
and_test -> not_test and and_test
657
-=
and_test -> not_test and and_test
657
**=
and_test -> not_test and and_test
657
@=
and_test -> not_test and and_test
657
|=
and_test -> not_test and and_test
657
<<=
and_test -> not_test and and_test
657
&=
and_test -> not_test and and_test
657
if
and_test -> not_test and and_test
657
*=
and_test -> not_test and and_test
657
/=
and_test -> not_test and and_test
657
%=
and_test -> not_test and and_test
657
>>=
and_test -> not_test and and_test
657
:
and_test -> not_test and and_test
657
+=
and_test -> not_test and and_test
657
//=
and_test -> not_test and and_test
658
,
factor -> ~ factor
658
+
factor -> ~ factor
658
in
factor -> ~ factor
658
&
factor -> ~ factor
658
>>
factor -> ~ factor
658
|
factor -> ~ factor
658
<<
factor -> ~ factor
658
*
factor -> ~ factor
658
-
factor -> ~ factor
658
/
factor -> ~ factor
658
%
factor -> ~ factor
658
//
factor -> ~ factor
658
^
factor -> ~ factor
658
@
factor -> ~ factor
659
~
223
659
factor
224
659
STRING
225
659
None
226
659
term
1200
659
[
228
659
NUMBER
230
659
{
231
659
(
232
659
atom
234
659
-
235
659
atom_expr
237
659
+
238
659
False
239
659
True
240
659
power
241
659
NAME
243
660
~
223
660
factor
224
660
STRING
225
660
None
226
660
[
228
660
NUMBER
230
660
{
231
660
(
232
660
atom
234
660
-
235
660
atom_expr
237
660
+
238
660
False
239
660
True
240
660
power
241
660
NAME
243
660
term
1201
661
term
1202
661
~
223
661
factor
224
661
STRING
225
661
None
226
661
[
228
661
NUMBER
230
661
{
231
661
(
232
661
atom
234
661
-
235
661
atom_expr
237
661
+
238
661
False
239
661
True
240
661
power
241
661
NAME
243
662
~
223
662
factor
224
662
STRING
225
662
None
226
662
[
228
662
NUMBER
230
662
term
1203
662
{
231
662
(
232
662
atom
234
662
-
235
662
atom_expr
237
662
+
238
662
False
239
662
True
240
662
power
241
662
NAME
243
663
~
223
663
factor
224
663
STRING
225
663
None
226
663
[
228
663
NUMBER
230
663
{
231
663
(
232
663
atom
234
663
-
235
663
atom_expr
237
663
+
238
663
False
239
663
True
240
663
term
1204
663
power
241
663
NAME
243
664
~
223
664
factor
224
664
STRING
225
664
None
226
664
arith_expr
227
664
[
228
664
NUMBER
230
664
{
231
664
(
232
664
atom
234
664
-
235
664
atom_expr
237
664
+
238
664
False
239
664
shift_expr
1205
664
True
240
664
power
241
664
term
242
664
NAME
243
665
~
223
665
factor
224
665
STRING
225
665
None
226
665
arith_expr
227
665
[
228
665
NUMBER
230
665
{
231
665
(
232
665
atom
234
665
-
235
665
shift_expr
1206
665
atom_expr
237
665
+
238
665
False
239
665
True
240
665
power
241
665
term
242
665
NAME
243
666
]
1207
667
>>
atom -> [ ]
667
in
atom -> [ ]
667
(
atom -> [ ]
667
//
atom -> [ ]
667
*
atom -> [ ]
667
%
atom -> [ ]
667
+
atom -> [ ]
667
|
atom -> [ ]
667
^
atom -> [ ]
667
**
atom -> [ ]
667
.
atom -> [ ]
667
<<
atom -> [ ]
667
,
atom -> [ ]
667
&
atom -> [ ]
667
/
atom -> [ ]
667
[
atom -> [ ]
667
@
atom -> [ ]
667
-
atom -> [ ]
668
~
223
668
factor
224
668
STRING
225
668
None
226
668
arith_expr
227
668
[
228
668
expr
229
668
NUMBER
230
668
{
231
668
(
232
668
and_expr
233
668
atom
234
668
-
235
668
atom_expr
237
668
+
238
668
False
239
668
True
240
668
power
241
668
term
242
668
NAME
243
668
shift_expr
244
668
expr_list
1208
668
xor_expr
245
669
**
atom -> { }
669
//
atom -> { }
669
[
atom -> { }
669
,
atom -> { }
669
in
atom -> { }
669
/
atom -> { }
669
|
atom -> { }
669
-
atom -> { }
669
.
atom -> { }
669
(
atom -> { }
669
+
atom -> { }
669
>>
atom -> { }
669
<<
atom -> { }
669
*
atom -> { }
669
&
atom -> { }
669
^
atom -> { }
669
@
atom -> { }
669
%
atom -> { }
670
-
atom -> ( )
670
>>
atom -> ( )
670
**
atom -> ( )
670
/
atom -> ( )
670
.
atom -> ( )
670
(
atom -> ( )
670
//
atom -> ( )
670
&
atom -> ( )
670
%
atom -> ( )
670
[
atom -> ( )
670
<<
atom -> ( )
670
,
atom -> ( )
670
@
atom -> ( )
670
*
atom -> ( )
670
|
atom -> ( )
670
^
atom -> ( )
670
in
atom -> ( )
670
+
atom -> ( )
671
)
1209
672
~
223
672
factor
224
672
STRING
225
672
None
226
672
arith_expr
227
672
[
228
672
NUMBER
230
672
{
231
672
(
232
672
and_expr
233
672
atom
234
672
-
235
672
atom_expr
237
672
+
238
672
False
239
672
True
240
672
power
241
672
term
242
672
NAME
243
672
shift_expr
244
672
xor_expr
1210
673
~
544
673
factor
545
673
STRING
546
673
shift_expr
547
673
expr
548
673
arith_expr
549
673
term
550
673
atom_expr
551
673
NUMBER
552
673
subscript
553
673
{
554
673
[
555
673
-
556
673
None
557
673
+
558
673
(
559
673
subscriptlist
1211
673
atom
561
673
and_expr
562
673
NAME
563
673
power
564
673
True
565
673
comparison
566
673
xor_expr
567
673
lambda
568
673
False
569
673
not_test
570
673
and_test
571
673
test
572
673
or_test
573
673
not
574
673
:
maybe_test -> 
673
maybe_test
575
673
lambdef
576
674
>>
atom_expr -> atom trailer_expr
674
|
atom_expr -> atom trailer_expr
674
+
atom_expr -> atom trailer_expr
674
*
atom_expr -> atom trailer_expr
674
**
atom_expr -> atom trailer_expr
674
,
atom_expr -> atom trailer_expr
674
@
atom_expr -> atom trailer_expr
674
&
atom_expr -> atom trailer_expr
674
-
atom_expr -> atom trailer_expr
674
%
atom_expr -> atom trailer_expr
674
in
atom_expr -> atom trailer_expr
674
/
atom_expr -> atom trailer_expr
674
<<
atom_expr -> atom trailer_expr
674
^
atom_expr -> atom trailer_expr
674
//
atom_expr -> atom trailer_expr
675
[
673
675
**
trailer_expr -> 
675
//
trailer_expr -> 
675
trailer
675
675
<<
trailer_expr -> 
675
trailer_expr
1212
675
.
676
675
(
677
675
*
trailer_expr -> 
675
in
trailer_expr -> 
675
&
trailer_expr -> 
675
>>
trailer_expr -> 
675
-
trailer_expr -> 
675
/
trailer_expr -> 
675
%
trailer_expr -> 
675
,
trailer_expr -> 
675
|
trailer_expr -> 
675
^
trailer_expr -> 
675
@
trailer_expr -> 
675
+
trailer_expr -> 
676
NAME
1213
677
)
1214
677
~
579
677
factor
580
677
STRING
581
677
shift_expr
582
677
arith_expr
583
677
term
584
677
NUMBER
585
677
and_expr
586
677
{
587
677
atom_expr
589
677
[
590
677
-
591
677
None
592
677
(
593
677
atom
594
677
+
595
677
not_test
596
677
arglist
1215
677
test
597
677
NAME
598
677
power
599
677
True
600
677
comparison
601
677
xor_expr
602
677
lambdef
603
677
False
604
677
argument
605
677
and_test
606
677
lambda
607
677
or_test
608
677
expr
609
677
not
610
677
**
611
677
*
612
678
,
factor -> - factor
678
+
factor -> - factor
678
@
factor -> - factor
678
/
factor -> - factor
678
-
factor -> - factor
678
^
factor -> - factor
678
in
factor -> - factor
678
//
factor -> - factor
678
>>
factor -> - factor
678
%
factor -> - factor
678
*
factor -> - factor
678
<<
factor -> - factor
678
|
factor -> - factor
678
&
factor -> - factor
679
test_list
1216
679
factor
1217
679
~
1218
679
shift_expr
1219
679
STRING
1220
679
expr
1221
679
arith_expr
1222
679
term
1223
679
NUMBER
1224
679
{
1225
679
atom_expr
1226
679
[
1227
679
-
1228
679
None
1229
679
+
1230
679
(
1231
679
atom
1232
679
and_expr
1233
679
NAME
1234
679
power
1235
679
True
1236
679
comparison
1237
679
xor_expr
1238
679
lambda
1239
679
False
1240
679
test
1241
679
not_test
1242
679
or_test
1243
679
and_test
1244
679
not
1245
679
lambdef
1246
680
~
223
680
STRING
225
680
None
226
680
[
228
680
NUMBER
230
680
{
231
680
(
232
680
atom
234
680
-
235
680
atom_expr
237
680
+
238
680
False
239
680
factor
1247
680
True
240
680
power
241
680
NAME
243
681
,
factor -> + factor
681
^
factor -> + factor
681
in
factor -> + factor
681
|
factor -> + factor
681
<<
factor -> + factor
681
>>
factor -> + factor
681
-
factor -> + factor
681
%
factor -> + factor
681
@
factor -> + factor
681
//
factor -> + factor
681
&
factor -> + factor
681
*
factor -> + factor
681
+
factor -> + factor
681
/
factor -> + factor
682
~
223
682
factor
224
682
STRING
225
682
None
226
682
[
228
682
NUMBER
230
682
{
231
682
(
232
682
arith_expr
1248
682
atom
234
682
-
235
682
atom_expr
237
682
+
238
682
False
239
682
True
240
682
power
241
682
term
242
682
NAME
243
683
~
223
683
factor
224
683
STRING
225
683
None
226
683
arith_expr
1249
683
[
228
683
NUMBER
230
683
{
231
683
(
232
683
atom
234
683
-
235
683
atom_expr
237
683
+
238
683
False
239
683
True
240
683
power
241
683
term
242
683
NAME
243
684
~
223
684
factor
224
684
STRING
225
684
None
226
684
arith_expr
227
684
[
228
684
NUMBER
230
684
{
231
684
(
232
684
atom
234
684
-
235
684
atom_expr
237
684
+
238
684
False
239
684
True
240
684
power
241
684
term
242
684
NAME
243
684
and_expr
1250
684
shift_expr
244
685
~
223
685
factor
224
685
STRING
225
685
None
226
685
arith_expr
227
685
[
228
685
NUMBER
230
685
{
231
685
(
232
685
and_expr
233
685
atom
234
685
-
235
685
atom_expr
237
685
+
238
685
False
239
685
expr
1251
685
True
240
685
power
241
685
term
242
685
NAME
243
685
shift_expr
244
685
xor_expr
245
686
|=
or_test -> and_test or or_test
686
-=
or_test -> and_test or or_test
686
/=
or_test -> and_test or or_test
686
:
or_test -> and_test or or_test
686
%=
or_test -> and_test or or_test
686
<<=
or_test -> and_test or or_test
686
>>=
or_test -> and_test or or_test
686
**=
or_test -> and_test or or_test
686
if
or_test -> and_test or or_test
686
@=
or_test -> and_test or or_test
686
+=
or_test -> and_test or or_test
686
=
or_test -> and_test or or_test
686
*=
or_test -> and_test or or_test
686
&=
or_test -> and_test or or_test
686
^=
or_test -> and_test or or_test
686
//=
or_test -> and_test or or_test
686
,
or_test -> and_test or or_test
686
NEWLINE
or_test -> and_test or or_test
687
def
decorator -> @ dotted_name NEWLINE
687
class
decorator -> @ dotted_name NEWLINE
687
@
decorator -> @ dotted_name NEWLINE
688
~
579
688
factor
580
688
STRING
581
688
shift_expr
582
688
arith_expr
583
688
term
584
688
NUMBER
585
688
and_expr
586
688
{
587
688
atom_expr
589
688
[
590
688
-
591
688
None
592
688
(
593
688
atom
594
688
+
595
688
not_test
596
688
test
597
688
NAME
598
688
power
599
688
True
600
688
comparison
601
688
xor_expr
602
688
lambdef
603
688
False
604
688
argument
605
688
and_test
606
688
lambda
607
688
or_test
608
688
expr
609
688
not
610
688
)
1252
688
**
611
688
arglist
1253
688
*
612
689
dotted_name
1254
689
NAME
248
690
:
lambdef -> lambda : test
690
>>=
lambdef -> lambda : test
690
//=
lambdef -> lambda : test
690
/=
lambdef -> lambda : test
690
^=
lambdef -> lambda : test
690
=
lambdef -> lambda : test
690
+=
lambdef -> lambda : test
690
&=
lambdef -> lambda : test
690
,
lambdef -> lambda : test
690
<<=
lambdef -> lambda : test
690
**=
lambdef -> lambda : test
690
|=
lambdef -> lambda : test
690
@=
lambdef -> lambda : test
690
*=
lambdef -> lambda : test
690
%=
lambdef -> lambda : test
690
-=
lambdef -> lambda : test
690
NEWLINE
lambdef -> lambda : test
691
expr
5
691
factor
1
691
(
3
691
STRING
4
691
term
6
691
not
8
691
or_test
10
691
~
12
691
atom_expr
13
691
comparison
14
691
shift_expr
29
691
None
15
691
power
43
691
+
19
691
xor_expr
17
691
arith_expr
18
691
[
32
691
atom
22
691
NUMBER
26
691
and_test
39
691
NAME
27
691
-
36
691
False
28
691
lambda
46
691
not_test
34
691
{
35
691
and_expr
33
691
lambdef
45
691
True
48
691
test
1255
692
NAME
251
692
vfpdef
253
692
varargslist
1256
693
^=
test_list -> test , test_list
693
**=
test_list -> test , test_list
693
+=
test_list -> test , test_list
693
|=
test_list -> test , test_list
693
&=
test_list -> test , test_list
693
*=
test_list -> test , test_list
693
>>=
test_list -> test , test_list
693
%=
test_list -> test , test_list
693
-=
test_list -> test , test_list
693
=
test_list -> test , test_list
693
@=
test_list -> test , test_list
693
//=
test_list -> test , test_list
693
/=
test_list -> test , test_list
693
NEWLINE
test_list -> test , test_list
693
:
test_list -> test , test_list
693
<<=
test_list -> test , test_list
694
,
factor -> ~ factor
694
<
factor -> ~ factor
694
in
factor -> ~ factor
694
==
factor -> ~ factor
694
|
factor -> ~ factor
694
<<
factor -> ~ factor
694
>
factor -> ~ factor
694
not
factor -> ~ factor
694
<=
factor -> ~ factor
694
//
factor -> ~ factor
694
>=
factor -> ~ factor
694
>>
factor -> ~ factor
694
-
factor -> ~ factor
694
*
factor -> ~ factor
694
/
factor -> ~ factor
694
if
factor -> ~ factor
694
:
factor -> ~ factor
694
^
factor -> ~ factor
694
and
factor -> ~ factor
694
is
factor -> ~ factor
694
+
factor -> ~ factor
694
or
factor -> ~ factor
694
&
factor -> ~ factor
694
as
factor -> ~ factor
694
!=
factor -> ~ factor
694
%
factor -> ~ factor
694
@
factor -> ~ factor
695
~
255
695
factor
256
695
STRING
257
695
term
1257
695
NUMBER
262
695
{
263
695
[
266
695
atom_expr
265
695
-
267
695
None
268
695
+
269
695
(
270
695
atom
272
695
NAME
274
695
power
275
695
True
276
695
False
280
696
~
255
696
factor
256
696
STRING
257
696
NUMBER
262
696
{
263
696
[
266
696
atom_expr
265
696
-
267
696
None
268
696
+
269
696
(
270
696
atom
272
696
NAME
274
696
power
275
696
True
276
696
False
280
696
term
1258
697
~
255
697
factor
256
697
STRING
257
697
NUMBER
262
697
{
263
697
term
1259
697
[
266
697
atom_expr
265
697
-
267
697
None
268
697
+
269
697
(
270
697
atom
272
697
NAME
274
697
power
275
697
True
276
697
False
280
698
~
255
698
factor
256
698
STRING
257
698
NUMBER
262
698
{
263
698
[
266
698
atom_expr
265
698
-
267
698
None
268
698
+
269
698
(
270
698
term
1260
698
atom
272
698
NAME
274
698
power
275
698
True
276
698
False
280
699
~
255
699
factor
256
699
STRING
257
699
NUMBER
262
699
{
263
699
[
266
699
atom_expr
265
699
-
267
699
None
268
699
+
269
699
(
270
699
atom
272
699
term
1261
699
NAME
274
699
power
275
699
True
276
699
False
280
700
~
255
700
factor
256
700
STRING
257
700
shift_expr
258
700
arith_expr
260
700
term
261
700
NUMBER
262
700
{
263
700
atom_expr
265
700
[
266
700
-
267
700
None
268
700
+
269
700
(
270
700
atom
272
700
NAME
274
700
power
275
700
True
276
700
False
280
700
and_expr
1262
701
~
255
701
factor
256
701
STRING
257
701
shift_expr
258
701
expr
259
701
arith_expr
260
701
term
261
701
NUMBER
262
701
{
263
701
atom_expr
265
701
[
266
701
-
267
701
None
268
701
+
269
701
(
270
701
atom
272
701
and_expr
273
701
NAME
274
701
power
275
701
True
276
701
xor_expr
278
701
False
280
701
comparison
1263
702
~
255
702
factor
256
702
STRING
257
702
arith_expr
260
702
term
261
702
NUMBER
262
702
{
263
702
[
266
702
atom_expr
265
702
-
267
702
shift_expr
1264
702
None
268
702
+
269
702
(
270
702
atom
272
702
NAME
274
702
power
275
702
True
276
702
False
280
703
~
255
703
factor
256
703
STRING
257
703
arith_expr
260
703
term
261
703
NUMBER
262
703
{
263
703
[
266
703
atom_expr
265
703
-
267
703
None
268
703
+
269
703
(
270
703
atom
272
703
shift_expr
1265
703
NAME
274
703
power
275
703
True
276
703
False
280
704
~
255
704
factor
256
704
STRING
257
704
arith_expr
1266
704
term
261
704
NUMBER
262
704
{
263
704
[
266
704
atom_expr
265
704
-
267
704
None
268
704
+
269
704
(
270
704
atom
272
704
NAME
274
704
power
275
704
True
276
704
False
280
705
~
255
705
factor
256
705
STRING
257
705
term
261
705
arith_expr
1267
705
NUMBER
262
705
{
263
705
[
266
705
atom_expr
265
705
-
267
705
None
268
705
+
269
705
(
270
705
atom
272
705
NAME
274
705
power
275
705
True
276
705
False
280
706
//
atom -> { }
706
[
atom -> { }
706
as
atom -> { }
706
|
atom -> { }
706
>
atom -> { }
706
>=
atom -> { }
706
==
atom -> { }
706
&
atom -> { }
706
not
atom -> { }
706
**
atom -> { }
706
in
atom -> { }
706
,
atom -> { }
706
or
atom -> { }
706
:
atom -> { }
706
<
atom -> { }
706
!=
atom -> { }
706
+
atom -> { }
706
<<
atom -> { }
706
^
atom -> { }
706
<=
atom -> { }
706
if
atom -> { }
706
/
atom -> { }
706
is
atom -> { }
706
-
atom -> { }
706
>>
atom -> { }
706
%
atom -> { }
706
.
atom -> { }
706
(
atom -> { }
706
and
atom -> { }
706
*
atom -> { }
706
@
atom -> { }
707
or_test
1268
707
factor
256
707
~
255
707
shift_expr
258
707
STRING
257
707
expr
259
707
arith_expr
260
707
term
261
707
NUMBER
262
707
{
263
707
and_test
264
707
atom_expr
265
707
[
266
707
-
267
707
None
268
707
+
269
707
(
270
707
atom
272
707
and_expr
273
707
NAME
274
707
power
275
707
True
276
707
comparison
277
707
xor_expr
278
707
False
280
707
not_test
281
707
not
286
708
~
255
708
STRING
257
708
NUMBER
262
708
factor
1269
708
{
263
708
[
266
708
atom_expr
265
708
None
268
708
-
267
708
+
269
708
(
270
708
atom
272
708
NAME
274
708
power
275
708
True
276
708
False
280
709
]
1270
710
==
atom -> [ ]
710
%
atom -> [ ]
710
**
atom -> [ ]
710
.
atom -> [ ]
710
as
atom -> [ ]
710
<<
atom -> [ ]
710
not
atom -> [ ]
710
/
atom -> [ ]
710
*
atom -> [ ]
710
if
atom -> [ ]
710
!=
atom -> [ ]
710
<=
atom -> [ ]
710
@
atom -> [ ]
710
-
atom -> [ ]
710
>>
atom -> [ ]
710
^
atom -> [ ]
710
|
atom -> [ ]
710
,
atom -> [ ]
710
:
atom -> [ ]
710
<
atom -> [ ]
710
[
atom -> [ ]
710
is
atom -> [ ]
710
in
atom -> [ ]
710
>
atom -> [ ]
710
+
atom -> [ ]
710
>=
atom -> [ ]
710
and
atom -> [ ]
710
or
atom -> [ ]
710
&
atom -> [ ]
710
(
atom -> [ ]
710
//
atom -> [ ]
711
if
factor -> - factor
711
/
factor -> - factor
711
,
factor -> - factor
711
not
factor -> - factor
711
<
factor -> - factor
711
or
factor -> - factor
711
//
factor -> - factor
711
!=
factor -> - factor
711
%
factor -> - factor
711
|
factor -> - factor
711
>
factor -> - factor
711
+
factor -> - factor
711
:
factor -> - factor
711
-
factor -> - factor
711
^
factor -> - factor
711
in
factor -> - factor
711
<<
factor -> - factor
711
&
factor -> - factor
711
<=
factor -> - factor
711
==
factor -> - factor
711
and
factor -> - factor
711
@
factor -> - factor
711
>=
factor -> - factor
711
is
factor -> - factor
711
>>
factor -> - factor
711
as
factor -> - factor
711
*
factor -> - factor
712
<
factor -> + factor
712
,
factor -> + factor
712
in
factor -> + factor
712
|
factor -> + factor
712
==
factor -> + factor
712
>
factor -> + factor
712
-
factor -> + factor
712
and
factor -> + factor
712
*
factor -> + factor
712
as
factor -> + factor
712
if
factor -> + factor
712
%
factor -> + factor
712
@
factor -> + factor
712
is
factor -> + factor
712
//
factor -> + factor
712
&
factor -> + factor
712
^
factor -> + factor
712
>=
factor -> + factor
712
not
factor -> + factor
712
/
factor -> + factor
712
:
factor -> + factor
712
or
factor -> + factor
712
!=
factor -> + factor
712
<<
factor -> + factor
712
>>
factor -> + factor
712
<=
factor -> + factor
712
+
factor -> + factor
713
-
atom -> ( )
713
==
atom -> ( )
713
/
atom -> ( )
713
<=
atom -> ( )
713
(
atom -> ( )
713
&
atom -> ( )
713
[
atom -> ( )
713
,
atom -> ( )
713
^
atom -> ( )
713
or
atom -> ( )
713
+
atom -> ( )
713
>>
atom -> ( )
713
as
atom -> ( )
713
is
atom -> ( )
713
*
atom -> ( )
713
if
atom -> ( )
713
and
atom -> ( )
713
>=
atom -> ( )
713
>
atom -> ( )
713
@
atom -> ( )
713
:
atom -> ( )
713
in
atom -> ( )
713
not
atom -> ( )
713
<
atom -> ( )
713
.
atom -> ( )
713
//
atom -> ( )
713
%
atom -> ( )
713
<<
atom -> ( )
713
|
atom -> ( )
713
**
atom -> ( )
713
!=
atom -> ( )
714
)
1271
715
expr
5
715
factor
1
715
(
3
715
STRING
4
715
term
6
715
not
8
715
or_test
10
715
~
12
715
atom_expr
13
715
comparison
14
715
shift_expr
29
715
None
15
715
power
43
715
+
19
715
small_stmt
42
715
xor_expr
17
715
arith_expr
18
715
suite
1272
715
[
32
715
simple_stmt
1050
715
atom
22
715
NUMBER
26
715
and_test
39
715
NAME
27
715
-
36
715
False
28
715
lambda
46
715
test
47
715
NEWLINE
1051
715
not_test
34
715
{
35
715
and_expr
33
715
lambdef
45
715
True
48
715
endsim
75
715
flow_stmt
53
715
pass
76
715
break
54
715
raise
55
715
yield
56
715
assert
57
715
global_stmt
77
715
continue_stmt
58
715
del_stmt
78
715
stat_stmt
59
715
global
79
715
return_stmt
60
715
test_list
61
715
continue
62
715
yield_stmt
63
715
return
68
715
sim_stmt
65
715
resetstats
66
715
break_stmt
82
715
del
67
715
raise_stmt
69
715
nonlocal
70
715
pass_stmt
71
715
begsim
83
715
expr_stmt
72
715
nonlocal_stmt
84
715
assert_stmt
74
716
~
544
716
factor
545
716
STRING
546
716
shift_expr
547
716
expr
548
716
arith_expr
549
716
term
550
716
atom_expr
551
716
NUMBER
552
716
subscript
553
716
{
554
716
[
555
716
-
556
716
None
557
716
+
558
716
(
559
716
subscriptlist
1273
716
atom
561
716
and_expr
562
716
NAME
563
716
power
564
716
True
565
716
comparison
566
716
xor_expr
567
716
lambda
568
716
False
569
716
not_test
570
716
and_test
571
716
test
572
716
or_test
573
716
not
574
716
:
maybe_test -> 
716
maybe_test
575
716
lambdef
576
717
)
1274
717
~
579
717
factor
580
717
STRING
581
717
shift_expr
582
717
arith_expr
583
717
term
584
717
NUMBER
585
717
and_expr
586
717
{
587
717
atom_expr
589
717
[
590
717
-
591
717
None
592
717
(
593
717
atom
594
717
+
595
717
not_test
596
717
arglist
1275
717
test
597
717
NAME
598
717
power
599
717
True
600
717
comparison
601
717
xor_expr
602
717
lambdef
603
717
False
604
717
argument
605
717
and_test
606
717
lambda
607
717
or_test
608
717
expr
609
717
not
610
717
**
611
717
*
612
718
[
716
718
(
717
718
//
trailer_expr -> 
718
trailer
718
718
<<
trailer_expr -> 
718
*
trailer_expr -> 
718
in
trailer_expr -> 
718
&
trailer_expr -> 
718
trailer_expr
1276
718
and
trailer_expr -> 
718
.
720
718
<=
trailer_expr -> 
718
,
trailer_expr -> 
718
|
trailer_expr -> 
718
or
trailer_expr -> 
718
>=
trailer_expr -> 
718
:
trailer_expr -> 
718
+
trailer_expr -> 
718
**
trailer_expr -> 
718
>>
trailer_expr -> 
718
!=
trailer_expr -> 
718
-
trailer_expr -> 
718
/
trailer_expr -> 
718
%
trailer_expr -> 
718
is
trailer_expr -> 
718
as
trailer_expr -> 
718
<
trailer_expr -> 
718
>
trailer_expr -> 
718
if
trailer_expr -> 
718
^
trailer_expr -> 
718
==
trailer_expr -> 
718
@
trailer_expr -> 
718
not
trailer_expr -> 
719
<=
atom_expr -> atom trailer_expr
719
or
atom_expr -> atom trailer_expr
719
,
atom_expr -> atom trailer_expr
719
*
atom_expr -> atom trailer_expr
719
>=
atom_expr -> atom trailer_expr
719
**
atom_expr -> atom trailer_expr
719
&
atom_expr -> atom trailer_expr
719
%
atom_expr -> atom trailer_expr
719
if
atom_expr -> atom trailer_expr
719
+
atom_expr -> atom trailer_expr
719
:
atom_expr -> atom trailer_expr
719
is
atom_expr -> atom trailer_expr
719
//
atom_expr -> atom trailer_expr
719
!=
atom_expr -> atom trailer_expr
719
|
atom_expr -> atom trailer_expr
719
<
atom_expr -> atom trailer_expr
719
@
atom_expr -> atom trailer_expr
719
not
atom_expr -> atom trailer_expr
719
-
atom_expr -> atom trailer_expr
719
in
atom_expr -> atom trailer_expr
719
/
atom_expr -> atom trailer_expr
719
^
atom_expr -> atom trailer_expr
719
>
atom_expr -> atom trailer_expr
719
==
atom_expr -> atom trailer_expr
719
as
atom_expr -> atom trailer_expr
719
<<
atom_expr -> atom trailer_expr
719
>>
atom_expr -> atom trailer_expr
719
and
atom_expr -> atom trailer_expr
720
NAME
1277
721
~
255
721
factor
256
721
STRING
257
721
shift_expr
258
721
arith_expr
260
721
term
261
721
NUMBER
262
721
{
263
721
atom_expr
265
721
[
266
721
xor_expr
1278
721
-
267
721
None
268
721
+
269
721
(
270
721
atom
272
721
and_expr
273
721
NAME
274
721
power
275
721
True
276
721
False
280
722
~
255
722
factor
256
722
STRING
257
722
shift_expr
258
722
arith_expr
260
722
term
261
722
NUMBER
262
722
{
263
722
atom_expr
265
722
[
266
722
-
267
722
None
268
722
+
269
722
(
270
722
atom
272
722
and_expr
273
722
expr
1279
722
NAME
274
722
power
275
722
True
276
722
xor_expr
278
722
False
280
723
~
255
723
factor
256
723
STRING
257
723
shift_expr
258
723
expr
259
723
arith_expr
260
723
term
261
723
NUMBER
262
723
{
263
723
and_test
264
723
atom_expr
265
723
[
266
723
-
267
723
None
268
723
+
269
723
(
270
723
atom
272
723
and_expr
273
723
NAME
274
723
power
275
723
True
276
723
comparison
277
723
xor_expr
278
723
lambda
279
723
False
280
723
not_test
281
723
or_test
284
723
lambdef
285
723
test
1280
723
not
286
724
:
1281
725
~
255
725
factor
256
725
STRING
257
725
shift_expr
258
725
expr
259
725
arith_expr
260
725
term
261
725
NUMBER
262
725
{
263
725
atom_expr
265
725
[
266
725
-
267
725
None
268
725
+
269
725
(
270
725
atom
272
725
and_expr
273
725
NAME
274
725
power
275
725
True
276
725
and_test
1282
725
comparison
277
725
xor_expr
278
725
False
280
725
not_test
281
725
not
286
726
~
255
726
factor
256
726
STRING
257
726
shift_expr
258
726
expr
259
726
arith_expr
260
726
term
261
726
NUMBER
262
726
{
263
726
and_test
264
726
atom_expr
265
726
[
266
726
-
267
726
None
268
726
+
269
726
(
270
726
atom
272
726
and_expr
273
726
NAME
274
726
power
275
726
True
276
726
comparison
277
726
xor_expr
278
726
lambda
279
726
False
280
726
not_test
281
726
with_item
282
726
test
283
726
or_test
284
726
lambdef
285
726
not
286
726
with_items
1283
727
~
1284
727
factor
1285
727
STRING
1286
727
None
1287
727
arith_expr
1288
727
[
1289
727
NUMBER
1290
727
True
1291
727
{
1292
727
(
1293
727
atom
1294
727
-
1295
727
+
1296
727
atom_expr
1297
727
and_expr
1298
727
False
1299
727
power
1300
727
term
1301
727
NAME
1302
727
shift_expr
1303
727
xor_expr
1304
727
expr
1305
728
~
509
728
factor
510
728
STRING
511
728
shift_expr
512
728
term
513
728
NUMBER
514
728
{
515
728
atom_expr
516
728
[
517
728
-
518
728
None
519
728
(
520
728
atom
521
728
arith_expr
522
728
False
523
728
+
524
728
or_test
1306
728
NAME
526
728
power
527
728
True
528
728
xor_expr
529
728
comparison
530
728
and_expr
531
728
not_test
532
728
not
533
728
expr
534
728
and_test
535
729
:
not_test -> not not_test
729
,
not_test -> not not_test
729
if
not_test -> not not_test
729
and
not_test -> not not_test
729
as
not_test -> not not_test
729
or
not_test -> not not_test
730
<
factor -> ~ factor
730
in
factor -> ~ factor
730
==
factor -> ~ factor
730
|
factor -> ~ factor
730
<<
factor -> ~ factor
730
>
factor -> ~ factor
730
not
factor -> ~ factor
730
<=
factor -> ~ factor
730
//
factor -> ~ factor
730
>=
factor -> ~ factor
730
>>
factor -> ~ factor
730
-
factor -> ~ factor
730
*
factor -> ~ factor
730
/
factor -> ~ factor
730
if
factor -> ~ factor
730
from
factor -> ~ factor
730
^
factor -> ~ factor
730
and
factor -> ~ factor
730
is
factor -> ~ factor
730
+
factor -> ~ factor
730
or
factor -> ~ factor
730
&
factor -> ~ factor
730
NEWLINE
factor -> ~ factor
730
!=
factor -> ~ factor
730
%
factor -> ~ factor
730
@
factor -> ~ factor
731
~
287
731
factor
288
731
STRING
289
731
term
1307
731
NUMBER
292
731
{
293
731
[
295
731
atom_expr
294
731
-
296
731
None
297
731
NAME
299
731
(
300
731
atom
302
731
+
303
731
power
305
731
True
306
731
False
309
732
~
287
732
factor
288
732
STRING
289
732
NUMBER
292
732
{
293
732
[
295
732
atom_expr
294
732
-
296
732
None
297
732
NAME
299
732
(
300
732
atom
302
732
+
303
732
power
305
732
True
306
732
False
309
732
term
1308
733
~
287
733
factor
288
733
STRING
289
733
NUMBER
292
733
{
293
733
term
1309
733
[
295
733
atom_expr
294
733
-
296
733
None
297
733
NAME
299
733
(
300
733
atom
302
733
+
303
733
power
305
733
True
306
733
False
309
734
~
287
734
factor
288
734
STRING
289
734
NUMBER
292
734
{
293
734
[
295
734
atom_expr
294
734
-
296
734
None
297
734
NAME
299
734
(
300
734
atom
302
734
+
303
734
term
1310
734
power
305
734
True
306
734
False
309
735
~
287
735
factor
288
735
STRING
289
735
NUMBER
292
735
{
293
735
[
295
735
atom_expr
294
735
-
296
735
None
297
735
NAME
299
735
(
300
735
term
1311
735
atom
302
735
+
303
735
power
305
735
True
306
735
False
309
736
~
287
736
factor
288
736
STRING
289
736
shift_expr
290
736
term
291
736
NUMBER
292
736
{
293
736
atom_expr
294
736
[
295
736
-
296
736
None
297
736
NAME
299
736
(
300
736
arith_expr
301
736
atom
302
736
+
303
736
power
305
736
True
306
736
False
309
736
and_expr
1312
737
~
287
737
factor
288
737
STRING
289
737
arith_expr
1313
737
term
291
737
NUMBER
292
737
{
293
737
[
295
737
atom_expr
294
737
-
296
737
None
297
737
NAME
299
737
(
300
737
atom
302
737
+
303
737
power
305
737
True
306
737
False
309
738
~
287
738
factor
288
738
STRING
289
738
term
291
738
arith_expr
1314
738
NUMBER
292
738
{
293
738
[
295
738
atom_expr
294
738
-
296
738
None
297
738
NAME
299
738
(
300
738
atom
302
738
+
303
738
power
305
738
True
306
738
False
309
739
//
atom -> { }
739
[
atom -> { }
739
|
atom -> { }
739
from
atom -> { }
739
>
atom -> { }
739
>=
atom -> { }
739
NEWLINE
atom -> { }
739
==
atom -> { }
739
&
atom -> { }
739
not
atom -> { }
739
**
atom -> { }
739
in
atom -> { }
739
or
atom -> { }
739
<
atom -> { }
739
!=
atom -> { }
739
+
atom -> { }
739
<<
atom -> { }
739
^
atom -> { }
739
<=
atom -> { }
739
if
atom -> { }
739
/
atom -> { }
739
is
atom -> { }
739
-
atom -> { }
739
>>
atom -> { }
739
%
atom -> { }
739
.
atom -> { }
739
(
atom -> { }
739
and
atom -> { }
739
*
atom -> { }
739
@
atom -> { }
740
~
287
740
STRING
289
740
NUMBER
292
740
factor
1315
740
{
293
740
[
295
740
atom_expr
294
740
None
297
740
-
296
740
NAME
299
740
(
300
740
atom
302
740
+
303
740
power
305
740
True
306
740
False
309
741
]
1316
742
==
atom -> [ ]
742
%
atom -> [ ]
742
**
atom -> [ ]
742
.
atom -> [ ]
742
<<
atom -> [ ]
742
not
atom -> [ ]
742
/
atom -> [ ]
742
*
atom -> [ ]
742
if
atom -> [ ]
742
!=
atom -> [ ]
742
<=
atom -> [ ]
742
@
atom -> [ ]
742
-
atom -> [ ]
742
>>
atom -> [ ]
742
^
atom -> [ ]
742
NEWLINE
atom -> [ ]
742
|
atom -> [ ]
742
from
atom -> [ ]
742
<
atom -> [ ]
742
[
atom -> [ ]
742
is
atom -> [ ]
742
in
atom -> [ ]
742
>
atom -> [ ]
742
+
atom -> [ ]
742
>=
atom -> [ ]
742
and
atom -> [ ]
742
or
atom -> [ ]
742
&
atom -> [ ]
742
(
atom -> [ ]
742
//
atom -> [ ]
743
from
factor -> - factor
743
if
factor -> - factor
743
/
factor -> - factor
743
not
factor -> - factor
743
<
factor -> - factor
743
or
factor -> - factor
743
//
factor -> - factor
743
!=
factor -> - factor
743
%
factor -> - factor
743
|
factor -> - factor
743
>
factor -> - factor
743
+
factor -> - factor
743
-
factor -> - factor
743
^
factor -> - factor
743
in
factor -> - factor
743
<<
factor -> - factor
743
NEWLINE
factor -> - factor
743
&
factor -> - factor
743
<=
factor -> - factor
743
==
factor -> - factor
743
and
factor -> - factor
743
@
factor -> - factor
743
>=
factor -> - factor
743
is
factor -> - factor
743
>>
factor -> - factor
743
*
factor -> - factor
744
~
287
744
factor
288
744
STRING
289
744
shift_expr
290
744
term
291
744
NUMBER
292
744
{
293
744
atom_expr
294
744
[
295
744
-
296
744
None
297
744
lambda
298
744
NAME
299
744
(
300
744
arith_expr
301
744
atom
302
744
+
303
744
and_expr
304
744
power
305
744
True
306
744
comparison
307
744
xor_expr
308
744
False
309
744
not_test
310
744
lambdef
311
744
expr
312
744
or_test
313
744
and_test
314
744
not
315
744
test
1317
745
:
1318
746
-
atom -> ( )
746
==
atom -> ( )
746
/
atom -> ( )
746
<=
atom -> ( )
746
(
atom -> ( )
746
&
atom -> ( )
746
[
atom -> ( )
746
^
atom -> ( )
746
or
atom -> ( )
746
+
atom -> ( )
746
NEWLINE
atom -> ( )
746
>>
atom -> ( )
746
from
atom -> ( )
746
is
atom -> ( )
746
*
atom -> ( )
746
if
atom -> ( )
746
and
atom -> ( )
746
>=
atom -> ( )
746
>
atom -> ( )
746
@
atom -> ( )
746
in
atom -> ( )
746
not
atom -> ( )
746
<
atom -> ( )
746
.
atom -> ( )
746
//
atom -> ( )
746
%
atom -> ( )
746
<<
atom -> ( )
746
|
atom -> ( )
746
**
atom -> ( )
746
!=
atom -> ( )
747
)
1319
748
~
287
748
factor
288
748
STRING
289
748
term
291
748
NUMBER
292
748
{
293
748
[
295
748
atom_expr
294
748
-
296
748
shift_expr
1320
748
None
297
748
NAME
299
748
(
300
748
arith_expr
301
748
atom
302
748
+
303
748
power
305
748
True
306
748
False
309
749
~
287
749
factor
288
749
STRING
289
749
term
291
749
NUMBER
292
749
{
293
749
[
295
749
atom_expr
294
749
-
296
749
None
297
749
NAME
299
749
(
300
749
arith_expr
301
749
atom
302
749
+
303
749
shift_expr
1321
749
power
305
749
True
306
749
False
309
750
~
544
750
factor
545
750
STRING
546
750
shift_expr
547
750
expr
548
750
arith_expr
549
750
term
550
750
atom_expr
551
750
NUMBER
552
750
subscript
553
750
{
554
750
[
555
750
-
556
750
None
557
750
+
558
750
(
559
750
subscriptlist
1322
750
atom
561
750
and_expr
562
750
NAME
563
750
power
564
750
True
565
750
comparison
566
750
xor_expr
567
750
lambda
568
750
False
569
750
not_test
570
750
and_test
571
750
test
572
750
or_test
573
750
not
574
750
:
maybe_test -> 
750
maybe_test
575
750
lambdef
576
751
)
1323
751
~
579
751
factor
580
751
STRING
581
751
shift_expr
582
751
arith_expr
583
751
term
584
751
NUMBER
585
751
and_expr
586
751
{
587
751
atom_expr
589
751
[
590
751
-
591
751
None
592
751
(
593
751
atom
594
751
+
595
751
not_test
596
751
arglist
1324
751
test
597
751
NAME
598
751
power
599
751
True
600
751
comparison
601
751
xor_expr
602
751
lambdef
603
751
False
604
751
argument
605
751
and_test
606
751
lambda
607
751
or_test
608
751
expr
609
751
not
610
751
**
611
751
*
612
752
[
750
752
(
751
752
//
trailer_expr -> 
752
trailer
752
752
<<
trailer_expr -> 
752
*
trailer_expr -> 
752
in
trailer_expr -> 
752
trailer_expr
1325
752
&
trailer_expr -> 
752
and
trailer_expr -> 
752
.
754
752
<=
trailer_expr -> 
752
|
trailer_expr -> 
752
or
trailer_expr -> 
752
>=
trailer_expr -> 
752
+
trailer_expr -> 
752
**
trailer_expr -> 
752
>>
trailer_expr -> 
752
!=
trailer_expr -> 
752
-
trailer_expr -> 
752
/
trailer_expr -> 
752
%
trailer_expr -> 
752
is
trailer_expr -> 
752
<
trailer_expr -> 
752
from
trailer_expr -> 
752
>
trailer_expr -> 
752
NEWLINE
trailer_expr -> 
752
if
trailer_expr -> 
752
^
trailer_expr -> 
752
==
trailer_expr -> 
752
@
trailer_expr -> 
752
not
trailer_expr -> 
753
<=
atom_expr -> atom trailer_expr
753
or
atom_expr -> atom trailer_expr
753
*
atom_expr -> atom trailer_expr
753
>=
atom_expr -> atom trailer_expr
753
**
atom_expr -> atom trailer_expr
753
&
atom_expr -> atom trailer_expr
753
%
atom_expr -> atom trailer_expr
753
if
atom_expr -> atom trailer_expr
753
+
atom_expr -> atom trailer_expr
753
//
atom_expr -> atom trailer_expr
753
is
atom_expr -> atom trailer_expr
753
!=
atom_expr -> atom trailer_expr
753
|
atom_expr -> atom trailer_expr
753
<
atom_expr -> atom trailer_expr
753
@
atom_expr -> atom trailer_expr
753
not
atom_expr -> atom trailer_expr
753
NEWLINE
atom_expr -> atom trailer_expr
753
-
atom_expr -> atom trailer_expr
753
in
atom_expr -> atom trailer_expr
753
/
atom_expr -> atom trailer_expr
753
^
atom_expr -> atom trailer_expr
753
>
atom_expr -> atom trailer_expr
753
==
atom_expr -> atom trailer_expr
753
from
atom_expr -> atom trailer_expr
753
<<
atom_expr -> atom trailer_expr
753
>>
atom_expr -> atom trailer_expr
753
and
atom_expr -> atom trailer_expr
754
NAME
1326
755
<
factor -> + factor
755
in
factor -> + factor
755
|
factor -> + factor
755
==
factor -> + factor
755
>
factor -> + factor
755
-
factor -> + factor
755
and
factor -> + factor
755
*
factor -> + factor
755
if
factor -> + factor
755
%
factor -> + factor
755
@
factor -> + factor
755
is
factor -> + factor
755
//
factor -> + factor
755
&
factor -> + factor
755
^
factor -> + factor
755
from
factor -> + factor
755
>=
factor -> + factor
755
not
factor -> + factor
755
/
factor -> + factor
755
NEWLINE
factor -> + factor
755
or
factor -> + factor
755
!=
factor -> + factor
755
<<
factor -> + factor
755
>>
factor -> + factor
755
<=
factor -> + factor
755
+
factor -> + factor
756
~
287
756
factor
288
756
STRING
289
756
shift_expr
290
756
term
291
756
NUMBER
292
756
{
293
756
atom_expr
294
756
[
295
756
xor_expr
1327
756
-
296
756
None
297
756
NAME
299
756
(
300
756
arith_expr
301
756
atom
302
756
+
303
756
and_expr
304
756
power
305
756
True
306
756
False
309
757
~
287
757
factor
288
757
STRING
289
757
shift_expr
290
757
term
291
757
NUMBER
292
757
{
293
757
atom_expr
294
757
[
295
757
-
296
757
None
297
757
NAME
299
757
(
300
757
arith_expr
301
757
atom
302
757
+
303
757
and_expr
304
757
power
305
757
True
306
757
xor_expr
308
757
False
309
757
expr
1328
758
~
287
758
factor
288
758
STRING
289
758
shift_expr
290
758
term
291
758
NUMBER
292
758
{
293
758
atom_expr
294
758
[
295
758
and_test
1329
758
-
296
758
None
297
758
NAME
299
758
(
300
758
arith_expr
301
758
atom
302
758
+
303
758
and_expr
304
758
power
305
758
True
306
758
comparison
307
758
xor_expr
308
758
False
309
758
not_test
310
758
expr
312
758
not
315
759
~
287
759
factor
288
759
STRING
289
759
shift_expr
290
759
term
291
759
NUMBER
292
759
{
293
759
atom_expr
294
759
[
295
759
-
296
759
None
297
759
NAME
299
759
(
300
759
arith_expr
301
759
atom
302
759
+
303
759
and_expr
304
759
power
305
759
True
306
759
xor_expr
308
759
False
309
759
comparison
1330
759
expr
312
760
~
509
760
factor
510
760
STRING
511
760
shift_expr
512
760
term
513
760
NUMBER
514
760
{
515
760
atom_expr
516
760
[
517
760
-
518
760
None
519
760
(
520
760
atom
521
760
arith_expr
522
760
False
523
760
+
524
760
NAME
526
760
power
527
760
True
528
760
xor_expr
529
760
comparison
530
760
and_expr
531
760
not_test
532
760
not
533
760
expr
534
760
and_test
535
760
or_test
1331
761
or_test
1332
761
factor
288
761
~
287
761
shift_expr
290
761
STRING
289
761
term
291
761
NUMBER
292
761
{
293
761
atom_expr
294
761
[
295
761
-
296
761
None
297
761
NAME
299
761
(
300
761
arith_expr
301
761
atom
302
761
+
303
761
and_expr
304
761
power
305
761
True
306
761
comparison
307
761
xor_expr
308
761
False
309
761
not_test
310
761
expr
312
761
and_test
314
761
not
315
762
NEWLINE
not_test -> not not_test
762
if
not_test -> not not_test
762
from
not_test -> not not_test
762
and
not_test -> not not_test
762
or
not_test -> not not_test
763
~
397
763
factor
398
763
STRING
399
763
shift_expr
400
763
term
401
763
NUMBER
402
763
{
403
763
atom_expr
404
763
[
405
763
-
406
763
None
407
763
(
408
763
arith_expr
409
763
atom
410
763
+
411
763
and_expr
412
763
NAME
413
763
power
414
763
True
415
763
comparison
416
763
lambda
417
763
xor_expr
418
763
False
419
763
not_test
420
763
lambdef
421
763
or_test
423
763
and_test
424
763
test
1333
763
not
425
763
expr
426
764
expr
317
764
factor
318
764
~
319
764
STRING
320
764
None
321
764
arith_expr
322
764
[
323
764
NUMBER
324
764
{
325
764
(
326
764
atom
327
764
-
328
764
atom_expr
329
764
+
330
764
False
331
764
and_expr
332
764
True
333
764
power
334
764
term
335
764
shift_expr
336
764
NAME
337
764
xor_expr
338
764
expr_list
1334
765
~
319
765
factor
318
765
STRING
320
765
None
321
765
term
1335
765
[
323
765
NUMBER
324
765
{
325
765
(
326
765
atom
327
765
-
328
765
atom_expr
329
765
+
330
765
False
331
765
True
333
765
power
334
765
NAME
337
766
~
319
766
factor
318
766
STRING
320
766
None
321
766
[
323
766
NUMBER
324
766
{
325
766
(
326
766
atom
327
766
-
328
766
atom_expr
329
766
+
330
766
False
331
766
True
333
766
power
334
766
NAME
337
766
term
1336
767
term
1337
767
~
319
767
factor
318
767
STRING
320
767
None
321
767
[
323
767
NUMBER
324
767
{
325
767
(
326
767
atom
327
767
-
328
767
atom_expr
329
767
+
330
767
False
331
767
True
333
767
power
334
767
NAME
337
768
~
319
768
factor
318
768
STRING
320
768
None
321
768
[
323
768
NUMBER
324
768
term
1338
768
{
325
768
(
326
768
atom
327
768
-
328
768
atom_expr
329
768
+
330
768
False
331
768
True
333
768
power
334
768
NAME
337
769
~
319
769
factor
318
769
STRING
320
769
None
321
769
[
323
769
NUMBER
324
769
{
325
769
(
326
769
atom
327
769
-
328
769
atom_expr
329
769
+
330
769
False
331
769
True
333
769
term
1339
769
power
334
769
NAME
337
770
,
factor -> ~ factor
770
+
factor -> ~ factor
770
&
factor -> ~ factor
770
>>
factor -> ~ factor
770
NEWLINE
factor -> ~ factor
770
|
factor -> ~ factor
770
<<
factor -> ~ factor
770
*
factor -> ~ factor
770
-
factor -> ~ factor
770
/
factor -> ~ factor
770
%
factor -> ~ factor
770
//
factor -> ~ factor
770
^
factor -> ~ factor
770
@
factor -> ~ factor
771
~
319
771
factor
318
771
STRING
320
771
None
321
771
arith_expr
322
771
[
323
771
NUMBER
324
771
{
325
771
(
326
771
atom
327
771
-
328
771
atom_expr
329
771
+
330
771
False
331
771
shift_expr
1340
771
True
333
771
power
334
771
term
335
771
NAME
337
772
~
319
772
factor
318
772
STRING
320
772
None
321
772
arith_expr
322
772
[
323
772
NUMBER
324
772
{
325
772
(
326
772
atom
327
772
-
328
772
atom_expr
329
772
+
330
772
False
331
772
shift_expr
1341
772
True
333
772
power
334
772
term
335
772
NAME
337
773
]
1342
774
>>
atom -> [ ]
774
(
atom -> [ ]
774
//
atom -> [ ]
774
*
atom -> [ ]
774
%
atom -> [ ]
774
+
atom -> [ ]
774
|
atom -> [ ]
774
NEWLINE
atom -> [ ]
774
**
atom -> [ ]
774
.
atom -> [ ]
774
^
atom -> [ ]
774
<<
atom -> [ ]
774
,
atom -> [ ]
774
&
atom -> [ ]
774
/
atom -> [ ]
774
[
atom -> [ ]
774
@
atom -> [ ]
774
-
atom -> [ ]
775
**
atom -> { }
775
//
atom -> { }
775
[
atom -> { }
775
,
atom -> { }
775
/
atom -> { }
775
|
atom -> { }
775
-
atom -> { }
775
.
atom -> { }
775
(
atom -> { }
775
+
atom -> { }
775
>>
atom -> { }
775
<<
atom -> { }
775
*
atom -> { }
775
&
atom -> { }
775
NEWLINE
atom -> { }
775
^
atom -> { }
775
@
atom -> { }
775
%
atom -> { }
776
-
atom -> ( )
776
>>
atom -> ( )
776
**
atom -> ( )
776
/
atom -> ( )
776
.
atom -> ( )
776
(
atom -> ( )
776
//
atom -> ( )
776
&
atom -> ( )
776
%
atom -> ( )
776
[
atom -> ( )
776
<<
atom -> ( )
776
,
atom -> ( )
776
@
atom -> ( )
776
*
atom -> ( )
776
|
atom -> ( )
776
^
atom -> ( )
776
+
atom -> ( )
776
NEWLINE
atom -> ( )
777
)
1343
778
~
544
778
factor
545
778
STRING
546
778
shift_expr
547
778
expr
548
778
arith_expr
549
778
term
550
778
atom_expr
551
778
NUMBER
552
778
subscript
553
778
{
554
778
[
555
778
-
556
778
None
557
778
+
558
778
(
559
778
subscriptlist
1344
778
atom
561
778
and_expr
562
778
NAME
563
778
power
564
778
True
565
778
comparison
566
778
xor_expr
567
778
lambda
568
778
False
569
778
not_test
570
778
and_test
571
778
test
572
778
or_test
573
778
not
574
778
:
maybe_test -> 
778
maybe_test
575
778
lambdef
576
779
[
778
779
trailer
779
779
**
trailer_expr -> 
779
//
trailer_expr -> 
779
<<
trailer_expr -> 
779
trailer_expr
1345
779
.
781
779
(
782
779
*
trailer_expr -> 
779
&
trailer_expr -> 
779
>>
trailer_expr -> 
779
-
trailer_expr -> 
779
/
trailer_expr -> 
779
%
trailer_expr -> 
779
,
trailer_expr -> 
779
NEWLINE
trailer_expr -> 
779
|
trailer_expr -> 
779
^
trailer_expr -> 
779
@
trailer_expr -> 
779
+
trailer_expr -> 
780
>>
atom_expr -> atom trailer_expr
780
|
atom_expr -> atom trailer_expr
780
+
atom_expr -> atom trailer_expr
780
*
atom_expr -> atom trailer_expr
780
**
atom_expr -> atom trailer_expr
780
,
atom_expr -> atom trailer_expr
780
@
atom_expr -> atom trailer_expr
780
&
atom_expr -> atom trailer_expr
780
-
atom_expr -> atom trailer_expr
780
NEWLINE
atom_expr -> atom trailer_expr
780
%
atom_expr -> atom trailer_expr
780
/
atom_expr -> atom trailer_expr
780
<<
atom_expr -> atom trailer_expr
780
^
atom_expr -> atom trailer_expr
780
//
atom_expr -> atom trailer_expr
781
NAME
1346
782
)
1347
782
~
579
782
factor
580
782
STRING
581
782
shift_expr
582
782
arith_expr
583
782
term
584
782
NUMBER
585
782
and_expr
586
782
{
587
782
atom_expr
589
782
[
590
782
-
591
782
None
592
782
(
593
782
atom
594
782
+
595
782
not_test
596
782
arglist
1348
782
test
597
782
NAME
598
782
power
599
782
True
600
782
comparison
601
782
xor_expr
602
782
lambdef
603
782
False
604
782
argument
605
782
and_test
606
782
lambda
607
782
or_test
608
782
expr
609
782
not
610
782
**
611
782
*
612
783
,
factor -> - factor
783
+
factor -> - factor
783
@
factor -> - factor
783
/
factor -> - factor
783
-
factor -> - factor
783
^
factor -> - factor
783
//
factor -> - factor
783
>>
factor -> - factor
783
%
factor -> - factor
783
*
factor -> - factor
783
<<
factor -> - factor
783
NEWLINE
factor -> - factor
783
|
factor -> - factor
783
&
factor -> - factor
784
~
319
784
STRING
320
784
None
321
784
[
323
784
NUMBER
324
784
{
325
784
(
326
784
atom
327
784
-
328
784
atom_expr
329
784
+
330
784
False
331
784
factor
1349
784
True
333
784
power
334
784
NAME
337
785
NEWLINE
factor -> + factor
785
,
factor -> + factor
785
^
factor -> + factor
785
|
factor -> + factor
785
<<
factor -> + factor
785
>>
factor -> + factor
785
-
factor -> + factor
785
%
factor -> + factor
785
@
factor -> + factor
785
//
factor -> + factor
785
&
factor -> + factor
785
*
factor -> + factor
785
+
factor -> + factor
785
/
factor -> + factor
786
~
319
786
factor
318
786
STRING
320
786
None
321
786
arith_expr
322
786
[
323
786
NUMBER
324
786
{
325
786
(
326
786
atom
327
786
-
328
786
atom_expr
329
786
+
330
786
False
331
786
and_expr
332
786
True
333
786
power
334
786
term
335
786
shift_expr
336
786
NAME
337
786
xor_expr
1350
787
~
319
787
factor
318
787
STRING
320
787
None
321
787
[
323
787
NUMBER
324
787
{
325
787
(
326
787
arith_expr
1351
787
atom
327
787
-
328
787
atom_expr
329
787
+
330
787
False
331
787
True
333
787
power
334
787
term
335
787
NAME
337
788
~
319
788
factor
318
788
STRING
320
788
None
321
788
arith_expr
1352
788
[
323
788
NUMBER
324
788
{
325
788
(
326
788
atom
327
788
-
328
788
atom_expr
329
788
+
330
788
False
331
788
True
333
788
power
334
788
term
335
788
NAME
337
789
~
319
789
factor
318
789
STRING
320
789
None
321
789
arith_expr
322
789
[
323
789
NUMBER
324
789
{
325
789
(
326
789
atom
327
789
-
328
789
atom_expr
329
789
+
330
789
False
331
789
True
333
789
power
334
789
term
335
789
shift_expr
336
789
NAME
337
789
and_expr
1353
790
~
319
790
factor
318
790
STRING
320
790
None
321
790
arith_expr
322
790
[
323
790
NUMBER
324
790
{
325
790
(
326
790
atom
327
790
-
328
790
atom_expr
329
790
+
330
790
False
331
790
expr
1354
790
and_expr
332
790
True
333
790
power
334
790
term
335
790
shift_expr
336
790
NAME
337
790
xor_expr
338
791
,
factor -> ~ factor
791
<
factor -> ~ factor
791
in
factor -> ~ factor
791
==
factor -> ~ factor
791
|
factor -> ~ factor
791
<<
factor -> ~ factor
791
>
factor -> ~ factor
791
not
factor -> ~ factor
791
<=
factor -> ~ factor
791
//
factor -> ~ factor
791
>=
factor -> ~ factor
791
>>
factor -> ~ factor
791
-
factor -> ~ factor
791
*
factor -> ~ factor
791
/
factor -> ~ factor
791
if
factor -> ~ factor
791
^
factor -> ~ factor
791
and
factor -> ~ factor
791
is
factor -> ~ factor
791
+
factor -> ~ factor
791
or
factor -> ~ factor
791
&
factor -> ~ factor
791
NEWLINE
factor -> ~ factor
791
!=
factor -> ~ factor
791
%
factor -> ~ factor
791
@
factor -> ~ factor
792
~
340
792
factor
341
792
STRING
342
792
term
1355
792
NUMBER
346
792
{
348
792
[
350
792
atom_expr
349
792
-
351
792
None
352
792
(
353
792
atom
354
792
+
355
792
NAME
357
792
power
358
792
True
359
792
False
363
793
~
340
793
factor
341
793
STRING
342
793
NUMBER
346
793
{
348
793
[
350
793
atom_expr
349
793
-
351
793
None
352
793
(
353
793
atom
354
793
+
355
793
NAME
357
793
power
358
793
True
359
793
False
363
793
term
1356
794
~
340
794
factor
341
794
STRING
342
794
NUMBER
346
794
{
348
794
term
1357
794
[
350
794
atom_expr
349
794
-
351
794
None
352
794
(
353
794
atom
354
794
+
355
794
NAME
357
794
power
358
794
True
359
794
False
363
795
~
340
795
factor
341
795
STRING
342
795
NUMBER
346
795
{
348
795
[
350
795
atom_expr
349
795
-
351
795
None
352
795
(
353
795
atom
354
795
+
355
795
term
1358
795
NAME
357
795
power
358
795
True
359
795
False
363
796
~
340
796
factor
341
796
STRING
342
796
NUMBER
346
796
{
348
796
[
350
796
atom_expr
349
796
-
351
796
None
352
796
(
353
796
term
1359
796
atom
354
796
+
355
796
NAME
357
796
power
358
796
True
359
796
False
363
797
~
340
797
factor
341
797
STRING
342
797
shift_expr
343
797
arith_expr
344
797
term
345
797
NUMBER
346
797
{
348
797
atom_expr
349
797
[
350
797
-
351
797
None
352
797
(
353
797
atom
354
797
+
355
797
NAME
357
797
power
358
797
True
359
797
False
363
797
and_expr
1360
798
~
340
798
factor
341
798
STRING
342
798
arith_expr
344
798
term
345
798
NUMBER
346
798
{
348
798
[
350
798
atom_expr
349
798
-
351
798
shift_expr
1361
798
None
352
798
(
353
798
atom
354
798
+
355
798
NAME
357
798
power
358
798
True
359
798
False
363
799
~
340
799
factor
341
799
STRING
342
799
arith_expr
344
799
term
345
799
NUMBER
346
799
{
348
799
[
350
799
atom_expr
349
799
-
351
799
None
352
799
(
353
799
atom
354
799
+
355
799
shift_expr
1362
799
NAME
357
799
power
358
799
True
359
799
False
363
800
~
340
800
factor
341
800
STRING
342
800
arith_expr
1363
800
term
345
800
NUMBER
346
800
{
348
800
[
350
800
atom_expr
349
800
-
351
800
None
352
800
(
353
800
atom
354
800
+
355
800
NAME
357
800
power
358
800
True
359
800
False
363
801
~
340
801
factor
341
801
STRING
342
801
term
345
801
arith_expr
1364
801
NUMBER
346
801
{
348
801
[
350
801
atom_expr
349
801
-
351
801
None
352
801
(
353
801
atom
354
801
+
355
801
NAME
357
801
power
358
801
True
359
801
False
363
802
//
atom -> { }
802
[
atom -> { }
802
|
atom -> { }
802
>
atom -> { }
802
>=
atom -> { }
802
NEWLINE
atom -> { }
802
==
atom -> { }
802
&
atom -> { }
802
not
atom -> { }
802
**
atom -> { }
802
in
atom -> { }
802
,
atom -> { }
802
or
atom -> { }
802
<
atom -> { }
802
!=
atom -> { }
802
+
atom -> { }
802
<<
atom -> { }
802
^
atom -> { }
802
<=
atom -> { }
802
if
atom -> { }
802
/
atom -> { }
802
is
atom -> { }
802
-
atom -> { }
802
>>
atom -> { }
802
%
atom -> { }
802
.
atom -> { }
802
(
atom -> { }
802
and
atom -> { }
802
*
atom -> { }
802
@
atom -> { }
803
~
340
803
STRING
342
803
NUMBER
346
803
factor
1365
803
{
348
803
[
350
803
atom_expr
349
803
None
352
803
-
351
803
(
353
803
atom
354
803
+
355
803
NAME
357
803
power
358
803
True
359
803
False
363
804
]
1366
805
==
atom -> [ ]
805
%
atom -> [ ]
805
**
atom -> [ ]
805
.
atom -> [ ]
805
<<
atom -> [ ]
805
not
atom -> [ ]
805
/
atom -> [ ]
805
*
atom -> [ ]
805
if
atom -> [ ]
805
!=
atom -> [ ]
805
<=
atom -> [ ]
805
@
atom -> [ ]
805
-
atom -> [ ]
805
>>
atom -> [ ]
805
^
atom -> [ ]
805
NEWLINE
atom -> [ ]
805
|
atom -> [ ]
805
,
atom -> [ ]
805
<
atom -> [ ]
805
[
atom -> [ ]
805
is
atom -> [ ]
805
in
atom -> [ ]
805
>
atom -> [ ]
805
+
atom -> [ ]
805
>=
atom -> [ ]
805
and
atom -> [ ]
805
or
atom -> [ ]
805
&
atom -> [ ]
805
(
atom -> [ ]
805
//
atom -> [ ]
806
if
factor -> - factor
806
/
factor -> - factor
806
,
factor -> - factor
806
not
factor -> - factor
806
<
factor -> - factor
806
or
factor -> - factor
806
//
factor -> - factor
806
!=
factor -> - factor
806
%
factor -> - factor
806
|
factor -> - factor
806
>
factor -> - factor
806
+
factor -> - factor
806
-
factor -> - factor
806
^
factor -> - factor
806
in
factor -> - factor
806
<<
factor -> - factor
806
NEWLINE
factor -> - factor
806
&
factor -> - factor
806
<=
factor -> - factor
806
==
factor -> - factor
806
and
factor -> - factor
806
@
factor -> - factor
806
>=
factor -> - factor
806
is
factor -> - factor
806
>>
factor -> - factor
806
*
factor -> - factor
807
-
atom -> ( )
807
==
atom -> ( )
807
/
atom -> ( )
807
<=
atom -> ( )
807
(
atom -> ( )
807
&
atom -> ( )
807
[
atom -> ( )
807
,
atom -> ( )
807
^
atom -> ( )
807
or
atom -> ( )
807
+
atom -> ( )
807
NEWLINE
atom -> ( )
807
>>
atom -> ( )
807
is
atom -> ( )
807
*
atom -> ( )
807
if
atom -> ( )
807
and
atom -> ( )
807
>=
atom -> ( )
807
>
atom -> ( )
807
@
atom -> ( )
807
in
atom -> ( )
807
not
atom -> ( )
807
<
atom -> ( )
807
.
atom -> ( )
807
//
atom -> ( )
807
%
atom -> ( )
807
<<
atom -> ( )
807
|
atom -> ( )
807
**
atom -> ( )
807
!=
atom -> ( )
808
)
1367
809
~
544
809
factor
545
809
STRING
546
809
shift_expr
547
809
expr
548
809
arith_expr
549
809
term
550
809
atom_expr
551
809
NUMBER
552
809
subscript
553
809
{
554
809
[
555
809
-
556
809
None
557
809
+
558
809
(
559
809
subscriptlist
1368
809
atom
561
809
and_expr
562
809
NAME
563
809
power
564
809
True
565
809
comparison
566
809
xor_expr
567
809
lambda
568
809
False
569
809
not_test
570
809
and_test
571
809
test
572
809
or_test
573
809
not
574
809
:
maybe_test -> 
809
maybe_test
575
809
lambdef
576
810
)
1369
810
~
579
810
factor
580
810
STRING
581
810
shift_expr
582
810
arith_expr
583
810
term
584
810
NUMBER
585
810
and_expr
586
810
{
587
810
atom_expr
589
810
[
590
810
-
591
810
None
592
810
(
593
810
atom
594
810
+
595
810
not_test
596
810
arglist
1370
810
test
597
810
NAME
598
810
power
599
810
True
600
810
comparison
601
810
xor_expr
602
810
lambdef
603
810
False
604
810
argument
605
810
and_test
606
810
lambda
607
810
or_test
608
810
expr
609
810
not
610
810
**
611
810
*
612
811
[
809
811
(
810
811
//
trailer_expr -> 
811
trailer
811
811
<<
trailer_expr -> 
811
*
trailer_expr -> 
811
in
trailer_expr -> 
811
trailer_expr
1371
811
&
trailer_expr -> 
811
and
trailer_expr -> 
811
.
813
811
<=
trailer_expr -> 
811
,
trailer_expr -> 
811
|
trailer_expr -> 
811
or
trailer_expr -> 
811
>=
trailer_expr -> 
811
+
trailer_expr -> 
811
**
trailer_expr -> 
811
>>
trailer_expr -> 
811
!=
trailer_expr -> 
811
-
trailer_expr -> 
811
/
trailer_expr -> 
811
%
trailer_expr -> 
811
is
trailer_expr -> 
811
<
trailer_expr -> 
811
>
trailer_expr -> 
811
NEWLINE
trailer_expr -> 
811
if
trailer_expr -> 
811
^
trailer_expr -> 
811
==
trailer_expr -> 
811
@
trailer_expr -> 
811
not
trailer_expr -> 
812
<=
atom_expr -> atom trailer_expr
812
or
atom_expr -> atom trailer_expr
812
,
atom_expr -> atom trailer_expr
812
*
atom_expr -> atom trailer_expr
812
>=
atom_expr -> atom trailer_expr
812
**
atom_expr -> atom trailer_expr
812
&
atom_expr -> atom trailer_expr
812
%
atom_expr -> atom trailer_expr
812
if
atom_expr -> atom trailer_expr
812
+
atom_expr -> atom trailer_expr
812
//
atom_expr -> atom trailer_expr
812
is
atom_expr -> atom trailer_expr
812
!=
atom_expr -> atom trailer_expr
812
|
atom_expr -> atom trailer_expr
812
<
atom_expr -> atom trailer_expr
812
@
atom_expr -> atom trailer_expr
812
not
atom_expr -> atom trailer_expr
812
NEWLINE
atom_expr -> atom trailer_expr
812
-
atom_expr -> atom trailer_expr
812
in
atom_expr -> atom trailer_expr
812
/
atom_expr -> atom trailer_expr
812
^
atom_expr -> atom trailer_expr
812
>
atom_expr -> atom trailer_expr
812
==
atom_expr -> atom trailer_expr
812
<<
atom_expr -> atom trailer_expr
812
>>
atom_expr -> atom trailer_expr
812
and
atom_expr -> atom trailer_expr
813
NAME
1372
814
<
factor -> + factor
814
,
factor -> + factor
814
in
factor -> + factor
814
|
factor -> + factor
814
==
factor -> + factor
814
>
factor -> + factor
814
-
factor -> + factor
814
and
factor -> + factor
814
*
factor -> + factor
814
if
factor -> + factor
814
%
factor -> + factor
814
@
factor -> + factor
814
is
factor -> + factor
814
//
factor -> + factor
814
&
factor -> + factor
814
^
factor -> + factor
814
>=
factor -> + factor
814
not
factor -> + factor
814
/
factor -> + factor
814
NEWLINE
factor -> + factor
814
or
factor -> + factor
814
!=
factor -> + factor
814
<<
factor -> + factor
814
>>
factor -> + factor
814
<=
factor -> + factor
814
+
factor -> + factor
815
~
340
815
factor
341
815
STRING
342
815
shift_expr
343
815
arith_expr
344
815
term
345
815
NUMBER
346
815
{
348
815
atom_expr
349
815
[
350
815
xor_expr
1373
815
-
351
815
None
352
815
(
353
815
atom
354
815
+
355
815
and_expr
356
815
NAME
357
815
power
358
815
True
359
815
False
363
816
~
340
816
factor
341
816
STRING
342
816
shift_expr
343
816
arith_expr
344
816
term
345
816
NUMBER
346
816
{
348
816
atom_expr
349
816
[
350
816
-
351
816
None
352
816
(
353
816
atom
354
816
+
355
816
and_expr
356
816
NAME
357
816
power
358
816
True
359
816
comparison
360
816
lambda
361
816
xor_expr
362
816
False
363
816
not_test
364
816
lambdef
365
816
or_test
367
816
and_test
368
816
not
369
816
expr
370
816
test
1374
817
:
1375
818
~
340
818
factor
341
818
STRING
342
818
shift_expr
343
818
arith_expr
344
818
term
345
818
NUMBER
346
818
{
348
818
atom_expr
349
818
[
350
818
-
351
818
None
352
818
(
353
818
atom
354
818
+
355
818
expr
1376
818
and_expr
356
818
NAME
357
818
power
358
818
True
359
818
xor_expr
362
818
False
363
819
~
340
819
factor
341
819
STRING
342
819
shift_expr
343
819
arith_expr
344
819
term
345
819
NUMBER
346
819
{
348
819
atom_expr
349
819
[
350
819
and_test
1377
819
-
351
819
None
352
819
(
353
819
atom
354
819
+
355
819
and_expr
356
819
NAME
357
819
power
358
819
True
359
819
comparison
360
819
xor_expr
362
819
False
363
819
not_test
364
819
not
369
819
expr
370
820
~
340
820
factor
341
820
STRING
342
820
shift_expr
343
820
arith_expr
344
820
term
345
820
NUMBER
346
820
{
348
820
atom_expr
349
820
[
350
820
-
351
820
None
352
820
(
353
820
atom
354
820
+
355
820
and_expr
356
820
NAME
357
820
power
358
820
True
359
820
comparison
360
820
lambda
361
820
xor_expr
362
820
False
363
820
not_test
364
820
test_list
1378
820
lambdef
365
820
test
366
820
or_test
367
820
and_test
368
820
not
369
820
expr
370
821
~
509
821
factor
510
821
STRING
511
821
shift_expr
512
821
term
513
821
NUMBER
514
821
{
515
821
atom_expr
516
821
[
517
821
-
518
821
None
519
821
(
520
821
atom
521
821
arith_expr
522
821
False
523
821
+
524
821
NAME
526
821
power
527
821
True
528
821
xor_expr
529
821
comparison
530
821
and_expr
531
821
not_test
532
821
or_test
1379
821
not
533
821
expr
534
821
and_test
535
822
or_test
1380
822
factor
341
822
~
340
822
shift_expr
343
822
STRING
342
822
arith_expr
344
822
term
345
822
NUMBER
346
822
{
348
822
atom_expr
349
822
[
350
822
-
351
822
None
352
822
(
353
822
atom
354
822
+
355
822
and_expr
356
822
NAME
357
822
power
358
822
True
359
822
comparison
360
822
xor_expr
362
822
False
363
822
not_test
364
822
and_test
368
822
not
369
822
expr
370
823
,
not_test -> not not_test
823
NEWLINE
not_test -> not not_test
823
if
not_test -> not not_test
823
and
not_test -> not not_test
823
or
not_test -> not not_test
824
~
340
824
factor
341
824
STRING
342
824
shift_expr
343
824
arith_expr
344
824
term
345
824
NUMBER
346
824
{
348
824
atom_expr
349
824
[
350
824
-
351
824
None
352
824
(
353
824
atom
354
824
+
355
824
and_expr
356
824
NAME
357
824
power
358
824
True
359
824
xor_expr
362
824
False
363
824
comparison
1381
824
expr
370
825
~
825
825
STRING
827
825
NUMBER
831
825
{
832
825
[
834
825
atom_expr
833
825
None
836
825
-
835
825
factor
1382
825
(
837
825
atom
838
825
+
840
825
NAME
843
825
power
845
825
True
846
825
False
850
826
/
1383
826
@
1384
826
if
term -> factor
826
%
1385
826
<<
term -> factor
826
-
term -> factor
826
//
1386
826
*
1387
826
>=
term -> factor
826
or
term -> factor
826
<=
term -> factor
826
>
term -> factor
826
in
term -> factor
826
<
term -> factor
826
NEWLINE
term -> factor
826
>>
term -> factor
826
,
term -> factor
826
==
term -> factor
826
=
term -> factor
826
is
term -> factor
826
+
term -> factor
826
|
term -> factor
826
!=
term -> factor
826
&
term -> factor
826
not
term -> factor
826
and
term -> factor
826
^
term -> factor
827
==
atom -> STRING
827
>
atom -> STRING
827
<=
atom -> STRING
827
,
atom -> STRING
827
&
atom -> STRING
827
.
atom -> STRING
827
>=
atom -> STRING
827
@
atom -> STRING
827
[
atom -> STRING
827
^
atom -> STRING
827
NEWLINE
atom -> STRING
827
%
atom -> STRING
827
=
atom -> STRING
827
**
atom -> STRING
827
-
atom -> STRING
827
//
atom -> STRING
827
>>
atom -> STRING
827
<
atom -> STRING
827
|
atom -> STRING
827
(
atom -> STRING
827
is
atom -> STRING
827
and
atom -> STRING
827
*
atom -> STRING
827
or
atom -> STRING
827
not
atom -> STRING
827
<<
atom -> STRING
827
/
atom -> STRING
827
+
atom -> STRING
827
!=
atom -> STRING
827
in
atom -> STRING
827
if
atom -> STRING
828
NEWLINE
and_expr -> shift_expr
828
&
1388
828
in
and_expr -> shift_expr
828
,
and_expr -> shift_expr
828
not
and_expr -> shift_expr
828
!=
and_expr -> shift_expr
828
>=
and_expr -> shift_expr
828
if
and_expr -> shift_expr
828
and
and_expr -> shift_expr
828
|
and_expr -> shift_expr
828
is
and_expr -> shift_expr
828
<=
and_expr -> shift_expr
828
>
and_expr -> shift_expr
828
=
and_expr -> shift_expr
828
^
and_expr -> shift_expr
828
or
and_expr -> shift_expr
828
<
and_expr -> shift_expr
828
==
and_expr -> shift_expr
829
>>
1389
829
=
shift_expr -> arith_expr
829
^
shift_expr -> arith_expr
829
<<
1390
829
or
shift_expr -> arith_expr
829
|
shift_expr -> arith_expr
829
<=
shift_expr -> arith_expr
829
is
shift_expr -> arith_expr
829
<
shift_expr -> arith_expr
829
if
shift_expr -> arith_expr
829
not
shift_expr -> arith_expr
829
in
shift_expr -> arith_expr
829
and
shift_expr -> arith_expr
829
>=
shift_expr -> arith_expr
829
==
shift_expr -> arith_expr
829
!=
shift_expr -> arith_expr
829
>
shift_expr -> arith_expr
829
NEWLINE
shift_expr -> arith_expr
829
,
shift_expr -> arith_expr
829
&
shift_expr -> arith_expr
830
+
1391
830
-
1392
830
if
arith_expr -> term
830
=
arith_expr -> term
830
<=
arith_expr -> term
830
|
arith_expr -> term
830
not
arith_expr -> term
830
^
arith_expr -> term
830
<<
arith_expr -> term
830
&
arith_expr -> term
830
==
arith_expr -> term
830
is
arith_expr -> term
830
!=
arith_expr -> term
830
>
arith_expr -> term
830
and
arith_expr -> term
830
<
arith_expr -> term
830
or
arith_expr -> term
830
NEWLINE
arith_expr -> term
830
,
arith_expr -> term
830
>=
arith_expr -> term
830
>>
arith_expr -> term
830
in
arith_expr -> term
831
<<
atom -> NUMBER
831
-
atom -> NUMBER
831
^
atom -> NUMBER
831
or
atom -> NUMBER
831
==
atom -> NUMBER
831
!=
atom -> NUMBER
831
/
atom -> NUMBER
831
and
atom -> NUMBER
831
%
atom -> NUMBER
831
,
atom -> NUMBER
831
>=
atom -> NUMBER
831
@
atom -> NUMBER
831
NEWLINE
atom -> NUMBER
831
|
atom -> NUMBER
831
[
atom -> NUMBER
831
//
atom -> NUMBER
831
.
atom -> NUMBER
831
=
atom -> NUMBER
831
not
atom -> NUMBER
831
<
atom -> NUMBER
831
>>
atom -> NUMBER
831
if
atom -> NUMBER
831
<=
atom -> NUMBER
831
>
atom -> NUMBER
831
&
atom -> NUMBER
831
is
atom -> NUMBER
831
**
atom -> NUMBER
831
in
atom -> NUMBER
831
+
atom -> NUMBER
831
(
atom -> NUMBER
831
*
atom -> NUMBER
832
}
1393
833
**
1394
833
or
power -> atom_expr
833
*
power -> atom_expr
833
>=
power -> atom_expr
833
^
power -> atom_expr
833
in
power -> atom_expr
833
!=
power -> atom_expr
833
if
power -> atom_expr
833
@
power -> atom_expr
833
=
power -> atom_expr
833
-
power -> atom_expr
833
and
power -> atom_expr
833
not
power -> atom_expr
833
==
power -> atom_expr
833
<
power -> atom_expr
833
&
power -> atom_expr
833
|
power -> atom_expr
833
//
power -> atom_expr
833
>
power -> atom_expr
833
NEWLINE
power -> atom_expr
833
,
power -> atom_expr
833
%
power -> atom_expr
833
/
power -> atom_expr
833
is
power -> atom_expr
833
<<
power -> atom_expr
833
>>
power -> atom_expr
833
+
power -> atom_expr
833
<=
power -> atom_expr
834
~
186
834
factor
187
834
STRING
188
834
shift_expr
189
834
test_list_comp
1395
834
arith_expr
191
834
term
192
834
atom_expr
193
834
]
1396
834
test
195
834
NUMBER
196
834
and_expr
197
834
{
198
834
[
199
834
-
200
834
None
201
834
(
202
834
atom
203
834
+
204
834
NAME
205
834
power
206
834
True
207
834
comparison
208
834
xor_expr
209
834
lambdef
210
834
False
211
834
not_test
212
834
or_test
213
834
and_test
214
834
lambda
215
834
not
216
834
expr
217
834
test_list
218
835
~
825
835
STRING
827
835
NUMBER
831
835
factor
1397
835
{
832
835
[
834
835
atom_expr
833
835
None
836
835
-
835
835
(
837
835
atom
838
835
+
840
835
NAME
843
835
power
845
835
True
846
835
False
850
836
not
atom -> None
836
or
atom -> None
836
==
atom -> None
836
*
atom -> None
836
-
atom -> None
836
^
atom -> None
836
>>
atom -> None
836
=
atom -> None
836
if
atom -> None
836
,
atom -> None
836
<<
atom -> None
836
and
atom -> None
836
|
atom -> None
836
NEWLINE
atom -> None
836
&
atom -> None
836
!=
atom -> None
836
@
atom -> None
836
.
atom -> None
836
/
atom -> None
836
%
atom -> None
836
>
atom -> None
836
is
atom -> None
836
<
atom -> None
836
(
atom -> None
836
**
atom -> None
836
//
atom -> None
836
in
atom -> None
836
<=
atom -> None
836
>=
atom -> None
836
+
atom -> None
836
[
atom -> None
837
~
92
837
factor
93
837
STRING
94
837
shift_expr
95
837
arith_expr
96
837
term
97
837
NUMBER
98
837
and_expr
99
837
{
100
837
atom_expr
101
837
[
102
837
-
103
837
)
1398
837
None
105
837
(
106
837
atom
107
837
test_list_comp
1399
837
+
109
837
NAME
110
837
power
111
837
test_list
112
837
True
113
837
comparison
114
837
xor_expr
115
837
lambdef
116
837
False
117
837
not_test
118
837
or_test
119
837
test
120
837
lambda
121
837
and_test
122
837
not
123
837
expr
124
838
[
1400
838
(
1401
838
//
trailer_expr -> 
838
trailer
1402
838
<<
trailer_expr -> 
838
trailer_expr
1403
838
*
trailer_expr -> 
838
in
trailer_expr -> 
838
&
trailer_expr -> 
838
.
1404
838
and
trailer_expr -> 
838
<=
trailer_expr -> 
838
,
trailer_expr -> 
838
|
trailer_expr -> 
838
or
trailer_expr -> 
838
>=
trailer_expr -> 
838
=
trailer_expr -> 
838
+
trailer_expr -> 
838
**
trailer_expr -> 
838
>>
trailer_expr -> 
838
!=
trailer_expr -> 
838
-
trailer_expr -> 
838
/
trailer_expr -> 
838
%
trailer_expr -> 
838
is
trailer_expr -> 
838
<
trailer_expr -> 
838
if
trailer_expr -> 
838
NEWLINE
trailer_expr -> 
838
>
trailer_expr -> 
838
^
trailer_expr -> 
838
==
trailer_expr -> 
838
@
trailer_expr -> 
838
not
trailer_expr -> 
839
not
xor_expr -> and_expr
839
=
xor_expr -> and_expr
839
if
xor_expr -> and_expr
839
|
xor_expr -> and_expr
839
>
xor_expr -> and_expr
839
^
1405
839
<
xor_expr -> and_expr
839
NEWLINE
xor_expr -> and_expr
839
or
xor_expr -> and_expr
839
>=
xor_expr -> and_expr
839
in
xor_expr -> and_expr
839
and
xor_expr -> and_expr
839
is
xor_expr -> and_expr
839
==
xor_expr -> and_expr
839
!=
xor_expr -> and_expr
839
<=
xor_expr -> and_expr
839
,
xor_expr -> and_expr
840
~
825
840
STRING
827
840
NUMBER
831
840
{
832
840
factor
1406
840
atom_expr
833
840
[
834
840
None
836
840
-
835
840
(
837
840
atom
838
840
+
840
840
NAME
843
840
power
845
840
True
846
840
False
850
841
or
and_test -> not_test
841
,
and_test -> not_test
841
if
and_test -> not_test
841
and
1407
841
NEWLINE
and_test -> not_test
841
=
and_test -> not_test
842
NEWLINE
test_list -> test
842
,
1408
842
=
test_list -> test
843
<=
atom -> NAME
843
@
atom -> NAME
843
>>
atom -> NAME
843
==
atom -> NAME
843
>
atom -> NAME
843
*
atom -> NAME
843
-
atom -> NAME
843
&
atom -> NAME
843
is
atom -> NAME
843
.
atom -> NAME
843
or
atom -> NAME
843
in
atom -> NAME
843
NEWLINE
atom -> NAME
843
<<
atom -> NAME
843
+
atom -> NAME
843
,
atom -> NAME
843
if
atom -> NAME
843
|
atom -> NAME
843
and
atom -> NAME
843
=
atom -> NAME
843
^
atom -> NAME
843
[
atom -> NAME
843
/
atom -> NAME
843
not
atom -> NAME
843
!=
atom -> NAME
843
%
atom -> NAME
843
<
atom -> NAME
843
>=
atom -> NAME
843
**
atom -> NAME
843
(
atom -> NAME
843
//
atom -> NAME
844
=
386
844
NEWLINE
assign -> 
844
assign
1409
845
if
factor -> power
845
is
factor -> power
845
%
factor -> power
845
==
factor -> power
845
>=
factor -> power
845
or
factor -> power
845
and
factor -> power
845
/
factor -> power
845
<
factor -> power
845
+
factor -> power
845
,
factor -> power
845
//
factor -> power
845
@
factor -> power
845
in
factor -> power
845
NEWLINE
factor -> power
845
=
factor -> power
845
<=
factor -> power
845
&
factor -> power
845
!=
factor -> power
845
<<
factor -> power
845
|
factor -> power
845
>
factor -> power
845
*
factor -> power
845
^
factor -> power
845
-
factor -> power
845
not
factor -> power
845
>>
factor -> power
846
>
atom -> True
846
|
atom -> True
846
-
atom -> True
846
NEWLINE
atom -> True
846
==
atom -> True
846
<<
atom -> True
846
if
atom -> True
846
%
atom -> True
846
/
atom -> True
846
[
atom -> True
846
*
atom -> True
846
<=
atom -> True
846
<
atom -> True
846
&
atom -> True
846
+
atom -> True
846
**
atom -> True
846
!=
atom -> True
846
>>
atom -> True
846
//
atom -> True
846
and
atom -> True
846
^
atom -> True
846
is
atom -> True
846
or
atom -> True
846
.
atom -> True
846
,
atom -> True
846
(
atom -> True
846
>=
atom -> True
846
@
atom -> True
846
=
atom -> True
846
not
atom -> True
846
in
atom -> True
847
or
not_test -> comparison
847
if
not_test -> comparison
847
and
not_test -> comparison
847
NEWLINE
not_test -> comparison
847
=
not_test -> comparison
847
,
not_test -> comparison
848
|
1410
848
not
expr -> xor_expr
848
or
expr -> xor_expr
848
==
expr -> xor_expr
848
in
expr -> xor_expr
848
if
expr -> xor_expr
848
NEWLINE
expr -> xor_expr
848
<=
expr -> xor_expr
848
is
expr -> xor_expr
848
<
expr -> xor_expr
848
>=
expr -> xor_expr
848
=
expr -> xor_expr
848
>
expr -> xor_expr
848
and
expr -> xor_expr
848
!=
expr -> xor_expr
848
,
expr -> xor_expr
849
NAME
251
849
varargslist
1411
849
vfpdef
253
849
:
1412
850
<=
atom -> False
850
*
atom -> False
850
not
atom -> False
850
!=
atom -> False
850
@
atom -> False
850
and
atom -> False
850
=
atom -> False
850
if
atom -> False
850
<<
atom -> False
850
>
atom -> False
850
,
atom -> False
850
+
atom -> False
850
/
atom -> False
850
==
atom -> False
850
&
atom -> False
850
^
atom -> False
850
in
atom -> False
850
[
atom -> False
850
is
atom -> False
850
%
atom -> False
850
>=
atom -> False
850
//
atom -> False
850
(
atom -> False
850
NEWLINE
atom -> False
850
|
atom -> False
850
<
atom -> False
850
.
atom -> False
850
or
atom -> False
850
**
atom -> False
850
>>
atom -> False
850
-
atom -> False
851
=
or_test -> and_test
851
or
1413
851
if
or_test -> and_test
851
NEWLINE
or_test -> and_test
851
,
or_test -> and_test
852
=
test -> lambdef
852
,
test -> lambdef
852
NEWLINE
test -> lambdef
853
!=
125
853
=
comparison -> expr
853
,
comparison -> expr
853
is
126
853
>=
127
853
in
128
853
<
129
853
==
131
853
<=
132
853
not
133
853
>
134
853
comp_op
1414
853
NEWLINE
comparison -> expr
853
or
comparison -> expr
853
if
comparison -> expr
853
and
comparison -> expr
854
~
825
854
factor
826
854
STRING
827
854
shift_expr
828
854
arith_expr
829
854
term
830
854
NUMBER
831
854
{
832
854
atom_expr
833
854
[
834
854
-
835
854
None
836
854
(
837
854
atom
838
854
and_expr
839
854
+
840
854
NAME
843
854
power
845
854
True
846
854
comparison
847
854
xor_expr
848
854
False
850
854
not_test
1415
854
expr
853
854
not
854
855
=
test -> or_test
855
if
1416
855
NEWLINE
test -> or_test
855
,
test -> or_test
856
~
825
856
factor
826
856
STRING
827
856
shift_expr
828
856
arith_expr
829
856
term
830
856
NUMBER
831
856
{
832
856
atom_expr
833
856
[
834
856
-
835
856
None
836
856
(
837
856
atom
838
856
and_expr
839
856
+
840
856
not_test
841
856
test
842
856
NAME
843
856
power
845
856
True
846
856
comparison
847
856
xor_expr
848
856
lambda
849
856
yield_arg
1417
856
False
850
856
and_test
851
856
=
yield_expr -> yield
856
lambdef
852
856
from
1418
856
expr
853
856
not
854
856
or_test
855
856
test_list
1419
856
NEWLINE
yield_expr -> yield
857
=
386
857
assign
1420
857
NEWLINE
assign -> 
858
~
858
858
STRING
860
858
NUMBER
863
858
{
864
858
[
866
858
atom_expr
865
858
None
868
858
-
867
858
factor
1421
858
(
869
858
atom
871
858
+
873
858
NAME
875
858
power
876
858
True
877
858
False
880
859
/
1422
859
@
1423
859
if
term -> factor
859
%
1424
859
<<
term -> factor
859
-
term -> factor
859
//
1425
859
*
1426
859
>=
term -> factor
859
or
term -> factor
859
<=
term -> factor
859
>
term -> factor
859
in
term -> factor
859
<
term -> factor
859
>>
term -> factor
859
==
term -> factor
859
=
term -> factor
859
is
term -> factor
859
+
term -> factor
859
|
term -> factor
859
!=
term -> factor
859
&
term -> factor
859
not
term -> factor
859
and
term -> factor
859
^
term -> factor
860
==
atom -> STRING
860
>
atom -> STRING
860
<=
atom -> STRING
860
&
atom -> STRING
860
.
atom -> STRING
860
>=
atom -> STRING
860
@
atom -> STRING
860
[
atom -> STRING
860
^
atom -> STRING
860
%
atom -> STRING
860
=
atom -> STRING
860
**
atom -> STRING
860
-
atom -> STRING
860
//
atom -> STRING
860
>>
atom -> STRING
860
<
atom -> STRING
860
|
atom -> STRING
860
(
atom -> STRING
860
is
atom -> STRING
860
and
atom -> STRING
860
*
atom -> STRING
860
or
atom -> STRING
860
not
atom -> STRING
860
<<
atom -> STRING
860
/
atom -> STRING
860
+
atom -> STRING
860
!=
atom -> STRING
860
in
atom -> STRING
860
if
atom -> STRING
861
&
1427
861
in
and_expr -> shift_expr
861
not
and_expr -> shift_expr
861
!=
and_expr -> shift_expr
861
>=
and_expr -> shift_expr
861
if
and_expr -> shift_expr
861
and
and_expr -> shift_expr
861
|
and_expr -> shift_expr
861
is
and_expr -> shift_expr
861
<=
and_expr -> shift_expr
861
>
and_expr -> shift_expr
861
=
and_expr -> shift_expr
861
^
and_expr -> shift_expr
861
or
and_expr -> shift_expr
861
<
and_expr -> shift_expr
861
==
and_expr -> shift_expr
862
+
1428
862
if
arith_expr -> term
862
-
1429
862
=
arith_expr -> term
862
<=
arith_expr -> term
862
|
arith_expr -> term
862
not
arith_expr -> term
862
^
arith_expr -> term
862
<<
arith_expr -> term
862
&
arith_expr -> term
862
==
arith_expr -> term
862
is
arith_expr -> term
862
!=
arith_expr -> term
862
>
arith_expr -> term
862
and
arith_expr -> term
862
<
arith_expr -> term
862
or
arith_expr -> term
862
>=
arith_expr -> term
862
>>
arith_expr -> term
862
in
arith_expr -> term
863
<<
atom -> NUMBER
863
-
atom -> NUMBER
863
^
atom -> NUMBER
863
or
atom -> NUMBER
863
==
atom -> NUMBER
863
!=
atom -> NUMBER
863
/
atom -> NUMBER
863
and
atom -> NUMBER
863
%
atom -> NUMBER
863
>=
atom -> NUMBER
863
@
atom -> NUMBER
863
|
atom -> NUMBER
863
[
atom -> NUMBER
863
//
atom -> NUMBER
863
.
atom -> NUMBER
863
=
atom -> NUMBER
863
not
atom -> NUMBER
863
<
atom -> NUMBER
863
>>
atom -> NUMBER
863
if
atom -> NUMBER
863
<=
atom -> NUMBER
863
>
atom -> NUMBER
863
&
atom -> NUMBER
863
is
atom -> NUMBER
863
**
atom -> NUMBER
863
in
atom -> NUMBER
863
+
atom -> NUMBER
863
(
atom -> NUMBER
863
*
atom -> NUMBER
864
}
1430
865
**
1431
865
or
power -> atom_expr
865
*
power -> atom_expr
865
>=
power -> atom_expr
865
^
power -> atom_expr
865
in
power -> atom_expr
865
!=
power -> atom_expr
865
if
power -> atom_expr
865
@
power -> atom_expr
865
=
power -> atom_expr
865
-
power -> atom_expr
865
and
power -> atom_expr
865
not
power -> atom_expr
865
==
power -> atom_expr
865
<
power -> atom_expr
865
&
power -> atom_expr
865
|
power -> atom_expr
865
//
power -> atom_expr
865
>
power -> atom_expr
865
%
power -> atom_expr
865
/
power -> atom_expr
865
is
power -> atom_expr
865
<<
power -> atom_expr
865
>>
power -> atom_expr
865
+
power -> atom_expr
865
<=
power -> atom_expr
866
~
186
866
factor
187
866
STRING
188
866
shift_expr
189
866
test_list_comp
1432
866
arith_expr
191
866
term
192
866
atom_expr
193
866
]
1433
866
test
195
866
NUMBER
196
866
and_expr
197
866
{
198
866
[
199
866
-
200
866
None
201
866
(
202
866
atom
203
866
+
204
866
NAME
205
866
power
206
866
True
207
866
comparison
208
866
xor_expr
209
866
lambdef
210
866
False
211
866
not_test
212
866
or_test
213
866
and_test
214
866
lambda
215
866
not
216
866
expr
217
866
test_list
218
867
~
858
867
STRING
860
867
NUMBER
863
867
factor
1434
867
{
864
867
[
866
867
atom_expr
865
867
None
868
867
-
867
867
(
869
867
atom
871
867
+
873
867
NAME
875
867
power
876
867
True
877
867
False
880
868
not
atom -> None
868
or
atom -> None
868
==
atom -> None
868
*
atom -> None
868
-
atom -> None
868
^
atom -> None
868
>>
atom -> None
868
=
atom -> None
868
if
atom -> None
868
<<
atom -> None
868
and
atom -> None
868
|
atom -> None
868
&
atom -> None
868
!=
atom -> None
868
@
atom -> None
868
.
atom -> None
868
/
atom -> None
868
%
atom -> None
868
>
atom -> None
868
is
atom -> None
868
<
atom -> None
868
(
atom -> None
868
**
atom -> None
868
//
atom -> None
868
in
atom -> None
868
<=
atom -> None
868
>=
atom -> None
868
+
atom -> None
868
[
atom -> None
869
~
92
869
factor
93
869
STRING
94
869
shift_expr
95
869
arith_expr
96
869
term
97
869
NUMBER
98
869
and_expr
99
869
{
100
869
atom_expr
101
869
[
102
869
-
103
869
None
105
869
(
106
869
atom
107
869
+
109
869
)
1435
869
NAME
110
869
test_list_comp
1436
869
power
111
869
test_list
112
869
True
113
869
comparison
114
869
xor_expr
115
869
lambdef
116
869
False
117
869
not_test
118
869
or_test
119
869
test
120
869
lambda
121
869
and_test
122
869
not
123
869
expr
124
870
>>
1437
870
=
shift_expr -> arith_expr
870
^
shift_expr -> arith_expr
870
<<
1438
870
or
shift_expr -> arith_expr
870
|
shift_expr -> arith_expr
870
<=
shift_expr -> arith_expr
870
is
shift_expr -> arith_expr
870
<
shift_expr -> arith_expr
870
if
shift_expr -> arith_expr
870
not
shift_expr -> arith_expr
870
in
shift_expr -> arith_expr
870
and
shift_expr -> arith_expr
870
>=
shift_expr -> arith_expr
870
==
shift_expr -> arith_expr
870
!=
shift_expr -> arith_expr
870
>
shift_expr -> arith_expr
870
&
shift_expr -> arith_expr
871
[
1439
871
(
1440
871
//
trailer_expr -> 
871
trailer
1441
871
<<
trailer_expr -> 
871
trailer_expr
1442
871
*
trailer_expr -> 
871
in
trailer_expr -> 
871
&
trailer_expr -> 
871
.
1443
871
and
trailer_expr -> 
871
<=
trailer_expr -> 
871
|
trailer_expr -> 
871
or
trailer_expr -> 
871
>=
trailer_expr -> 
871
=
trailer_expr -> 
871
+
trailer_expr -> 
871
**
trailer_expr -> 
871
>>
trailer_expr -> 
871
!=
trailer_expr -> 
871
-
trailer_expr -> 
871
/
trailer_expr -> 
871
%
trailer_expr -> 
871
is
trailer_expr -> 
871
<
trailer_expr -> 
871
if
trailer_expr -> 
871
>
trailer_expr -> 
871
^
trailer_expr -> 
871
==
trailer_expr -> 
871
@
trailer_expr -> 
871
not
trailer_expr -> 
872
not
xor_expr -> and_expr
872
=
xor_expr -> and_expr
872
if
xor_expr -> and_expr
872
|
xor_expr -> and_expr
872
>
xor_expr -> and_expr
872
^
1444
872
<
xor_expr -> and_expr
872
or
xor_expr -> and_expr
872
>=
xor_expr -> and_expr
872
in
xor_expr -> and_expr
872
and
xor_expr -> and_expr
872
is
xor_expr -> and_expr
872
==
xor_expr -> and_expr
872
!=
xor_expr -> and_expr
872
<=
xor_expr -> and_expr
873
~
858
873
STRING
860
873
NUMBER
863
873
{
864
873
factor
1445
873
atom_expr
865
873
[
866
873
None
868
873
-
867
873
(
869
873
atom
871
873
+
873
873
NAME
875
873
power
876
873
True
877
873
False
880
874
or
and_test -> not_test
874
if
and_test -> not_test
874
and
1446
874
=
and_test -> not_test
875
<=
atom -> NAME
875
@
atom -> NAME
875
>>
atom -> NAME
875
==
atom -> NAME
875
>
atom -> NAME
875
*
atom -> NAME
875
-
atom -> NAME
875
&
atom -> NAME
875
is
atom -> NAME
875
.
atom -> NAME
875
or
atom -> NAME
875
in
atom -> NAME
875
<<
atom -> NAME
875
+
atom -> NAME
875
if
atom -> NAME
875
|
atom -> NAME
875
and
atom -> NAME
875
=
atom -> NAME
875
^
atom -> NAME
875
/
atom -> NAME
875
[
atom -> NAME
875
not
atom -> NAME
875
!=
atom -> NAME
875
%
atom -> NAME
875
<
atom -> NAME
875
>=
atom -> NAME
875
**
atom -> NAME
875
(
atom -> NAME
875
//
atom -> NAME
876
if
factor -> power
876
is
factor -> power
876
%
factor -> power
876
==
factor -> power
876
>=
factor -> power
876
or
factor -> power
876
and
factor -> power
876
/
factor -> power
876
<
factor -> power
876
+
factor -> power
876
//
factor -> power
876
@
factor -> power
876
in
factor -> power
876
=
factor -> power
876
<=
factor -> power
876
&
factor -> power
876
!=
factor -> power
876
<<
factor -> power
876
|
factor -> power
876
>
factor -> power
876
*
factor -> power
876
^
factor -> power
876
-
factor -> power
876
not
factor -> power
876
>>
factor -> power
877
>
atom -> True
877
|
atom -> True
877
-
atom -> True
877
==
atom -> True
877
<<
atom -> True
877
if
atom -> True
877
%
atom -> True
877
/
atom -> True
877
[
atom -> True
877
*
atom -> True
877
<=
atom -> True
877
<
atom -> True
877
&
atom -> True
877
+
atom -> True
877
**
atom -> True
877
!=
atom -> True
877
>>
atom -> True
877
//
atom -> True
877
and
atom -> True
877
^
atom -> True
877
is
atom -> True
877
or
atom -> True
877
.
atom -> True
877
(
atom -> True
877
>=
atom -> True
877
@
atom -> True
877
=
atom -> True
877
not
atom -> True
877
in
atom -> True
878
if
not_test -> comparison
878
and
not_test -> comparison
878
=
not_test -> comparison
878
or
not_test -> comparison
879
|
1447
879
not
expr -> xor_expr
879
or
expr -> xor_expr
879
==
expr -> xor_expr
879
in
expr -> xor_expr
879
if
expr -> xor_expr
879
<=
expr -> xor_expr
879
is
expr -> xor_expr
879
<
expr -> xor_expr
879
>=
expr -> xor_expr
879
=
expr -> xor_expr
879
>
expr -> xor_expr
879
and
expr -> xor_expr
879
!=
expr -> xor_expr
880
<=
atom -> False
880
*
atom -> False
880
not
atom -> False
880
!=
atom -> False
880
@
atom -> False
880
and
atom -> False
880
=
atom -> False
880
if
atom -> False
880
<<
atom -> False
880
>
atom -> False
880
+
atom -> False
880
/
atom -> False
880
==
atom -> False
880
&
atom -> False
880
^
atom -> False
880
in
atom -> False
880
[
atom -> False
880
is
atom -> False
880
%
atom -> False
880
>=
atom -> False
880
//
atom -> False
880
(
atom -> False
880
|
atom -> False
880
<
atom -> False
880
.
atom -> False
880
or
atom -> False
880
**
atom -> False
880
>>
atom -> False
880
-
atom -> False
881
if
or_test -> and_test
881
or
1448
881
=
or_test -> and_test
882
NAME
251
882
varargslist
1449
882
vfpdef
253
882
:
1450
883
!=
125
883
=
comparison -> expr
883
is
126
883
>=
127
883
in
128
883
<
129
883
==
131
883
<=
132
883
not
133
883
>
134
883
comp_op
1451
883
or
comparison -> expr
883
if
comparison -> expr
883
and
comparison -> expr
884
~
858
884
factor
859
884
STRING
860
884
shift_expr
861
884
term
862
884
NUMBER
863
884
{
864
884
atom_expr
865
884
[
866
884
-
867
884
None
868
884
(
869
884
arith_expr
870
884
atom
871
884
and_expr
872
884
+
873
884
NAME
875
884
power
876
884
True
877
884
comparison
878
884
xor_expr
879
884
False
880
884
not_test
1452
884
expr
883
884
not
884
885
=
1453
886
=
test -> or_test
886
if
1454
887
=
test -> lambdef
888
~
340
888
factor
341
888
STRING
342
888
shift_expr
343
888
arith_expr
344
888
term
345
888
NUMBER
346
888
{
348
888
atom_expr
349
888
[
350
888
-
351
888
None
352
888
(
353
888
atom
354
888
+
355
888
and_expr
356
888
NAME
357
888
power
358
888
True
359
888
comparison
360
888
lambda
361
888
xor_expr
362
888
False
363
888
yield_arg
1455
888
not_test
364
888
lambdef
365
888
test
366
888
or_test
367
888
from
1456
888
and_test
368
888
not
369
888
expr
370
888
test_list
1457
888
NEWLINE
yield_expr -> yield
889
NEWLINE
expr_stmt -> test_list augassign yield_or_testlist
890
NEWLINE
yield_or_testlist -> test_list
891
NEWLINE
yield_or_testlist -> yield_expr
892
NAME
392
892
namelist
1458
893
<
factor -> ~ factor
893
in
factor -> ~ factor
893
==
factor -> ~ factor
893
|
factor -> ~ factor
893
<<
factor -> ~ factor
893
>
factor -> ~ factor
893
not
factor -> ~ factor
893
<=
factor -> ~ factor
893
//
factor -> ~ factor
893
>=
factor -> ~ factor
893
>>
factor -> ~ factor
893
-
factor -> ~ factor
893
*
factor -> ~ factor
893
/
factor -> ~ factor
893
if
factor -> ~ factor
893
^
factor -> ~ factor
893
and
factor -> ~ factor
893
is
factor -> ~ factor
893
+
factor -> ~ factor
893
or
factor -> ~ factor
893
&
factor -> ~ factor
893
NEWLINE
factor -> ~ factor
893
!=
factor -> ~ factor
893
%
factor -> ~ factor
893
@
factor -> ~ factor
894
~
397
894
factor
398
894
STRING
399
894
term
1459
894
NUMBER
402
894
{
403
894
[
405
894
atom_expr
404
894
-
406
894
None
407
894
(
408
894
atom
410
894
+
411
894
NAME
413
894
power
414
894
True
415
894
False
419
895
~
397
895
factor
398
895
STRING
399
895
NUMBER
402
895
{
403
895
[
405
895
atom_expr
404
895
-
406
895
None
407
895
(
408
895
atom
410
895
+
411
895
NAME
413
895
power
414
895
True
415
895
False
419
895
term
1460
896
~
397
896
factor
398
896
STRING
399
896
NUMBER
402
896
{
403
896
term
1461
896
[
405
896
atom_expr
404
896
-
406
896
None
407
896
(
408
896
atom
410
896
+
411
896
NAME
413
896
power
414
896
True
415
896
False
419
897
~
397
897
factor
398
897
STRING
399
897
NUMBER
402
897
{
403
897
[
405
897
atom_expr
404
897
-
406
897
None
407
897
(
408
897
atom
410
897
+
411
897
term
1462
897
NAME
413
897
power
414
897
True
415
897
False
419
898
~
397
898
factor
398
898
STRING
399
898
NUMBER
402
898
{
403
898
[
405
898
atom_expr
404
898
-
406
898
None
407
898
(
408
898
term
1463
898
atom
410
898
+
411
898
NAME
413
898
power
414
898
True
415
898
False
419
899
~
397
899
factor
398
899
STRING
399
899
shift_expr
400
899
term
401
899
NUMBER
402
899
{
403
899
atom_expr
404
899
[
405
899
-
406
899
None
407
899
(
408
899
arith_expr
409
899
atom
410
899
+
411
899
NAME
413
899
power
414
899
True
415
899
False
419
899
and_expr
1464
900
~
397
900
factor
398
900
STRING
399
900
arith_expr
1465
900
term
401
900
NUMBER
402
900
{
403
900
[
405
900
atom_expr
404
900
-
406
900
None
407
900
(
408
900
atom
410
900
+
411
900
NAME
413
900
power
414
900
True
415
900
False
419
901
~
397
901
factor
398
901
STRING
399
901
term
401
901
arith_expr
1466
901
NUMBER
402
901
{
403
901
[
405
901
atom_expr
404
901
-
406
901
None
407
901
(
408
901
atom
410
901
+
411
901
NAME
413
901
power
414
901
True
415
901
False
419
902
//
atom -> { }
902
[
atom -> { }
902
|
atom -> { }
902
>
atom -> { }
902
>=
atom -> { }
902
NEWLINE
atom -> { }
902
==
atom -> { }
902
&
atom -> { }
902
not
atom -> { }
902
**
atom -> { }
902
in
atom -> { }
902
or
atom -> { }
902
<
atom -> { }
902
!=
atom -> { }
902
+
atom -> { }
902
<<
atom -> { }
902
^
atom -> { }
902
<=
atom -> { }
902
if
atom -> { }
902
/
atom -> { }
902
is
atom -> { }
902
-
atom -> { }
902
>>
atom -> { }
902
%
atom -> { }
902
.
atom -> { }
902
(
atom -> { }
902
and
atom -> { }
902
*
atom -> { }
902
@
atom -> { }
903
~
397
903
STRING
399
903
NUMBER
402
903
factor
1467
903
{
403
903
[
405
903
atom_expr
404
903
None
407
903
-
406
903
(
408
903
atom
410
903
+
411
903
NAME
413
903
power
414
903
True
415
903
False
419
904
]
1468
905
==
atom -> [ ]
905
%
atom -> [ ]
905
**
atom -> [ ]
905
.
atom -> [ ]
905
<<
atom -> [ ]
905
not
atom -> [ ]
905
/
atom -> [ ]
905
*
atom -> [ ]
905
if
atom -> [ ]
905
!=
atom -> [ ]
905
<=
atom -> [ ]
905
@
atom -> [ ]
905
-
atom -> [ ]
905
>>
atom -> [ ]
905
^
atom -> [ ]
905
NEWLINE
atom -> [ ]
905
|
atom -> [ ]
905
<
atom -> [ ]
905
[
atom -> [ ]
905
is
atom -> [ ]
905
in
atom -> [ ]
905
>
atom -> [ ]
905
+
atom -> [ ]
905
>=
atom -> [ ]
905
and
atom -> [ ]
905
or
atom -> [ ]
905
&
atom -> [ ]
905
(
atom -> [ ]
905
//
atom -> [ ]
906
if
factor -> - factor
906
/
factor -> - factor
906
not
factor -> - factor
906
<
factor -> - factor
906
or
factor -> - factor
906
//
factor -> - factor
906
!=
factor -> - factor
906
%
factor -> - factor
906
|
factor -> - factor
906
>
factor -> - factor
906
+
factor -> - factor
906
-
factor -> - factor
906
^
factor -> - factor
906
in
factor -> - factor
906
<<
factor -> - factor
906
NEWLINE
factor -> - factor
906
&
factor -> - factor
906
<=
factor -> - factor
906
==
factor -> - factor
906
and
factor -> - factor
906
@
factor -> - factor
906
>=
factor -> - factor
906
is
factor -> - factor
906
>>
factor -> - factor
906
*
factor -> - factor
907
-
atom -> ( )
907
==
atom -> ( )
907
/
atom -> ( )
907
<=
atom -> ( )
907
(
atom -> ( )
907
&
atom -> ( )
907
[
atom -> ( )
907
^
atom -> ( )
907
or
atom -> ( )
907
+
atom -> ( )
907
NEWLINE
atom -> ( )
907
>>
atom -> ( )
907
is
atom -> ( )
907
*
atom -> ( )
907
if
atom -> ( )
907
and
atom -> ( )
907
>=
atom -> ( )
907
>
atom -> ( )
907
@
atom -> ( )
907
in
atom -> ( )
907
not
atom -> ( )
907
<
atom -> ( )
907
.
atom -> ( )
907
//
atom -> ( )
907
%
atom -> ( )
907
<<
atom -> ( )
907
|
atom -> ( )
907
**
atom -> ( )
907
!=
atom -> ( )
908
)
1469
909
~
397
909
factor
398
909
STRING
399
909
term
401
909
NUMBER
402
909
{
403
909
[
405
909
atom_expr
404
909
-
406
909
shift_expr
1470
909
None
407
909
(
408
909
arith_expr
409
909
atom
410
909
+
411
909
NAME
413
909
power
414
909
True
415
909
False
419
910
~
397
910
factor
398
910
STRING
399
910
term
401
910
NUMBER
402
910
{
403
910
[
405
910
atom_expr
404
910
-
406
910
None
407
910
(
408
910
arith_expr
409
910
atom
410
910
+
411
910
shift_expr
1471
910
NAME
413
910
power
414
910
True
415
910
False
419
911
~
544
911
factor
545
911
STRING
546
911
shift_expr
547
911
expr
548
911
arith_expr
549
911
term
550
911
atom_expr
551
911
NUMBER
552
911
subscript
553
911
{
554
911
[
555
911
-
556
911
None
557
911
+
558
911
(
559
911
subscriptlist
1472
911
atom
561
911
and_expr
562
911
NAME
563
911
power
564
911
True
565
911
comparison
566
911
xor_expr
567
911
lambda
568
911
False
569
911
not_test
570
911
and_test
571
911
test
572
911
or_test
573
911
not
574
911
:
maybe_test -> 
911
maybe_test
575
911
lambdef
576
912
)
1473
912
~
579
912
factor
580
912
STRING
581
912
shift_expr
582
912
arith_expr
583
912
term
584
912
NUMBER
585
912
and_expr
586
912
{
587
912
atom_expr
589
912
[
590
912
-
591
912
None
592
912
(
593
912
atom
594
912
+
595
912
not_test
596
912
arglist
1474
912
test
597
912
NAME
598
912
power
599
912
True
600
912
comparison
601
912
xor_expr
602
912
lambdef
603
912
False
604
912
argument
605
912
and_test
606
912
lambda
607
912
or_test
608
912
expr
609
912
not
610
912
**
611
912
*
612
913
[
911
913
(
912
913
//
trailer_expr -> 
913
trailer
913
913
<<
trailer_expr -> 
913
*
trailer_expr -> 
913
in
trailer_expr -> 
913
trailer_expr
1475
913
&
trailer_expr -> 
913
and
trailer_expr -> 
913
.
915
913
<=
trailer_expr -> 
913
|
trailer_expr -> 
913
or
trailer_expr -> 
913
>=
trailer_expr -> 
913
+
trailer_expr -> 
913
**
trailer_expr -> 
913
>>
trailer_expr -> 
913
!=
trailer_expr -> 
913
-
trailer_expr -> 
913
/
trailer_expr -> 
913
%
trailer_expr -> 
913
is
trailer_expr -> 
913
<
trailer_expr -> 
913
>
trailer_expr -> 
913
NEWLINE
trailer_expr -> 
913
if
trailer_expr -> 
913
^
trailer_expr -> 
913
==
trailer_expr -> 
913
@
trailer_expr -> 
913
not
trailer_expr -> 
914
<=
atom_expr -> atom trailer_expr
914
or
atom_expr -> atom trailer_expr
914
*
atom_expr -> atom trailer_expr
914
>=
atom_expr -> atom trailer_expr
914
**
atom_expr -> atom trailer_expr
914
&
atom_expr -> atom trailer_expr
914
%
atom_expr -> atom trailer_expr
914
if
atom_expr -> atom trailer_expr
914
+
atom_expr -> atom trailer_expr
914
//
atom_expr -> atom trailer_expr
914
is
atom_expr -> atom trailer_expr
914
!=
atom_expr -> atom trailer_expr
914
|
atom_expr -> atom trailer_expr
914
<
atom_expr -> atom trailer_expr
914
@
atom_expr -> atom trailer_expr
914
not
atom_expr -> atom trailer_expr
914
NEWLINE
atom_expr -> atom trailer_expr
914
-
atom_expr -> atom trailer_expr
914
in
atom_expr -> atom trailer_expr
914
/
atom_expr -> atom trailer_expr
914
^
atom_expr -> atom trailer_expr
914
>
atom_expr -> atom trailer_expr
914
==
atom_expr -> atom trailer_expr
914
<<
atom_expr -> atom trailer_expr
914
>>
atom_expr -> atom trailer_expr
914
and
atom_expr -> atom trailer_expr
915
NAME
1476
916
<
factor -> + factor
916
in
factor -> + factor
916
|
factor -> + factor
916
==
factor -> + factor
916
>
factor -> + factor
916
-
factor -> + factor
916
and
factor -> + factor
916
*
factor -> + factor
916
if
factor -> + factor
916
%
factor -> + factor
916
@
factor -> + factor
916
is
factor -> + factor
916
//
factor -> + factor
916
&
factor -> + factor
916
^
factor -> + factor
916
>=
factor -> + factor
916
not
factor -> + factor
916
/
factor -> + factor
916
NEWLINE
factor -> + factor
916
or
factor -> + factor
916
!=
factor -> + factor
916
<<
factor -> + factor
916
>>
factor -> + factor
916
<=
factor -> + factor
916
+
factor -> + factor
917
~
397
917
factor
398
917
STRING
399
917
shift_expr
400
917
term
401
917
NUMBER
402
917
{
403
917
atom_expr
404
917
[
405
917
xor_expr
1477
917
-
406
917
None
407
917
(
408
917
arith_expr
409
917
atom
410
917
+
411
917
and_expr
412
917
NAME
413
917
power
414
917
True
415
917
False
419
918
~
397
918
factor
398
918
STRING
399
918
shift_expr
400
918
term
401
918
NUMBER
402
918
{
403
918
atom_expr
404
918
[
405
918
-
406
918
None
407
918
(
408
918
arith_expr
409
918
atom
410
918
+
411
918
and_expr
412
918
NAME
413
918
power
414
918
True
415
918
comparison
416
918
lambda
417
918
xor_expr
418
918
False
419
918
not_test
420
918
lambdef
421
918
or_test
423
918
and_test
424
918
not
425
918
expr
426
918
test
1478
919
:
1479
920
~
397
920
factor
398
920
STRING
399
920
shift_expr
400
920
term
401
920
NUMBER
402
920
{
403
920
atom_expr
404
920
[
405
920
-
406
920
None
407
920
(
408
920
arith_expr
409
920
atom
410
920
+
411
920
and_expr
412
920
NAME
413
920
power
414
920
True
415
920
xor_expr
418
920
False
419
920
expr
1480
921
~
397
921
factor
398
921
STRING
399
921
shift_expr
400
921
term
401
921
NUMBER
402
921
{
403
921
atom_expr
404
921
[
405
921
and_test
1481
921
-
406
921
None
407
921
(
408
921
arith_expr
409
921
atom
410
921
+
411
921
and_expr
412
921
NAME
413
921
power
414
921
True
415
921
comparison
416
921
xor_expr
418
921
False
419
921
not_test
420
921
not
425
921
expr
426
922
~
509
922
factor
510
922
STRING
511
922
shift_expr
512
922
term
513
922
NUMBER
514
922
{
515
922
atom_expr
516
922
[
517
922
-
518
922
None
519
922
(
520
922
atom
521
922
arith_expr
522
922
False
523
922
+
524
922
NAME
526
922
power
527
922
True
528
922
xor_expr
529
922
comparison
530
922
and_expr
531
922
not_test
532
922
not
533
922
expr
534
922
and_test
535
922
or_test
1482
923
or_test
1483
923
factor
398
923
~
397
923
shift_expr
400
923
STRING
399
923
term
401
923
NUMBER
402
923
{
403
923
atom_expr
404
923
[
405
923
-
406
923
None
407
923
(
408
923
arith_expr
409
923
atom
410
923
+
411
923
and_expr
412
923
NAME
413
923
power
414
923
True
415
923
comparison
416
923
xor_expr
418
923
False
419
923
not_test
420
923
and_test
424
923
not
425
923
expr
426
924
and
not_test -> not not_test
924
if
not_test -> not not_test
924
or
not_test -> not not_test
924
NEWLINE
not_test -> not not_test
925
~
397
925
factor
398
925
STRING
399
925
shift_expr
400
925
term
401
925
NUMBER
402
925
{
403
925
atom_expr
404
925
[
405
925
-
406
925
None
407
925
(
408
925
arith_expr
409
925
atom
410
925
+
411
925
and_expr
412
925
NAME
413
925
power
414
925
True
415
925
xor_expr
418
925
False
419
925
comparison
1484
925
expr
426
926
<=
term -> factor / term
926
!=
term -> factor / term
926
and
term -> factor / term
926
or
term -> factor / term
926
)
term -> factor / term
926
for
term -> factor / term
926
|
term -> factor / term
926
^
term -> factor / term
926
>>
term -> factor / term
926
==
term -> factor / term
926
>
term -> factor / term
926
if
term -> factor / term
926
&
term -> factor / term
926
<<
term -> factor / term
926
+
term -> factor / term
926
-
term -> factor / term
926
not
term -> factor / term
926
in
term -> factor / term
926
<
term -> factor / term
926
is
term -> factor / term
926
>=
term -> factor / term
926
,
term -> factor / term
927
is
term -> factor @ term
927
for
term -> factor @ term
927
and
term -> factor @ term
927
>
term -> factor @ term
927
not
term -> factor @ term
927
in
term -> factor @ term
927
==
term -> factor @ term
927
<
term -> factor @ term
927
,
term -> factor @ term
927
or
term -> factor @ term
927
!=
term -> factor @ term
927
<<
term -> factor @ term
927
<=
term -> factor @ term
927
if
term -> factor @ term
927
|
term -> factor @ term
927
+
term -> factor @ term
927
-
term -> factor @ term
927
)
term -> factor @ term
927
&
term -> factor @ term
927
>=
term -> factor @ term
927
>>
term -> factor @ term
927
^
term -> factor @ term
928
>
term -> factor % term
928
!=
term -> factor % term
928
&
term -> factor % term
928
>=
term -> factor % term
928
or
term -> factor % term
928
)
term -> factor % term
928
==
term -> factor % term
928
^
term -> factor % term
928
in
term -> factor % term
928
,
term -> factor % term
928
for
term -> factor % term
928
|
term -> factor % term
928
and
term -> factor % term
928
if
term -> factor % term
928
not
term -> factor % term
928
is
term -> factor % term
928
<
term -> factor % term
928
>>
term -> factor % term
928
-
term -> factor % term
928
<=
term -> factor % term
928
<<
term -> factor % term
928
+
term -> factor % term
929
+
term -> factor // term
929
==
term -> factor // term
929
for
term -> factor // term
929
<<
term -> factor // term
929
<
term -> factor // term
929
if
term -> factor // term
929
in
term -> factor // term
929
!=
term -> factor // term
929
>
term -> factor // term
929
not
term -> factor // term
929
>=
term -> factor // term
929
and
term -> factor // term
929
is
term -> factor // term
929
-
term -> factor // term
929
&
term -> factor // term
929
|
term -> factor // term
929
,
term -> factor // term
929
^
term -> factor // term
929
<=
term -> factor // term
929
or
term -> factor // term
929
>>
term -> factor // term
929
)
term -> factor // term
930
&
term -> factor * term
930
-
term -> factor * term
930
for
term -> factor * term
930
in
term -> factor * term
930
or
term -> factor * term
930
<=
term -> factor * term
930
,
term -> factor * term
930
|
term -> factor * term
930
and
term -> factor * term
930
not
term -> factor * term
930
<<
term -> factor * term
930
==
term -> factor * term
930
)
term -> factor * term
930
if
term -> factor * term
930
>
term -> factor * term
930
>>
term -> factor * term
930
<
term -> factor * term
930
!=
term -> factor * term
930
>=
term -> factor * term
930
^
term -> factor * term
930
+
term -> factor * term
930
is
term -> factor * term
931
for
and_expr -> shift_expr & and_expr
931
)
and_expr -> shift_expr & and_expr
931
|
and_expr -> shift_expr & and_expr
931
!=
and_expr -> shift_expr & and_expr
931
,
and_expr -> shift_expr & and_expr
931
>=
and_expr -> shift_expr & and_expr
931
not
and_expr -> shift_expr & and_expr
931
and
and_expr -> shift_expr & and_expr
931
is
and_expr -> shift_expr & and_expr
931
in
and_expr -> shift_expr & and_expr
931
or
and_expr -> shift_expr & and_expr
931
==
and_expr -> shift_expr & and_expr
931
^
and_expr -> shift_expr & and_expr
931
>
and_expr -> shift_expr & and_expr
931
<
and_expr -> shift_expr & and_expr
931
if
and_expr -> shift_expr & and_expr
931
<=
and_expr -> shift_expr & and_expr
932
>=
shift_expr -> arith_expr >> shift_expr
932
not
shift_expr -> arith_expr >> shift_expr
932
>
shift_expr -> arith_expr >> shift_expr
932
^
shift_expr -> arith_expr >> shift_expr
932
for
shift_expr -> arith_expr >> shift_expr
932
,
shift_expr -> arith_expr >> shift_expr
932
is
shift_expr -> arith_expr >> shift_expr
932
&
shift_expr -> arith_expr >> shift_expr
932
!=
shift_expr -> arith_expr >> shift_expr
932
<=
shift_expr -> arith_expr >> shift_expr
932
and
shift_expr -> arith_expr >> shift_expr
932
if
shift_expr -> arith_expr >> shift_expr
932
==
shift_expr -> arith_expr >> shift_expr
932
or
shift_expr -> arith_expr >> shift_expr
932
in
shift_expr -> arith_expr >> shift_expr
932
|
shift_expr -> arith_expr >> shift_expr
932
<
shift_expr -> arith_expr >> shift_expr
932
)
shift_expr -> arith_expr >> shift_expr
933
,
shift_expr -> arith_expr << shift_expr
933
>=
shift_expr -> arith_expr << shift_expr
933
in
shift_expr -> arith_expr << shift_expr
933
>
shift_expr -> arith_expr << shift_expr
933
|
shift_expr -> arith_expr << shift_expr
933
!=
shift_expr -> arith_expr << shift_expr
933
<=
shift_expr -> arith_expr << shift_expr
933
)
shift_expr -> arith_expr << shift_expr
933
&
shift_expr -> arith_expr << shift_expr
933
not
shift_expr -> arith_expr << shift_expr
933
^
shift_expr -> arith_expr << shift_expr
933
<
shift_expr -> arith_expr << shift_expr
933
==
shift_expr -> arith_expr << shift_expr
933
if
shift_expr -> arith_expr << shift_expr
933
or
shift_expr -> arith_expr << shift_expr
933
for
shift_expr -> arith_expr << shift_expr
933
is
shift_expr -> arith_expr << shift_expr
933
and
shift_expr -> arith_expr << shift_expr
934
for
arith_expr -> term + arith_expr
934
>>
arith_expr -> term + arith_expr
934
^
arith_expr -> term + arith_expr
934
<
arith_expr -> term + arith_expr
934
|
arith_expr -> term + arith_expr
934
and
arith_expr -> term + arith_expr
934
!=
arith_expr -> term + arith_expr
934
or
arith_expr -> term + arith_expr
934
not
arith_expr -> term + arith_expr
934
<=
arith_expr -> term + arith_expr
934
>
arith_expr -> term + arith_expr
934
,
arith_expr -> term + arith_expr
934
if
arith_expr -> term + arith_expr
934
is
arith_expr -> term + arith_expr
934
==
arith_expr -> term + arith_expr
934
&
arith_expr -> term + arith_expr
934
>=
arith_expr -> term + arith_expr
934
)
arith_expr -> term + arith_expr
934
in
arith_expr -> term + arith_expr
934
<<
arith_expr -> term + arith_expr
935
==
arith_expr -> term - arith_expr
935
)
arith_expr -> term - arith_expr
935
is
arith_expr -> term - arith_expr
935
<=
arith_expr -> term - arith_expr
935
not
arith_expr -> term - arith_expr
935
<<
arith_expr -> term - arith_expr
935
&
arith_expr -> term - arith_expr
935
|
arith_expr -> term - arith_expr
935
and
arith_expr -> term - arith_expr
935
or
arith_expr -> term - arith_expr
935
,
arith_expr -> term - arith_expr
935
for
arith_expr -> term - arith_expr
935
>>
arith_expr -> term - arith_expr
935
if
arith_expr -> term - arith_expr
935
>=
arith_expr -> term - arith_expr
935
<
arith_expr -> term - arith_expr
935
^
arith_expr -> term - arith_expr
935
>
arith_expr -> term - arith_expr
935
!=
arith_expr -> term - arith_expr
935
in
arith_expr -> term - arith_expr
936
==
xor_expr -> and_expr ^ xor_expr
936
!=
xor_expr -> and_expr ^ xor_expr
936
>
xor_expr -> and_expr ^ xor_expr
936
not
xor_expr -> and_expr ^ xor_expr
936
if
xor_expr -> and_expr ^ xor_expr
936
is
xor_expr -> and_expr ^ xor_expr
936
)
xor_expr -> and_expr ^ xor_expr
936
<=
xor_expr -> and_expr ^ xor_expr
936
,
xor_expr -> and_expr ^ xor_expr
936
for
xor_expr -> and_expr ^ xor_expr
936
|
xor_expr -> and_expr ^ xor_expr
936
>=
xor_expr -> and_expr ^ xor_expr
936
and
xor_expr -> and_expr ^ xor_expr
936
in
xor_expr -> and_expr ^ xor_expr
936
<
xor_expr -> and_expr ^ xor_expr
936
or
xor_expr -> and_expr ^ xor_expr
937
@
power -> atom_expr ** factor
937
==
power -> atom_expr ** factor
937
)
power -> atom_expr ** factor
937
&
power -> atom_expr ** factor
937
-
power -> atom_expr ** factor
937
>
power -> atom_expr ** factor
937
and
power -> atom_expr ** factor
937
|
power -> atom_expr ** factor
937
<=
power -> atom_expr ** factor
937
%
power -> atom_expr ** factor
937
or
power -> atom_expr ** factor
937
*
power -> atom_expr ** factor
937
not
power -> atom_expr ** factor
937
in
power -> atom_expr ** factor
937
<<
power -> atom_expr ** factor
937
//
power -> atom_expr ** factor
937
/
power -> atom_expr ** factor
937
>>
power -> atom_expr ** factor
937
,
power -> atom_expr ** factor
937
^
power -> atom_expr ** factor
937
if
power -> atom_expr ** factor
937
!=
power -> atom_expr ** factor
937
for
power -> atom_expr ** factor
937
is
power -> atom_expr ** factor
937
<
power -> atom_expr ** factor
937
+
power -> atom_expr ** factor
937
>=
power -> atom_expr ** factor
938
/
atom -> [ test_list_comp ]
938
,
atom -> [ test_list_comp ]
938
*
atom -> [ test_list_comp ]
938
or
atom -> [ test_list_comp ]
938
|
atom -> [ test_list_comp ]
938
==
atom -> [ test_list_comp ]
938
is
atom -> [ test_list_comp ]
938
-
atom -> [ test_list_comp ]
938
**
atom -> [ test_list_comp ]
938
&
atom -> [ test_list_comp ]
938
(
atom -> [ test_list_comp ]
938
<
atom -> [ test_list_comp ]
938
@
atom -> [ test_list_comp ]
938
//
atom -> [ test_list_comp ]
938
>
atom -> [ test_list_comp ]
938
)
atom -> [ test_list_comp ]
938
if
atom -> [ test_list_comp ]
938
in
atom -> [ test_list_comp ]
938
^
atom -> [ test_list_comp ]
938
<<
atom -> [ test_list_comp ]
938
for
atom -> [ test_list_comp ]
938
[
atom -> [ test_list_comp ]
938
!=
atom -> [ test_list_comp ]
938
<=
atom -> [ test_list_comp ]
938
and
atom -> [ test_list_comp ]
938
%
atom -> [ test_list_comp ]
938
not
atom -> [ test_list_comp ]
938
+
atom -> [ test_list_comp ]
938
>=
atom -> [ test_list_comp ]
938
>>
atom -> [ test_list_comp ]
938
.
atom -> [ test_list_comp ]
939
@
atom -> ( test_list_comp )
939
>>
atom -> ( test_list_comp )
939
<<
atom -> ( test_list_comp )
939
==
atom -> ( test_list_comp )
939
is
atom -> ( test_list_comp )
939
or
atom -> ( test_list_comp )
939
<=
atom -> ( test_list_comp )
939
[
atom -> ( test_list_comp )
939
%
atom -> ( test_list_comp )
939
if
atom -> ( test_list_comp )
939
^
atom -> ( test_list_comp )
939
<
atom -> ( test_list_comp )
939
and
atom -> ( test_list_comp )
939
.
atom -> ( test_list_comp )
939
+
atom -> ( test_list_comp )
939
&
atom -> ( test_list_comp )
939
!=
atom -> ( test_list_comp )
939
in
atom -> ( test_list_comp )
939
**
atom -> ( test_list_comp )
939
not
atom -> ( test_list_comp )
939
-
atom -> ( test_list_comp )
939
(
atom -> ( test_list_comp )
939
*
atom -> ( test_list_comp )
939
|
atom -> ( test_list_comp )
939
//
atom -> ( test_list_comp )
939
>
atom -> ( test_list_comp )
939
for
atom -> ( test_list_comp )
939
>=
atom -> ( test_list_comp )
939
,
atom -> ( test_list_comp )
939
)
atom -> ( test_list_comp )
939
/
atom -> ( test_list_comp )
940
]
1485
941
)
1486
942
,
trailer -> ( )
942
/
trailer -> ( )
942
[
trailer -> ( )
942
(
trailer -> ( )
942
|
trailer -> ( )
942
<=
trailer -> ( )
942
in
trailer -> ( )
942
not
trailer -> ( )
942
>>
trailer -> ( )
942
^
trailer -> ( )
942
.
trailer -> ( )
942
**
trailer -> ( )
942
if
trailer -> ( )
942
)
trailer -> ( )
942
+
trailer -> ( )
942
is
trailer -> ( )
942
<
trailer -> ( )
942
>
trailer -> ( )
942
==
trailer -> ( )
942
//
trailer -> ( )
942
<<
trailer -> ( )
942
*
trailer -> ( )
942
for
trailer -> ( )
942
-
trailer -> ( )
942
>=
trailer -> ( )
942
%
trailer -> ( )
942
and
trailer -> ( )
942
@
trailer -> ( )
942
&
trailer -> ( )
942
!=
trailer -> ( )
942
or
trailer -> ( )
943
<=
trailer -> . NAME
943
if
trailer -> . NAME
943
<
trailer -> . NAME
943
%
trailer -> . NAME
943
.
trailer -> . NAME
943
//
trailer -> . NAME
943
)
trailer -> . NAME
943
for
trailer -> . NAME
943
|
trailer -> . NAME
943
==
trailer -> . NAME
943
>=
trailer -> . NAME
943
[
trailer -> . NAME
943
^
trailer -> . NAME
943
<<
trailer -> . NAME
943
in
trailer -> . NAME
943
&
trailer -> . NAME
943
or
trailer -> . NAME
943
*
trailer -> . NAME
943
(
trailer -> . NAME
943
and
trailer -> . NAME
943
-
trailer -> . NAME
943
+
trailer -> . NAME
943
!=
trailer -> . NAME
943
not
trailer -> . NAME
943
**
trailer -> . NAME
943
>>
trailer -> . NAME
943
@
trailer -> . NAME
943
/
trailer -> . NAME
943
is
trailer -> . NAME
943
>
trailer -> . NAME
943
,
trailer -> . NAME
944
is
trailer_expr -> trailer trailer_expr
944
!=
trailer_expr -> trailer trailer_expr
944
<<
trailer_expr -> trailer trailer_expr
944
)
trailer_expr -> trailer trailer_expr
944
and
trailer_expr -> trailer trailer_expr
944
&
trailer_expr -> trailer trailer_expr
944
//
trailer_expr -> trailer trailer_expr
944
|
trailer_expr -> trailer trailer_expr
944
==
trailer_expr -> trailer trailer_expr
944
<
trailer_expr -> trailer trailer_expr
944
or
trailer_expr -> trailer trailer_expr
944
^
trailer_expr -> trailer trailer_expr
944
<=
trailer_expr -> trailer trailer_expr
944
@
trailer_expr -> trailer trailer_expr
944
in
trailer_expr -> trailer trailer_expr
944
not
trailer_expr -> trailer trailer_expr
944
for
trailer_expr -> trailer trailer_expr
944
*
trailer_expr -> trailer trailer_expr
944
+
trailer_expr -> trailer trailer_expr
944
if
trailer_expr -> trailer trailer_expr
944
**
trailer_expr -> trailer trailer_expr
944
>>
trailer_expr -> trailer trailer_expr
944
>=
trailer_expr -> trailer trailer_expr
944
%
trailer_expr -> trailer trailer_expr
944
-
trailer_expr -> trailer trailer_expr
944
>
trailer_expr -> trailer trailer_expr
944
/
trailer_expr -> trailer trailer_expr
944
,
trailer_expr -> trailer trailer_expr
945
and
expr -> xor_expr | expr
945
in
expr -> xor_expr | expr
945
>=
expr -> xor_expr | expr
945
for
expr -> xor_expr | expr
945
is
expr -> xor_expr | expr
945
==
expr -> xor_expr | expr
945
or
expr -> xor_expr | expr
945
<
expr -> xor_expr | expr
945
if
expr -> xor_expr | expr
945
)
expr -> xor_expr | expr
945
,
expr -> xor_expr | expr
945
not
expr -> xor_expr | expr
945
!=
expr -> xor_expr | expr
945
<=
expr -> xor_expr | expr
945
>
expr -> xor_expr | expr
946
,
and_test -> not_test and and_test
946
if
and_test -> not_test and and_test
946
)
and_test -> not_test and and_test
946
for
and_test -> not_test and and_test
946
or
and_test -> not_test and and_test
947
else
1487
948
~
948
948
STRING
950
948
NUMBER
954
948
{
955
948
[
957
948
atom_expr
956
948
None
959
948
-
958
948
factor
1488
948
(
960
948
atom
961
948
+
962
948
NAME
964
948
power
965
948
True
966
948
False
969
949
/
1489
949
@
1490
949
if
term -> factor
949
%
1491
949
<<
term -> factor
949
-
term -> factor
949
//
1492
949
*
1493
949
>=
term -> factor
949
or
term -> factor
949
<=
term -> factor
949
>
term -> factor
949
)
term -> factor
949
in
term -> factor
949
<
term -> factor
949
>>
term -> factor
949
,
term -> factor
949
==
term -> factor
949
is
term -> factor
949
+
term -> factor
949
|
term -> factor
949
!=
term -> factor
949
&
term -> factor
949
not
term -> factor
949
and
term -> factor
949
^
term -> factor
950
==
atom -> STRING
950
>
atom -> STRING
950
<=
atom -> STRING
950
,
atom -> STRING
950
&
atom -> STRING
950
.
atom -> STRING
950
>=
atom -> STRING
950
@
atom -> STRING
950
[
atom -> STRING
950
^
atom -> STRING
950
%
atom -> STRING
950
**
atom -> STRING
950
-
atom -> STRING
950
//
atom -> STRING
950
>>
atom -> STRING
950
<
atom -> STRING
950
|
atom -> STRING
950
(
atom -> STRING
950
is
atom -> STRING
950
and
atom -> STRING
950
*
atom -> STRING
950
or
atom -> STRING
950
not
atom -> STRING
950
<<
atom -> STRING
950
/
atom -> STRING
950
+
atom -> STRING
950
!=
atom -> STRING
950
in
atom -> STRING
950
)
atom -> STRING
950
if
atom -> STRING
951
&
1494
951
in
and_expr -> shift_expr
951
,
and_expr -> shift_expr
951
not
and_expr -> shift_expr
951
!=
and_expr -> shift_expr
951
>=
and_expr -> shift_expr
951
if
and_expr -> shift_expr
951
)
and_expr -> shift_expr
951
and
and_expr -> shift_expr
951
|
and_expr -> shift_expr
951
is
and_expr -> shift_expr
951
<=
and_expr -> shift_expr
951
>
and_expr -> shift_expr
951
^
and_expr -> shift_expr
951
or
and_expr -> shift_expr
951
<
and_expr -> shift_expr
951
==
and_expr -> shift_expr
952
>>
1495
952
^
shift_expr -> arith_expr
952
<<
1496
952
or
shift_expr -> arith_expr
952
|
shift_expr -> arith_expr
952
<=
shift_expr -> arith_expr
952
is
shift_expr -> arith_expr
952
<
shift_expr -> arith_expr
952
if
shift_expr -> arith_expr
952
not
shift_expr -> arith_expr
952
in
shift_expr -> arith_expr
952
and
shift_expr -> arith_expr
952
>=
shift_expr -> arith_expr
952
==
shift_expr -> arith_expr
952
)
shift_expr -> arith_expr
952
!=
shift_expr -> arith_expr
952
>
shift_expr -> arith_expr
952
,
shift_expr -> arith_expr
952
&
shift_expr -> arith_expr
953
+
1497
953
-
1498
953
if
arith_expr -> term
953
<=
arith_expr -> term
953
|
arith_expr -> term
953
not
arith_expr -> term
953
^
arith_expr -> term
953
<<
arith_expr -> term
953
&
arith_expr -> term
953
==
arith_expr -> term
953
is
arith_expr -> term
953
!=
arith_expr -> term
953
>
arith_expr -> term
953
and
arith_expr -> term
953
<
arith_expr -> term
953
or
arith_expr -> term
953
,
arith_expr -> term
953
)
arith_expr -> term
953
>=
arith_expr -> term
953
>>
arith_expr -> term
953
in
arith_expr -> term
954
<<
atom -> NUMBER
954
)
atom -> NUMBER
954
-
atom -> NUMBER
954
^
atom -> NUMBER
954
or
atom -> NUMBER
954
==
atom -> NUMBER
954
!=
atom -> NUMBER
954
/
atom -> NUMBER
954
and
atom -> NUMBER
954
%
atom -> NUMBER
954
,
atom -> NUMBER
954
>=
atom -> NUMBER
954
@
atom -> NUMBER
954
|
atom -> NUMBER
954
[
atom -> NUMBER
954
//
atom -> NUMBER
954
.
atom -> NUMBER
954
not
atom -> NUMBER
954
<
atom -> NUMBER
954
>>
atom -> NUMBER
954
if
atom -> NUMBER
954
<=
atom -> NUMBER
954
>
atom -> NUMBER
954
&
atom -> NUMBER
954
is
atom -> NUMBER
954
**
atom -> NUMBER
954
in
atom -> NUMBER
954
+
atom -> NUMBER
954
(
atom -> NUMBER
954
*
atom -> NUMBER
955
}
1499
956
**
1500
956
or
power -> atom_expr
956
*
power -> atom_expr
956
>=
power -> atom_expr
956
^
power -> atom_expr
956
in
power -> atom_expr
956
!=
power -> atom_expr
956
if
power -> atom_expr
956
@
power -> atom_expr
956
-
power -> atom_expr
956
and
power -> atom_expr
956
not
power -> atom_expr
956
==
power -> atom_expr
956
<
power -> atom_expr
956
&
power -> atom_expr
956
|
power -> atom_expr
956
//
power -> atom_expr
956
>
power -> atom_expr
956
,
power -> atom_expr
956
%
power -> atom_expr
956
/
power -> atom_expr
956
is
power -> atom_expr
956
<<
power -> atom_expr
956
>>
power -> atom_expr
956
+
power -> atom_expr
956
)
power -> atom_expr
956
<=
power -> atom_expr
957
~
186
957
factor
187
957
STRING
188
957
shift_expr
189
957
test_list_comp
1501
957
arith_expr
191
957
term
192
957
atom_expr
193
957
]
1502
957
test
195
957
NUMBER
196
957
and_expr
197
957
{
198
957
[
199
957
-
200
957
None
201
957
(
202
957
atom
203
957
+
204
957
NAME
205
957
power
206
957
True
207
957
comparison
208
957
xor_expr
209
957
lambdef
210
957
False
211
957
not_test
212
957
or_test
213
957
and_test
214
957
lambda
215
957
not
216
957
expr
217
957
test_list
218
958
~
948
958
STRING
950
958
NUMBER
954
958
factor
1503
958
{
955
958
[
957
958
atom_expr
956
958
None
959
958
-
958
958
(
960
958
atom
961
958
+
962
958
NAME
964
958
power
965
958
True
966
958
False
969
959
not
atom -> None
959
or
atom -> None
959
==
atom -> None
959
*
atom -> None
959
-
atom -> None
959
^
atom -> None
959
>>
atom -> None
959
if
atom -> None
959
,
atom -> None
959
<<
atom -> None
959
and
atom -> None
959
|
atom -> None
959
&
atom -> None
959
!=
atom -> None
959
@
atom -> None
959
.
atom -> None
959
/
atom -> None
959
%
atom -> None
959
>
atom -> None
959
is
atom -> None
959
<
atom -> None
959
)
atom -> None
959
(
atom -> None
959
**
atom -> None
959
//
atom -> None
959
in
atom -> None
959
<=
atom -> None
959
>=
atom -> None
959
+
atom -> None
959
[
atom -> None
960
~
92
960
factor
93
960
STRING
94
960
shift_expr
95
960
arith_expr
96
960
term
97
960
NUMBER
98
960
and_expr
99
960
{
100
960
atom_expr
101
960
[
102
960
-
103
960
)
1504
960
None
105
960
(
106
960
atom
107
960
test_list_comp
1505
960
+
109
960
NAME
110
960
power
111
960
test_list
112
960
True
113
960
comparison
114
960
xor_expr
115
960
lambdef
116
960
False
117
960
not_test
118
960
or_test
119
960
test
120
960
lambda
121
960
and_test
122
960
not
123
960
expr
124
961
[
1506
961
(
1507
961
//
trailer_expr -> 
961
trailer
1508
961
<<
trailer_expr -> 
961
trailer_expr
1509
961
*
trailer_expr -> 
961
in
trailer_expr -> 
961
&
trailer_expr -> 
961
.
1510
961
and
trailer_expr -> 
961
<=
trailer_expr -> 
961
,
trailer_expr -> 
961
|
trailer_expr -> 
961
or
trailer_expr -> 
961
>=
trailer_expr -> 
961
+
trailer_expr -> 
961
**
trailer_expr -> 
961
>>
trailer_expr -> 
961
!=
trailer_expr -> 
961
-
trailer_expr -> 
961
/
trailer_expr -> 
961
%
trailer_expr -> 
961
is
trailer_expr -> 
961
<
trailer_expr -> 
961
if
trailer_expr -> 
961
>
trailer_expr -> 
961
^
trailer_expr -> 
961
==
trailer_expr -> 
961
@
trailer_expr -> 
961
)
trailer_expr -> 
961
not
trailer_expr -> 
962
~
948
962
STRING
950
962
NUMBER
954
962
{
955
962
factor
1511
962
atom_expr
956
962
[
957
962
None
959
962
-
958
962
(
960
962
atom
961
962
+
962
962
NAME
964
962
power
965
962
True
966
962
False
969
963
)
test_list -> test , test_list
964
<=
atom -> NAME
964
@
atom -> NAME
964
>>
atom -> NAME
964
==
atom -> NAME
964
>
atom -> NAME
964
*
atom -> NAME
964
-
atom -> NAME
964
&
atom -> NAME
964
is
atom -> NAME
964
.
atom -> NAME
964
or
atom -> NAME
964
in
atom -> NAME
964
)
atom -> NAME
964
<<
atom -> NAME
964
+
atom -> NAME
964
,
atom -> NAME
964
if
atom -> NAME
964
|
atom -> NAME
964
and
atom -> NAME
964
^
atom -> NAME
964
[
atom -> NAME
964
/
atom -> NAME
964
not
atom -> NAME
964
!=
atom -> NAME
964
%
atom -> NAME
964
<
atom -> NAME
964
>=
atom -> NAME
964
**
atom -> NAME
964
(
atom -> NAME
964
//
atom -> NAME
965
if
factor -> power
965
is
factor -> power
965
%
factor -> power
965
==
factor -> power
965
>=
factor -> power
965
or
factor -> power
965
and
factor -> power
965
/
factor -> power
965
<
factor -> power
965
+
factor -> power
965
,
factor -> power
965
//
factor -> power
965
@
factor -> power
965
in
factor -> power
965
)
factor -> power
965
<=
factor -> power
965
&
factor -> power
965
!=
factor -> power
965
<<
factor -> power
965
|
factor -> power
965
>
factor -> power
965
*
factor -> power
965
^
factor -> power
965
-
factor -> power
965
not
factor -> power
965
>>
factor -> power
966
>
atom -> True
966
|
atom -> True
966
-
atom -> True
966
==
atom -> True
966
<<
atom -> True
966
if
atom -> True
966
%
atom -> True
966
/
atom -> True
966
[
atom -> True
966
*
atom -> True
966
<=
atom -> True
966
<
atom -> True
966
&
atom -> True
966
+
atom -> True
966
**
atom -> True
966
!=
atom -> True
966
>>
atom -> True
966
//
atom -> True
966
and
atom -> True
966
^
atom -> True
966
is
atom -> True
966
or
atom -> True
966
)
atom -> True
966
.
atom -> True
966
,
atom -> True
966
(
atom -> True
966
>=
atom -> True
966
@
atom -> True
966
not
atom -> True
966
in
atom -> True
967
or
not_test -> comparison
967
if
not_test -> comparison
967
,
not_test -> comparison
967
and
not_test -> comparison
967
)
not_test -> comparison
968
not
expr -> xor_expr
968
or
expr -> xor_expr
968
==
expr -> xor_expr
968
in
expr -> xor_expr
968
|
1512
968
if
expr -> xor_expr
968
<=
expr -> xor_expr
968
is
expr -> xor_expr
968
<
expr -> xor_expr
968
>=
expr -> xor_expr
968
>
expr -> xor_expr
968
)
expr -> xor_expr
968
and
expr -> xor_expr
968
!=
expr -> xor_expr
968
,
expr -> xor_expr
969
<=
atom -> False
969
*
atom -> False
969
not
atom -> False
969
!=
atom -> False
969
@
atom -> False
969
and
atom -> False
969
if
atom -> False
969
<<
atom -> False
969
>
atom -> False
969
,
atom -> False
969
+
atom -> False
969
/
atom -> False
969
==
atom -> False
969
&
atom -> False
969
^
atom -> False
969
)
atom -> False
969
[
atom -> False
969
in
atom -> False
969
is
atom -> False
969
%
atom -> False
969
>=
atom -> False
969
//
atom -> False
969
(
atom -> False
969
|
atom -> False
969
<
atom -> False
969
.
atom -> False
969
or
atom -> False
969
**
atom -> False
969
>>
atom -> False
969
-
atom -> False
970
not
xor_expr -> and_expr
970
^
1513
970
)
xor_expr -> and_expr
970
if
xor_expr -> and_expr
970
|
xor_expr -> and_expr
970
>
xor_expr -> and_expr
970
<
xor_expr -> and_expr
970
or
xor_expr -> and_expr
970
>=
xor_expr -> and_expr
970
in
xor_expr -> and_expr
970
and
xor_expr -> and_expr
970
is
xor_expr -> and_expr
970
==
xor_expr -> and_expr
970
!=
xor_expr -> and_expr
970
<=
xor_expr -> and_expr
970
,
xor_expr -> and_expr
971
or
and_test -> not_test
971
,
and_test -> not_test
971
if
and_test -> not_test
971
)
and_test -> not_test
971
and
1514
972
,
test -> lambdef
972
)
test -> lambdef
973
:
1515
973
varargslist
1516
973
NAME
251
973
vfpdef
253
974
)
test -> or_test
974
if
1517
974
,
test -> or_test
975
)
or_test -> and_test
975
if
or_test -> and_test
975
or
1518
975
,
or_test -> and_test
976
~
948
976
factor
949
976
STRING
950
976
shift_expr
951
976
arith_expr
952
976
term
953
976
NUMBER
954
976
{
955
976
atom_expr
956
976
[
957
976
-
958
976
None
959
976
(
960
976
atom
961
976
+
962
976
NAME
964
976
power
965
976
True
966
976
comparison
967
976
xor_expr
968
976
False
969
976
and_expr
970
976
not_test
1519
976
not
976
976
expr
977
977
!=
125
977
,
comparison -> expr
977
is
126
977
>=
127
977
in
128
977
<
129
977
==
131
977
<=
132
977
not
133
977
>
134
977
)
comparison -> expr
977
comp_op
1520
977
or
comparison -> expr
977
if
comparison -> expr
977
and
comparison -> expr
978
)
test_list -> test
978
,
462
979
in
1521
980
,
lambdef -> lambda : test
980
for
lambdef -> lambda : test
980
)
lambdef -> lambda : test
981
~
92
981
factor
93
981
STRING
94
981
shift_expr
95
981
arith_expr
96
981
term
97
981
NUMBER
98
981
and_expr
99
981
{
100
981
atom_expr
101
981
[
102
981
-
103
981
None
105
981
(
106
981
atom
107
981
+
109
981
NAME
110
981
power
111
981
True
113
981
comparison
114
981
xor_expr
115
981
lambdef
116
981
False
117
981
test
1522
981
not_test
118
981
or_test
119
981
lambda
121
981
and_test
122
981
not
123
981
expr
124
982
)
or_test -> and_test or or_test
982
if
or_test -> and_test or or_test
982
,
or_test -> and_test or or_test
982
for
or_test -> and_test or or_test
983
)
comparison -> expr comp_op comparison
983
or
comparison -> expr comp_op comparison
983
,
comparison -> expr comp_op comparison
983
if
comparison -> expr comp_op comparison
983
for
comparison -> expr comp_op comparison
983
and
comparison -> expr comp_op comparison
984
INDENT
1523
985
<=
term -> factor / term
985
!=
term -> factor / term
985
and
term -> factor / term
985
or
term -> factor / term
985
|
term -> factor / term
985
^
term -> factor / term
985
>>
term -> factor / term
985
==
term -> factor / term
985
>
term -> factor / term
985
if
term -> factor / term
985
:
term -> factor / term
985
&
term -> factor / term
985
<<
term -> factor / term
985
+
term -> factor / term
985
-
term -> factor / term
985
not
term -> factor / term
985
in
term -> factor / term
985
<
term -> factor / term
985
is
term -> factor / term
985
>=
term -> factor / term
986
is
term -> factor @ term
986
and
term -> factor @ term
986
>
term -> factor @ term
986
not
term -> factor @ term
986
in
term -> factor @ term
986
==
term -> factor @ term
986
<
term -> factor @ term
986
or
term -> factor @ term
986
!=
term -> factor @ term
986
<<
term -> factor @ term
986
<=
term -> factor @ term
986
if
term -> factor @ term
986
|
term -> factor @ term
986
+
term -> factor @ term
986
&
term -> factor @ term
986
-
term -> factor @ term
986
>=
term -> factor @ term
986
:
term -> factor @ term
986
>>
term -> factor @ term
986
^
term -> factor @ term
987
>
term -> factor % term
987
!=
term -> factor % term
987
&
term -> factor % term
987
>=
term -> factor % term
987
or
term -> factor % term
987
==
term -> factor % term
987
^
term -> factor % term
987
in
term -> factor % term
987
|
term -> factor % term
987
and
term -> factor % term
987
if
term -> factor % term
987
not
term -> factor % term
987
is
term -> factor % term
987
<
term -> factor % term
987
>>
term -> factor % term
987
-
term -> factor % term
987
<=
term -> factor % term
987
<<
term -> factor % term
987
+
term -> factor % term
987
:
term -> factor % term
988
&
term -> factor * term
988
-
term -> factor * term
988
:
term -> factor * term
988
in
term -> factor * term
988
or
term -> factor * term
988
<=
term -> factor * term
988
|
term -> factor * term
988
and
term -> factor * term
988
not
term -> factor * term
988
<<
term -> factor * term
988
==
term -> factor * term
988
if
term -> factor * term
988
>
term -> factor * term
988
>>
term -> factor * term
988
<
term -> factor * term
988
!=
term -> factor * term
988
>=
term -> factor * term
988
^
term -> factor * term
988
+
term -> factor * term
988
is
term -> factor * term
989
+
term -> factor // term
989
==
term -> factor // term
989
<<
term -> factor // term
989
<
term -> factor // term
989
if
term -> factor // term
989
in
term -> factor // term
989
:
term -> factor // term
989
!=
term -> factor // term
989
>
term -> factor // term
989
not
term -> factor // term
989
>=
term -> factor // term
989
and
term -> factor // term
989
is
term -> factor // term
989
-
term -> factor // term
989
&
term -> factor // term
989
|
term -> factor // term
989
^
term -> factor // term
989
<=
term -> factor // term
989
or
term -> factor // term
989
>>
term -> factor // term
990
NEWLINE
1524
991
False
suite -> simple_stmt
991
-
suite -> simple_stmt
991
break
suite -> simple_stmt
991
@
suite -> simple_stmt
991
endsim
suite -> simple_stmt
991
+
suite -> simple_stmt
991
STRING
suite -> simple_stmt
991
if
suite -> simple_stmt
991
NEWLINE
suite -> simple_stmt
991
else
suite -> simple_stmt
991
return
suite -> simple_stmt
991
~
suite -> simple_stmt
991
for
suite -> simple_stmt
991
pass
suite -> simple_stmt
991
with
suite -> simple_stmt
991
while
suite -> simple_stmt
991
NAME
suite -> simple_stmt
991
del
suite -> simple_stmt
991
(
suite -> simple_stmt
991
class
suite -> simple_stmt
991
[
suite -> simple_stmt
991
resetstats
suite -> simple_stmt
991
def
suite -> simple_stmt
991
continue
suite -> simple_stmt
991
begsim
suite -> simple_stmt
991
raise
suite -> simple_stmt
991
yield
suite -> simple_stmt
991
nonlocal
suite -> simple_stmt
991
None
suite -> simple_stmt
991
not
suite -> simple_stmt
991
{
suite -> simple_stmt
991
lambda
suite -> simple_stmt
991
$
suite -> simple_stmt
991
NUMBER
suite -> simple_stmt
991
try
suite -> simple_stmt
991
assert
suite -> simple_stmt
991
global
suite -> simple_stmt
991
True
suite -> simple_stmt
991
conf
suite -> simple_stmt
992
STRING
while_stmt -> while test : suite
992
else
1525
992
def
while_stmt -> while test : suite
992
NEWLINE
while_stmt -> while test : suite
992
break
while_stmt -> while test : suite
992
try
while_stmt -> while test : suite
992
raise
while_stmt -> while test : suite
992
{
while_stmt -> while test : suite
992
None
while_stmt -> while test : suite
992
$
while_stmt -> while test : suite
992
continue
while_stmt -> while test : suite
992
conf
while_stmt -> while test : suite
992
assert
while_stmt -> while test : suite
992
resetstats
while_stmt -> while test : suite
992
for
while_stmt -> while test : suite
992
global
while_stmt -> while test : suite
992
del
while_stmt -> while test : suite
992
if
while_stmt -> while test : suite
992
nonlocal
while_stmt -> while test : suite
992
yield
while_stmt -> while test : suite
992
(
while_stmt -> while test : suite
992
return
while_stmt -> while test : suite
992
+
while_stmt -> while test : suite
992
with
while_stmt -> while test : suite
992
pass
while_stmt -> while test : suite
992
[
while_stmt -> while test : suite
992
-
while_stmt -> while test : suite
992
endsim
while_stmt -> while test : suite
992
@
while_stmt -> while test : suite
992
while
while_stmt -> while test : suite
992
~
while_stmt -> while test : suite
992
NUMBER
while_stmt -> while test : suite
992
not
while_stmt -> while test : suite
992
class
while_stmt -> while test : suite
992
begsim
while_stmt -> while test : suite
992
lambda
while_stmt -> while test : suite
992
True
while_stmt -> while test : suite
992
False
while_stmt -> while test : suite
992
NAME
while_stmt -> while test : suite
993
INDENT
1526
994
|
and_expr -> shift_expr & and_expr
994
!=
and_expr -> shift_expr & and_expr
994
and
and_expr -> shift_expr & and_expr
994
>=
and_expr -> shift_expr & and_expr
994
not
and_expr -> shift_expr & and_expr
994
in
and_expr -> shift_expr & and_expr
994
is
and_expr -> shift_expr & and_expr
994
or
and_expr -> shift_expr & and_expr
994
==
and_expr -> shift_expr & and_expr
994
^
and_expr -> shift_expr & and_expr
994
>
and_expr -> shift_expr & and_expr
994
<
and_expr -> shift_expr & and_expr
994
if
and_expr -> shift_expr & and_expr
994
<=
and_expr -> shift_expr & and_expr
994
:
and_expr -> shift_expr & and_expr
995
and
comparison -> expr comp_op comparison
995
:
comparison -> expr comp_op comparison
995
if
comparison -> expr comp_op comparison
995
or
comparison -> expr comp_op comparison
996
not
arith_expr -> term + arith_expr
996
:
arith_expr -> term + arith_expr
996
>>
arith_expr -> term + arith_expr
996
^
arith_expr -> term + arith_expr
996
in
arith_expr -> term + arith_expr
996
>=
arith_expr -> term + arith_expr
996
<
arith_expr -> term + arith_expr
996
<=
arith_expr -> term + arith_expr
996
>
arith_expr -> term + arith_expr
996
|
arith_expr -> term + arith_expr
996
==
arith_expr -> term + arith_expr
996
and
arith_expr -> term + arith_expr
996
if
arith_expr -> term + arith_expr
996
is
arith_expr -> term + arith_expr
996
&
arith_expr -> term + arith_expr
996
!=
arith_expr -> term + arith_expr
996
or
arith_expr -> term + arith_expr
996
<<
arith_expr -> term + arith_expr
997
if
arith_expr -> term - arith_expr
997
|
arith_expr -> term - arith_expr
997
and
arith_expr -> term - arith_expr
997
or
arith_expr -> term - arith_expr
997
&
arith_expr -> term - arith_expr
997
<
arith_expr -> term - arith_expr
997
^
arith_expr -> term - arith_expr
997
in
arith_expr -> term - arith_expr
997
<=
arith_expr -> term - arith_expr
997
not
arith_expr -> term - arith_expr
997
>=
arith_expr -> term - arith_expr
997
>
arith_expr -> term - arith_expr
997
!=
arith_expr -> term - arith_expr
997
<<
arith_expr -> term - arith_expr
997
==
arith_expr -> term - arith_expr
997
:
arith_expr -> term - arith_expr
997
is
arith_expr -> term - arith_expr
997
>>
arith_expr -> term - arith_expr
998
@
power -> atom_expr ** factor
998
==
power -> atom_expr ** factor
998
&
power -> atom_expr ** factor
998
-
power -> atom_expr ** factor
998
>
power -> atom_expr ** factor
998
and
power -> atom_expr ** factor
998
|
power -> atom_expr ** factor
998
<=
power -> atom_expr ** factor
998
%
power -> atom_expr ** factor
998
or
power -> atom_expr ** factor
998
:
power -> atom_expr ** factor
998
*
power -> atom_expr ** factor
998
not
power -> atom_expr ** factor
998
in
power -> atom_expr ** factor
998
<<
power -> atom_expr ** factor
998
//
power -> atom_expr ** factor
998
/
power -> atom_expr ** factor
998
>>
power -> atom_expr ** factor
998
^
power -> atom_expr ** factor
998
if
power -> atom_expr ** factor
998
!=
power -> atom_expr ** factor
998
is
power -> atom_expr ** factor
998
<
power -> atom_expr ** factor
998
+
power -> atom_expr ** factor
998
>=
power -> atom_expr ** factor
999
/
atom -> [ test_list_comp ]
999
*
atom -> [ test_list_comp ]
999
or
atom -> [ test_list_comp ]
999
|
atom -> [ test_list_comp ]
999
==
atom -> [ test_list_comp ]
999
is
atom -> [ test_list_comp ]
999
-
atom -> [ test_list_comp ]
999
**
atom -> [ test_list_comp ]
999
&
atom -> [ test_list_comp ]
999
(
atom -> [ test_list_comp ]
999
<
atom -> [ test_list_comp ]
999
:
atom -> [ test_list_comp ]
999
@
atom -> [ test_list_comp ]
999
//
atom -> [ test_list_comp ]
999
>
atom -> [ test_list_comp ]
999
if
atom -> [ test_list_comp ]
999
in
atom -> [ test_list_comp ]
999
^
atom -> [ test_list_comp ]
999
<<
atom -> [ test_list_comp ]
999
[
atom -> [ test_list_comp ]
999
!=
atom -> [ test_list_comp ]
999
<=
atom -> [ test_list_comp ]
999
and
atom -> [ test_list_comp ]
999
%
atom -> [ test_list_comp ]
999
not
atom -> [ test_list_comp ]
999
+
atom -> [ test_list_comp ]
999
>=
atom -> [ test_list_comp ]
999
>>
atom -> [ test_list_comp ]
999
.
atom -> [ test_list_comp ]
1000
@
atom -> ( test_list_comp )
1000
>>
atom -> ( test_list_comp )
1000
<<
atom -> ( test_list_comp )
1000
:
atom -> ( test_list_comp )
1000
==
atom -> ( test_list_comp )
1000
is
atom -> ( test_list_comp )
1000
or
atom -> ( test_list_comp )
1000
<=
atom -> ( test_list_comp )
1000
[
atom -> ( test_list_comp )
1000
%
atom -> ( test_list_comp )
1000
if
atom -> ( test_list_comp )
1000
^
atom -> ( test_list_comp )
1000
<
atom -> ( test_list_comp )
1000
and
atom -> ( test_list_comp )
1000
+
atom -> ( test_list_comp )
1000
&
atom -> ( test_list_comp )
1000
!=
atom -> ( test_list_comp )
1000
in
atom -> ( test_list_comp )
1000
**
atom -> ( test_list_comp )
1000
not
atom -> ( test_list_comp )
1000
-
atom -> ( test_list_comp )
1000
(
atom -> ( test_list_comp )
1000
*
atom -> ( test_list_comp )
1000
|
atom -> ( test_list_comp )
1000
//
atom -> ( test_list_comp )
1000
>
atom -> ( test_list_comp )
1000
>=
atom -> ( test_list_comp )
1000
.
atom -> ( test_list_comp )
1000
/
atom -> ( test_list_comp )
1001
>=
shift_expr -> arith_expr >> shift_expr
1001
not
shift_expr -> arith_expr >> shift_expr
1001
>
shift_expr -> arith_expr >> shift_expr
1001
^
shift_expr -> arith_expr >> shift_expr
1001
:
shift_expr -> arith_expr >> shift_expr
1001
is
shift_expr -> arith_expr >> shift_expr
1001
&
shift_expr -> arith_expr >> shift_expr
1001
if
shift_expr -> arith_expr >> shift_expr
1001
!=
shift_expr -> arith_expr >> shift_expr
1001
<=
shift_expr -> arith_expr >> shift_expr
1001
and
shift_expr -> arith_expr >> shift_expr
1001
==
shift_expr -> arith_expr >> shift_expr
1001
or
shift_expr -> arith_expr >> shift_expr
1001
in
shift_expr -> arith_expr >> shift_expr
1001
|
shift_expr -> arith_expr >> shift_expr
1001
<
shift_expr -> arith_expr >> shift_expr
1002
:
shift_expr -> arith_expr << shift_expr
1002
>=
shift_expr -> arith_expr << shift_expr
1002
in
shift_expr -> arith_expr << shift_expr
1002
>
shift_expr -> arith_expr << shift_expr
1002
|
shift_expr -> arith_expr << shift_expr
1002
!=
shift_expr -> arith_expr << shift_expr
1002
<=
shift_expr -> arith_expr << shift_expr
1002
&
shift_expr -> arith_expr << shift_expr
1002
not
shift_expr -> arith_expr << shift_expr
1002
^
shift_expr -> arith_expr << shift_expr
1002
<
shift_expr -> arith_expr << shift_expr
1002
==
shift_expr -> arith_expr << shift_expr
1002
if
shift_expr -> arith_expr << shift_expr
1002
or
shift_expr -> arith_expr << shift_expr
1002
is
shift_expr -> arith_expr << shift_expr
1002
and
shift_expr -> arith_expr << shift_expr
1003
]
1527
1004
/
trailer -> ( )
1004
[
trailer -> ( )
1004
(
trailer -> ( )
1004
|
trailer -> ( )
1004
<=
trailer -> ( )
1004
in
trailer -> ( )
1004
not
trailer -> ( )
1004
>>
trailer -> ( )
1004
^
trailer -> ( )
1004
.
trailer -> ( )
1004
**
trailer -> ( )
1004
if
trailer -> ( )
1004
+
trailer -> ( )
1004
is
trailer -> ( )
1004
<
trailer -> ( )
1004
>
trailer -> ( )
1004
==
trailer -> ( )
1004
:
trailer -> ( )
1004
<<
trailer -> ( )
1004
//
trailer -> ( )
1004
*
trailer -> ( )
1004
-
trailer -> ( )
1004
>=
trailer -> ( )
1004
%
trailer -> ( )
1004
and
trailer -> ( )
1004
@
trailer -> ( )
1004
&
trailer -> ( )
1004
!=
trailer -> ( )
1004
or
trailer -> ( )
1005
)
1528
1006
:
trailer_expr -> trailer trailer_expr
1006
is
trailer_expr -> trailer trailer_expr
1006
!=
trailer_expr -> trailer trailer_expr
1006
<<
trailer_expr -> trailer trailer_expr
1006
and
trailer_expr -> trailer trailer_expr
1006
&
trailer_expr -> trailer trailer_expr
1006
//
trailer_expr -> trailer trailer_expr
1006
|
trailer_expr -> trailer trailer_expr
1006
==
trailer_expr -> trailer trailer_expr
1006
<
trailer_expr -> trailer trailer_expr
1006
or
trailer_expr -> trailer trailer_expr
1006
^
trailer_expr -> trailer trailer_expr
1006
<=
trailer_expr -> trailer trailer_expr
1006
@
trailer_expr -> trailer trailer_expr
1006
not
trailer_expr -> trailer trailer_expr
1006
in
trailer_expr -> trailer trailer_expr
1006
*
trailer_expr -> trailer trailer_expr
1006
+
trailer_expr -> trailer trailer_expr
1006
if
trailer_expr -> trailer trailer_expr
1006
**
trailer_expr -> trailer trailer_expr
1006
>>
trailer_expr -> trailer trailer_expr
1006
>=
trailer_expr -> trailer trailer_expr
1006
%
trailer_expr -> trailer trailer_expr
1006
-
trailer_expr -> trailer trailer_expr
1006
>
trailer_expr -> trailer trailer_expr
1006
/
trailer_expr -> trailer trailer_expr
1007
<=
trailer -> . NAME
1007
if
trailer -> . NAME
1007
<
trailer -> . NAME
1007
%
trailer -> . NAME
1007
.
trailer -> . NAME
1007
//
trailer -> . NAME
1007
:
trailer -> . NAME
1007
|
trailer -> . NAME
1007
==
trailer -> . NAME
1007
>=
trailer -> . NAME
1007
[
trailer -> . NAME
1007
^
trailer -> . NAME
1007
<<
trailer -> . NAME
1007
in
trailer -> . NAME
1007
&
trailer -> . NAME
1007
or
trailer -> . NAME
1007
*
trailer -> . NAME
1007
(
trailer -> . NAME
1007
and
trailer -> . NAME
1007
-
trailer -> . NAME
1007
+
trailer -> . NAME
1007
!=
trailer -> . NAME
1007
not
trailer -> . NAME
1007
**
trailer -> . NAME
1007
>>
trailer -> . NAME
1007
@
trailer -> . NAME
1007
/
trailer -> . NAME
1007
is
trailer -> . NAME
1007
>
trailer -> . NAME
1008
==
xor_expr -> and_expr ^ xor_expr
1008
!=
xor_expr -> and_expr ^ xor_expr
1008
>
xor_expr -> and_expr ^ xor_expr
1008
not
xor_expr -> and_expr ^ xor_expr
1008
:
xor_expr -> and_expr ^ xor_expr
1008
if
xor_expr -> and_expr ^ xor_expr
1008
is
xor_expr -> and_expr ^ xor_expr
1008
<=
xor_expr -> and_expr ^ xor_expr
1008
|
xor_expr -> and_expr ^ xor_expr
1008
>=
xor_expr -> and_expr ^ xor_expr
1008
and
xor_expr -> and_expr ^ xor_expr
1008
in
xor_expr -> and_expr ^ xor_expr
1008
<
xor_expr -> and_expr ^ xor_expr
1008
or
xor_expr -> and_expr ^ xor_expr
1009
and
expr -> xor_expr | expr
1009
in
expr -> xor_expr | expr
1009
>=
expr -> xor_expr | expr
1009
is
expr -> xor_expr | expr
1009
==
expr -> xor_expr | expr
1009
or
expr -> xor_expr | expr
1009
<
expr -> xor_expr | expr
1009
if
expr -> xor_expr | expr
1009
not
expr -> xor_expr | expr
1009
!=
expr -> xor_expr | expr
1009
<=
expr -> xor_expr | expr
1009
>
expr -> xor_expr | expr
1009
:
expr -> xor_expr | expr
1010
:
lambdef -> lambda : test
1011
~
139
1011
factor
140
1011
STRING
143
1011
shift_expr
142
1011
expr
144
1011
term
145
1011
NUMBER
146
1011
{
147
1011
atom_expr
148
1011
[
149
1011
-
150
1011
None
151
1011
+
152
1011
(
153
1011
arith_expr
154
1011
atom
155
1011
and_expr
156
1011
NAME
157
1011
power
158
1011
True
159
1011
comparison
160
1011
xor_expr
161
1011
lambda
162
1011
False
163
1011
not_test
164
1011
and_test
165
1011
not
166
1011
or_test
167
1011
lambdef
168
1011
test
1529
1012
if
and_test -> not_test and and_test
1012
:
and_test -> not_test and and_test
1012
or
and_test -> not_test and and_test
1013
if
or_test -> and_test or or_test
1013
:
or_test -> and_test or or_test
1014
else
1530
1015
<
factor -> ~ factor
1015
in
factor -> ~ factor
1015
==
factor -> ~ factor
1015
|
factor -> ~ factor
1015
<<
factor -> ~ factor
1015
>
factor -> ~ factor
1015
not
factor -> ~ factor
1015
<=
factor -> ~ factor
1015
//
factor -> ~ factor
1015
>=
factor -> ~ factor
1015
>>
factor -> ~ factor
1015
*
factor -> ~ factor
1015
-
factor -> ~ factor
1015
/
factor -> ~ factor
1015
else
factor -> ~ factor
1015
^
factor -> ~ factor
1015
and
factor -> ~ factor
1015
is
factor -> ~ factor
1015
+
factor -> ~ factor
1015
or
factor -> ~ factor
1015
&
factor -> ~ factor
1015
!=
factor -> ~ factor
1015
%
factor -> ~ factor
1015
@
factor -> ~ factor
1016
~
509
1016
factor
510
1016
STRING
511
1016
term
1531
1016
NUMBER
514
1016
{
515
1016
[
517
1016
atom_expr
516
1016
-
518
1016
None
519
1016
(
520
1016
atom
521
1016
False
523
1016
+
524
1016
NAME
526
1016
power
527
1016
True
528
1017
~
509
1017
factor
510
1017
STRING
511
1017
NUMBER
514
1017
{
515
1017
[
517
1017
atom_expr
516
1017
-
518
1017
None
519
1017
(
520
1017
atom
521
1017
False
523
1017
+
524
1017
NAME
526
1017
power
527
1017
True
528
1017
term
1532
1018
~
509
1018
factor
510
1018
STRING
511
1018
NUMBER
514
1018
{
515
1018
term
1533
1018
[
517
1018
atom_expr
516
1018
-
518
1018
None
519
1018
(
520
1018
atom
521
1018
False
523
1018
+
524
1018
NAME
526
1018
power
527
1018
True
528
1019
~
509
1019
factor
510
1019
STRING
511
1019
NUMBER
514
1019
{
515
1019
[
517
1019
atom_expr
516
1019
-
518
1019
None
519
1019
(
520
1019
atom
521
1019
False
523
1019
+
524
1019
term
1534
1019
NAME
526
1019
power
527
1019
True
528
1020
~
509
1020
factor
510
1020
STRING
511
1020
NUMBER
514
1020
{
515
1020
[
517
1020
atom_expr
516
1020
-
518
1020
None
519
1020
(
520
1020
atom
521
1020
False
523
1020
+
524
1020
NAME
526
1020
power
527
1020
True
528
1020
term
1535
1021
~
509
1021
factor
510
1021
STRING
511
1021
shift_expr
512
1021
term
513
1021
NUMBER
514
1021
{
515
1021
atom_expr
516
1021
[
517
1021
-
518
1021
None
519
1021
(
520
1021
atom
521
1021
arith_expr
522
1021
False
523
1021
+
524
1021
NAME
526
1021
power
527
1021
True
528
1021
and_expr
1536
1022
~
509
1022
factor
510
1022
STRING
511
1022
arith_expr
1537
1022
term
513
1022
NUMBER
514
1022
{
515
1022
[
517
1022
atom_expr
516
1022
-
518
1022
None
519
1022
(
520
1022
atom
521
1022
False
523
1022
+
524
1022
NAME
526
1022
power
527
1022
True
528
1023
~
509
1023
factor
510
1023
STRING
511
1023
term
513
1023
arith_expr
1538
1023
NUMBER
514
1023
{
515
1023
[
517
1023
atom_expr
516
1023
-
518
1023
None
519
1023
(
520
1023
atom
521
1023
False
523
1023
+
524
1023
NAME
526
1023
power
527
1023
True
528
1024
//
atom -> { }
1024
[
atom -> { }
1024
|
atom -> { }
1024
>
atom -> { }
1024
>=
atom -> { }
1024
==
atom -> { }
1024
&
atom -> { }
1024
not
atom -> { }
1024
**
atom -> { }
1024
in
atom -> { }
1024
or
atom -> { }
1024
<
atom -> { }
1024
!=
atom -> { }
1024
+
atom -> { }
1024
<<
atom -> { }
1024
^
atom -> { }
1024
else
atom -> { }
1024
<=
atom -> { }
1024
/
atom -> { }
1024
is
atom -> { }
1024
-
atom -> { }
1024
>>
atom -> { }
1024
%
atom -> { }
1024
.
atom -> { }
1024
(
atom -> { }
1024
and
atom -> { }
1024
*
atom -> { }
1024
@
atom -> { }
1025
~
509
1025
STRING
511
1025
None
519
1025
[
517
1025
NUMBER
514
1025
factor
1539
1025
False
523
1025
{
515
1025
(
520
1025
atom_expr
516
1025
-
518
1025
atom
521
1025
+
524
1025
NAME
526
1025
power
527
1025
True
528
1026
]
1540
1027
==
atom -> [ ]
1027
%
atom -> [ ]
1027
**
atom -> [ ]
1027
.
atom -> [ ]
1027
<<
atom -> [ ]
1027
not
atom -> [ ]
1027
/
atom -> [ ]
1027
*
atom -> [ ]
1027
else
atom -> [ ]
1027
!=
atom -> [ ]
1027
<=
atom -> [ ]
1027
@
atom -> [ ]
1027
-
atom -> [ ]
1027
>>
atom -> [ ]
1027
^
atom -> [ ]
1027
|
atom -> [ ]
1027
<
atom -> [ ]
1027
[
atom -> [ ]
1027
is
atom -> [ ]
1027
in
atom -> [ ]
1027
>
atom -> [ ]
1027
+
atom -> [ ]
1027
>=
atom -> [ ]
1027
and
atom -> [ ]
1027
or
atom -> [ ]
1027
&
atom -> [ ]
1027
(
atom -> [ ]
1027
//
atom -> [ ]
1028
else
factor -> - factor
1028
/
factor -> - factor
1028
*
factor -> - factor
1028
not
factor -> - factor
1028
or
factor -> - factor
1028
//
factor -> - factor
1028
!=
factor -> - factor
1028
%
factor -> - factor
1028
|
factor -> - factor
1028
>
factor -> - factor
1028
+
factor -> - factor
1028
-
factor -> - factor
1028
^
factor -> - factor
1028
in
factor -> - factor
1028
<<
factor -> - factor
1028
&
factor -> - factor
1028
<=
factor -> - factor
1028
==
factor -> - factor
1028
and
factor -> - factor
1028
@
factor -> - factor
1028
>=
factor -> - factor
1028
is
factor -> - factor
1028
>>
factor -> - factor
1028
<
factor -> - factor
1029
)
1541
1030
-
atom -> ( )
1030
else
atom -> ( )
1030
==
atom -> ( )
1030
/
atom -> ( )
1030
<=
atom -> ( )
1030
(
atom -> ( )
1030
&
atom -> ( )
1030
[
atom -> ( )
1030
^
atom -> ( )
1030
or
atom -> ( )
1030
+
atom -> ( )
1030
>>
atom -> ( )
1030
is
atom -> ( )
1030
*
atom -> ( )
1030
and
atom -> ( )
1030
>=
atom -> ( )
1030
>
atom -> ( )
1030
@
atom -> ( )
1030
in
atom -> ( )
1030
not
atom -> ( )
1030
<
atom -> ( )
1030
.
atom -> ( )
1030
//
atom -> ( )
1030
%
atom -> ( )
1030
<<
atom -> ( )
1030
|
atom -> ( )
1030
**
atom -> ( )
1030
!=
atom -> ( )
1031
~
544
1031
factor
545
1031
STRING
546
1031
shift_expr
547
1031
expr
548
1031
arith_expr
549
1031
term
550
1031
atom_expr
551
1031
NUMBER
552
1031
subscript
553
1031
{
554
1031
[
555
1031
-
556
1031
None
557
1031
+
558
1031
(
559
1031
subscriptlist
1542
1031
atom
561
1031
and_expr
562
1031
NAME
563
1031
power
564
1031
True
565
1031
comparison
566
1031
xor_expr
567
1031
lambda
568
1031
False
569
1031
not_test
570
1031
and_test
571
1031
test
572
1031
or_test
573
1031
not
574
1031
:
maybe_test -> 
1031
maybe_test
575
1031
lambdef
576
1032
)
1543
1032
~
579
1032
factor
580
1032
STRING
581
1032
shift_expr
582
1032
arith_expr
583
1032
term
584
1032
NUMBER
585
1032
and_expr
586
1032
{
587
1032
atom_expr
589
1032
[
590
1032
-
591
1032
None
592
1032
(
593
1032
atom
594
1032
+
595
1032
not_test
596
1032
arglist
1544
1032
test
597
1032
NAME
598
1032
power
599
1032
True
600
1032
comparison
601
1032
xor_expr
602
1032
lambdef
603
1032
False
604
1032
argument
605
1032
and_test
606
1032
lambda
607
1032
or_test
608
1032
expr
609
1032
not
610
1032
**
611
1032
*
612
1033
[
1031
1033
(
1032
1033
//
trailer_expr -> 
1033
trailer
1033
1033
<<
trailer_expr -> 
1033
*
trailer_expr -> 
1033
in
trailer_expr -> 
1033
&
trailer_expr -> 
1033
trailer_expr
1545
1033
and
trailer_expr -> 
1033
.
1035
1033
<=
trailer_expr -> 
1033
|
trailer_expr -> 
1033
or
trailer_expr -> 
1033
>=
trailer_expr -> 
1033
else
trailer_expr -> 
1033
+
trailer_expr -> 
1033
**
trailer_expr -> 
1033
>>
trailer_expr -> 
1033
!=
trailer_expr -> 
1033
-
trailer_expr -> 
1033
/
trailer_expr -> 
1033
%
trailer_expr -> 
1033
is
trailer_expr -> 
1033
<
trailer_expr -> 
1033
>
trailer_expr -> 
1033
^
trailer_expr -> 
1033
==
trailer_expr -> 
1033
@
trailer_expr -> 
1033
not
trailer_expr -> 
1034
<=
atom_expr -> atom trailer_expr
1034
or
atom_expr -> atom trailer_expr
1034
*
atom_expr -> atom trailer_expr
1034
>=
atom_expr -> atom trailer_expr
1034
**
atom_expr -> atom trailer_expr
1034
&
atom_expr -> atom trailer_expr
1034
%
atom_expr -> atom trailer_expr
1034
+
atom_expr -> atom trailer_expr
1034
else
atom_expr -> atom trailer_expr
1034
is
atom_expr -> atom trailer_expr
1034
//
atom_expr -> atom trailer_expr
1034
!=
atom_expr -> atom trailer_expr
1034
|
atom_expr -> atom trailer_expr
1034
<
atom_expr -> atom trailer_expr
1034
@
atom_expr -> atom trailer_expr
1034
not
atom_expr -> atom trailer_expr
1034
-
atom_expr -> atom trailer_expr
1034
in
atom_expr -> atom trailer_expr
1034
/
atom_expr -> atom trailer_expr
1034
^
atom_expr -> atom trailer_expr
1034
>
atom_expr -> atom trailer_expr
1034
==
atom_expr -> atom trailer_expr
1034
<<
atom_expr -> atom trailer_expr
1034
>>
atom_expr -> atom trailer_expr
1034
and
atom_expr -> atom trailer_expr
1035
NAME
1546
1036
~
509
1036
factor
510
1036
STRING
511
1036
term
513
1036
NUMBER
514
1036
{
515
1036
[
517
1036
atom_expr
516
1036
-
518
1036
shift_expr
1547
1036
None
519
1036
(
520
1036
atom
521
1036
arith_expr
522
1036
False
523
1036
+
524
1036
NAME
526
1036
power
527
1036
True
528
1037
~
509
1037
factor
510
1037
STRING
511
1037
term
513
1037
NUMBER
514
1037
{
515
1037
[
517
1037
atom_expr
516
1037
-
518
1037
None
519
1037
(
520
1037
atom
521
1037
arith_expr
522
1037
False
523
1037
+
524
1037
shift_expr
1548
1037
NAME
526
1037
power
527
1037
True
528
1038
<
factor -> + factor
1038
in
factor -> + factor
1038
==
factor -> + factor
1038
|
factor -> + factor
1038
>
factor -> + factor
1038
-
factor -> + factor
1038
and
factor -> + factor
1038
*
factor -> + factor
1038
%
factor -> + factor
1038
@
factor -> + factor
1038
is
factor -> + factor
1038
//
factor -> + factor
1038
&
factor -> + factor
1038
^
factor -> + factor
1038
>=
factor -> + factor
1038
else
factor -> + factor
1038
not
factor -> + factor
1038
/
factor -> + factor
1038
or
factor -> + factor
1038
!=
factor -> + factor
1038
<<
factor -> + factor
1038
>>
factor -> + factor
1038
<=
factor -> + factor
1038
+
factor -> + factor
1039
expr
5
1039
factor
1
1039
(
3
1039
STRING
4
1039
term
6
1039
not
8
1039
or_test
10
1039
~
12
1039
atom_expr
13
1039
comparison
14
1039
shift_expr
29
1039
None
15
1039
power
43
1039
+
19
1039
xor_expr
17
1039
test
1549
1039
arith_expr
18
1039
[
32
1039
atom
22
1039
NUMBER
26
1039
and_test
39
1039
NAME
27
1039
-
36
1039
False
28
1039
lambda
46
1039
not_test
34
1039
{
35
1039
and_expr
33
1039
lambdef
45
1039
True
48
1040
~
509
1040
factor
510
1040
STRING
511
1040
shift_expr
512
1040
term
513
1040
NUMBER
514
1040
{
515
1040
atom_expr
516
1040
[
517
1040
-
518
1040
None
519
1040
(
520
1040
atom
521
1040
arith_expr
522
1040
False
523
1040
+
524
1040
NAME
526
1040
power
527
1040
True
528
1040
xor_expr
529
1040
and_expr
531
1040
expr
1550
1041
~
509
1041
factor
510
1041
STRING
511
1041
shift_expr
512
1041
term
513
1041
NUMBER
514
1041
{
515
1041
atom_expr
516
1041
[
517
1041
xor_expr
1551
1041
-
518
1041
None
519
1041
(
520
1041
atom
521
1041
arith_expr
522
1041
False
523
1041
+
524
1041
NAME
526
1041
power
527
1041
True
528
1041
and_expr
531
1042
~
509
1042
factor
510
1042
STRING
511
1042
shift_expr
512
1042
term
513
1042
NUMBER
514
1042
{
515
1042
atom_expr
516
1042
[
517
1042
-
518
1042
None
519
1042
(
520
1042
atom
521
1042
arith_expr
522
1042
False
523
1042
+
524
1042
NAME
526
1042
power
527
1042
True
528
1042
and_test
1552
1042
xor_expr
529
1042
comparison
530
1042
and_expr
531
1042
not_test
532
1042
not
533
1042
expr
534
1043
and
not_test -> not not_test
1043
or
not_test -> not not_test
1043
else
not_test -> not not_test
1044
~
509
1044
factor
510
1044
STRING
511
1044
shift_expr
512
1044
term
513
1044
NUMBER
514
1044
{
515
1044
atom_expr
516
1044
[
517
1044
-
518
1044
None
519
1044
(
520
1044
atom
521
1044
arith_expr
522
1044
False
523
1044
+
524
1044
NAME
526
1044
power
527
1044
True
528
1044
xor_expr
529
1044
and_expr
531
1044
comparison
1553
1044
expr
534
1045
~
509
1045
factor
510
1045
STRING
511
1045
shift_expr
512
1045
term
513
1045
NUMBER
514
1045
{
515
1045
atom_expr
516
1045
[
517
1045
-
518
1045
None
519
1045
(
520
1045
atom
521
1045
arith_expr
522
1045
False
523
1045
+
524
1045
NAME
526
1045
power
527
1045
True
528
1045
xor_expr
529
1045
comparison
530
1045
and_expr
531
1045
or_test
1554
1045
not_test
532
1045
not
533
1045
expr
534
1045
and_test
535
1046
NEWLINE
1555
1047
elif
1556
1047
elif_clause
1557
1047
global
elif_clause -> 
1047
conf
elif_clause -> 
1047
with
elif_clause -> 
1047
continue
elif_clause -> 
1047
{
elif_clause -> 
1047
class
elif_clause -> 
1047
STRING
elif_clause -> 
1047
$
elif_clause -> 
1047
NEWLINE
elif_clause -> 
1047
pass
elif_clause -> 
1047
NAME
elif_clause -> 
1047
for
elif_clause -> 
1047
not
elif_clause -> 
1047
assert
elif_clause -> 
1047
raise
elif_clause -> 
1047
yield
elif_clause -> 
1047
else
elif_clause -> 
1047
NUMBER
elif_clause -> 
1047
try
elif_clause -> 
1047
~
elif_clause -> 
1047
[
elif_clause -> 
1047
(
elif_clause -> 
1047
endsim
elif_clause -> 
1047
while
elif_clause -> 
1047
return
elif_clause -> 
1047
del
elif_clause -> 
1047
True
elif_clause -> 
1047
def
elif_clause -> 
1047
if
elif_clause -> 
1047
break
elif_clause -> 
1047
-
elif_clause -> 
1047
None
elif_clause -> 
1047
begsim
elif_clause -> 
1047
lambda
elif_clause -> 
1047
@
elif_clause -> 
1047
resetstats
elif_clause -> 
1047
nonlocal
elif_clause -> 
1047
False
elif_clause -> 
1047
+
elif_clause -> 
1048
False
suite -> simple_stmt
1048
-
suite -> simple_stmt
1048
break
suite -> simple_stmt
1048
@
suite -> simple_stmt
1048
endsim
suite -> simple_stmt
1048
+
suite -> simple_stmt
1048
STRING
suite -> simple_stmt
1048
if
suite -> simple_stmt
1048
NEWLINE
suite -> simple_stmt
1048
else
suite -> simple_stmt
1048
return
suite -> simple_stmt
1048
~
suite -> simple_stmt
1048
for
suite -> simple_stmt
1048
elif
suite -> simple_stmt
1048
pass
suite -> simple_stmt
1048
with
suite -> simple_stmt
1048
while
suite -> simple_stmt
1048
NAME
suite -> simple_stmt
1048
del
suite -> simple_stmt
1048
(
suite -> simple_stmt
1048
class
suite -> simple_stmt
1048
[
suite -> simple_stmt
1048
resetstats
suite -> simple_stmt
1048
def
suite -> simple_stmt
1048
continue
suite -> simple_stmt
1048
begsim
suite -> simple_stmt
1048
raise
suite -> simple_stmt
1048
yield
suite -> simple_stmt
1048
nonlocal
suite -> simple_stmt
1048
None
suite -> simple_stmt
1048
not
suite -> simple_stmt
1048
{
suite -> simple_stmt
1048
lambda
suite -> simple_stmt
1048
$
suite -> simple_stmt
1048
NUMBER
suite -> simple_stmt
1048
try
suite -> simple_stmt
1048
assert
suite -> simple_stmt
1048
global
suite -> simple_stmt
1048
True
suite -> simple_stmt
1048
conf
suite -> simple_stmt
1049
INDENT
1558
1050
False
suite -> simple_stmt
1050
-
suite -> simple_stmt
1050
break
suite -> simple_stmt
1050
@
suite -> simple_stmt
1050
endsim
suite -> simple_stmt
1050
+
suite -> simple_stmt
1050
STRING
suite -> simple_stmt
1050
if
suite -> simple_stmt
1050
NEWLINE
suite -> simple_stmt
1050
return
suite -> simple_stmt
1050
~
suite -> simple_stmt
1050
for
suite -> simple_stmt
1050
pass
suite -> simple_stmt
1050
with
suite -> simple_stmt
1050
while
suite -> simple_stmt
1050
NAME
suite -> simple_stmt
1050
del
suite -> simple_stmt
1050
(
suite -> simple_stmt
1050
class
suite -> simple_stmt
1050
[
suite -> simple_stmt
1050
resetstats
suite -> simple_stmt
1050
def
suite -> simple_stmt
1050
continue
suite -> simple_stmt
1050
begsim
suite -> simple_stmt
1050
raise
suite -> simple_stmt
1050
yield
suite -> simple_stmt
1050
nonlocal
suite -> simple_stmt
1050
None
suite -> simple_stmt
1050
not
suite -> simple_stmt
1050
{
suite -> simple_stmt
1050
lambda
suite -> simple_stmt
1050
$
suite -> simple_stmt
1050
NUMBER
suite -> simple_stmt
1050
try
suite -> simple_stmt
1050
assert
suite -> simple_stmt
1050
global
suite -> simple_stmt
1050
True
suite -> simple_stmt
1050
conf
suite -> simple_stmt
1051
INDENT
1559
1052
False
classdef -> class NAME : suite
1052
if
classdef -> class NAME : suite
1052
+
classdef -> class NAME : suite
1052
None
classdef -> class NAME : suite
1052
def
classdef -> class NAME : suite
1052
endsim
classdef -> class NAME : suite
1052
-
classdef -> class NAME : suite
1052
lambda
classdef -> class NAME : suite
1052
del
classdef -> class NAME : suite
1052
True
classdef -> class NAME : suite
1052
resetstats
classdef -> class NAME : suite
1052
[
classdef -> class NAME : suite
1052
not
classdef -> class NAME : suite
1052
global
classdef -> class NAME : suite
1052
{
classdef -> class NAME : suite
1052
pass
classdef -> class NAME : suite
1052
while
classdef -> class NAME : suite
1052
class
classdef -> class NAME : suite
1052
NEWLINE
classdef -> class NAME : suite
1052
$
classdef -> class NAME : suite
1052
raise
classdef -> class NAME : suite
1052
with
classdef -> class NAME : suite
1052
yield
classdef -> class NAME : suite
1052
NAME
classdef -> class NAME : suite
1052
continue
classdef -> class NAME : suite
1052
conf
classdef -> class NAME : suite
1052
assert
classdef -> class NAME : suite
1052
return
classdef -> class NAME : suite
1052
try
classdef -> class NAME : suite
1052
~
classdef -> class NAME : suite
1052
STRING
classdef -> class NAME : suite
1052
NUMBER
classdef -> class NAME : suite
1052
(
classdef -> class NAME : suite
1052
begsim
classdef -> class NAME : suite
1052
@
classdef -> class NAME : suite
1052
nonlocal
classdef -> class NAME : suite
1052
break
classdef -> class NAME : suite
1052
for
classdef -> class NAME : suite
1053
)
1560
1054
:
1561
1055
,
factor -> ~ factor
1055
<
factor -> ~ factor
1055
in
factor -> ~ factor
1055
==
factor -> ~ factor
1055
|
factor -> ~ factor
1055
<<
factor -> ~ factor
1055
>
factor -> ~ factor
1055
not
factor -> ~ factor
1055
<=
factor -> ~ factor
1055
//
factor -> ~ factor
1055
>=
factor -> ~ factor
1055
>>
factor -> ~ factor
1055
]
factor -> ~ factor
1055
-
factor -> ~ factor
1055
*
factor -> ~ factor
1055
/
factor -> ~ factor
1055
if
factor -> ~ factor
1055
:
factor -> ~ factor
1055
^
factor -> ~ factor
1055
and
factor -> ~ factor
1055
is
factor -> ~ factor
1055
+
factor -> ~ factor
1055
or
factor -> ~ factor
1055
&
factor -> ~ factor
1055
!=
factor -> ~ factor
1055
%
factor -> ~ factor
1055
@
factor -> ~ factor
1056
~
544
1056
factor
545
1056
STRING
546
1056
term
1562
1056
atom_expr
551
1056
NUMBER
552
1056
{
554
1056
[
555
1056
-
556
1056
None
557
1056
+
558
1056
(
559
1056
atom
561
1056
NAME
563
1056
power
564
1056
True
565
1056
False
569
1057
~
544
1057
factor
545
1057
STRING
546
1057
atom_expr
551
1057
NUMBER
552
1057
{
554
1057
[
555
1057
-
556
1057
None
557
1057
+
558
1057
(
559
1057
atom
561
1057
NAME
563
1057
power
564
1057
True
565
1057
False
569
1057
term
1563
1058
~
544
1058
factor
545
1058
STRING
546
1058
atom_expr
551
1058
NUMBER
552
1058
{
554
1058
[
555
1058
-
556
1058
None
557
1058
+
558
1058
(
559
1058
term
1564
1058
atom
561
1058
NAME
563
1058
power
564
1058
True
565
1058
False
569
1059
~
544
1059
factor
545
1059
STRING
546
1059
atom_expr
551
1059
NUMBER
552
1059
{
554
1059
term
1565
1059
[
555
1059
-
556
1059
None
557
1059
+
558
1059
(
559
1059
atom
561
1059
NAME
563
1059
power
564
1059
True
565
1059
False
569
1060
~
544
1060
factor
545
1060
STRING
546
1060
atom_expr
551
1060
NUMBER
552
1060
{
554
1060
[
555
1060
-
556
1060
None
557
1060
+
558
1060
(
559
1060
atom
561
1060
term
1566
1060
NAME
563
1060
power
564
1060
True
565
1060
False
569
1061
~
544
1061
factor
545
1061
STRING
546
1061
shift_expr
547
1061
arith_expr
549
1061
term
550
1061
atom_expr
551
1061
NUMBER
552
1061
{
554
1061
[
555
1061
-
556
1061
None
557
1061
+
558
1061
(
559
1061
atom
561
1061
NAME
563
1061
power
564
1061
True
565
1061
False
569
1061
and_expr
1567
1062
~
544
1062
factor
545
1062
STRING
546
1062
shift_expr
547
1062
expr
548
1062
arith_expr
549
1062
term
550
1062
atom_expr
551
1062
NUMBER
552
1062
{
554
1062
[
555
1062
-
556
1062
None
557
1062
+
558
1062
(
559
1062
atom
561
1062
and_expr
562
1062
NAME
563
1062
power
564
1062
True
565
1062
xor_expr
567
1062
False
569
1062
comparison
1568
1063
~
544
1063
factor
545
1063
STRING
546
1063
arith_expr
549
1063
term
550
1063
atom_expr
551
1063
NUMBER
552
1063
{
554
1063
[
555
1063
-
556
1063
shift_expr
1569
1063
None
557
1063
+
558
1063
(
559
1063
atom
561
1063
NAME
563
1063
power
564
1063
True
565
1063
False
569
1064
~
544
1064
factor
545
1064
STRING
546
1064
arith_expr
549
1064
term
550
1064
atom_expr
551
1064
NUMBER
552
1064
{
554
1064
[
555
1064
-
556
1064
None
557
1064
+
558
1064
(
559
1064
atom
561
1064
shift_expr
1570
1064
NAME
563
1064
power
564
1064
True
565
1064
False
569
1065
~
544
1065
arith_expr
1571
1065
factor
545
1065
STRING
546
1065
term
550
1065
atom_expr
551
1065
NUMBER
552
1065
{
554
1065
[
555
1065
-
556
1065
None
557
1065
+
558
1065
(
559
1065
atom
561
1065
NAME
563
1065
power
564
1065
True
565
1065
False
569
1066
~
544
1066
factor
545
1066
STRING
546
1066
term
550
1066
arith_expr
1572
1066
atom_expr
551
1066
NUMBER
552
1066
{
554
1066
[
555
1066
-
556
1066
None
557
1066
+
558
1066
(
559
1066
atom
561
1066
NAME
563
1066
power
564
1066
True
565
1066
False
569
1067
~
544
1067
STRING
546
1067
atom_expr
551
1067
factor
1573
1067
NUMBER
552
1067
{
554
1067
[
555
1067
None
557
1067
-
556
1067
+
558
1067
(
559
1067
atom
561
1067
NAME
563
1067
power
564
1067
True
565
1067
False
569
1068
~
544
1068
factor
545
1068
STRING
546
1068
shift_expr
547
1068
expr
548
1068
arith_expr
549
1068
term
550
1068
atom_expr
551
1068
NUMBER
552
1068
subscript
553
1068
{
554
1068
[
555
1068
-
556
1068
None
557
1068
+
558
1068
(
559
1068
atom
561
1068
and_expr
562
1068
NAME
563
1068
power
564
1068
True
565
1068
comparison
566
1068
xor_expr
567
1068
lambda
568
1068
False
569
1068
not_test
570
1068
and_test
571
1068
test
572
1068
or_test
573
1068
not
574
1068
:
maybe_test -> 
1068
maybe_test
575
1068
lambdef
576
1068
subscriptlist
1574
1069
//
atom -> { }
1069
[
atom -> { }
1069
|
atom -> { }
1069
>
atom -> { }
1069
>=
atom -> { }
1069
==
atom -> { }
1069
&
atom -> { }
1069
not
atom -> { }
1069
**
atom -> { }
1069
in
atom -> { }
1069
,
atom -> { }
1069
or
atom -> { }
1069
:
atom -> { }
1069
<
atom -> { }
1069
!=
atom -> { }
1069
+
atom -> { }
1069
<<
atom -> { }
1069
^
atom -> { }
1069
<=
atom -> { }
1069
if
atom -> { }
1069
/
atom -> { }
1069
is
atom -> { }
1069
-
atom -> { }
1069
>>
atom -> { }
1069
%
atom -> { }
1069
.
atom -> { }
1069
(
atom -> { }
1069
and
atom -> { }
1069
*
atom -> { }
1069
]
atom -> { }
1069
@
atom -> { }
1070
]
1575
1071
==
atom -> [ ]
1071
%
atom -> [ ]
1071
**
atom -> [ ]
1071
.
atom -> [ ]
1071
<<
atom -> [ ]
1071
not
atom -> [ ]
1071
/
atom -> [ ]
1071
*
atom -> [ ]
1071
if
atom -> [ ]
1071
!=
atom -> [ ]
1071
<=
atom -> [ ]
1071
@
atom -> [ ]
1071
-
atom -> [ ]
1071
>>
atom -> [ ]
1071
^
atom -> [ ]
1071
|
atom -> [ ]
1071
,
atom -> [ ]
1071
:
atom -> [ ]
1071
<
atom -> [ ]
1071
]
atom -> [ ]
1071
[
atom -> [ ]
1071
is
atom -> [ ]
1071
in
atom -> [ ]
1071
>
atom -> [ ]
1071
+
atom -> [ ]
1071
>=
atom -> [ ]
1071
and
atom -> [ ]
1071
or
atom -> [ ]
1071
&
atom -> [ ]
1071
(
atom -> [ ]
1071
//
atom -> [ ]
1072
if
factor -> - factor
1072
/
factor -> - factor
1072
]
factor -> - factor
1072
,
factor -> - factor
1072
not
factor -> - factor
1072
<
factor -> - factor
1072
or
factor -> - factor
1072
//
factor -> - factor
1072
!=
factor -> - factor
1072
%
factor -> - factor
1072
|
factor -> - factor
1072
>
factor -> - factor
1072
+
factor -> - factor
1072
:
factor -> - factor
1072
-
factor -> - factor
1072
^
factor -> - factor
1072
in
factor -> - factor
1072
<<
factor -> - factor
1072
&
factor -> - factor
1072
<=
factor -> - factor
1072
==
factor -> - factor
1072
and
factor -> - factor
1072
@
factor -> - factor
1072
>=
factor -> - factor
1072
is
factor -> - factor
1072
>>
factor -> - factor
1072
*
factor -> - factor
1073
<
factor -> + factor
1073
,
factor -> + factor
1073
in
factor -> + factor
1073
|
factor -> + factor
1073
==
factor -> + factor
1073
>
factor -> + factor
1073
-
factor -> + factor
1073
and
factor -> + factor
1073
*
factor -> + factor
1073
if
factor -> + factor
1073
%
factor -> + factor
1073
@
factor -> + factor
1073
is
factor -> + factor
1073
//
factor -> + factor
1073
&
factor -> + factor
1073
]
factor -> + factor
1073
^
factor -> + factor
1073
>=
factor -> + factor
1073
not
factor -> + factor
1073
/
factor -> + factor
1073
:
factor -> + factor
1073
or
factor -> + factor
1073
!=
factor -> + factor
1073
<<
factor -> + factor
1073
>>
factor -> + factor
1073
<=
factor -> + factor
1073
+
factor -> + factor
1074
-
atom -> ( )
1074
==
atom -> ( )
1074
/
atom -> ( )
1074
<=
atom -> ( )
1074
(
atom -> ( )
1074
&
atom -> ( )
1074
[
atom -> ( )
1074
,
atom -> ( )
1074
^
atom -> ( )
1074
or
atom -> ( )
1074
+
atom -> ( )
1074
>>
atom -> ( )
1074
]
atom -> ( )
1074
is
atom -> ( )
1074
*
atom -> ( )
1074
if
atom -> ( )
1074
and
atom -> ( )
1074
>=
atom -> ( )
1074
>
atom -> ( )
1074
@
atom -> ( )
1074
:
atom -> ( )
1074
in
atom -> ( )
1074
not
atom -> ( )
1074
<
atom -> ( )
1074
.
atom -> ( )
1074
//
atom -> ( )
1074
%
atom -> ( )
1074
<<
atom -> ( )
1074
|
atom -> ( )
1074
**
atom -> ( )
1074
!=
atom -> ( )
1075
)
1576
1076
,
trailer -> [ subscriptlist ]
1076
//
trailer -> [ subscriptlist ]
1076
/
trailer -> [ subscriptlist ]
1076
^=
trailer -> [ subscriptlist ]
1076
^
trailer -> [ subscriptlist ]
1076
.
trailer -> [ subscriptlist ]
1076
<
trailer -> [ subscriptlist ]
1076
<<
trailer -> [ subscriptlist ]
1076
in
trailer -> [ subscriptlist ]
1076
NEWLINE
trailer -> [ subscriptlist ]
1076
@
trailer -> [ subscriptlist ]
1076
>
trailer -> [ subscriptlist ]
1076
*=
trailer -> [ subscriptlist ]
1076
:
trailer -> [ subscriptlist ]
1076
@=
trailer -> [ subscriptlist ]
1076
*
trailer -> [ subscriptlist ]
1076
>=
trailer -> [ subscriptlist ]
1076
+=
trailer -> [ subscriptlist ]
1076
-=
trailer -> [ subscriptlist ]
1076
/=
trailer -> [ subscriptlist ]
1076
and
trailer -> [ subscriptlist ]
1076
+
trailer -> [ subscriptlist ]
1076
&=
trailer -> [ subscriptlist ]
1076
(
trailer -> [ subscriptlist ]
1076
=
trailer -> [ subscriptlist ]
1076
//=
trailer -> [ subscriptlist ]
1076
is
trailer -> [ subscriptlist ]
1076
<<=
trailer -> [ subscriptlist ]
1076
or
trailer -> [ subscriptlist ]
1076
|=
trailer -> [ subscriptlist ]
1076
<=
trailer -> [ subscriptlist ]
1076
if
trailer -> [ subscriptlist ]
1076
|
trailer -> [ subscriptlist ]
1076
==
trailer -> [ subscriptlist ]
1076
not
trailer -> [ subscriptlist ]
1076
-
trailer -> [ subscriptlist ]
1076
!=
trailer -> [ subscriptlist ]
1076
%=
trailer -> [ subscriptlist ]
1076
[
trailer -> [ subscriptlist ]
1076
&
trailer -> [ subscriptlist ]
1076
**=
trailer -> [ subscriptlist ]
1076
>>
trailer -> [ subscriptlist ]
1076
%
trailer -> [ subscriptlist ]
1076
>>=
trailer -> [ subscriptlist ]
1076
**
trailer -> [ subscriptlist ]
1077
~
544
1077
factor
545
1077
STRING
546
1077
shift_expr
547
1077
expr
548
1077
arith_expr
549
1077
term
550
1077
atom_expr
551
1077
NUMBER
552
1077
subscript
553
1077
{
554
1077
[
555
1077
-
556
1077
None
557
1077
+
558
1077
(
559
1077
subscriptlist
1577
1077
atom
561
1077
and_expr
562
1077
NAME
563
1077
power
564
1077
True
565
1077
comparison
566
1077
xor_expr
567
1077
lambda
568
1077
False
569
1077
not_test
570
1077
and_test
571
1077
test
572
1077
or_test
573
1077
not
574
1077
:
maybe_test -> 
1077
maybe_test
575
1077
lambdef
576
1078
)
1578
1078
~
579
1078
factor
580
1078
STRING
581
1078
shift_expr
582
1078
arith_expr
583
1078
term
584
1078
NUMBER
585
1078
and_expr
586
1078
{
587
1078
atom_expr
589
1078
[
590
1078
-
591
1078
None
592
1078
(
593
1078
atom
594
1078
+
595
1078
not_test
596
1078
arglist
1579
1078
test
597
1078
NAME
598
1078
power
599
1078
True
600
1078
comparison
601
1078
xor_expr
602
1078
lambdef
603
1078
False
604
1078
argument
605
1078
and_test
606
1078
lambda
607
1078
or_test
608
1078
expr
609
1078
not
610
1078
**
611
1078
*
612
1079
[
1077
1079
(
1078
1079
//
trailer_expr -> 
1079
trailer
1079
1079
<<
trailer_expr -> 
1079
*
trailer_expr -> 
1079
in
trailer_expr -> 
1079
&
trailer_expr -> 
1079
trailer_expr
1580
1079
and
trailer_expr -> 
1079
.
1081
1079
<=
trailer_expr -> 
1079
,
trailer_expr -> 
1079
|
trailer_expr -> 
1079
or
trailer_expr -> 
1079
>=
trailer_expr -> 
1079
:
trailer_expr -> 
1079
+
trailer_expr -> 
1079
**
trailer_expr -> 
1079
>>
trailer_expr -> 
1079
!=
trailer_expr -> 
1079
-
trailer_expr -> 
1079
/
trailer_expr -> 
1079
]
trailer_expr -> 
1079
%
trailer_expr -> 
1079
is
trailer_expr -> 
1079
<
trailer_expr -> 
1079
>
trailer_expr -> 
1079
if
trailer_expr -> 
1079
^
trailer_expr -> 
1079
==
trailer_expr -> 
1079
@
trailer_expr -> 
1079
not
trailer_expr -> 
1080
<=
atom_expr -> atom trailer_expr
1080
or
atom_expr -> atom trailer_expr
1080
,
atom_expr -> atom trailer_expr
1080
*
atom_expr -> atom trailer_expr
1080
>=
atom_expr -> atom trailer_expr
1080
**
atom_expr -> atom trailer_expr
1080
&
atom_expr -> atom trailer_expr
1080
%
atom_expr -> atom trailer_expr
1080
if
atom_expr -> atom trailer_expr
1080
+
atom_expr -> atom trailer_expr
1080
:
atom_expr -> atom trailer_expr
1080
is
atom_expr -> atom trailer_expr
1080
//
atom_expr -> atom trailer_expr
1080
!=
atom_expr -> atom trailer_expr
1080
|
atom_expr -> atom trailer_expr
1080
<
atom_expr -> atom trailer_expr
1080
@
atom_expr -> atom trailer_expr
1080
not
atom_expr -> atom trailer_expr
1080
-
atom_expr -> atom trailer_expr
1080
in
atom_expr -> atom trailer_expr
1080
/
atom_expr -> atom trailer_expr
1080
^
atom_expr -> atom trailer_expr
1080
>
atom_expr -> atom trailer_expr
1080
==
atom_expr -> atom trailer_expr
1080
<<
atom_expr -> atom trailer_expr
1080
>>
atom_expr -> atom trailer_expr
1080
]
atom_expr -> atom trailer_expr
1080
and
atom_expr -> atom trailer_expr
1081
NAME
1581
1082
~
544
1082
factor
545
1082
STRING
546
1082
shift_expr
547
1082
arith_expr
549
1082
term
550
1082
atom_expr
551
1082
NUMBER
552
1082
{
554
1082
[
555
1082
xor_expr
1582
1082
-
556
1082
None
557
1082
+
558
1082
(
559
1082
atom
561
1082
and_expr
562
1082
NAME
563
1082
power
564
1082
True
565
1082
False
569
1083
~
544
1083
factor
545
1083
STRING
546
1083
shift_expr
547
1083
arith_expr
549
1083
term
550
1083
atom_expr
551
1083
NUMBER
552
1083
{
554
1083
[
555
1083
-
556
1083
None
557
1083
+
558
1083
(
559
1083
atom
561
1083
and_expr
562
1083
expr
1583
1083
NAME
563
1083
power
564
1083
True
565
1083
xor_expr
567
1083
False
569
1084
:
1584
1085
~
544
1085
factor
545
1085
STRING
546
1085
shift_expr
547
1085
expr
548
1085
arith_expr
549
1085
term
550
1085
atom_expr
551
1085
NUMBER
552
1085
{
554
1085
[
555
1085
-
556
1085
None
557
1085
+
558
1085
(
559
1085
atom
561
1085
and_expr
562
1085
NAME
563
1085
power
564
1085
True
565
1085
comparison
566
1085
xor_expr
567
1085
lambda
568
1085
False
569
1085
not_test
570
1085
and_test
571
1085
test
1585
1085
or_test
573
1085
not
574
1085
lambdef
576
1086
~
544
1086
factor
545
1086
STRING
546
1086
shift_expr
547
1086
expr
548
1086
arith_expr
549
1086
term
550
1086
atom_expr
551
1086
NUMBER
552
1086
{
554
1086
[
555
1086
-
556
1086
None
557
1086
+
558
1086
(
559
1086
atom
561
1086
and_expr
562
1086
NAME
563
1086
power
564
1086
True
565
1086
and_test
1586
1086
comparison
566
1086
xor_expr
567
1086
False
569
1086
not_test
570
1086
not
574
1087
or_test
1587
1087
factor
545
1087
~
544
1087
shift_expr
547
1087
STRING
546
1087
expr
548
1087
arith_expr
549
1087
term
550
1087
atom_expr
551
1087
NUMBER
552
1087
{
554
1087
[
555
1087
-
556
1087
None
557
1087
+
558
1087
(
559
1087
atom
561
1087
and_expr
562
1087
NAME
563
1087
power
564
1087
True
565
1087
comparison
566
1087
xor_expr
567
1087
False
569
1087
not_test
570
1087
and_test
571
1087
not
574
1088
~
509
1088
factor
510
1088
STRING
511
1088
shift_expr
512
1088
term
513
1088
NUMBER
514
1088
{
515
1088
atom_expr
516
1088
[
517
1088
-
518
1088
None
519
1088
(
520
1088
atom
521
1088
arith_expr
522
1088
False
523
1088
+
524
1088
or_test
1588
1088
NAME
526
1088
power
527
1088
True
528
1088
xor_expr
529
1088
comparison
530
1088
and_expr
531
1088
not_test
532
1088
not
533
1088
expr
534
1088
and_test
535
1089
:
not_test -> not not_test
1089
,
not_test -> not not_test
1089
if
not_test -> not not_test
1089
]
not_test -> not not_test
1089
and
not_test -> not not_test
1089
or
not_test -> not not_test
1090
~
544
1090
factor
545
1090
STRING
546
1090
shift_expr
547
1090
expr
548
1090
arith_expr
549
1090
term
550
1090
atom_expr
551
1090
NUMBER
552
1090
{
554
1090
[
555
1090
-
556
1090
None
557
1090
+
558
1090
(
559
1090
test
1589
1090
atom
561
1090
and_expr
562
1090
NAME
563
1090
power
564
1090
True
565
1090
]
maybe_test -> 
1090
comparison
566
1090
xor_expr
567
1090
lambda
568
1090
False
569
1090
not_test
570
1090
,
maybe_test -> 
1090
and_test
571
1090
or_test
573
1090
not
574
1090
:
maybe_test -> 
1090
lambdef
576
1090
maybe_test
1590
1091
,
factor -> ~ factor
1091
<
factor -> ~ factor
1091
in
factor -> ~ factor
1091
==
factor -> ~ factor
1091
|
factor -> ~ factor
1091
)
factor -> ~ factor
1091
<<
factor -> ~ factor
1091
>
factor -> ~ factor
1091
not
factor -> ~ factor
1091
<=
factor -> ~ factor
1091
//
factor -> ~ factor
1091
>=
factor -> ~ factor
1091
>>
factor -> ~ factor
1091
-
factor -> ~ factor
1091
*
factor -> ~ factor
1091
/
factor -> ~ factor
1091
if
factor -> ~ factor
1091
^
factor -> ~ factor
1091
and
factor -> ~ factor
1091
is
factor -> ~ factor
1091
for
factor -> ~ factor
1091
+
factor -> ~ factor
1091
or
factor -> ~ factor
1091
&
factor -> ~ factor
1091
=
factor -> ~ factor
1091
!=
factor -> ~ factor
1091
%
factor -> ~ factor
1091
@
factor -> ~ factor
1092
~
579
1092
factor
580
1092
STRING
581
1092
term
1591
1092
NUMBER
585
1092
{
587
1092
[
590
1092
atom_expr
589
1092
-
591
1092
None
592
1092
(
593
1092
atom
594
1092
+
595
1092
NAME
598
1092
power
599
1092
True
600
1092
False
604
1093
~
579
1093
factor
580
1093
STRING
581
1093
NUMBER
585
1093
{
587
1093
[
590
1093
atom_expr
589
1093
-
591
1093
None
592
1093
(
593
1093
atom
594
1093
+
595
1093
NAME
598
1093
power
599
1093
True
600
1093
False
604
1093
term
1592
1094
~
579
1094
factor
580
1094
STRING
581
1094
NUMBER
585
1094
{
587
1094
term
1593
1094
[
590
1094
atom_expr
589
1094
-
591
1094
None
592
1094
(
593
1094
atom
594
1094
+
595
1094
NAME
598
1094
power
599
1094
True
600
1094
False
604
1095
~
579
1095
factor
580
1095
STRING
581
1095
NUMBER
585
1095
{
587
1095
[
590
1095
atom_expr
589
1095
-
591
1095
None
592
1095
(
593
1095
atom
594
1095
+
595
1095
term
1594
1095
NAME
598
1095
power
599
1095
True
600
1095
False
604
1096
~
579
1096
factor
580
1096
STRING
581
1096
NUMBER
585
1096
{
587
1096
[
590
1096
atom_expr
589
1096
-
591
1096
None
592
1096
(
593
1096
term
1595
1096
atom
594
1096
+
595
1096
NAME
598
1096
power
599
1096
True
600
1096
False
604
1097
~
579
1097
factor
580
1097
STRING
581
1097
shift_expr
582
1097
arith_expr
583
1097
term
584
1097
NUMBER
585
1097
{
587
1097
atom_expr
589
1097
[
590
1097
-
591
1097
None
592
1097
(
593
1097
atom
594
1097
+
595
1097
NAME
598
1097
power
599
1097
True
600
1097
False
604
1097
and_expr
1596
1098
~
579
1098
factor
580
1098
STRING
581
1098
arith_expr
583
1098
term
584
1098
NUMBER
585
1098
{
587
1098
[
590
1098
atom_expr
589
1098
-
591
1098
shift_expr
1597
1098
None
592
1098
(
593
1098
atom
594
1098
+
595
1098
NAME
598
1098
power
599
1098
True
600
1098
False
604
1099
~
579
1099
factor
580
1099
STRING
581
1099
arith_expr
583
1099
term
584
1099
NUMBER
585
1099
{
587
1099
[
590
1099
atom_expr
589
1099
-
591
1099
None
592
1099
(
593
1099
atom
594
1099
+
595
1099
shift_expr
1598
1099
NAME
598
1099
power
599
1099
True
600
1099
False
604
1100
~
579
1100
factor
580
1100
STRING
581
1100
arith_expr
1599
1100
term
584
1100
NUMBER
585
1100
{
587
1100
[
590
1100
atom_expr
589
1100
-
591
1100
None
592
1100
(
593
1100
atom
594
1100
+
595
1100
NAME
598
1100
power
599
1100
True
600
1100
False
604
1101
~
579
1101
factor
580
1101
STRING
581
1101
term
584
1101
arith_expr
1600
1101
NUMBER
585
1101
{
587
1101
[
590
1101
atom_expr
589
1101
-
591
1101
None
592
1101
(
593
1101
atom
594
1101
+
595
1101
NAME
598
1101
power
599
1101
True
600
1101
False
604
1102
~
579
1102
factor
580
1102
STRING
581
1102
shift_expr
582
1102
arith_expr
583
1102
term
584
1102
NUMBER
585
1102
and_expr
586
1102
{
587
1102
atom_expr
589
1102
[
590
1102
xor_expr
1601
1102
-
591
1102
None
592
1102
(
593
1102
atom
594
1102
+
595
1102
NAME
598
1102
power
599
1102
True
600
1102
False
604
1103
//
atom -> { }
1103
)
atom -> { }
1103
[
atom -> { }
1103
|
atom -> { }
1103
>
atom -> { }
1103
>=
atom -> { }
1103
==
atom -> { }
1103
&
atom -> { }
1103
not
atom -> { }
1103
**
atom -> { }
1103
in
atom -> { }
1103
,
atom -> { }
1103
or
atom -> { }
1103
<
atom -> { }
1103
!=
atom -> { }
1103
+
atom -> { }
1103
<<
atom -> { }
1103
^
atom -> { }
1103
<=
atom -> { }
1103
if
atom -> { }
1103
for
atom -> { }
1103
/
atom -> { }
1103
is
atom -> { }
1103
-
atom -> { }
1103
>>
atom -> { }
1103
%
atom -> { }
1103
.
atom -> { }
1103
=
atom -> { }
1103
and
atom -> { }
1103
(
atom -> { }
1103
*
atom -> { }
1103
@
atom -> { }
1104
>=
trailer -> ( arglist )
1104
//
trailer -> ( arglist )
1104
%
trailer -> ( arglist )
1104
in
trailer -> ( arglist )
1104
>>=
trailer -> ( arglist )
1104
&
trailer -> ( arglist )
1104
&=
trailer -> ( arglist )
1104
,
trailer -> ( arglist )
1104
>>
trailer -> ( arglist )
1104
-
trailer -> ( arglist )
1104
:
trailer -> ( arglist )
1104
^
trailer -> ( arglist )
1104
//=
trailer -> ( arglist )
1104
>
trailer -> ( arglist )
1104
*=
trailer -> ( arglist )
1104
<<
trailer -> ( arglist )
1104
==
trailer -> ( arglist )
1104
<=
trailer -> ( arglist )
1104
+=
trailer -> ( arglist )
1104
*
trailer -> ( arglist )
1104
^=
trailer -> ( arglist )
1104
<<=
trailer -> ( arglist )
1104
and
trailer -> ( arglist )
1104
=
trailer -> ( arglist )
1104
/
trailer -> ( arglist )
1104
[
trailer -> ( arglist )
1104
(
trailer -> ( arglist )
1104
|=
trailer -> ( arglist )
1104
<
trailer -> ( arglist )
1104
NEWLINE
trailer -> ( arglist )
1104
/=
trailer -> ( arglist )
1104
|
trailer -> ( arglist )
1104
-=
trailer -> ( arglist )
1104
+
trailer -> ( arglist )
1104
%=
trailer -> ( arglist )
1104
**=
trailer -> ( arglist )
1104
not
trailer -> ( arglist )
1104
or
trailer -> ( arglist )
1104
is
trailer -> ( arglist )
1104
@=
trailer -> ( arglist )
1104
.
trailer -> ( arglist )
1104
!=
trailer -> ( arglist )
1104
@
trailer -> ( arglist )
1104
**
trailer -> ( arglist )
1104
if
trailer -> ( arglist )
1105
~
579
1105
STRING
581
1105
NUMBER
585
1105
factor
1602
1105
{
587
1105
[
590
1105
atom_expr
589
1105
None
592
1105
-
591
1105
(
593
1105
atom
594
1105
+
595
1105
NAME
598
1105
power
599
1105
True
600
1105
False
604
1106
]
1603
1107
for
atom -> [ ]
1107
==
atom -> [ ]
1107
%
atom -> [ ]
1107
**
atom -> [ ]
1107
.
atom -> [ ]
1107
<<
atom -> [ ]
1107
not
atom -> [ ]
1107
/
atom -> [ ]
1107
*
atom -> [ ]
1107
if
atom -> [ ]
1107
!=
atom -> [ ]
1107
<=
atom -> [ ]
1107
@
atom -> [ ]
1107
-
atom -> [ ]
1107
>>
atom -> [ ]
1107
^
atom -> [ ]
1107
|
atom -> [ ]
1107
,
atom -> [ ]
1107
<
atom -> [ ]
1107
[
atom -> [ ]
1107
is
atom -> [ ]
1107
in
atom -> [ ]
1107
>
atom -> [ ]
1107
=
atom -> [ ]
1107
+
atom -> [ ]
1107
>=
atom -> [ ]
1107
and
atom -> [ ]
1107
or
atom -> [ ]
1107
)
atom -> [ ]
1107
&
atom -> [ ]
1107
(
atom -> [ ]
1107
//
atom -> [ ]
1108
if
factor -> - factor
1108
/
factor -> - factor
1108
,
factor -> - factor
1108
not
factor -> - factor
1108
<
factor -> - factor
1108
or
factor -> - factor
1108
//
factor -> - factor
1108
!=
factor -> - factor
1108
%
factor -> - factor
1108
|
factor -> - factor
1108
for
factor -> - factor
1108
>
factor -> - factor
1108
+
factor -> - factor
1108
=
factor -> - factor
1108
-
factor -> - factor
1108
^
factor -> - factor
1108
in
factor -> - factor
1108
<<
factor -> - factor
1108
&
factor -> - factor
1108
<=
factor -> - factor
1108
==
factor -> - factor
1108
and
factor -> - factor
1108
@
factor -> - factor
1108
>=
factor -> - factor
1108
is
factor -> - factor
1108
>>
factor -> - factor
1108
*
factor -> - factor
1108
)
factor -> - factor
1109
-
atom -> ( )
1109
==
atom -> ( )
1109
/
atom -> ( )
1109
<=
atom -> ( )
1109
(
atom -> ( )
1109
&
atom -> ( )
1109
[
atom -> ( )
1109
,
atom -> ( )
1109
=
atom -> ( )
1109
^
atom -> ( )
1109
or
atom -> ( )
1109
+
atom -> ( )
1109
>>
atom -> ( )
1109
)
atom -> ( )
1109
is
atom -> ( )
1109
*
atom -> ( )
1109
if
atom -> ( )
1109
and
atom -> ( )
1109
>=
atom -> ( )
1109
>
atom -> ( )
1109
@
atom -> ( )
1109
in
atom -> ( )
1109
not
atom -> ( )
1109
<
atom -> ( )
1109
.
atom -> ( )
1109
//
atom -> ( )
1109
%
atom -> ( )
1109
<<
atom -> ( )
1109
for
atom -> ( )
1109
|
atom -> ( )
1109
**
atom -> ( )
1109
!=
atom -> ( )
1110
)
1604
1111
~
544
1111
factor
545
1111
STRING
546
1111
shift_expr
547
1111
expr
548
1111
arith_expr
549
1111
term
550
1111
atom_expr
551
1111
NUMBER
552
1111
subscript
553
1111
{
554
1111
[
555
1111
-
556
1111
None
557
1111
+
558
1111
(
559
1111
subscriptlist
1605
1111
atom
561
1111
and_expr
562
1111
NAME
563
1111
power
564
1111
True
565
1111
comparison
566
1111
xor_expr
567
1111
lambda
568
1111
False
569
1111
not_test
570
1111
and_test
571
1111
test
572
1111
or_test
573
1111
not
574
1111
:
maybe_test -> 
1111
maybe_test
575
1111
lambdef
576
1112
arglist
1606
1112
)
1607
1112
~
579
1112
factor
580
1112
STRING
581
1112
shift_expr
582
1112
arith_expr
583
1112
term
584
1112
NUMBER
585
1112
and_expr
586
1112
{
587
1112
atom_expr
589
1112
[
590
1112
-
591
1112
None
592
1112
(
593
1112
atom
594
1112
+
595
1112
not_test
596
1112
test
597
1112
NAME
598
1112
power
599
1112
True
600
1112
comparison
601
1112
xor_expr
602
1112
lambdef
603
1112
False
604
1112
argument
605
1112
and_test
606
1112
lambda
607
1112
or_test
608
1112
expr
609
1112
not
610
1112
**
611
1112
*
612
1113
NAME
1608
1114
[
1111
1114
(
1112
1114
.
1113
1114
//
trailer_expr -> 
1114
trailer
1114
1114
<<
trailer_expr -> 
1114
*
trailer_expr -> 
1114
in
trailer_expr -> 
1114
&
trailer_expr -> 
1114
trailer_expr
1609
1114
and
trailer_expr -> 
1114
<=
trailer_expr -> 
1114
,
trailer_expr -> 
1114
|
trailer_expr -> 
1114
or
trailer_expr -> 
1114
>=
trailer_expr -> 
1114
=
trailer_expr -> 
1114
for
trailer_expr -> 
1114
+
trailer_expr -> 
1114
**
trailer_expr -> 
1114
>>
trailer_expr -> 
1114
!=
trailer_expr -> 
1114
-
trailer_expr -> 
1114
/
trailer_expr -> 
1114
%
trailer_expr -> 
1114
is
trailer_expr -> 
1114
<
trailer_expr -> 
1114
>
trailer_expr -> 
1114
if
trailer_expr -> 
1114
^
trailer_expr -> 
1114
==
trailer_expr -> 
1114
@
trailer_expr -> 
1114
)
trailer_expr -> 
1114
not
trailer_expr -> 
1115
for
atom_expr -> atom trailer_expr
1115
<=
atom_expr -> atom trailer_expr
1115
or
atom_expr -> atom trailer_expr
1115
,
atom_expr -> atom trailer_expr
1115
*
atom_expr -> atom trailer_expr
1115
>=
atom_expr -> atom trailer_expr
1115
**
atom_expr -> atom trailer_expr
1115
&
atom_expr -> atom trailer_expr
1115
%
atom_expr -> atom trailer_expr
1115
if
atom_expr -> atom trailer_expr
1115
+
atom_expr -> atom trailer_expr
1115
//
atom_expr -> atom trailer_expr
1115
is
atom_expr -> atom trailer_expr
1115
!=
atom_expr -> atom trailer_expr
1115
|
atom_expr -> atom trailer_expr
1115
<
atom_expr -> atom trailer_expr
1115
@
atom_expr -> atom trailer_expr
1115
not
atom_expr -> atom trailer_expr
1115
-
atom_expr -> atom trailer_expr
1115
in
atom_expr -> atom trailer_expr
1115
/
atom_expr -> atom trailer_expr
1115
^
atom_expr -> atom trailer_expr
1115
=
atom_expr -> atom trailer_expr
1115
>
atom_expr -> atom trailer_expr
1115
==
atom_expr -> atom trailer_expr
1115
<<
atom_expr -> atom trailer_expr
1115
>>
atom_expr -> atom trailer_expr
1115
and
atom_expr -> atom trailer_expr
1115
)
atom_expr -> atom trailer_expr
1116
<
factor -> + factor
1116
,
factor -> + factor
1116
for
factor -> + factor
1116
in
factor -> + factor
1116
|
factor -> + factor
1116
==
factor -> + factor
1116
>
factor -> + factor
1116
-
factor -> + factor
1116
and
factor -> + factor
1116
*
factor -> + factor
1116
if
factor -> + factor
1116
%
factor -> + factor
1116
@
factor -> + factor
1116
is
factor -> + factor
1116
//
factor -> + factor
1116
&
factor -> + factor
1116
)
factor -> + factor
1116
^
factor -> + factor
1116
>=
factor -> + factor
1116
not
factor -> + factor
1116
/
factor -> + factor
1116
=
factor -> + factor
1116
or
factor -> + factor
1116
!=
factor -> + factor
1116
<<
factor -> + factor
1116
>>
factor -> + factor
1116
<=
factor -> + factor
1116
+
factor -> + factor
1117
~
579
1117
factor
580
1117
STRING
581
1117
shift_expr
582
1117
arith_expr
583
1117
term
584
1117
NUMBER
585
1117
and_expr
586
1117
{
587
1117
atom_expr
589
1117
[
590
1117
-
591
1117
None
592
1117
(
593
1117
atom
594
1117
+
595
1117
not_test
596
1117
NAME
598
1117
power
599
1117
True
600
1117
and_test
1610
1117
comparison
601
1117
xor_expr
602
1117
False
604
1117
expr
609
1117
not
610
1118
~
948
1118
factor
949
1118
STRING
950
1118
shift_expr
951
1118
arith_expr
952
1118
term
953
1118
NUMBER
954
1118
{
955
1118
atom_expr
956
1118
[
957
1118
-
958
1118
None
959
1118
(
960
1118
atom
961
1118
+
962
1118
NAME
964
1118
power
965
1118
True
966
1118
comparison
967
1118
xor_expr
968
1118
False
969
1118
and_expr
970
1118
test
1611
1118
not_test
971
1118
lambdef
972
1118
lambda
973
1118
or_test
974
1118
and_test
975
1118
not
976
1118
expr
977
1119
~
223
1119
factor
224
1119
STRING
225
1119
None
226
1119
arith_expr
227
1119
[
228
1119
expr
229
1119
NUMBER
230
1119
{
231
1119
(
232
1119
and_expr
233
1119
atom
234
1119
-
235
1119
atom_expr
237
1119
+
238
1119
False
239
1119
True
240
1119
power
241
1119
expr_list
1612
1119
term
242
1119
NAME
243
1119
shift_expr
244
1119
xor_expr
245
1120
,
argument -> test comp_for
1120
)
argument -> test comp_for
1121
~
579
1121
factor
580
1121
STRING
581
1121
shift_expr
582
1121
arith_expr
583
1121
term
584
1121
expr
1613
1121
NUMBER
585
1121
and_expr
586
1121
{
587
1121
atom_expr
589
1121
[
590
1121
-
591
1121
None
592
1121
(
593
1121
atom
594
1121
+
595
1121
NAME
598
1121
power
599
1121
True
600
1121
xor_expr
602
1121
False
604
1122
~
579
1122
factor
580
1122
STRING
581
1122
shift_expr
582
1122
arith_expr
583
1122
term
584
1122
NUMBER
585
1122
and_expr
586
1122
{
587
1122
atom_expr
589
1122
[
590
1122
-
591
1122
None
592
1122
(
593
1122
atom
594
1122
+
595
1122
not_test
596
1122
test
597
1122
NAME
598
1122
power
599
1122
True
600
1122
comparison
601
1122
xor_expr
602
1122
lambdef
603
1122
False
604
1122
argument
605
1122
and_test
606
1122
lambda
607
1122
or_test
608
1122
expr
609
1122
not
610
1122
**
611
1122
*
612
1122
arglist
1614
1123
or_test
1615
1123
factor
580
1123
~
579
1123
shift_expr
582
1123
STRING
581
1123
arith_expr
583
1123
term
584
1123
NUMBER
585
1123
and_expr
586
1123
{
587
1123
atom_expr
589
1123
[
590
1123
-
591
1123
None
592
1123
(
593
1123
atom
594
1123
+
595
1123
not_test
596
1123
NAME
598
1123
power
599
1123
True
600
1123
comparison
601
1123
xor_expr
602
1123
False
604
1123
and_test
606
1123
expr
609
1123
not
610
1124
~
579
1124
factor
580
1124
STRING
581
1124
shift_expr
582
1124
arith_expr
583
1124
term
584
1124
NUMBER
585
1124
and_expr
586
1124
{
587
1124
atom_expr
589
1124
[
590
1124
-
591
1124
None
592
1124
(
593
1124
atom
594
1124
+
595
1124
not_test
596
1124
NAME
598
1124
power
599
1124
True
600
1124
comparison
601
1124
xor_expr
602
1124
lambdef
603
1124
False
604
1124
and_test
606
1124
lambda
607
1124
or_test
608
1124
test
1616
1124
expr
609
1124
not
610
1125
:
1617
1126
~
509
1126
factor
510
1126
STRING
511
1126
shift_expr
512
1126
term
513
1126
NUMBER
514
1126
{
515
1126
atom_expr
516
1126
[
517
1126
-
518
1126
None
519
1126
(
520
1126
atom
521
1126
arith_expr
522
1126
False
523
1126
+
524
1126
NAME
526
1126
power
527
1126
True
528
1126
xor_expr
529
1126
comparison
530
1126
and_expr
531
1126
not_test
532
1126
or_test
1618
1126
not
533
1126
expr
534
1126
and_test
535
1127
~
579
1127
factor
580
1127
STRING
581
1127
shift_expr
582
1127
arith_expr
583
1127
term
584
1127
NUMBER
585
1127
and_expr
586
1127
{
587
1127
atom_expr
589
1127
[
590
1127
-
591
1127
None
592
1127
(
593
1127
atom
594
1127
+
595
1127
NAME
598
1127
power
599
1127
True
600
1127
xor_expr
602
1127
False
604
1127
comparison
1619
1127
expr
609
1128
)
not_test -> not not_test
1128
,
not_test -> not not_test
1128
=
not_test -> not not_test
1128
if
not_test -> not not_test
1128
and
not_test -> not not_test
1128
or
not_test -> not not_test
1128
for
not_test -> not not_test
1129
)
argument -> ** test
1129
,
argument -> ** test
1130
)
argument -> * test
1130
,
argument -> * test
1131
:
1620
1132
)
1621
1133
NAME
1622
1133
tfpdef
1623
1134
:
1624
1134
,
tfpdef -> NAME
1134
=
tfpdef -> NAME
1134
)
tfpdef -> NAME
1135
NAME
1622
1135
tfpdef
1625
1136
=
1626
1136
)
param -> tfpdef
1136
,
param -> tfpdef
1137
,
1627
1137
)
parameters -> param
1138
finally
1628
1138
continue
try_stmt -> try : suite except_clause
1138
yield
try_stmt -> try : suite except_clause
1138
else
1629
1138
not
try_stmt -> try : suite except_clause
1138
if
try_stmt -> try : suite except_clause
1138
+
try_stmt -> try : suite except_clause
1138
$
try_stmt -> try : suite except_clause
1138
del
try_stmt -> try : suite except_clause
1138
NUMBER
try_stmt -> try : suite except_clause
1138
[
try_stmt -> try : suite except_clause
1138
begsim
try_stmt -> try : suite except_clause
1138
conf
try_stmt -> try : suite except_clause
1138
True
try_stmt -> try : suite except_clause
1138
def
try_stmt -> try : suite except_clause
1138
resetstats
try_stmt -> try : suite except_clause
1138
break
try_stmt -> try : suite except_clause
1138
class
try_stmt -> try : suite except_clause
1138
@
try_stmt -> try : suite except_clause
1138
try
try_stmt -> try : suite except_clause
1138
pass
try_stmt -> try : suite except_clause
1138
NAME
try_stmt -> try : suite except_clause
1138
~
try_stmt -> try : suite except_clause
1138
lambda
try_stmt -> try : suite except_clause
1138
raise
try_stmt -> try : suite except_clause
1138
for
try_stmt -> try : suite except_clause
1138
NEWLINE
try_stmt -> try : suite except_clause
1138
global
try_stmt -> try : suite except_clause
1138
while
try_stmt -> try : suite except_clause
1138
assert
try_stmt -> try : suite except_clause
1138
(
try_stmt -> try : suite except_clause
1138
STRING
try_stmt -> try : suite except_clause
1138
-
try_stmt -> try : suite except_clause
1138
None
try_stmt -> try : suite except_clause
1138
return
try_stmt -> try : suite except_clause
1138
with
try_stmt -> try : suite except_clause
1138
nonlocal
try_stmt -> try : suite except_clause
1138
{
try_stmt -> try : suite except_clause
1138
endsim
try_stmt -> try : suite except_clause
1138
False
try_stmt -> try : suite except_clause
1139
~
1630
1139
factor
1631
1139
test
1632
1139
shift_expr
1633
1139
STRING
1634
1139
expr
1635
1139
term
1636
1139
NUMBER
1637
1139
:
1638
1139
{
1639
1139
and_test
1640
1139
atom_expr
1641
1139
[
1642
1139
-
1643
1139
None
1644
1139
+
1645
1139
(
1646
1139
arith_expr
1647
1139
atom
1648
1139
and_expr
1649
1139
NAME
1650
1139
power
1651
1139
True
1652
1139
comparison
1653
1139
xor_expr
1654
1139
lambda
1655
1139
False
1656
1139
not_test
1657
1139
or_test
1658
1139
lambdef
1659
1139
not
1660
1140
except
simple_stmt -> small_stmt NEWLINE
1141
factor
1
1141
decorators
1661
1141
(
3
1141
STRING
4
1141
expr
5
1141
term
6
1141
conf
1662
1141
not
8
1141
while
1663
1141
or_test
10
1141
if
1664
1141
~
12
1141
atom_expr
13
1141
comparison
14
1141
None
15
1141
class
1665
1141
xor_expr
17
1141
arith_expr
18
1141
+
19
1141
confdef
1666
1141
decorated
1667
1141
atom
22
1141
try_stmt
1668
1141
def
1669
1141
compound_stmt
1670
1141
try
1671
1141
NUMBER
26
1141
NAME
27
1141
False
28
1141
shift_expr
29
1141
while_stmt
1672
1141
[
32
1141
and_expr
33
1141
not_test
34
1141
{
35
1141
-
36
1141
simple_stmt
1673
1141
for
1674
1141
and_test
39
1141
@
40
1141
with_stmt
1675
1141
funcdef
1676
1141
small_stmt
1677
1141
power
43
1141
classdef
1678
1141
lambdef
45
1141
lambda
46
1141
test
47
1141
True
48
1141
if_stmt
1679
1141
for_stmt
1680
1141
with
1681
1141
flow_stmt
53
1141
break
54
1141
raise
55
1141
yield
56
1141
assert
57
1141
continue_stmt
58
1141
stat_stmt
59
1141
return_stmt
60
1141
test_list
61
1141
stmt
1682
1141
continue
62
1141
yield_stmt
63
1141
decorator
64
1141
sim_stmt
65
1141
resetstats
66
1141
del
67
1141
return
68
1141
raise_stmt
69
1141
nonlocal
70
1141
pass_stmt
71
1141
expr_stmt
72
1141
assert_stmt
74
1141
stmt_list
1683
1141
endsim
75
1141
pass
76
1141
global_stmt
77
1141
del_stmt
78
1141
global
79
1141
break_stmt
82
1141
begsim
83
1141
nonlocal_stmt
84
1142
<=
term -> factor / term
1142
!=
term -> factor / term
1142
and
term -> factor / term
1142
or
term -> factor / term
1142
for
term -> factor / term
1142
|
term -> factor / term
1142
^
term -> factor / term
1142
>>
term -> factor / term
1142
==
term -> factor / term
1142
>
term -> factor / term
1142
if
term -> factor / term
1142
&
term -> factor / term
1142
]
term -> factor / term
1142
<<
term -> factor / term
1142
+
term -> factor / term
1142
-
term -> factor / term
1142
not
term -> factor / term
1142
in
term -> factor / term
1142
<
term -> factor / term
1142
is
term -> factor / term
1142
>=
term -> factor / term
1142
,
term -> factor / term
1143
is
term -> factor @ term
1143
for
term -> factor @ term
1143
and
term -> factor @ term
1143
>
term -> factor @ term
1143
not
term -> factor @ term
1143
in
term -> factor @ term
1143
==
term -> factor @ term
1143
<
term -> factor @ term
1143
,
term -> factor @ term
1143
]
term -> factor @ term
1143
or
term -> factor @ term
1143
!=
term -> factor @ term
1143
<<
term -> factor @ term
1143
<=
term -> factor @ term
1143
if
term -> factor @ term
1143
|
term -> factor @ term
1143
+
term -> factor @ term
1143
-
term -> factor @ term
1143
&
term -> factor @ term
1143
>=
term -> factor @ term
1143
>>
term -> factor @ term
1143
^
term -> factor @ term
1144
&
term -> factor * term
1144
-
term -> factor * term
1144
for
term -> factor * term
1144
in
term -> factor * term
1144
]
term -> factor * term
1144
or
term -> factor * term
1144
<=
term -> factor * term
1144
,
term -> factor * term
1144
|
term -> factor * term
1144
and
term -> factor * term
1144
not
term -> factor * term
1144
<<
term -> factor * term
1144
==
term -> factor * term
1144
if
term -> factor * term
1144
>
term -> factor * term
1144
>>
term -> factor * term
1144
<
term -> factor * term
1144
!=
term -> factor * term
1144
>=
term -> factor * term
1144
^
term -> factor * term
1144
+
term -> factor * term
1144
is
term -> factor * term
1145
>
term -> factor % term
1145
!=
term -> factor % term
1145
&
term -> factor % term
1145
>=
term -> factor % term
1145
or
term -> factor % term
1145
==
term -> factor % term
1145
^
term -> factor % term
1145
in
term -> factor % term
1145
,
term -> factor % term
1145
for
term -> factor % term
1145
|
term -> factor % term
1145
and
term -> factor % term
1145
if
term -> factor % term
1145
not
term -> factor % term
1145
is
term -> factor % term
1145
<
term -> factor % term
1145
>>
term -> factor % term
1145
-
term -> factor % term
1145
<=
term -> factor % term
1145
]
term -> factor % term
1145
<<
term -> factor % term
1145
+
term -> factor % term
1146
+
term -> factor // term
1146
==
term -> factor // term
1146
for
term -> factor // term
1146
]
term -> factor // term
1146
<<
term -> factor // term
1146
<
term -> factor // term
1146
if
term -> factor // term
1146
in
term -> factor // term
1146
!=
term -> factor // term
1146
>
term -> factor // term
1146
not
term -> factor // term
1146
>=
term -> factor // term
1146
and
term -> factor // term
1146
is
term -> factor // term
1146
-
term -> factor // term
1146
&
term -> factor // term
1146
|
term -> factor // term
1146
,
term -> factor // term
1146
^
term -> factor // term
1146
<=
term -> factor // term
1146
or
term -> factor // term
1146
>>
term -> factor // term
1147
for
and_expr -> shift_expr & and_expr
1147
|
and_expr -> shift_expr & and_expr
1147
!=
and_expr -> shift_expr & and_expr
1147
,
and_expr -> shift_expr & and_expr
1147
>=
and_expr -> shift_expr & and_expr
1147
not
and_expr -> shift_expr & and_expr
1147
and
and_expr -> shift_expr & and_expr
1147
is
and_expr -> shift_expr & and_expr
1147
in
and_expr -> shift_expr & and_expr
1147
or
and_expr -> shift_expr & and_expr
1147
==
and_expr -> shift_expr & and_expr
1147
^
and_expr -> shift_expr & and_expr
1147
<
and_expr -> shift_expr & and_expr
1147
>
and_expr -> shift_expr & and_expr
1147
]
and_expr -> shift_expr & and_expr
1147
if
and_expr -> shift_expr & and_expr
1147
<=
and_expr -> shift_expr & and_expr
1148
>=
shift_expr -> arith_expr >> shift_expr
1148
not
shift_expr -> arith_expr >> shift_expr
1148
>
shift_expr -> arith_expr >> shift_expr
1148
^
shift_expr -> arith_expr >> shift_expr
1148
for
shift_expr -> arith_expr >> shift_expr
1148
,
shift_expr -> arith_expr >> shift_expr
1148
is
shift_expr -> arith_expr >> shift_expr
1148
&
shift_expr -> arith_expr >> shift_expr
1148
!=
shift_expr -> arith_expr >> shift_expr
1148
<=
shift_expr -> arith_expr >> shift_expr
1148
and
shift_expr -> arith_expr >> shift_expr
1148
if
shift_expr -> arith_expr >> shift_expr
1148
==
shift_expr -> arith_expr >> shift_expr
1148
or
shift_expr -> arith_expr >> shift_expr
1148
in
shift_expr -> arith_expr >> shift_expr
1148
|
shift_expr -> arith_expr >> shift_expr
1148
]
shift_expr -> arith_expr >> shift_expr
1148
<
shift_expr -> arith_expr >> shift_expr
1149
,
shift_expr -> arith_expr << shift_expr
1149
>=
shift_expr -> arith_expr << shift_expr
1149
in
shift_expr -> arith_expr << shift_expr
1149
>
shift_expr -> arith_expr << shift_expr
1149
|
shift_expr -> arith_expr << shift_expr
1149
!=
shift_expr -> arith_expr << shift_expr
1149
<=
shift_expr -> arith_expr << shift_expr
1149
]
shift_expr -> arith_expr << shift_expr
1149
&
shift_expr -> arith_expr << shift_expr
1149
not
shift_expr -> arith_expr << shift_expr
1149
^
shift_expr -> arith_expr << shift_expr
1149
<
shift_expr -> arith_expr << shift_expr
1149
==
shift_expr -> arith_expr << shift_expr
1149
if
shift_expr -> arith_expr << shift_expr
1149
or
shift_expr -> arith_expr << shift_expr
1149
for
shift_expr -> arith_expr << shift_expr
1149
is
shift_expr -> arith_expr << shift_expr
1149
and
shift_expr -> arith_expr << shift_expr
1150
for
arith_expr -> term + arith_expr
1150
>>
arith_expr -> term + arith_expr
1150
^
arith_expr -> term + arith_expr
1150
<
arith_expr -> term + arith_expr
1150
|
arith_expr -> term + arith_expr
1150
and
arith_expr -> term + arith_expr
1150
!=
arith_expr -> term + arith_expr
1150
or
arith_expr -> term + arith_expr
1150
not
arith_expr -> term + arith_expr
1150
<=
arith_expr -> term + arith_expr
1150
>
arith_expr -> term + arith_expr
1150
,
arith_expr -> term + arith_expr
1150
if
arith_expr -> term + arith_expr
1150
is
arith_expr -> term + arith_expr
1150
]
arith_expr -> term + arith_expr
1150
==
arith_expr -> term + arith_expr
1150
&
arith_expr -> term + arith_expr
1150
>=
arith_expr -> term + arith_expr
1150
in
arith_expr -> term + arith_expr
1150
<<
arith_expr -> term + arith_expr
1151
==
arith_expr -> term - arith_expr
1151
is
arith_expr -> term - arith_expr
1151
<=
arith_expr -> term - arith_expr
1151
not
arith_expr -> term - arith_expr
1151
<<
arith_expr -> term - arith_expr
1151
&
arith_expr -> term - arith_expr
1151
|
arith_expr -> term - arith_expr
1151
and
arith_expr -> term - arith_expr
1151
or
arith_expr -> term - arith_expr
1151
,
arith_expr -> term - arith_expr
1151
for
arith_expr -> term - arith_expr
1151
]
arith_expr -> term - arith_expr
1151
>>
arith_expr -> term - arith_expr
1151
if
arith_expr -> term - arith_expr
1151
>=
arith_expr -> term - arith_expr
1151
<
arith_expr -> term - arith_expr
1151
^
arith_expr -> term - arith_expr
1151
>
arith_expr -> term - arith_expr
1151
!=
arith_expr -> term - arith_expr
1151
in
arith_expr -> term - arith_expr
1152
@
power -> atom_expr ** factor
1152
==
power -> atom_expr ** factor
1152
&
power -> atom_expr ** factor
1152
-
power -> atom_expr ** factor
1152
>
power -> atom_expr ** factor
1152
and
power -> atom_expr ** factor
1152
|
power -> atom_expr ** factor
1152
<=
power -> atom_expr ** factor
1152
%
power -> atom_expr ** factor
1152
or
power -> atom_expr ** factor
1152
*
power -> atom_expr ** factor
1152
not
power -> atom_expr ** factor
1152
]
power -> atom_expr ** factor
1152
in
power -> atom_expr ** factor
1152
<<
power -> atom_expr ** factor
1152
//
power -> atom_expr ** factor
1152
/
power -> atom_expr ** factor
1152
>>
power -> atom_expr ** factor
1152
,
power -> atom_expr ** factor
1152
^
power -> atom_expr ** factor
1152
if
power -> atom_expr ** factor
1152
!=
power -> atom_expr ** factor
1152
for
power -> atom_expr ** factor
1152
is
power -> atom_expr ** factor
1152
<
power -> atom_expr ** factor
1152
+
power -> atom_expr ** factor
1152
>=
power -> atom_expr ** factor
1153
in
1684
1154
~
1154
1154
STRING
1156
1154
atom_expr
1160
1154
NUMBER
1161
1154
{
1163
1154
[
1164
1154
None
1166
1154
-
1165
1154
factor
1685
1154
(
1167
1154
atom
1169
1154
+
1170
1154
NAME
1172
1154
power
1173
1154
True
1174
1154
False
1177
1155
/
1686
1155
@
1687
1155
if
term -> factor
1155
*
1688
1155
%
1689
1155
<<
term -> factor
1155
-
term -> factor
1155
//
1690
1155
>=
term -> factor
1155
or
term -> factor
1155
<=
term -> factor
1155
]
term -> factor
1155
>
term -> factor
1155
in
term -> factor
1155
<
term -> factor
1155
>>
term -> factor
1155
,
term -> factor
1155
==
term -> factor
1155
is
term -> factor
1155
+
term -> factor
1155
|
term -> factor
1155
!=
term -> factor
1155
&
term -> factor
1155
not
term -> factor
1155
and
term -> factor
1155
^
term -> factor
1156
==
atom -> STRING
1156
>
atom -> STRING
1156
<=
atom -> STRING
1156
,
atom -> STRING
1156
&
atom -> STRING
1156
.
atom -> STRING
1156
>=
atom -> STRING
1156
@
atom -> STRING
1156
[
atom -> STRING
1156
^
atom -> STRING
1156
%
atom -> STRING
1156
**
atom -> STRING
1156
-
atom -> STRING
1156
//
atom -> STRING
1156
>>
atom -> STRING
1156
<
atom -> STRING
1156
|
atom -> STRING
1156
(
atom -> STRING
1156
]
atom -> STRING
1156
is
atom -> STRING
1156
and
atom -> STRING
1156
*
atom -> STRING
1156
or
atom -> STRING
1156
not
atom -> STRING
1156
<<
atom -> STRING
1156
/
atom -> STRING
1156
+
atom -> STRING
1156
!=
atom -> STRING
1156
in
atom -> STRING
1156
if
atom -> STRING
1157
&
1691
1157
in
and_expr -> shift_expr
1157
,
and_expr -> shift_expr
1157
not
and_expr -> shift_expr
1157
!=
and_expr -> shift_expr
1157
>=
and_expr -> shift_expr
1157
if
and_expr -> shift_expr
1157
and
and_expr -> shift_expr
1157
|
and_expr -> shift_expr
1157
is
and_expr -> shift_expr
1157
<=
and_expr -> shift_expr
1157
>
and_expr -> shift_expr
1157
]
and_expr -> shift_expr
1157
^
and_expr -> shift_expr
1157
or
and_expr -> shift_expr
1157
<
and_expr -> shift_expr
1157
==
and_expr -> shift_expr
1158
>>
1692
1158
^
shift_expr -> arith_expr
1158
<<
1693
1158
or
shift_expr -> arith_expr
1158
|
shift_expr -> arith_expr
1158
<=
shift_expr -> arith_expr
1158
is
shift_expr -> arith_expr
1158
<
shift_expr -> arith_expr
1158
if
shift_expr -> arith_expr
1158
not
shift_expr -> arith_expr
1158
in
shift_expr -> arith_expr
1158
and
shift_expr -> arith_expr
1158
>=
shift_expr -> arith_expr
1158
==
shift_expr -> arith_expr
1158
]
shift_expr -> arith_expr
1158
!=
shift_expr -> arith_expr
1158
>
shift_expr -> arith_expr
1158
,
shift_expr -> arith_expr
1158
&
shift_expr -> arith_expr
1159
+
1694
1159
-
1695
1159
if
arith_expr -> term
1159
<=
arith_expr -> term
1159
|
arith_expr -> term
1159
not
arith_expr -> term
1159
^
arith_expr -> term
1159
<<
arith_expr -> term
1159
&
arith_expr -> term
1159
==
arith_expr -> term
1159
is
arith_expr -> term
1159
!=
arith_expr -> term
1159
]
arith_expr -> term
1159
>
arith_expr -> term
1159
and
arith_expr -> term
1159
<
arith_expr -> term
1159
or
arith_expr -> term
1159
,
arith_expr -> term
1159
>=
arith_expr -> term
1159
>>
arith_expr -> term
1159
in
arith_expr -> term
1160
**
1696
1160
or
power -> atom_expr
1160
*
power -> atom_expr
1160
>=
power -> atom_expr
1160
^
power -> atom_expr
1160
in
power -> atom_expr
1160
!=
power -> atom_expr
1160
if
power -> atom_expr
1160
@
power -> atom_expr
1160
-
power -> atom_expr
1160
and
power -> atom_expr
1160
not
power -> atom_expr
1160
==
power -> atom_expr
1160
<
power -> atom_expr
1160
&
power -> atom_expr
1160
|
power -> atom_expr
1160
//
power -> atom_expr
1160
>
power -> atom_expr
1160
,
power -> atom_expr
1160
%
power -> atom_expr
1160
/
power -> atom_expr
1160
is
power -> atom_expr
1160
<<
power -> atom_expr
1160
>>
power -> atom_expr
1160
]
power -> atom_expr
1160
+
power -> atom_expr
1160
<=
power -> atom_expr
1161
<<
atom -> NUMBER
1161
-
atom -> NUMBER
1161
^
atom -> NUMBER
1161
or
atom -> NUMBER
1161
]
atom -> NUMBER
1161
==
atom -> NUMBER
1161
!=
atom -> NUMBER
1161
/
atom -> NUMBER
1161
and
atom -> NUMBER
1161
%
atom -> NUMBER
1161
,
atom -> NUMBER
1161
>=
atom -> NUMBER
1161
@
atom -> NUMBER
1161
|
atom -> NUMBER
1161
[
atom -> NUMBER
1161
//
atom -> NUMBER
1161
.
atom -> NUMBER
1161
not
atom -> NUMBER
1161
<
atom -> NUMBER
1161
>>
atom -> NUMBER
1161
if
atom -> NUMBER
1161
<=
atom -> NUMBER
1161
>
atom -> NUMBER
1161
&
atom -> NUMBER
1161
is
atom -> NUMBER
1161
**
atom -> NUMBER
1161
in
atom -> NUMBER
1161
+
atom -> NUMBER
1161
(
atom -> NUMBER
1161
*
atom -> NUMBER
1162
,
634
1162
]
test_list -> test
1163
}
1697
1164
~
186
1164
factor
187
1164
STRING
188
1164
shift_expr
189
1164
test_list_comp
1698
1164
arith_expr
191
1164
term
192
1164
atom_expr
193
1164
]
1699
1164
test
195
1164
NUMBER
196
1164
and_expr
197
1164
{
198
1164
[
199
1164
-
200
1164
None
201
1164
(
202
1164
atom
203
1164
+
204
1164
NAME
205
1164
power
206
1164
True
207
1164
comparison
208
1164
xor_expr
209
1164
lambdef
210
1164
False
211
1164
not_test
212
1164
or_test
213
1164
and_test
214
1164
lambda
215
1164
not
216
1164
expr
217
1164
test_list
218
1165
~
1154
1165
STRING
1156
1165
atom_expr
1160
1165
NUMBER
1161
1165
factor
1700
1165
{
1163
1165
[
1164
1165
None
1166
1165
-
1165
1165
(
1167
1165
atom
1169
1165
+
1170
1165
NAME
1172
1165
power
1173
1165
True
1174
1165
False
1177
1166
not
atom -> None
1166
or
atom -> None
1166
==
atom -> None
1166
*
atom -> None
1166
-
atom -> None
1166
^
atom -> None
1166
>>
atom -> None
1166
if
atom -> None
1166
,
atom -> None
1166
<<
atom -> None
1166
and
atom -> None
1166
|
atom -> None
1166
&
atom -> None
1166
!=
atom -> None
1166
@
atom -> None
1166
.
atom -> None
1166
/
atom -> None
1166
%
atom -> None
1166
>
atom -> None
1166
is
atom -> None
1166
]
atom -> None
1166
<
atom -> None
1166
(
atom -> None
1166
**
atom -> None
1166
//
atom -> None
1166
in
atom -> None
1166
<=
atom -> None
1166
>=
atom -> None
1166
+
atom -> None
1166
[
atom -> None
1167
~
92
1167
factor
93
1167
STRING
94
1167
shift_expr
95
1167
arith_expr
96
1167
term
97
1167
NUMBER
98
1167
and_expr
99
1167
{
100
1167
atom_expr
101
1167
[
102
1167
-
103
1167
)
1701
1167
None
105
1167
(
106
1167
atom
107
1167
test_list_comp
1702
1167
+
109
1167
NAME
110
1167
power
111
1167
test_list
112
1167
True
113
1167
comparison
114
1167
xor_expr
115
1167
lambdef
116
1167
False
117
1167
not_test
118
1167
or_test
119
1167
test
120
1167
lambda
121
1167
and_test
122
1167
not
123
1167
expr
124
1168
]
test_list -> test , test_list
1169
[
1703
1169
(
1704
1169
//
trailer_expr -> 
1169
trailer
1705
1169
<<
trailer_expr -> 
1169
trailer_expr
1706
1169
*
trailer_expr -> 
1169
in
trailer_expr -> 
1169
&
trailer_expr -> 
1169
.
1707
1169
and
trailer_expr -> 
1169
<=
trailer_expr -> 
1169
,
trailer_expr -> 
1169
|
trailer_expr -> 
1169
or
trailer_expr -> 
1169
>=
trailer_expr -> 
1169
+
trailer_expr -> 
1169
**
trailer_expr -> 
1169
>>
trailer_expr -> 
1169
!=
trailer_expr -> 
1169
-
trailer_expr -> 
1169
/
trailer_expr -> 
1169
]
trailer_expr -> 
1169
%
trailer_expr -> 
1169
is
trailer_expr -> 
1169
<
trailer_expr -> 
1169
if
trailer_expr -> 
1169
>
trailer_expr -> 
1169
^
trailer_expr -> 
1169
==
trailer_expr -> 
1169
@
trailer_expr -> 
1169
not
trailer_expr -> 
1170
~
1154
1170
STRING
1156
1170
atom_expr
1160
1170
NUMBER
1161
1170
{
1163
1170
factor
1708
1170
[
1164
1170
None
1166
1170
-
1165
1170
(
1167
1170
atom
1169
1170
+
1170
1170
NAME
1172
1170
power
1173
1170
True
1174
1170
False
1177
1171
not
xor_expr -> and_expr
1171
^
1709
1171
if
xor_expr -> and_expr
1171
|
xor_expr -> and_expr
1171
>
xor_expr -> and_expr
1171
<
xor_expr -> and_expr
1171
]
xor_expr -> and_expr
1171
or
xor_expr -> and_expr
1171
>=
xor_expr -> and_expr
1171
in
xor_expr -> and_expr
1171
and
xor_expr -> and_expr
1171
is
xor_expr -> and_expr
1171
==
xor_expr -> and_expr
1171
!=
xor_expr -> and_expr
1171
<=
xor_expr -> and_expr
1171
,
xor_expr -> and_expr
1172
<=
atom -> NAME
1172
@
atom -> NAME
1172
>>
atom -> NAME
1172
==
atom -> NAME
1172
>
atom -> NAME
1172
*
atom -> NAME
1172
-
atom -> NAME
1172
&
atom -> NAME
1172
is
atom -> NAME
1172
.
atom -> NAME
1172
or
atom -> NAME
1172
in
atom -> NAME
1172
<<
atom -> NAME
1172
+
atom -> NAME
1172
,
atom -> NAME
1172
if
atom -> NAME
1172
|
atom -> NAME
1172
and
atom -> NAME
1172
^
atom -> NAME
1172
[
atom -> NAME
1172
/
atom -> NAME
1172
not
atom -> NAME
1172
!=
atom -> NAME
1172
%
atom -> NAME
1172
]
atom -> NAME
1172
<
atom -> NAME
1172
>=
atom -> NAME
1172
**
atom -> NAME
1172
(
atom -> NAME
1172
//
atom -> NAME
1173
if
factor -> power
1173
is
factor -> power
1173
%
factor -> power
1173
]
factor -> power
1173
==
factor -> power
1173
>=
factor -> power
1173
or
factor -> power
1173
and
factor -> power
1173
/
factor -> power
1173
<
factor -> power
1173
+
factor -> power
1173
,
factor -> power
1173
//
factor -> power
1173
@
factor -> power
1173
in
factor -> power
1173
<=
factor -> power
1173
&
factor -> power
1173
!=
factor -> power
1173
<<
factor -> power
1173
|
factor -> power
1173
>
factor -> power
1173
*
factor -> power
1173
^
factor -> power
1173
-
factor -> power
1173
not
factor -> power
1173
>>
factor -> power
1174
]
atom -> True
1174
>
atom -> True
1174
|
atom -> True
1174
-
atom -> True
1174
==
atom -> True
1174
<<
atom -> True
1174
if
atom -> True
1174
%
atom -> True
1174
/
atom -> True
1174
[
atom -> True
1174
*
atom -> True
1174
<=
atom -> True
1174
<
atom -> True
1174
&
atom -> True
1174
+
atom -> True
1174
**
atom -> True
1174
!=
atom -> True
1174
>>
atom -> True
1174
//
atom -> True
1174
and
atom -> True
1174
^
atom -> True
1174
is
atom -> True
1174
or
atom -> True
1174
.
atom -> True
1174
,
atom -> True
1174
(
atom -> True
1174
>=
atom -> True
1174
@
atom -> True
1174
not
atom -> True
1174
in
atom -> True
1175
or
not_test -> comparison
1175
if
not_test -> comparison
1175
,
not_test -> comparison
1175
and
not_test -> comparison
1175
]
not_test -> comparison
1176
not
expr -> xor_expr
1176
or
expr -> xor_expr
1176
==
expr -> xor_expr
1176
in
expr -> xor_expr
1176
|
1710
1176
if
expr -> xor_expr
1176
<=
expr -> xor_expr
1176
]
expr -> xor_expr
1176
is
expr -> xor_expr
1176
<
expr -> xor_expr
1176
>=
expr -> xor_expr
1176
>
expr -> xor_expr
1176
and
expr -> xor_expr
1176
!=
expr -> xor_expr
1176
,
expr -> xor_expr
1177
<=
atom -> False
1177
*
atom -> False
1177
]
atom -> False
1177
not
atom -> False
1177
!=
atom -> False
1177
@
atom -> False
1177
and
atom -> False
1177
if
atom -> False
1177
<<
atom -> False
1177
>
atom -> False
1177
,
atom -> False
1177
+
atom -> False
1177
/
atom -> False
1177
==
atom -> False
1177
&
atom -> False
1177
^
atom -> False
1177
in
atom -> False
1177
[
atom -> False
1177
is
atom -> False
1177
%
atom -> False
1177
>=
atom -> False
1177
//
atom -> False
1177
(
atom -> False
1177
|
atom -> False
1177
<
atom -> False
1177
.
atom -> False
1177
or
atom -> False
1177
**
atom -> False
1177
>>
atom -> False
1177
-
atom -> False
1178
or
and_test -> not_test
1178
,
and_test -> not_test
1178
if
and_test -> not_test
1178
and
1711
1178
]
and_test -> not_test
1179
or
1712
1179
if
or_test -> and_test
1179
,
or_test -> and_test
1179
]
or_test -> and_test
1180
if
1713
1180
]
test -> or_test
1180
,
test -> or_test
1181
~
1154
1181
factor
1155
1181
STRING
1156
1181
shift_expr
1157
1181
arith_expr
1158
1181
term
1159
1181
atom_expr
1160
1181
NUMBER
1161
1181
{
1163
1181
[
1164
1181
-
1165
1181
None
1166
1181
(
1167
1181
atom
1169
1181
+
1170
1181
and_expr
1171
1181
NAME
1172
1181
power
1173
1181
True
1174
1181
comparison
1175
1181
xor_expr
1176
1181
False
1177
1181
not_test
1714
1181
not
1181
1181
expr
1182
1182
!=
125
1182
,
comparison -> expr
1182
is
126
1182
>=
127
1182
in
128
1182
<
129
1182
==
131
1182
<=
132
1182
not
133
1182
>
134
1182
comp_op
1715
1182
or
comparison -> expr
1182
if
comparison -> expr
1182
and
comparison -> expr
1182
]
comparison -> expr
1183
:
1716
1183
varargslist
1717
1183
NAME
251
1183
vfpdef
253
1184
,
test -> lambdef
1184
]
test -> lambdef
1185
==
xor_expr -> and_expr ^ xor_expr
1185
!=
xor_expr -> and_expr ^ xor_expr
1185
>
xor_expr -> and_expr ^ xor_expr
1185
not
xor_expr -> and_expr ^ xor_expr
1185
if
xor_expr -> and_expr ^ xor_expr
1185
is
xor_expr -> and_expr ^ xor_expr
1185
<=
xor_expr -> and_expr ^ xor_expr
1185
,
xor_expr -> and_expr ^ xor_expr
1185
for
xor_expr -> and_expr ^ xor_expr
1185
|
xor_expr -> and_expr ^ xor_expr
1185
>=
xor_expr -> and_expr ^ xor_expr
1185
and
xor_expr -> and_expr ^ xor_expr
1185
]
xor_expr -> and_expr ^ xor_expr
1185
in
xor_expr -> and_expr ^ xor_expr
1185
<
xor_expr -> and_expr ^ xor_expr
1185
or
xor_expr -> and_expr ^ xor_expr
1186
/
atom -> [ test_list_comp ]
1186
,
atom -> [ test_list_comp ]
1186
*
atom -> [ test_list_comp ]
1186
or
atom -> [ test_list_comp ]
1186
|
atom -> [ test_list_comp ]
1186
==
atom -> [ test_list_comp ]
1186
is
atom -> [ test_list_comp ]
1186
-
atom -> [ test_list_comp ]
1186
**
atom -> [ test_list_comp ]
1186
&
atom -> [ test_list_comp ]
1186
(
atom -> [ test_list_comp ]
1186
<
atom -> [ test_list_comp ]
1186
@
atom -> [ test_list_comp ]
1186
//
atom -> [ test_list_comp ]
1186
>
atom -> [ test_list_comp ]
1186
if
atom -> [ test_list_comp ]
1186
in
atom -> [ test_list_comp ]
1186
^
atom -> [ test_list_comp ]
1186
<<
atom -> [ test_list_comp ]
1186
for
atom -> [ test_list_comp ]
1186
[
atom -> [ test_list_comp ]
1186
!=
atom -> [ test_list_comp ]
1186
<=
atom -> [ test_list_comp ]
1186
and
atom -> [ test_list_comp ]
1186
%
atom -> [ test_list_comp ]
1186
not
atom -> [ test_list_comp ]
1186
+
atom -> [ test_list_comp ]
1186
>=
atom -> [ test_list_comp ]
1186
>>
atom -> [ test_list_comp ]
1186
.
atom -> [ test_list_comp ]
1186
]
atom -> [ test_list_comp ]
1187
@
atom -> ( test_list_comp )
1187
>>
atom -> ( test_list_comp )
1187
<<
atom -> ( test_list_comp )
1187
==
atom -> ( test_list_comp )
1187
is
atom -> ( test_list_comp )
1187
or
atom -> ( test_list_comp )
1187
<=
atom -> ( test_list_comp )
1187
[
atom -> ( test_list_comp )
1187
if
atom -> ( test_list_comp )
1187
^
atom -> ( test_list_comp )
1187
<
atom -> ( test_list_comp )
1187
and
atom -> ( test_list_comp )
1187
.
atom -> ( test_list_comp )
1187
+
atom -> ( test_list_comp )
1187
&
atom -> ( test_list_comp )
1187
!=
atom -> ( test_list_comp )
1187
in
atom -> ( test_list_comp )
1187
]
atom -> ( test_list_comp )
1187
**
atom -> ( test_list_comp )
1187
not
atom -> ( test_list_comp )
1187
-
atom -> ( test_list_comp )
1187
(
atom -> ( test_list_comp )
1187
*
atom -> ( test_list_comp )
1187
|
atom -> ( test_list_comp )
1187
//
atom -> ( test_list_comp )
1187
>
atom -> ( test_list_comp )
1187
for
atom -> ( test_list_comp )
1187
>=
atom -> ( test_list_comp )
1187
,
atom -> ( test_list_comp )
1187
%
atom -> ( test_list_comp )
1187
/
atom -> ( test_list_comp )
1188
]
1718
1189
,
trailer -> ( )
1189
/
trailer -> ( )
1189
[
trailer -> ( )
1189
(
trailer -> ( )
1189
|
trailer -> ( )
1189
<=
trailer -> ( )
1189
in
trailer -> ( )
1189
not
trailer -> ( )
1189
>>
trailer -> ( )
1189
^
trailer -> ( )
1189
.
trailer -> ( )
1189
**
trailer -> ( )
1189
if
trailer -> ( )
1189
+
trailer -> ( )
1189
is
trailer -> ( )
1189
<
trailer -> ( )
1189
>
trailer -> ( )
1189
==
trailer -> ( )
1189
//
trailer -> ( )
1189
<<
trailer -> ( )
1189
*
trailer -> ( )
1189
for
trailer -> ( )
1189
-
trailer -> ( )
1189
]
trailer -> ( )
1189
>=
trailer -> ( )
1189
%
trailer -> ( )
1189
and
trailer -> ( )
1189
@
trailer -> ( )
1189
&
trailer -> ( )
1189
!=
trailer -> ( )
1189
or
trailer -> ( )
1190
)
1719
1191
<=
trailer -> . NAME
1191
if
trailer -> . NAME
1191
<
trailer -> . NAME
1191
%
trailer -> . NAME
1191
.
trailer -> . NAME
1191
//
trailer -> . NAME
1191
]
trailer -> . NAME
1191
for
trailer -> . NAME
1191
|
trailer -> . NAME
1191
==
trailer -> . NAME
1191
>=
trailer -> . NAME
1191
[
trailer -> . NAME
1191
^
trailer -> . NAME
1191
<<
trailer -> . NAME
1191
in
trailer -> . NAME
1191
&
trailer -> . NAME
1191
or
trailer -> . NAME
1191
*
trailer -> . NAME
1191
(
trailer -> . NAME
1191
and
trailer -> . NAME
1191
-
trailer -> . NAME
1191
+
trailer -> . NAME
1191
!=
trailer -> . NAME
1191
not
trailer -> . NAME
1191
**
trailer -> . NAME
1191
>>
trailer -> . NAME
1191
@
trailer -> . NAME
1191
/
trailer -> . NAME
1191
is
trailer -> . NAME
1191
>
trailer -> . NAME
1191
,
trailer -> . NAME
1192
is
trailer_expr -> trailer trailer_expr
1192
!=
trailer_expr -> trailer trailer_expr
1192
<<
trailer_expr -> trailer trailer_expr
1192
and
trailer_expr -> trailer trailer_expr
1192
&
trailer_expr -> trailer trailer_expr
1192
//
trailer_expr -> trailer trailer_expr
1192
|
trailer_expr -> trailer trailer_expr
1192
==
trailer_expr -> trailer trailer_expr
1192
<
trailer_expr -> trailer trailer_expr
1192
or
trailer_expr -> trailer trailer_expr
1192
^
trailer_expr -> trailer trailer_expr
1192
<=
trailer_expr -> trailer trailer_expr
1192
@
trailer_expr -> trailer trailer_expr
1192
in
trailer_expr -> trailer trailer_expr
1192
for
trailer_expr -> trailer trailer_expr
1192
not
trailer_expr -> trailer trailer_expr
1192
*
trailer_expr -> trailer trailer_expr
1192
+
trailer_expr -> trailer trailer_expr
1192
if
trailer_expr -> trailer trailer_expr
1192
**
trailer_expr -> trailer trailer_expr
1192
>>
trailer_expr -> trailer trailer_expr
1192
>=
trailer_expr -> trailer trailer_expr
1192
%
trailer_expr -> trailer trailer_expr
1192
]
trailer_expr -> trailer trailer_expr
1192
-
trailer_expr -> trailer trailer_expr
1192
>
trailer_expr -> trailer trailer_expr
1192
/
trailer_expr -> trailer trailer_expr
1192
,
trailer_expr -> trailer trailer_expr
1193
and
expr -> xor_expr | expr
1193
in
expr -> xor_expr | expr
1193
>=
expr -> xor_expr | expr
1193
for
expr -> xor_expr | expr
1193
!=
expr -> xor_expr | expr
1193
is
expr -> xor_expr | expr
1193
==
expr -> xor_expr | expr
1193
or
expr -> xor_expr | expr
1193
<
expr -> xor_expr | expr
1193
if
expr -> xor_expr | expr
1193
,
expr -> xor_expr | expr
1193
not
expr -> xor_expr | expr
1193
]
expr -> xor_expr | expr
1193
<=
expr -> xor_expr | expr
1193
>
expr -> xor_expr | expr
1194
,
and_test -> not_test and and_test
1194
if
and_test -> not_test and and_test
1194
for
and_test -> not_test and and_test
1194
or
and_test -> not_test and and_test
1194
]
and_test -> not_test and and_test
1195
else
1720
1196
if
or_test -> and_test or or_test
1196
,
or_test -> and_test or or_test
1196
]
or_test -> and_test or or_test
1196
for
or_test -> and_test or or_test
1197
,
lambdef -> lambda : test
1197
]
lambdef -> lambda : test
1197
for
lambdef -> lambda : test
1198
~
186
1198
factor
187
1198
STRING
188
1198
shift_expr
189
1198
arith_expr
191
1198
term
192
1198
atom_expr
193
1198
NUMBER
196
1198
and_expr
197
1198
{
198
1198
[
199
1198
-
200
1198
None
201
1198
(
202
1198
atom
203
1198
+
204
1198
NAME
205
1198
power
206
1198
True
207
1198
comparison
208
1198
xor_expr
209
1198
lambdef
210
1198
False
211
1198
test
1721
1198
not_test
212
1198
or_test
213
1198
and_test
214
1198
lambda
215
1198
not
216
1198
expr
217
1199
or
comparison -> expr comp_op comparison
1199
,
comparison -> expr comp_op comparison
1199
if
comparison -> expr comp_op comparison
1199
for
comparison -> expr comp_op comparison
1199
and
comparison -> expr comp_op comparison
1199
]
comparison -> expr comp_op comparison
1200
<<
term -> factor / term
1200
+
term -> factor / term
1200
|
term -> factor / term
1200
^
term -> factor / term
1200
-
term -> factor / term
1200
>>
term -> factor / term
1200
in
term -> factor / term
1200
&
term -> factor / term
1200
,
term -> factor / term
1201
in
term -> factor @ term
1201
,
term -> factor @ term
1201
&
term -> factor @ term
1201
|
term -> factor @ term
1201
>>
term -> factor @ term
1201
+
term -> factor @ term
1201
<<
term -> factor @ term
1201
^
term -> factor @ term
1201
-
term -> factor @ term
1202
>>
term -> factor % term
1202
-
term -> factor % term
1202
^
term -> factor % term
1202
in
term -> factor % term
1202
<<
term -> factor % term
1202
+
term -> factor % term
1202
,
term -> factor % term
1202
|
term -> factor % term
1202
&
term -> factor % term
1203
in
term -> factor // term
1203
|
term -> factor // term
1203
+
term -> factor // term
1203
,
term -> factor // term
1203
^
term -> factor // term
1203
-
term -> factor // term
1203
<<
term -> factor // term
1203
>>
term -> factor // term
1203
&
term -> factor // term
1204
^
term -> factor * term
1204
&
term -> factor * term
1204
>>
term -> factor * term
1204
,
term -> factor * term
1204
-
term -> factor * term
1204
|
term -> factor * term
1204
+
term -> factor * term
1204
in
term -> factor * term
1204
<<
term -> factor * term
1205
,
shift_expr -> arith_expr << shift_expr
1205
in
shift_expr -> arith_expr << shift_expr
1205
|
shift_expr -> arith_expr << shift_expr
1205
&
shift_expr -> arith_expr << shift_expr
1205
^
shift_expr -> arith_expr << shift_expr
1206
^
shift_expr -> arith_expr >> shift_expr
1206
,
shift_expr -> arith_expr >> shift_expr
1206
&
shift_expr -> arith_expr >> shift_expr
1206
in
shift_expr -> arith_expr >> shift_expr
1206
|
shift_expr -> arith_expr >> shift_expr
1207
/
atom -> [ test_list_comp ]
1207
^
atom -> [ test_list_comp ]
1207
[
atom -> [ test_list_comp ]
1207
(
atom -> [ test_list_comp ]
1207
%
atom -> [ test_list_comp ]
1207
,
atom -> [ test_list_comp ]
1207
+
atom -> [ test_list_comp ]
1207
*
atom -> [ test_list_comp ]
1207
@
atom -> [ test_list_comp ]
1207
>>
atom -> [ test_list_comp ]
1207
|
atom -> [ test_list_comp ]
1207
.
atom -> [ test_list_comp ]
1207
//
atom -> [ test_list_comp ]
1207
-
atom -> [ test_list_comp ]
1207
**
atom -> [ test_list_comp ]
1207
in
atom -> [ test_list_comp ]
1207
&
atom -> [ test_list_comp ]
1207
<<
atom -> [ test_list_comp ]
1208
in
expr_list -> expr , expr_list
1209
//
atom -> ( test_list_comp )
1209
^
atom -> ( test_list_comp )
1209
@
atom -> ( test_list_comp )
1209
**
atom -> ( test_list_comp )
1209
.
atom -> ( test_list_comp )
1209
[
atom -> ( test_list_comp )
1209
>>
atom -> ( test_list_comp )
1209
|
atom -> ( test_list_comp )
1209
-
atom -> ( test_list_comp )
1209
<<
atom -> ( test_list_comp )
1209
(
atom -> ( test_list_comp )
1209
+
atom -> ( test_list_comp )
1209
*
atom -> ( test_list_comp )
1209
&
atom -> ( test_list_comp )
1209
,
atom -> ( test_list_comp )
1209
in
atom -> ( test_list_comp )
1209
%
atom -> ( test_list_comp )
1209
/
atom -> ( test_list_comp )
1210
|
xor_expr -> and_expr ^ xor_expr
1210
in
xor_expr -> and_expr ^ xor_expr
1210
,
xor_expr -> and_expr ^ xor_expr
1211
]
1722
1212
*
trailer_expr -> trailer trailer_expr
1212
+
trailer_expr -> trailer trailer_expr
1212
%
trailer_expr -> trailer trailer_expr
1212
<<
trailer_expr -> trailer trailer_expr
1212
^
trailer_expr -> trailer trailer_expr
1212
-
trailer_expr -> trailer trailer_expr
1212
//
trailer_expr -> trailer trailer_expr
1212
|
trailer_expr -> trailer trailer_expr
1212
@
trailer_expr -> trailer trailer_expr
1212
&
trailer_expr -> trailer trailer_expr
1212
/
trailer_expr -> trailer trailer_expr
1212
**
trailer_expr -> trailer trailer_expr
1212
,
trailer_expr -> trailer trailer_expr
1212
>>
trailer_expr -> trailer trailer_expr
1212
in
trailer_expr -> trailer trailer_expr
1213
&
trailer -> . NAME
1213
|
trailer -> . NAME
1213
*
trailer -> . NAME
1213
[
trailer -> . NAME
1213
**
trailer -> . NAME
1213
(
trailer -> . NAME
1213
>>
trailer -> . NAME
1213
%
trailer -> . NAME
1213
.
trailer -> . NAME
1213
^
trailer -> . NAME
1213
<<
trailer -> . NAME
1213
@
trailer -> . NAME
1213
-
trailer -> . NAME
1213
+
trailer -> . NAME
1213
/
trailer -> . NAME
1213
//
trailer -> . NAME
1213
in
trailer -> . NAME
1213
,
trailer -> . NAME
1214
,
trailer -> ( )
1214
/
trailer -> ( )
1214
>>
trailer -> ( )
1214
^
trailer -> ( )
1214
.
trailer -> ( )
1214
[
trailer -> ( )
1214
**
trailer -> ( )
1214
//
trailer -> ( )
1214
<<
trailer -> ( )
1214
*
trailer -> ( )
1214
(
trailer -> ( )
1214
%
trailer -> ( )
1214
|
trailer -> ( )
1214
-
trailer -> ( )
1214
@
trailer -> ( )
1214
&
trailer -> ( )
1214
+
trailer -> ( )
1214
in
trailer -> ( )
1215
)
1723
1216
:
1724
1217
/
1725
1217
@
1726
1217
if
term -> factor
1217
%
1727
1217
*
1728
1217
<<
term -> factor
1217
-
term -> factor
1217
//
1729
1217
>=
term -> factor
1217
or
term -> factor
1217
<=
term -> factor
1217
>
term -> factor
1217
in
term -> factor
1217
<
term -> factor
1217
>>
term -> factor
1217
,
term -> factor
1217
==
term -> factor
1217
is
term -> factor
1217
+
term -> factor
1217
|
term -> factor
1217
!=
term -> factor
1217
:
term -> factor
1217
&
term -> factor
1217
not
term -> factor
1217
and
term -> factor
1217
^
term -> factor
1218
~
1218
1218
STRING
1220
1218
NUMBER
1224
1218
{
1225
1218
[
1227
1218
atom_expr
1226
1218
None
1229
1218
-
1228
1218
+
1230
1218
factor
1730
1218
(
1231
1218
atom
1232
1218
NAME
1234
1218
power
1235
1218
True
1236
1218
False
1240
1219
&
1731
1219
in
and_expr -> shift_expr
1219
,
and_expr -> shift_expr
1219
not
and_expr -> shift_expr
1219
:
and_expr -> shift_expr
1219
<
and_expr -> shift_expr
1219
!=
and_expr -> shift_expr
1219
>=
and_expr -> shift_expr
1219
if
and_expr -> shift_expr
1219
and
and_expr -> shift_expr
1219
|
and_expr -> shift_expr
1219
is
and_expr -> shift_expr
1219
<=
and_expr -> shift_expr
1219
>
and_expr -> shift_expr
1219
^
and_expr -> shift_expr
1219
or
and_expr -> shift_expr
1219
==
and_expr -> shift_expr
1220
==
atom -> STRING
1220
>
atom -> STRING
1220
<=
atom -> STRING
1220
,
atom -> STRING
1220
&
atom -> STRING
1220
.
atom -> STRING
1220
>=
atom -> STRING
1220
@
atom -> STRING
1220
[
atom -> STRING
1220
^
atom -> STRING
1220
%
atom -> STRING
1220
**
atom -> STRING
1220
-
atom -> STRING
1220
//
atom -> STRING
1220
>>
atom -> STRING
1220
<
atom -> STRING
1220
|
atom -> STRING
1220
(
atom -> STRING
1220
is
atom -> STRING
1220
and
atom -> STRING
1220
*
atom -> STRING
1220
or
atom -> STRING
1220
not
atom -> STRING
1220
<<
atom -> STRING
1220
/
atom -> STRING
1220
+
atom -> STRING
1220
!=
atom -> STRING
1220
in
atom -> STRING
1220
:
atom -> STRING
1220
if
atom -> STRING
1221
!=
125
1221
,
comparison -> expr
1221
is
126
1221
>=
127
1221
in
128
1221
<
129
1221
==
131
1221
<=
132
1221
not
133
1221
>
134
1221
comp_op
1732
1221
:
comparison -> expr
1221
or
comparison -> expr
1221
if
comparison -> expr
1221
and
comparison -> expr
1222
>>
1733
1222
^
shift_expr -> arith_expr
1222
<<
1734
1222
or
shift_expr -> arith_expr
1222
|
shift_expr -> arith_expr
1222
<=
shift_expr -> arith_expr
1222
is
shift_expr -> arith_expr
1222
<
shift_expr -> arith_expr
1222
if
shift_expr -> arith_expr
1222
not
shift_expr -> arith_expr
1222
in
shift_expr -> arith_expr
1222
and
shift_expr -> arith_expr
1222
>=
shift_expr -> arith_expr
1222
==
shift_expr -> arith_expr
1222
:
shift_expr -> arith_expr
1222
!=
shift_expr -> arith_expr
1222
>
shift_expr -> arith_expr
1222
,
shift_expr -> arith_expr
1222
&
shift_expr -> arith_expr
1223
+
1735
1223
-
1736
1223
if
arith_expr -> term
1223
<=
arith_expr -> term
1223
|
arith_expr -> term
1223
not
arith_expr -> term
1223
^
arith_expr -> term
1223
<<
arith_expr -> term
1223
&
arith_expr -> term
1223
==
arith_expr -> term
1223
is
arith_expr -> term
1223
!=
arith_expr -> term
1223
>
arith_expr -> term
1223
and
arith_expr -> term
1223
:
arith_expr -> term
1223
<
arith_expr -> term
1223
or
arith_expr -> term
1223
,
arith_expr -> term
1223
>=
arith_expr -> term
1223
>>
arith_expr -> term
1223
in
arith_expr -> term
1224
<<
atom -> NUMBER
1224
:
atom -> NUMBER
1224
-
atom -> NUMBER
1224
^
atom -> NUMBER
1224
or
atom -> NUMBER
1224
==
atom -> NUMBER
1224
!=
atom -> NUMBER
1224
/
atom -> NUMBER
1224
and
atom -> NUMBER
1224
%
atom -> NUMBER
1224
,
atom -> NUMBER
1224
>=
atom -> NUMBER
1224
@
atom -> NUMBER
1224
|
atom -> NUMBER
1224
[
atom -> NUMBER
1224
//
atom -> NUMBER
1224
.
atom -> NUMBER
1224
not
atom -> NUMBER
1224
<
atom -> NUMBER
1224
>>
atom -> NUMBER
1224
if
atom -> NUMBER
1224
<=
atom -> NUMBER
1224
>
atom -> NUMBER
1224
&
atom -> NUMBER
1224
is
atom -> NUMBER
1224
**
atom -> NUMBER
1224
in
atom -> NUMBER
1224
+
atom -> NUMBER
1224
(
atom -> NUMBER
1224
*
atom -> NUMBER
1225
}
1737
1226
**
1738
1226
or
power -> atom_expr
1226
:
power -> atom_expr
1226
*
power -> atom_expr
1226
>=
power -> atom_expr
1226
^
power -> atom_expr
1226
in
power -> atom_expr
1226
!=
power -> atom_expr
1226
if
power -> atom_expr
1226
@
power -> atom_expr
1226
-
power -> atom_expr
1226
and
power -> atom_expr
1226
not
power -> atom_expr
1226
==
power -> atom_expr
1226
<
power -> atom_expr
1226
&
power -> atom_expr
1226
|
power -> atom_expr
1226
//
power -> atom_expr
1226
>
power -> atom_expr
1226
,
power -> atom_expr
1226
%
power -> atom_expr
1226
/
power -> atom_expr
1226
is
power -> atom_expr
1226
<<
power -> atom_expr
1226
>>
power -> atom_expr
1226
+
power -> atom_expr
1226
<=
power -> atom_expr
1227
~
186
1227
factor
187
1227
STRING
188
1227
shift_expr
189
1227
test_list_comp
1739
1227
arith_expr
191
1227
term
192
1227
atom_expr
193
1227
]
1740
1227
test
195
1227
NUMBER
196
1227
and_expr
197
1227
{
198
1227
[
199
1227
-
200
1227
None
201
1227
(
202
1227
atom
203
1227
+
204
1227
NAME
205
1227
power
206
1227
True
207
1227
comparison
208
1227
xor_expr
209
1227
lambdef
210
1227
False
211
1227
not_test
212
1227
or_test
213
1227
and_test
214
1227
lambda
215
1227
not
216
1227
expr
217
1227
test_list
218
1228
~
1218
1228
STRING
1220
1228
NUMBER
1224
1228
factor
1741
1228
{
1225
1228
[
1227
1228
atom_expr
1226
1228
None
1229
1228
-
1228
1228
+
1230
1228
(
1231
1228
atom
1232
1228
NAME
1234
1228
power
1235
1228
True
1236
1228
False
1240
1229
not
atom -> None
1229
or
atom -> None
1229
==
atom -> None
1229
*
atom -> None
1229
-
atom -> None
1229
^
atom -> None
1229
>>
atom -> None
1229
if
atom -> None
1229
,
atom -> None
1229
<<
atom -> None
1229
and
atom -> None
1229
|
atom -> None
1229
&
atom -> None
1229
!=
atom -> None
1229
@
atom -> None
1229
.
atom -> None
1229
/
atom -> None
1229
%
atom -> None
1229
>
atom -> None
1229
is
atom -> None
1229
<
atom -> None
1229
(
atom -> None
1229
**
atom -> None
1229
//
atom -> None
1229
in
atom -> None
1229
<=
atom -> None
1229
>=
atom -> None
1229
+
atom -> None
1229
[
atom -> None
1229
:
atom -> None
1230
~
1218
1230
STRING
1220
1230
NUMBER
1224
1230
{
1225
1230
factor
1742
1230
atom_expr
1226
1230
[
1227
1230
None
1229
1230
-
1228
1230
+
1230
1230
(
1231
1230
atom
1232
1230
NAME
1234
1230
power
1235
1230
True
1236
1230
False
1240
1231
~
92
1231
factor
93
1231
STRING
94
1231
shift_expr
95
1231
arith_expr
96
1231
term
97
1231
NUMBER
98
1231
and_expr
99
1231
{
100
1231
atom_expr
101
1231
[
102
1231
-
103
1231
)
1743
1231
None
105
1231
(
106
1231
atom
107
1231
test_list_comp
1744
1231
+
109
1231
NAME
110
1231
power
111
1231
test_list
112
1231
True
113
1231
comparison
114
1231
xor_expr
115
1231
lambdef
116
1231
False
117
1231
not_test
118
1231
or_test
119
1231
test
120
1231
lambda
121
1231
and_test
122
1231
not
123
1231
expr
124
1232
[
1745
1232
(
1746
1232
//
trailer_expr -> 
1232
trailer
1747
1232
<<
trailer_expr -> 
1232
trailer_expr
1748
1232
*
trailer_expr -> 
1232
in
trailer_expr -> 
1232
&
trailer_expr -> 
1232
.
1749
1232
and
trailer_expr -> 
1232
<=
trailer_expr -> 
1232
,
trailer_expr -> 
1232
|
trailer_expr -> 
1232
or
trailer_expr -> 
1232
>=
trailer_expr -> 
1232
:
trailer_expr -> 
1232
+
trailer_expr -> 
1232
**
trailer_expr -> 
1232
>>
trailer_expr -> 
1232
!=
trailer_expr -> 
1232
-
trailer_expr -> 
1232
/
trailer_expr -> 
1232
%
trailer_expr -> 
1232
is
trailer_expr -> 
1232
<
trailer_expr -> 
1232
if
trailer_expr -> 
1232
>
trailer_expr -> 
1232
^
trailer_expr -> 
1232
==
trailer_expr -> 
1232
@
trailer_expr -> 
1232
not
trailer_expr -> 
1233
not
xor_expr -> and_expr
1233
if
xor_expr -> and_expr
1233
|
xor_expr -> and_expr
1233
>
xor_expr -> and_expr
1233
^
1750
1233
<
xor_expr -> and_expr
1233
or
xor_expr -> and_expr
1233
:
xor_expr -> and_expr
1233
>=
xor_expr -> and_expr
1233
in
xor_expr -> and_expr
1233
and
xor_expr -> and_expr
1233
is
xor_expr -> and_expr
1233
==
xor_expr -> and_expr
1233
!=
xor_expr -> and_expr
1233
<=
xor_expr -> and_expr
1233
,
xor_expr -> and_expr
1234
<=
atom -> NAME
1234
@
atom -> NAME
1234
>>
atom -> NAME
1234
==
atom -> NAME
1234
>
atom -> NAME
1234
*
atom -> NAME
1234
-
atom -> NAME
1234
&
atom -> NAME
1234
is
atom -> NAME
1234
.
atom -> NAME
1234
or
atom -> NAME
1234
in
atom -> NAME
1234
<<
atom -> NAME
1234
+
atom -> NAME
1234
,
atom -> NAME
1234
if
atom -> NAME
1234
|
atom -> NAME
1234
and
atom -> NAME
1234
^
atom -> NAME
1234
[
atom -> NAME
1234
/
atom -> NAME
1234
not
atom -> NAME
1234
!=
atom -> NAME
1234
%
atom -> NAME
1234
:
atom -> NAME
1234
<
atom -> NAME
1234
>=
atom -> NAME
1234
**
atom -> NAME
1234
(
atom -> NAME
1234
//
atom -> NAME
1235
if
factor -> power
1235
is
factor -> power
1235
%
factor -> power
1235
==
factor -> power
1235
>=
factor -> power
1235
or
factor -> power
1235
and
factor -> power
1235
/
factor -> power
1235
<
factor -> power
1235
+
factor -> power
1235
:
factor -> power
1235
,
factor -> power
1235
//
factor -> power
1235
@
factor -> power
1235
in
factor -> power
1235
<=
factor -> power
1235
&
factor -> power
1235
!=
factor -> power
1235
<<
factor -> power
1235
|
factor -> power
1235
>
factor -> power
1235
*
factor -> power
1235
^
factor -> power
1235
-
factor -> power
1235
not
factor -> power
1235
>>
factor -> power
1236
>
atom -> True
1236
|
atom -> True
1236
-
atom -> True
1236
==
atom -> True
1236
<<
atom -> True
1236
if
atom -> True
1236
%
atom -> True
1236
/
atom -> True
1236
[
atom -> True
1236
:
atom -> True
1236
*
atom -> True
1236
<=
atom -> True
1236
<
atom -> True
1236
&
atom -> True
1236
+
atom -> True
1236
**
atom -> True
1236
!=
atom -> True
1236
>>
atom -> True
1236
//
atom -> True
1236
and
atom -> True
1236
^
atom -> True
1236
is
atom -> True
1236
or
atom -> True
1236
.
atom -> True
1236
,
atom -> True
1236
(
atom -> True
1236
>=
atom -> True
1236
@
atom -> True
1236
not
atom -> True
1236
in
atom -> True
1237
:
not_test -> comparison
1237
or
not_test -> comparison
1237
if
not_test -> comparison
1237
,
not_test -> comparison
1237
and
not_test -> comparison
1238
not
expr -> xor_expr
1238
or
expr -> xor_expr
1238
==
expr -> xor_expr
1238
in
expr -> xor_expr
1238
|
1751
1238
if
expr -> xor_expr
1238
:
expr -> xor_expr
1238
<=
expr -> xor_expr
1238
is
expr -> xor_expr
1238
<
expr -> xor_expr
1238
>=
expr -> xor_expr
1238
>
expr -> xor_expr
1238
and
expr -> xor_expr
1238
!=
expr -> xor_expr
1238
,
expr -> xor_expr
1239
:
1752
1239
varargslist
1753
1239
NAME
251
1239
vfpdef
253
1240
<=
atom -> False
1240
*
atom -> False
1240
not
atom -> False
1240
!=
atom -> False
1240
@
atom -> False
1240
and
atom -> False
1240
if
atom -> False
1240
<<
atom -> False
1240
>
atom -> False
1240
,
atom -> False
1240
:
atom -> False
1240
+
atom -> False
1240
/
atom -> False
1240
==
atom -> False
1240
&
atom -> False
1240
^
atom -> False
1240
in
atom -> False
1240
[
atom -> False
1240
is
atom -> False
1240
%
atom -> False
1240
>=
atom -> False
1240
//
atom -> False
1240
(
atom -> False
1240
|
atom -> False
1240
<
atom -> False
1240
.
atom -> False
1240
or
atom -> False
1240
**
atom -> False
1240
>>
atom -> False
1240
-
atom -> False
1241
,
1754
1241
:
test_list -> test
1242
or
and_test -> not_test
1242
,
and_test -> not_test
1242
if
and_test -> not_test
1242
and
1755
1242
:
and_test -> not_test
1243
if
1756
1243
:
test -> or_test
1243
,
test -> or_test
1244
if
or_test -> and_test
1244
or
1757
1244
,
or_test -> and_test
1244
:
or_test -> and_test
1245
~
1218
1245
factor
1217
1245
STRING
1220
1245
shift_expr
1219
1245
expr
1221
1245
arith_expr
1222
1245
term
1223
1245
NUMBER
1224
1245
{
1225
1245
atom_expr
1226
1245
[
1227
1245
-
1228
1245
None
1229
1245
+
1230
1245
(
1231
1245
atom
1232
1245
and_expr
1233
1245
NAME
1234
1245
power
1235
1245
True
1236
1245
comparison
1237
1245
xor_expr
1238
1245
False
1240
1245
not_test
1758
1245
not
1245
1246
,
test -> lambdef
1246
:
test -> lambdef
1247
@
power -> atom_expr ** factor
1247
|
power -> atom_expr ** factor
1247
//
power -> atom_expr ** factor
1247
%
power -> atom_expr ** factor
1247
&
power -> atom_expr ** factor
1247
-
power -> atom_expr ** factor
1247
/
power -> atom_expr ** factor
1247
*
power -> atom_expr ** factor
1247
>>
power -> atom_expr ** factor
1247
,
power -> atom_expr ** factor
1247
+
power -> atom_expr ** factor
1247
^
power -> atom_expr ** factor
1247
in
power -> atom_expr ** factor
1247
<<
power -> atom_expr ** factor
1248
|
arith_expr -> term - arith_expr
1248
>>
arith_expr -> term - arith_expr
1248
,
arith_expr -> term - arith_expr
1248
^
arith_expr -> term - arith_expr
1248
<<
arith_expr -> term - arith_expr
1248
in
arith_expr -> term - arith_expr
1248
&
arith_expr -> term - arith_expr
1249
>>
arith_expr -> term + arith_expr
1249
^
arith_expr -> term + arith_expr
1249
|
arith_expr -> term + arith_expr
1249
,
arith_expr -> term + arith_expr
1249
in
arith_expr -> term + arith_expr
1249
&
arith_expr -> term + arith_expr
1249
<<
arith_expr -> term + arith_expr
1250
|
and_expr -> shift_expr & and_expr
1250
,
and_expr -> shift_expr & and_expr
1250
in
and_expr -> shift_expr & and_expr
1250
^
and_expr -> shift_expr & and_expr
1251
in
expr -> xor_expr | expr
1251
,
expr -> xor_expr | expr
1252
NEWLINE
1759
1253
)
1760
1254
NEWLINE
dotted_name -> NAME . dotted_name
1254
(
dotted_name -> NAME . dotted_name
1255
**=
lambdef -> lambda varargslist : test
1255
&=
lambdef -> lambda varargslist : test
1255
^=
lambdef -> lambda varargslist : test
1255
<<=
lambdef -> lambda varargslist : test
1255
>>=
lambdef -> lambda varargslist : test
1255
@=
lambdef -> lambda varargslist : test
1255
/=
lambdef -> lambda varargslist : test
1255
*=
lambdef -> lambda varargslist : test
1255
,
lambdef -> lambda varargslist : test
1255
=
lambdef -> lambda varargslist : test
1255
|=
lambdef -> lambda varargslist : test
1255
%=
lambdef -> lambda varargslist : test
1255
+=
lambdef -> lambda varargslist : test
1255
-=
lambdef -> lambda varargslist : test
1255
NEWLINE
lambdef -> lambda varargslist : test
1255
:
lambdef -> lambda varargslist : test
1255
//=
lambdef -> lambda varargslist : test
1256
:
varargslist -> vfpdef , varargslist
1257
<=
term -> factor / term
1257
!=
term -> factor / term
1257
and
term -> factor / term
1257
or
term -> factor / term
1257
|
term -> factor / term
1257
^
term -> factor / term
1257
>>
term -> factor / term
1257
==
term -> factor / term
1257
>
term -> factor / term
1257
if
term -> factor / term
1257
:
term -> factor / term
1257
&
term -> factor / term
1257
as
term -> factor / term
1257
<<
term -> factor / term
1257
+
term -> factor / term
1257
-
term -> factor / term
1257
not
term -> factor / term
1257
in
term -> factor / term
1257
<
term -> factor / term
1257
is
term -> factor / term
1257
>=
term -> factor / term
1257
,
term -> factor / term
1258
is
term -> factor @ term
1258
and
term -> factor @ term
1258
>
term -> factor @ term
1258
not
term -> factor @ term
1258
in
term -> factor @ term
1258
as
term -> factor @ term
1258
==
term -> factor @ term
1258
<
term -> factor @ term
1258
,
term -> factor @ term
1258
or
term -> factor @ term
1258
!=
term -> factor @ term
1258
<<
term -> factor @ term
1258
<=
term -> factor @ term
1258
if
term -> factor @ term
1258
|
term -> factor @ term
1258
+
term -> factor @ term
1258
-
term -> factor @ term
1258
&
term -> factor @ term
1258
>=
term -> factor @ term
1258
:
term -> factor @ term
1258
>>
term -> factor @ term
1258
^
term -> factor @ term
1259
>
term -> factor % term
1259
!=
term -> factor % term
1259
&
term -> factor % term
1259
>=
term -> factor % term
1259
or
term -> factor % term
1259
==
term -> factor % term
1259
^
term -> factor % term
1259
in
term -> factor % term
1259
,
term -> factor % term
1259
|
term -> factor % term
1259
and
term -> factor % term
1259
if
term -> factor % term
1259
not
term -> factor % term
1259
as
term -> factor % term
1259
is
term -> factor % term
1259
<
term -> factor % term
1259
>>
term -> factor % term
1259
-
term -> factor % term
1259
<=
term -> factor % term
1259
<<
term -> factor % term
1259
+
term -> factor % term
1259
:
term -> factor % term
1260
&
term -> factor * term
1260
-
term -> factor * term
1260
as
term -> factor * term
1260
:
term -> factor * term
1260
in
term -> factor * term
1260
or
term -> factor * term
1260
<=
term -> factor * term
1260
,
term -> factor * term
1260
|
term -> factor * term
1260
and
term -> factor * term
1260
not
term -> factor * term
1260
<<
term -> factor * term
1260
==
term -> factor * term
1260
if
term -> factor * term
1260
>
term -> factor * term
1260
>>
term -> factor * term
1260
<
term -> factor * term
1260
!=
term -> factor * term
1260
>=
term -> factor * term
1260
^
term -> factor * term
1260
+
term -> factor * term
1260
is
term -> factor * term
1261
+
term -> factor // term
1261
==
term -> factor // term
1261
<<
term -> factor // term
1261
<
term -> factor // term
1261
if
term -> factor // term
1261
in
term -> factor // term
1261
:
term -> factor // term
1261
!=
term -> factor // term
1261
>
term -> factor // term
1261
not
term -> factor // term
1261
as
term -> factor // term
1261
>=
term -> factor // term
1261
and
term -> factor // term
1261
is
term -> factor // term
1261
-
term -> factor // term
1261
&
term -> factor // term
1261
|
term -> factor // term
1261
,
term -> factor // term
1261
^
term -> factor // term
1261
<=
term -> factor // term
1261
or
term -> factor // term
1261
>>
term -> factor // term
1262
|
and_expr -> shift_expr & and_expr
1262
!=
and_expr -> shift_expr & and_expr
1262
,
and_expr -> shift_expr & and_expr
1262
>=
and_expr -> shift_expr & and_expr
1262
<=
and_expr -> shift_expr & and_expr
1262
not
and_expr -> shift_expr & and_expr
1262
and
and_expr -> shift_expr & and_expr
1262
is
and_expr -> shift_expr & and_expr
1262
in
and_expr -> shift_expr & and_expr
1262
or
and_expr -> shift_expr & and_expr
1262
==
and_expr -> shift_expr & and_expr
1262
^
and_expr -> shift_expr & and_expr
1262
>
and_expr -> shift_expr & and_expr
1262
<
and_expr -> shift_expr & and_expr
1262
if
and_expr -> shift_expr & and_expr
1262
as
and_expr -> shift_expr & and_expr
1262
:
and_expr -> shift_expr & and_expr
1263
as
comparison -> expr comp_op comparison
1263
or
comparison -> expr comp_op comparison
1263
,
comparison -> expr comp_op comparison
1263
:
comparison -> expr comp_op comparison
1263
if
comparison -> expr comp_op comparison
1263
and
comparison -> expr comp_op comparison
1264
>=
shift_expr -> arith_expr >> shift_expr
1264
not
shift_expr -> arith_expr >> shift_expr
1264
>
shift_expr -> arith_expr >> shift_expr
1264
^
shift_expr -> arith_expr >> shift_expr
1264
:
shift_expr -> arith_expr >> shift_expr
1264
,
shift_expr -> arith_expr >> shift_expr
1264
is
shift_expr -> arith_expr >> shift_expr
1264
&
shift_expr -> arith_expr >> shift_expr
1264
!=
shift_expr -> arith_expr >> shift_expr
1264
<=
shift_expr -> arith_expr >> shift_expr
1264
and
shift_expr -> arith_expr >> shift_expr
1264
if
shift_expr -> arith_expr >> shift_expr
1264
==
shift_expr -> arith_expr >> shift_expr
1264
as
shift_expr -> arith_expr >> shift_expr
1264
in
shift_expr -> arith_expr >> shift_expr
1264
or
shift_expr -> arith_expr >> shift_expr
1264
|
shift_expr -> arith_expr >> shift_expr
1264
<
shift_expr -> arith_expr >> shift_expr
1265
,
shift_expr -> arith_expr << shift_expr
1265
>=
shift_expr -> arith_expr << shift_expr
1265
in
shift_expr -> arith_expr << shift_expr
1265
>
shift_expr -> arith_expr << shift_expr
1265
|
shift_expr -> arith_expr << shift_expr
1265
!=
shift_expr -> arith_expr << shift_expr
1265
:
shift_expr -> arith_expr << shift_expr
1265
<=
shift_expr -> arith_expr << shift_expr
1265
&
shift_expr -> arith_expr << shift_expr
1265
not
shift_expr -> arith_expr << shift_expr
1265
^
shift_expr -> arith_expr << shift_expr
1265
<
shift_expr -> arith_expr << shift_expr
1265
==
shift_expr -> arith_expr << shift_expr
1265
if
shift_expr -> arith_expr << shift_expr
1265
as
shift_expr -> arith_expr << shift_expr
1265
or
shift_expr -> arith_expr << shift_expr
1265
is
shift_expr -> arith_expr << shift_expr
1265
and
shift_expr -> arith_expr << shift_expr
1266
:
arith_expr -> term + arith_expr
1266
>>
arith_expr -> term + arith_expr
1266
^
arith_expr -> term + arith_expr
1266
<
arith_expr -> term + arith_expr
1266
|
arith_expr -> term + arith_expr
1266
and
arith_expr -> term + arith_expr
1266
!=
arith_expr -> term + arith_expr
1266
or
arith_expr -> term + arith_expr
1266
not
arith_expr -> term + arith_expr
1266
<=
arith_expr -> term + arith_expr
1266
>
arith_expr -> term + arith_expr
1266
,
arith_expr -> term + arith_expr
1266
if
arith_expr -> term + arith_expr
1266
is
arith_expr -> term + arith_expr
1266
==
arith_expr -> term + arith_expr
1266
as
arith_expr -> term + arith_expr
1266
&
arith_expr -> term + arith_expr
1266
>=
arith_expr -> term + arith_expr
1266
in
arith_expr -> term + arith_expr
1266
<<
arith_expr -> term + arith_expr
1267
==
arith_expr -> term - arith_expr
1267
as
arith_expr -> term - arith_expr
1267
is
arith_expr -> term - arith_expr
1267
<=
arith_expr -> term - arith_expr
1267
not
arith_expr -> term - arith_expr
1267
<<
arith_expr -> term - arith_expr
1267
&
arith_expr -> term - arith_expr
1267
|
arith_expr -> term - arith_expr
1267
and
arith_expr -> term - arith_expr
1267
or
arith_expr -> term - arith_expr
1267
,
arith_expr -> term - arith_expr
1267
:
arith_expr -> term - arith_expr
1267
>>
arith_expr -> term - arith_expr
1267
if
arith_expr -> term - arith_expr
1267
>=
arith_expr -> term - arith_expr
1267
<
arith_expr -> term - arith_expr
1267
^
arith_expr -> term - arith_expr
1267
>
arith_expr -> term - arith_expr
1267
!=
arith_expr -> term - arith_expr
1267
in
arith_expr -> term - arith_expr
1268
if
or_test -> and_test or or_test
1268
as
or_test -> and_test or or_test
1268
,
or_test -> and_test or or_test
1268
:
or_test -> and_test or or_test
1269
@
power -> atom_expr ** factor
1269
==
power -> atom_expr ** factor
1269
&
power -> atom_expr ** factor
1269
-
power -> atom_expr ** factor
1269
>
power -> atom_expr ** factor
1269
and
power -> atom_expr ** factor
1269
|
power -> atom_expr ** factor
1269
<=
power -> atom_expr ** factor
1269
%
power -> atom_expr ** factor
1269
or
power -> atom_expr ** factor
1269
:
power -> atom_expr ** factor
1269
*
power -> atom_expr ** factor
1269
as
power -> atom_expr ** factor
1269
not
power -> atom_expr ** factor
1269
in
power -> atom_expr ** factor
1269
<<
power -> atom_expr ** factor
1269
//
power -> atom_expr ** factor
1269
/
power -> atom_expr ** factor
1269
>>
power -> atom_expr ** factor
1269
,
power -> atom_expr ** factor
1269
^
power -> atom_expr ** factor
1269
if
power -> atom_expr ** factor
1269
!=
power -> atom_expr ** factor
1269
is
power -> atom_expr ** factor
1269
<
power -> atom_expr ** factor
1269
+
power -> atom_expr ** factor
1269
>=
power -> atom_expr ** factor
1270
/
atom -> [ test_list_comp ]
1270
,
atom -> [ test_list_comp ]
1270
*
atom -> [ test_list_comp ]
1270
or
atom -> [ test_list_comp ]
1270
|
atom -> [ test_list_comp ]
1270
==
atom -> [ test_list_comp ]
1270
is
atom -> [ test_list_comp ]
1270
-
atom -> [ test_list_comp ]
1270
**
atom -> [ test_list_comp ]
1270
&
atom -> [ test_list_comp ]
1270
(
atom -> [ test_list_comp ]
1270
<
atom -> [ test_list_comp ]
1270
:
atom -> [ test_list_comp ]
1270
@
atom -> [ test_list_comp ]
1270
//
atom -> [ test_list_comp ]
1270
>
atom -> [ test_list_comp ]
1270
if
atom -> [ test_list_comp ]
1270
in
atom -> [ test_list_comp ]
1270
^
atom -> [ test_list_comp ]
1270
<<
atom -> [ test_list_comp ]
1270
[
atom -> [ test_list_comp ]
1270
!=
atom -> [ test_list_comp ]
1270
<=
atom -> [ test_list_comp ]
1270
and
atom -> [ test_list_comp ]
1270
%
atom -> [ test_list_comp ]
1270
not
atom -> [ test_list_comp ]
1270
+
atom -> [ test_list_comp ]
1270
>=
atom -> [ test_list_comp ]
1270
>>
atom -> [ test_list_comp ]
1270
.
atom -> [ test_list_comp ]
1270
as
atom -> [ test_list_comp ]
1271
@
atom -> ( test_list_comp )
1271
>>
atom -> ( test_list_comp )
1271
<<
atom -> ( test_list_comp )
1271
:
atom -> ( test_list_comp )
1271
==
atom -> ( test_list_comp )
1271
is
atom -> ( test_list_comp )
1271
or
atom -> ( test_list_comp )
1271
<=
atom -> ( test_list_comp )
1271
[
atom -> ( test_list_comp )
1271
if
atom -> ( test_list_comp )
1271
^
atom -> ( test_list_comp )
1271
as
atom -> ( test_list_comp )
1271
<
atom -> ( test_list_comp )
1271
and
atom -> ( test_list_comp )
1271
.
atom -> ( test_list_comp )
1271
+
atom -> ( test_list_comp )
1271
&
atom -> ( test_list_comp )
1271
!=
atom -> ( test_list_comp )
1271
in
atom -> ( test_list_comp )
1271
**
atom -> ( test_list_comp )
1271
not
atom -> ( test_list_comp )
1271
-
atom -> ( test_list_comp )
1271
(
atom -> ( test_list_comp )
1271
*
atom -> ( test_list_comp )
1271
|
atom -> ( test_list_comp )
1271
//
atom -> ( test_list_comp )
1271
>
atom -> ( test_list_comp )
1271
>=
atom -> ( test_list_comp )
1271
,
atom -> ( test_list_comp )
1271
%
atom -> ( test_list_comp )
1271
/
atom -> ( test_list_comp )
1272
with
with_stmt -> with with_items : suite
1272
False
with_stmt -> with with_items : suite
1272
try
with_stmt -> with with_items : suite
1272
pass
with_stmt -> with with_items : suite
1272
STRING
with_stmt -> with with_items : suite
1272
return
with_stmt -> with with_items : suite
1272
for
with_stmt -> with with_items : suite
1272
resetstats
with_stmt -> with with_items : suite
1272
None
with_stmt -> with with_items : suite
1272
continue
with_stmt -> with with_items : suite
1272
$
with_stmt -> with with_items : suite
1272
@
with_stmt -> with with_items : suite
1272
class
with_stmt -> with with_items : suite
1272
True
with_stmt -> with with_items : suite
1272
conf
with_stmt -> with with_items : suite
1272
+
with_stmt -> with with_items : suite
1272
assert
with_stmt -> with with_items : suite
1272
lambda
with_stmt -> with with_items : suite
1272
~
with_stmt -> with with_items : suite
1272
-
with_stmt -> with with_items : suite
1272
yield
with_stmt -> with with_items : suite
1272
if
with_stmt -> with with_items : suite
1272
def
with_stmt -> with with_items : suite
1272
NAME
with_stmt -> with with_items : suite
1272
while
with_stmt -> with with_items : suite
1272
NEWLINE
with_stmt -> with with_items : suite
1272
not
with_stmt -> with with_items : suite
1272
[
with_stmt -> with with_items : suite
1272
begsim
with_stmt -> with with_items : suite
1272
endsim
with_stmt -> with with_items : suite
1272
{
with_stmt -> with with_items : suite
1272
global
with_stmt -> with with_items : suite
1272
del
with_stmt -> with with_items : suite
1272
(
with_stmt -> with with_items : suite
1272
nonlocal
with_stmt -> with with_items : suite
1272
raise
with_stmt -> with with_items : suite
1272
NUMBER
with_stmt -> with with_items : suite
1272
break
with_stmt -> with with_items : suite
1273
]
1761
1274
,
trailer -> ( )
1274
/
trailer -> ( )
1274
[
trailer -> ( )
1274
(
trailer -> ( )
1274
|
trailer -> ( )
1274
<=
trailer -> ( )
1274
in
trailer -> ( )
1274
not
trailer -> ( )
1274
>>
trailer -> ( )
1274
^
trailer -> ( )
1274
.
trailer -> ( )
1274
**
trailer -> ( )
1274
if
trailer -> ( )
1274
+
trailer -> ( )
1274
is
trailer -> ( )
1274
<
trailer -> ( )
1274
>
trailer -> ( )
1274
==
trailer -> ( )
1274
:
trailer -> ( )
1274
<<
trailer -> ( )
1274
//
trailer -> ( )
1274
*
trailer -> ( )
1274
-
trailer -> ( )
1274
as
trailer -> ( )
1274
>=
trailer -> ( )
1274
%
trailer -> ( )
1274
and
trailer -> ( )
1274
@
trailer -> ( )
1274
&
trailer -> ( )
1274
!=
trailer -> ( )
1274
or
trailer -> ( )
1275
)
1762
1276
:
trailer_expr -> trailer trailer_expr
1276
is
trailer_expr -> trailer trailer_expr
1276
!=
trailer_expr -> trailer trailer_expr
1276
<<
trailer_expr -> trailer trailer_expr
1276
and
trailer_expr -> trailer trailer_expr
1276
&
trailer_expr -> trailer trailer_expr
1276
//
trailer_expr -> trailer trailer_expr
1276
|
trailer_expr -> trailer trailer_expr
1276
==
trailer_expr -> trailer trailer_expr
1276
<
trailer_expr -> trailer trailer_expr
1276
or
trailer_expr -> trailer trailer_expr
1276
^
trailer_expr -> trailer trailer_expr
1276
<=
trailer_expr -> trailer trailer_expr
1276
@
trailer_expr -> trailer trailer_expr
1276
in
trailer_expr -> trailer trailer_expr
1276
not
trailer_expr -> trailer trailer_expr
1276
as
trailer_expr -> trailer trailer_expr
1276
*
trailer_expr -> trailer trailer_expr
1276
+
trailer_expr -> trailer trailer_expr
1276
if
trailer_expr -> trailer trailer_expr
1276
**
trailer_expr -> trailer trailer_expr
1276
>>
trailer_expr -> trailer trailer_expr
1276
>=
trailer_expr -> trailer trailer_expr
1276
%
trailer_expr -> trailer trailer_expr
1276
-
trailer_expr -> trailer trailer_expr
1276
>
trailer_expr -> trailer trailer_expr
1276
/
trailer_expr -> trailer trailer_expr
1276
,
trailer_expr -> trailer trailer_expr
1277
<=
trailer -> . NAME
1277
if
trailer -> . NAME
1277
<
trailer -> . NAME
1277
%
trailer -> . NAME
1277
.
trailer -> . NAME
1277
as
trailer -> . NAME
1277
//
trailer -> . NAME
1277
:
trailer -> . NAME
1277
|
trailer -> . NAME
1277
==
trailer -> . NAME
1277
>=
trailer -> . NAME
1277
[
trailer -> . NAME
1277
^
trailer -> . NAME
1277
<<
trailer -> . NAME
1277
in
trailer -> . NAME
1277
&
trailer -> . NAME
1277
or
trailer -> . NAME
1277
*
trailer -> . NAME
1277
(
trailer -> . NAME
1277
and
trailer -> . NAME
1277
-
trailer -> . NAME
1277
+
trailer -> . NAME
1277
!=
trailer -> . NAME
1277
not
trailer -> . NAME
1277
**
trailer -> . NAME
1277
>>
trailer -> . NAME
1277
@
trailer -> . NAME
1277
/
trailer -> . NAME
1277
is
trailer -> . NAME
1277
>
trailer -> . NAME
1277
,
trailer -> . NAME
1278
==
xor_expr -> and_expr ^ xor_expr
1278
!=
xor_expr -> and_expr ^ xor_expr
1278
>
xor_expr -> and_expr ^ xor_expr
1278
not
xor_expr -> and_expr ^ xor_expr
1278
:
xor_expr -> and_expr ^ xor_expr
1278
if
xor_expr -> and_expr ^ xor_expr
1278
is
xor_expr -> and_expr ^ xor_expr
1278
<=
xor_expr -> and_expr ^ xor_expr
1278
as
xor_expr -> and_expr ^ xor_expr
1278
,
xor_expr -> and_expr ^ xor_expr
1278
|
xor_expr -> and_expr ^ xor_expr
1278
>=
xor_expr -> and_expr ^ xor_expr
1278
and
xor_expr -> and_expr ^ xor_expr
1278
in
xor_expr -> and_expr ^ xor_expr
1278
<
xor_expr -> and_expr ^ xor_expr
1278
or
xor_expr -> and_expr ^ xor_expr
1279
and
expr -> xor_expr | expr
1279
as
expr -> xor_expr | expr
1279
in
expr -> xor_expr | expr
1279
>=
expr -> xor_expr | expr
1279
is
expr -> xor_expr | expr
1279
==
expr -> xor_expr | expr
1279
or
expr -> xor_expr | expr
1279
<
expr -> xor_expr | expr
1279
if
expr -> xor_expr | expr
1279
,
expr -> xor_expr | expr
1279
not
expr -> xor_expr | expr
1279
!=
expr -> xor_expr | expr
1279
<=
expr -> xor_expr | expr
1279
>
expr -> xor_expr | expr
1279
:
expr -> xor_expr | expr
1280
,
lambdef -> lambda : test
1280
as
lambdef -> lambda : test
1280
:
lambdef -> lambda : test
1281
~
255
1281
factor
256
1281
STRING
257
1281
shift_expr
258
1281
expr
259
1281
arith_expr
260
1281
term
261
1281
NUMBER
262
1281
{
263
1281
and_test
264
1281
atom_expr
265
1281
[
266
1281
-
267
1281
None
268
1281
+
269
1281
(
270
1281
atom
272
1281
and_expr
273
1281
NAME
274
1281
power
275
1281
True
276
1281
comparison
277
1281
xor_expr
278
1281
lambda
279
1281
False
280
1281
not_test
281
1281
test
1763
1281
or_test
284
1281
lambdef
285
1281
not
286
1282
,
and_test -> not_test and and_test
1282
:
and_test -> not_test and and_test
1282
if
and_test -> not_test and and_test
1282
or
and_test -> not_test and and_test
1282
as
and_test -> not_test and and_test
1283
:
with_items -> with_item , with_items
1284
~
1284
1284
STRING
1286
1284
None
1287
1284
[
1289
1284
NUMBER
1290
1284
True
1291
1284
{
1292
1284
(
1293
1284
atom
1294
1284
-
1295
1284
+
1296
1284
atom_expr
1297
1284
False
1299
1284
power
1300
1284
NAME
1302
1284
factor
1764
1285
%
1765
1285
/
1766
1285
@
1767
1285
*
1768
1285
<<
term -> factor
1285
//
1769
1285
-
term -> factor
1285
:
term -> factor
1285
,
term -> factor
1285
&
term -> factor
1285
+
term -> factor
1285
>>
term -> factor
1285
^
term -> factor
1285
|
term -> factor
1286
/
atom -> STRING
1286
&
atom -> STRING
1286
+
atom -> STRING
1286
.
atom -> STRING
1286
(
atom -> STRING
1286
|
atom -> STRING
1286
@
atom -> STRING
1286
[
atom -> STRING
1286
^
atom -> STRING
1286
*
atom -> STRING
1286
%
atom -> STRING
1286
<<
atom -> STRING
1286
,
atom -> STRING
1286
**
atom -> STRING
1286
-
atom -> STRING
1286
:
atom -> STRING
1286
//
atom -> STRING
1286
>>
atom -> STRING
1287
//
atom -> None
1287
**
atom -> None
1287
,
atom -> None
1287
*
atom -> None
1287
%
atom -> None
1287
<<
atom -> None
1287
-
atom -> None
1287
/
atom -> None
1287
|
atom -> None
1287
&
atom -> None
1287
+
atom -> None
1287
@
atom -> None
1287
:
atom -> None
1287
[
atom -> None
1287
^
atom -> None
1287
>>
atom -> None
1287
(
atom -> None
1287
.
atom -> None
1288
>>
1770
1288
^
shift_expr -> arith_expr
1288
<<
1771
1288
:
shift_expr -> arith_expr
1288
,
shift_expr -> arith_expr
1288
&
shift_expr -> arith_expr
1288
|
shift_expr -> arith_expr
1289
~
186
1289
factor
187
1289
STRING
188
1289
shift_expr
189
1289
test_list_comp
1772
1289
arith_expr
191
1289
term
192
1289
atom_expr
193
1289
NUMBER
196
1289
test
195
1289
and_expr
197
1289
{
198
1289
[
199
1289
-
200
1289
None
201
1289
(
202
1289
atom
203
1289
+
204
1289
]
1773
1289
NAME
205
1289
power
206
1289
True
207
1289
comparison
208
1289
xor_expr
209
1289
lambdef
210
1289
False
211
1289
not_test
212
1289
or_test
213
1289
and_test
214
1289
lambda
215
1289
not
216
1289
expr
217
1289
test_list
218
1290
<<
atom -> NUMBER
1290
|
atom -> NUMBER
1290
[
atom -> NUMBER
1290
//
atom -> NUMBER
1290
.
atom -> NUMBER
1290
:
atom -> NUMBER
1290
**
atom -> NUMBER
1290
-
atom -> NUMBER
1290
&
atom -> NUMBER
1290
/
atom -> NUMBER
1290
^
atom -> NUMBER
1290
+
atom -> NUMBER
1290
%
atom -> NUMBER
1290
,
atom -> NUMBER
1290
@
atom -> NUMBER
1290
>>
atom -> NUMBER
1290
(
atom -> NUMBER
1290
*
atom -> NUMBER
1291
**
atom -> True
1291
//
atom -> True
1291
>>
atom -> True
1291
.
atom -> True
1291
%
atom -> True
1291
|
atom -> True
1291
,
atom -> True
1291
/
atom -> True
1291
-
atom -> True
1291
[
atom -> True
1291
^
atom -> True
1291
:
atom -> True
1291
*
atom -> True
1291
(
atom -> True
1291
@
atom -> True
1291
<<
atom -> True
1291
&
atom -> True
1291
+
atom -> True
1292
}
1774
1293
~
92
1293
factor
93
1293
STRING
94
1293
shift_expr
95
1293
arith_expr
96
1293
term
97
1293
NUMBER
98
1293
and_expr
99
1293
{
100
1293
atom_expr
101
1293
[
102
1293
-
103
1293
)
1775
1293
None
105
1293
(
106
1293
atom
107
1293
test_list_comp
1776
1293
+
109
1293
NAME
110
1293
power
111
1293
test_list
112
1293
True
113
1293
comparison
114
1293
xor_expr
115
1293
lambdef
116
1293
False
117
1293
not_test
118
1293
or_test
119
1293
test
120
1293
lambda
121
1293
and_test
122
1293
not
123
1293
expr
124
1294
[
1777
1294
trailer_expr
1778
1294
**
trailer_expr -> 
1294
//
trailer_expr -> 
1294
trailer
1779
1294
<<
trailer_expr -> 
1294
.
1780
1294
(
1781
1294
*
trailer_expr -> 
1294
&
trailer_expr -> 
1294
>>
trailer_expr -> 
1294
-
trailer_expr -> 
1294
/
trailer_expr -> 
1294
,
trailer_expr -> 
1294
%
trailer_expr -> 
1294
|
trailer_expr -> 
1294
^
trailer_expr -> 
1294
@
trailer_expr -> 
1294
:
trailer_expr -> 
1294
+
trailer_expr -> 
1295
~
1284
1295
STRING
1286
1295
None
1287
1295
[
1289
1295
NUMBER
1290
1295
True
1291
1295
factor
1782
1295
{
1292
1295
(
1293
1295
atom
1294
1295
-
1295
1295
+
1296
1295
atom_expr
1297
1295
False
1299
1295
power
1300
1295
NAME
1302
1296
~
1284
1296
STRING
1286
1296
None
1287
1296
[
1289
1296
NUMBER
1290
1296
True
1291
1296
{
1292
1296
(
1293
1296
factor
1783
1296
atom
1294
1296
-
1295
1296
+
1296
1296
atom_expr
1297
1296
False
1299
1296
power
1300
1296
NAME
1302
1297
**
1784
1297
:
power -> atom_expr
1297
*
power -> atom_expr
1297
^
power -> atom_expr
1297
@
power -> atom_expr
1297
-
power -> atom_expr
1297
|
power -> atom_expr
1297
&
power -> atom_expr
1297
//
power -> atom_expr
1297
,
power -> atom_expr
1297
%
power -> atom_expr
1297
/
power -> atom_expr
1297
<<
power -> atom_expr
1297
>>
power -> atom_expr
1297
+
power -> atom_expr
1298
^
1785
1298
:
xor_expr -> and_expr
1298
,
xor_expr -> and_expr
1298
|
xor_expr -> and_expr
1299
//
atom -> False
1299
**
atom -> False
1299
^
atom -> False
1299
(
atom -> False
1299
[
atom -> False
1299
|
atom -> False
1299
@
atom -> False
1299
<<
atom -> False
1299
,
atom -> False
1299
%
atom -> False
1299
.
atom -> False
1299
:
atom -> False
1299
+
atom -> False
1299
/
atom -> False
1299
*
atom -> False
1299
>>
atom -> False
1299
&
atom -> False
1299
-
atom -> False
1300
//
factor -> power
1300
<<
factor -> power
1300
|
factor -> power
1300
*
factor -> power
1300
%
factor -> power
1300
@
factor -> power
1300
^
factor -> power
1300
-
factor -> power
1300
/
factor -> power
1300
&
factor -> power
1300
+
factor -> power
1300
:
factor -> power
1300
,
factor -> power
1300
>>
factor -> power
1301
-
1786
1301
+
1787
1301
|
arith_expr -> term
1301
^
arith_expr -> term
1301
<<
arith_expr -> term
1301
&
arith_expr -> term
1301
:
arith_expr -> term
1301
,
arith_expr -> term
1301
>>
arith_expr -> term
1302
*
atom -> NAME
1302
&
atom -> NAME
1302
-
atom -> NAME
1302
@
atom -> NAME
1302
.
atom -> NAME
1302
^
atom -> NAME
1302
[
atom -> NAME
1302
**
atom -> NAME
1302
/
atom -> NAME
1302
>>
atom -> NAME
1302
<<
atom -> NAME
1302
+
atom -> NAME
1302
%
atom -> NAME
1302
,
atom -> NAME
1302
:
atom -> NAME
1302
(
atom -> NAME
1302
|
atom -> NAME
1302
//
atom -> NAME
1303
&
1788
1303
^
and_expr -> shift_expr
1303
:
and_expr -> shift_expr
1303
|
and_expr -> shift_expr
1303
,
and_expr -> shift_expr
1304
:
expr -> xor_expr
1304
|
1789
1304
,
expr -> xor_expr
1305
,
with_item -> test as expr
1305
:
with_item -> test as expr
1306
else
1790
1307
<=
term -> factor / term
1307
!=
term -> factor / term
1307
and
term -> factor / term
1307
or
term -> factor / term
1307
|
term -> factor / term
1307
^
term -> factor / term
1307
from
term -> factor / term
1307
NEWLINE
term -> factor / term
1307
>>
term -> factor / term
1307
==
term -> factor / term
1307
>
term -> factor / term
1307
if
term -> factor / term
1307
&
term -> factor / term
1307
<<
term -> factor / term
1307
+
term -> factor / term
1307
-
term -> factor / term
1307
not
term -> factor / term
1307
in
term -> factor / term
1307
<
term -> factor / term
1307
is
term -> factor / term
1307
>=
term -> factor / term
1308
is
term -> factor @ term
1308
and
term -> factor @ term
1308
>
term -> factor @ term
1308
not
term -> factor @ term
1308
in
term -> factor @ term
1308
==
term -> factor @ term
1308
<
term -> factor @ term
1308
from
term -> factor @ term
1308
or
term -> factor @ term
1308
!=
term -> factor @ term
1308
<<
term -> factor @ term
1308
NEWLINE
term -> factor @ term
1308
<=
term -> factor @ term
1308
if
term -> factor @ term
1308
|
term -> factor @ term
1308
+
term -> factor @ term
1308
-
term -> factor @ term
1308
&
term -> factor @ term
1308
>=
term -> factor @ term
1308
>>
term -> factor @ term
1308
^
term -> factor @ term
1309
NEWLINE
term -> factor % term
1309
>
term -> factor % term
1309
!=
term -> factor % term
1309
&
term -> factor % term
1309
>=
term -> factor % term
1309
or
term -> factor % term
1309
==
term -> factor % term
1309
^
term -> factor % term
1309
in
term -> factor % term
1309
from
term -> factor % term
1309
|
term -> factor % term
1309
and
term -> factor % term
1309
if
term -> factor % term
1309
not
term -> factor % term
1309
is
term -> factor % term
1309
<
term -> factor % term
1309
>>
term -> factor % term
1309
-
term -> factor % term
1309
<=
term -> factor % term
1309
<<
term -> factor % term
1309
+
term -> factor % term
1310
from
term -> factor // term
1310
+
term -> factor // term
1310
==
term -> factor // term
1310
<<
term -> factor // term
1310
<
term -> factor // term
1310
if
term -> factor // term
1310
in
term -> factor // term
1310
!=
term -> factor // term
1310
>
term -> factor // term
1310
not
term -> factor // term
1310
NEWLINE
term -> factor // term
1310
>=
term -> factor // term
1310
and
term -> factor // term
1310
is
term -> factor // term
1310
-
term -> factor // term
1310
&
term -> factor // term
1310
|
term -> factor // term
1310
^
term -> factor // term
1310
<=
term -> factor // term
1310
or
term -> factor // term
1310
>>
term -> factor // term
1311
&
term -> factor * term
1311
-
term -> factor * term
1311
in
term -> factor * term
1311
or
term -> factor * term
1311
<=
term -> factor * term
1311
|
term -> factor * term
1311
and
term -> factor * term
1311
not
term -> factor * term
1311
<<
term -> factor * term
1311
==
term -> factor * term
1311
if
term -> factor * term
1311
>
term -> factor * term
1311
>>
term -> factor * term
1311
<
term -> factor * term
1311
!=
term -> factor * term
1311
NEWLINE
term -> factor * term
1311
>=
term -> factor * term
1311
^
term -> factor * term
1311
from
term -> factor * term
1311
+
term -> factor * term
1311
is
term -> factor * term
1312
|
and_expr -> shift_expr & and_expr
1312
!=
and_expr -> shift_expr & and_expr
1312
and
and_expr -> shift_expr & and_expr
1312
>=
and_expr -> shift_expr & and_expr
1312
not
and_expr -> shift_expr & and_expr
1312
in
and_expr -> shift_expr & and_expr
1312
NEWLINE
and_expr -> shift_expr & and_expr
1312
is
and_expr -> shift_expr & and_expr
1312
or
and_expr -> shift_expr & and_expr
1312
from
and_expr -> shift_expr & and_expr
1312
==
and_expr -> shift_expr & and_expr
1312
^
and_expr -> shift_expr & and_expr
1312
>
and_expr -> shift_expr & and_expr
1312
<
and_expr -> shift_expr & and_expr
1312
if
and_expr -> shift_expr & and_expr
1312
<=
and_expr -> shift_expr & and_expr
1313
>>
arith_expr -> term + arith_expr
1313
^
arith_expr -> term + arith_expr
1313
NEWLINE
arith_expr -> term + arith_expr
1313
<
arith_expr -> term + arith_expr
1313
|
arith_expr -> term + arith_expr
1313
and
arith_expr -> term + arith_expr
1313
!=
arith_expr -> term + arith_expr
1313
or
arith_expr -> term + arith_expr
1313
not
arith_expr -> term + arith_expr
1313
<=
arith_expr -> term + arith_expr
1313
from
arith_expr -> term + arith_expr
1313
>
arith_expr -> term + arith_expr
1313
is
arith_expr -> term + arith_expr
1313
if
arith_expr -> term + arith_expr
1313
==
arith_expr -> term + arith_expr
1313
&
arith_expr -> term + arith_expr
1313
>=
arith_expr -> term + arith_expr
1313
in
arith_expr -> term + arith_expr
1313
<<
arith_expr -> term + arith_expr
1314
==
arith_expr -> term - arith_expr
1314
is
arith_expr -> term - arith_expr
1314
NEWLINE
arith_expr -> term - arith_expr
1314
<=
arith_expr -> term - arith_expr
1314
not
arith_expr -> term - arith_expr
1314
<<
arith_expr -> term - arith_expr
1314
&
arith_expr -> term - arith_expr
1314
|
arith_expr -> term - arith_expr
1314
and
arith_expr -> term - arith_expr
1314
or
arith_expr -> term - arith_expr
1314
from
arith_expr -> term - arith_expr
1314
>>
arith_expr -> term - arith_expr
1314
if
arith_expr -> term - arith_expr
1314
>=
arith_expr -> term - arith_expr
1314
<
arith_expr -> term - arith_expr
1314
^
arith_expr -> term - arith_expr
1314
>
arith_expr -> term - arith_expr
1314
!=
arith_expr -> term - arith_expr
1314
in
arith_expr -> term - arith_expr
1315
@
power -> atom_expr ** factor
1315
==
power -> atom_expr ** factor
1315
&
power -> atom_expr ** factor
1315
-
power -> atom_expr ** factor
1315
>
power -> atom_expr ** factor
1315
and
power -> atom_expr ** factor
1315
NEWLINE
power -> atom_expr ** factor
1315
|
power -> atom_expr ** factor
1315
<=
power -> atom_expr ** factor
1315
%
power -> atom_expr ** factor
1315
or
power -> atom_expr ** factor
1315
*
power -> atom_expr ** factor
1315
not
power -> atom_expr ** factor
1315
in
power -> atom_expr ** factor
1315
<<
power -> atom_expr ** factor
1315
//
power -> atom_expr ** factor
1315
/
power -> atom_expr ** factor
1315
>>
power -> atom_expr ** factor
1315
^
power -> atom_expr ** factor
1315
from
power -> atom_expr ** factor
1315
if
power -> atom_expr ** factor
1315
!=
power -> atom_expr ** factor
1315
is
power -> atom_expr ** factor
1315
<
power -> atom_expr ** factor
1315
+
power -> atom_expr ** factor
1315
>=
power -> atom_expr ** factor
1316
/
atom -> [ test_list_comp ]
1316
from
atom -> [ test_list_comp ]
1316
*
atom -> [ test_list_comp ]
1316
or
atom -> [ test_list_comp ]
1316
|
atom -> [ test_list_comp ]
1316
==
atom -> [ test_list_comp ]
1316
is
atom -> [ test_list_comp ]
1316
-
atom -> [ test_list_comp ]
1316
**
atom -> [ test_list_comp ]
1316
&
atom -> [ test_list_comp ]
1316
(
atom -> [ test_list_comp ]
1316
<
atom -> [ test_list_comp ]
1316
@
atom -> [ test_list_comp ]
1316
//
atom -> [ test_list_comp ]
1316
>
atom -> [ test_list_comp ]
1316
if
atom -> [ test_list_comp ]
1316
in
atom -> [ test_list_comp ]
1316
^
atom -> [ test_list_comp ]
1316
<<
atom -> [ test_list_comp ]
1316
[
atom -> [ test_list_comp ]
1316
!=
atom -> [ test_list_comp ]
1316
<=
atom -> [ test_list_comp ]
1316
and
atom -> [ test_list_comp ]
1316
%
atom -> [ test_list_comp ]
1316
not
atom -> [ test_list_comp ]
1316
+
atom -> [ test_list_comp ]
1316
>=
atom -> [ test_list_comp ]
1316
>>
atom -> [ test_list_comp ]
1316
.
atom -> [ test_list_comp ]
1316
NEWLINE
atom -> [ test_list_comp ]
1317
from
lambdef -> lambda : test
1317
NEWLINE
lambdef -> lambda : test
1318
~
287
1318
factor
288
1318
STRING
289
1318
shift_expr
290
1318
term
291
1318
NUMBER
292
1318
{
293
1318
atom_expr
294
1318
[
295
1318
-
296
1318
None
297
1318
lambda
298
1318
NAME
299
1318
(
300
1318
arith_expr
301
1318
atom
302
1318
+
303
1318
and_expr
304
1318
power
305
1318
True
306
1318
comparison
307
1318
xor_expr
308
1318
False
309
1318
not_test
310
1318
lambdef
311
1318
test
1791
1318
expr
312
1318
or_test
313
1318
and_test
314
1318
not
315
1319
@
atom -> ( test_list_comp )
1319
>>
atom -> ( test_list_comp )
1319
<<
atom -> ( test_list_comp )
1319
==
atom -> ( test_list_comp )
1319
is
atom -> ( test_list_comp )
1319
or
atom -> ( test_list_comp )
1319
<=
atom -> ( test_list_comp )
1319
[
atom -> ( test_list_comp )
1319
%
atom -> ( test_list_comp )
1319
from
atom -> ( test_list_comp )
1319
if
atom -> ( test_list_comp )
1319
^
atom -> ( test_list_comp )
1319
<
atom -> ( test_list_comp )
1319
and
atom -> ( test_list_comp )
1319
+
atom -> ( test_list_comp )
1319
&
atom -> ( test_list_comp )
1319
!=
atom -> ( test_list_comp )
1319
in
atom -> ( test_list_comp )
1319
**
atom -> ( test_list_comp )
1319
not
atom -> ( test_list_comp )
1319
-
atom -> ( test_list_comp )
1319
(
atom -> ( test_list_comp )
1319
*
atom -> ( test_list_comp )
1319
|
atom -> ( test_list_comp )
1319
NEWLINE
atom -> ( test_list_comp )
1319
//
atom -> ( test_list_comp )
1319
>
atom -> ( test_list_comp )
1319
>=
atom -> ( test_list_comp )
1319
.
atom -> ( test_list_comp )
1319
/
atom -> ( test_list_comp )
1320
>=
shift_expr -> arith_expr >> shift_expr
1320
not
shift_expr -> arith_expr >> shift_expr
1320
>
shift_expr -> arith_expr >> shift_expr
1320
^
shift_expr -> arith_expr >> shift_expr
1320
is
shift_expr -> arith_expr >> shift_expr
1320
&
shift_expr -> arith_expr >> shift_expr
1320
if
shift_expr -> arith_expr >> shift_expr
1320
!=
shift_expr -> arith_expr >> shift_expr
1320
from
shift_expr -> arith_expr >> shift_expr
1320
and
shift_expr -> arith_expr >> shift_expr
1320
<=
shift_expr -> arith_expr >> shift_expr
1320
==
shift_expr -> arith_expr >> shift_expr
1320
or
shift_expr -> arith_expr >> shift_expr
1320
in
shift_expr -> arith_expr >> shift_expr
1320
NEWLINE
shift_expr -> arith_expr >> shift_expr
1320
|
shift_expr -> arith_expr >> shift_expr
1320
<
shift_expr -> arith_expr >> shift_expr
1321
>=
shift_expr -> arith_expr << shift_expr
1321
in
shift_expr -> arith_expr << shift_expr
1321
>
shift_expr -> arith_expr << shift_expr
1321
|
shift_expr -> arith_expr << shift_expr
1321
!=
shift_expr -> arith_expr << shift_expr
1321
from
shift_expr -> arith_expr << shift_expr
1321
<=
shift_expr -> arith_expr << shift_expr
1321
&
shift_expr -> arith_expr << shift_expr
1321
not
shift_expr -> arith_expr << shift_expr
1321
^
shift_expr -> arith_expr << shift_expr
1321
<
shift_expr -> arith_expr << shift_expr
1321
==
shift_expr -> arith_expr << shift_expr
1321
if
shift_expr -> arith_expr << shift_expr
1321
NEWLINE
shift_expr -> arith_expr << shift_expr
1321
or
shift_expr -> arith_expr << shift_expr
1321
is
shift_expr -> arith_expr << shift_expr
1321
and
shift_expr -> arith_expr << shift_expr
1322
]
1792
1323
/
trailer -> ( )
1323
[
trailer -> ( )
1323
(
trailer -> ( )
1323
|
trailer -> ( )
1323
<=
trailer -> ( )
1323
in
trailer -> ( )
1323
not
trailer -> ( )
1323
>>
trailer -> ( )
1323
^
trailer -> ( )
1323
.
trailer -> ( )
1323
NEWLINE
trailer -> ( )
1323
**
trailer -> ( )
1323
if
trailer -> ( )
1323
+
trailer -> ( )
1323
is
trailer -> ( )
1323
<
trailer -> ( )
1323
>
trailer -> ( )
1323
==
trailer -> ( )
1323
//
trailer -> ( )
1323
<<
trailer -> ( )
1323
*
trailer -> ( )
1323
-
trailer -> ( )
1323
>=
trailer -> ( )
1323
%
trailer -> ( )
1323
and
trailer -> ( )
1323
@
trailer -> ( )
1323
&
trailer -> ( )
1323
from
trailer -> ( )
1323
!=
trailer -> ( )
1323
or
trailer -> ( )
1324
)
1793
1325
is
trailer_expr -> trailer trailer_expr
1325
!=
trailer_expr -> trailer trailer_expr
1325
<<
trailer_expr -> trailer trailer_expr
1325
and
trailer_expr -> trailer trailer_expr
1325
&
trailer_expr -> trailer trailer_expr
1325
//
trailer_expr -> trailer trailer_expr
1325
|
trailer_expr -> trailer trailer_expr
1325
==
trailer_expr -> trailer trailer_expr
1325
<
trailer_expr -> trailer trailer_expr
1325
or
trailer_expr -> trailer trailer_expr
1325
^
trailer_expr -> trailer trailer_expr
1325
<=
trailer_expr -> trailer trailer_expr
1325
@
trailer_expr -> trailer trailer_expr
1325
not
trailer_expr -> trailer trailer_expr
1325
in
trailer_expr -> trailer trailer_expr
1325
*
trailer_expr -> trailer trailer_expr
1325
+
trailer_expr -> trailer trailer_expr
1325
if
trailer_expr -> trailer trailer_expr
1325
**
trailer_expr -> trailer trailer_expr
1325
>>
trailer_expr -> trailer trailer_expr
1325
>=
trailer_expr -> trailer trailer_expr
1325
NEWLINE
trailer_expr -> trailer trailer_expr
1325
%
trailer_expr -> trailer trailer_expr
1325
from
trailer_expr -> trailer trailer_expr
1325
-
trailer_expr -> trailer trailer_expr
1325
>
trailer_expr -> trailer trailer_expr
1325
/
trailer_expr -> trailer trailer_expr
1326
<=
trailer -> . NAME
1326
if
trailer -> . NAME
1326
<
trailer -> . NAME
1326
%
trailer -> . NAME
1326
.
trailer -> . NAME
1326
//
trailer -> . NAME
1326
|
trailer -> . NAME
1326
==
trailer -> . NAME
1326
>=
trailer -> . NAME
1326
[
trailer -> . NAME
1326
^
trailer -> . NAME
1326
<<
trailer -> . NAME
1326
from
trailer -> . NAME
1326
in
trailer -> . NAME
1326
&
trailer -> . NAME
1326
or
trailer -> . NAME
1326
NEWLINE
trailer -> . NAME
1326
*
trailer -> . NAME
1326
(
trailer -> . NAME
1326
and
trailer -> . NAME
1326
-
trailer -> . NAME
1326
+
trailer -> . NAME
1326
!=
trailer -> . NAME
1326
not
trailer -> . NAME
1326
**
trailer -> . NAME
1326
>>
trailer -> . NAME
1326
@
trailer -> . NAME
1326
/
trailer -> . NAME
1326
is
trailer -> . NAME
1326
>
trailer -> . NAME
1327
==
xor_expr -> and_expr ^ xor_expr
1327
!=
xor_expr -> and_expr ^ xor_expr
1327
>
xor_expr -> and_expr ^ xor_expr
1327
not
xor_expr -> and_expr ^ xor_expr
1327
if
xor_expr -> and_expr ^ xor_expr
1327
NEWLINE
xor_expr -> and_expr ^ xor_expr
1327
is
xor_expr -> and_expr ^ xor_expr
1327
<=
xor_expr -> and_expr ^ xor_expr
1327
|
xor_expr -> and_expr ^ xor_expr
1327
from
xor_expr -> and_expr ^ xor_expr
1327
>=
xor_expr -> and_expr ^ xor_expr
1327
and
xor_expr -> and_expr ^ xor_expr
1327
in
xor_expr -> and_expr ^ xor_expr
1327
<
xor_expr -> and_expr ^ xor_expr
1327
or
xor_expr -> and_expr ^ xor_expr
1328
and
expr -> xor_expr | expr
1328
in
expr -> xor_expr | expr
1328
>=
expr -> xor_expr | expr
1328
is
expr -> xor_expr | expr
1328
==
expr -> xor_expr | expr
1328
or
expr -> xor_expr | expr
1328
<
expr -> xor_expr | expr
1328
NEWLINE
expr -> xor_expr | expr
1328
if
expr -> xor_expr | expr
1328
not
expr -> xor_expr | expr
1328
<=
expr -> xor_expr | expr
1328
!=
expr -> xor_expr | expr
1328
from
expr -> xor_expr | expr
1328
>
expr -> xor_expr | expr
1329
if
and_test -> not_test and and_test
1329
or
and_test -> not_test and and_test
1329
NEWLINE
and_test -> not_test and and_test
1329
from
and_test -> not_test and and_test
1330
or
comparison -> expr comp_op comparison
1330
NEWLINE
comparison -> expr comp_op comparison
1330
if
comparison -> expr comp_op comparison
1330
from
comparison -> expr comp_op comparison
1330
and
comparison -> expr comp_op comparison
1331
else
1794
1332
if
or_test -> and_test or or_test
1332
NEWLINE
or_test -> and_test or or_test
1332
from
or_test -> and_test or or_test
1333
NEWLINE
raise_stmt -> raise test from test
1334
NEWLINE
expr_list -> expr , expr_list
1335
<<
term -> factor / term
1335
+
term -> factor / term
1335
|
term -> factor / term
1335
^
term -> factor / term
1335
NEWLINE
term -> factor / term
1335
-
term -> factor / term
1335
>>
term -> factor / term
1335
&
term -> factor / term
1335
,
term -> factor / term
1336
NEWLINE
term -> factor @ term
1336
,
term -> factor @ term
1336
&
term -> factor @ term
1336
|
term -> factor @ term
1336
>>
term -> factor @ term
1336
+
term -> factor @ term
1336
<<
term -> factor @ term
1336
^
term -> factor @ term
1336
-
term -> factor @ term
1337
>>
term -> factor % term
1337
NEWLINE
term -> factor % term
1337
-
term -> factor % term
1337
^
term -> factor % term
1337
<<
term -> factor % term
1337
+
term -> factor % term
1337
,
term -> factor % term
1337
|
term -> factor % term
1337
&
term -> factor % term
1338
NEWLINE
term -> factor // term
1338
|
term -> factor // term
1338
+
term -> factor // term
1338
,
term -> factor // term
1338
^
term -> factor // term
1338
-
term -> factor // term
1338
<<
term -> factor // term
1338
>>
term -> factor // term
1338
&
term -> factor // term
1339
^
term -> factor * term
1339
&
term -> factor * term
1339
>>
term -> factor * term
1339
,
term -> factor * term
1339
-
term -> factor * term
1339
|
term -> factor * term
1339
+
term -> factor * term
1339
<<
term -> factor * term
1339
NEWLINE
term -> factor * term
1340
^
shift_expr -> arith_expr >> shift_expr
1340
,
shift_expr -> arith_expr >> shift_expr
1340
&
shift_expr -> arith_expr >> shift_expr
1340
NEWLINE
shift_expr -> arith_expr >> shift_expr
1340
|
shift_expr -> arith_expr >> shift_expr
1341
,
shift_expr -> arith_expr << shift_expr
1341
|
shift_expr -> arith_expr << shift_expr
1341
&
shift_expr -> arith_expr << shift_expr
1341
^
shift_expr -> arith_expr << shift_expr
1341
NEWLINE
shift_expr -> arith_expr << shift_expr
1342
/
atom -> [ test_list_comp ]
1342
^
atom -> [ test_list_comp ]
1342
[
atom -> [ test_list_comp ]
1342
(
atom -> [ test_list_comp ]
1342
%
atom -> [ test_list_comp ]
1342
,
atom -> [ test_list_comp ]
1342
+
atom -> [ test_list_comp ]
1342
*
atom -> [ test_list_comp ]
1342
@
atom -> [ test_list_comp ]
1342
>>
atom -> [ test_list_comp ]
1342
|
atom -> [ test_list_comp ]
1342
.
atom -> [ test_list_comp ]
1342
//
atom -> [ test_list_comp ]
1342
-
atom -> [ test_list_comp ]
1342
NEWLINE
atom -> [ test_list_comp ]
1342
**
atom -> [ test_list_comp ]
1342
&
atom -> [ test_list_comp ]
1342
<<
atom -> [ test_list_comp ]
1343
//
atom -> ( test_list_comp )
1343
NEWLINE
atom -> ( test_list_comp )
1343
^
atom -> ( test_list_comp )
1343
@
atom -> ( test_list_comp )
1343
**
atom -> ( test_list_comp )
1343
.
atom -> ( test_list_comp )
1343
[
atom -> ( test_list_comp )
1343
>>
atom -> ( test_list_comp )
1343
|
atom -> ( test_list_comp )
1343
-
atom -> ( test_list_comp )
1343
<<
atom -> ( test_list_comp )
1343
(
atom -> ( test_list_comp )
1343
+
atom -> ( test_list_comp )
1343
*
atom -> ( test_list_comp )
1343
&
atom -> ( test_list_comp )
1343
,
atom -> ( test_list_comp )
1343
%
atom -> ( test_list_comp )
1343
/
atom -> ( test_list_comp )
1344
]
1795
1345
NEWLINE
trailer_expr -> trailer trailer_expr
1345
*
trailer_expr -> trailer trailer_expr
1345
+
trailer_expr -> trailer trailer_expr
1345
%
trailer_expr -> trailer trailer_expr
1345
<<
trailer_expr -> trailer trailer_expr
1345
^
trailer_expr -> trailer trailer_expr
1345
-
trailer_expr -> trailer trailer_expr
1345
//
trailer_expr -> trailer trailer_expr
1345
@
trailer_expr -> trailer trailer_expr
1345
&
trailer_expr -> trailer trailer_expr
1345
/
trailer_expr -> trailer trailer_expr
1345
**
trailer_expr -> trailer trailer_expr
1345
,
trailer_expr -> trailer trailer_expr
1345
>>
trailer_expr -> trailer trailer_expr
1345
|
trailer_expr -> trailer trailer_expr
1346
&
trailer -> . NAME
1346
|
trailer -> . NAME
1346
NEWLINE
trailer -> . NAME
1346
*
trailer -> . NAME
1346
[
trailer -> . NAME
1346
**
trailer -> . NAME
1346
(
trailer -> . NAME
1346
>>
trailer -> . NAME
1346
%
trailer -> . NAME
1346
.
trailer -> . NAME
1346
^
trailer -> . NAME
1346
<<
trailer -> . NAME
1346
@
trailer -> . NAME
1346
-
trailer -> . NAME
1346
+
trailer -> . NAME
1346
/
trailer -> . NAME
1346
//
trailer -> . NAME
1346
,
trailer -> . NAME
1347
,
trailer -> ( )
1347
/
trailer -> ( )
1347
>>
trailer -> ( )
1347
^
trailer -> ( )
1347
.
trailer -> ( )
1347
[
trailer -> ( )
1347
NEWLINE
trailer -> ( )
1347
//
trailer -> ( )
1347
<<
trailer -> ( )
1347
*
trailer -> ( )
1347
**
trailer -> ( )
1347
%
trailer -> ( )
1347
|
trailer -> ( )
1347
-
trailer -> ( )
1347
(
trailer -> ( )
1347
@
trailer -> ( )
1347
&
trailer -> ( )
1347
+
trailer -> ( )
1348
)
1796
1349
@
power -> atom_expr ** factor
1349
|
power -> atom_expr ** factor
1349
//
power -> atom_expr ** factor
1349
%
power -> atom_expr ** factor
1349
&
power -> atom_expr ** factor
1349
-
power -> atom_expr ** factor
1349
/
power -> atom_expr ** factor
1349
*
power -> atom_expr ** factor
1349
>>
power -> atom_expr ** factor
1349
,
power -> atom_expr ** factor
1349
+
power -> atom_expr ** factor
1349
^
power -> atom_expr ** factor
1349
NEWLINE
power -> atom_expr ** factor
1349
<<
power -> atom_expr ** factor
1350
|
xor_expr -> and_expr ^ xor_expr
1350
NEWLINE
xor_expr -> and_expr ^ xor_expr
1350
,
xor_expr -> and_expr ^ xor_expr
1351
|
arith_expr -> term - arith_expr
1351
>>
arith_expr -> term - arith_expr
1351
,
arith_expr -> term - arith_expr
1351
^
arith_expr -> term - arith_expr
1351
<<
arith_expr -> term - arith_expr
1351
&
arith_expr -> term - arith_expr
1351
NEWLINE
arith_expr -> term - arith_expr
1352
>>
arith_expr -> term + arith_expr
1352
^
arith_expr -> term + arith_expr
1352
NEWLINE
arith_expr -> term + arith_expr
1352
|
arith_expr -> term + arith_expr
1352
,
arith_expr -> term + arith_expr
1352
&
arith_expr -> term + arith_expr
1352
<<
arith_expr -> term + arith_expr
1353
|
and_expr -> shift_expr & and_expr
1353
,
and_expr -> shift_expr & and_expr
1353
^
and_expr -> shift_expr & and_expr
1353
NEWLINE
and_expr -> shift_expr & and_expr
1354
NEWLINE
expr -> xor_expr | expr
1354
,
expr -> xor_expr | expr
1355
<=
term -> factor / term
1355
!=
term -> factor / term
1355
and
term -> factor / term
1355
or
term -> factor / term
1355
|
term -> factor / term
1355
^
term -> factor / term
1355
NEWLINE
term -> factor / term
1355
>>
term -> factor / term
1355
==
term -> factor / term
1355
>
term -> factor / term
1355
if
term -> factor / term
1355
&
term -> factor / term
1355
<<
term -> factor / term
1355
+
term -> factor / term
1355
-
term -> factor / term
1355
not
term -> factor / term
1355
in
term -> factor / term
1355
<
term -> factor / term
1355
is
term -> factor / term
1355
>=
term -> factor / term
1355
,
term -> factor / term
1356
is
term -> factor @ term
1356
and
term -> factor @ term
1356
>
term -> factor @ term
1356
not
term -> factor @ term
1356
in
term -> factor @ term
1356
==
term -> factor @ term
1356
<
term -> factor @ term
1356
,
term -> factor @ term
1356
or
term -> factor @ term
1356
!=
term -> factor @ term
1356
<<
term -> factor @ term
1356
NEWLINE
term -> factor @ term
1356
<=
term -> factor @ term
1356
if
term -> factor @ term
1356
|
term -> factor @ term
1356
+
term -> factor @ term
1356
-
term -> factor @ term
1356
&
term -> factor @ term
1356
>=
term -> factor @ term
1356
>>
term -> factor @ term
1356
^
term -> factor @ term
1357
NEWLINE
term -> factor % term
1357
>
term -> factor % term
1357
!=
term -> factor % term
1357
&
term -> factor % term
1357
>=
term -> factor % term
1357
or
term -> factor % term
1357
==
term -> factor % term
1357
^
term -> factor % term
1357
in
term -> factor % term
1357
,
term -> factor % term
1357
|
term -> factor % term
1357
and
term -> factor % term
1357
if
term -> factor % term
1357
not
term -> factor % term
1357
is
term -> factor % term
1357
<
term -> factor % term
1357
>>
term -> factor % term
1357
-
term -> factor % term
1357
<=
term -> factor % term
1357
<<
term -> factor % term
1357
+
term -> factor % term
1358
+
term -> factor // term
1358
==
term -> factor // term
1358
<<
term -> factor // term
1358
<
term -> factor // term
1358
if
term -> factor // term
1358
in
term -> factor // term
1358
!=
term -> factor // term
1358
>
term -> factor // term
1358
not
term -> factor // term
1358
NEWLINE
term -> factor // term
1358
>=
term -> factor // term
1358
and
term -> factor // term
1358
is
term -> factor // term
1358
-
term -> factor // term
1358
&
term -> factor // term
1358
|
term -> factor // term
1358
,
term -> factor // term
1358
^
term -> factor // term
1358
<=
term -> factor // term
1358
or
term -> factor // term
1358
>>
term -> factor // term
1359
&
term -> factor * term
1359
-
term -> factor * term
1359
in
term -> factor * term
1359
or
term -> factor * term
1359
<=
term -> factor * term
1359
,
term -> factor * term
1359
|
term -> factor * term
1359
and
term -> factor * term
1359
not
term -> factor * term
1359
<<
term -> factor * term
1359
==
term -> factor * term
1359
if
term -> factor * term
1359
>
term -> factor * term
1359
>>
term -> factor * term
1359
<
term -> factor * term
1359
!=
term -> factor * term
1359
NEWLINE
term -> factor * term
1359
>=
term -> factor * term
1359
^
term -> factor * term
1359
+
term -> factor * term
1359
is
term -> factor * term
1360
|
and_expr -> shift_expr & and_expr
1360
!=
and_expr -> shift_expr & and_expr
1360
,
and_expr -> shift_expr & and_expr
1360
>=
and_expr -> shift_expr & and_expr
1360
not
and_expr -> shift_expr & and_expr
1360
and
and_expr -> shift_expr & and_expr
1360
NEWLINE
and_expr -> shift_expr & and_expr
1360
is
and_expr -> shift_expr & and_expr
1360
in
and_expr -> shift_expr & and_expr
1360
or
and_expr -> shift_expr & and_expr
1360
==
and_expr -> shift_expr & and_expr
1360
^
and_expr -> shift_expr & and_expr
1360
>
and_expr -> shift_expr & and_expr
1360
<
and_expr -> shift_expr & and_expr
1360
if
and_expr -> shift_expr & and_expr
1360
<=
and_expr -> shift_expr & and_expr
1361
>=
shift_expr -> arith_expr >> shift_expr
1361
not
shift_expr -> arith_expr >> shift_expr
1361
>
shift_expr -> arith_expr >> shift_expr
1361
^
shift_expr -> arith_expr >> shift_expr
1361
,
shift_expr -> arith_expr >> shift_expr
1361
is
shift_expr -> arith_expr >> shift_expr
1361
&
shift_expr -> arith_expr >> shift_expr
1361
!=
shift_expr -> arith_expr >> shift_expr
1361
<=
shift_expr -> arith_expr >> shift_expr
1361
and
shift_expr -> arith_expr >> shift_expr
1361
if
shift_expr -> arith_expr >> shift_expr
1361
==
shift_expr -> arith_expr >> shift_expr
1361
or
shift_expr -> arith_expr >> shift_expr
1361
in
shift_expr -> arith_expr >> shift_expr
1361
NEWLINE
shift_expr -> arith_expr >> shift_expr
1361
|
shift_expr -> arith_expr >> shift_expr
1361
<
shift_expr -> arith_expr >> shift_expr
1362
,
shift_expr -> arith_expr << shift_expr
1362
>=
shift_expr -> arith_expr << shift_expr
1362
in
shift_expr -> arith_expr << shift_expr
1362
>
shift_expr -> arith_expr << shift_expr
1362
|
shift_expr -> arith_expr << shift_expr
1362
!=
shift_expr -> arith_expr << shift_expr
1362
<=
shift_expr -> arith_expr << shift_expr
1362
&
shift_expr -> arith_expr << shift_expr
1362
not
shift_expr -> arith_expr << shift_expr
1362
^
shift_expr -> arith_expr << shift_expr
1362
<
shift_expr -> arith_expr << shift_expr
1362
==
shift_expr -> arith_expr << shift_expr
1362
if
shift_expr -> arith_expr << shift_expr
1362
NEWLINE
shift_expr -> arith_expr << shift_expr
1362
or
shift_expr -> arith_expr << shift_expr
1362
is
shift_expr -> arith_expr << shift_expr
1362
and
shift_expr -> arith_expr << shift_expr
1363
>>
arith_expr -> term + arith_expr
1363
^
arith_expr -> term + arith_expr
1363
NEWLINE
arith_expr -> term + arith_expr
1363
<
arith_expr -> term + arith_expr
1363
|
arith_expr -> term + arith_expr
1363
and
arith_expr -> term + arith_expr
1363
!=
arith_expr -> term + arith_expr
1363
or
arith_expr -> term + arith_expr
1363
not
arith_expr -> term + arith_expr
1363
<=
arith_expr -> term + arith_expr
1363
>
arith_expr -> term + arith_expr
1363
,
arith_expr -> term + arith_expr
1363
if
arith_expr -> term + arith_expr
1363
is
arith_expr -> term + arith_expr
1363
==
arith_expr -> term + arith_expr
1363
&
arith_expr -> term + arith_expr
1363
>=
arith_expr -> term + arith_expr
1363
in
arith_expr -> term + arith_expr
1363
<<
arith_expr -> term + arith_expr
1364
==
arith_expr -> term - arith_expr
1364
is
arith_expr -> term - arith_expr
1364
NEWLINE
arith_expr -> term - arith_expr
1364
<=
arith_expr -> term - arith_expr
1364
not
arith_expr -> term - arith_expr
1364
<<
arith_expr -> term - arith_expr
1364
&
arith_expr -> term - arith_expr
1364
|
arith_expr -> term - arith_expr
1364
and
arith_expr -> term - arith_expr
1364
or
arith_expr -> term - arith_expr
1364
,
arith_expr -> term - arith_expr
1364
>>
arith_expr -> term - arith_expr
1364
if
arith_expr -> term - arith_expr
1364
>=
arith_expr -> term - arith_expr
1364
<
arith_expr -> term - arith_expr
1364
^
arith_expr -> term - arith_expr
1364
>
arith_expr -> term - arith_expr
1364
!=
arith_expr -> term - arith_expr
1364
in
arith_expr -> term - arith_expr
1365
@
power -> atom_expr ** factor
1365
==
power -> atom_expr ** factor
1365
&
power -> atom_expr ** factor
1365
-
power -> atom_expr ** factor
1365
>
power -> atom_expr ** factor
1365
NEWLINE
power -> atom_expr ** factor
1365
and
power -> atom_expr ** factor
1365
|
power -> atom_expr ** factor
1365
<=
power -> atom_expr ** factor
1365
%
power -> atom_expr ** factor
1365
or
power -> atom_expr ** factor
1365
*
power -> atom_expr ** factor
1365
not
power -> atom_expr ** factor
1365
in
power -> atom_expr ** factor
1365
<<
power -> atom_expr ** factor
1365
//
power -> atom_expr ** factor
1365
/
power -> atom_expr ** factor
1365
>>
power -> atom_expr ** factor
1365
,
power -> atom_expr ** factor
1365
^
power -> atom_expr ** factor
1365
if
power -> atom_expr ** factor
1365
!=
power -> atom_expr ** factor
1365
is
power -> atom_expr ** factor
1365
<
power -> atom_expr ** factor
1365
+
power -> atom_expr ** factor
1365
>=
power -> atom_expr ** factor
1366
/
atom -> [ test_list_comp ]
1366
,
atom -> [ test_list_comp ]
1366
*
atom -> [ test_list_comp ]
1366
or
atom -> [ test_list_comp ]
1366
|
atom -> [ test_list_comp ]
1366
==
atom -> [ test_list_comp ]
1366
is
atom -> [ test_list_comp ]
1366
-
atom -> [ test_list_comp ]
1366
**
atom -> [ test_list_comp ]
1366
&
atom -> [ test_list_comp ]
1366
(
atom -> [ test_list_comp ]
1366
<
atom -> [ test_list_comp ]
1366
@
atom -> [ test_list_comp ]
1366
//
atom -> [ test_list_comp ]
1366
>
atom -> [ test_list_comp ]
1366
if
atom -> [ test_list_comp ]
1366
in
atom -> [ test_list_comp ]
1366
^
atom -> [ test_list_comp ]
1366
<<
atom -> [ test_list_comp ]
1366
[
atom -> [ test_list_comp ]
1366
!=
atom -> [ test_list_comp ]
1366
<=
atom -> [ test_list_comp ]
1366
and
atom -> [ test_list_comp ]
1366
%
atom -> [ test_list_comp ]
1366
not
atom -> [ test_list_comp ]
1366
+
atom -> [ test_list_comp ]
1366
>=
atom -> [ test_list_comp ]
1366
>>
atom -> [ test_list_comp ]
1366
.
atom -> [ test_list_comp ]
1366
NEWLINE
atom -> [ test_list_comp ]
1367
@
atom -> ( test_list_comp )
1367
>>
atom -> ( test_list_comp )
1367
<<
atom -> ( test_list_comp )
1367
==
atom -> ( test_list_comp )
1367
is
atom -> ( test_list_comp )
1367
or
atom -> ( test_list_comp )
1367
<=
atom -> ( test_list_comp )
1367
[
atom -> ( test_list_comp )
1367
if
atom -> ( test_list_comp )
1367
^
atom -> ( test_list_comp )
1367
<
atom -> ( test_list_comp )
1367
and
atom -> ( test_list_comp )
1367
.
atom -> ( test_list_comp )
1367
+
atom -> ( test_list_comp )
1367
&
atom -> ( test_list_comp )
1367
!=
atom -> ( test_list_comp )
1367
in
atom -> ( test_list_comp )
1367
**
atom -> ( test_list_comp )
1367
not
atom -> ( test_list_comp )
1367
-
atom -> ( test_list_comp )
1367
(
atom -> ( test_list_comp )
1367
*
atom -> ( test_list_comp )
1367
|
atom -> ( test_list_comp )
1367
NEWLINE
atom -> ( test_list_comp )
1367
//
atom -> ( test_list_comp )
1367
>
atom -> ( test_list_comp )
1367
>=
atom -> ( test_list_comp )
1367
,
atom -> ( test_list_comp )
1367
%
atom -> ( test_list_comp )
1367
/
atom -> ( test_list_comp )
1368
]
1797
1369
,
trailer -> ( )
1369
/
trailer -> ( )
1369
[
trailer -> ( )
1369
(
trailer -> ( )
1369
|
trailer -> ( )
1369
<=
trailer -> ( )
1369
in
trailer -> ( )
1369
not
trailer -> ( )
1369
>>
trailer -> ( )
1369
^
trailer -> ( )
1369
.
trailer -> ( )
1369
NEWLINE
trailer -> ( )
1369
**
trailer -> ( )
1369
if
trailer -> ( )
1369
+
trailer -> ( )
1369
is
trailer -> ( )
1369
<
trailer -> ( )
1369
>
trailer -> ( )
1369
==
trailer -> ( )
1369
//
trailer -> ( )
1369
<<
trailer -> ( )
1369
*
trailer -> ( )
1369
-
trailer -> ( )
1369
>=
trailer -> ( )
1369
%
trailer -> ( )
1369
and
trailer -> ( )
1369
@
trailer -> ( )
1369
&
trailer -> ( )
1369
!=
trailer -> ( )
1369
or
trailer -> ( )
1370
)
1798
1371
is
trailer_expr -> trailer trailer_expr
1371
!=
trailer_expr -> trailer trailer_expr
1371
<<
trailer_expr -> trailer trailer_expr
1371
and
trailer_expr -> trailer trailer_expr
1371
&
trailer_expr -> trailer trailer_expr
1371
//
trailer_expr -> trailer trailer_expr
1371
|
trailer_expr -> trailer trailer_expr
1371
==
trailer_expr -> trailer trailer_expr
1371
<
trailer_expr -> trailer trailer_expr
1371
or
trailer_expr -> trailer trailer_expr
1371
^
trailer_expr -> trailer trailer_expr
1371
<=
trailer_expr -> trailer trailer_expr
1371
@
trailer_expr -> trailer trailer_expr
1371
not
trailer_expr -> trailer trailer_expr
1371
in
trailer_expr -> trailer trailer_expr
1371
*
trailer_expr -> trailer trailer_expr
1371
+
trailer_expr -> trailer trailer_expr
1371
if
trailer_expr -> trailer trailer_expr
1371
**
trailer_expr -> trailer trailer_expr
1371
>>
trailer_expr -> trailer trailer_expr
1371
>=
trailer_expr -> trailer trailer_expr
1371
NEWLINE
trailer_expr -> trailer trailer_expr
1371
%
trailer_expr -> trailer trailer_expr
1371
-
trailer_expr -> trailer trailer_expr
1371
>
trailer_expr -> trailer trailer_expr
1371
/
trailer_expr -> trailer trailer_expr
1371
,
trailer_expr -> trailer trailer_expr
1372
<=
trailer -> . NAME
1372
if
trailer -> . NAME
1372
<
trailer -> . NAME
1372
%
trailer -> . NAME
1372
.
trailer -> . NAME
1372
//
trailer -> . NAME
1372
|
trailer -> . NAME
1372
==
trailer -> . NAME
1372
>=
trailer -> . NAME
1372
[
trailer -> . NAME
1372
^
trailer -> . NAME
1372
<<
trailer -> . NAME
1372
in
trailer -> . NAME
1372
&
trailer -> . NAME
1372
or
trailer -> . NAME
1372
NEWLINE
trailer -> . NAME
1372
*
trailer -> . NAME
1372
(
trailer -> . NAME
1372
and
trailer -> . NAME
1372
-
trailer -> . NAME
1372
+
trailer -> . NAME
1372
!=
trailer -> . NAME
1372
not
trailer -> . NAME
1372
**
trailer -> . NAME
1372
>>
trailer -> . NAME
1372
@
trailer -> . NAME
1372
/
trailer -> . NAME
1372
is
trailer -> . NAME
1372
>
trailer -> . NAME
1372
,
trailer -> . NAME
1373
==
xor_expr -> and_expr ^ xor_expr
1373
!=
xor_expr -> and_expr ^ xor_expr
1373
>
xor_expr -> and_expr ^ xor_expr
1373
not
xor_expr -> and_expr ^ xor_expr
1373
if
xor_expr -> and_expr ^ xor_expr
1373
NEWLINE
xor_expr -> and_expr ^ xor_expr
1373
is
xor_expr -> and_expr ^ xor_expr
1373
<=
xor_expr -> and_expr ^ xor_expr
1373
,
xor_expr -> and_expr ^ xor_expr
1373
|
xor_expr -> and_expr ^ xor_expr
1373
>=
xor_expr -> and_expr ^ xor_expr
1373
and
xor_expr -> and_expr ^ xor_expr
1373
in
xor_expr -> and_expr ^ xor_expr
1373
<
xor_expr -> and_expr ^ xor_expr
1373
or
xor_expr -> and_expr ^ xor_expr
1374
,
lambdef -> lambda : test
1374
NEWLINE
lambdef -> lambda : test
1375
~
340
1375
factor
341
1375
STRING
342
1375
shift_expr
343
1375
arith_expr
344
1375
term
345
1375
NUMBER
346
1375
{
348
1375
atom_expr
349
1375
[
350
1375
-
351
1375
None
352
1375
(
353
1375
atom
354
1375
+
355
1375
and_expr
356
1375
NAME
357
1375
power
358
1375
True
359
1375
comparison
360
1375
lambda
361
1375
xor_expr
362
1375
False
363
1375
not_test
364
1375
lambdef
365
1375
test
1799
1375
or_test
367
1375
and_test
368
1375
not
369
1375
expr
370
1376
and
expr -> xor_expr | expr
1376
in
expr -> xor_expr | expr
1376
>=
expr -> xor_expr | expr
1376
is
expr -> xor_expr | expr
1376
==
expr -> xor_expr | expr
1376
or
expr -> xor_expr | expr
1376
<
expr -> xor_expr | expr
1376
NEWLINE
expr -> xor_expr | expr
1376
if
expr -> xor_expr | expr
1376
,
expr -> xor_expr | expr
1376
not
expr -> xor_expr | expr
1376
!=
expr -> xor_expr | expr
1376
<=
expr -> xor_expr | expr
1376
>
expr -> xor_expr | expr
1377
if
and_test -> not_test and and_test
1377
or
and_test -> not_test and and_test
1377
,
and_test -> not_test and and_test
1377
NEWLINE
and_test -> not_test and and_test
1378
NEWLINE
test_list -> test , test_list
1379
else
1800
1380
if
or_test -> and_test or or_test
1380
,
or_test -> and_test or or_test
1380
NEWLINE
or_test -> and_test or or_test
1381
or
comparison -> expr comp_op comparison
1381
,
comparison -> expr comp_op comparison
1381
NEWLINE
comparison -> expr comp_op comparison
1381
if
comparison -> expr comp_op comparison
1381
and
comparison -> expr comp_op comparison
1382
,
factor -> ~ factor
1382
<
factor -> ~ factor
1382
in
factor -> ~ factor
1382
==
factor -> ~ factor
1382
|
factor -> ~ factor
1382
<<
factor -> ~ factor
1382
>
factor -> ~ factor
1382
not
factor -> ~ factor
1382
<=
factor -> ~ factor
1382
//
factor -> ~ factor
1382
>=
factor -> ~ factor
1382
>>
factor -> ~ factor
1382
-
factor -> ~ factor
1382
*
factor -> ~ factor
1382
/
factor -> ~ factor
1382
if
factor -> ~ factor
1382
^
factor -> ~ factor
1382
and
factor -> ~ factor
1382
is
factor -> ~ factor
1382
+
factor -> ~ factor
1382
or
factor -> ~ factor
1382
&
factor -> ~ factor
1382
=
factor -> ~ factor
1382
NEWLINE
factor -> ~ factor
1382
!=
factor -> ~ factor
1382
%
factor -> ~ factor
1382
@
factor -> ~ factor
1383
~
825
1383
factor
826
1383
STRING
827
1383
term
1801
1383
NUMBER
831
1383
{
832
1383
[
834
1383
atom_expr
833
1383
-
835
1383
None
836
1383
(
837
1383
atom
838
1383
+
840
1383
NAME
843
1383
power
845
1383
True
846
1383
False
850
1384
~
825
1384
factor
826
1384
STRING
827
1384
NUMBER
831
1384
{
832
1384
[
834
1384
atom_expr
833
1384
-
835
1384
None
836
1384
(
837
1384
atom
838
1384
+
840
1384
NAME
843
1384
power
845
1384
True
846
1384
False
850
1384
term
1802
1385
~
825
1385
factor
826
1385
STRING
827
1385
NUMBER
831
1385
{
832
1385
term
1803
1385
[
834
1385
atom_expr
833
1385
-
835
1385
None
836
1385
(
837
1385
atom
838
1385
+
840
1385
NAME
843
1385
power
845
1385
True
846
1385
False
850
1386
~
825
1386
factor
826
1386
STRING
827
1386
NUMBER
831
1386
{
832
1386
[
834
1386
atom_expr
833
1386
-
835
1386
None
836
1386
(
837
1386
atom
838
1386
+
840
1386
term
1804
1386
NAME
843
1386
power
845
1386
True
846
1386
False
850
1387
~
825
1387
factor
826
1387
STRING
827
1387
NUMBER
831
1387
{
832
1387
[
834
1387
atom_expr
833
1387
-
835
1387
None
836
1387
(
837
1387
term
1805
1387
atom
838
1387
+
840
1387
NAME
843
1387
power
845
1387
True
846
1387
False
850
1388
~
825
1388
factor
826
1388
STRING
827
1388
shift_expr
828
1388
arith_expr
829
1388
term
830
1388
NUMBER
831
1388
{
832
1388
atom_expr
833
1388
[
834
1388
-
835
1388
None
836
1388
(
837
1388
atom
838
1388
+
840
1388
NAME
843
1388
power
845
1388
True
846
1388
False
850
1388
and_expr
1806
1389
~
825
1389
factor
826
1389
STRING
827
1389
arith_expr
829
1389
term
830
1389
NUMBER
831
1389
{
832
1389
[
834
1389
atom_expr
833
1389
-
835
1389
shift_expr
1807
1389
None
836
1389
(
837
1389
atom
838
1389
+
840
1389
NAME
843
1389
power
845
1389
True
846
1389
False
850
1390
~
825
1390
factor
826
1390
STRING
827
1390
arith_expr
829
1390
term
830
1390
NUMBER
831
1390
{
832
1390
[
834
1390
atom_expr
833
1390
-
835
1390
None
836
1390
(
837
1390
atom
838
1390
+
840
1390
shift_expr
1808
1390
NAME
843
1390
power
845
1390
True
846
1390
False
850
1391
~
825
1391
factor
826
1391
STRING
827
1391
arith_expr
1809
1391
term
830
1391
NUMBER
831
1391
{
832
1391
[
834
1391
atom_expr
833
1391
-
835
1391
None
836
1391
(
837
1391
atom
838
1391
+
840
1391
NAME
843
1391
power
845
1391
True
846
1391
False
850
1392
~
825
1392
factor
826
1392
STRING
827
1392
term
830
1392
arith_expr
1810
1392
NUMBER
831
1392
{
832
1392
[
834
1392
atom_expr
833
1392
-
835
1392
None
836
1392
(
837
1392
atom
838
1392
+
840
1392
NAME
843
1392
power
845
1392
True
846
1392
False
850
1393
//
atom -> { }
1393
[
atom -> { }
1393
|
atom -> { }
1393
>
atom -> { }
1393
>=
atom -> { }
1393
NEWLINE
atom -> { }
1393
==
atom -> { }
1393
&
atom -> { }
1393
not
atom -> { }
1393
**
atom -> { }
1393
in
atom -> { }
1393
,
atom -> { }
1393
or
atom -> { }
1393
<
atom -> { }
1393
!=
atom -> { }
1393
+
atom -> { }
1393
<<
atom -> { }
1393
^
atom -> { }
1393
<=
atom -> { }
1393
if
atom -> { }
1393
/
atom -> { }
1393
is
atom -> { }
1393
-
atom -> { }
1393
>>
atom -> { }
1393
%
atom -> { }
1393
.
atom -> { }
1393
=
atom -> { }
1393
and
atom -> { }
1393
(
atom -> { }
1393
*
atom -> { }
1393
@
atom -> { }
1394
~
825
1394
STRING
827
1394
NUMBER
831
1394
factor
1811
1394
{
832
1394
[
834
1394
atom_expr
833
1394
None
836
1394
-
835
1394
(
837
1394
atom
838
1394
+
840
1394
NAME
843
1394
power
845
1394
True
846
1394
False
850
1395
]
1812
1396
==
atom -> [ ]
1396
%
atom -> [ ]
1396
**
atom -> [ ]
1396
.
atom -> [ ]
1396
<<
atom -> [ ]
1396
not
atom -> [ ]
1396
/
atom -> [ ]
1396
*
atom -> [ ]
1396
if
atom -> [ ]
1396
!=
atom -> [ ]
1396
<=
atom -> [ ]
1396
@
atom -> [ ]
1396
-
atom -> [ ]
1396
>>
atom -> [ ]
1396
^
atom -> [ ]
1396
NEWLINE
atom -> [ ]
1396
|
atom -> [ ]
1396
,
atom -> [ ]
1396
<
atom -> [ ]
1396
[
atom -> [ ]
1396
is
atom -> [ ]
1396
in
atom -> [ ]
1396
>
atom -> [ ]
1396
=
atom -> [ ]
1396
+
atom -> [ ]
1396
>=
atom -> [ ]
1396
and
atom -> [ ]
1396
or
atom -> [ ]
1396
&
atom -> [ ]
1396
(
atom -> [ ]
1396
//
atom -> [ ]
1397
if
factor -> - factor
1397
/
factor -> - factor
1397
,
factor -> - factor
1397
not
factor -> - factor
1397
<
factor -> - factor
1397
or
factor -> - factor
1397
//
factor -> - factor
1397
!=
factor -> - factor
1397
%
factor -> - factor
1397
|
factor -> - factor
1397
>
factor -> - factor
1397
+
factor -> - factor
1397
=
factor -> - factor
1397
-
factor -> - factor
1397
^
factor -> - factor
1397
in
factor -> - factor
1397
<<
factor -> - factor
1397
NEWLINE
factor -> - factor
1397
&
factor -> - factor
1397
<=
factor -> - factor
1397
==
factor -> - factor
1397
and
factor -> - factor
1397
@
factor -> - factor
1397
>=
factor -> - factor
1397
is
factor -> - factor
1397
>>
factor -> - factor
1397
*
factor -> - factor
1398
-
atom -> ( )
1398
==
atom -> ( )
1398
/
atom -> ( )
1398
<=
atom -> ( )
1398
(
atom -> ( )
1398
&
atom -> ( )
1398
[
atom -> ( )
1398
,
atom -> ( )
1398
=
atom -> ( )
1398
^
atom -> ( )
1398
or
atom -> ( )
1398
+
atom -> ( )
1398
NEWLINE
atom -> ( )
1398
>>
atom -> ( )
1398
is
atom -> ( )
1398
*
atom -> ( )
1398
if
atom -> ( )
1398
and
atom -> ( )
1398
>=
atom -> ( )
1398
>
atom -> ( )
1398
@
atom -> ( )
1398
in
atom -> ( )
1398
not
atom -> ( )
1398
<
atom -> ( )
1398
.
atom -> ( )
1398
//
atom -> ( )
1398
%
atom -> ( )
1398
<<
atom -> ( )
1398
|
atom -> ( )
1398
**
atom -> ( )
1398
!=
atom -> ( )
1399
)
1813
1400
~
544
1400
factor
545
1400
STRING
546
1400
shift_expr
547
1400
expr
548
1400
arith_expr
549
1400
term
550
1400
atom_expr
551
1400
NUMBER
552
1400
subscript
553
1400
{
554
1400
[
555
1400
-
556
1400
None
557
1400
+
558
1400
(
559
1400
subscriptlist
1814
1400
atom
561
1400
and_expr
562
1400
NAME
563
1400
power
564
1400
True
565
1400
comparison
566
1400
xor_expr
567
1400
lambda
568
1400
False
569
1400
not_test
570
1400
and_test
571
1400
test
572
1400
or_test
573
1400
not
574
1400
:
maybe_test -> 
1400
maybe_test
575
1400
lambdef
576
1401
)
1815
1401
~
579
1401
factor
580
1401
STRING
581
1401
shift_expr
582
1401
arith_expr
583
1401
term
584
1401
NUMBER
585
1401
and_expr
586
1401
{
587
1401
arglist
1816
1401
atom_expr
589
1401
[
590
1401
-
591
1401
None
592
1401
(
593
1401
atom
594
1401
+
595
1401
not_test
596
1401
test
597
1401
NAME
598
1401
power
599
1401
True
600
1401
comparison
601
1401
xor_expr
602
1401
lambdef
603
1401
False
604
1401
argument
605
1401
and_test
606
1401
lambda
607
1401
or_test
608
1401
expr
609
1401
not
610
1401
**
611
1401
*
612
1402
[
1400
1402
(
1401
1402
//
trailer_expr -> 
1402
trailer
1402
1402
<<
trailer_expr -> 
1402
*
trailer_expr -> 
1402
in
trailer_expr -> 
1402
trailer_expr
1817
1402
&
trailer_expr -> 
1402
and
trailer_expr -> 
1402
.
1404
1402
<=
trailer_expr -> 
1402
,
trailer_expr -> 
1402
|
trailer_expr -> 
1402
or
trailer_expr -> 
1402
>=
trailer_expr -> 
1402
=
trailer_expr -> 
1402
+
trailer_expr -> 
1402
**
trailer_expr -> 
1402
>>
trailer_expr -> 
1402
!=
trailer_expr -> 
1402
-
trailer_expr -> 
1402
/
trailer_expr -> 
1402
%
trailer_expr -> 
1402
is
trailer_expr -> 
1402
<
trailer_expr -> 
1402
>
trailer_expr -> 
1402
NEWLINE
trailer_expr -> 
1402
if
trailer_expr -> 
1402
^
trailer_expr -> 
1402
==
trailer_expr -> 
1402
@
trailer_expr -> 
1402
not
trailer_expr -> 
1403
<=
atom_expr -> atom trailer_expr
1403
or
atom_expr -> atom trailer_expr
1403
,
atom_expr -> atom trailer_expr
1403
*
atom_expr -> atom trailer_expr
1403
>=
atom_expr -> atom trailer_expr
1403
**
atom_expr -> atom trailer_expr
1403
&
atom_expr -> atom trailer_expr
1403
%
atom_expr -> atom trailer_expr
1403
if
atom_expr -> atom trailer_expr
1403
+
atom_expr -> atom trailer_expr
1403
//
atom_expr -> atom trailer_expr
1403
is
atom_expr -> atom trailer_expr
1403
!=
atom_expr -> atom trailer_expr
1403
|
atom_expr -> atom trailer_expr
1403
<
atom_expr -> atom trailer_expr
1403
@
atom_expr -> atom trailer_expr
1403
not
atom_expr -> atom trailer_expr
1403
NEWLINE
atom_expr -> atom trailer_expr
1403
-
atom_expr -> atom trailer_expr
1403
in
atom_expr -> atom trailer_expr
1403
/
atom_expr -> atom trailer_expr
1403
^
atom_expr -> atom trailer_expr
1403
=
atom_expr -> atom trailer_expr
1403
>
atom_expr -> atom trailer_expr
1403
==
atom_expr -> atom trailer_expr
1403
<<
atom_expr -> atom trailer_expr
1403
>>
atom_expr -> atom trailer_expr
1403
and
atom_expr -> atom trailer_expr
1404
NAME
1818
1405
~
825
1405
factor
826
1405
STRING
827
1405
shift_expr
828
1405
arith_expr
829
1405
term
830
1405
NUMBER
831
1405
{
832
1405
atom_expr
833
1405
[
834
1405
xor_expr
1819
1405
-
835
1405
None
836
1405
(
837
1405
atom
838
1405
and_expr
839
1405
+
840
1405
NAME
843
1405
power
845
1405
True
846
1405
False
850
1406
<
factor -> + factor
1406
,
factor -> + factor
1406
in
factor -> + factor
1406
|
factor -> + factor
1406
==
factor -> + factor
1406
>
factor -> + factor
1406
-
factor -> + factor
1406
and
factor -> + factor
1406
*
factor -> + factor
1406
if
factor -> + factor
1406
%
factor -> + factor
1406
@
factor -> + factor
1406
is
factor -> + factor
1406
//
factor -> + factor
1406
&
factor -> + factor
1406
^
factor -> + factor
1406
>=
factor -> + factor
1406
not
factor -> + factor
1406
/
factor -> + factor
1406
=
factor -> + factor
1406
NEWLINE
factor -> + factor
1406
or
factor -> + factor
1406
!=
factor -> + factor
1406
<<
factor -> + factor
1406
>>
factor -> + factor
1406
<=
factor -> + factor
1406
+
factor -> + factor
1407
~
825
1407
factor
826
1407
STRING
827
1407
shift_expr
828
1407
arith_expr
829
1407
term
830
1407
NUMBER
831
1407
{
832
1407
atom_expr
833
1407
[
834
1407
and_test
1820
1407
-
835
1407
None
836
1407
(
837
1407
atom
838
1407
and_expr
839
1407
+
840
1407
not_test
841
1407
NAME
843
1407
power
845
1407
True
846
1407
comparison
847
1407
xor_expr
848
1407
False
850
1407
expr
853
1407
not
854
1408
~
825
1408
factor
826
1408
STRING
827
1408
shift_expr
828
1408
arith_expr
829
1408
term
830
1408
NUMBER
831
1408
{
832
1408
atom_expr
833
1408
[
834
1408
-
835
1408
None
836
1408
(
837
1408
atom
838
1408
and_expr
839
1408
+
840
1408
not_test
841
1408
test
842
1408
NAME
843
1408
power
845
1408
True
846
1408
comparison
847
1408
xor_expr
848
1408
lambda
849
1408
False
850
1408
and_test
851
1408
test_list
1821
1408
lambdef
852
1408
expr
853
1408
not
854
1408
or_test
855
1409
NEWLINE
assign -> = test_list assign
1410
~
825
1410
factor
826
1410
STRING
827
1410
shift_expr
828
1410
arith_expr
829
1410
term
830
1410
NUMBER
831
1410
{
832
1410
atom_expr
833
1410
[
834
1410
-
835
1410
None
836
1410
(
837
1410
atom
838
1410
and_expr
839
1410
+
840
1410
expr
1822
1410
NAME
843
1410
power
845
1410
True
846
1410
xor_expr
848
1410
False
850
1411
:
1823
1412
~
825
1412
factor
826
1412
STRING
827
1412
shift_expr
828
1412
arith_expr
829
1412
term
830
1412
NUMBER
831
1412
{
832
1412
atom_expr
833
1412
[
834
1412
-
835
1412
None
836
1412
(
837
1412
atom
838
1412
and_expr
839
1412
+
840
1412
not_test
841
1412
NAME
843
1412
power
845
1412
True
846
1412
comparison
847
1412
xor_expr
848
1412
lambda
849
1412
False
850
1412
and_test
851
1412
lambdef
852
1412
test
1824
1412
expr
853
1412
not
854
1412
or_test
855
1413
or_test
1825
1413
factor
826
1413
~
825
1413
shift_expr
828
1413
STRING
827
1413
arith_expr
829
1413
term
830
1413
NUMBER
831
1413
{
832
1413
atom_expr
833
1413
[
834
1413
-
835
1413
None
836
1413
(
837
1413
atom
838
1413
and_expr
839
1413
+
840
1413
not_test
841
1413
NAME
843
1413
power
845
1413
True
846
1413
comparison
847
1413
xor_expr
848
1413
False
850
1413
and_test
851
1413
expr
853
1413
not
854
1414
~
825
1414
factor
826
1414
STRING
827
1414
shift_expr
828
1414
arith_expr
829
1414
term
830
1414
NUMBER
831
1414
{
832
1414
atom_expr
833
1414
[
834
1414
-
835
1414
None
836
1414
(
837
1414
atom
838
1414
and_expr
839
1414
+
840
1414
NAME
843
1414
power
845
1414
True
846
1414
xor_expr
848
1414
False
850
1414
comparison
1826
1414
expr
853
1415
,
not_test -> not not_test
1415
NEWLINE
not_test -> not not_test
1415
=
not_test -> not not_test
1415
if
not_test -> not not_test
1415
and
not_test -> not not_test
1415
or
not_test -> not not_test
1416
~
509
1416
factor
510
1416
STRING
511
1416
shift_expr
512
1416
term
513
1416
NUMBER
514
1416
{
515
1416
atom_expr
516
1416
[
517
1416
-
518
1416
None
519
1416
(
520
1416
atom
521
1416
arith_expr
522
1416
False
523
1416
+
524
1416
NAME
526
1416
power
527
1416
True
528
1416
xor_expr
529
1416
comparison
530
1416
and_expr
531
1416
not_test
532
1416
or_test
1827
1416
not
533
1416
expr
534
1416
and_test
535
1417
=
yield_expr -> yield yield_arg
1417
NEWLINE
yield_expr -> yield yield_arg
1418
~
1828
1418
factor
1829
1418
STRING
1830
1418
shift_expr
1831
1418
term
1832
1418
NUMBER
1833
1418
{
1834
1418
atom_expr
1835
1418
[
1836
1418
-
1837
1418
None
1838
1418
(
1839
1418
arith_expr
1840
1418
atom
1841
1418
and_expr
1842
1418
+
1843
1418
not_test
1844
1418
NAME
1845
1418
power
1846
1418
True
1847
1418
comparison
1848
1418
xor_expr
1849
1418
lambda
1850
1418
False
1851
1418
and_test
1852
1418
test
1853
1418
lambdef
1854
1418
expr
1855
1418
not
1856
1418
or_test
1857
1419
=
yield_arg -> test_list
1419
NEWLINE
yield_arg -> test_list
1420
NEWLINE
assign -> = yield_expr assign
1421
<
factor -> ~ factor
1421
in
factor -> ~ factor
1421
==
factor -> ~ factor
1421
|
factor -> ~ factor
1421
<<
factor -> ~ factor
1421
>
factor -> ~ factor
1421
not
factor -> ~ factor
1421
<=
factor -> ~ factor
1421
//
factor -> ~ factor
1421
>=
factor -> ~ factor
1421
>>
factor -> ~ factor
1421
-
factor -> ~ factor
1421
*
factor -> ~ factor
1421
/
factor -> ~ factor
1421
if
factor -> ~ factor
1421
^
factor -> ~ factor
1421
and
factor -> ~ factor
1421
is
factor -> ~ factor
1421
+
factor -> ~ factor
1421
or
factor -> ~ factor
1421
&
factor -> ~ factor
1421
=
factor -> ~ factor
1421
!=
factor -> ~ factor
1421
%
factor -> ~ factor
1421
@
factor -> ~ factor
1422
~
858
1422
factor
859
1422
STRING
860
1422
term
1858
1422
NUMBER
863
1422
{
864
1422
[
866
1422
atom_expr
865
1422
-
867
1422
None
868
1422
(
869
1422
atom
871
1422
+
873
1422
NAME
875
1422
power
876
1422
True
877
1422
False
880
1423
~
858
1423
factor
859
1423
STRING
860
1423
NUMBER
863
1423
{
864
1423
[
866
1423
atom_expr
865
1423
-
867
1423
None
868
1423
(
869
1423
atom
871
1423
+
873
1423
NAME
875
1423
power
876
1423
True
877
1423
False
880
1423
term
1859
1424
~
858
1424
factor
859
1424
STRING
860
1424
NUMBER
863
1424
{
864
1424
term
1860
1424
[
866
1424
atom_expr
865
1424
-
867
1424
None
868
1424
(
869
1424
atom
871
1424
+
873
1424
NAME
875
1424
power
876
1424
True
877
1424
False
880
1425
~
858
1425
factor
859
1425
STRING
860
1425
NUMBER
863
1425
{
864
1425
[
866
1425
atom_expr
865
1425
-
867
1425
None
868
1425
(
869
1425
atom
871
1425
+
873
1425
term
1861
1425
NAME
875
1425
power
876
1425
True
877
1425
False
880
1426
~
858
1426
factor
859
1426
STRING
860
1426
NUMBER
863
1426
{
864
1426
[
866
1426
atom_expr
865
1426
-
867
1426
None
868
1426
(
869
1426
term
1862
1426
atom
871
1426
+
873
1426
NAME
875
1426
power
876
1426
True
877
1426
False
880
1427
~
858
1427
factor
859
1427
STRING
860
1427
shift_expr
861
1427
term
862
1427
NUMBER
863
1427
{
864
1427
atom_expr
865
1427
[
866
1427
-
867
1427
None
868
1427
(
869
1427
arith_expr
870
1427
atom
871
1427
+
873
1427
NAME
875
1427
power
876
1427
True
877
1427
False
880
1427
and_expr
1863
1428
~
858
1428
factor
859
1428
STRING
860
1428
arith_expr
1864
1428
term
862
1428
NUMBER
863
1428
{
864
1428
[
866
1428
atom_expr
865
1428
-
867
1428
None
868
1428
(
869
1428
atom
871
1428
+
873
1428
NAME
875
1428
power
876
1428
True
877
1428
False
880
1429
~
858
1429
factor
859
1429
STRING
860
1429
term
862
1429
arith_expr
1865
1429
NUMBER
863
1429
{
864
1429
[
866
1429
atom_expr
865
1429
-
867
1429
None
868
1429
(
869
1429
atom
871
1429
+
873
1429
NAME
875
1429
power
876
1429
True
877
1429
False
880
1430
//
atom -> { }
1430
[
atom -> { }
1430
|
atom -> { }
1430
>
atom -> { }
1430
>=
atom -> { }
1430
==
atom -> { }
1430
&
atom -> { }
1430
not
atom -> { }
1430
**
atom -> { }
1430
in
atom -> { }
1430
or
atom -> { }
1430
<
atom -> { }
1430
!=
atom -> { }
1430
+
atom -> { }
1430
<<
atom -> { }
1430
^
atom -> { }
1430
<=
atom -> { }
1430
if
atom -> { }
1430
/
atom -> { }
1430
is
atom -> { }
1430
-
atom -> { }
1430
>>
atom -> { }
1430
%
atom -> { }
1430
.
atom -> { }
1430
=
atom -> { }
1430
and
atom -> { }
1430
(
atom -> { }
1430
*
atom -> { }
1430
@
atom -> { }
1431
~
858
1431
STRING
860
1431
NUMBER
863
1431
factor
1866
1431
{
864
1431
[
866
1431
atom_expr
865
1431
None
868
1431
-
867
1431
(
869
1431
atom
871
1431
+
873
1431
NAME
875
1431
power
876
1431
True
877
1431
False
880
1432
]
1867
1433
==
atom -> [ ]
1433
%
atom -> [ ]
1433
**
atom -> [ ]
1433
.
atom -> [ ]
1433
<<
atom -> [ ]
1433
not
atom -> [ ]
1433
/
atom -> [ ]
1433
*
atom -> [ ]
1433
if
atom -> [ ]
1433
!=
atom -> [ ]
1433
<=
atom -> [ ]
1433
@
atom -> [ ]
1433
-
atom -> [ ]
1433
>>
atom -> [ ]
1433
^
atom -> [ ]
1433
|
atom -> [ ]
1433
<
atom -> [ ]
1433
[
atom -> [ ]
1433
is
atom -> [ ]
1433
in
atom -> [ ]
1433
>
atom -> [ ]
1433
=
atom -> [ ]
1433
+
atom -> [ ]
1433
>=
atom -> [ ]
1433
and
atom -> [ ]
1433
or
atom -> [ ]
1433
&
atom -> [ ]
1433
(
atom -> [ ]
1433
//
atom -> [ ]
1434
if
factor -> - factor
1434
/
factor -> - factor
1434
not
factor -> - factor
1434
<
factor -> - factor
1434
or
factor -> - factor
1434
//
factor -> - factor
1434
!=
factor -> - factor
1434
%
factor -> - factor
1434
|
factor -> - factor
1434
>
factor -> - factor
1434
+
factor -> - factor
1434
=
factor -> - factor
1434
-
factor -> - factor
1434
^
factor -> - factor
1434
in
factor -> - factor
1434
<<
factor -> - factor
1434
&
factor -> - factor
1434
<=
factor -> - factor
1434
==
factor -> - factor
1434
and
factor -> - factor
1434
@
factor -> - factor
1434
>=
factor -> - factor
1434
is
factor -> - factor
1434
>>
factor -> - factor
1434
*
factor -> - factor
1435
-
atom -> ( )
1435
==
atom -> ( )
1435
/
atom -> ( )
1435
<=
atom -> ( )
1435
(
atom -> ( )
1435
&
atom -> ( )
1435
[
atom -> ( )
1435
=
atom -> ( )
1435
^
atom -> ( )
1435
or
atom -> ( )
1435
+
atom -> ( )
1435
>>
atom -> ( )
1435
is
atom -> ( )
1435
*
atom -> ( )
1435
if
atom -> ( )
1435
and
atom -> ( )
1435
>=
atom -> ( )
1435
>
atom -> ( )
1435
@
atom -> ( )
1435
in
atom -> ( )
1435
not
atom -> ( )
1435
<
atom -> ( )
1435
.
atom -> ( )
1435
//
atom -> ( )
1435
%
atom -> ( )
1435
<<
atom -> ( )
1435
|
atom -> ( )
1435
**
atom -> ( )
1435
!=
atom -> ( )
1436
)
1868
1437
~
858
1437
factor
859
1437
STRING
860
1437
term
862
1437
NUMBER
863
1437
{
864
1437
[
866
1437
atom_expr
865
1437
-
867
1437
shift_expr
1869
1437
None
868
1437
(
869
1437
arith_expr
870
1437
atom
871
1437
+
873
1437
NAME
875
1437
power
876
1437
True
877
1437
False
880
1438
~
858
1438
factor
859
1438
STRING
860
1438
term
862
1438
NUMBER
863
1438
{
864
1438
[
866
1438
atom_expr
865
1438
-
867
1438
None
868
1438
(
869
1438
arith_expr
870
1438
atom
871
1438
+
873
1438
shift_expr
1870
1438
NAME
875
1438
power
876
1438
True
877
1438
False
880
1439
~
544
1439
factor
545
1439
STRING
546
1439
shift_expr
547
1439
expr
548
1439
arith_expr
549
1439
term
550
1439
atom_expr
551
1439
NUMBER
552
1439
subscript
553
1439
{
554
1439
[
555
1439
-
556
1439
None
557
1439
+
558
1439
(
559
1439
subscriptlist
1871
1439
atom
561
1439
and_expr
562
1439
NAME
563
1439
power
564
1439
True
565
1439
comparison
566
1439
xor_expr
567
1439
lambda
568
1439
False
569
1439
not_test
570
1439
and_test
571
1439
test
572
1439
or_test
573
1439
not
574
1439
:
maybe_test -> 
1439
maybe_test
575
1439
lambdef
576
1440
)
1872
1440
~
579
1440
factor
580
1440
STRING
581
1440
shift_expr
582
1440
arith_expr
583
1440
term
584
1440
NUMBER
585
1440
and_expr
586
1440
{
587
1440
arglist
1873
1440
atom_expr
589
1440
[
590
1440
-
591
1440
None
592
1440
(
593
1440
atom
594
1440
+
595
1440
not_test
596
1440
test
597
1440
NAME
598
1440
power
599
1440
True
600
1440
comparison
601
1440
xor_expr
602
1440
lambdef
603
1440
False
604
1440
argument
605
1440
and_test
606
1440
lambda
607
1440
or_test
608
1440
expr
609
1440
not
610
1440
**
611
1440
*
612
1441
[
1439
1441
(
1440
1441
//
trailer_expr -> 
1441
trailer
1441
1441
<<
trailer_expr -> 
1441
*
trailer_expr -> 
1441
in
trailer_expr -> 
1441
&
trailer_expr -> 
1441
trailer_expr
1874
1441
and
trailer_expr -> 
1441
.
1443
1441
<=
trailer_expr -> 
1441
|
trailer_expr -> 
1441
or
trailer_expr -> 
1441
>=
trailer_expr -> 
1441
=
trailer_expr -> 
1441
+
trailer_expr -> 
1441
**
trailer_expr -> 
1441
>>
trailer_expr -> 
1441
!=
trailer_expr -> 
1441
-
trailer_expr -> 
1441
/
trailer_expr -> 
1441
%
trailer_expr -> 
1441
is
trailer_expr -> 
1441
<
trailer_expr -> 
1441
>
trailer_expr -> 
1441
if
trailer_expr -> 
1441
^
trailer_expr -> 
1441
==
trailer_expr -> 
1441
@
trailer_expr -> 
1441
not
trailer_expr -> 
1442
<=
atom_expr -> atom trailer_expr
1442
or
atom_expr -> atom trailer_expr
1442
*
atom_expr -> atom trailer_expr
1442
>=
atom_expr -> atom trailer_expr
1442
**
atom_expr -> atom trailer_expr
1442
&
atom_expr -> atom trailer_expr
1442
%
atom_expr -> atom trailer_expr
1442
if
atom_expr -> atom trailer_expr
1442
+
atom_expr -> atom trailer_expr
1442
//
atom_expr -> atom trailer_expr
1442
is
atom_expr -> atom trailer_expr
1442
!=
atom_expr -> atom trailer_expr
1442
|
atom_expr -> atom trailer_expr
1442
<
atom_expr -> atom trailer_expr
1442
@
atom_expr -> atom trailer_expr
1442
not
atom_expr -> atom trailer_expr
1442
-
atom_expr -> atom trailer_expr
1442
in
atom_expr -> atom trailer_expr
1442
/
atom_expr -> atom trailer_expr
1442
^
atom_expr -> atom trailer_expr
1442
=
atom_expr -> atom trailer_expr
1442
>
atom_expr -> atom trailer_expr
1442
==
atom_expr -> atom trailer_expr
1442
<<
atom_expr -> atom trailer_expr
1442
>>
atom_expr -> atom trailer_expr
1442
and
atom_expr -> atom trailer_expr
1443
NAME
1875
1444
~
858
1444
factor
859
1444
STRING
860
1444
shift_expr
861
1444
term
862
1444
NUMBER
863
1444
{
864
1444
atom_expr
865
1444
[
866
1444
xor_expr
1876
1444
-
867
1444
None
868
1444
(
869
1444
arith_expr
870
1444
atom
871
1444
and_expr
872
1444
+
873
1444
NAME
875
1444
power
876
1444
True
877
1444
False
880
1445
<
factor -> + factor
1445
in
factor -> + factor
1445
|
factor -> + factor
1445
==
factor -> + factor
1445
>
factor -> + factor
1445
-
factor -> + factor
1445
and
factor -> + factor
1445
*
factor -> + factor
1445
if
factor -> + factor
1445
%
factor -> + factor
1445
@
factor -> + factor
1445
is
factor -> + factor
1445
//
factor -> + factor
1445
&
factor -> + factor
1445
^
factor -> + factor
1445
>=
factor -> + factor
1445
not
factor -> + factor
1445
/
factor -> + factor
1445
=
factor -> + factor
1445
or
factor -> + factor
1445
!=
factor -> + factor
1445
<<
factor -> + factor
1445
>>
factor -> + factor
1445
<=
factor -> + factor
1445
+
factor -> + factor
1446
~
858
1446
factor
859
1446
STRING
860
1446
shift_expr
861
1446
term
862
1446
NUMBER
863
1446
{
864
1446
atom_expr
865
1446
[
866
1446
-
867
1446
None
868
1446
(
869
1446
arith_expr
870
1446
atom
871
1446
and_expr
872
1446
+
873
1446
not_test
874
1446
NAME
875
1446
power
876
1446
True
877
1446
and_test
1877
1446
comparison
878
1446
xor_expr
879
1446
False
880
1446
expr
883
1446
not
884
1447
~
858
1447
factor
859
1447
STRING
860
1447
shift_expr
861
1447
term
862
1447
NUMBER
863
1447
{
864
1447
atom_expr
865
1447
[
866
1447
-
867
1447
None
868
1447
(
869
1447
arith_expr
870
1447
atom
871
1447
and_expr
872
1447
+
873
1447
NAME
875
1447
power
876
1447
True
877
1447
xor_expr
879
1447
False
880
1447
expr
1878
1448
or_test
1879
1448
factor
859
1448
~
858
1448
shift_expr
861
1448
STRING
860
1448
term
862
1448
NUMBER
863
1448
{
864
1448
atom_expr
865
1448
[
866
1448
-
867
1448
None
868
1448
(
869
1448
arith_expr
870
1448
atom
871
1448
and_expr
872
1448
+
873
1448
not_test
874
1448
NAME
875
1448
power
876
1448
True
877
1448
comparison
878
1448
xor_expr
879
1448
False
880
1448
and_test
881
1448
expr
883
1448
not
884
1449
:
1880
1450
~
858
1450
factor
859
1450
STRING
860
1450
shift_expr
861
1450
term
862
1450
NUMBER
863
1450
{
864
1450
atom_expr
865
1450
[
866
1450
-
867
1450
None
868
1450
(
869
1450
arith_expr
870
1450
atom
871
1450
and_expr
872
1450
+
873
1450
not_test
874
1450
NAME
875
1450
power
876
1450
True
877
1450
comparison
878
1450
xor_expr
879
1450
False
880
1450
and_test
881
1450
lambda
882
1450
test
1881
1450
expr
883
1450
not
884
1450
or_test
886
1450
lambdef
887
1451
~
858
1451
factor
859
1451
STRING
860
1451
shift_expr
861
1451
term
862
1451
NUMBER
863
1451
{
864
1451
atom_expr
865
1451
[
866
1451
-
867
1451
None
868
1451
(
869
1451
arith_expr
870
1451
atom
871
1451
and_expr
872
1451
+
873
1451
NAME
875
1451
power
876
1451
True
877
1451
xor_expr
879
1451
False
880
1451
comparison
1882
1451
expr
883
1452
and
not_test -> not not_test
1452
if
not_test -> not not_test
1452
or
not_test -> not not_test
1452
=
not_test -> not not_test
1453
~
397
1453
factor
398
1453
STRING
399
1453
shift_expr
400
1453
term
401
1453
NUMBER
402
1453
{
403
1453
atom_expr
404
1453
[
405
1453
-
406
1453
None
407
1453
(
408
1453
arith_expr
409
1453
atom
410
1453
+
411
1453
and_expr
412
1453
NAME
413
1453
power
414
1453
True
415
1453
comparison
416
1453
lambda
417
1453
xor_expr
418
1453
False
419
1453
not_test
420
1453
lambdef
421
1453
test
1883
1453
or_test
423
1453
and_test
424
1453
not
425
1453
expr
426
1454
~
509
1454
factor
510
1454
STRING
511
1454
shift_expr
512
1454
term
513
1454
NUMBER
514
1454
{
515
1454
atom_expr
516
1454
[
517
1454
-
518
1454
None
519
1454
(
520
1454
atom
521
1454
arith_expr
522
1454
False
523
1454
+
524
1454
NAME
526
1454
power
527
1454
True
528
1454
xor_expr
529
1454
comparison
530
1454
and_expr
531
1454
not_test
532
1454
not
533
1454
expr
534
1454
and_test
535
1454
or_test
1884
1455
NEWLINE
yield_expr -> yield yield_arg
1456
~
397
1456
factor
398
1456
STRING
399
1456
shift_expr
400
1456
term
401
1456
NUMBER
402
1456
{
403
1456
atom_expr
404
1456
[
405
1456
-
406
1456
None
407
1456
(
408
1456
arith_expr
409
1456
atom
410
1456
+
411
1456
and_expr
412
1456
NAME
413
1456
power
414
1456
True
415
1456
comparison
416
1456
lambda
417
1456
xor_expr
418
1456
False
419
1456
test
1885
1456
not_test
420
1456
lambdef
421
1456
or_test
423
1456
and_test
424
1456
not
425
1456
expr
426
1457
NEWLINE
yield_arg -> test_list
1458
NEWLINE
namelist -> NAME , namelist
1459
<=
term -> factor / term
1459
!=
term -> factor / term
1459
and
term -> factor / term
1459
or
term -> factor / term
1459
|
term -> factor / term
1459
^
term -> factor / term
1459
NEWLINE
term -> factor / term
1459
>>
term -> factor / term
1459
==
term -> factor / term
1459
>
term -> factor / term
1459
if
term -> factor / term
1459
&
term -> factor / term
1459
<<
term -> factor / term
1459
+
term -> factor / term
1459
-
term -> factor / term
1459
not
term -> factor / term
1459
in
term -> factor / term
1459
<
term -> factor / term
1459
is
term -> factor / term
1459
>=
term -> factor / term
1460
is
term -> factor @ term
1460
and
term -> factor @ term
1460
>
term -> factor @ term
1460
not
term -> factor @ term
1460
in
term -> factor @ term
1460
==
term -> factor @ term
1460
<
term -> factor @ term
1460
or
term -> factor @ term
1460
!=
term -> factor @ term
1460
<<
term -> factor @ term
1460
NEWLINE
term -> factor @ term
1460
<=
term -> factor @ term
1460
if
term -> factor @ term
1460
|
term -> factor @ term
1460
+
term -> factor @ term
1460
&
term -> factor @ term
1460
-
term -> factor @ term
1460
>=
term -> factor @ term
1460
>>
term -> factor @ term
1460
^
term -> factor @ term
1461
NEWLINE
term -> factor % term
1461
>
term -> factor % term
1461
!=
term -> factor % term
1461
&
term -> factor % term
1461
>=
term -> factor % term
1461
or
term -> factor % term
1461
==
term -> factor % term
1461
^
term -> factor % term
1461
in
term -> factor % term
1461
|
term -> factor % term
1461
and
term -> factor % term
1461
if
term -> factor % term
1461
not
term -> factor % term
1461
is
term -> factor % term
1461
<
term -> factor % term
1461
>>
term -> factor % term
1461
-
term -> factor % term
1461
<=
term -> factor % term
1461
<<
term -> factor % term
1461
+
term -> factor % term
1462
+
term -> factor // term
1462
==
term -> factor // term
1462
<<
term -> factor // term
1462
<
term -> factor // term
1462
if
term -> factor // term
1462
in
term -> factor // term
1462
!=
term -> factor // term
1462
>
term -> factor // term
1462
not
term -> factor // term
1462
NEWLINE
term -> factor // term
1462
>=
term -> factor // term
1462
and
term -> factor // term
1462
is
term -> factor // term
1462
-
term -> factor // term
1462
&
term -> factor // term
1462
|
term -> factor // term
1462
^
term -> factor // term
1462
<=
term -> factor // term
1462
or
term -> factor // term
1462
>>
term -> factor // term
1463
&
term -> factor * term
1463
-
term -> factor * term
1463
in
term -> factor * term
1463
or
term -> factor * term
1463
<=
term -> factor * term
1463
|
term -> factor * term
1463
and
term -> factor * term
1463
not
term -> factor * term
1463
<<
term -> factor * term
1463
==
term -> factor * term
1463
if
term -> factor * term
1463
>
term -> factor * term
1463
>>
term -> factor * term
1463
<
term -> factor * term
1463
!=
term -> factor * term
1463
NEWLINE
term -> factor * term
1463
>=
term -> factor * term
1463
^
term -> factor * term
1463
+
term -> factor * term
1463
is
term -> factor * term
1464
|
and_expr -> shift_expr & and_expr
1464
!=
and_expr -> shift_expr & and_expr
1464
and
and_expr -> shift_expr & and_expr
1464
>=
and_expr -> shift_expr & and_expr
1464
not
and_expr -> shift_expr & and_expr
1464
in
and_expr -> shift_expr & and_expr
1464
NEWLINE
and_expr -> shift_expr & and_expr
1464
is
and_expr -> shift_expr & and_expr
1464
or
and_expr -> shift_expr & and_expr
1464
==
and_expr -> shift_expr & and_expr
1464
^
and_expr -> shift_expr & and_expr
1464
>
and_expr -> shift_expr & and_expr
1464
<
and_expr -> shift_expr & and_expr
1464
if
and_expr -> shift_expr & and_expr
1464
<=
and_expr -> shift_expr & and_expr
1465
not
arith_expr -> term + arith_expr
1465
>>
arith_expr -> term + arith_expr
1465
^
arith_expr -> term + arith_expr
1465
NEWLINE
arith_expr -> term + arith_expr
1465
in
arith_expr -> term + arith_expr
1465
>=
arith_expr -> term + arith_expr
1465
<
arith_expr -> term + arith_expr
1465
<=
arith_expr -> term + arith_expr
1465
>
arith_expr -> term + arith_expr
1465
|
arith_expr -> term + arith_expr
1465
==
arith_expr -> term + arith_expr
1465
and
arith_expr -> term + arith_expr
1465
if
arith_expr -> term + arith_expr
1465
is
arith_expr -> term + arith_expr
1465
&
arith_expr -> term + arith_expr
1465
!=
arith_expr -> term + arith_expr
1465
or
arith_expr -> term + arith_expr
1465
<<
arith_expr -> term + arith_expr
1466
if
arith_expr -> term - arith_expr
1466
|
arith_expr -> term - arith_expr
1466
and
arith_expr -> term - arith_expr
1466
or
arith_expr -> term - arith_expr
1466
&
arith_expr -> term - arith_expr
1466
<
arith_expr -> term - arith_expr
1466
^
arith_expr -> term - arith_expr
1466
in
arith_expr -> term - arith_expr
1466
<=
arith_expr -> term - arith_expr
1466
not
arith_expr -> term - arith_expr
1466
>=
arith_expr -> term - arith_expr
1466
>
arith_expr -> term - arith_expr
1466
!=
arith_expr -> term - arith_expr
1466
<<
arith_expr -> term - arith_expr
1466
==
arith_expr -> term - arith_expr
1466
is
arith_expr -> term - arith_expr
1466
>>
arith_expr -> term - arith_expr
1466
NEWLINE
arith_expr -> term - arith_expr
1467
@
power -> atom_expr ** factor
1467
==
power -> atom_expr ** factor
1467
&
power -> atom_expr ** factor
1467
-
power -> atom_expr ** factor
1467
>
power -> atom_expr ** factor
1467
NEWLINE
power -> atom_expr ** factor
1467
and
power -> atom_expr ** factor
1467
|
power -> atom_expr ** factor
1467
<=
power -> atom_expr ** factor
1467
%
power -> atom_expr ** factor
1467
or
power -> atom_expr ** factor
1467
*
power -> atom_expr ** factor
1467
not
power -> atom_expr ** factor
1467
in
power -> atom_expr ** factor
1467
<<
power -> atom_expr ** factor
1467
//
power -> atom_expr ** factor
1467
/
power -> atom_expr ** factor
1467
>>
power -> atom_expr ** factor
1467
^
power -> atom_expr ** factor
1467
if
power -> atom_expr ** factor
1467
!=
power -> atom_expr ** factor
1467
is
power -> atom_expr ** factor
1467
<
power -> atom_expr ** factor
1467
+
power -> atom_expr ** factor
1467
>=
power -> atom_expr ** factor
1468
/
atom -> [ test_list_comp ]
1468
*
atom -> [ test_list_comp ]
1468
or
atom -> [ test_list_comp ]
1468
|
atom -> [ test_list_comp ]
1468
==
atom -> [ test_list_comp ]
1468
is
atom -> [ test_list_comp ]
1468
-
atom -> [ test_list_comp ]
1468
**
atom -> [ test_list_comp ]
1468
&
atom -> [ test_list_comp ]
1468
(
atom -> [ test_list_comp ]
1468
<
atom -> [ test_list_comp ]
1468
@
atom -> [ test_list_comp ]
1468
//
atom -> [ test_list_comp ]
1468
>
atom -> [ test_list_comp ]
1468
if
atom -> [ test_list_comp ]
1468
in
atom -> [ test_list_comp ]
1468
^
atom -> [ test_list_comp ]
1468
<<
atom -> [ test_list_comp ]
1468
[
atom -> [ test_list_comp ]
1468
!=
atom -> [ test_list_comp ]
1468
<=
atom -> [ test_list_comp ]
1468
and
atom -> [ test_list_comp ]
1468
%
atom -> [ test_list_comp ]
1468
not
atom -> [ test_list_comp ]
1468
+
atom -> [ test_list_comp ]
1468
>=
atom -> [ test_list_comp ]
1468
>>
atom -> [ test_list_comp ]
1468
.
atom -> [ test_list_comp ]
1468
NEWLINE
atom -> [ test_list_comp ]
1469
@
atom -> ( test_list_comp )
1469
>>
atom -> ( test_list_comp )
1469
<<
atom -> ( test_list_comp )
1469
==
atom -> ( test_list_comp )
1469
is
atom -> ( test_list_comp )
1469
or
atom -> ( test_list_comp )
1469
<=
atom -> ( test_list_comp )
1469
[
atom -> ( test_list_comp )
1469
%
atom -> ( test_list_comp )
1469
if
atom -> ( test_list_comp )
1469
^
atom -> ( test_list_comp )
1469
<
atom -> ( test_list_comp )
1469
and
atom -> ( test_list_comp )
1469
+
atom -> ( test_list_comp )
1469
&
atom -> ( test_list_comp )
1469
!=
atom -> ( test_list_comp )
1469
in
atom -> ( test_list_comp )
1469
**
atom -> ( test_list_comp )
1469
not
atom -> ( test_list_comp )
1469
-
atom -> ( test_list_comp )
1469
(
atom -> ( test_list_comp )
1469
*
atom -> ( test_list_comp )
1469
|
atom -> ( test_list_comp )
1469
NEWLINE
atom -> ( test_list_comp )
1469
//
atom -> ( test_list_comp )
1469
>
atom -> ( test_list_comp )
1469
>=
atom -> ( test_list_comp )
1469
.
atom -> ( test_list_comp )
1469
/
atom -> ( test_list_comp )
1470
>=
shift_expr -> arith_expr >> shift_expr
1470
not
shift_expr -> arith_expr >> shift_expr
1470
>
shift_expr -> arith_expr >> shift_expr
1470
^
shift_expr -> arith_expr >> shift_expr
1470
is
shift_expr -> arith_expr >> shift_expr
1470
&
shift_expr -> arith_expr >> shift_expr
1470
if
shift_expr -> arith_expr >> shift_expr
1470
!=
shift_expr -> arith_expr >> shift_expr
1470
<=
shift_expr -> arith_expr >> shift_expr
1470
and
shift_expr -> arith_expr >> shift_expr
1470
==
shift_expr -> arith_expr >> shift_expr
1470
or
shift_expr -> arith_expr >> shift_expr
1470
in
shift_expr -> arith_expr >> shift_expr
1470
NEWLINE
shift_expr -> arith_expr >> shift_expr
1470
|
shift_expr -> arith_expr >> shift_expr
1470
<
shift_expr -> arith_expr >> shift_expr
1471
>=
shift_expr -> arith_expr << shift_expr
1471
in
shift_expr -> arith_expr << shift_expr
1471
>
shift_expr -> arith_expr << shift_expr
1471
|
shift_expr -> arith_expr << shift_expr
1471
!=
shift_expr -> arith_expr << shift_expr
1471
<=
shift_expr -> arith_expr << shift_expr
1471
&
shift_expr -> arith_expr << shift_expr
1471
not
shift_expr -> arith_expr << shift_expr
1471
^
shift_expr -> arith_expr << shift_expr
1471
<
shift_expr -> arith_expr << shift_expr
1471
==
shift_expr -> arith_expr << shift_expr
1471
if
shift_expr -> arith_expr << shift_expr
1471
NEWLINE
shift_expr -> arith_expr << shift_expr
1471
or
shift_expr -> arith_expr << shift_expr
1471
is
shift_expr -> arith_expr << shift_expr
1471
and
shift_expr -> arith_expr << shift_expr
1472
]
1886
1473
/
trailer -> ( )
1473
[
trailer -> ( )
1473
(
trailer -> ( )
1473
|
trailer -> ( )
1473
<=
trailer -> ( )
1473
in
trailer -> ( )
1473
not
trailer -> ( )
1473
>>
trailer -> ( )
1473
^
trailer -> ( )
1473
.
trailer -> ( )
1473
NEWLINE
trailer -> ( )
1473
**
trailer -> ( )
1473
if
trailer -> ( )
1473
+
trailer -> ( )
1473
is
trailer -> ( )
1473
<
trailer -> ( )
1473
>
trailer -> ( )
1473
==
trailer -> ( )
1473
//
trailer -> ( )
1473
<<
trailer -> ( )
1473
*
trailer -> ( )
1473
-
trailer -> ( )
1473
>=
trailer -> ( )
1473
%
trailer -> ( )
1473
and
trailer -> ( )
1473
@
trailer -> ( )
1473
&
trailer -> ( )
1473
!=
trailer -> ( )
1473
or
trailer -> ( )
1474
)
1887
1475
is
trailer_expr -> trailer trailer_expr
1475
!=
trailer_expr -> trailer trailer_expr
1475
<<
trailer_expr -> trailer trailer_expr
1475
and
trailer_expr -> trailer trailer_expr
1475
&
trailer_expr -> trailer trailer_expr
1475
//
trailer_expr -> trailer trailer_expr
1475
|
trailer_expr -> trailer trailer_expr
1475
==
trailer_expr -> trailer trailer_expr
1475
<
trailer_expr -> trailer trailer_expr
1475
or
trailer_expr -> trailer trailer_expr
1475
^
trailer_expr -> trailer trailer_expr
1475
<=
trailer_expr -> trailer trailer_expr
1475
@
trailer_expr -> trailer trailer_expr
1475
not
trailer_expr -> trailer trailer_expr
1475
in
trailer_expr -> trailer trailer_expr
1475
*
trailer_expr -> trailer trailer_expr
1475
+
trailer_expr -> trailer trailer_expr
1475
if
trailer_expr -> trailer trailer_expr
1475
**
trailer_expr -> trailer trailer_expr
1475
>>
trailer_expr -> trailer trailer_expr
1475
>=
trailer_expr -> trailer trailer_expr
1475
NEWLINE
trailer_expr -> trailer trailer_expr
1475
%
trailer_expr -> trailer trailer_expr
1475
-
trailer_expr -> trailer trailer_expr
1475
>
trailer_expr -> trailer trailer_expr
1475
/
trailer_expr -> trailer trailer_expr
1476
<=
trailer -> . NAME
1476
if
trailer -> . NAME
1476
<
trailer -> . NAME
1476
%
trailer -> . NAME
1476
.
trailer -> . NAME
1476
//
trailer -> . NAME
1476
|
trailer -> . NAME
1476
==
trailer -> . NAME
1476
>=
trailer -> . NAME
1476
[
trailer -> . NAME
1476
^
trailer -> . NAME
1476
<<
trailer -> . NAME
1476
in
trailer -> . NAME
1476
&
trailer -> . NAME
1476
or
trailer -> . NAME
1476
NEWLINE
trailer -> . NAME
1476
*
trailer -> . NAME
1476
(
trailer -> . NAME
1476
and
trailer -> . NAME
1476
-
trailer -> . NAME
1476
+
trailer -> . NAME
1476
!=
trailer -> . NAME
1476
not
trailer -> . NAME
1476
**
trailer -> . NAME
1476
>>
trailer -> . NAME
1476
@
trailer -> . NAME
1476
/
trailer -> . NAME
1476
is
trailer -> . NAME
1476
>
trailer -> . NAME
1477
==
xor_expr -> and_expr ^ xor_expr
1477
!=
xor_expr -> and_expr ^ xor_expr
1477
>
xor_expr -> and_expr ^ xor_expr
1477
not
xor_expr -> and_expr ^ xor_expr
1477
if
xor_expr -> and_expr ^ xor_expr
1477
NEWLINE
xor_expr -> and_expr ^ xor_expr
1477
is
xor_expr -> and_expr ^ xor_expr
1477
<=
xor_expr -> and_expr ^ xor_expr
1477
|
xor_expr -> and_expr ^ xor_expr
1477
>=
xor_expr -> and_expr ^ xor_expr
1477
and
xor_expr -> and_expr ^ xor_expr
1477
in
xor_expr -> and_expr ^ xor_expr
1477
<
xor_expr -> and_expr ^ xor_expr
1477
or
xor_expr -> and_expr ^ xor_expr
1478
NEWLINE
lambdef -> lambda : test
1479
~
397
1479
factor
398
1479
STRING
399
1479
shift_expr
400
1479
term
401
1479
NUMBER
402
1479
{
403
1479
atom_expr
404
1479
[
405
1479
-
406
1479
None
407
1479
(
408
1479
arith_expr
409
1479
atom
410
1479
+
411
1479
and_expr
412
1479
NAME
413
1479
power
414
1479
True
415
1479
comparison
416
1479
lambda
417
1479
xor_expr
418
1479
False
419
1479
not_test
420
1479
lambdef
421
1479
test
1888
1479
or_test
423
1479
and_test
424
1479
not
425
1479
expr
426
1480
and
expr -> xor_expr | expr
1480
in
expr -> xor_expr | expr
1480
>=
expr -> xor_expr | expr
1480
is
expr -> xor_expr | expr
1480
==
expr -> xor_expr | expr
1480
or
expr -> xor_expr | expr
1480
<
expr -> xor_expr | expr
1480
NEWLINE
expr -> xor_expr | expr
1480
if
expr -> xor_expr | expr
1480
not
expr -> xor_expr | expr
1480
!=
expr -> xor_expr | expr
1480
<=
expr -> xor_expr | expr
1480
>
expr -> xor_expr | expr
1481
if
and_test -> not_test and and_test
1481
or
and_test -> not_test and and_test
1481
NEWLINE
and_test -> not_test and and_test
1482
else
1889
1483
if
or_test -> and_test or or_test
1483
NEWLINE
or_test -> and_test or or_test
1484
and
comparison -> expr comp_op comparison
1484
NEWLINE
comparison -> expr comp_op comparison
1484
if
comparison -> expr comp_op comparison
1484
or
comparison -> expr comp_op comparison
1485
,
trailer -> [ subscriptlist ]
1485
//
trailer -> [ subscriptlist ]
1485
/
trailer -> [ subscriptlist ]
1485
^
trailer -> [ subscriptlist ]
1485
)
trailer -> [ subscriptlist ]
1485
.
trailer -> [ subscriptlist ]
1485
<
trailer -> [ subscriptlist ]
1485
<<
trailer -> [ subscriptlist ]
1485
in
trailer -> [ subscriptlist ]
1485
@
trailer -> [ subscriptlist ]
1485
>
trailer -> [ subscriptlist ]
1485
for
trailer -> [ subscriptlist ]
1485
*
trailer -> [ subscriptlist ]
1485
and
trailer -> [ subscriptlist ]
1485
+
trailer -> [ subscriptlist ]
1485
(
trailer -> [ subscriptlist ]
1485
is
trailer -> [ subscriptlist ]
1485
or
trailer -> [ subscriptlist ]
1485
<=
trailer -> [ subscriptlist ]
1485
if
trailer -> [ subscriptlist ]
1485
|
trailer -> [ subscriptlist ]
1485
==
trailer -> [ subscriptlist ]
1485
not
trailer -> [ subscriptlist ]
1485
-
trailer -> [ subscriptlist ]
1485
!=
trailer -> [ subscriptlist ]
1485
&
trailer -> [ subscriptlist ]
1485
[
trailer -> [ subscriptlist ]
1485
>>
trailer -> [ subscriptlist ]
1485
%
trailer -> [ subscriptlist ]
1485
>=
trailer -> [ subscriptlist ]
1485
**
trailer -> [ subscriptlist ]
1486
>=
trailer -> ( arglist )
1486
//
trailer -> ( arglist )
1486
%
trailer -> ( arglist )
1486
in
trailer -> ( arglist )
1486
&
trailer -> ( arglist )
1486
for
trailer -> ( arglist )
1486
,
trailer -> ( arglist )
1486
>>
trailer -> ( arglist )
1486
-
trailer -> ( arglist )
1486
^
trailer -> ( arglist )
1486
>
trailer -> ( arglist )
1486
<<
trailer -> ( arglist )
1486
==
trailer -> ( arglist )
1486
<=
trailer -> ( arglist )
1486
*
trailer -> ( arglist )
1486
and
trailer -> ( arglist )
1486
/
trailer -> ( arglist )
1486
[
trailer -> ( arglist )
1486
(
trailer -> ( arglist )
1486
<
trailer -> ( arglist )
1486
|
trailer -> ( arglist )
1486
+
trailer -> ( arglist )
1486
not
trailer -> ( arglist )
1486
or
trailer -> ( arglist )
1486
)
trailer -> ( arglist )
1486
is
trailer -> ( arglist )
1486
.
trailer -> ( arglist )
1486
!=
trailer -> ( arglist )
1486
@
trailer -> ( arglist )
1486
**
trailer -> ( arglist )
1486
if
trailer -> ( arglist )
1487
~
92
1487
factor
93
1487
STRING
94
1487
shift_expr
95
1487
arith_expr
96
1487
term
97
1487
NUMBER
98
1487
and_expr
99
1487
{
100
1487
atom_expr
101
1487
[
102
1487
-
103
1487
None
105
1487
(
106
1487
atom
107
1487
+
109
1487
NAME
110
1487
power
111
1487
True
113
1487
test
1890
1487
comparison
114
1487
xor_expr
115
1487
lambdef
116
1487
False
117
1487
not_test
118
1487
or_test
119
1487
lambda
121
1487
and_test
122
1487
not
123
1487
expr
124
1488
,
factor -> ~ factor
1488
<
factor -> ~ factor
1488
in
factor -> ~ factor
1488
==
factor -> ~ factor
1488
|
factor -> ~ factor
1488
)
factor -> ~ factor
1488
<<
factor -> ~ factor
1488
>
factor -> ~ factor
1488
not
factor -> ~ factor
1488
<=
factor -> ~ factor
1488
//
factor -> ~ factor
1488
>=
factor -> ~ factor
1488
>>
factor -> ~ factor
1488
-
factor -> ~ factor
1488
*
factor -> ~ factor
1488
/
factor -> ~ factor
1488
if
factor -> ~ factor
1488
^
factor -> ~ factor
1488
and
factor -> ~ factor
1488
is
factor -> ~ factor
1488
+
factor -> ~ factor
1488
or
factor -> ~ factor
1488
&
factor -> ~ factor
1488
!=
factor -> ~ factor
1488
%
factor -> ~ factor
1488
@
factor -> ~ factor
1489
~
948
1489
factor
949
1489
STRING
950
1489
term
1891
1489
NUMBER
954
1489
{
955
1489
[
957
1489
atom_expr
956
1489
-
958
1489
None
959
1489
(
960
1489
atom
961
1489
+
962
1489
NAME
964
1489
power
965
1489
True
966
1489
False
969
1490
~
948
1490
factor
949
1490
STRING
950
1490
NUMBER
954
1490
{
955
1490
[
957
1490
atom_expr
956
1490
-
958
1490
None
959
1490
(
960
1490
atom
961
1490
+
962
1490
NAME
964
1490
power
965
1490
True
966
1490
False
969
1490
term
1892
1491
~
948
1491
factor
949
1491
STRING
950
1491
NUMBER
954
1491
{
955
1491
term
1893
1491
[
957
1491
atom_expr
956
1491
-
958
1491
None
959
1491
(
960
1491
atom
961
1491
+
962
1491
NAME
964
1491
power
965
1491
True
966
1491
False
969
1492
~
948
1492
factor
949
1492
STRING
950
1492
NUMBER
954
1492
{
955
1492
[
957
1492
atom_expr
956
1492
-
958
1492
None
959
1492
(
960
1492
atom
961
1492
+
962
1492
term
1894
1492
NAME
964
1492
power
965
1492
True
966
1492
False
969
1493
~
948
1493
factor
949
1493
STRING
950
1493
NUMBER
954
1493
{
955
1493
[
957
1493
atom_expr
956
1493
-
958
1493
None
959
1493
(
960
1493
term
1895
1493
atom
961
1493
+
962
1493
NAME
964
1493
power
965
1493
True
966
1493
False
969
1494
~
948
1494
factor
949
1494
STRING
950
1494
shift_expr
951
1494
arith_expr
952
1494
term
953
1494
NUMBER
954
1494
{
955
1494
atom_expr
956
1494
[
957
1494
-
958
1494
None
959
1494
(
960
1494
atom
961
1494
+
962
1494
NAME
964
1494
power
965
1494
True
966
1494
False
969
1494
and_expr
1896
1495
~
948
1495
factor
949
1495
STRING
950
1495
arith_expr
952
1495
term
953
1495
NUMBER
954
1495
{
955
1495
[
957
1495
atom_expr
956
1495
-
958
1495
shift_expr
1897
1495
None
959
1495
(
960
1495
atom
961
1495
+
962
1495
NAME
964
1495
power
965
1495
True
966
1495
False
969
1496
~
948
1496
factor
949
1496
STRING
950
1496
arith_expr
952
1496
term
953
1496
NUMBER
954
1496
{
955
1496
[
957
1496
atom_expr
956
1496
-
958
1496
None
959
1496
(
960
1496
atom
961
1496
+
962
1496
shift_expr
1898
1496
NAME
964
1496
power
965
1496
True
966
1496
False
969
1497
~
948
1497
factor
949
1497
STRING
950
1497
arith_expr
1899
1497
term
953
1497
NUMBER
954
1497
{
955
1497
[
957
1497
atom_expr
956
1497
-
958
1497
None
959
1497
(
960
1497
atom
961
1497
+
962
1497
NAME
964
1497
power
965
1497
True
966
1497
False
969
1498
~
948
1498
factor
949
1498
STRING
950
1498
term
953
1498
arith_expr
1900
1498
NUMBER
954
1498
{
955
1498
[
957
1498
atom_expr
956
1498
-
958
1498
None
959
1498
(
960
1498
atom
961
1498
+
962
1498
NAME
964
1498
power
965
1498
True
966
1498
False
969
1499
//
atom -> { }
1499
)
atom -> { }
1499
[
atom -> { }
1499
|
atom -> { }
1499
>
atom -> { }
1499
>=
atom -> { }
1499
==
atom -> { }
1499
&
atom -> { }
1499
not
atom -> { }
1499
**
atom -> { }
1499
in
atom -> { }
1499
,
atom -> { }
1499
or
atom -> { }
1499
<
atom -> { }
1499
!=
atom -> { }
1499
+
atom -> { }
1499
<<
atom -> { }
1499
^
atom -> { }
1499
<=
atom -> { }
1499
if
atom -> { }
1499
/
atom -> { }
1499
is
atom -> { }
1499
-
atom -> { }
1499
>>
atom -> { }
1499
%
atom -> { }
1499
.
atom -> { }
1499
(
atom -> { }
1499
and
atom -> { }
1499
*
atom -> { }
1499
@
atom -> { }
1500
~
948
1500
STRING
950
1500
NUMBER
954
1500
factor
1901
1500
{
955
1500
[
957
1500
atom_expr
956
1500
None
959
1500
-
958
1500
(
960
1500
atom
961
1500
+
962
1500
NAME
964
1500
power
965
1500
True
966
1500
False
969
1501
]
1902
1502
==
atom -> [ ]
1502
%
atom -> [ ]
1502
**
atom -> [ ]
1502
.
atom -> [ ]
1502
<<
atom -> [ ]
1502
not
atom -> [ ]
1502
/
atom -> [ ]
1502
*
atom -> [ ]
1502
if
atom -> [ ]
1502
!=
atom -> [ ]
1502
<=
atom -> [ ]
1502
@
atom -> [ ]
1502
-
atom -> [ ]
1502
>>
atom -> [ ]
1502
^
atom -> [ ]
1502
|
atom -> [ ]
1502
,
atom -> [ ]
1502
<
atom -> [ ]
1502
[
atom -> [ ]
1502
is
atom -> [ ]
1502
in
atom -> [ ]
1502
>
atom -> [ ]
1502
+
atom -> [ ]
1502
>=
atom -> [ ]
1502
and
atom -> [ ]
1502
or
atom -> [ ]
1502
)
atom -> [ ]
1502
&
atom -> [ ]
1502
(
atom -> [ ]
1502
//
atom -> [ ]
1503
if
factor -> - factor
1503
/
factor -> - factor
1503
,
factor -> - factor
1503
not
factor -> - factor
1503
<
factor -> - factor
1503
or
factor -> - factor
1503
//
factor -> - factor
1503
!=
factor -> - factor
1503
%
factor -> - factor
1503
|
factor -> - factor
1503
>
factor -> - factor
1503
+
factor -> - factor
1503
-
factor -> - factor
1503
^
factor -> - factor
1503
in
factor -> - factor
1503
<<
factor -> - factor
1503
&
factor -> - factor
1503
<=
factor -> - factor
1503
==
factor -> - factor
1503
and
factor -> - factor
1503
@
factor -> - factor
1503
>=
factor -> - factor
1503
is
factor -> - factor
1503
>>
factor -> - factor
1503
*
factor -> - factor
1503
)
factor -> - factor
1504
-
atom -> ( )
1504
==
atom -> ( )
1504
/
atom -> ( )
1504
<=
atom -> ( )
1504
(
atom -> ( )
1504
&
atom -> ( )
1504
[
atom -> ( )
1504
,
atom -> ( )
1504
^
atom -> ( )
1504
or
atom -> ( )
1504
+
atom -> ( )
1504
>>
atom -> ( )
1504
)
atom -> ( )
1504
is
atom -> ( )
1504
*
atom -> ( )
1504
if
atom -> ( )
1504
and
atom -> ( )
1504
>=
atom -> ( )
1504
>
atom -> ( )
1504
@
atom -> ( )
1504
in
atom -> ( )
1504
not
atom -> ( )
1504
<
atom -> ( )
1504
.
atom -> ( )
1504
//
atom -> ( )
1504
%
atom -> ( )
1504
<<
atom -> ( )
1504
|
atom -> ( )
1504
**
atom -> ( )
1504
!=
atom -> ( )
1505
)
1903
1506
~
544
1506
factor
545
1506
STRING
546
1506
shift_expr
547
1506
expr
548
1506
arith_expr
549
1506
term
550
1506
atom_expr
551
1506
NUMBER
552
1506
subscript
553
1506
{
554
1506
[
555
1506
-
556
1506
None
557
1506
+
558
1506
(
559
1506
subscriptlist
1904
1506
atom
561
1506
and_expr
562
1506
NAME
563
1506
power
564
1506
True
565
1506
comparison
566
1506
xor_expr
567
1506
lambda
568
1506
False
569
1506
not_test
570
1506
and_test
571
1506
test
572
1506
or_test
573
1506
not
574
1506
:
maybe_test -> 
1506
maybe_test
575
1506
lambdef
576
1507
arglist
1905
1507
)
1906
1507
~
579
1507
factor
580
1507
STRING
581
1507
shift_expr
582
1507
arith_expr
583
1507
term
584
1507
NUMBER
585
1507
and_expr
586
1507
{
587
1507
atom_expr
589
1507
[
590
1507
-
591
1507
None
592
1507
(
593
1507
atom
594
1507
+
595
1507
not_test
596
1507
test
597
1507
NAME
598
1507
power
599
1507
True
600
1507
comparison
601
1507
xor_expr
602
1507
lambdef
603
1507
False
604
1507
argument
605
1507
and_test
606
1507
lambda
607
1507
or_test
608
1507
expr
609
1507
not
610
1507
**
611
1507
*
612
1508
[
1506
1508
(
1507
1508
//
trailer_expr -> 
1508
trailer
1508
1508
<<
trailer_expr -> 
1508
*
trailer_expr -> 
1508
in
trailer_expr -> 
1508
&
trailer_expr -> 
1508
trailer_expr
1907
1508
and
trailer_expr -> 
1508
.
1510
1508
<=
trailer_expr -> 
1508
,
trailer_expr -> 
1508
|
trailer_expr -> 
1508
or
trailer_expr -> 
1508
>=
trailer_expr -> 
1508
+
trailer_expr -> 
1508
**
trailer_expr -> 
1508
>>
trailer_expr -> 
1508
!=
trailer_expr -> 
1508
-
trailer_expr -> 
1508
/
trailer_expr -> 
1508
%
trailer_expr -> 
1508
is
trailer_expr -> 
1508
<
trailer_expr -> 
1508
>
trailer_expr -> 
1508
if
trailer_expr -> 
1508
^
trailer_expr -> 
1508
==
trailer_expr -> 
1508
@
trailer_expr -> 
1508
)
trailer_expr -> 
1508
not
trailer_expr -> 
1509
<=
atom_expr -> atom trailer_expr
1509
or
atom_expr -> atom trailer_expr
1509
,
atom_expr -> atom trailer_expr
1509
*
atom_expr -> atom trailer_expr
1509
>=
atom_expr -> atom trailer_expr
1509
**
atom_expr -> atom trailer_expr
1509
&
atom_expr -> atom trailer_expr
1509
%
atom_expr -> atom trailer_expr
1509
if
atom_expr -> atom trailer_expr
1509
+
atom_expr -> atom trailer_expr
1509
//
atom_expr -> atom trailer_expr
1509
is
atom_expr -> atom trailer_expr
1509
!=
atom_expr -> atom trailer_expr
1509
|
atom_expr -> atom trailer_expr
1509
<
atom_expr -> atom trailer_expr
1509
@
atom_expr -> atom trailer_expr
1509
not
atom_expr -> atom trailer_expr
1509
-
atom_expr -> atom trailer_expr
1509
in
atom_expr -> atom trailer_expr
1509
/
atom_expr -> atom trailer_expr
1509
^
atom_expr -> atom trailer_expr
1509
>
atom_expr -> atom trailer_expr
1509
==
atom_expr -> atom trailer_expr
1509
<<
atom_expr -> atom trailer_expr
1509
>>
atom_expr -> atom trailer_expr
1509
and
atom_expr -> atom trailer_expr
1509
)
atom_expr -> atom trailer_expr
1510
NAME
1908
1511
<
factor -> + factor
1511
,
factor -> + factor
1511
in
factor -> + factor
1511
|
factor -> + factor
1511
==
factor -> + factor
1511
>
factor -> + factor
1511
-
factor -> + factor
1511
and
factor -> + factor
1511
*
factor -> + factor
1511
if
factor -> + factor
1511
%
factor -> + factor
1511
@
factor -> + factor
1511
is
factor -> + factor
1511
//
factor -> + factor
1511
&
factor -> + factor
1511
)
factor -> + factor
1511
^
factor -> + factor
1511
>=
factor -> + factor
1511
not
factor -> + factor
1511
/
factor -> + factor
1511
or
factor -> + factor
1511
!=
factor -> + factor
1511
<<
factor -> + factor
1511
>>
factor -> + factor
1511
<=
factor -> + factor
1511
+
factor -> + factor
1512
~
948
1512
factor
949
1512
STRING
950
1512
shift_expr
951
1512
arith_expr
952
1512
term
953
1512
NUMBER
954
1512
{
955
1512
atom_expr
956
1512
[
957
1512
-
958
1512
None
959
1512
(
960
1512
atom
961
1512
+
962
1512
expr
1909
1512
NAME
964
1512
power
965
1512
True
966
1512
xor_expr
968
1512
False
969
1512
and_expr
970
1513
~
948
1513
factor
949
1513
STRING
950
1513
shift_expr
951
1513
arith_expr
952
1513
term
953
1513
NUMBER
954
1513
{
955
1513
atom_expr
956
1513
[
957
1513
xor_expr
1910
1513
-
958
1513
None
959
1513
(
960
1513
atom
961
1513
+
962
1513
NAME
964
1513
power
965
1513
True
966
1513
False
969
1513
and_expr
970
1514
~
948
1514
factor
949
1514
STRING
950
1514
shift_expr
951
1514
arith_expr
952
1514
term
953
1514
NUMBER
954
1514
{
955
1514
atom_expr
956
1514
[
957
1514
-
958
1514
None
959
1514
(
960
1514
atom
961
1514
+
962
1514
NAME
964
1514
power
965
1514
True
966
1514
and_test
1911
1514
comparison
967
1514
xor_expr
968
1514
False
969
1514
and_expr
970
1514
not_test
971
1514
not
976
1514
expr
977
1515
~
948
1515
factor
949
1515
STRING
950
1515
shift_expr
951
1515
arith_expr
952
1515
term
953
1515
NUMBER
954
1515
{
955
1515
atom_expr
956
1515
[
957
1515
-
958
1515
None
959
1515
(
960
1515
atom
961
1515
+
962
1515
NAME
964
1515
power
965
1515
True
966
1515
comparison
967
1515
xor_expr
968
1515
False
969
1515
and_expr
970
1515
not_test
971
1515
lambdef
972
1515
lambda
973
1515
or_test
974
1515
and_test
975
1515
not
976
1515
test
1912
1515
expr
977
1516
:
1913
1517
~
509
1517
factor
510
1517
STRING
511
1517
shift_expr
512
1517
term
513
1517
NUMBER
514
1517
{
515
1517
atom_expr
516
1517
[
517
1517
-
518
1517
None
519
1517
(
520
1517
atom
521
1517
arith_expr
522
1517
False
523
1517
+
524
1517
NAME
526
1517
power
527
1517
True
528
1517
xor_expr
529
1517
comparison
530
1517
and_expr
531
1517
not_test
532
1517
or_test
1914
1517
not
533
1517
expr
534
1517
and_test
535
1518
or_test
1915
1518
factor
949
1518
~
948
1518
shift_expr
951
1518
STRING
950
1518
arith_expr
952
1518
term
953
1518
NUMBER
954
1518
{
955
1518
atom_expr
956
1518
[
957
1518
-
958
1518
None
959
1518
(
960
1518
atom
961
1518
+
962
1518
NAME
964
1518
power
965
1518
True
966
1518
comparison
967
1518
xor_expr
968
1518
False
969
1518
and_expr
970
1518
not_test
971
1518
and_test
975
1518
not
976
1518
expr
977
1519
)
not_test -> not not_test
1519
,
not_test -> not not_test
1519
if
not_test -> not not_test
1519
and
not_test -> not not_test
1519
or
not_test -> not not_test
1520
~
948
1520
factor
949
1520
STRING
950
1520
shift_expr
951
1520
arith_expr
952
1520
term
953
1520
NUMBER
954
1520
{
955
1520
atom_expr
956
1520
[
957
1520
-
958
1520
None
959
1520
(
960
1520
atom
961
1520
+
962
1520
NAME
964
1520
power
965
1520
True
966
1520
xor_expr
968
1520
False
969
1520
and_expr
970
1520
comparison
1916
1520
expr
977
1521
~
1917
1521
factor
1918
1521
STRING
1919
1521
shift_expr
1920
1521
term
1921
1521
NUMBER
1922
1521
and_expr
1923
1521
{
1924
1521
atom_expr
1925
1521
[
1926
1521
-
1927
1521
None
1928
1521
(
1929
1521
arith_expr
1930
1521
atom
1931
1521
+
1932
1521
NAME
1933
1521
power
1934
1521
True
1935
1521
comparison
1936
1521
xor_expr
1937
1521
False
1938
1521
not_test
1939
1521
and_test
1940
1521
not
1941
1521
expr
1942
1521
or_test
1943
1522
,
lambdef -> lambda varargslist : test
1522
)
lambdef -> lambda varargslist : test
1522
for
lambdef -> lambda varargslist : test
1523
confbody
1944
1523
NAME
1945
1524
~
simple_stmt -> small_stmt NEWLINE
1524
begsim
simple_stmt -> small_stmt NEWLINE
1524
endsim
simple_stmt -> small_stmt NEWLINE
1524
if
simple_stmt -> small_stmt NEWLINE
1524
break
simple_stmt -> small_stmt NEWLINE
1524
False
simple_stmt -> small_stmt NEWLINE
1524
def
simple_stmt -> small_stmt NEWLINE
1524
STRING
simple_stmt -> small_stmt NEWLINE
1524
else
simple_stmt -> small_stmt NEWLINE
1524
assert
simple_stmt -> small_stmt NEWLINE
1524
lambda
simple_stmt -> small_stmt NEWLINE
1524
yield
simple_stmt -> small_stmt NEWLINE
1524
True
simple_stmt -> small_stmt NEWLINE
1524
+
simple_stmt -> small_stmt NEWLINE
1524
try
simple_stmt -> small_stmt NEWLINE
1524
for
simple_stmt -> small_stmt NEWLINE
1524
conf
simple_stmt -> small_stmt NEWLINE
1524
nonlocal
simple_stmt -> small_stmt NEWLINE
1524
continue
simple_stmt -> small_stmt NEWLINE
1524
-
simple_stmt -> small_stmt NEWLINE
1524
resetstats
simple_stmt -> small_stmt NEWLINE
1524
raise
simple_stmt -> small_stmt NEWLINE
1524
(
simple_stmt -> small_stmt NEWLINE
1524
None
simple_stmt -> small_stmt NEWLINE
1524
NEWLINE
simple_stmt -> small_stmt NEWLINE
1524
while
simple_stmt -> small_stmt NEWLINE
1524
not
simple_stmt -> small_stmt NEWLINE
1524
$
simple_stmt -> small_stmt NEWLINE
1524
NAME
simple_stmt -> small_stmt NEWLINE
1524
del
simple_stmt -> small_stmt NEWLINE
1524
with
simple_stmt -> small_stmt NEWLINE
1524
global
simple_stmt -> small_stmt NEWLINE
1524
@
simple_stmt -> small_stmt NEWLINE
1524
class
simple_stmt -> small_stmt NEWLINE
1524
{
simple_stmt -> small_stmt NEWLINE
1524
NUMBER
simple_stmt -> small_stmt NEWLINE
1524
[
simple_stmt -> small_stmt NEWLINE
1524
pass
simple_stmt -> small_stmt NEWLINE
1524
return
simple_stmt -> small_stmt NEWLINE
1525
:
1946
1526
factor
1
1526
decorators
1661
1526
(
3
1526
STRING
4
1526
expr
5
1526
term
6
1526
conf
1662
1526
not
8
1526
while
1663
1526
or_test
10
1526
if
1664
1526
~
12
1526
atom_expr
13
1526
comparison
14
1526
None
15
1526
class
1665
1526
xor_expr
17
1526
arith_expr
18
1526
+
19
1526
stmt_list
1947
1526
confdef
1666
1526
decorated
1667
1526
atom
22
1526
try_stmt
1668
1526
def
1669
1526
compound_stmt
1670
1526
try
1671
1526
NUMBER
26
1526
NAME
27
1526
False
28
1526
shift_expr
29
1526
while_stmt
1672
1526
[
32
1526
and_expr
33
1526
not_test
34
1526
{
35
1526
-
36
1526
simple_stmt
1673
1526
for
1674
1526
and_test
39
1526
@
40
1526
with_stmt
1675
1526
funcdef
1676
1526
small_stmt
1677
1526
power
43
1526
classdef
1678
1526
lambdef
45
1526
lambda
46
1526
test
47
1526
True
48
1526
if_stmt
1679
1526
for_stmt
1680
1526
with
1681
1526
flow_stmt
53
1526
break
54
1526
raise
55
1526
yield
56
1526
assert
57
1526
continue_stmt
58
1526
stat_stmt
59
1526
return_stmt
60
1526
test_list
61
1526
stmt
1682
1526
continue
62
1526
yield_stmt
63
1526
decorator
64
1526
sim_stmt
65
1526
resetstats
66
1526
del
67
1526
return
68
1526
raise_stmt
69
1526
nonlocal
70
1526
pass_stmt
71
1526
expr_stmt
72
1526
assert_stmt
74
1526
endsim
75
1526
pass
76
1526
global_stmt
77
1526
del_stmt
78
1526
global
79
1526
break_stmt
82
1526
begsim
83
1526
nonlocal_stmt
84
1527
//
trailer -> [ subscriptlist ]
1527
/
trailer -> [ subscriptlist ]
1527
^
trailer -> [ subscriptlist ]
1527
.
trailer -> [ subscriptlist ]
1527
<
trailer -> [ subscriptlist ]
1527
<<
trailer -> [ subscriptlist ]
1527
in
trailer -> [ subscriptlist ]
1527
@
trailer -> [ subscriptlist ]
1527
>
trailer -> [ subscriptlist ]
1527
:
trailer -> [ subscriptlist ]
1527
*
trailer -> [ subscriptlist ]
1527
and
trailer -> [ subscriptlist ]
1527
+
trailer -> [ subscriptlist ]
1527
(
trailer -> [ subscriptlist ]
1527
is
trailer -> [ subscriptlist ]
1527
or
trailer -> [ subscriptlist ]
1527
<=
trailer -> [ subscriptlist ]
1527
if
trailer -> [ subscriptlist ]
1527
|
trailer -> [ subscriptlist ]
1527
==
trailer -> [ subscriptlist ]
1527
not
trailer -> [ subscriptlist ]
1527
-
trailer -> [ subscriptlist ]
1527
!=
trailer -> [ subscriptlist ]
1527
&
trailer -> [ subscriptlist ]
1527
[
trailer -> [ subscriptlist ]
1527
>>
trailer -> [ subscriptlist ]
1527
%
trailer -> [ subscriptlist ]
1527
>=
trailer -> [ subscriptlist ]
1527
**
trailer -> [ subscriptlist ]
1528
>=
trailer -> ( arglist )
1528
//
trailer -> ( arglist )
1528
%
trailer -> ( arglist )
1528
in
trailer -> ( arglist )
1528
&
trailer -> ( arglist )
1528
>>
trailer -> ( arglist )
1528
-
trailer -> ( arglist )
1528
:
trailer -> ( arglist )
1528
^
trailer -> ( arglist )
1528
>
trailer -> ( arglist )
1528
<<
trailer -> ( arglist )
1528
==
trailer -> ( arglist )
1528
<=
trailer -> ( arglist )
1528
*
trailer -> ( arglist )
1528
and
trailer -> ( arglist )
1528
/
trailer -> ( arglist )
1528
[
trailer -> ( arglist )
1528
(
trailer -> ( arglist )
1528
<
trailer -> ( arglist )
1528
|
trailer -> ( arglist )
1528
+
trailer -> ( arglist )
1528
not
trailer -> ( arglist )
1528
or
trailer -> ( arglist )
1528
is
trailer -> ( arglist )
1528
.
trailer -> ( arglist )
1528
!=
trailer -> ( arglist )
1528
@
trailer -> ( arglist )
1528
**
trailer -> ( arglist )
1528
if
trailer -> ( arglist )
1529
:
lambdef -> lambda varargslist : test
1530
~
139
1530
factor
140
1530
STRING
143
1530
shift_expr
142
1530
expr
144
1530
term
145
1530
NUMBER
146
1530
{
147
1530
atom_expr
148
1530
[
149
1530
-
150
1530
None
151
1530
+
152
1530
(
153
1530
arith_expr
154
1530
atom
155
1530
and_expr
156
1530
NAME
157
1530
power
158
1530
True
159
1530
comparison
160
1530
xor_expr
161
1530
lambda
162
1530
False
163
1530
not_test
164
1530
and_test
165
1530
not
166
1530
or_test
167
1530
lambdef
168
1530
test
1948
1531
<=
term -> factor / term
1531
!=
term -> factor / term
1531
and
term -> factor / term
1531
or
term -> factor / term
1531
|
term -> factor / term
1531
^
term -> factor / term
1531
>>
term -> factor / term
1531
==
term -> factor / term
1531
>
term -> factor / term
1531
&
term -> factor / term
1531
<<
term -> factor / term
1531
+
term -> factor / term
1531
-
term -> factor / term
1531
not
term -> factor / term
1531
in
term -> factor / term
1531
else
term -> factor / term
1531
<
term -> factor / term
1531
is
term -> factor / term
1531
>=
term -> factor / term
1532
is
term -> factor @ term
1532
and
term -> factor @ term
1532
>
term -> factor @ term
1532
not
term -> factor @ term
1532
in
term -> factor @ term
1532
==
term -> factor @ term
1532
<
term -> factor @ term
1532
or
term -> factor @ term
1532
!=
term -> factor @ term
1532
<<
term -> factor @ term
1532
<=
term -> factor @ term
1532
|
term -> factor @ term
1532
+
term -> factor @ term
1532
&
term -> factor @ term
1532
-
term -> factor @ term
1532
else
term -> factor @ term
1532
>=
term -> factor @ term
1532
>>
term -> factor @ term
1532
^
term -> factor @ term
1533
>
term -> factor % term
1533
!=
term -> factor % term
1533
&
term -> factor % term
1533
>=
term -> factor % term
1533
else
term -> factor % term
1533
or
term -> factor % term
1533
==
term -> factor % term
1533
^
term -> factor % term
1533
in
term -> factor % term
1533
|
term -> factor % term
1533
and
term -> factor % term
1533
not
term -> factor % term
1533
is
term -> factor % term
1533
<
term -> factor % term
1533
>>
term -> factor % term
1533
-
term -> factor % term
1533
<=
term -> factor % term
1533
<<
term -> factor % term
1533
+
term -> factor % term
1534
+
term -> factor // term
1534
==
term -> factor // term
1534
<<
term -> factor // term
1534
<
term -> factor // term
1534
in
term -> factor // term
1534
!=
term -> factor // term
1534
>
term -> factor // term
1534
not
term -> factor // term
1534
>=
term -> factor // term
1534
and
term -> factor // term
1534
is
term -> factor // term
1534
-
term -> factor // term
1534
&
term -> factor // term
1534
|
term -> factor // term
1534
^
term -> factor // term
1534
<=
term -> factor // term
1534
else
term -> factor // term
1534
or
term -> factor // term
1534
>>
term -> factor // term
1535
&
term -> factor * term
1535
-
term -> factor * term
1535
in
term -> factor * term
1535
or
term -> factor * term
1535
<=
term -> factor * term
1535
|
term -> factor * term
1535
and
term -> factor * term
1535
not
term -> factor * term
1535
<<
term -> factor * term
1535
==
term -> factor * term
1535
>
term -> factor * term
1535
>>
term -> factor * term
1535
<
term -> factor * term
1535
!=
term -> factor * term
1535
>=
term -> factor * term
1535
^
term -> factor * term
1535
else
term -> factor * term
1535
+
term -> factor * term
1535
is
term -> factor * term
1536
|
and_expr -> shift_expr & and_expr
1536
else
and_expr -> shift_expr & and_expr
1536
!=
and_expr -> shift_expr & and_expr
1536
and
and_expr -> shift_expr & and_expr
1536
>=
and_expr -> shift_expr & and_expr
1536
in
and_expr -> shift_expr & and_expr
1536
is
and_expr -> shift_expr & and_expr
1536
or
and_expr -> shift_expr & and_expr
1536
==
and_expr -> shift_expr & and_expr
1536
^
and_expr -> shift_expr & and_expr
1536
>
and_expr -> shift_expr & and_expr
1536
<
and_expr -> shift_expr & and_expr
1536
not
and_expr -> shift_expr & and_expr
1536
<=
and_expr -> shift_expr & and_expr
1537
not
arith_expr -> term + arith_expr
1537
>>
arith_expr -> term + arith_expr
1537
^
arith_expr -> term + arith_expr
1537
in
arith_expr -> term + arith_expr
1537
>=
arith_expr -> term + arith_expr
1537
else
arith_expr -> term + arith_expr
1537
<
arith_expr -> term + arith_expr
1537
<=
arith_expr -> term + arith_expr
1537
>
arith_expr -> term + arith_expr
1537
|
arith_expr -> term + arith_expr
1537
==
arith_expr -> term + arith_expr
1537
and
arith_expr -> term + arith_expr
1537
is
arith_expr -> term + arith_expr
1537
&
arith_expr -> term + arith_expr
1537
!=
arith_expr -> term + arith_expr
1537
or
arith_expr -> term + arith_expr
1537
<<
arith_expr -> term + arith_expr
1538
|
arith_expr -> term - arith_expr
1538
and
arith_expr -> term - arith_expr
1538
or
arith_expr -> term - arith_expr
1538
&
arith_expr -> term - arith_expr
1538
<
arith_expr -> term - arith_expr
1538
^
arith_expr -> term - arith_expr
1538
in
arith_expr -> term - arith_expr
1538
<=
arith_expr -> term - arith_expr
1538
not
arith_expr -> term - arith_expr
1538
>=
arith_expr -> term - arith_expr
1538
else
arith_expr -> term - arith_expr
1538
>
arith_expr -> term - arith_expr
1538
!=
arith_expr -> term - arith_expr
1538
<<
arith_expr -> term - arith_expr
1538
==
arith_expr -> term - arith_expr
1538
is
arith_expr -> term - arith_expr
1538
>>
arith_expr -> term - arith_expr
1539
@
power -> atom_expr ** factor
1539
==
power -> atom_expr ** factor
1539
&
power -> atom_expr ** factor
1539
-
power -> atom_expr ** factor
1539
>
power -> atom_expr ** factor
1539
and
power -> atom_expr ** factor
1539
|
power -> atom_expr ** factor
1539
<=
power -> atom_expr ** factor
1539
%
power -> atom_expr ** factor
1539
or
power -> atom_expr ** factor
1539
*
power -> atom_expr ** factor
1539
not
power -> atom_expr ** factor
1539
in
power -> atom_expr ** factor
1539
<<
power -> atom_expr ** factor
1539
//
power -> atom_expr ** factor
1539
/
power -> atom_expr ** factor
1539
>>
power -> atom_expr ** factor
1539
^
power -> atom_expr ** factor
1539
!=
power -> atom_expr ** factor
1539
else
power -> atom_expr ** factor
1539
is
power -> atom_expr ** factor
1539
<
power -> atom_expr ** factor
1539
+
power -> atom_expr ** factor
1539
>=
power -> atom_expr ** factor
1540
/
atom -> [ test_list_comp ]
1540
*
atom -> [ test_list_comp ]
1540
or
atom -> [ test_list_comp ]
1540
|
atom -> [ test_list_comp ]
1540
==
atom -> [ test_list_comp ]
1540
is
atom -> [ test_list_comp ]
1540
-
atom -> [ test_list_comp ]
1540
**
atom -> [ test_list_comp ]
1540
else
atom -> [ test_list_comp ]
1540
&
atom -> [ test_list_comp ]
1540
(
atom -> [ test_list_comp ]
1540
<
atom -> [ test_list_comp ]
1540
@
atom -> [ test_list_comp ]
1540
//
atom -> [ test_list_comp ]
1540
>
atom -> [ test_list_comp ]
1540
in
atom -> [ test_list_comp ]
1540
^
atom -> [ test_list_comp ]
1540
<<
atom -> [ test_list_comp ]
1540
[
atom -> [ test_list_comp ]
1540
!=
atom -> [ test_list_comp ]
1540
<=
atom -> [ test_list_comp ]
1540
and
atom -> [ test_list_comp ]
1540
%
atom -> [ test_list_comp ]
1540
not
atom -> [ test_list_comp ]
1540
+
atom -> [ test_list_comp ]
1540
>=
atom -> [ test_list_comp ]
1540
>>
atom -> [ test_list_comp ]
1540
.
atom -> [ test_list_comp ]
1541
@
atom -> ( test_list_comp )
1541
>>
atom -> ( test_list_comp )
1541
<<
atom -> ( test_list_comp )
1541
==
atom -> ( test_list_comp )
1541
is
atom -> ( test_list_comp )
1541
or
atom -> ( test_list_comp )
1541
<=
atom -> ( test_list_comp )
1541
[
atom -> ( test_list_comp )
1541
%
atom -> ( test_list_comp )
1541
^
atom -> ( test_list_comp )
1541
<
atom -> ( test_list_comp )
1541
and
atom -> ( test_list_comp )
1541
+
atom -> ( test_list_comp )
1541
&
atom -> ( test_list_comp )
1541
!=
atom -> ( test_list_comp )
1541
in
atom -> ( test_list_comp )
1541
else
atom -> ( test_list_comp )
1541
**
atom -> ( test_list_comp )
1541
not
atom -> ( test_list_comp )
1541
-
atom -> ( test_list_comp )
1541
(
atom -> ( test_list_comp )
1541
*
atom -> ( test_list_comp )
1541
|
atom -> ( test_list_comp )
1541
//
atom -> ( test_list_comp )
1541
>
atom -> ( test_list_comp )
1541
>=
atom -> ( test_list_comp )
1541
.
atom -> ( test_list_comp )
1541
/
atom -> ( test_list_comp )
1542
]
1949
1543
/
trailer -> ( )
1543
[
trailer -> ( )
1543
(
trailer -> ( )
1543
|
trailer -> ( )
1543
<=
trailer -> ( )
1543
in
trailer -> ( )
1543
not
trailer -> ( )
1543
>>
trailer -> ( )
1543
^
trailer -> ( )
1543
.
trailer -> ( )
1543
**
trailer -> ( )
1543
+
trailer -> ( )
1543
is
trailer -> ( )
1543
<
trailer -> ( )
1543
>
trailer -> ( )
1543
==
trailer -> ( )
1543
else
trailer -> ( )
1543
//
trailer -> ( )
1543
<<
trailer -> ( )
1543
*
trailer -> ( )
1543
-
trailer -> ( )
1543
>=
trailer -> ( )
1543
%
trailer -> ( )
1543
and
trailer -> ( )
1543
@
trailer -> ( )
1543
&
trailer -> ( )
1543
!=
trailer -> ( )
1543
or
trailer -> ( )
1544
)
1950
1545
is
trailer_expr -> trailer trailer_expr
1545
!=
trailer_expr -> trailer trailer_expr
1545
<<
trailer_expr -> trailer trailer_expr
1545
and
trailer_expr -> trailer trailer_expr
1545
&
trailer_expr -> trailer trailer_expr
1545
//
trailer_expr -> trailer trailer_expr
1545
|
trailer_expr -> trailer trailer_expr
1545
==
trailer_expr -> trailer trailer_expr
1545
<
trailer_expr -> trailer trailer_expr
1545
or
trailer_expr -> trailer trailer_expr
1545
^
trailer_expr -> trailer trailer_expr
1545
<=
trailer_expr -> trailer trailer_expr
1545
@
trailer_expr -> trailer trailer_expr
1545
not
trailer_expr -> trailer trailer_expr
1545
in
trailer_expr -> trailer trailer_expr
1545
*
trailer_expr -> trailer trailer_expr
1545
+
trailer_expr -> trailer trailer_expr
1545
else
trailer_expr -> trailer trailer_expr
1545
**
trailer_expr -> trailer trailer_expr
1545
>>
trailer_expr -> trailer trailer_expr
1545
>=
trailer_expr -> trailer trailer_expr
1545
%
trailer_expr -> trailer trailer_expr
1545
-
trailer_expr -> trailer trailer_expr
1545
>
trailer_expr -> trailer trailer_expr
1545
/
trailer_expr -> trailer trailer_expr
1546
<=
trailer -> . NAME
1546
<
trailer -> . NAME
1546
%
trailer -> . NAME
1546
.
trailer -> . NAME
1546
//
trailer -> . NAME
1546
|
trailer -> . NAME
1546
==
trailer -> . NAME
1546
>=
trailer -> . NAME
1546
[
trailer -> . NAME
1546
^
trailer -> . NAME
1546
<<
trailer -> . NAME
1546
in
trailer -> . NAME
1546
&
trailer -> . NAME
1546
or
trailer -> . NAME
1546
*
trailer -> . NAME
1546
(
trailer -> . NAME
1546
and
trailer -> . NAME
1546
-
trailer -> . NAME
1546
+
trailer -> . NAME
1546
!=
trailer -> . NAME
1546
else
trailer -> . NAME
1546
not
trailer -> . NAME
1546
**
trailer -> . NAME
1546
>>
trailer -> . NAME
1546
@
trailer -> . NAME
1546
/
trailer -> . NAME
1546
is
trailer -> . NAME
1546
>
trailer -> . NAME
1547
>=
shift_expr -> arith_expr >> shift_expr
1547
not
shift_expr -> arith_expr >> shift_expr
1547
>
shift_expr -> arith_expr >> shift_expr
1547
^
shift_expr -> arith_expr >> shift_expr
1547
is
shift_expr -> arith_expr >> shift_expr
1547
&
shift_expr -> arith_expr >> shift_expr
1547
!=
shift_expr -> arith_expr >> shift_expr
1547
<=
shift_expr -> arith_expr >> shift_expr
1547
and
shift_expr -> arith_expr >> shift_expr
1547
==
shift_expr -> arith_expr >> shift_expr
1547
or
shift_expr -> arith_expr >> shift_expr
1547
in
shift_expr -> arith_expr >> shift_expr
1547
|
shift_expr -> arith_expr >> shift_expr
1547
else
shift_expr -> arith_expr >> shift_expr
1547
<
shift_expr -> arith_expr >> shift_expr
1548
>=
shift_expr -> arith_expr << shift_expr
1548
in
shift_expr -> arith_expr << shift_expr
1548
else
shift_expr -> arith_expr << shift_expr
1548
|
shift_expr -> arith_expr << shift_expr
1548
>
shift_expr -> arith_expr << shift_expr
1548
!=
shift_expr -> arith_expr << shift_expr
1548
<=
shift_expr -> arith_expr << shift_expr
1548
&
shift_expr -> arith_expr << shift_expr
1548
not
shift_expr -> arith_expr << shift_expr
1548
^
shift_expr -> arith_expr << shift_expr
1548
<
shift_expr -> arith_expr << shift_expr
1548
==
shift_expr -> arith_expr << shift_expr
1548
or
shift_expr -> arith_expr << shift_expr
1548
is
shift_expr -> arith_expr << shift_expr
1548
and
shift_expr -> arith_expr << shift_expr
1549
%=
test -> or_test if or_test else test
1549
<<=
test -> or_test if or_test else test
1549
-=
test -> or_test if or_test else test
1549
**=
test -> or_test if or_test else test
1549
,
test -> or_test if or_test else test
1549
NEWLINE
test -> or_test if or_test else test
1549
//=
test -> or_test if or_test else test
1549
+=
test -> or_test if or_test else test
1549
|=
test -> or_test if or_test else test
1549
*=
test -> or_test if or_test else test
1549
:
test -> or_test if or_test else test
1549
^=
test -> or_test if or_test else test
1549
@=
test -> or_test if or_test else test
1549
&=
test -> or_test if or_test else test
1549
>>=
test -> or_test if or_test else test
1549
/=
test -> or_test if or_test else test
1549
=
test -> or_test if or_test else test
1550
and
expr -> xor_expr | expr
1550
in
expr -> xor_expr | expr
1550
>=
expr -> xor_expr | expr
1550
else
expr -> xor_expr | expr
1550
is
expr -> xor_expr | expr
1550
==
expr -> xor_expr | expr
1550
or
expr -> xor_expr | expr
1550
<
expr -> xor_expr | expr
1550
not
expr -> xor_expr | expr
1550
!=
expr -> xor_expr | expr
1550
<=
expr -> xor_expr | expr
1550
>
expr -> xor_expr | expr
1551
==
xor_expr -> and_expr ^ xor_expr
1551
!=
xor_expr -> and_expr ^ xor_expr
1551
>
xor_expr -> and_expr ^ xor_expr
1551
not
xor_expr -> and_expr ^ xor_expr
1551
is
xor_expr -> and_expr ^ xor_expr
1551
<=
xor_expr -> and_expr ^ xor_expr
1551
else
xor_expr -> and_expr ^ xor_expr
1551
|
xor_expr -> and_expr ^ xor_expr
1551
>=
xor_expr -> and_expr ^ xor_expr
1551
and
xor_expr -> and_expr ^ xor_expr
1551
in
xor_expr -> and_expr ^ xor_expr
1551
<
xor_expr -> and_expr ^ xor_expr
1551
or
xor_expr -> and_expr ^ xor_expr
1552
else
and_test -> not_test and and_test
1552
or
and_test -> not_test and and_test
1553
and
comparison -> expr comp_op comparison
1553
else
comparison -> expr comp_op comparison
1553
or
comparison -> expr comp_op comparison
1554
else
or_test -> and_test or or_test
1555
~
simple_stmt -> small_stmt NEWLINE
1555
begsim
simple_stmt -> small_stmt NEWLINE
1555
endsim
simple_stmt -> small_stmt NEWLINE
1555
if
simple_stmt -> small_stmt NEWLINE
1555
break
simple_stmt -> small_stmt NEWLINE
1555
False
simple_stmt -> small_stmt NEWLINE
1555
def
simple_stmt -> small_stmt NEWLINE
1555
STRING
simple_stmt -> small_stmt NEWLINE
1555
else
simple_stmt -> small_stmt NEWLINE
1555
assert
simple_stmt -> small_stmt NEWLINE
1555
lambda
simple_stmt -> small_stmt NEWLINE
1555
yield
simple_stmt -> small_stmt NEWLINE
1555
True
simple_stmt -> small_stmt NEWLINE
1555
+
simple_stmt -> small_stmt NEWLINE
1555
try
simple_stmt -> small_stmt NEWLINE
1555
for
simple_stmt -> small_stmt NEWLINE
1555
conf
simple_stmt -> small_stmt NEWLINE
1555
nonlocal
simple_stmt -> small_stmt NEWLINE
1555
elif
simple_stmt -> small_stmt NEWLINE
1555
continue
simple_stmt -> small_stmt NEWLINE
1555
-
simple_stmt -> small_stmt NEWLINE
1555
resetstats
simple_stmt -> small_stmt NEWLINE
1555
raise
simple_stmt -> small_stmt NEWLINE
1555
(
simple_stmt -> small_stmt NEWLINE
1555
None
simple_stmt -> small_stmt NEWLINE
1555
NEWLINE
simple_stmt -> small_stmt NEWLINE
1555
while
simple_stmt -> small_stmt NEWLINE
1555
not
simple_stmt -> small_stmt NEWLINE
1555
$
simple_stmt -> small_stmt NEWLINE
1555
NAME
simple_stmt -> small_stmt NEWLINE
1555
del
simple_stmt -> small_stmt NEWLINE
1555
with
simple_stmt -> small_stmt NEWLINE
1555
global
simple_stmt -> small_stmt NEWLINE
1555
@
simple_stmt -> small_stmt NEWLINE
1555
class
simple_stmt -> small_stmt NEWLINE
1555
{
simple_stmt -> small_stmt NEWLINE
1555
NUMBER
simple_stmt -> small_stmt NEWLINE
1555
[
simple_stmt -> small_stmt NEWLINE
1555
pass
simple_stmt -> small_stmt NEWLINE
1555
return
simple_stmt -> small_stmt NEWLINE
1556
test
1951
1556
factor
140
1556
~
139
1556
shift_expr
142
1556
STRING
143
1556
expr
144
1556
term
145
1556
NUMBER
146
1556
{
147
1556
atom_expr
148
1556
-
150
1556
[
149
1556
None
151
1556
+
152
1556
(
153
1556
arith_expr
154
1556
atom
155
1556
and_expr
156
1556
NAME
157
1556
power
158
1556
True
159
1556
comparison
160
1556
xor_expr
161
1556
lambda
162
1556
False
163
1556
not_test
164
1556
and_test
165
1556
not
166
1556
or_test
167
1556
lambdef
168
1557
lambda
if_stmt -> if test : suite elif_clause
1557
global
if_stmt -> if test : suite elif_clause
1557
else
1952
1557
True
if_stmt -> if test : suite elif_clause
1557
NUMBER
if_stmt -> if test : suite elif_clause
1557
~
if_stmt -> if test : suite elif_clause
1557
resetstats
if_stmt -> if test : suite elif_clause
1557
break
if_stmt -> if test : suite elif_clause
1557
@
if_stmt -> if test : suite elif_clause
1557
def
if_stmt -> if test : suite elif_clause
1557
not
if_stmt -> if test : suite elif_clause
1557
$
if_stmt -> if test : suite elif_clause
1557
endsim
if_stmt -> if test : suite elif_clause
1557
+
if_stmt -> if test : suite elif_clause
1557
NAME
if_stmt -> if test : suite elif_clause
1557
yield
if_stmt -> if test : suite elif_clause
1557
del
if_stmt -> if test : suite elif_clause
1557
begsim
if_stmt -> if test : suite elif_clause
1557
False
if_stmt -> if test : suite elif_clause
1557
while
if_stmt -> if test : suite elif_clause
1557
STRING
if_stmt -> if test : suite elif_clause
1557
{
if_stmt -> if test : suite elif_clause
1557
if
if_stmt -> if test : suite elif_clause
1557
with
if_stmt -> if test : suite elif_clause
1557
pass
if_stmt -> if test : suite elif_clause
1557
nonlocal
if_stmt -> if test : suite elif_clause
1557
conf
if_stmt -> if test : suite elif_clause
1557
-
if_stmt -> if test : suite elif_clause
1557
assert
if_stmt -> if test : suite elif_clause
1557
return
if_stmt -> if test : suite elif_clause
1557
try
if_stmt -> if test : suite elif_clause
1557
[
if_stmt -> if test : suite elif_clause
1557
continue
if_stmt -> if test : suite elif_clause
1557
NEWLINE
if_stmt -> if test : suite elif_clause
1557
(
if_stmt -> if test : suite elif_clause
1557
class
if_stmt -> if test : suite elif_clause
1557
None
if_stmt -> if test : suite elif_clause
1557
for
if_stmt -> if test : suite elif_clause
1557
raise
if_stmt -> if test : suite elif_clause
1558
factor
1
1558
decorators
1661
1558
(
3
1558
STRING
4
1558
expr
5
1558
term
6
1558
conf
1662
1558
not
8
1558
while
1663
1558
or_test
10
1558
if
1664
1558
~
12
1558
atom_expr
13
1558
comparison
14
1558
None
15
1558
class
1665
1558
xor_expr
17
1558
arith_expr
18
1558
+
19
1558
stmt_list
1953
1558
confdef
1666
1558
decorated
1667
1558
atom
22
1558
try_stmt
1668
1558
def
1669
1558
compound_stmt
1670
1558
try
1671
1558
NUMBER
26
1558
NAME
27
1558
False
28
1558
shift_expr
29
1558
while_stmt
1672
1558
[
32
1558
and_expr
33
1558
not_test
34
1558
{
35
1558
-
36
1558
simple_stmt
1673
1558
for
1674
1558
and_test
39
1558
@
40
1558
with_stmt
1675
1558
funcdef
1676
1558
small_stmt
1677
1558
power
43
1558
classdef
1678
1558
lambdef
45
1558
lambda
46
1558
test
47
1558
True
48
1558
if_stmt
1679
1558
for_stmt
1680
1558
with
1681
1558
flow_stmt
53
1558
break
54
1558
raise
55
1558
yield
56
1558
assert
57
1558
continue_stmt
58
1558
stat_stmt
59
1558
return_stmt
60
1558
test_list
61
1558
stmt
1682
1558
continue
62
1558
yield_stmt
63
1558
decorator
64
1558
sim_stmt
65
1558
resetstats
66
1558
del
67
1558
return
68
1558
raise_stmt
69
1558
nonlocal
70
1558
pass_stmt
71
1558
expr_stmt
72
1558
assert_stmt
74
1558
endsim
75
1558
pass
76
1558
global_stmt
77
1558
del_stmt
78
1558
global
79
1558
break_stmt
82
1558
begsim
83
1558
nonlocal_stmt
84
1559
factor
1
1559
decorators
1661
1559
(
3
1559
STRING
4
1559
expr
5
1559
term
6
1559
conf
1662
1559
not
8
1559
while
1663
1559
or_test
10
1559
if
1664
1559
~
12
1559
atom_expr
13
1559
comparison
14
1559
None
15
1559
class
1665
1559
xor_expr
17
1559
arith_expr
18
1559
+
19
1559
stmt_list
1954
1559
confdef
1666
1559
decorated
1667
1559
atom
22
1559
try_stmt
1668
1559
def
1669
1559
compound_stmt
1670
1559
try
1671
1559
NUMBER
26
1559
NAME
27
1559
False
28
1559
shift_expr
29
1559
while_stmt
1672
1559
[
32
1559
and_expr
33
1559
not_test
34
1559
{
35
1559
-
36
1559
simple_stmt
1673
1559
for
1674
1559
and_test
39
1559
@
40
1559
with_stmt
1675
1559
funcdef
1676
1559
small_stmt
1677
1559
power
43
1559
classdef
1678
1559
lambdef
45
1559
lambda
46
1559
test
47
1559
True
48
1559
if_stmt
1679
1559
for_stmt
1680
1559
with
1681
1559
flow_stmt
53
1559
break
54
1559
raise
55
1559
yield
56
1559
assert
57
1559
continue_stmt
58
1559
stat_stmt
59
1559
return_stmt
60
1559
test_list
61
1559
stmt
1682
1559
continue
62
1559
yield_stmt
63
1559
decorator
64
1559
sim_stmt
65
1559
resetstats
66
1559
del
67
1559
return
68
1559
raise_stmt
69
1559
nonlocal
70
1559
pass_stmt
71
1559
expr_stmt
72
1559
assert_stmt
74
1559
endsim
75
1559
pass
76
1559
global_stmt
77
1559
del_stmt
78
1559
global
79
1559
break_stmt
82
1559
begsim
83
1559
nonlocal_stmt
84
1560
:
1955
1561
expr
5
1561
factor
1
1561
(
3
1561
STRING
4
1561
term
6
1561
not
8
1561
or_test
10
1561
~
12
1561
atom_expr
13
1561
comparison
14
1561
shift_expr
29
1561
None
15
1561
power
43
1561
+
19
1561
small_stmt
42
1561
xor_expr
17
1561
arith_expr
18
1561
[
32
1561
simple_stmt
1050
1561
atom
22
1561
NUMBER
26
1561
and_test
39
1561
suite
1956
1561
NAME
27
1561
-
36
1561
False
28
1561
lambda
46
1561
test
47
1561
NEWLINE
1051
1561
not_test
34
1561
{
35
1561
and_expr
33
1561
lambdef
45
1561
True
48
1561
endsim
75
1561
flow_stmt
53
1561
pass
76
1561
break
54
1561
raise
55
1561
yield
56
1561
assert
57
1561
global_stmt
77
1561
continue_stmt
58
1561
del_stmt
78
1561
stat_stmt
59
1561
global
79
1561
return_stmt
60
1561
test_list
61
1561
continue
62
1561
yield_stmt
63
1561
return
68
1561
sim_stmt
65
1561
resetstats
66
1561
break_stmt
82
1561
del
67
1561
raise_stmt
69
1561
nonlocal
70
1561
pass_stmt
71
1561
begsim
83
1561
expr_stmt
72
1561
nonlocal_stmt
84
1561
assert_stmt
74
1562
<=
term -> factor / term
1562
!=
term -> factor / term
1562
and
term -> factor / term
1562
or
term -> factor / term
1562
|
term -> factor / term
1562
^
term -> factor / term
1562
>>
term -> factor / term
1562
==
term -> factor / term
1562
>
term -> factor / term
1562
if
term -> factor / term
1562
:
term -> factor / term
1562
&
term -> factor / term
1562
]
term -> factor / term
1562
<<
term -> factor / term
1562
+
term -> factor / term
1562
-
term -> factor / term
1562
not
term -> factor / term
1562
in
term -> factor / term
1562
<
term -> factor / term
1562
is
term -> factor / term
1562
>=
term -> factor / term
1562
,
term -> factor / term
1563
is
term -> factor @ term
1563
and
term -> factor @ term
1563
>
term -> factor @ term
1563
not
term -> factor @ term
1563
in
term -> factor @ term
1563
==
term -> factor @ term
1563
<
term -> factor @ term
1563
,
term -> factor @ term
1563
]
term -> factor @ term
1563
or
term -> factor @ term
1563
!=
term -> factor @ term
1563
<<
term -> factor @ term
1563
<=
term -> factor @ term
1563
if
term -> factor @ term
1563
|
term -> factor @ term
1563
+
term -> factor @ term
1563
-
term -> factor @ term
1563
&
term -> factor @ term
1563
>=
term -> factor @ term
1563
:
term -> factor @ term
1563
>>
term -> factor @ term
1563
^
term -> factor @ term
1564
&
term -> factor * term
1564
-
term -> factor * term
1564
:
term -> factor * term
1564
in
term -> factor * term
1564
]
term -> factor * term
1564
or
term -> factor * term
1564
<=
term -> factor * term
1564
,
term -> factor * term
1564
|
term -> factor * term
1564
and
term -> factor * term
1564
not
term -> factor * term
1564
<<
term -> factor * term
1564
==
term -> factor * term
1564
if
term -> factor * term
1564
>
term -> factor * term
1564
>>
term -> factor * term
1564
<
term -> factor * term
1564
!=
term -> factor * term
1564
>=
term -> factor * term
1564
^
term -> factor * term
1564
+
term -> factor * term
1564
is
term -> factor * term
1565
>
term -> factor % term
1565
!=
term -> factor % term
1565
&
term -> factor % term
1565
>=
term -> factor % term
1565
or
term -> factor % term
1565
==
term -> factor % term
1565
^
term -> factor % term
1565
in
term -> factor % term
1565
,
term -> factor % term
1565
|
term -> factor % term
1565
and
term -> factor % term
1565
if
term -> factor % term
1565
not
term -> factor % term
1565
is
term -> factor % term
1565
<
term -> factor % term
1565
>>
term -> factor % term
1565
-
term -> factor % term
1565
<=
term -> factor % term
1565
]
term -> factor % term
1565
<<
term -> factor % term
1565
+
term -> factor % term
1565
:
term -> factor % term
1566
+
term -> factor // term
1566
==
term -> factor // term
1566
]
term -> factor // term
1566
<<
term -> factor // term
1566
<
term -> factor // term
1566
if
term -> factor // term
1566
in
term -> factor // term
1566
:
term -> factor // term
1566
!=
term -> factor // term
1566
>
term -> factor // term
1566
not
term -> factor // term
1566
>=
term -> factor // term
1566
and
term -> factor // term
1566
is
term -> factor // term
1566
-
term -> factor // term
1566
&
term -> factor // term
1566
|
term -> factor // term
1566
,
term -> factor // term
1566
^
term -> factor // term
1566
<=
term -> factor // term
1566
or
term -> factor // term
1566
>>
term -> factor // term
1567
|
and_expr -> shift_expr & and_expr
1567
!=
and_expr -> shift_expr & and_expr
1567
,
and_expr -> shift_expr & and_expr
1567
>=
and_expr -> shift_expr & and_expr
1567
not
and_expr -> shift_expr & and_expr
1567
and
and_expr -> shift_expr & and_expr
1567
is
and_expr -> shift_expr & and_expr
1567
in
and_expr -> shift_expr & and_expr
1567
or
and_expr -> shift_expr & and_expr
1567
==
and_expr -> shift_expr & and_expr
1567
^
and_expr -> shift_expr & and_expr
1567
<
and_expr -> shift_expr & and_expr
1567
>
and_expr -> shift_expr & and_expr
1567
]
and_expr -> shift_expr & and_expr
1567
if
and_expr -> shift_expr & and_expr
1567
<=
and_expr -> shift_expr & and_expr
1567
:
and_expr -> shift_expr & and_expr
1568
or
comparison -> expr comp_op comparison
1568
,
comparison -> expr comp_op comparison
1568
:
comparison -> expr comp_op comparison
1568
if
comparison -> expr comp_op comparison
1568
and
comparison -> expr comp_op comparison
1568
]
comparison -> expr comp_op comparison
1569
>=
shift_expr -> arith_expr >> shift_expr
1569
not
shift_expr -> arith_expr >> shift_expr
1569
>
shift_expr -> arith_expr >> shift_expr
1569
^
shift_expr -> arith_expr >> shift_expr
1569
:
shift_expr -> arith_expr >> shift_expr
1569
,
shift_expr -> arith_expr >> shift_expr
1569
is
shift_expr -> arith_expr >> shift_expr
1569
&
shift_expr -> arith_expr >> shift_expr
1569
!=
shift_expr -> arith_expr >> shift_expr
1569
<=
shift_expr -> arith_expr >> shift_expr
1569
and
shift_expr -> arith_expr >> shift_expr
1569
if
shift_expr -> arith_expr >> shift_expr
1569
==
shift_expr -> arith_expr >> shift_expr
1569
or
shift_expr -> arith_expr >> shift_expr
1569
in
shift_expr -> arith_expr >> shift_expr
1569
|
shift_expr -> arith_expr >> shift_expr
1569
]
shift_expr -> arith_expr >> shift_expr
1569
<
shift_expr -> arith_expr >> shift_expr
1570
,
shift_expr -> arith_expr << shift_expr
1570
>=
shift_expr -> arith_expr << shift_expr
1570
in
shift_expr -> arith_expr << shift_expr
1570
>
shift_expr -> arith_expr << shift_expr
1570
|
shift_expr -> arith_expr << shift_expr
1570
!=
shift_expr -> arith_expr << shift_expr
1570
:
shift_expr -> arith_expr << shift_expr
1570
<=
shift_expr -> arith_expr << shift_expr
1570
]
shift_expr -> arith_expr << shift_expr
1570
&
shift_expr -> arith_expr << shift_expr
1570
not
shift_expr -> arith_expr << shift_expr
1570
^
shift_expr -> arith_expr << shift_expr
1570
<
shift_expr -> arith_expr << shift_expr
1570
==
shift_expr -> arith_expr << shift_expr
1570
if
shift_expr -> arith_expr << shift_expr
1570
or
shift_expr -> arith_expr << shift_expr
1570
is
shift_expr -> arith_expr << shift_expr
1570
and
shift_expr -> arith_expr << shift_expr
1571
:
arith_expr -> term + arith_expr
1571
>>
arith_expr -> term + arith_expr
1571
^
arith_expr -> term + arith_expr
1571
<
arith_expr -> term + arith_expr
1571
|
arith_expr -> term + arith_expr
1571
and
arith_expr -> term + arith_expr
1571
!=
arith_expr -> term + arith_expr
1571
or
arith_expr -> term + arith_expr
1571
not
arith_expr -> term + arith_expr
1571
<=
arith_expr -> term + arith_expr
1571
>
arith_expr -> term + arith_expr
1571
,
arith_expr -> term + arith_expr
1571
if
arith_expr -> term + arith_expr
1571
is
arith_expr -> term + arith_expr
1571
]
arith_expr -> term + arith_expr
1571
==
arith_expr -> term + arith_expr
1571
&
arith_expr -> term + arith_expr
1571
>=
arith_expr -> term + arith_expr
1571
in
arith_expr -> term + arith_expr
1571
<<
arith_expr -> term + arith_expr
1572
==
arith_expr -> term - arith_expr
1572
is
arith_expr -> term - arith_expr
1572
<=
arith_expr -> term - arith_expr
1572
not
arith_expr -> term - arith_expr
1572
<<
arith_expr -> term - arith_expr
1572
&
arith_expr -> term - arith_expr
1572
|
arith_expr -> term - arith_expr
1572
and
arith_expr -> term - arith_expr
1572
or
arith_expr -> term - arith_expr
1572
,
arith_expr -> term - arith_expr
1572
:
arith_expr -> term - arith_expr
1572
]
arith_expr -> term - arith_expr
1572
>>
arith_expr -> term - arith_expr
1572
if
arith_expr -> term - arith_expr
1572
>=
arith_expr -> term - arith_expr
1572
<
arith_expr -> term - arith_expr
1572
^
arith_expr -> term - arith_expr
1572
>
arith_expr -> term - arith_expr
1572
!=
arith_expr -> term - arith_expr
1572
in
arith_expr -> term - arith_expr
1573
@
power -> atom_expr ** factor
1573
==
power -> atom_expr ** factor
1573
&
power -> atom_expr ** factor
1573
-
power -> atom_expr ** factor
1573
>
power -> atom_expr ** factor
1573
and
power -> atom_expr ** factor
1573
|
power -> atom_expr ** factor
1573
<=
power -> atom_expr ** factor
1573
%
power -> atom_expr ** factor
1573
or
power -> atom_expr ** factor
1573
:
power -> atom_expr ** factor
1573
*
power -> atom_expr ** factor
1573
not
power -> atom_expr ** factor
1573
]
power -> atom_expr ** factor
1573
in
power -> atom_expr ** factor
1573
<<
power -> atom_expr ** factor
1573
//
power -> atom_expr ** factor
1573
/
power -> atom_expr ** factor
1573
>>
power -> atom_expr ** factor
1573
,
power -> atom_expr ** factor
1573
^
power -> atom_expr ** factor
1573
if
power -> atom_expr ** factor
1573
!=
power -> atom_expr ** factor
1573
is
power -> atom_expr ** factor
1573
<
power -> atom_expr ** factor
1573
+
power -> atom_expr ** factor
1573
>=
power -> atom_expr ** factor
1574
]
subscriptlist -> subscript , subscriptlist
1575
/
atom -> [ test_list_comp ]
1575
,
atom -> [ test_list_comp ]
1575
*
atom -> [ test_list_comp ]
1575
or
atom -> [ test_list_comp ]
1575
|
atom -> [ test_list_comp ]
1575
==
atom -> [ test_list_comp ]
1575
is
atom -> [ test_list_comp ]
1575
-
atom -> [ test_list_comp ]
1575
**
atom -> [ test_list_comp ]
1575
&
atom -> [ test_list_comp ]
1575
(
atom -> [ test_list_comp ]
1575
<
atom -> [ test_list_comp ]
1575
:
atom -> [ test_list_comp ]
1575
@
atom -> [ test_list_comp ]
1575
//
atom -> [ test_list_comp ]
1575
>
atom -> [ test_list_comp ]
1575
if
atom -> [ test_list_comp ]
1575
in
atom -> [ test_list_comp ]
1575
^
atom -> [ test_list_comp ]
1575
<<
atom -> [ test_list_comp ]
1575
[
atom -> [ test_list_comp ]
1575
!=
atom -> [ test_list_comp ]
1575
<=
atom -> [ test_list_comp ]
1575
and
atom -> [ test_list_comp ]
1575
%
atom -> [ test_list_comp ]
1575
not
atom -> [ test_list_comp ]
1575
+
atom -> [ test_list_comp ]
1575
>=
atom -> [ test_list_comp ]
1575
>>
atom -> [ test_list_comp ]
1575
.
atom -> [ test_list_comp ]
1575
]
atom -> [ test_list_comp ]
1576
@
atom -> ( test_list_comp )
1576
>>
atom -> ( test_list_comp )
1576
<<
atom -> ( test_list_comp )
1576
:
atom -> ( test_list_comp )
1576
==
atom -> ( test_list_comp )
1576
is
atom -> ( test_list_comp )
1576
or
atom -> ( test_list_comp )
1576
<=
atom -> ( test_list_comp )
1576
[
atom -> ( test_list_comp )
1576
if
atom -> ( test_list_comp )
1576
^
atom -> ( test_list_comp )
1576
<
atom -> ( test_list_comp )
1576
and
atom -> ( test_list_comp )
1576
.
atom -> ( test_list_comp )
1576
+
atom -> ( test_list_comp )
1576
&
atom -> ( test_list_comp )
1576
!=
atom -> ( test_list_comp )
1576
in
atom -> ( test_list_comp )
1576
]
atom -> ( test_list_comp )
1576
**
atom -> ( test_list_comp )
1576
not
atom -> ( test_list_comp )
1576
-
atom -> ( test_list_comp )
1576
(
atom -> ( test_list_comp )
1576
*
atom -> ( test_list_comp )
1576
|
atom -> ( test_list_comp )
1576
//
atom -> ( test_list_comp )
1576
>
atom -> ( test_list_comp )
1576
>=
atom -> ( test_list_comp )
1576
,
atom -> ( test_list_comp )
1576
%
atom -> ( test_list_comp )
1576
/
atom -> ( test_list_comp )
1577
]
1957
1578
,
trailer -> ( )
1578
/
trailer -> ( )
1578
[
trailer -> ( )
1578
(
trailer -> ( )
1578
|
trailer -> ( )
1578
<=
trailer -> ( )
1578
in
trailer -> ( )
1578
not
trailer -> ( )
1578
>>
trailer -> ( )
1578
^
trailer -> ( )
1578
.
trailer -> ( )
1578
**
trailer -> ( )
1578
if
trailer -> ( )
1578
+
trailer -> ( )
1578
is
trailer -> ( )
1578
<
trailer -> ( )
1578
>
trailer -> ( )
1578
==
trailer -> ( )
1578
:
trailer -> ( )
1578
<<
trailer -> ( )
1578
//
trailer -> ( )
1578
*
trailer -> ( )
1578
-
trailer -> ( )
1578
]
trailer -> ( )
1578
>=
trailer -> ( )
1578
%
trailer -> ( )
1578
and
trailer -> ( )
1578
@
trailer -> ( )
1578
&
trailer -> ( )
1578
!=
trailer -> ( )
1578
or
trailer -> ( )
1579
)
1958
1580
:
trailer_expr -> trailer trailer_expr
1580
is
trailer_expr -> trailer trailer_expr
1580
!=
trailer_expr -> trailer trailer_expr
1580
<<
trailer_expr -> trailer trailer_expr
1580
and
trailer_expr -> trailer trailer_expr
1580
&
trailer_expr -> trailer trailer_expr
1580
//
trailer_expr -> trailer trailer_expr
1580
|
trailer_expr -> trailer trailer_expr
1580
==
trailer_expr -> trailer trailer_expr
1580
<
trailer_expr -> trailer trailer_expr
1580
or
trailer_expr -> trailer trailer_expr
1580
^
trailer_expr -> trailer trailer_expr
1580
<=
trailer_expr -> trailer trailer_expr
1580
@
trailer_expr -> trailer trailer_expr
1580
in
trailer_expr -> trailer trailer_expr
1580
not
trailer_expr -> trailer trailer_expr
1580
*
trailer_expr -> trailer trailer_expr
1580
+
trailer_expr -> trailer trailer_expr
1580
if
trailer_expr -> trailer trailer_expr
1580
**
trailer_expr -> trailer trailer_expr
1580
>>
trailer_expr -> trailer trailer_expr
1580
>=
trailer_expr -> trailer trailer_expr
1580
%
trailer_expr -> trailer trailer_expr
1580
]
trailer_expr -> trailer trailer_expr
1580
-
trailer_expr -> trailer trailer_expr
1580
>
trailer_expr -> trailer trailer_expr
1580
/
trailer_expr -> trailer trailer_expr
1580
,
trailer_expr -> trailer trailer_expr
1581
<=
trailer -> . NAME
1581
if
trailer -> . NAME
1581
<
trailer -> . NAME
1581
%
trailer -> . NAME
1581
.
trailer -> . NAME
1581
//
trailer -> . NAME
1581
]
trailer -> . NAME
1581
:
trailer -> . NAME
1581
|
trailer -> . NAME
1581
==
trailer -> . NAME
1581
>=
trailer -> . NAME
1581
[
trailer -> . NAME
1581
^
trailer -> . NAME
1581
<<
trailer -> . NAME
1581
in
trailer -> . NAME
1581
&
trailer -> . NAME
1581
or
trailer -> . NAME
1581
*
trailer -> . NAME
1581
(
trailer -> . NAME
1581
and
trailer -> . NAME
1581
-
trailer -> . NAME
1581
+
trailer -> . NAME
1581
!=
trailer -> . NAME
1581
not
trailer -> . NAME
1581
**
trailer -> . NAME
1581
>>
trailer -> . NAME
1581
@
trailer -> . NAME
1581
/
trailer -> . NAME
1581
is
trailer -> . NAME
1581
>
trailer -> . NAME
1581
,
trailer -> . NAME
1582
==
xor_expr -> and_expr ^ xor_expr
1582
!=
xor_expr -> and_expr ^ xor_expr
1582
>
xor_expr -> and_expr ^ xor_expr
1582
not
xor_expr -> and_expr ^ xor_expr
1582
:
xor_expr -> and_expr ^ xor_expr
1582
if
xor_expr -> and_expr ^ xor_expr
1582
is
xor_expr -> and_expr ^ xor_expr
1582
<=
xor_expr -> and_expr ^ xor_expr
1582
,
xor_expr -> and_expr ^ xor_expr
1582
|
xor_expr -> and_expr ^ xor_expr
1582
>=
xor_expr -> and_expr ^ xor_expr
1582
and
xor_expr -> and_expr ^ xor_expr
1582
]
xor_expr -> and_expr ^ xor_expr
1582
in
xor_expr -> and_expr ^ xor_expr
1582
<
xor_expr -> and_expr ^ xor_expr
1582
or
xor_expr -> and_expr ^ xor_expr
1583
and
expr -> xor_expr | expr
1583
in
expr -> xor_expr | expr
1583
>=
expr -> xor_expr | expr
1583
!=
expr -> xor_expr | expr
1583
is
expr -> xor_expr | expr
1583
==
expr -> xor_expr | expr
1583
or
expr -> xor_expr | expr
1583
<
expr -> xor_expr | expr
1583
if
expr -> xor_expr | expr
1583
,
expr -> xor_expr | expr
1583
not
expr -> xor_expr | expr
1583
]
expr -> xor_expr | expr
1583
<=
expr -> xor_expr | expr
1583
>
expr -> xor_expr | expr
1583
:
expr -> xor_expr | expr
1584
~
544
1584
factor
545
1584
STRING
546
1584
shift_expr
547
1584
expr
548
1584
arith_expr
549
1584
term
550
1584
atom_expr
551
1584
NUMBER
552
1584
{
554
1584
[
555
1584
-
556
1584
None
557
1584
+
558
1584
(
559
1584
atom
561
1584
and_expr
562
1584
NAME
563
1584
power
564
1584
True
565
1584
comparison
566
1584
xor_expr
567
1584
lambda
568
1584
False
569
1584
not_test
570
1584
test
1959
1584
and_test
571
1584
or_test
573
1584
not
574
1584
lambdef
576
1585
,
lambdef -> lambda : test
1585
]
lambdef -> lambda : test
1585
:
lambdef -> lambda : test
1586
:
and_test -> not_test and and_test
1586
,
and_test -> not_test and and_test
1586
if
and_test -> not_test and and_test
1586
or
and_test -> not_test and and_test
1586
]
and_test -> not_test and and_test
1587
if
or_test -> and_test or or_test
1587
,
or_test -> and_test or or_test
1587
]
or_test -> and_test or or_test
1587
:
or_test -> and_test or or_test
1588
else
1960
1589
,
maybe_test -> test
1589
:
maybe_test -> test
1589
]
maybe_test -> test
1590
:
1961
1590
sliceop
1962
1590
]
sliceop -> 
1590
,
sliceop -> 
1591
<=
term -> factor / term
1591
!=
term -> factor / term
1591
and
term -> factor / term
1591
or
term -> factor / term
1591
)
term -> factor / term
1591
for
term -> factor / term
1591
|
term -> factor / term
1591
^
term -> factor / term
1591
>>
term -> factor / term
1591
==
term -> factor / term
1591
>
term -> factor / term
1591
if
term -> factor / term
1591
&
term -> factor / term
1591
=
term -> factor / term
1591
<<
term -> factor / term
1591
+
term -> factor / term
1591
-
term -> factor / term
1591
not
term -> factor / term
1591
in
term -> factor / term
1591
<
term -> factor / term
1591
is
term -> factor / term
1591
>=
term -> factor / term
1591
,
term -> factor / term
1592
is
term -> factor @ term
1592
for
term -> factor @ term
1592
and
term -> factor @ term
1592
>
term -> factor @ term
1592
not
term -> factor @ term
1592
in
term -> factor @ term
1592
==
term -> factor @ term
1592
<
term -> factor @ term
1592
,
term -> factor @ term
1592
or
term -> factor @ term
1592
!=
term -> factor @ term
1592
<<
term -> factor @ term
1592
<=
term -> factor @ term
1592
=
term -> factor @ term
1592
if
term -> factor @ term
1592
|
term -> factor @ term
1592
+
term -> factor @ term
1592
-
term -> factor @ term
1592
)
term -> factor @ term
1592
&
term -> factor @ term
1592
>=
term -> factor @ term
1592
>>
term -> factor @ term
1592
^
term -> factor @ term
1593
>
term -> factor % term
1593
!=
term -> factor % term
1593
&
term -> factor % term
1593
>=
term -> factor % term
1593
or
term -> factor % term
1593
=
term -> factor % term
1593
)
term -> factor % term
1593
==
term -> factor % term
1593
^
term -> factor % term
1593
in
term -> factor % term
1593
,
term -> factor % term
1593
for
term -> factor % term
1593
|
term -> factor % term
1593
and
term -> factor % term
1593
if
term -> factor % term
1593
not
term -> factor % term
1593
is
term -> factor % term
1593
<
term -> factor % term
1593
>>
term -> factor % term
1593
-
term -> factor % term
1593
<=
term -> factor % term
1593
<<
term -> factor % term
1593
+
term -> factor % term
1594
+
term -> factor // term
1594
==
term -> factor // term
1594
for
term -> factor // term
1594
<<
term -> factor // term
1594
<
term -> factor // term
1594
if
term -> factor // term
1594
in
term -> factor // term
1594
!=
term -> factor // term
1594
>
term -> factor // term
1594
not
term -> factor // term
1594
=
term -> factor // term
1594
>=
term -> factor // term
1594
and
term -> factor // term
1594
is
term -> factor // term
1594
-
term -> factor // term
1594
&
term -> factor // term
1594
|
term -> factor // term
1594
,
term -> factor // term
1594
^
term -> factor // term
1594
<=
term -> factor // term
1594
or
term -> factor // term
1594
>>
term -> factor // term
1594
)
term -> factor // term
1595
&
term -> factor * term
1595
-
term -> factor * term
1595
for
term -> factor * term
1595
in
term -> factor * term
1595
or
term -> factor * term
1595
<=
term -> factor * term
1595
,
term -> factor * term
1595
|
term -> factor * term
1595
and
term -> factor * term
1595
not
term -> factor * term
1595
<<
term -> factor * term
1595
==
term -> factor * term
1595
)
term -> factor * term
1595
if
term -> factor * term
1595
>
term -> factor * term
1595
>>
term -> factor * term
1595
<
term -> factor * term
1595
!=
term -> factor * term
1595
=
term -> factor * term
1595
>=
term -> factor * term
1595
^
term -> factor * term
1595
+
term -> factor * term
1595
is
term -> factor * term
1596
for
and_expr -> shift_expr & and_expr
1596
)
and_expr -> shift_expr & and_expr
1596
|
and_expr -> shift_expr & and_expr
1596
!=
and_expr -> shift_expr & and_expr
1596
,
and_expr -> shift_expr & and_expr
1596
=
and_expr -> shift_expr & and_expr
1596
>=
and_expr -> shift_expr & and_expr
1596
not
and_expr -> shift_expr & and_expr
1596
and
and_expr -> shift_expr & and_expr
1596
is
and_expr -> shift_expr & and_expr
1596
in
and_expr -> shift_expr & and_expr
1596
or
and_expr -> shift_expr & and_expr
1596
==
and_expr -> shift_expr & and_expr
1596
^
and_expr -> shift_expr & and_expr
1596
>
and_expr -> shift_expr & and_expr
1596
<
and_expr -> shift_expr & and_expr
1596
if
and_expr -> shift_expr & and_expr
1596
<=
and_expr -> shift_expr & and_expr
1597
if
shift_expr -> arith_expr >> shift_expr
1597
<
shift_expr -> arith_expr >> shift_expr
1597
>
shift_expr -> arith_expr >> shift_expr
1597
^
shift_expr -> arith_expr >> shift_expr
1597
,
shift_expr -> arith_expr >> shift_expr
1597
is
shift_expr -> arith_expr >> shift_expr
1597
!=
shift_expr -> arith_expr >> shift_expr
1597
or
shift_expr -> arith_expr >> shift_expr
1597
in
shift_expr -> arith_expr >> shift_expr
1597
>=
shift_expr -> arith_expr >> shift_expr
1597
for
shift_expr -> arith_expr >> shift_expr
1597
&
shift_expr -> arith_expr >> shift_expr
1597
and
shift_expr -> arith_expr >> shift_expr
1597
|
shift_expr -> arith_expr >> shift_expr
1597
not
shift_expr -> arith_expr >> shift_expr
1597
=
shift_expr -> arith_expr >> shift_expr
1597
<=
shift_expr -> arith_expr >> shift_expr
1597
==
shift_expr -> arith_expr >> shift_expr
1597
)
shift_expr -> arith_expr >> shift_expr
1598
>
shift_expr -> arith_expr << shift_expr
1598
&
shift_expr -> arith_expr << shift_expr
1598
not
shift_expr -> arith_expr << shift_expr
1598
and
shift_expr -> arith_expr << shift_expr
1598
,
shift_expr -> arith_expr << shift_expr
1598
>=
shift_expr -> arith_expr << shift_expr
1598
<=
shift_expr -> arith_expr << shift_expr
1598
^
shift_expr -> arith_expr << shift_expr
1598
if
shift_expr -> arith_expr << shift_expr
1598
for
shift_expr -> arith_expr << shift_expr
1598
in
shift_expr -> arith_expr << shift_expr
1598
!=
shift_expr -> arith_expr << shift_expr
1598
<
shift_expr -> arith_expr << shift_expr
1598
==
shift_expr -> arith_expr << shift_expr
1598
is
shift_expr -> arith_expr << shift_expr
1598
|
shift_expr -> arith_expr << shift_expr
1598
)
shift_expr -> arith_expr << shift_expr
1598
=
shift_expr -> arith_expr << shift_expr
1598
or
shift_expr -> arith_expr << shift_expr
1599
for
arith_expr -> term + arith_expr
1599
>>
arith_expr -> term + arith_expr
1599
^
arith_expr -> term + arith_expr
1599
<
arith_expr -> term + arith_expr
1599
|
arith_expr -> term + arith_expr
1599
and
arith_expr -> term + arith_expr
1599
=
arith_expr -> term + arith_expr
1599
!=
arith_expr -> term + arith_expr
1599
or
arith_expr -> term + arith_expr
1599
not
arith_expr -> term + arith_expr
1599
<=
arith_expr -> term + arith_expr
1599
>
arith_expr -> term + arith_expr
1599
,
arith_expr -> term + arith_expr
1599
if
arith_expr -> term + arith_expr
1599
is
arith_expr -> term + arith_expr
1599
==
arith_expr -> term + arith_expr
1599
&
arith_expr -> term + arith_expr
1599
>=
arith_expr -> term + arith_expr
1599
)
arith_expr -> term + arith_expr
1599
in
arith_expr -> term + arith_expr
1599
<<
arith_expr -> term + arith_expr
1600
==
arith_expr -> term - arith_expr
1600
)
arith_expr -> term - arith_expr
1600
is
arith_expr -> term - arith_expr
1600
<=
arith_expr -> term - arith_expr
1600
not
arith_expr -> term - arith_expr
1600
<<
arith_expr -> term - arith_expr
1600
=
arith_expr -> term - arith_expr
1600
&
arith_expr -> term - arith_expr
1600
|
arith_expr -> term - arith_expr
1600
and
arith_expr -> term - arith_expr
1600
or
arith_expr -> term - arith_expr
1600
,
arith_expr -> term - arith_expr
1600
for
arith_expr -> term - arith_expr
1600
>>
arith_expr -> term - arith_expr
1600
if
arith_expr -> term - arith_expr
1600
>=
arith_expr -> term - arith_expr
1600
<
arith_expr -> term - arith_expr
1600
^
arith_expr -> term - arith_expr
1600
>
arith_expr -> term - arith_expr
1600
!=
arith_expr -> term - arith_expr
1600
in
arith_expr -> term - arith_expr
1601
==
xor_expr -> and_expr ^ xor_expr
1601
!=
xor_expr -> and_expr ^ xor_expr
1601
>
xor_expr -> and_expr ^ xor_expr
1601
not
xor_expr -> and_expr ^ xor_expr
1601
if
xor_expr -> and_expr ^ xor_expr
1601
is
xor_expr -> and_expr ^ xor_expr
1601
)
xor_expr -> and_expr ^ xor_expr
1601
<=
xor_expr -> and_expr ^ xor_expr
1601
,
xor_expr -> and_expr ^ xor_expr
1601
for
xor_expr -> and_expr ^ xor_expr
1601
|
xor_expr -> and_expr ^ xor_expr
1601
>=
xor_expr -> and_expr ^ xor_expr
1601
and
xor_expr -> and_expr ^ xor_expr
1601
in
xor_expr -> and_expr ^ xor_expr
1601
=
xor_expr -> and_expr ^ xor_expr
1601
<
xor_expr -> and_expr ^ xor_expr
1601
or
xor_expr -> and_expr ^ xor_expr
1602
@
power -> atom_expr ** factor
1602
==
power -> atom_expr ** factor
1602
)
power -> atom_expr ** factor
1602
&
power -> atom_expr ** factor
1602
-
power -> atom_expr ** factor
1602
>
power -> atom_expr ** factor
1602
and
power -> atom_expr ** factor
1602
|
power -> atom_expr ** factor
1602
<=
power -> atom_expr ** factor
1602
%
power -> atom_expr ** factor
1602
or
power -> atom_expr ** factor
1602
=
power -> atom_expr ** factor
1602
*
power -> atom_expr ** factor
1602
not
power -> atom_expr ** factor
1602
in
power -> atom_expr ** factor
1602
<<
power -> atom_expr ** factor
1602
//
power -> atom_expr ** factor
1602
/
power -> atom_expr ** factor
1602
>>
power -> atom_expr ** factor
1602
,
power -> atom_expr ** factor
1602
^
power -> atom_expr ** factor
1602
if
power -> atom_expr ** factor
1602
!=
power -> atom_expr ** factor
1602
for
power -> atom_expr ** factor
1602
is
power -> atom_expr ** factor
1602
<
power -> atom_expr ** factor
1602
+
power -> atom_expr ** factor
1602
>=
power -> atom_expr ** factor
1603
/
atom -> [ test_list_comp ]
1603
,
atom -> [ test_list_comp ]
1603
*
atom -> [ test_list_comp ]
1603
or
atom -> [ test_list_comp ]
1603
|
atom -> [ test_list_comp ]
1603
==
atom -> [ test_list_comp ]
1603
is
atom -> [ test_list_comp ]
1603
-
atom -> [ test_list_comp ]
1603
**
atom -> [ test_list_comp ]
1603
&
atom -> [ test_list_comp ]
1603
(
atom -> [ test_list_comp ]
1603
=
atom -> [ test_list_comp ]
1603
<
atom -> [ test_list_comp ]
1603
@
atom -> [ test_list_comp ]
1603
//
atom -> [ test_list_comp ]
1603
>
atom -> [ test_list_comp ]
1603
)
atom -> [ test_list_comp ]
1603
if
atom -> [ test_list_comp ]
1603
in
atom -> [ test_list_comp ]
1603
^
atom -> [ test_list_comp ]
1603
<<
atom -> [ test_list_comp ]
1603
for
atom -> [ test_list_comp ]
1603
[
atom -> [ test_list_comp ]
1603
!=
atom -> [ test_list_comp ]
1603
<=
atom -> [ test_list_comp ]
1603
and
atom -> [ test_list_comp ]
1603
%
atom -> [ test_list_comp ]
1603
not
atom -> [ test_list_comp ]
1603
+
atom -> [ test_list_comp ]
1603
>=
atom -> [ test_list_comp ]
1603
>>
atom -> [ test_list_comp ]
1603
.
atom -> [ test_list_comp ]
1604
@
atom -> ( test_list_comp )
1604
>>
atom -> ( test_list_comp )
1604
<<
atom -> ( test_list_comp )
1604
==
atom -> ( test_list_comp )
1604
is
atom -> ( test_list_comp )
1604
or
atom -> ( test_list_comp )
1604
<=
atom -> ( test_list_comp )
1604
[
atom -> ( test_list_comp )
1604
%
atom -> ( test_list_comp )
1604
if
atom -> ( test_list_comp )
1604
^
atom -> ( test_list_comp )
1604
<
atom -> ( test_list_comp )
1604
and
atom -> ( test_list_comp )
1604
=
atom -> ( test_list_comp )
1604
.
atom -> ( test_list_comp )
1604
+
atom -> ( test_list_comp )
1604
&
atom -> ( test_list_comp )
1604
!=
atom -> ( test_list_comp )
1604
in
atom -> ( test_list_comp )
1604
**
atom -> ( test_list_comp )
1604
not
atom -> ( test_list_comp )
1604
-
atom -> ( test_list_comp )
1604
(
atom -> ( test_list_comp )
1604
*
atom -> ( test_list_comp )
1604
|
atom -> ( test_list_comp )
1604
//
atom -> ( test_list_comp )
1604
>
atom -> ( test_list_comp )
1604
for
atom -> ( test_list_comp )
1604
>=
atom -> ( test_list_comp )
1604
,
atom -> ( test_list_comp )
1604
)
atom -> ( test_list_comp )
1604
/
atom -> ( test_list_comp )
1605
]
1963
1606
)
1964
1607
,
trailer -> ( )
1607
/
trailer -> ( )
1607
[
trailer -> ( )
1607
(
trailer -> ( )
1607
|
trailer -> ( )
1607
<=
trailer -> ( )
1607
in
trailer -> ( )
1607
not
trailer -> ( )
1607
>>
trailer -> ( )
1607
^
trailer -> ( )
1607
.
trailer -> ( )
1607
**
trailer -> ( )
1607
if
trailer -> ( )
1607
)
trailer -> ( )
1607
+
trailer -> ( )
1607
is
trailer -> ( )
1607
<
trailer -> ( )
1607
>
trailer -> ( )
1607
==
trailer -> ( )
1607
//
trailer -> ( )
1607
<<
trailer -> ( )
1607
*
trailer -> ( )
1607
for
trailer -> ( )
1607
-
trailer -> ( )
1607
=
trailer -> ( )
1607
>=
trailer -> ( )
1607
%
trailer -> ( )
1607
and
trailer -> ( )
1607
@
trailer -> ( )
1607
&
trailer -> ( )
1607
!=
trailer -> ( )
1607
or
trailer -> ( )
1608
=
trailer -> . NAME
1608
<=
trailer -> . NAME
1608
if
trailer -> . NAME
1608
<
trailer -> . NAME
1608
%
trailer -> . NAME
1608
.
trailer -> . NAME
1608
//
trailer -> . NAME
1608
)
trailer -> . NAME
1608
for
trailer -> . NAME
1608
|
trailer -> . NAME
1608
==
trailer -> . NAME
1608
>=
trailer -> . NAME
1608
[
trailer -> . NAME
1608
^
trailer -> . NAME
1608
<<
trailer -> . NAME
1608
in
trailer -> . NAME
1608
&
trailer -> . NAME
1608
or
trailer -> . NAME
1608
*
trailer -> . NAME
1608
(
trailer -> . NAME
1608
and
trailer -> . NAME
1608
-
trailer -> . NAME
1608
+
trailer -> . NAME
1608
!=
trailer -> . NAME
1608
not
trailer -> . NAME
1608
**
trailer -> . NAME
1608
>>
trailer -> . NAME
1608
@
trailer -> . NAME
1608
/
trailer -> . NAME
1608
is
trailer -> . NAME
1608
>
trailer -> . NAME
1608
,
trailer -> . NAME
1609
is
trailer_expr -> trailer trailer_expr
1609
!=
trailer_expr -> trailer trailer_expr
1609
<<
trailer_expr -> trailer trailer_expr
1609
)
trailer_expr -> trailer trailer_expr
1609
and
trailer_expr -> trailer trailer_expr
1609
&
trailer_expr -> trailer trailer_expr
1609
//
trailer_expr -> trailer trailer_expr
1609
|
trailer_expr -> trailer trailer_expr
1609
==
trailer_expr -> trailer trailer_expr
1609
<
trailer_expr -> trailer trailer_expr
1609
or
trailer_expr -> trailer trailer_expr
1609
^
trailer_expr -> trailer trailer_expr
1609
<=
trailer_expr -> trailer trailer_expr
1609
@
trailer_expr -> trailer trailer_expr
1609
in
trailer_expr -> trailer trailer_expr
1609
not
trailer_expr -> trailer trailer_expr
1609
for
trailer_expr -> trailer trailer_expr
1609
=
trailer_expr -> trailer trailer_expr
1609
*
trailer_expr -> trailer trailer_expr
1609
+
trailer_expr -> trailer trailer_expr
1609
if
trailer_expr -> trailer trailer_expr
1609
**
trailer_expr -> trailer trailer_expr
1609
>>
trailer_expr -> trailer trailer_expr
1609
>=
trailer_expr -> trailer trailer_expr
1609
%
trailer_expr -> trailer trailer_expr
1609
-
trailer_expr -> trailer trailer_expr
1609
>
trailer_expr -> trailer trailer_expr
1609
/
trailer_expr -> trailer trailer_expr
1609
,
trailer_expr -> trailer trailer_expr
1610
=
and_test -> not_test and and_test
1610
,
and_test -> not_test and and_test
1610
if
and_test -> not_test and and_test
1610
)
and_test -> not_test and and_test
1610
for
and_test -> not_test and and_test
1610
or
and_test -> not_test and and_test
1611
,
argument -> test = test
1611
)
argument -> test = test
1612
in
1965
1613
and
expr -> xor_expr | expr
1613
in
expr -> xor_expr | expr
1613
>=
expr -> xor_expr | expr
1613
for
expr -> xor_expr | expr
1613
is
expr -> xor_expr | expr
1613
==
expr -> xor_expr | expr
1613
or
expr -> xor_expr | expr
1613
<
expr -> xor_expr | expr
1613
if
expr -> xor_expr | expr
1613
)
expr -> xor_expr | expr
1613
=
expr -> xor_expr | expr
1613
,
expr -> xor_expr | expr
1613
not
expr -> xor_expr | expr
1613
!=
expr -> xor_expr | expr
1613
<=
expr -> xor_expr | expr
1613
>
expr -> xor_expr | expr
1614
)
arglist -> argument , arglist
1615
for
or_test -> and_test or or_test
1615
)
or_test -> and_test or or_test
1615
if
or_test -> and_test or or_test
1615
=
or_test -> and_test or or_test
1615
,
or_test -> and_test or or_test
1616
,
lambdef -> lambda : test
1616
for
lambdef -> lambda : test
1616
=
lambdef -> lambda : test
1616
)
lambdef -> lambda : test
1617
~
579
1617
factor
580
1617
STRING
581
1617
shift_expr
582
1617
arith_expr
583
1617
term
584
1617
NUMBER
585
1617
and_expr
586
1617
{
587
1617
atom_expr
589
1617
[
590
1617
-
591
1617
None
592
1617
(
593
1617
atom
594
1617
+
595
1617
not_test
596
1617
NAME
598
1617
power
599
1617
True
600
1617
comparison
601
1617
xor_expr
602
1617
lambdef
603
1617
False
604
1617
and_test
606
1617
lambda
607
1617
test
1966
1617
or_test
608
1617
expr
609
1617
not
610
1618
else
1967
1619
)
comparison -> expr comp_op comparison
1619
=
comparison -> expr comp_op comparison
1619
or
comparison -> expr comp_op comparison
1619
,
comparison -> expr comp_op comparison
1619
if
comparison -> expr comp_op comparison
1619
for
comparison -> expr comp_op comparison
1619
and
comparison -> expr comp_op comparison
1620
expr
5
1620
factor
1
1620
(
3
1620
STRING
4
1620
term
6
1620
not
8
1620
or_test
10
1620
~
12
1620
atom_expr
13
1620
comparison
14
1620
shift_expr
29
1620
None
15
1620
power
43
1620
+
19
1620
small_stmt
42
1620
xor_expr
17
1620
arith_expr
18
1620
[
32
1620
simple_stmt
1050
1620
atom
22
1620
NUMBER
26
1620
and_test
39
1620
NAME
27
1620
-
36
1620
False
28
1620
lambda
46
1620
test
47
1620
NEWLINE
1051
1620
not_test
34
1620
{
35
1620
and_expr
33
1620
lambdef
45
1620
True
48
1620
suite
1968
1620
endsim
75
1620
flow_stmt
53
1620
pass
76
1620
break
54
1620
raise
55
1620
yield
56
1620
assert
57
1620
global_stmt
77
1620
continue_stmt
58
1620
del_stmt
78
1620
stat_stmt
59
1620
global
79
1620
return_stmt
60
1620
test_list
61
1620
continue
62
1620
yield_stmt
63
1620
return
68
1620
sim_stmt
65
1620
resetstats
66
1620
break_stmt
82
1620
del
67
1620
raise_stmt
69
1620
nonlocal
70
1620
pass_stmt
71
1620
begsim
83
1620
expr_stmt
72
1620
nonlocal_stmt
84
1620
assert_stmt
74
1621
:
1969
1622
:
1970
1622
,
tfpdef -> NAME
1622
)
tfpdef -> NAME
1623
,
param -> * tfpdef
1623
)
param -> * tfpdef
1624
~
1971
1624
factor
1972
1624
STRING
1973
1624
shift_expr
1974
1624
arith_expr
1975
1624
term
1976
1624
NUMBER
1977
1624
{
1978
1624
atom_expr
1979
1624
[
1980
1624
-
1981
1624
None
1982
1624
(
1983
1624
atom
1984
1624
and_expr
1985
1624
+
1986
1624
not_test
1987
1624
NAME
1988
1624
power
1989
1624
True
1990
1624
comparison
1991
1624
xor_expr
1992
1624
False
1993
1624
and_test
1994
1624
lambda
1995
1624
lambdef
1996
1624
expr
1997
1624
not
1998
1624
or_test
1999
1624
test
2000
1625
,
param -> ** tfpdef
1625
)
param -> ** tfpdef
1626
~
948
1626
factor
949
1626
STRING
950
1626
shift_expr
951
1626
arith_expr
952
1626
term
953
1626
NUMBER
954
1626
{
955
1626
atom_expr
956
1626
[
957
1626
-
958
1626
None
959
1626
(
960
1626
atom
961
1626
+
962
1626
NAME
964
1626
power
965
1626
True
966
1626
comparison
967
1626
xor_expr
968
1626
False
969
1626
and_expr
970
1626
not_test
971
1626
lambdef
972
1626
lambda
973
1626
or_test
974
1626
and_test
975
1626
not
976
1626
test
2001
1626
expr
977
1627
tfpdef
1136
1627
*
1133
1627
param
1137
1627
NAME
1134
1627
**
1135
1627
parameters
2002
1628
:
2003
1629
:
2004
1630
~
1630
1630
STRING
1634
1630
NUMBER
1637
1630
{
1639
1630
[
1642
1630
atom_expr
1641
1630
None
1644
1630
-
1643
1630
+
1645
1630
factor
2005
1630
(
1646
1630
atom
1648
1630
NAME
1650
1630
power
1651
1630
True
1652
1630
False
1656
1631
/
2006
1631
as
term -> factor
1631
@
2007
1631
if
term -> factor
1631
%
2008
1631
*
2009
1631
<<
term -> factor
1631
-
term -> factor
1631
//
2010
1631
>=
term -> factor
1631
or
term -> factor
1631
<=
term -> factor
1631
>
term -> factor
1631
in
term -> factor
1631
<
term -> factor
1631
>>
term -> factor
1631
==
term -> factor
1631
is
term -> factor
1631
+
term -> factor
1631
|
term -> factor
1631
!=
term -> factor
1631
:
term -> factor
1631
&
term -> factor
1631
not
term -> factor
1631
and
term -> factor
1631
^
term -> factor
1632
as
2011
1632
:
2012
1633
&
2013
1633
in
and_expr -> shift_expr
1633
not
and_expr -> shift_expr
1633
:
and_expr -> shift_expr
1633
<
and_expr -> shift_expr
1633
!=
and_expr -> shift_expr
1633
>=
and_expr -> shift_expr
1633
if
and_expr -> shift_expr
1633
and
and_expr -> shift_expr
1633
|
and_expr -> shift_expr
1633
is
and_expr -> shift_expr
1633
<=
and_expr -> shift_expr
1633
>
and_expr -> shift_expr
1633
as
and_expr -> shift_expr
1633
^
and_expr -> shift_expr
1633
or
and_expr -> shift_expr
1633
==
and_expr -> shift_expr
1634
==
atom -> STRING
1634
>
atom -> STRING
1634
<=
atom -> STRING
1634
&
atom -> STRING
1634
.
atom -> STRING
1634
>=
atom -> STRING
1634
@
atom -> STRING
1634
[
atom -> STRING
1634
^
atom -> STRING
1634
%
atom -> STRING
1634
**
atom -> STRING
1634
-
atom -> STRING
1634
//
atom -> STRING
1634
>>
atom -> STRING
1634
<
atom -> STRING
1634
|
atom -> STRING
1634
(
atom -> STRING
1634
is
atom -> STRING
1634
and
atom -> STRING
1634
*
atom -> STRING
1634
or
atom -> STRING
1634
not
atom -> STRING
1634
<<
atom -> STRING
1634
as
atom -> STRING
1634
/
atom -> STRING
1634
+
atom -> STRING
1634
!=
atom -> STRING
1634
in
atom -> STRING
1634
:
atom -> STRING
1634
if
atom -> STRING
1635
!=
125
1635
is
126
1635
>=
127
1635
in
128
1635
<
129
1635
==
131
1635
<=
132
1635
not
133
1635
>
134
1635
comp_op
2014
1635
:
comparison -> expr
1635
as
comparison -> expr
1635
or
comparison -> expr
1635
if
comparison -> expr
1635
and
comparison -> expr
1636
as
arith_expr -> term
1636
+
2015
1636
if
arith_expr -> term
1636
-
2016
1636
<=
arith_expr -> term
1636
|
arith_expr -> term
1636
not
arith_expr -> term
1636
^
arith_expr -> term
1636
<<
arith_expr -> term
1636
&
arith_expr -> term
1636
==
arith_expr -> term
1636
is
arith_expr -> term
1636
!=
arith_expr -> term
1636
>
arith_expr -> term
1636
and
arith_expr -> term
1636
:
arith_expr -> term
1636
<
arith_expr -> term
1636
or
arith_expr -> term
1636
>=
arith_expr -> term
1636
>>
arith_expr -> term
1636
in
arith_expr -> term
1637
<<
atom -> NUMBER
1637
:
atom -> NUMBER
1637
-
atom -> NUMBER
1637
^
atom -> NUMBER
1637
or
atom -> NUMBER
1637
==
atom -> NUMBER
1637
!=
atom -> NUMBER
1637
/
atom -> NUMBER
1637
and
atom -> NUMBER
1637
%
atom -> NUMBER
1637
>=
atom -> NUMBER
1637
@
atom -> NUMBER
1637
|
atom -> NUMBER
1637
[
atom -> NUMBER
1637
//
atom -> NUMBER
1637
.
atom -> NUMBER
1637
not
atom -> NUMBER
1637
<
atom -> NUMBER
1637
>>
atom -> NUMBER
1637
if
atom -> NUMBER
1637
<=
atom -> NUMBER
1637
>
atom -> NUMBER
1637
as
atom -> NUMBER
1637
&
atom -> NUMBER
1637
is
atom -> NUMBER
1637
**
atom -> NUMBER
1637
in
atom -> NUMBER
1637
+
atom -> NUMBER
1637
(
atom -> NUMBER
1637
*
atom -> NUMBER
1638
expr
5
1638
factor
1
1638
(
3
1638
STRING
4
1638
term
6
1638
not
8
1638
or_test
10
1638
~
12
1638
atom_expr
13
1638
comparison
14
1638
shift_expr
29
1638
None
15
1638
power
43
1638
+
19
1638
small_stmt
2017
1638
xor_expr
17
1638
arith_expr
18
1638
[
32
1638
simple_stmt
2018
1638
atom
22
1638
NUMBER
26
1638
and_test
39
1638
NAME
27
1638
-
36
1638
False
28
1638
lambda
46
1638
test
47
1638
NEWLINE
2019
1638
not_test
34
1638
{
35
1638
and_expr
33
1638
lambdef
45
1638
True
48
1638
suite
2020
1638
endsim
75
1638
flow_stmt
53
1638
pass
76
1638
break
54
1638
raise
55
1638
yield
56
1638
assert
57
1638
global_stmt
77
1638
continue_stmt
58
1638
del_stmt
78
1638
stat_stmt
59
1638
global
79
1638
return_stmt
60
1638
test_list
61
1638
continue
62
1638
yield_stmt
63
1638
return
68
1638
sim_stmt
65
1638
resetstats
66
1638
break_stmt
82
1638
del
67
1638
raise_stmt
69
1638
nonlocal
70
1638
pass_stmt
71
1638
begsim
83
1638
expr_stmt
72
1638
nonlocal_stmt
84
1638
assert_stmt
74
1639
}
2021
1640
or
2022
1640
if
or_test -> and_test
1640
:
or_test -> and_test
1640
as
or_test -> and_test
1641
**
2023
1641
or
power -> atom_expr
1641
:
power -> atom_expr
1641
*
power -> atom_expr
1641
>=
power -> atom_expr
1641
^
power -> atom_expr
1641
in
power -> atom_expr
1641
!=
power -> atom_expr
1641
if
power -> atom_expr
1641
@
power -> atom_expr
1641
-
power -> atom_expr
1641
and
power -> atom_expr
1641
not
power -> atom_expr
1641
==
power -> atom_expr
1641
as
power -> atom_expr
1641
<
power -> atom_expr
1641
&
power -> atom_expr
1641
|
power -> atom_expr
1641
//
power -> atom_expr
1641
>
power -> atom_expr
1641
%
power -> atom_expr
1641
/
power -> atom_expr
1641
is
power -> atom_expr
1641
<<
power -> atom_expr
1641
>>
power -> atom_expr
1641
+
power -> atom_expr
1641
<=
power -> atom_expr
1642
~
186
1642
factor
187
1642
STRING
188
1642
shift_expr
189
1642
test_list_comp
2024
1642
arith_expr
191
1642
term
192
1642
atom_expr
193
1642
]
2025
1642
test
195
1642
NUMBER
196
1642
and_expr
197
1642
{
198
1642
[
199
1642
-
200
1642
None
201
1642
(
202
1642
atom
203
1642
+
204
1642
NAME
205
1642
power
206
1642
True
207
1642
comparison
208
1642
xor_expr
209
1642
lambdef
210
1642
False
211
1642
not_test
212
1642
or_test
213
1642
and_test
214
1642
lambda
215
1642
not
216
1642
expr
217
1642
test_list
218
1643
~
1630
1643
STRING
1634
1643
NUMBER
1637
1643
factor
2026
1643
{
1639
1643
[
1642
1643
atom_expr
1641
1643
None
1644
1643
-
1643
1643
+
1645
1643
(
1646
1643
atom
1648
1643
NAME
1650
1643
power
1651
1643
True
1652
1643
False
1656
1644
not
atom -> None
1644
or
atom -> None
1644
==
atom -> None
1644
*
atom -> None
1644
-
atom -> None
1644
^
atom -> None
1644
>>
atom -> None
1644
if
atom -> None
1644
<<
atom -> None
1644
and
atom -> None
1644
|
atom -> None
1644
&
atom -> None
1644
!=
atom -> None
1644
@
atom -> None
1644
.
atom -> None
1644
/
atom -> None
1644
%
atom -> None
1644
>
atom -> None
1644
is
atom -> None
1644
as
atom -> None
1644
<
atom -> None
1644
(
atom -> None
1644
**
atom -> None
1644
//
atom -> None
1644
in
atom -> None
1644
<=
atom -> None
1644
>=
atom -> None
1644
+
atom -> None
1644
[
atom -> None
1644
:
atom -> None
1645
~
1630
1645
STRING
1634
1645
NUMBER
1637
1645
{
1639
1645
factor
2027
1645
atom_expr
1641
1645
[
1642
1645
None
1644
1645
-
1643
1645
+
1645
1645
(
1646
1645
atom
1648
1645
NAME
1650
1645
power
1651
1645
True
1652
1645
False
1656
1646
~
92
1646
factor
93
1646
STRING
94
1646
shift_expr
95
1646
arith_expr
96
1646
term
97
1646
NUMBER
98
1646
and_expr
99
1646
{
100
1646
atom_expr
101
1646
[
102
1646
-
103
1646
None
105
1646
(
106
1646
atom
107
1646
+
109
1646
)
2028
1646
NAME
110
1646
test_list_comp
2029
1646
power
111
1646
test_list
112
1646
True
113
1646
comparison
114
1646
xor_expr
115
1646
lambdef
116
1646
False
117
1646
not_test
118
1646
or_test
119
1646
test
120
1646
lambda
121
1646
and_test
122
1646
not
123
1646
expr
124
1647
>>
2030
1647
^
shift_expr -> arith_expr
1647
<<
2031
1647
or
shift_expr -> arith_expr
1647
as
shift_expr -> arith_expr
1647
|
shift_expr -> arith_expr
1647
<=
shift_expr -> arith_expr
1647
is
shift_expr -> arith_expr
1647
<
shift_expr -> arith_expr
1647
if
shift_expr -> arith_expr
1647
not
shift_expr -> arith_expr
1647
in
shift_expr -> arith_expr
1647
and
shift_expr -> arith_expr
1647
>=
shift_expr -> arith_expr
1647
==
shift_expr -> arith_expr
1647
:
shift_expr -> arith_expr
1647
!=
shift_expr -> arith_expr
1647
>
shift_expr -> arith_expr
1647
&
shift_expr -> arith_expr
1648
[
2032
1648
(
2033
1648
//
trailer_expr -> 
1648
trailer
2034
1648
<<
trailer_expr -> 
1648
trailer_expr
2035
1648
*
trailer_expr -> 
1648
in
trailer_expr -> 
1648
&
trailer_expr -> 
1648
.
2036
1648
and
trailer_expr -> 
1648
<=
trailer_expr -> 
1648
|
trailer_expr -> 
1648
or
trailer_expr -> 
1648
>=
trailer_expr -> 
1648
:
trailer_expr -> 
1648
+
trailer_expr -> 
1648
**
trailer_expr -> 
1648
>>
trailer_expr -> 
1648
!=
trailer_expr -> 
1648
-
trailer_expr -> 
1648
/
trailer_expr -> 
1648
%
trailer_expr -> 
1648
is
trailer_expr -> 
1648
as
trailer_expr -> 
1648
<
trailer_expr -> 
1648
if
trailer_expr -> 
1648
>
trailer_expr -> 
1648
^
trailer_expr -> 
1648
==
trailer_expr -> 
1648
@
trailer_expr -> 
1648
not
trailer_expr -> 
1649
not
xor_expr -> and_expr
1649
if
xor_expr -> and_expr
1649
|
xor_expr -> and_expr
1649
>
xor_expr -> and_expr
1649
^
2037
1649
<
xor_expr -> and_expr
1649
as
xor_expr -> and_expr
1649
or
xor_expr -> and_expr
1649
:
xor_expr -> and_expr
1649
>=
xor_expr -> and_expr
1649
in
xor_expr -> and_expr
1649
and
xor_expr -> and_expr
1649
is
xor_expr -> and_expr
1649
==
xor_expr -> and_expr
1649
!=
xor_expr -> and_expr
1649
<=
xor_expr -> and_expr
1650
<=
atom -> NAME
1650
@
atom -> NAME
1650
>>
atom -> NAME
1650
==
atom -> NAME
1650
>
atom -> NAME
1650
*
atom -> NAME
1650
-
atom -> NAME
1650
&
atom -> NAME
1650
is
atom -> NAME
1650
.
atom -> NAME
1650
or
atom -> NAME
1650
in
atom -> NAME
1650
as
atom -> NAME
1650
<<
atom -> NAME
1650
+
atom -> NAME
1650
if
atom -> NAME
1650
|
atom -> NAME
1650
and
atom -> NAME
1650
^
atom -> NAME
1650
/
atom -> NAME
1650
[
atom -> NAME
1650
not
atom -> NAME
1650
!=
atom -> NAME
1650
%
atom -> NAME
1650
:
atom -> NAME
1650
<
atom -> NAME
1650
>=
atom -> NAME
1650
**
atom -> NAME
1650
(
atom -> NAME
1650
//
atom -> NAME
1651
if
factor -> power
1651
is
factor -> power
1651
%
factor -> power
1651
==
factor -> power
1651
>=
factor -> power
1651
or
factor -> power
1651
and
factor -> power
1651
/
factor -> power
1651
<
factor -> power
1651
+
factor -> power
1651
:
factor -> power
1651
//
factor -> power
1651
@
factor -> power
1651
in
factor -> power
1651
as
factor -> power
1651
<=
factor -> power
1651
&
factor -> power
1651
!=
factor -> power
1651
<<
factor -> power
1651
|
factor -> power
1651
>
factor -> power
1651
*
factor -> power
1651
^
factor -> power
1651
-
factor -> power
1651
not
factor -> power
1651
>>
factor -> power
1652
>
atom -> True
1652
|
atom -> True
1652
-
atom -> True
1652
==
atom -> True
1652
<<
atom -> True
1652
if
atom -> True
1652
%
atom -> True
1652
/
atom -> True
1652
[
atom -> True
1652
:
atom -> True
1652
*
atom -> True
1652
<=
atom -> True
1652
<
atom -> True
1652
&
atom -> True
1652
+
atom -> True
1652
**
atom -> True
1652
!=
atom -> True
1652
>>
atom -> True
1652
//
atom -> True
1652
and
atom -> True
1652
as
atom -> True
1652
^
atom -> True
1652
is
atom -> True
1652
or
atom -> True
1652
.
atom -> True
1652
(
atom -> True
1652
>=
atom -> True
1652
@
atom -> True
1652
not
atom -> True
1652
in
atom -> True
1653
:
not_test -> comparison
1653
as
not_test -> comparison
1653
or
not_test -> comparison
1653
if
not_test -> comparison
1653
and
not_test -> comparison
1654
not
expr -> xor_expr
1654
or
expr -> xor_expr
1654
==
expr -> xor_expr
1654
in
expr -> xor_expr
1654
|
2038
1654
as
expr -> xor_expr
1654
if
expr -> xor_expr
1654
:
expr -> xor_expr
1654
<=
expr -> xor_expr
1654
is
expr -> xor_expr
1654
<
expr -> xor_expr
1654
>=
expr -> xor_expr
1654
>
expr -> xor_expr
1654
and
expr -> xor_expr
1654
!=
expr -> xor_expr
1655
:
2039
1655
varargslist
2040
1655
NAME
251
1655
vfpdef
253
1656
<=
atom -> False
1656
as
atom -> False
1656
*
atom -> False
1656
not
atom -> False
1656
!=
atom -> False
1656
@
atom -> False
1656
and
atom -> False
1656
if
atom -> False
1656
<<
atom -> False
1656
>
atom -> False
1656
:
atom -> False
1656
+
atom -> False
1656
/
atom -> False
1656
==
atom -> False
1656
&
atom -> False
1656
^
atom -> False
1656
in
atom -> False
1656
[
atom -> False
1656
is
atom -> False
1656
%
atom -> False
1656
>=
atom -> False
1656
//
atom -> False
1656
(
atom -> False
1656
|
atom -> False
1656
<
atom -> False
1656
.
atom -> False
1656
or
atom -> False
1656
**
atom -> False
1656
>>
atom -> False
1656
-
atom -> False
1657
or
and_test -> not_test
1657
and
2041
1657
if
and_test -> not_test
1657
:
and_test -> not_test
1657
as
and_test -> not_test
1658
if
2042
1658
as
test -> or_test
1658
:
test -> or_test
1659
:
test -> lambdef
1659
as
test -> lambdef
1660
~
1630
1660
factor
1631
1660
STRING
1634
1660
shift_expr
1633
1660
expr
1635
1660
term
1636
1660
NUMBER
1637
1660
{
1639
1660
atom_expr
1641
1660
[
1642
1660
-
1643
1660
None
1644
1660
not_test
2043
1660
+
1645
1660
(
1646
1660
arith_expr
1647
1660
atom
1648
1660
and_expr
1649
1660
NAME
1650
1660
power
1651
1660
True
1652
1660
comparison
1653
1660
xor_expr
1654
1660
False
1656
1660
not
1660
1661
classdef
2044
1661
class
1665
1661
funcdef
2045
1661
def
1669
1662
NAME
2046
1663
~
139
1663
factor
140
1663
test
2047
1663
shift_expr
142
1663
STRING
143
1663
expr
144
1663
term
145
1663
NUMBER
146
1663
{
147
1663
atom_expr
148
1663
-
150
1663
[
149
1663
None
151
1663
+
152
1663
(
153
1663
arith_expr
154
1663
atom
155
1663
and_expr
156
1663
NAME
157
1663
power
158
1663
True
159
1663
comparison
160
1663
xor_expr
161
1663
lambda
162
1663
False
163
1663
not_test
164
1663
and_test
165
1663
not
166
1663
or_test
167
1663
lambdef
168
1664
~
139
1664
factor
140
1664
STRING
143
1664
shift_expr
142
1664
expr
144
1664
term
145
1664
NUMBER
146
1664
test
2048
1664
{
147
1664
atom_expr
148
1664
[
149
1664
-
150
1664
None
151
1664
+
152
1664
(
153
1664
arith_expr
154
1664
atom
155
1664
and_expr
156
1664
NAME
157
1664
power
158
1664
True
159
1664
comparison
160
1664
xor_expr
161
1664
lambda
162
1664
False
163
1664
not_test
164
1664
and_test
165
1664
not
166
1664
or_test
167
1664
lambdef
168
1665
NAME
2049
1666
~
compound_stmt -> confdef
1666
del
compound_stmt -> confdef
1666
return
compound_stmt -> confdef
1666
NUMBER
compound_stmt -> confdef
1666
nonlocal
compound_stmt -> confdef
1666
None
compound_stmt -> confdef
1666
NAME
compound_stmt -> confdef
1666
break
compound_stmt -> confdef
1666
pass
compound_stmt -> confdef
1666
not
compound_stmt -> confdef
1666
{
compound_stmt -> confdef
1666
yield
compound_stmt -> confdef
1666
-
compound_stmt -> confdef
1666
False
compound_stmt -> confdef
1666
global
compound_stmt -> confdef
1666
class
compound_stmt -> confdef
1666
continue
compound_stmt -> confdef
1666
for
compound_stmt -> confdef
1666
assert
compound_stmt -> confdef
1666
DEDENT
compound_stmt -> confdef
1666
STRING
compound_stmt -> confdef
1666
try
compound_stmt -> confdef
1666
lambda
compound_stmt -> confdef
1666
while
compound_stmt -> confdef
1666
endsim
compound_stmt -> confdef
1666
begsim
compound_stmt -> confdef
1666
if
compound_stmt -> confdef
1666
True
compound_stmt -> confdef
1666
(
compound_stmt -> confdef
1666
with
compound_stmt -> confdef
1666
raise
compound_stmt -> confdef
1666
[
compound_stmt -> confdef
1666
conf
compound_stmt -> confdef
1666
resetstats
compound_stmt -> confdef
1666
def
compound_stmt -> confdef
1666
+
compound_stmt -> confdef
1666
@
compound_stmt -> confdef
1667
not
compound_stmt -> decorated
1667
with
compound_stmt -> decorated
1667
if
compound_stmt -> decorated
1667
class
compound_stmt -> decorated
1667
{
compound_stmt -> decorated
1667
True
compound_stmt -> decorated
1667
return
compound_stmt -> decorated
1667
False
compound_stmt -> decorated
1667
del
compound_stmt -> decorated
1667
raise
compound_stmt -> decorated
1667
-
compound_stmt -> decorated
1667
global
compound_stmt -> decorated
1667
while
compound_stmt -> decorated
1667
continue
compound_stmt -> decorated
1667
endsim
compound_stmt -> decorated
1667
+
compound_stmt -> decorated
1667
NAME
compound_stmt -> decorated
1667
pass
compound_stmt -> decorated
1667
break
compound_stmt -> decorated
1667
STRING
compound_stmt -> decorated
1667
NUMBER
compound_stmt -> decorated
1667
nonlocal
compound_stmt -> decorated
1667
@
compound_stmt -> decorated
1667
DEDENT
compound_stmt -> decorated
1667
resetstats
compound_stmt -> decorated
1667
yield
compound_stmt -> decorated
1667
(
compound_stmt -> decorated
1667
begsim
compound_stmt -> decorated
1667
None
compound_stmt -> decorated
1667
try
compound_stmt -> decorated
1667
lambda
compound_stmt -> decorated
1667
assert
compound_stmt -> decorated
1667
~
compound_stmt -> decorated
1667
def
compound_stmt -> decorated
1667
for
compound_stmt -> decorated
1667
conf
compound_stmt -> decorated
1667
[
compound_stmt -> decorated
1668
for
compound_stmt -> try_stmt
1668
lambda
compound_stmt -> try_stmt
1668
raise
compound_stmt -> try_stmt
1668
@
compound_stmt -> try_stmt
1668
resetstats
compound_stmt -> try_stmt
1668
(
compound_stmt -> try_stmt
1668
not
compound_stmt -> try_stmt
1668
assert
compound_stmt -> try_stmt
1668
class
compound_stmt -> try_stmt
1668
try
compound_stmt -> try_stmt
1668
break
compound_stmt -> try_stmt
1668
{
compound_stmt -> try_stmt
1668
del
compound_stmt -> try_stmt
1668
False
compound_stmt -> try_stmt
1668
[
compound_stmt -> try_stmt
1668
nonlocal
compound_stmt -> try_stmt
1668
DEDENT
compound_stmt -> try_stmt
1668
None
compound_stmt -> try_stmt
1668
global
compound_stmt -> try_stmt
1668
yield
compound_stmt -> try_stmt
1668
begsim
compound_stmt -> try_stmt
1668
continue
compound_stmt -> try_stmt
1668
True
compound_stmt -> try_stmt
1668
while
compound_stmt -> try_stmt
1668
pass
compound_stmt -> try_stmt
1668
endsim
compound_stmt -> try_stmt
1668
def
compound_stmt -> try_stmt
1668
-
compound_stmt -> try_stmt
1668
if
compound_stmt -> try_stmt
1668
with
compound_stmt -> try_stmt
1668
NUMBER
compound_stmt -> try_stmt
1668
NAME
compound_stmt -> try_stmt
1668
STRING
compound_stmt -> try_stmt
1668
~
compound_stmt -> try_stmt
1668
conf
compound_stmt -> try_stmt
1668
+
compound_stmt -> try_stmt
1668
return
compound_stmt -> try_stmt
1669
NAME
2050
1670
resetstats
stmt -> compound_stmt
1670
begsim
stmt -> compound_stmt
1670
try
stmt -> compound_stmt
1670
assert
stmt -> compound_stmt
1670
yield
stmt -> compound_stmt
1670
with
stmt -> compound_stmt
1670
STRING
stmt -> compound_stmt
1670
{
stmt -> compound_stmt
1670
del
stmt -> compound_stmt
1670
while
stmt -> compound_stmt
1670
if
stmt -> compound_stmt
1670
def
stmt -> compound_stmt
1670
NAME
stmt -> compound_stmt
1670
NUMBER
stmt -> compound_stmt
1670
class
stmt -> compound_stmt
1670
continue
stmt -> compound_stmt
1670
nonlocal
stmt -> compound_stmt
1670
[
stmt -> compound_stmt
1670
DEDENT
stmt -> compound_stmt
1670
None
stmt -> compound_stmt
1670
True
stmt -> compound_stmt
1670
not
stmt -> compound_stmt
1670
(
stmt -> compound_stmt
1670
@
stmt -> compound_stmt
1670
-
stmt -> compound_stmt
1670
break
stmt -> compound_stmt
1670
lambda
stmt -> compound_stmt
1670
pass
stmt -> compound_stmt
1670
for
stmt -> compound_stmt
1670
raise
stmt -> compound_stmt
1670
+
stmt -> compound_stmt
1670
return
stmt -> compound_stmt
1670
~
stmt -> compound_stmt
1670
False
stmt -> compound_stmt
1670
endsim
stmt -> compound_stmt
1670
global
stmt -> compound_stmt
1670
conf
stmt -> compound_stmt
1671
:
2051
1672
lambda
compound_stmt -> while_stmt
1672
def
compound_stmt -> while_stmt
1672
class
compound_stmt -> while_stmt
1672
pass
compound_stmt -> while_stmt
1672
None
compound_stmt -> while_stmt
1672
for
compound_stmt -> while_stmt
1672
resetstats
compound_stmt -> while_stmt
1672
return
compound_stmt -> while_stmt
1672
NAME
compound_stmt -> while_stmt
1672
with
compound_stmt -> while_stmt
1672
global
compound_stmt -> while_stmt
1672
{
compound_stmt -> while_stmt
1672
not
compound_stmt -> while_stmt
1672
True
compound_stmt -> while_stmt
1672
yield
compound_stmt -> while_stmt
1672
assert
compound_stmt -> while_stmt
1672
break
compound_stmt -> while_stmt
1672
@
compound_stmt -> while_stmt
1672
NUMBER
compound_stmt -> while_stmt
1672
continue
compound_stmt -> while_stmt
1672
DEDENT
compound_stmt -> while_stmt
1672
del
compound_stmt -> while_stmt
1672
False
compound_stmt -> while_stmt
1672
conf
compound_stmt -> while_stmt
1672
[
compound_stmt -> while_stmt
1672
begsim
compound_stmt -> while_stmt
1672
(
compound_stmt -> while_stmt
1672
endsim
compound_stmt -> while_stmt
1672
nonlocal
compound_stmt -> while_stmt
1672
if
compound_stmt -> while_stmt
1672
raise
compound_stmt -> while_stmt
1672
STRING
compound_stmt -> while_stmt
1672
-
compound_stmt -> while_stmt
1672
+
compound_stmt -> while_stmt
1672
try
compound_stmt -> while_stmt
1672
while
compound_stmt -> while_stmt
1672
~
compound_stmt -> while_stmt
1673
nonlocal
stmt -> simple_stmt
1673
def
stmt -> simple_stmt
1673
True
stmt -> simple_stmt
1673
endsim
stmt -> simple_stmt
1673
raise
stmt -> simple_stmt
1673
return
stmt -> simple_stmt
1673
~
stmt -> simple_stmt
1673
break
stmt -> simple_stmt
1673
NAME
stmt -> simple_stmt
1673
for
stmt -> simple_stmt
1673
lambda
stmt -> simple_stmt
1673
None
stmt -> simple_stmt
1673
{
stmt -> simple_stmt
1673
+
stmt -> simple_stmt
1673
with
stmt -> simple_stmt
1673
[
stmt -> simple_stmt
1673
not
stmt -> simple_stmt
1673
continue
stmt -> simple_stmt
1673
del
stmt -> simple_stmt
1673
global
stmt -> simple_stmt
1673
if
stmt -> simple_stmt
1673
pass
stmt -> simple_stmt
1673
-
stmt -> simple_stmt
1673
begsim
stmt -> simple_stmt
1673
(
stmt -> simple_stmt
1673
while
stmt -> simple_stmt
1673
NUMBER
stmt -> simple_stmt
1673
@
stmt -> simple_stmt
1673
try
stmt -> simple_stmt
1673
conf
stmt -> simple_stmt
1673
yield
stmt -> simple_stmt
1673
STRING
stmt -> simple_stmt
1673
assert
stmt -> simple_stmt
1673
False
stmt -> simple_stmt
1673
resetstats
stmt -> simple_stmt
1673
class
stmt -> simple_stmt
1673
DEDENT
stmt -> simple_stmt
1674
~
223
1674
factor
224
1674
STRING
225
1674
None
226
1674
arith_expr
227
1674
[
228
1674
expr
229
1674
NUMBER
230
1674
{
231
1674
(
232
1674
and_expr
233
1674
atom
234
1674
-
235
1674
expr_list
2052
1674
atom_expr
237
1674
+
238
1674
False
239
1674
True
240
1674
power
241
1674
term
242
1674
NAME
243
1674
shift_expr
244
1674
xor_expr
245
1675
pass
compound_stmt -> with_stmt
1675
raise
compound_stmt -> with_stmt
1675
if
compound_stmt -> with_stmt
1675
DEDENT
compound_stmt -> with_stmt
1675
del
compound_stmt -> with_stmt
1675
endsim
compound_stmt -> with_stmt
1675
+
compound_stmt -> with_stmt
1675
assert
compound_stmt -> with_stmt
1675
True
compound_stmt -> with_stmt
1675
class
compound_stmt -> with_stmt
1675
{
compound_stmt -> with_stmt
1675
global
compound_stmt -> with_stmt
1675
not
compound_stmt -> with_stmt
1675
with
compound_stmt -> with_stmt
1675
return
compound_stmt -> with_stmt
1675
(
compound_stmt -> with_stmt
1675
NUMBER
compound_stmt -> with_stmt
1675
[
compound_stmt -> with_stmt
1675
STRING
compound_stmt -> with_stmt
1675
nonlocal
compound_stmt -> with_stmt
1675
False
compound_stmt -> with_stmt
1675
~
compound_stmt -> with_stmt
1675
yield
compound_stmt -> with_stmt
1675
conf
compound_stmt -> with_stmt
1675
try
compound_stmt -> with_stmt
1675
lambda
compound_stmt -> with_stmt
1675
@
compound_stmt -> with_stmt
1675
for
compound_stmt -> with_stmt
1675
break
compound_stmt -> with_stmt
1675
begsim
compound_stmt -> with_stmt
1675
None
compound_stmt -> with_stmt
1675
NAME
compound_stmt -> with_stmt
1675
while
compound_stmt -> with_stmt
1675
def
compound_stmt -> with_stmt
1675
resetstats
compound_stmt -> with_stmt
1675
continue
compound_stmt -> with_stmt
1675
-
compound_stmt -> with_stmt
1676
STRING
compound_stmt -> funcdef
1676
lambda
compound_stmt -> funcdef
1676
False
compound_stmt -> funcdef
1676
[
compound_stmt -> funcdef
1676
try
compound_stmt -> funcdef
1676
+
compound_stmt -> funcdef
1676
del
compound_stmt -> funcdef
1676
with
compound_stmt -> funcdef
1676
for
compound_stmt -> funcdef
1676
class
compound_stmt -> funcdef
1676
return
compound_stmt -> funcdef
1676
-
compound_stmt -> funcdef
1676
yield
compound_stmt -> funcdef
1676
not
compound_stmt -> funcdef
1676
endsim
compound_stmt -> funcdef
1676
break
compound_stmt -> funcdef
1676
while
compound_stmt -> funcdef
1676
{
compound_stmt -> funcdef
1676
DEDENT
compound_stmt -> funcdef
1676
(
compound_stmt -> funcdef
1676
def
compound_stmt -> funcdef
1676
NUMBER
compound_stmt -> funcdef
1676
conf
compound_stmt -> funcdef
1676
None
compound_stmt -> funcdef
1676
NAME
compound_stmt -> funcdef
1676
assert
compound_stmt -> funcdef
1676
pass
compound_stmt -> funcdef
1676
raise
compound_stmt -> funcdef
1676
True
compound_stmt -> funcdef
1676
begsim
compound_stmt -> funcdef
1676
nonlocal
compound_stmt -> funcdef
1676
resetstats
compound_stmt -> funcdef
1676
~
compound_stmt -> funcdef
1676
if
compound_stmt -> funcdef
1676
@
compound_stmt -> funcdef
1676
continue
compound_stmt -> funcdef
1676
global
compound_stmt -> funcdef
1677
NEWLINE
2053
1678
continue
compound_stmt -> classdef
1678
(
compound_stmt -> classdef
1678
[
compound_stmt -> classdef
1678
STRING
compound_stmt -> classdef
1678
-
compound_stmt -> classdef
1678
NAME
compound_stmt -> classdef
1678
resetstats
compound_stmt -> classdef
1678
yield
compound_stmt -> classdef
1678
class
compound_stmt -> classdef
1678
lambda
compound_stmt -> classdef
1678
+
compound_stmt -> classdef
1678
assert
compound_stmt -> classdef
1678
with
compound_stmt -> classdef
1678
@
compound_stmt -> classdef
1678
endsim
compound_stmt -> classdef
1678
del
compound_stmt -> classdef
1678
raise
compound_stmt -> classdef
1678
None
compound_stmt -> classdef
1678
~
compound_stmt -> classdef
1678
if
compound_stmt -> classdef
1678
global
compound_stmt -> classdef
1678
return
compound_stmt -> classdef
1678
DEDENT
compound_stmt -> classdef
1678
while
compound_stmt -> classdef
1678
def
compound_stmt -> classdef
1678
nonlocal
compound_stmt -> classdef
1678
pass
compound_stmt -> classdef
1678
begsim
compound_stmt -> classdef
1678
try
compound_stmt -> classdef
1678
conf
compound_stmt -> classdef
1678
for
compound_stmt -> classdef
1678
True
compound_stmt -> classdef
1678
{
compound_stmt -> classdef
1678
break
compound_stmt -> classdef
1678
NUMBER
compound_stmt -> classdef
1678
not
compound_stmt -> classdef
1678
False
compound_stmt -> classdef
1679
del
compound_stmt -> if_stmt
1679
endsim
compound_stmt -> if_stmt
1679
NUMBER
compound_stmt -> if_stmt
1679
pass
compound_stmt -> if_stmt
1679
STRING
compound_stmt -> if_stmt
1679
~
compound_stmt -> if_stmt
1679
+
compound_stmt -> if_stmt
1679
NAME
compound_stmt -> if_stmt
1679
while
compound_stmt -> if_stmt
1679
not
compound_stmt -> if_stmt
1679
False
compound_stmt -> if_stmt
1679
continue
compound_stmt -> if_stmt
1679
raise
compound_stmt -> if_stmt
1679
try
compound_stmt -> if_stmt
1679
None
compound_stmt -> if_stmt
1679
begsim
compound_stmt -> if_stmt
1679
global
compound_stmt -> if_stmt
1679
{
compound_stmt -> if_stmt
1679
return
compound_stmt -> if_stmt
1679
@
compound_stmt -> if_stmt
1679
conf
compound_stmt -> if_stmt
1679
class
compound_stmt -> if_stmt
1679
resetstats
compound_stmt -> if_stmt
1679
if
compound_stmt -> if_stmt
1679
True
compound_stmt -> if_stmt
1679
def
compound_stmt -> if_stmt
1679
lambda
compound_stmt -> if_stmt
1679
nonlocal
compound_stmt -> if_stmt
1679
yield
compound_stmt -> if_stmt
1679
[
compound_stmt -> if_stmt
1679
DEDENT
compound_stmt -> if_stmt
1679
with
compound_stmt -> if_stmt
1679
-
compound_stmt -> if_stmt
1679
(
compound_stmt -> if_stmt
1679
break
compound_stmt -> if_stmt
1679
assert
compound_stmt -> if_stmt
1679
for
compound_stmt -> if_stmt
1680
if
compound_stmt -> for_stmt
1680
try
compound_stmt -> for_stmt
1680
global
compound_stmt -> for_stmt
1680
endsim
compound_stmt -> for_stmt
1680
yield
compound_stmt -> for_stmt
1680
DEDENT
compound_stmt -> for_stmt
1680
break
compound_stmt -> for_stmt
1680
raise
compound_stmt -> for_stmt
1680
continue
compound_stmt -> for_stmt
1680
NUMBER
compound_stmt -> for_stmt
1680
def
compound_stmt -> for_stmt
1680
del
compound_stmt -> for_stmt
1680
~
compound_stmt -> for_stmt
1680
{
compound_stmt -> for_stmt
1680
return
compound_stmt -> for_stmt
1680
while
compound_stmt -> for_stmt
1680
resetstats
compound_stmt -> for_stmt
1680
assert
compound_stmt -> for_stmt
1680
begsim
compound_stmt -> for_stmt
1680
[
compound_stmt -> for_stmt
1680
+
compound_stmt -> for_stmt
1680
pass
compound_stmt -> for_stmt
1680
True
compound_stmt -> for_stmt
1680
lambda
compound_stmt -> for_stmt
1680
NAME
compound_stmt -> for_stmt
1680
class
compound_stmt -> for_stmt
1680
conf
compound_stmt -> for_stmt
1680
-
compound_stmt -> for_stmt
1680
(
compound_stmt -> for_stmt
1680
for
compound_stmt -> for_stmt
1680
not
compound_stmt -> for_stmt
1680
@
compound_stmt -> for_stmt
1680
nonlocal
compound_stmt -> for_stmt
1680
False
compound_stmt -> for_stmt
1680
None
compound_stmt -> for_stmt
1680
with
compound_stmt -> for_stmt
1680
STRING
compound_stmt -> for_stmt
1681
~
255
1681
factor
256
1681
STRING
257
1681
shift_expr
258
1681
expr
259
1681
arith_expr
260
1681
term
261
1681
NUMBER
262
1681
{
263
1681
and_test
264
1681
atom_expr
265
1681
[
266
1681
-
267
1681
None
268
1681
+
269
1681
(
270
1681
with_items
2054
1681
atom
272
1681
and_expr
273
1681
NAME
274
1681
power
275
1681
True
276
1681
comparison
277
1681
xor_expr
278
1681
lambda
279
1681
False
280
1681
not_test
281
1681
with_item
282
1681
test
283
1681
or_test
284
1681
lambdef
285
1681
not
286
1682
factor
1
1682
decorators
1661
1682
(
3
1682
STRING
4
1682
expr
5
1682
term
6
1682
conf
1662
1682
not
8
1682
while
1663
1682
or_test
10
1682
if
1664
1682
~
12
1682
atom_expr
13
1682
comparison
14
1682
None
15
1682
class
1665
1682
xor_expr
17
1682
arith_expr
18
1682
+
19
1682
confdef
1666
1682
decorated
1667
1682
atom
22
1682
try_stmt
1668
1682
def
1669
1682
compound_stmt
1670
1682
try
1671
1682
NUMBER
26
1682
NAME
27
1682
False
28
1682
shift_expr
29
1682
while_stmt
1672
1682
[
32
1682
and_expr
33
1682
not_test
34
1682
{
35
1682
-
36
1682
simple_stmt
1673
1682
for
1674
1682
and_test
39
1682
@
40
1682
with_stmt
1675
1682
funcdef
1676
1682
small_stmt
1677
1682
power
43
1682
classdef
1678
1682
lambdef
45
1682
lambda
46
1682
test
47
1682
True
48
1682
if_stmt
1679
1682
for_stmt
1680
1682
with
1681
1682
flow_stmt
53
1682
break
54
1682
raise
55
1682
yield
56
1682
assert
57
1682
continue_stmt
58
1682
stat_stmt
59
1682
stmt_list
2055
1682
return_stmt
60
1682
test_list
61
1682
stmt
1682
1682
continue
62
1682
yield_stmt
63
1682
decorator
64
1682
DEDENT
stmt_list -> stmt
1682
sim_stmt
65
1682
resetstats
66
1682
del
67
1682
return
68
1682
raise_stmt
69
1682
nonlocal
70
1682
pass_stmt
71
1682
expr_stmt
72
1682
assert_stmt
74
1682
endsim
75
1682
pass
76
1682
global_stmt
77
1682
del_stmt
78
1682
global
79
1682
break_stmt
82
1682
begsim
83
1682
nonlocal_stmt
84
1683
DEDENT
2056
1684
~
2057
1684
factor
2058
1684
STRING
2059
1684
shift_expr
2060
1684
term
2061
1684
atom_expr
2062
1684
NUMBER
2063
1684
and_expr
2064
1684
{
2065
1684
[
2066
1684
-
2067
1684
None
2068
1684
(
2069
1684
arith_expr
2070
1684
atom
2071
1684
+
2072
1684
NAME
2073
1684
power
2074
1684
True
2075
1684
comparison
2076
1684
xor_expr
2077
1684
False
2078
1684
not_test
2079
1684
and_test
2080
1684
or_test
2081
1684
not
2082
1684
expr
2083
1685
,
factor -> ~ factor
1685
<
factor -> ~ factor
1685
in
factor -> ~ factor
1685
==
factor -> ~ factor
1685
|
factor -> ~ factor
1685
<<
factor -> ~ factor
1685
>
factor -> ~ factor
1685
not
factor -> ~ factor
1685
<=
factor -> ~ factor
1685
//
factor -> ~ factor
1685
>=
factor -> ~ factor
1685
>>
factor -> ~ factor
1685
]
factor -> ~ factor
1685
-
factor -> ~ factor
1685
*
factor -> ~ factor
1685
/
factor -> ~ factor
1685
if
factor -> ~ factor
1685
^
factor -> ~ factor
1685
and
factor -> ~ factor
1685
is
factor -> ~ factor
1685
+
factor -> ~ factor
1685
or
factor -> ~ factor
1685
&
factor -> ~ factor
1685
!=
factor -> ~ factor
1685
%
factor -> ~ factor
1685
@
factor -> ~ factor
1686
~
1154
1686
factor
1155
1686
STRING
1156
1686
term
2084
1686
atom_expr
1160
1686
NUMBER
1161
1686
{
1163
1686
[
1164
1686
-
1165
1686
None
1166
1686
(
1167
1686
atom
1169
1686
+
1170
1686
NAME
1172
1686
power
1173
1686
True
1174
1686
False
1177
1687
~
1154
1687
factor
1155
1687
STRING
1156
1687
atom_expr
1160
1687
NUMBER
1161
1687
{
1163
1687
[
1164
1687
-
1165
1687
None
1166
1687
(
1167
1687
atom
1169
1687
+
1170
1687
NAME
1172
1687
power
1173
1687
True
1174
1687
False
1177
1687
term
2085
1688
~
1154
1688
factor
1155
1688
STRING
1156
1688
atom_expr
1160
1688
NUMBER
1161
1688
{
1163
1688
[
1164
1688
-
1165
1688
None
1166
1688
(
1167
1688
term
2086
1688
atom
1169
1688
+
1170
1688
NAME
1172
1688
power
1173
1688
True
1174
1688
False
1177
1689
~
1154
1689
factor
1155
1689
STRING
1156
1689
atom_expr
1160
1689
NUMBER
1161
1689
{
1163
1689
term
2087
1689
[
1164
1689
-
1165
1689
None
1166
1689
(
1167
1689
atom
1169
1689
+
1170
1689
NAME
1172
1689
power
1173
1689
True
1174
1689
False
1177
1690
~
1154
1690
factor
1155
1690
STRING
1156
1690
atom_expr
1160
1690
NUMBER
1161
1690
{
1163
1690
[
1164
1690
-
1165
1690
None
1166
1690
(
1167
1690
atom
1169
1690
+
1170
1690
term
2088
1690
NAME
1172
1690
power
1173
1690
True
1174
1690
False
1177
1691
~
1154
1691
factor
1155
1691
STRING
1156
1691
shift_expr
1157
1691
arith_expr
1158
1691
term
1159
1691
atom_expr
1160
1691
NUMBER
1161
1691
{
1163
1691
[
1164
1691
-
1165
1691
None
1166
1691
(
1167
1691
atom
1169
1691
+
1170
1691
NAME
1172
1691
power
1173
1691
True
1174
1691
False
1177
1691
and_expr
2089
1692
~
1154
1692
factor
1155
1692
STRING
1156
1692
arith_expr
1158
1692
term
1159
1692
atom_expr
1160
1692
NUMBER
1161
1692
{
1163
1692
[
1164
1692
-
1165
1692
shift_expr
2090
1692
None
1166
1692
(
1167
1692
atom
1169
1692
+
1170
1692
NAME
1172
1692
power
1173
1692
True
1174
1692
False
1177
1693
~
1154
1693
factor
1155
1693
STRING
1156
1693
arith_expr
1158
1693
term
1159
1693
atom_expr
1160
1693
NUMBER
1161
1693
{
1163
1693
[
1164
1693
-
1165
1693
None
1166
1693
(
1167
1693
atom
1169
1693
+
1170
1693
shift_expr
2091
1693
NAME
1172
1693
power
1173
1693
True
1174
1693
False
1177
1694
~
1154
1694
arith_expr
2092
1694
factor
1155
1694
STRING
1156
1694
term
1159
1694
atom_expr
1160
1694
NUMBER
1161
1694
{
1163
1694
[
1164
1694
-
1165
1694
None
1166
1694
(
1167
1694
atom
1169
1694
+
1170
1694
NAME
1172
1694
power
1173
1694
True
1174
1694
False
1177
1695
~
1154
1695
factor
1155
1695
STRING
1156
1695
term
1159
1695
arith_expr
2093
1695
atom_expr
1160
1695
NUMBER
1161
1695
{
1163
1695
[
1164
1695
-
1165
1695
None
1166
1695
(
1167
1695
atom
1169
1695
+
1170
1695
NAME
1172
1695
power
1173
1695
True
1174
1695
False
1177
1696
~
1154
1696
STRING
1156
1696
atom_expr
1160
1696
factor
2094
1696
NUMBER
1161
1696
{
1163
1696
[
1164
1696
None
1166
1696
-
1165
1696
(
1167
1696
atom
1169
1696
+
1170
1696
NAME
1172
1696
power
1173
1696
True
1174
1696
False
1177
1697
//
atom -> { }
1697
[
atom -> { }
1697
|
atom -> { }
1697
>
atom -> { }
1697
>=
atom -> { }
1697
==
atom -> { }
1697
&
atom -> { }
1697
not
atom -> { }
1697
**
atom -> { }
1697
in
atom -> { }
1697
,
atom -> { }
1697
or
atom -> { }
1697
<
atom -> { }
1697
!=
atom -> { }
1697
+
atom -> { }
1697
<<
atom -> { }
1697
^
atom -> { }
1697
<=
atom -> { }
1697
if
atom -> { }
1697
/
atom -> { }
1697
is
atom -> { }
1697
-
atom -> { }
1697
>>
atom -> { }
1697
%
atom -> { }
1697
.
atom -> { }
1697
(
atom -> { }
1697
and
atom -> { }
1697
*
atom -> { }
1697
]
atom -> { }
1697
@
atom -> { }
1698
]
2095
1699
==
atom -> [ ]
1699
%
atom -> [ ]
1699
**
atom -> [ ]
1699
.
atom -> [ ]
1699
<<
atom -> [ ]
1699
not
atom -> [ ]
1699
/
atom -> [ ]
1699
*
atom -> [ ]
1699
if
atom -> [ ]
1699
!=
atom -> [ ]
1699
<=
atom -> [ ]
1699
@
atom -> [ ]
1699
-
atom -> [ ]
1699
>>
atom -> [ ]
1699
^
atom -> [ ]
1699
|
atom -> [ ]
1699
,
atom -> [ ]
1699
<
atom -> [ ]
1699
]
atom -> [ ]
1699
[
atom -> [ ]
1699
is
atom -> [ ]
1699
in
atom -> [ ]
1699
>
atom -> [ ]
1699
+
atom -> [ ]
1699
>=
atom -> [ ]
1699
and
atom -> [ ]
1699
or
atom -> [ ]
1699
&
atom -> [ ]
1699
(
atom -> [ ]
1699
//
atom -> [ ]
1700
if
factor -> - factor
1700
/
factor -> - factor
1700
]
factor -> - factor
1700
,
factor -> - factor
1700
not
factor -> - factor
1700
<
factor -> - factor
1700
or
factor -> - factor
1700
//
factor -> - factor
1700
!=
factor -> - factor
1700
%
factor -> - factor
1700
|
factor -> - factor
1700
>
factor -> - factor
1700
+
factor -> - factor
1700
-
factor -> - factor
1700
^
factor -> - factor
1700
in
factor -> - factor
1700
<<
factor -> - factor
1700
&
factor -> - factor
1700
<=
factor -> - factor
1700
==
factor -> - factor
1700
and
factor -> - factor
1700
@
factor -> - factor
1700
>=
factor -> - factor
1700
is
factor -> - factor
1700
>>
factor -> - factor
1700
*
factor -> - factor
1701
-
atom -> ( )
1701
==
atom -> ( )
1701
/
atom -> ( )
1701
<=
atom -> ( )
1701
(
atom -> ( )
1701
&
atom -> ( )
1701
[
atom -> ( )
1701
,
atom -> ( )
1701
^
atom -> ( )
1701
or
atom -> ( )
1701
+
atom -> ( )
1701
>>
atom -> ( )
1701
]
atom -> ( )
1701
is
atom -> ( )
1701
*
atom -> ( )
1701
if
atom -> ( )
1701
and
atom -> ( )
1701
>=
atom -> ( )
1701
>
atom -> ( )
1701
@
atom -> ( )
1701
in
atom -> ( )
1701
not
atom -> ( )
1701
<
atom -> ( )
1701
.
atom -> ( )
1701
//
atom -> ( )
1701
%
atom -> ( )
1701
<<
atom -> ( )
1701
|
atom -> ( )
1701
**
atom -> ( )
1701
!=
atom -> ( )
1702
)
2096
1703
~
544
1703
factor
545
1703
STRING
546
1703
shift_expr
547
1703
expr
548
1703
arith_expr
549
1703
term
550
1703
atom_expr
551
1703
NUMBER
552
1703
subscript
553
1703
{
554
1703
[
555
1703
-
556
1703
None
557
1703
+
558
1703
(
559
1703
subscriptlist
2097
1703
atom
561
1703
and_expr
562
1703
NAME
563
1703
power
564
1703
True
565
1703
comparison
566
1703
xor_expr
567
1703
lambda
568
1703
False
569
1703
not_test
570
1703
and_test
571
1703
test
572
1703
or_test
573
1703
not
574
1703
:
maybe_test -> 
1703
maybe_test
575
1703
lambdef
576
1704
)
2098
1704
~
579
1704
factor
580
1704
STRING
581
1704
shift_expr
582
1704
arith_expr
583
1704
term
584
1704
NUMBER
585
1704
and_expr
586
1704
{
587
1704
atom_expr
589
1704
[
590
1704
-
591
1704
None
592
1704
(
593
1704
atom
594
1704
+
595
1704
not_test
596
1704
arglist
2099
1704
test
597
1704
NAME
598
1704
power
599
1704
True
600
1704
comparison
601
1704
xor_expr
602
1704
lambdef
603
1704
False
604
1704
argument
605
1704
and_test
606
1704
lambda
607
1704
or_test
608
1704
expr
609
1704
not
610
1704
**
611
1704
*
612
1705
[
1703
1705
(
1704
1705
//
trailer_expr -> 
1705
trailer
1705
1705
<<
trailer_expr -> 
1705
*
trailer_expr -> 
1705
in
trailer_expr -> 
1705
&
trailer_expr -> 
1705
trailer_expr
2100
1705
and
trailer_expr -> 
1705
.
1707
1705
<=
trailer_expr -> 
1705
,
trailer_expr -> 
1705
|
trailer_expr -> 
1705
or
trailer_expr -> 
1705
>=
trailer_expr -> 
1705
+
trailer_expr -> 
1705
**
trailer_expr -> 
1705
>>
trailer_expr -> 
1705
!=
trailer_expr -> 
1705
-
trailer_expr -> 
1705
/
trailer_expr -> 
1705
]
trailer_expr -> 
1705
%
trailer_expr -> 
1705
is
trailer_expr -> 
1705
<
trailer_expr -> 
1705
>
trailer_expr -> 
1705
if
trailer_expr -> 
1705
^
trailer_expr -> 
1705
==
trailer_expr -> 
1705
@
trailer_expr -> 
1705
not
trailer_expr -> 
1706
<=
atom_expr -> atom trailer_expr
1706
or
atom_expr -> atom trailer_expr
1706
,
atom_expr -> atom trailer_expr
1706
*
atom_expr -> atom trailer_expr
1706
>=
atom_expr -> atom trailer_expr
1706
**
atom_expr -> atom trailer_expr
1706
&
atom_expr -> atom trailer_expr
1706
%
atom_expr -> atom trailer_expr
1706
if
atom_expr -> atom trailer_expr
1706
+
atom_expr -> atom trailer_expr
1706
//
atom_expr -> atom trailer_expr
1706
is
atom_expr -> atom trailer_expr
1706
!=
atom_expr -> atom trailer_expr
1706
|
atom_expr -> atom trailer_expr
1706
<
atom_expr -> atom trailer_expr
1706
@
atom_expr -> atom trailer_expr
1706
not
atom_expr -> atom trailer_expr
1706
-
atom_expr -> atom trailer_expr
1706
in
atom_expr -> atom trailer_expr
1706
/
atom_expr -> atom trailer_expr
1706
^
atom_expr -> atom trailer_expr
1706
>
atom_expr -> atom trailer_expr
1706
==
atom_expr -> atom trailer_expr
1706
<<
atom_expr -> atom trailer_expr
1706
>>
atom_expr -> atom trailer_expr
1706
]
atom_expr -> atom trailer_expr
1706
and
atom_expr -> atom trailer_expr
1707
NAME
2101
1708
<
factor -> + factor
1708
,
factor -> + factor
1708
in
factor -> + factor
1708
|
factor -> + factor
1708
==
factor -> + factor
1708
>
factor -> + factor
1708
-
factor -> + factor
1708
and
factor -> + factor
1708
*
factor -> + factor
1708
if
factor -> + factor
1708
%
factor -> + factor
1708
@
factor -> + factor
1708
is
factor -> + factor
1708
//
factor -> + factor
1708
&
factor -> + factor
1708
]
factor -> + factor
1708
^
factor -> + factor
1708
>=
factor -> + factor
1708
not
factor -> + factor
1708
/
factor -> + factor
1708
or
factor -> + factor
1708
!=
factor -> + factor
1708
<<
factor -> + factor
1708
>>
factor -> + factor
1708
<=
factor -> + factor
1708
+
factor -> + factor
1709
~
1154
1709
factor
1155
1709
STRING
1156
1709
shift_expr
1157
1709
arith_expr
1158
1709
term
1159
1709
atom_expr
1160
1709
NUMBER
1161
1709
{
1163
1709
[
1164
1709
xor_expr
2102
1709
-
1165
1709
None
1166
1709
(
1167
1709
atom
1169
1709
+
1170
1709
and_expr
1171
1709
NAME
1172
1709
power
1173
1709
True
1174
1709
False
1177
1710
~
1154
1710
factor
1155
1710
STRING
1156
1710
shift_expr
1157
1710
arith_expr
1158
1710
term
1159
1710
atom_expr
1160
1710
NUMBER
1161
1710
{
1163
1710
[
1164
1710
-
1165
1710
None
1166
1710
(
1167
1710
atom
1169
1710
+
1170
1710
expr
2103
1710
and_expr
1171
1710
NAME
1172
1710
power
1173
1710
True
1174
1710
xor_expr
1176
1710
False
1177
1711
~
1154
1711
factor
1155
1711
STRING
1156
1711
shift_expr
1157
1711
arith_expr
1158
1711
term
1159
1711
atom_expr
1160
1711
NUMBER
1161
1711
{
1163
1711
[
1164
1711
-
1165
1711
None
1166
1711
(
1167
1711
atom
1169
1711
+
1170
1711
and_expr
1171
1711
NAME
1172
1711
power
1173
1711
True
1174
1711
and_test
2104
1711
comparison
1175
1711
xor_expr
1176
1711
False
1177
1711
not_test
1178
1711
not
1181
1711
expr
1182
1712
or_test
2105
1712
factor
1155
1712
~
1154
1712
shift_expr
1157
1712
STRING
1156
1712
arith_expr
1158
1712
term
1159
1712
atom_expr
1160
1712
NUMBER
1161
1712
{
1163
1712
[
1164
1712
-
1165
1712
None
1166
1712
(
1167
1712
atom
1169
1712
+
1170
1712
and_expr
1171
1712
NAME
1172
1712
power
1173
1712
True
1174
1712
comparison
1175
1712
xor_expr
1176
1712
False
1177
1712
not_test
1178
1712
and_test
1179
1712
not
1181
1712
expr
1182
1713
~
509
1713
factor
510
1713
STRING
511
1713
shift_expr
512
1713
term
513
1713
NUMBER
514
1713
{
515
1713
atom_expr
516
1713
[
517
1713
-
518
1713
None
519
1713
(
520
1713
atom
521
1713
arith_expr
522
1713
False
523
1713
+
524
1713
NAME
526
1713
power
527
1713
True
528
1713
xor_expr
529
1713
comparison
530
1713
and_expr
531
1713
not_test
532
1713
or_test
2106
1713
not
533
1713
expr
534
1713
and_test
535
1714
,
not_test -> not not_test
1714
if
not_test -> not not_test
1714
]
not_test -> not not_test
1714
and
not_test -> not not_test
1714
or
not_test -> not not_test
1715
~
1154
1715
factor
1155
1715
STRING
1156
1715
shift_expr
1157
1715
arith_expr
1158
1715
term
1159
1715
atom_expr
1160
1715
NUMBER
1161
1715
{
1163
1715
[
1164
1715
-
1165
1715
None
1166
1715
(
1167
1715
atom
1169
1715
+
1170
1715
and_expr
1171
1715
NAME
1172
1715
power
1173
1715
True
1174
1715
xor_expr
1176
1715
False
1177
1715
comparison
2107
1715
expr
1182
1716
~
1154
1716
factor
1155
1716
STRING
1156
1716
shift_expr
1157
1716
arith_expr
1158
1716
term
1159
1716
atom_expr
1160
1716
NUMBER
1161
1716
{
1163
1716
[
1164
1716
-
1165
1716
None
1166
1716
(
1167
1716
atom
1169
1716
+
1170
1716
and_expr
1171
1716
NAME
1172
1716
power
1173
1716
True
1174
1716
comparison
1175
1716
xor_expr
1176
1716
False
1177
1716
not_test
1178
1716
and_test
1179
1716
or_test
1180
1716
not
1181
1716
expr
1182
1716
test
2108
1716
lambda
1183
1716
lambdef
1184
1717
:
2109
1718
,
trailer -> [ subscriptlist ]
1718
//
trailer -> [ subscriptlist ]
1718
/
trailer -> [ subscriptlist ]
1718
^
trailer -> [ subscriptlist ]
1718
.
trailer -> [ subscriptlist ]
1718
<
trailer -> [ subscriptlist ]
1718
<<
trailer -> [ subscriptlist ]
1718
in
trailer -> [ subscriptlist ]
1718
@
trailer -> [ subscriptlist ]
1718
>
trailer -> [ subscriptlist ]
1718
for
trailer -> [ subscriptlist ]
1718
*
trailer -> [ subscriptlist ]
1718
and
trailer -> [ subscriptlist ]
1718
+
trailer -> [ subscriptlist ]
1718
(
trailer -> [ subscriptlist ]
1718
is
trailer -> [ subscriptlist ]
1718
or
trailer -> [ subscriptlist ]
1718
<=
trailer -> [ subscriptlist ]
1718
if
trailer -> [ subscriptlist ]
1718
|
trailer -> [ subscriptlist ]
1718
==
trailer -> [ subscriptlist ]
1718
not
trailer -> [ subscriptlist ]
1718
-
trailer -> [ subscriptlist ]
1718
!=
trailer -> [ subscriptlist ]
1718
&
trailer -> [ subscriptlist ]
1718
[
trailer -> [ subscriptlist ]
1718
>>
trailer -> [ subscriptlist ]
1718
%
trailer -> [ subscriptlist ]
1718
>=
trailer -> [ subscriptlist ]
1718
**
trailer -> [ subscriptlist ]
1718
]
trailer -> [ subscriptlist ]
1719
>=
trailer -> ( arglist )
1719
//
trailer -> ( arglist )
1719
%
trailer -> ( arglist )
1719
in
trailer -> ( arglist )
1719
&
trailer -> ( arglist )
1719
for
trailer -> ( arglist )
1719
,
trailer -> ( arglist )
1719
>>
trailer -> ( arglist )
1719
-
trailer -> ( arglist )
1719
^
trailer -> ( arglist )
1719
>
trailer -> ( arglist )
1719
<<
trailer -> ( arglist )
1719
==
trailer -> ( arglist )
1719
<=
trailer -> ( arglist )
1719
]
trailer -> ( arglist )
1719
*
trailer -> ( arglist )
1719
and
trailer -> ( arglist )
1719
/
trailer -> ( arglist )
1719
[
trailer -> ( arglist )
1719
(
trailer -> ( arglist )
1719
<
trailer -> ( arglist )
1719
|
trailer -> ( arglist )
1719
+
trailer -> ( arglist )
1719
not
trailer -> ( arglist )
1719
or
trailer -> ( arglist )
1719
is
trailer -> ( arglist )
1719
.
trailer -> ( arglist )
1719
!=
trailer -> ( arglist )
1719
@
trailer -> ( arglist )
1719
**
trailer -> ( arglist )
1719
if
trailer -> ( arglist )
1720
~
186
1720
factor
187
1720
STRING
188
1720
shift_expr
189
1720
arith_expr
191
1720
term
192
1720
atom_expr
193
1720
NUMBER
196
1720
and_expr
197
1720
{
198
1720
[
199
1720
-
200
1720
None
201
1720
(
202
1720
atom
203
1720
+
204
1720
NAME
205
1720
power
206
1720
True
207
1720
test
2110
1720
comparison
208
1720
xor_expr
209
1720
lambdef
210
1720
False
211
1720
not_test
212
1720
or_test
213
1720
and_test
214
1720
lambda
215
1720
not
216
1720
expr
217
1721
,
lambdef -> lambda varargslist : test
1721
for
lambdef -> lambda varargslist : test
1721
]
lambdef -> lambda varargslist : test
1722
,
trailer -> [ subscriptlist ]
1722
in
trailer -> [ subscriptlist ]
1722
//
trailer -> [ subscriptlist ]
1722
/
trailer -> [ subscriptlist ]
1722
-
trailer -> [ subscriptlist ]
1722
^
trailer -> [ subscriptlist ]
1722
&
trailer -> [ subscriptlist ]
1722
@
trailer -> [ subscriptlist ]
1722
+
trailer -> [ subscriptlist ]
1722
(
trailer -> [ subscriptlist ]
1722
[
trailer -> [ subscriptlist ]
1722
.
trailer -> [ subscriptlist ]
1722
>>
trailer -> [ subscriptlist ]
1722
*
trailer -> [ subscriptlist ]
1722
%
trailer -> [ subscriptlist ]
1722
<<
trailer -> [ subscriptlist ]
1722
**
trailer -> [ subscriptlist ]
1722
|
trailer -> [ subscriptlist ]
1723
//
trailer -> ( arglist )
1723
/
trailer -> ( arglist )
1723
%
trailer -> ( arglist )
1723
in
trailer -> ( arglist )
1723
&
trailer -> ( arglist )
1723
[
trailer -> ( arglist )
1723
@
trailer -> ( arglist )
1723
(
trailer -> ( arglist )
1723
<<
trailer -> ( arglist )
1723
,
trailer -> ( arglist )
1723
*
trailer -> ( arglist )
1723
.
trailer -> ( arglist )
1723
>>
trailer -> ( arglist )
1723
-
trailer -> ( arglist )
1723
|
trailer -> ( arglist )
1723
^
trailer -> ( arglist )
1723
**
trailer -> ( arglist )
1723
+
trailer -> ( arglist )
1724
expr
5
1724
factor
1
1724
(
3
1724
STRING
4
1724
term
6
1724
not
8
1724
or_test
10
1724
~
12
1724
atom_expr
13
1724
comparison
14
1724
shift_expr
29
1724
None
15
1724
power
43
1724
+
19
1724
small_stmt
990
1724
xor_expr
17
1724
arith_expr
18
1724
suite
2111
1724
[
32
1724
simple_stmt
991
1724
atom
22
1724
NUMBER
26
1724
and_test
39
1724
NAME
27
1724
-
36
1724
False
28
1724
lambda
46
1724
test
47
1724
NEWLINE
993
1724
not_test
34
1724
{
35
1724
and_expr
33
1724
lambdef
45
1724
True
48
1724
endsim
75
1724
flow_stmt
53
1724
pass
76
1724
break
54
1724
raise
55
1724
yield
56
1724
assert
57
1724
global_stmt
77
1724
continue_stmt
58
1724
del_stmt
78
1724
stat_stmt
59
1724
global
79
1724
return_stmt
60
1724
test_list
61
1724
continue
62
1724
yield_stmt
63
1724
return
68
1724
sim_stmt
65
1724
resetstats
66
1724
break_stmt
82
1724
del
67
1724
raise_stmt
69
1724
nonlocal
70
1724
pass_stmt
71
1724
begsim
83
1724
expr_stmt
72
1724
nonlocal_stmt
84
1724
assert_stmt
74
1725
~
1218
1725
factor
1217
1725
STRING
1220
1725
term
2112
1725
NUMBER
1224
1725
{
1225
1725
[
1227
1725
atom_expr
1226
1725
-
1228
1725
None
1229
1725
+
1230
1725
(
1231
1725
atom
1232
1725
NAME
1234
1725
power
1235
1725
True
1236
1725
False
1240
1726
~
1218
1726
factor
1217
1726
STRING
1220
1726
NUMBER
1224
1726
{
1225
1726
[
1227
1726
atom_expr
1226
1726
-
1228
1726
None
1229
1726
+
1230
1726
(
1231
1726
atom
1232
1726
NAME
1234
1726
power
1235
1726
True
1236
1726
False
1240
1726
term
2113
1727
~
1218
1727
factor
1217
1727
STRING
1220
1727
NUMBER
1224
1727
{
1225
1727
term
2114
1727
[
1227
1727
atom_expr
1226
1727
-
1228
1727
None
1229
1727
+
1230
1727
(
1231
1727
atom
1232
1727
NAME
1234
1727
power
1235
1727
True
1236
1727
False
1240
1728
~
1218
1728
factor
1217
1728
STRING
1220
1728
NUMBER
1224
1728
{
1225
1728
[
1227
1728
atom_expr
1226
1728
-
1228
1728
None
1229
1728
+
1230
1728
(
1231
1728
term
2115
1728
atom
1232
1728
NAME
1234
1728
power
1235
1728
True
1236
1728
False
1240
1729
~
1218
1729
factor
1217
1729
STRING
1220
1729
NUMBER
1224
1729
{
1225
1729
[
1227
1729
atom_expr
1226
1729
-
1228
1729
None
1229
1729
+
1230
1729
(
1231
1729
atom
1232
1729
term
2116
1729
NAME
1234
1729
power
1235
1729
True
1236
1729
False
1240
1730
,
factor -> ~ factor
1730
<
factor -> ~ factor
1730
in
factor -> ~ factor
1730
==
factor -> ~ factor
1730
|
factor -> ~ factor
1730
<<
factor -> ~ factor
1730
>
factor -> ~ factor
1730
not
factor -> ~ factor
1730
<=
factor -> ~ factor
1730
//
factor -> ~ factor
1730
>=
factor -> ~ factor
1730
>>
factor -> ~ factor
1730
-
factor -> ~ factor
1730
*
factor -> ~ factor
1730
/
factor -> ~ factor
1730
if
factor -> ~ factor
1730
:
factor -> ~ factor
1730
^
factor -> ~ factor
1730
and
factor -> ~ factor
1730
is
factor -> ~ factor
1730
+
factor -> ~ factor
1730
or
factor -> ~ factor
1730
&
factor -> ~ factor
1730
!=
factor -> ~ factor
1730
%
factor -> ~ factor
1730
@
factor -> ~ factor
1731
~
1218
1731
factor
1217
1731
STRING
1220
1731
shift_expr
1219
1731
arith_expr
1222
1731
term
1223
1731
NUMBER
1224
1731
{
1225
1731
atom_expr
1226
1731
[
1227
1731
-
1228
1731
None
1229
1731
+
1230
1731
(
1231
1731
atom
1232
1731
NAME
1234
1731
power
1235
1731
True
1236
1731
False
1240
1731
and_expr
2117
1732
~
1218
1732
factor
1217
1732
STRING
1220
1732
shift_expr
1219
1732
expr
1221
1732
arith_expr
1222
1732
term
1223
1732
NUMBER
1224
1732
{
1225
1732
atom_expr
1226
1732
[
1227
1732
-
1228
1732
None
1229
1732
+
1230
1732
(
1231
1732
atom
1232
1732
and_expr
1233
1732
NAME
1234
1732
power
1235
1732
True
1236
1732
xor_expr
1238
1732
False
1240
1732
comparison
2118
1733
~
1218
1733
factor
1217
1733
STRING
1220
1733
arith_expr
1222
1733
term
1223
1733
NUMBER
1224
1733
{
1225
1733
[
1227
1733
atom_expr
1226
1733
-
1228
1733
shift_expr
2119
1733
None
1229
1733
+
1230
1733
(
1231
1733
atom
1232
1733
NAME
1234
1733
power
1235
1733
True
1236
1733
False
1240
1734
~
1218
1734
factor
1217
1734
STRING
1220
1734
arith_expr
1222
1734
term
1223
1734
NUMBER
1224
1734
{
1225
1734
[
1227
1734
atom_expr
1226
1734
-
1228
1734
None
1229
1734
+
1230
1734
(
1231
1734
atom
1232
1734
shift_expr
2120
1734
NAME
1234
1734
power
1235
1734
True
1236
1734
False
1240
1735
~
1218
1735
factor
1217
1735
STRING
1220
1735
arith_expr
2121
1735
term
1223
1735
NUMBER
1224
1735
{
1225
1735
[
1227
1735
atom_expr
1226
1735
-
1228
1735
None
1229
1735
+
1230
1735
(
1231
1735
atom
1232
1735
NAME
1234
1735
power
1235
1735
True
1236
1735
False
1240
1736
~
1218
1736
factor
1217
1736
STRING
1220
1736
term
1223
1736
arith_expr
2122
1736
NUMBER
1224
1736
{
1225
1736
[
1227
1736
atom_expr
1226
1736
-
1228
1736
None
1229
1736
+
1230
1736
(
1231
1736
atom
1232
1736
NAME
1234
1736
power
1235
1736
True
1236
1736
False
1240
1737
//
atom -> { }
1737
[
atom -> { }
1737
|
atom -> { }
1737
>
atom -> { }
1737
>=
atom -> { }
1737
==
atom -> { }
1737
&
atom -> { }
1737
not
atom -> { }
1737
**
atom -> { }
1737
in
atom -> { }
1737
,
atom -> { }
1737
or
atom -> { }
1737
:
atom -> { }
1737
<
atom -> { }
1737
!=
atom -> { }
1737
+
atom -> { }
1737
<<
atom -> { }
1737
^
atom -> { }
1737
<=
atom -> { }
1737
if
atom -> { }
1737
/
atom -> { }
1737
is
atom -> { }
1737
-
atom -> { }
1737
>>
atom -> { }
1737
%
atom -> { }
1737
.
atom -> { }
1737
(
atom -> { }
1737
and
atom -> { }
1737
*
atom -> { }
1737
@
atom -> { }
1738
~
1218
1738
STRING
1220
1738
NUMBER
1224
1738
factor
2123
1738
{
1225
1738
[
1227
1738
atom_expr
1226
1738
None
1229
1738
-
1228
1738
+
1230
1738
(
1231
1738
atom
1232
1738
NAME
1234
1738
power
1235
1738
True
1236
1738
False
1240
1739
]
2124
1740
==
atom -> [ ]
1740
%
atom -> [ ]
1740
**
atom -> [ ]
1740
.
atom -> [ ]
1740
<<
atom -> [ ]
1740
not
atom -> [ ]
1740
/
atom -> [ ]
1740
*
atom -> [ ]
1740
if
atom -> [ ]
1740
!=
atom -> [ ]
1740
<=
atom -> [ ]
1740
@
atom -> [ ]
1740
-
atom -> [ ]
1740
>>
atom -> [ ]
1740
^
atom -> [ ]
1740
|
atom -> [ ]
1740
,
atom -> [ ]
1740
:
atom -> [ ]
1740
<
atom -> [ ]
1740
[
atom -> [ ]
1740
is
atom -> [ ]
1740
in
atom -> [ ]
1740
>
atom -> [ ]
1740
+
atom -> [ ]
1740
>=
atom -> [ ]
1740
and
atom -> [ ]
1740
or
atom -> [ ]
1740
&
atom -> [ ]
1740
(
atom -> [ ]
1740
//
atom -> [ ]
1741
if
factor -> - factor
1741
/
factor -> - factor
1741
,
factor -> - factor
1741
not
factor -> - factor
1741
<
factor -> - factor
1741
or
factor -> - factor
1741
//
factor -> - factor
1741
!=
factor -> - factor
1741
%
factor -> - factor
1741
|
factor -> - factor
1741
>
factor -> - factor
1741
+
factor -> - factor
1741
:
factor -> - factor
1741
-
factor -> - factor
1741
^
factor -> - factor
1741
in
factor -> - factor
1741
<<
factor -> - factor
1741
&
factor -> - factor
1741
<=
factor -> - factor
1741
==
factor -> - factor
1741
and
factor -> - factor
1741
@
factor -> - factor
1741
>=
factor -> - factor
1741
is
factor -> - factor
1741
>>
factor -> - factor
1741
*
factor -> - factor
1742
<
factor -> + factor
1742
,
factor -> + factor
1742
in
factor -> + factor
1742
|
factor -> + factor
1742
==
factor -> + factor
1742
>
factor -> + factor
1742
-
factor -> + factor
1742
and
factor -> + factor
1742
*
factor -> + factor
1742
if
factor -> + factor
1742
%
factor -> + factor
1742
@
factor -> + factor
1742
is
factor -> + factor
1742
//
factor -> + factor
1742
&
factor -> + factor
1742
^
factor -> + factor
1742
>=
factor -> + factor
1742
not
factor -> + factor
1742
/
factor -> + factor
1742
:
factor -> + factor
1742
or
factor -> + factor
1742
!=
factor -> + factor
1742
<<
factor -> + factor
1742
>>
factor -> + factor
1742
<=
factor -> + factor
1742
+
factor -> + factor
1743
-
atom -> ( )
1743
==
atom -> ( )
1743
/
atom -> ( )
1743
<=
atom -> ( )
1743
(
atom -> ( )
1743
&
atom -> ( )
1743
[
atom -> ( )
1743
,
atom -> ( )
1743
^
atom -> ( )
1743
or
atom -> ( )
1743
+
atom -> ( )
1743
>>
atom -> ( )
1743
is
atom -> ( )
1743
*
atom -> ( )
1743
if
atom -> ( )
1743
and
atom -> ( )
1743
>=
atom -> ( )
1743
>
atom -> ( )
1743
@
atom -> ( )
1743
:
atom -> ( )
1743
in
atom -> ( )
1743
not
atom -> ( )
1743
<
atom -> ( )
1743
.
atom -> ( )
1743
//
atom -> ( )
1743
%
atom -> ( )
1743
<<
atom -> ( )
1743
|
atom -> ( )
1743
**
atom -> ( )
1743
!=
atom -> ( )
1744
)
2125
1745
~
544
1745
factor
545
1745
STRING
546
1745
shift_expr
547
1745
expr
548
1745
arith_expr
549
1745
term
550
1745
atom_expr
551
1745
NUMBER
552
1745
subscript
553
1745
{
554
1745
[
555
1745
-
556
1745
None
557
1745
+
558
1745
(
559
1745
subscriptlist
2126
1745
atom
561
1745
and_expr
562
1745
NAME
563
1745
power
564
1745
True
565
1745
comparison
566
1745
xor_expr
567
1745
lambda
568
1745
False
569
1745
not_test
570
1745
and_test
571
1745
test
572
1745
or_test
573
1745
not
574
1745
:
maybe_test -> 
1745
maybe_test
575
1745
lambdef
576
1746
)
2127
1746
~
579
1746
factor
580
1746
STRING
581
1746
shift_expr
582
1746
arith_expr
583
1746
term
584
1746
NUMBER
585
1746
and_expr
586
1746
{
587
1746
atom_expr
589
1746
[
590
1746
-
591
1746
None
592
1746
(
593
1746
atom
594
1746
+
595
1746
not_test
596
1746
arglist
2128
1746
test
597
1746
NAME
598
1746
power
599
1746
True
600
1746
comparison
601
1746
xor_expr
602
1746
lambdef
603
1746
False
604
1746
argument
605
1746
and_test
606
1746
lambda
607
1746
or_test
608
1746
expr
609
1746
not
610
1746
**
611
1746
*
612
1747
[
1745
1747
(
1746
1747
//
trailer_expr -> 
1747
trailer
1747
1747
<<
trailer_expr -> 
1747
*
trailer_expr -> 
1747
in
trailer_expr -> 
1747
&
trailer_expr -> 
1747
trailer_expr
2129
1747
and
trailer_expr -> 
1747
.
1749
1747
<=
trailer_expr -> 
1747
,
trailer_expr -> 
1747
|
trailer_expr -> 
1747
or
trailer_expr -> 
1747
>=
trailer_expr -> 
1747
:
trailer_expr -> 
1747
+
trailer_expr -> 
1747
**
trailer_expr -> 
1747
>>
trailer_expr -> 
1747
!=
trailer_expr -> 
1747
-
trailer_expr -> 
1747
/
trailer_expr -> 
1747
%
trailer_expr -> 
1747
is
trailer_expr -> 
1747
<
trailer_expr -> 
1747
>
trailer_expr -> 
1747
if
trailer_expr -> 
1747
^
trailer_expr -> 
1747
==
trailer_expr -> 
1747
@
trailer_expr -> 
1747
not
trailer_expr -> 
1748
<=
atom_expr -> atom trailer_expr
1748
or
atom_expr -> atom trailer_expr
1748
,
atom_expr -> atom trailer_expr
1748
*
atom_expr -> atom trailer_expr
1748
>=
atom_expr -> atom trailer_expr
1748
**
atom_expr -> atom trailer_expr
1748
&
atom_expr -> atom trailer_expr
1748
%
atom_expr -> atom trailer_expr
1748
if
atom_expr -> atom trailer_expr
1748
+
atom_expr -> atom trailer_expr
1748
:
atom_expr -> atom trailer_expr
1748
is
atom_expr -> atom trailer_expr
1748
//
atom_expr -> atom trailer_expr
1748
!=
atom_expr -> atom trailer_expr
1748
|
atom_expr -> atom trailer_expr
1748
<
atom_expr -> atom trailer_expr
1748
@
atom_expr -> atom trailer_expr
1748
not
atom_expr -> atom trailer_expr
1748
-
atom_expr -> atom trailer_expr
1748
in
atom_expr -> atom trailer_expr
1748
/
atom_expr -> atom trailer_expr
1748
^
atom_expr -> atom trailer_expr
1748
>
atom_expr -> atom trailer_expr
1748
==
atom_expr -> atom trailer_expr
1748
<<
atom_expr -> atom trailer_expr
1748
>>
atom_expr -> atom trailer_expr
1748
and
atom_expr -> atom trailer_expr
1749
NAME
2130
1750
~
1218
1750
factor
1217
1750
STRING
1220
1750
shift_expr
1219
1750
arith_expr
1222
1750
term
1223
1750
NUMBER
1224
1750
{
1225
1750
atom_expr
1226
1750
[
1227
1750
xor_expr
2131
1750
-
1228
1750
None
1229
1750
+
1230
1750
(
1231
1750
atom
1232
1750
and_expr
1233
1750
NAME
1234
1750
power
1235
1750
True
1236
1750
False
1240
1751
~
1218
1751
factor
1217
1751
STRING
1220
1751
shift_expr
1219
1751
arith_expr
1222
1751
term
1223
1751
NUMBER
1224
1751
{
1225
1751
atom_expr
1226
1751
[
1227
1751
-
1228
1751
None
1229
1751
+
1230
1751
(
1231
1751
atom
1232
1751
and_expr
1233
1751
expr
2132
1751
NAME
1234
1751
power
1235
1751
True
1236
1751
xor_expr
1238
1751
False
1240
1752
~
1218
1752
factor
1217
1752
STRING
1220
1752
shift_expr
1219
1752
expr
1221
1752
arith_expr
1222
1752
term
1223
1752
NUMBER
1224
1752
{
1225
1752
atom_expr
1226
1752
[
1227
1752
-
1228
1752
None
1229
1752
+
1230
1752
(
1231
1752
atom
1232
1752
and_expr
1233
1752
NAME
1234
1752
power
1235
1752
True
1236
1752
comparison
1237
1752
xor_expr
1238
1752
lambda
1239
1752
False
1240
1752
not_test
1242
1752
test
2133
1752
or_test
1243
1752
and_test
1244
1752
not
1245
1752
lambdef
1246
1753
:
2134
1754
~
1218
1754
factor
1217
1754
STRING
1220
1754
shift_expr
1219
1754
expr
1221
1754
arith_expr
1222
1754
term
1223
1754
NUMBER
1224
1754
{
1225
1754
atom_expr
1226
1754
[
1227
1754
-
1228
1754
None
1229
1754
+
1230
1754
(
1231
1754
atom
1232
1754
and_expr
1233
1754
NAME
1234
1754
power
1235
1754
True
1236
1754
comparison
1237
1754
xor_expr
1238
1754
lambda
1239
1754
False
1240
1754
test
1241
1754
not_test
1242
1754
or_test
1243
1754
and_test
1244
1754
not
1245
1754
test_list
2135
1754
lambdef
1246
1755
~
1218
1755
factor
1217
1755
STRING
1220
1755
shift_expr
1219
1755
expr
1221
1755
arith_expr
1222
1755
term
1223
1755
NUMBER
1224
1755
{
1225
1755
atom_expr
1226
1755
[
1227
1755
-
1228
1755
None
1229
1755
+
1230
1755
(
1231
1755
atom
1232
1755
and_expr
1233
1755
NAME
1234
1755
power
1235
1755
True
1236
1755
and_test
2136
1755
comparison
1237
1755
xor_expr
1238
1755
False
1240
1755
not_test
1242
1755
not
1245
1756
~
509
1756
factor
510
1756
STRING
511
1756
shift_expr
512
1756
term
513
1756
NUMBER
514
1756
{
515
1756
atom_expr
516
1756
[
517
1756
-
518
1756
None
519
1756
(
520
1756
atom
521
1756
arith_expr
522
1756
False
523
1756
+
524
1756
or_test
2137
1756
NAME
526
1756
power
527
1756
True
528
1756
xor_expr
529
1756
comparison
530
1756
and_expr
531
1756
not_test
532
1756
not
533
1756
expr
534
1756
and_test
535
1757
or_test
2138
1757
factor
1217
1757
~
1218
1757
shift_expr
1219
1757
STRING
1220
1757
expr
1221
1757
arith_expr
1222
1757
term
1223
1757
NUMBER
1224
1757
{
1225
1757
atom_expr
1226
1757
[
1227
1757
-
1228
1757
None
1229
1757
+
1230
1757
(
1231
1757
atom
1232
1757
and_expr
1233
1757
NAME
1234
1757
power
1235
1757
True
1236
1757
comparison
1237
1757
xor_expr
1238
1757
False
1240
1757
not_test
1242
1757
and_test
1244
1757
not
1245
1758
:
not_test -> not not_test
1758
,
not_test -> not not_test
1758
if
not_test -> not not_test
1758
and
not_test -> not not_test
1758
or
not_test -> not not_test
1759
class
decorator -> @ dotted_name ( ) NEWLINE
1759
def
decorator -> @ dotted_name ( ) NEWLINE
1759
@
decorator -> @ dotted_name ( ) NEWLINE
1760
NEWLINE
2139
1761
,
trailer -> [ subscriptlist ]
1761
//
trailer -> [ subscriptlist ]
1761
/
trailer -> [ subscriptlist ]
1761
^
trailer -> [ subscriptlist ]
1761
.
trailer -> [ subscriptlist ]
1761
<
trailer -> [ subscriptlist ]
1761
<<
trailer -> [ subscriptlist ]
1761
in
trailer -> [ subscriptlist ]
1761
@
trailer -> [ subscriptlist ]
1761
>
trailer -> [ subscriptlist ]
1761
:
trailer -> [ subscriptlist ]
1761
*
trailer -> [ subscriptlist ]
1761
as
trailer -> [ subscriptlist ]
1761
and
trailer -> [ subscriptlist ]
1761
+
trailer -> [ subscriptlist ]
1761
(
trailer -> [ subscriptlist ]
1761
is
trailer -> [ subscriptlist ]
1761
or
trailer -> [ subscriptlist ]
1761
<=
trailer -> [ subscriptlist ]
1761
if
trailer -> [ subscriptlist ]
1761
|
trailer -> [ subscriptlist ]
1761
==
trailer -> [ subscriptlist ]
1761
not
trailer -> [ subscriptlist ]
1761
-
trailer -> [ subscriptlist ]
1761
!=
trailer -> [ subscriptlist ]
1761
&
trailer -> [ subscriptlist ]
1761
[
trailer -> [ subscriptlist ]
1761
>>
trailer -> [ subscriptlist ]
1761
%
trailer -> [ subscriptlist ]
1761
>=
trailer -> [ subscriptlist ]
1761
**
trailer -> [ subscriptlist ]
1762
>=
trailer -> ( arglist )
1762
//
trailer -> ( arglist )
1762
%
trailer -> ( arglist )
1762
in
trailer -> ( arglist )
1762
&
trailer -> ( arglist )
1762
,
trailer -> ( arglist )
1762
>>
trailer -> ( arglist )
1762
-
trailer -> ( arglist )
1762
:
trailer -> ( arglist )
1762
^
trailer -> ( arglist )
1762
>
trailer -> ( arglist )
1762
<<
trailer -> ( arglist )
1762
==
trailer -> ( arglist )
1762
<=
trailer -> ( arglist )
1762
*
trailer -> ( arglist )
1762
and
trailer -> ( arglist )
1762
/
trailer -> ( arglist )
1762
[
trailer -> ( arglist )
1762
(
trailer -> ( arglist )
1762
<
trailer -> ( arglist )
1762
|
trailer -> ( arglist )
1762
+
trailer -> ( arglist )
1762
not
trailer -> ( arglist )
1762
or
trailer -> ( arglist )
1762
if
trailer -> ( arglist )
1762
is
trailer -> ( arglist )
1762
.
trailer -> ( arglist )
1762
!=
trailer -> ( arglist )
1762
@
trailer -> ( arglist )
1762
**
trailer -> ( arglist )
1762
as
trailer -> ( arglist )
1763
,
lambdef -> lambda varargslist : test
1763
as
lambdef -> lambda varargslist : test
1763
:
lambdef -> lambda varargslist : test
1764
,
factor -> ~ factor
1764
+
factor -> ~ factor
1764
&
factor -> ~ factor
1764
>>
factor -> ~ factor
1764
|
factor -> ~ factor
1764
<<
factor -> ~ factor
1764
*
factor -> ~ factor
1764
-
factor -> ~ factor
1764
/
factor -> ~ factor
1764
%
factor -> ~ factor
1764
//
factor -> ~ factor
1764
:
factor -> ~ factor
1764
^
factor -> ~ factor
1764
@
factor -> ~ factor
1765
term
2140
1765
~
1284
1765
factor
1285
1765
STRING
1286
1765
None
1287
1765
[
1289
1765
NUMBER
1290
1765
True
1291
1765
{
1292
1765
(
1293
1765
atom
1294
1765
-
1295
1765
+
1296
1765
atom_expr
1297
1765
False
1299
1765
power
1300
1765
NAME
1302
1766
~
1284
1766
factor
1285
1766
STRING
1286
1766
None
1287
1766
[
1289
1766
term
2141
1766
NUMBER
1290
1766
True
1291
1766
{
1292
1766
(
1293
1766
atom
1294
1766
-
1295
1766
+
1296
1766
atom_expr
1297
1766
False
1299
1766
power
1300
1766
NAME
1302
1767
~
1284
1767
factor
1285
1767
STRING
1286
1767
None
1287
1767
[
1289
1767
NUMBER
1290
1767
True
1291
1767
{
1292
1767
(
1293
1767
atom
1294
1767
-
1295
1767
+
1296
1767
atom_expr
1297
1767
term
2142
1767
False
1299
1767
power
1300
1767
NAME
1302
1768
~
1284
1768
factor
1285
1768
STRING
1286
1768
None
1287
1768
[
1289
1768
NUMBER
1290
1768
True
1291
1768
{
1292
1768
(
1293
1768
atom
1294
1768
-
1295
1768
+
1296
1768
atom_expr
1297
1768
False
1299
1768
term
2143
1768
power
1300
1768
NAME
1302
1769
~
1284
1769
factor
1285
1769
STRING
1286
1769
None
1287
1769
[
1289
1769
NUMBER
1290
1769
term
2144
1769
True
1291
1769
{
1292
1769
(
1293
1769
atom
1294
1769
-
1295
1769
+
1296
1769
atom_expr
1297
1769
False
1299
1769
power
1300
1769
NAME
1302
1770
~
1284
1770
factor
1285
1770
STRING
1286
1770
None
1287
1770
arith_expr
1288
1770
[
1289
1770
NUMBER
1290
1770
True
1291
1770
{
1292
1770
(
1293
1770
atom
1294
1770
-
1295
1770
+
1296
1770
atom_expr
1297
1770
False
1299
1770
shift_expr
2145
1770
power
1300
1770
term
1301
1770
NAME
1302
1771
~
1284
1771
factor
1285
1771
STRING
1286
1771
None
1287
1771
arith_expr
1288
1771
[
1289
1771
NUMBER
1290
1771
True
1291
1771
{
1292
1771
(
1293
1771
atom
1294
1771
-
1295
1771
+
1296
1771
atom_expr
1297
1771
False
1299
1771
shift_expr
2146
1771
power
1300
1771
term
1301
1771
NAME
1302
1772
]
2147
1773
>>
atom -> [ ]
1773
(
atom -> [ ]
1773
//
atom -> [ ]
1773
*
atom -> [ ]
1773
%
atom -> [ ]
1773
+
atom -> [ ]
1773
|
atom -> [ ]
1773
^
atom -> [ ]
1773
**
atom -> [ ]
1773
.
atom -> [ ]
1773
<<
atom -> [ ]
1773
,
atom -> [ ]
1773
:
atom -> [ ]
1773
&
atom -> [ ]
1773
/
atom -> [ ]
1773
[
atom -> [ ]
1773
@
atom -> [ ]
1773
-
atom -> [ ]
1774
**
atom -> { }
1774
//
atom -> { }
1774
[
atom -> { }
1774
,
atom -> { }
1774
/
atom -> { }
1774
:
atom -> { }
1774
|
atom -> { }
1774
-
atom -> { }
1774
.
atom -> { }
1774
(
atom -> { }
1774
+
atom -> { }
1774
>>
atom -> { }
1774
<<
atom -> { }
1774
*
atom -> { }
1774
&
atom -> { }
1774
^
atom -> { }
1774
@
atom -> { }
1774
%
atom -> { }
1775
-
atom -> ( )
1775
>>
atom -> ( )
1775
**
atom -> ( )
1775
/
atom -> ( )
1775
.
atom -> ( )
1775
(
atom -> ( )
1775
//
atom -> ( )
1775
&
atom -> ( )
1775
%
atom -> ( )
1775
[
atom -> ( )
1775
<<
atom -> ( )
1775
,
atom -> ( )
1775
@
atom -> ( )
1775
*
atom -> ( )
1775
:
atom -> ( )
1775
^
atom -> ( )
1775
|
atom -> ( )
1775
+
atom -> ( )
1776
)
2148
1777
~
544
1777
factor
545
1777
STRING
546
1777
shift_expr
547
1777
expr
548
1777
arith_expr
549
1777
term
550
1777
atom_expr
551
1777
NUMBER
552
1777
subscript
553
1777
{
554
1777
[
555
1777
-
556
1777
None
557
1777
+
558
1777
(
559
1777
subscriptlist
2149
1777
atom
561
1777
and_expr
562
1777
NAME
563
1777
power
564
1777
True
565
1777
comparison
566
1777
xor_expr
567
1777
lambda
568
1777
False
569
1777
not_test
570
1777
and_test
571
1777
test
572
1777
or_test
573
1777
not
574
1777
:
maybe_test -> 
1777
maybe_test
575
1777
lambdef
576
1778
>>
atom_expr -> atom trailer_expr
1778
//
atom_expr -> atom trailer_expr
1778
|
atom_expr -> atom trailer_expr
1778
+
atom_expr -> atom trailer_expr
1778
*
atom_expr -> atom trailer_expr
1778
**
atom_expr -> atom trailer_expr
1778
,
atom_expr -> atom trailer_expr
1778
@
atom_expr -> atom trailer_expr
1778
&
atom_expr -> atom trailer_expr
1778
-
atom_expr -> atom trailer_expr
1778
%
atom_expr -> atom trailer_expr
1778
/
atom_expr -> atom trailer_expr
1778
<<
atom_expr -> atom trailer_expr
1778
^
atom_expr -> atom trailer_expr
1778
:
atom_expr -> atom trailer_expr
1779
[
1777
1779
**
trailer_expr -> 
1779
//
trailer_expr -> 
1779
trailer
1779
1779
<<
trailer_expr -> 
1779
trailer_expr
2150
1779
.
1780
1779
(
1781
1779
*
trailer_expr -> 
1779
&
trailer_expr -> 
1779
>>
trailer_expr -> 
1779
-
trailer_expr -> 
1779
/
trailer_expr -> 
1779
%
trailer_expr -> 
1779
,
trailer_expr -> 
1779
|
trailer_expr -> 
1779
^
trailer_expr -> 
1779
@
trailer_expr -> 
1779
:
trailer_expr -> 
1779
+
trailer_expr -> 
1780
NAME
2151
1781
)
2152
1781
~
579
1781
factor
580
1781
STRING
581
1781
shift_expr
582
1781
arith_expr
583
1781
term
584
1781
NUMBER
585
1781
and_expr
586
1781
{
587
1781
atom_expr
589
1781
[
590
1781
-
591
1781
None
592
1781
(
593
1781
atom
594
1781
+
595
1781
not_test
596
1781
arglist
2153
1781
test
597
1781
NAME
598
1781
power
599
1781
True
600
1781
comparison
601
1781
xor_expr
602
1781
lambdef
603
1781
False
604
1781
argument
605
1781
and_test
606
1781
lambda
607
1781
or_test
608
1781
expr
609
1781
not
610
1781
**
611
1781
*
612
1782
,
factor -> - factor
1782
+
factor -> - factor
1782
:
factor -> - factor
1782
@
factor -> - factor
1782
/
factor -> - factor
1782
-
factor -> - factor
1782
^
factor -> - factor
1782
//
factor -> - factor
1782
>>
factor -> - factor
1782
%
factor -> - factor
1782
*
factor -> - factor
1782
<<
factor -> - factor
1782
|
factor -> - factor
1782
&
factor -> - factor
1783
:
factor -> + factor
1783
,
factor -> + factor
1783
^
factor -> + factor
1783
|
factor -> + factor
1783
<<
factor -> + factor
1783
>>
factor -> + factor
1783
-
factor -> + factor
1783
%
factor -> + factor
1783
@
factor -> + factor
1783
//
factor -> + factor
1783
&
factor -> + factor
1783
*
factor -> + factor
1783
+
factor -> + factor
1783
/
factor -> + factor
1784
~
1284
1784
STRING
1286
1784
None
1287
1784
[
1289
1784
NUMBER
1290
1784
True
1291
1784
{
1292
1784
(
1293
1784
atom
1294
1784
-
1295
1784
+
1296
1784
atom_expr
1297
1784
False
1299
1784
factor
2154
1784
power
1300
1784
NAME
1302
1785
~
1284
1785
factor
1285
1785
STRING
1286
1785
None
1287
1785
arith_expr
1288
1785
[
1289
1785
NUMBER
1290
1785
True
1291
1785
{
1292
1785
(
1293
1785
atom
1294
1785
-
1295
1785
+
1296
1785
atom_expr
1297
1785
and_expr
1298
1785
False
1299
1785
xor_expr
2155
1785
power
1300
1785
term
1301
1785
NAME
1302
1785
shift_expr
1303
1786
~
1284
1786
factor
1285
1786
STRING
1286
1786
None
1287
1786
[
1289
1786
arith_expr
2156
1786
NUMBER
1290
1786
True
1291
1786
{
1292
1786
(
1293
1786
atom
1294
1786
-
1295
1786
+
1296
1786
atom_expr
1297
1786
False
1299
1786
power
1300
1786
term
1301
1786
NAME
1302
1787
~
1284
1787
factor
1285
1787
STRING
1286
1787
None
1287
1787
arith_expr
2157
1787
[
1289
1787
NUMBER
1290
1787
True
1291
1787
{
1292
1787
(
1293
1787
atom
1294
1787
-
1295
1787
+
1296
1787
atom_expr
1297
1787
False
1299
1787
power
1300
1787
term
1301
1787
NAME
1302
1788
~
1284
1788
factor
1285
1788
STRING
1286
1788
None
1287
1788
arith_expr
1288
1788
[
1289
1788
NUMBER
1290
1788
True
1291
1788
{
1292
1788
(
1293
1788
atom
1294
1788
-
1295
1788
+
1296
1788
atom_expr
1297
1788
False
1299
1788
power
1300
1788
term
1301
1788
NAME
1302
1788
and_expr
2158
1788
shift_expr
1303
1789
~
1284
1789
factor
1285
1789
STRING
1286
1789
None
1287
1789
arith_expr
1288
1789
[
1289
1789
NUMBER
1290
1789
True
1291
1789
{
1292
1789
(
1293
1789
atom
1294
1789
-
1295
1789
+
1296
1789
atom_expr
1297
1789
and_expr
1298
1789
False
1299
1789
expr
2159
1789
power
1300
1789
term
1301
1789
NAME
1302
1789
shift_expr
1303
1789
xor_expr
1304
1790
~
255
1790
factor
256
1790
STRING
257
1790
shift_expr
258
1790
expr
259
1790
arith_expr
260
1790
term
261
1790
NUMBER
262
1790
{
263
1790
and_test
264
1790
atom_expr
265
1790
[
266
1790
-
267
1790
None
268
1790
+
269
1790
(
270
1790
atom
272
1790
and_expr
273
1790
NAME
274
1790
power
275
1790
True
276
1790
test
2160
1790
comparison
277
1790
xor_expr
278
1790
lambda
279
1790
False
280
1790
not_test
281
1790
or_test
284
1790
lambdef
285
1790
not
286
1791
NEWLINE
lambdef -> lambda varargslist : test
1791
from
lambdef -> lambda varargslist : test
1792
//
trailer -> [ subscriptlist ]
1792
/
trailer -> [ subscriptlist ]
1792
^
trailer -> [ subscriptlist ]
1792
.
trailer -> [ subscriptlist ]
1792
<
trailer -> [ subscriptlist ]
1792
<<
trailer -> [ subscriptlist ]
1792
in
trailer -> [ subscriptlist ]
1792
NEWLINE
trailer -> [ subscriptlist ]
1792
@
trailer -> [ subscriptlist ]
1792
>
trailer -> [ subscriptlist ]
1792
*
trailer -> [ subscriptlist ]
1792
and
trailer -> [ subscriptlist ]
1792
+
trailer -> [ subscriptlist ]
1792
(
trailer -> [ subscriptlist ]
1792
is
trailer -> [ subscriptlist ]
1792
or
trailer -> [ subscriptlist ]
1792
<=
trailer -> [ subscriptlist ]
1792
if
trailer -> [ subscriptlist ]
1792
|
trailer -> [ subscriptlist ]
1792
==
trailer -> [ subscriptlist ]
1792
not
trailer -> [ subscriptlist ]
1792
-
trailer -> [ subscriptlist ]
1792
!=
trailer -> [ subscriptlist ]
1792
&
trailer -> [ subscriptlist ]
1792
[
trailer -> [ subscriptlist ]
1792
>>
trailer -> [ subscriptlist ]
1792
%
trailer -> [ subscriptlist ]
1792
>=
trailer -> [ subscriptlist ]
1792
**
trailer -> [ subscriptlist ]
1792
from
trailer -> [ subscriptlist ]
1793
>=
trailer -> ( arglist )
1793
//
trailer -> ( arglist )
1793
%
trailer -> ( arglist )
1793
in
trailer -> ( arglist )
1793
from
trailer -> ( arglist )
1793
&
trailer -> ( arglist )
1793
>>
trailer -> ( arglist )
1793
-
trailer -> ( arglist )
1793
^
trailer -> ( arglist )
1793
>
trailer -> ( arglist )
1793
<<
trailer -> ( arglist )
1793
==
trailer -> ( arglist )
1793
<=
trailer -> ( arglist )
1793
*
trailer -> ( arglist )
1793
and
trailer -> ( arglist )
1793
/
trailer -> ( arglist )
1793
[
trailer -> ( arglist )
1793
(
trailer -> ( arglist )
1793
<
trailer -> ( arglist )
1793
NEWLINE
trailer -> ( arglist )
1793
|
trailer -> ( arglist )
1793
+
trailer -> ( arglist )
1793
not
trailer -> ( arglist )
1793
or
trailer -> ( arglist )
1793
is
trailer -> ( arglist )
1793
.
trailer -> ( arglist )
1793
!=
trailer -> ( arglist )
1793
@
trailer -> ( arglist )
1793
**
trailer -> ( arglist )
1793
if
trailer -> ( arglist )
1794
~
287
1794
factor
288
1794
STRING
289
1794
shift_expr
290
1794
term
291
1794
NUMBER
292
1794
{
293
1794
atom_expr
294
1794
[
295
1794
-
296
1794
None
297
1794
lambda
298
1794
NAME
299
1794
(
300
1794
arith_expr
301
1794
atom
302
1794
+
303
1794
and_expr
304
1794
test
2161
1794
power
305
1794
True
306
1794
comparison
307
1794
xor_expr
308
1794
False
309
1794
not_test
310
1794
lambdef
311
1794
expr
312
1794
or_test
313
1794
and_test
314
1794
not
315
1795
,
trailer -> [ subscriptlist ]
1795
//
trailer -> [ subscriptlist ]
1795
/
trailer -> [ subscriptlist ]
1795
-
trailer -> [ subscriptlist ]
1795
^
trailer -> [ subscriptlist ]
1795
NEWLINE
trailer -> [ subscriptlist ]
1795
&
trailer -> [ subscriptlist ]
1795
@
trailer -> [ subscriptlist ]
1795
+
trailer -> [ subscriptlist ]
1795
(
trailer -> [ subscriptlist ]
1795
[
trailer -> [ subscriptlist ]
1795
.
trailer -> [ subscriptlist ]
1795
>>
trailer -> [ subscriptlist ]
1795
*
trailer -> [ subscriptlist ]
1795
%
trailer -> [ subscriptlist ]
1795
<<
trailer -> [ subscriptlist ]
1795
**
trailer -> [ subscriptlist ]
1795
|
trailer -> [ subscriptlist ]
1796
//
trailer -> ( arglist )
1796
/
trailer -> ( arglist )
1796
%
trailer -> ( arglist )
1796
[
trailer -> ( arglist )
1796
&
trailer -> ( arglist )
1796
@
trailer -> ( arglist )
1796
(
trailer -> ( arglist )
1796
<<
trailer -> ( arglist )
1796
NEWLINE
trailer -> ( arglist )
1796
,
trailer -> ( arglist )
1796
*
trailer -> ( arglist )
1796
.
trailer -> ( arglist )
1796
>>
trailer -> ( arglist )
1796
-
trailer -> ( arglist )
1796
|
trailer -> ( arglist )
1796
^
trailer -> ( arglist )
1796
**
trailer -> ( arglist )
1796
+
trailer -> ( arglist )
1797
,
trailer -> [ subscriptlist ]
1797
//
trailer -> [ subscriptlist ]
1797
/
trailer -> [ subscriptlist ]
1797
^
trailer -> [ subscriptlist ]
1797
.
trailer -> [ subscriptlist ]
1797
<
trailer -> [ subscriptlist ]
1797
<<
trailer -> [ subscriptlist ]
1797
in
trailer -> [ subscriptlist ]
1797
NEWLINE
trailer -> [ subscriptlist ]
1797
@
trailer -> [ subscriptlist ]
1797
>
trailer -> [ subscriptlist ]
1797
*
trailer -> [ subscriptlist ]
1797
and
trailer -> [ subscriptlist ]
1797
+
trailer -> [ subscriptlist ]
1797
(
trailer -> [ subscriptlist ]
1797
is
trailer -> [ subscriptlist ]
1797
or
trailer -> [ subscriptlist ]
1797
<=
trailer -> [ subscriptlist ]
1797
if
trailer -> [ subscriptlist ]
1797
|
trailer -> [ subscriptlist ]
1797
==
trailer -> [ subscriptlist ]
1797
not
trailer -> [ subscriptlist ]
1797
-
trailer -> [ subscriptlist ]
1797
!=
trailer -> [ subscriptlist ]
1797
&
trailer -> [ subscriptlist ]
1797
[
trailer -> [ subscriptlist ]
1797
>>
trailer -> [ subscriptlist ]
1797
%
trailer -> [ subscriptlist ]
1797
>=
trailer -> [ subscriptlist ]
1797
**
trailer -> [ subscriptlist ]
1798
>=
trailer -> ( arglist )
1798
//
trailer -> ( arglist )
1798
%
trailer -> ( arglist )
1798
in
trailer -> ( arglist )
1798
&
trailer -> ( arglist )
1798
,
trailer -> ( arglist )
1798
>>
trailer -> ( arglist )
1798
-
trailer -> ( arglist )
1798
^
trailer -> ( arglist )
1798
>
trailer -> ( arglist )
1798
<<
trailer -> ( arglist )
1798
==
trailer -> ( arglist )
1798
<=
trailer -> ( arglist )
1798
*
trailer -> ( arglist )
1798
and
trailer -> ( arglist )
1798
/
trailer -> ( arglist )
1798
[
trailer -> ( arglist )
1798
(
trailer -> ( arglist )
1798
<
trailer -> ( arglist )
1798
NEWLINE
trailer -> ( arglist )
1798
|
trailer -> ( arglist )
1798
+
trailer -> ( arglist )
1798
not
trailer -> ( arglist )
1798
or
trailer -> ( arglist )
1798
is
trailer -> ( arglist )
1798
.
trailer -> ( arglist )
1798
!=
trailer -> ( arglist )
1798
@
trailer -> ( arglist )
1798
**
trailer -> ( arglist )
1798
if
trailer -> ( arglist )
1799
,
lambdef -> lambda varargslist : test
1799
NEWLINE
lambdef -> lambda varargslist : test
1800
~
340
1800
factor
341
1800
STRING
342
1800
shift_expr
343
1800
arith_expr
344
1800
term
345
1800
NUMBER
346
1800
{
348
1800
atom_expr
349
1800
[
350
1800
-
351
1800
None
352
1800
(
353
1800
atom
354
1800
+
355
1800
and_expr
356
1800
NAME
357
1800
power
358
1800
True
359
1800
test
2162
1800
comparison
360
1800
lambda
361
1800
xor_expr
362
1800
False
363
1800
not_test
364
1800
lambdef
365
1800
or_test
367
1800
and_test
368
1800
not
369
1800
expr
370
1801
<=
term -> factor / term
1801
!=
term -> factor / term
1801
and
term -> factor / term
1801
or
term -> factor / term
1801
|
term -> factor / term
1801
^
term -> factor / term
1801
NEWLINE
term -> factor / term
1801
>>
term -> factor / term
1801
==
term -> factor / term
1801
>
term -> factor / term
1801
if
term -> factor / term
1801
&
term -> factor / term
1801
=
term -> factor / term
1801
<<
term -> factor / term
1801
+
term -> factor / term
1801
-
term -> factor / term
1801
not
term -> factor / term
1801
in
term -> factor / term
1801
<
term -> factor / term
1801
is
term -> factor / term
1801
>=
term -> factor / term
1801
,
term -> factor / term
1802
is
term -> factor @ term
1802
and
term -> factor @ term
1802
>
term -> factor @ term
1802
not
term -> factor @ term
1802
in
term -> factor @ term
1802
==
term -> factor @ term
1802
<
term -> factor @ term
1802
,
term -> factor @ term
1802
or
term -> factor @ term
1802
!=
term -> factor @ term
1802
<<
term -> factor @ term
1802
NEWLINE
term -> factor @ term
1802
<=
term -> factor @ term
1802
=
term -> factor @ term
1802
if
term -> factor @ term
1802
|
term -> factor @ term
1802
+
term -> factor @ term
1802
-
term -> factor @ term
1802
&
term -> factor @ term
1802
>=
term -> factor @ term
1802
>>
term -> factor @ term
1802
^
term -> factor @ term
1803
NEWLINE
term -> factor % term
1803
>
term -> factor % term
1803
!=
term -> factor % term
1803
&
term -> factor % term
1803
>=
term -> factor % term
1803
or
term -> factor % term
1803
=
term -> factor % term
1803
==
term -> factor % term
1803
^
term -> factor % term
1803
in
term -> factor % term
1803
,
term -> factor % term
1803
|
term -> factor % term
1803
and
term -> factor % term
1803
if
term -> factor % term
1803
not
term -> factor % term
1803
is
term -> factor % term
1803
<
term -> factor % term
1803
>>
term -> factor % term
1803
-
term -> factor % term
1803
<=
term -> factor % term
1803
<<
term -> factor % term
1803
+
term -> factor % term
1804
+
term -> factor // term
1804
==
term -> factor // term
1804
<<
term -> factor // term
1804
<
term -> factor // term
1804
if
term -> factor // term
1804
in
term -> factor // term
1804
!=
term -> factor // term
1804
>
term -> factor // term
1804
not
term -> factor // term
1804
NEWLINE
term -> factor // term
1804
=
term -> factor // term
1804
>=
term -> factor // term
1804
and
term -> factor // term
1804
is
term -> factor // term
1804
-
term -> factor // term
1804
&
term -> factor // term
1804
|
term -> factor // term
1804
,
term -> factor // term
1804
^
term -> factor // term
1804
<=
term -> factor // term
1804
or
term -> factor // term
1804
>>
term -> factor // term
1805
&
term -> factor * term
1805
-
term -> factor * term
1805
in
term -> factor * term
1805
or
term -> factor * term
1805
<=
term -> factor * term
1805
,
term -> factor * term
1805
|
term -> factor * term
1805
and
term -> factor * term
1805
not
term -> factor * term
1805
<<
term -> factor * term
1805
==
term -> factor * term
1805
if
term -> factor * term
1805
>
term -> factor * term
1805
>>
term -> factor * term
1805
<
term -> factor * term
1805
!=
term -> factor * term
1805
=
term -> factor * term
1805
NEWLINE
term -> factor * term
1805
>=
term -> factor * term
1805
^
term -> factor * term
1805
+
term -> factor * term
1805
is
term -> factor * term
1806
|
and_expr -> shift_expr & and_expr
1806
!=
and_expr -> shift_expr & and_expr
1806
,
and_expr -> shift_expr & and_expr
1806
=
and_expr -> shift_expr & and_expr
1806
>=
and_expr -> shift_expr & and_expr
1806
not
and_expr -> shift_expr & and_expr
1806
NEWLINE
and_expr -> shift_expr & and_expr
1806
and
and_expr -> shift_expr & and_expr
1806
is
and_expr -> shift_expr & and_expr
1806
or
and_expr -> shift_expr & and_expr
1806
in
and_expr -> shift_expr & and_expr
1806
==
and_expr -> shift_expr & and_expr
1806
^
and_expr -> shift_expr & and_expr
1806
>
and_expr -> shift_expr & and_expr
1806
<
and_expr -> shift_expr & and_expr
1806
if
and_expr -> shift_expr & and_expr
1806
<=
and_expr -> shift_expr & and_expr
1807
>=
shift_expr -> arith_expr >> shift_expr
1807
not
shift_expr -> arith_expr >> shift_expr
1807
=
shift_expr -> arith_expr >> shift_expr
1807
>
shift_expr -> arith_expr >> shift_expr
1807
^
shift_expr -> arith_expr >> shift_expr
1807
,
shift_expr -> arith_expr >> shift_expr
1807
is
shift_expr -> arith_expr >> shift_expr
1807
&
shift_expr -> arith_expr >> shift_expr
1807
!=
shift_expr -> arith_expr >> shift_expr
1807
<=
shift_expr -> arith_expr >> shift_expr
1807
and
shift_expr -> arith_expr >> shift_expr
1807
if
shift_expr -> arith_expr >> shift_expr
1807
==
shift_expr -> arith_expr >> shift_expr
1807
or
shift_expr -> arith_expr >> shift_expr
1807
in
shift_expr -> arith_expr >> shift_expr
1807
NEWLINE
shift_expr -> arith_expr >> shift_expr
1807
|
shift_expr -> arith_expr >> shift_expr
1807
<
shift_expr -> arith_expr >> shift_expr
1808
,
shift_expr -> arith_expr << shift_expr
1808
>=
shift_expr -> arith_expr << shift_expr
1808
in
shift_expr -> arith_expr << shift_expr
1808
>
shift_expr -> arith_expr << shift_expr
1808
|
shift_expr -> arith_expr << shift_expr
1808
!=
shift_expr -> arith_expr << shift_expr
1808
<=
shift_expr -> arith_expr << shift_expr
1808
&
shift_expr -> arith_expr << shift_expr
1808
not
shift_expr -> arith_expr << shift_expr
1808
=
shift_expr -> arith_expr << shift_expr
1808
<
shift_expr -> arith_expr << shift_expr
1808
==
shift_expr -> arith_expr << shift_expr
1808
if
shift_expr -> arith_expr << shift_expr
1808
^
shift_expr -> arith_expr << shift_expr
1808
NEWLINE
shift_expr -> arith_expr << shift_expr
1808
or
shift_expr -> arith_expr << shift_expr
1808
is
shift_expr -> arith_expr << shift_expr
1808
and
shift_expr -> arith_expr << shift_expr
1809
>>
arith_expr -> term + arith_expr
1809
^
arith_expr -> term + arith_expr
1809
NEWLINE
arith_expr -> term + arith_expr
1809
<
arith_expr -> term + arith_expr
1809
|
arith_expr -> term + arith_expr
1809
and
arith_expr -> term + arith_expr
1809
=
arith_expr -> term + arith_expr
1809
!=
arith_expr -> term + arith_expr
1809
or
arith_expr -> term + arith_expr
1809
not
arith_expr -> term + arith_expr
1809
<=
arith_expr -> term + arith_expr
1809
>
arith_expr -> term + arith_expr
1809
,
arith_expr -> term + arith_expr
1809
if
arith_expr -> term + arith_expr
1809
is
arith_expr -> term + arith_expr
1809
==
arith_expr -> term + arith_expr
1809
&
arith_expr -> term + arith_expr
1809
>=
arith_expr -> term + arith_expr
1809
in
arith_expr -> term + arith_expr
1809
<<
arith_expr -> term + arith_expr
1810
==
arith_expr -> term - arith_expr
1810
is
arith_expr -> term - arith_expr
1810
NEWLINE
arith_expr -> term - arith_expr
1810
<=
arith_expr -> term - arith_expr
1810
not
arith_expr -> term - arith_expr
1810
<<
arith_expr -> term - arith_expr
1810
=
arith_expr -> term - arith_expr
1810
&
arith_expr -> term - arith_expr
1810
|
arith_expr -> term - arith_expr
1810
and
arith_expr -> term - arith_expr
1810
or
arith_expr -> term - arith_expr
1810
,
arith_expr -> term - arith_expr
1810
>>
arith_expr -> term - arith_expr
1810
if
arith_expr -> term - arith_expr
1810
>=
arith_expr -> term - arith_expr
1810
<
arith_expr -> term - arith_expr
1810
^
arith_expr -> term - arith_expr
1810
>
arith_expr -> term - arith_expr
1810
!=
arith_expr -> term - arith_expr
1810
in
arith_expr -> term - arith_expr
1811
@
power -> atom_expr ** factor
1811
==
power -> atom_expr ** factor
1811
&
power -> atom_expr ** factor
1811
-
power -> atom_expr ** factor
1811
>
power -> atom_expr ** factor
1811
NEWLINE
power -> atom_expr ** factor
1811
and
power -> atom_expr ** factor
1811
|
power -> atom_expr ** factor
1811
<=
power -> atom_expr ** factor
1811
%
power -> atom_expr ** factor
1811
or
power -> atom_expr ** factor
1811
=
power -> atom_expr ** factor
1811
*
power -> atom_expr ** factor
1811
not
power -> atom_expr ** factor
1811
in
power -> atom_expr ** factor
1811
<<
power -> atom_expr ** factor
1811
//
power -> atom_expr ** factor
1811
/
power -> atom_expr ** factor
1811
>>
power -> atom_expr ** factor
1811
,
power -> atom_expr ** factor
1811
^
power -> atom_expr ** factor
1811
if
power -> atom_expr ** factor
1811
!=
power -> atom_expr ** factor
1811
is
power -> atom_expr ** factor
1811
<
power -> atom_expr ** factor
1811
+
power -> atom_expr ** factor
1811
>=
power -> atom_expr ** factor
1812
/
atom -> [ test_list_comp ]
1812
,
atom -> [ test_list_comp ]
1812
*
atom -> [ test_list_comp ]
1812
or
atom -> [ test_list_comp ]
1812
|
atom -> [ test_list_comp ]
1812
==
atom -> [ test_list_comp ]
1812
is
atom -> [ test_list_comp ]
1812
-
atom -> [ test_list_comp ]
1812
**
atom -> [ test_list_comp ]
1812
&
atom -> [ test_list_comp ]
1812
(
atom -> [ test_list_comp ]
1812
=
atom -> [ test_list_comp ]
1812
<
atom -> [ test_list_comp ]
1812
@
atom -> [ test_list_comp ]
1812
//
atom -> [ test_list_comp ]
1812
>
atom -> [ test_list_comp ]
1812
if
atom -> [ test_list_comp ]
1812
in
atom -> [ test_list_comp ]
1812
^
atom -> [ test_list_comp ]
1812
<<
atom -> [ test_list_comp ]
1812
[
atom -> [ test_list_comp ]
1812
!=
atom -> [ test_list_comp ]
1812
<=
atom -> [ test_list_comp ]
1812
and
atom -> [ test_list_comp ]
1812
%
atom -> [ test_list_comp ]
1812
not
atom -> [ test_list_comp ]
1812
+
atom -> [ test_list_comp ]
1812
>=
atom -> [ test_list_comp ]
1812
>>
atom -> [ test_list_comp ]
1812
.
atom -> [ test_list_comp ]
1812
NEWLINE
atom -> [ test_list_comp ]
1813
@
atom -> ( test_list_comp )
1813
>>
atom -> ( test_list_comp )
1813
<<
atom -> ( test_list_comp )
1813
==
atom -> ( test_list_comp )
1813
is
atom -> ( test_list_comp )
1813
or
atom -> ( test_list_comp )
1813
<=
atom -> ( test_list_comp )
1813
[
atom -> ( test_list_comp )
1813
if
atom -> ( test_list_comp )
1813
^
atom -> ( test_list_comp )
1813
<
atom -> ( test_list_comp )
1813
and
atom -> ( test_list_comp )
1813
=
atom -> ( test_list_comp )
1813
.
atom -> ( test_list_comp )
1813
+
atom -> ( test_list_comp )
1813
&
atom -> ( test_list_comp )
1813
!=
atom -> ( test_list_comp )
1813
in
atom -> ( test_list_comp )
1813
**
atom -> ( test_list_comp )
1813
not
atom -> ( test_list_comp )
1813
-
atom -> ( test_list_comp )
1813
(
atom -> ( test_list_comp )
1813
*
atom -> ( test_list_comp )
1813
|
atom -> ( test_list_comp )
1813
NEWLINE
atom -> ( test_list_comp )
1813
//
atom -> ( test_list_comp )
1813
>
atom -> ( test_list_comp )
1813
>=
atom -> ( test_list_comp )
1813
,
atom -> ( test_list_comp )
1813
%
atom -> ( test_list_comp )
1813
/
atom -> ( test_list_comp )
1814
]
2163
1815
,
trailer -> ( )
1815
/
trailer -> ( )
1815
[
trailer -> ( )
1815
(
trailer -> ( )
1815
|
trailer -> ( )
1815
<=
trailer -> ( )
1815
in
trailer -> ( )
1815
not
trailer -> ( )
1815
>>
trailer -> ( )
1815
^
trailer -> ( )
1815
.
trailer -> ( )
1815
NEWLINE
trailer -> ( )
1815
**
trailer -> ( )
1815
if
trailer -> ( )
1815
+
trailer -> ( )
1815
is
trailer -> ( )
1815
<
trailer -> ( )
1815
>
trailer -> ( )
1815
==
trailer -> ( )
1815
//
trailer -> ( )
1815
<<
trailer -> ( )
1815
*
trailer -> ( )
1815
-
trailer -> ( )
1815
=
trailer -> ( )
1815
>=
trailer -> ( )
1815
%
trailer -> ( )
1815
and
trailer -> ( )
1815
@
trailer -> ( )
1815
&
trailer -> ( )
1815
!=
trailer -> ( )
1815
or
trailer -> ( )
1816
)
2164
1817
is
trailer_expr -> trailer trailer_expr
1817
!=
trailer_expr -> trailer trailer_expr
1817
<<
trailer_expr -> trailer trailer_expr
1817
and
trailer_expr -> trailer trailer_expr
1817
&
trailer_expr -> trailer trailer_expr
1817
//
trailer_expr -> trailer trailer_expr
1817
|
trailer_expr -> trailer trailer_expr
1817
==
trailer_expr -> trailer trailer_expr
1817
<
trailer_expr -> trailer trailer_expr
1817
or
trailer_expr -> trailer trailer_expr
1817
^
trailer_expr -> trailer trailer_expr
1817
<=
trailer_expr -> trailer trailer_expr
1817
@
trailer_expr -> trailer trailer_expr
1817
not
trailer_expr -> trailer trailer_expr
1817
in
trailer_expr -> trailer trailer_expr
1817
=
trailer_expr -> trailer trailer_expr
1817
*
trailer_expr -> trailer trailer_expr
1817
+
trailer_expr -> trailer trailer_expr
1817
if
trailer_expr -> trailer trailer_expr
1817
**
trailer_expr -> trailer trailer_expr
1817
>>
trailer_expr -> trailer trailer_expr
1817
>=
trailer_expr -> trailer trailer_expr
1817
NEWLINE
trailer_expr -> trailer trailer_expr
1817
%
trailer_expr -> trailer trailer_expr
1817
-
trailer_expr -> trailer trailer_expr
1817
>
trailer_expr -> trailer trailer_expr
1817
/
trailer_expr -> trailer trailer_expr
1817
,
trailer_expr -> trailer trailer_expr
1818
=
trailer -> . NAME
1818
<=
trailer -> . NAME
1818
if
trailer -> . NAME
1818
<
trailer -> . NAME
1818
%
trailer -> . NAME
1818
.
trailer -> . NAME
1818
//
trailer -> . NAME
1818
|
trailer -> . NAME
1818
==
trailer -> . NAME
1818
>=
trailer -> . NAME
1818
[
trailer -> . NAME
1818
^
trailer -> . NAME
1818
<<
trailer -> . NAME
1818
in
trailer -> . NAME
1818
&
trailer -> . NAME
1818
or
trailer -> . NAME
1818
NEWLINE
trailer -> . NAME
1818
*
trailer -> . NAME
1818
(
trailer -> . NAME
1818
and
trailer -> . NAME
1818
-
trailer -> . NAME
1818
+
trailer -> . NAME
1818
!=
trailer -> . NAME
1818
not
trailer -> . NAME
1818
**
trailer -> . NAME
1818
>>
trailer -> . NAME
1818
@
trailer -> . NAME
1818
/
trailer -> . NAME
1818
is
trailer -> . NAME
1818
>
trailer -> . NAME
1818
,
trailer -> . NAME
1819
==
xor_expr -> and_expr ^ xor_expr
1819
!=
xor_expr -> and_expr ^ xor_expr
1819
>
xor_expr -> and_expr ^ xor_expr
1819
not
xor_expr -> and_expr ^ xor_expr
1819
if
xor_expr -> and_expr ^ xor_expr
1819
NEWLINE
xor_expr -> and_expr ^ xor_expr
1819
is
xor_expr -> and_expr ^ xor_expr
1819
<=
xor_expr -> and_expr ^ xor_expr
1819
,
xor_expr -> and_expr ^ xor_expr
1819
|
xor_expr -> and_expr ^ xor_expr
1819
>=
xor_expr -> and_expr ^ xor_expr
1819
and
xor_expr -> and_expr ^ xor_expr
1819
in
xor_expr -> and_expr ^ xor_expr
1819
=
xor_expr -> and_expr ^ xor_expr
1819
<
xor_expr -> and_expr ^ xor_expr
1819
or
xor_expr -> and_expr ^ xor_expr
1820
=
and_test -> not_test and and_test
1820
,
and_test -> not_test and and_test
1820
if
and_test -> not_test and and_test
1820
or
and_test -> not_test and and_test
1820
NEWLINE
and_test -> not_test and and_test
1821
=
test_list -> test , test_list
1821
NEWLINE
test_list -> test , test_list
1822
and
expr -> xor_expr | expr
1822
in
expr -> xor_expr | expr
1822
>=
expr -> xor_expr | expr
1822
is
expr -> xor_expr | expr
1822
==
expr -> xor_expr | expr
1822
or
expr -> xor_expr | expr
1822
<
expr -> xor_expr | expr
1822
NEWLINE
expr -> xor_expr | expr
1822
if
expr -> xor_expr | expr
1822
=
expr -> xor_expr | expr
1822
,
expr -> xor_expr | expr
1822
not
expr -> xor_expr | expr
1822
!=
expr -> xor_expr | expr
1822
<=
expr -> xor_expr | expr
1822
>
expr -> xor_expr | expr
1823
~
825
1823
factor
826
1823
STRING
827
1823
shift_expr
828
1823
arith_expr
829
1823
term
830
1823
NUMBER
831
1823
{
832
1823
atom_expr
833
1823
[
834
1823
-
835
1823
None
836
1823
(
837
1823
atom
838
1823
and_expr
839
1823
+
840
1823
not_test
841
1823
NAME
843
1823
power
845
1823
True
846
1823
comparison
847
1823
xor_expr
848
1823
lambda
849
1823
False
850
1823
and_test
851
1823
lambdef
852
1823
test
2165
1823
expr
853
1823
not
854
1823
or_test
855
1824
,
lambdef -> lambda : test
1824
=
lambdef -> lambda : test
1824
NEWLINE
lambdef -> lambda : test
1825
if
or_test -> and_test or or_test
1825
,
or_test -> and_test or or_test
1825
=
or_test -> and_test or or_test
1825
NEWLINE
or_test -> and_test or or_test
1826
=
comparison -> expr comp_op comparison
1826
or
comparison -> expr comp_op comparison
1826
,
comparison -> expr comp_op comparison
1826
NEWLINE
comparison -> expr comp_op comparison
1826
if
comparison -> expr comp_op comparison
1826
and
comparison -> expr comp_op comparison
1827
else
2166
1828
~
1828
1828
STRING
1830
1828
NUMBER
1833
1828
{
1834
1828
[
1836
1828
atom_expr
1835
1828
None
1838
1828
-
1837
1828
factor
2167
1828
(
1839
1828
atom
1841
1828
+
1843
1828
NAME
1845
1828
power
1846
1828
True
1847
1828
False
1851
1829
/
2168
1829
@
2169
1829
if
term -> factor
1829
%
2170
1829
<<
term -> factor
1829
-
term -> factor
1829
//
2171
1829
*
2172
1829
>=
term -> factor
1829
or
term -> factor
1829
<=
term -> factor
1829
>
term -> factor
1829
in
term -> factor
1829
<
term -> factor
1829
NEWLINE
term -> factor
1829
>>
term -> factor
1829
==
term -> factor
1829
=
term -> factor
1829
is
term -> factor
1829
+
term -> factor
1829
|
term -> factor
1829
!=
term -> factor
1829
&
term -> factor
1829
not
term -> factor
1829
and
term -> factor
1829
^
term -> factor
1830
==
atom -> STRING
1830
>
atom -> STRING
1830
<=
atom -> STRING
1830
&
atom -> STRING
1830
.
atom -> STRING
1830
>=
atom -> STRING
1830
@
atom -> STRING
1830
[
atom -> STRING
1830
^
atom -> STRING
1830
NEWLINE
atom -> STRING
1830
%
atom -> STRING
1830
=
atom -> STRING
1830
**
atom -> STRING
1830
-
atom -> STRING
1830
//
atom -> STRING
1830
>>
atom -> STRING
1830
<
atom -> STRING
1830
|
atom -> STRING
1830
(
atom -> STRING
1830
is
atom -> STRING
1830
and
atom -> STRING
1830
*
atom -> STRING
1830
or
atom -> STRING
1830
not
atom -> STRING
1830
<<
atom -> STRING
1830
/
atom -> STRING
1830
+
atom -> STRING
1830
!=
atom -> STRING
1830
in
atom -> STRING
1830
if
atom -> STRING
1831
NEWLINE
and_expr -> shift_expr
1831
&
2173
1831
in
and_expr -> shift_expr
1831
not
and_expr -> shift_expr
1831
!=
and_expr -> shift_expr
1831
>=
and_expr -> shift_expr
1831
if
and_expr -> shift_expr
1831
and
and_expr -> shift_expr
1831
|
and_expr -> shift_expr
1831
is
and_expr -> shift_expr
1831
<=
and_expr -> shift_expr
1831
>
and_expr -> shift_expr
1831
=
and_expr -> shift_expr
1831
^
and_expr -> shift_expr
1831
or
and_expr -> shift_expr
1831
<
and_expr -> shift_expr
1831
==
and_expr -> shift_expr
1832
+
2174
1832
if
arith_expr -> term
1832
-
2175
1832
=
arith_expr -> term
1832
<=
arith_expr -> term
1832
|
arith_expr -> term
1832
not
arith_expr -> term
1832
^
arith_expr -> term
1832
<<
arith_expr -> term
1832
&
arith_expr -> term
1832
==
arith_expr -> term
1832
is
arith_expr -> term
1832
!=
arith_expr -> term
1832
>
arith_expr -> term
1832
and
arith_expr -> term
1832
<
arith_expr -> term
1832
or
arith_expr -> term
1832
NEWLINE
arith_expr -> term
1832
>=
arith_expr -> term
1832
>>
arith_expr -> term
1832
in
arith_expr -> term
1833
<<
atom -> NUMBER
1833
-
atom -> NUMBER
1833
^
atom -> NUMBER
1833
or
atom -> NUMBER
1833
==
atom -> NUMBER
1833
!=
atom -> NUMBER
1833
/
atom -> NUMBER
1833
and
atom -> NUMBER
1833
%
atom -> NUMBER
1833
>=
atom -> NUMBER
1833
@
atom -> NUMBER
1833
NEWLINE
atom -> NUMBER
1833
|
atom -> NUMBER
1833
[
atom -> NUMBER
1833
//
atom -> NUMBER
1833
.
atom -> NUMBER
1833
=
atom -> NUMBER
1833
not
atom -> NUMBER
1833
<
atom -> NUMBER
1833
>>
atom -> NUMBER
1833
if
atom -> NUMBER
1833
<=
atom -> NUMBER
1833
>
atom -> NUMBER
1833
&
atom -> NUMBER
1833
is
atom -> NUMBER
1833
**
atom -> NUMBER
1833
in
atom -> NUMBER
1833
+
atom -> NUMBER
1833
(
atom -> NUMBER
1833
*
atom -> NUMBER
1834
}
2176
1835
**
2177
1835
or
power -> atom_expr
1835
*
power -> atom_expr
1835
>=
power -> atom_expr
1835
^
power -> atom_expr
1835
in
power -> atom_expr
1835
!=
power -> atom_expr
1835
if
power -> atom_expr
1835
@
power -> atom_expr
1835
=
power -> atom_expr
1835
-
power -> atom_expr
1835
and
power -> atom_expr
1835
not
power -> atom_expr
1835
==
power -> atom_expr
1835
<
power -> atom_expr
1835
&
power -> atom_expr
1835
|
power -> atom_expr
1835
//
power -> atom_expr
1835
>
power -> atom_expr
1835
NEWLINE
power -> atom_expr
1835
%
power -> atom_expr
1835
/
power -> atom_expr
1835
is
power -> atom_expr
1835
<<
power -> atom_expr
1835
>>
power -> atom_expr
1835
+
power -> atom_expr
1835
<=
power -> atom_expr
1836
~
186
1836
factor
187
1836
STRING
188
1836
shift_expr
189
1836
test_list_comp
2178
1836
arith_expr
191
1836
term
192
1836
atom_expr
193
1836
]
2179
1836
test
195
1836
NUMBER
196
1836
and_expr
197
1836
{
198
1836
[
199
1836
-
200
1836
None
201
1836
(
202
1836
atom
203
1836
+
204
1836
NAME
205
1836
power
206
1836
True
207
1836
comparison
208
1836
xor_expr
209
1836
lambdef
210
1836
False
211
1836
not_test
212
1836
or_test
213
1836
and_test
214
1836
lambda
215
1836
not
216
1836
expr
217
1836
test_list
218
1837
~
1828
1837
STRING
1830
1837
NUMBER
1833
1837
factor
2180
1837
{
1834
1837
[
1836
1837
atom_expr
1835
1837
None
1838
1837
-
1837
1837
(
1839
1837
atom
1841
1837
+
1843
1837
NAME
1845
1837
power
1846
1837
True
1847
1837
False
1851
1838
not
atom -> None
1838
or
atom -> None
1838
==
atom -> None
1838
*
atom -> None
1838
-
atom -> None
1838
^
atom -> None
1838
>>
atom -> None
1838
=
atom -> None
1838
if
atom -> None
1838
<<
atom -> None
1838
and
atom -> None
1838
|
atom -> None
1838
NEWLINE
atom -> None
1838
&
atom -> None
1838
!=
atom -> None
1838
@
atom -> None
1838
.
atom -> None
1838
/
atom -> None
1838
%
atom -> None
1838
>
atom -> None
1838
is
atom -> None
1838
<
atom -> None
1838
(
atom -> None
1838
**
atom -> None
1838
//
atom -> None
1838
in
atom -> None
1838
<=
atom -> None
1838
>=
atom -> None
1838
+
atom -> None
1838
[
atom -> None
1839
~
92
1839
factor
93
1839
STRING
94
1839
shift_expr
95
1839
arith_expr
96
1839
term
97
1839
NUMBER
98
1839
and_expr
99
1839
{
100
1839
atom_expr
101
1839
[
102
1839
-
103
1839
None
105
1839
(
106
1839
atom
107
1839
+
109
1839
)
2181
1839
NAME
110
1839
test_list_comp
2182
1839
power
111
1839
test_list
112
1839
True
113
1839
comparison
114
1839
xor_expr
115
1839
lambdef
116
1839
False
117
1839
not_test
118
1839
or_test
119
1839
test
120
1839
lambda
121
1839
and_test
122
1839
not
123
1839
expr
124
1840
>>
2183
1840
=
shift_expr -> arith_expr
1840
^
shift_expr -> arith_expr
1840
<<
2184
1840
or
shift_expr -> arith_expr
1840
|
shift_expr -> arith_expr
1840
<=
shift_expr -> arith_expr
1840
is
shift_expr -> arith_expr
1840
<
shift_expr -> arith_expr
1840
if
shift_expr -> arith_expr
1840
not
shift_expr -> arith_expr
1840
in
shift_expr -> arith_expr
1840
and
shift_expr -> arith_expr
1840
>=
shift_expr -> arith_expr
1840
==
shift_expr -> arith_expr
1840
!=
shift_expr -> arith_expr
1840
>
shift_expr -> arith_expr
1840
NEWLINE
shift_expr -> arith_expr
1840
&
shift_expr -> arith_expr
1841
[
2185
1841
(
2186
1841
//
trailer_expr -> 
1841
trailer
2187
1841
<<
trailer_expr -> 
1841
trailer_expr
2188
1841
*
trailer_expr -> 
1841
in
trailer_expr -> 
1841
&
trailer_expr -> 
1841
.
2189
1841
and
trailer_expr -> 
1841
<=
trailer_expr -> 
1841
|
trailer_expr -> 
1841
or
trailer_expr -> 
1841
>=
trailer_expr -> 
1841
=
trailer_expr -> 
1841
+
trailer_expr -> 
1841
**
trailer_expr -> 
1841
>>
trailer_expr -> 
1841
!=
trailer_expr -> 
1841
-
trailer_expr -> 
1841
/
trailer_expr -> 
1841
%
trailer_expr -> 
1841
is
trailer_expr -> 
1841
<
trailer_expr -> 
1841
if
trailer_expr -> 
1841
NEWLINE
trailer_expr -> 
1841
>
trailer_expr -> 
1841
^
trailer_expr -> 
1841
==
trailer_expr -> 
1841
@
trailer_expr -> 
1841
not
trailer_expr -> 
1842
not
xor_expr -> and_expr
1842
=
xor_expr -> and_expr
1842
if
xor_expr -> and_expr
1842
|
xor_expr -> and_expr
1842
>
xor_expr -> and_expr
1842
^
2190
1842
<
xor_expr -> and_expr
1842
NEWLINE
xor_expr -> and_expr
1842
or
xor_expr -> and_expr
1842
>=
xor_expr -> and_expr
1842
in
xor_expr -> and_expr
1842
and
xor_expr -> and_expr
1842
is
xor_expr -> and_expr
1842
==
xor_expr -> and_expr
1842
!=
xor_expr -> and_expr
1842
<=
xor_expr -> and_expr
1843
~
1828
1843
STRING
1830
1843
NUMBER
1833
1843
{
1834
1843
factor
2191
1843
atom_expr
1835
1843
[
1836
1843
None
1838
1843
-
1837
1843
(
1839
1843
atom
1841
1843
+
1843
1843
NAME
1845
1843
power
1846
1843
True
1847
1843
False
1851
1844
or
and_test -> not_test
1844
if
and_test -> not_test
1844
and
2192
1844
NEWLINE
and_test -> not_test
1844
=
and_test -> not_test
1845
<=
atom -> NAME
1845
@
atom -> NAME
1845
>>
atom -> NAME
1845
==
atom -> NAME
1845
>
atom -> NAME
1845
*
atom -> NAME
1845
-
atom -> NAME
1845
&
atom -> NAME
1845
is
atom -> NAME
1845
.
atom -> NAME
1845
or
atom -> NAME
1845
in
atom -> NAME
1845
NEWLINE
atom -> NAME
1845
<<
atom -> NAME
1845
+
atom -> NAME
1845
if
atom -> NAME
1845
|
atom -> NAME
1845
and
atom -> NAME
1845
=
atom -> NAME
1845
^
atom -> NAME
1845
/
atom -> NAME
1845
[
atom -> NAME
1845
not
atom -> NAME
1845
!=
atom -> NAME
1845
%
atom -> NAME
1845
<
atom -> NAME
1845
>=
atom -> NAME
1845
**
atom -> NAME
1845
(
atom -> NAME
1845
//
atom -> NAME
1846
if
factor -> power
1846
is
factor -> power
1846
%
factor -> power
1846
==
factor -> power
1846
>=
factor -> power
1846
or
factor -> power
1846
and
factor -> power
1846
/
factor -> power
1846
<
factor -> power
1846
+
factor -> power
1846
//
factor -> power
1846
@
factor -> power
1846
in
factor -> power
1846
NEWLINE
factor -> power
1846
=
factor -> power
1846
<=
factor -> power
1846
&
factor -> power
1846
!=
factor -> power
1846
<<
factor -> power
1846
|
factor -> power
1846
>
factor -> power
1846
*
factor -> power
1846
^
factor -> power
1846
-
factor -> power
1846
not
factor -> power
1846
>>
factor -> power
1847
>
atom -> True
1847
|
atom -> True
1847
-
atom -> True
1847
NEWLINE
atom -> True
1847
==
atom -> True
1847
<<
atom -> True
1847
if
atom -> True
1847
%
atom -> True
1847
/
atom -> True
1847
[
atom -> True
1847
*
atom -> True
1847
<=
atom -> True
1847
<
atom -> True
1847
&
atom -> True
1847
+
atom -> True
1847
**
atom -> True
1847
!=
atom -> True
1847
>>
atom -> True
1847
//
atom -> True
1847
and
atom -> True
1847
^
atom -> True
1847
is
atom -> True
1847
or
atom -> True
1847
.
atom -> True
1847
(
atom -> True
1847
>=
atom -> True
1847
@
atom -> True
1847
=
atom -> True
1847
not
atom -> True
1847
in
atom -> True
1848
or
not_test -> comparison
1848
if
not_test -> comparison
1848
and
not_test -> comparison
1848
NEWLINE
not_test -> comparison
1848
=
not_test -> comparison
1849
|
2193
1849
not
expr -> xor_expr
1849
or
expr -> xor_expr
1849
==
expr -> xor_expr
1849
in
expr -> xor_expr
1849
if
expr -> xor_expr
1849
NEWLINE
expr -> xor_expr
1849
<=
expr -> xor_expr
1849
is
expr -> xor_expr
1849
<
expr -> xor_expr
1849
>=
expr -> xor_expr
1849
=
expr -> xor_expr
1849
>
expr -> xor_expr
1849
and
expr -> xor_expr
1849
!=
expr -> xor_expr
1850
NAME
251
1850
:
2194
1850
varargslist
2195
1850
vfpdef
253
1851
<=
atom -> False
1851
*
atom -> False
1851
not
atom -> False
1851
!=
atom -> False
1851
@
atom -> False
1851
and
atom -> False
1851
=
atom -> False
1851
if
atom -> False
1851
<<
atom -> False
1851
>
atom -> False
1851
+
atom -> False
1851
/
atom -> False
1851
==
atom -> False
1851
&
atom -> False
1851
^
atom -> False
1851
in
atom -> False
1851
[
atom -> False
1851
is
atom -> False
1851
%
atom -> False
1851
>=
atom -> False
1851
//
atom -> False
1851
(
atom -> False
1851
NEWLINE
atom -> False
1851
|
atom -> False
1851
<
atom -> False
1851
.
atom -> False
1851
or
atom -> False
1851
**
atom -> False
1851
>>
atom -> False
1851
-
atom -> False
1852
=
or_test -> and_test
1852
or
2196
1852
if
or_test -> and_test
1852
NEWLINE
or_test -> and_test
1853
NEWLINE
yield_arg -> from test
1853
=
yield_arg -> from test
1854
=
test -> lambdef
1854
NEWLINE
test -> lambdef
1855
!=
125
1855
=
comparison -> expr
1855
is
126
1855
>=
127
1855
in
128
1855
<
129
1855
==
131
1855
<=
132
1855
not
133
1855
>
134
1855
comp_op
2197
1855
NEWLINE
comparison -> expr
1855
or
comparison -> expr
1855
if
comparison -> expr
1855
and
comparison -> expr
1856
~
1828
1856
factor
1829
1856
STRING
1830
1856
shift_expr
1831
1856
term
1832
1856
NUMBER
1833
1856
{
1834
1856
atom_expr
1835
1856
[
1836
1856
-
1837
1856
None
1838
1856
(
1839
1856
arith_expr
1840
1856
atom
1841
1856
and_expr
1842
1856
+
1843
1856
NAME
1845
1856
power
1846
1856
True
1847
1856
comparison
1848
1856
xor_expr
1849
1856
False
1851
1856
not_test
2198
1856
expr
1855
1856
not
1856
1857
=
test -> or_test
1857
if
2199
1857
NEWLINE
test -> or_test
1858
<=
term -> factor / term
1858
!=
term -> factor / term
1858
and
term -> factor / term
1858
or
term -> factor / term
1858
|
term -> factor / term
1858
^
term -> factor / term
1858
>>
term -> factor / term
1858
==
term -> factor / term
1858
>
term -> factor / term
1858
if
term -> factor / term
1858
&
term -> factor / term
1858
=
term -> factor / term
1858
<<
term -> factor / term
1858
+
term -> factor / term
1858
-
term -> factor / term
1858
not
term -> factor / term
1858
in
term -> factor / term
1858
<
term -> factor / term
1858
is
term -> factor / term
1858
>=
term -> factor / term
1859
is
term -> factor @ term
1859
and
term -> factor @ term
1859
>
term -> factor @ term
1859
not
term -> factor @ term
1859
in
term -> factor @ term
1859
==
term -> factor @ term
1859
<
term -> factor @ term
1859
or
term -> factor @ term
1859
!=
term -> factor @ term
1859
<<
term -> factor @ term
1859
<=
term -> factor @ term
1859
=
term -> factor @ term
1859
if
term -> factor @ term
1859
|
term -> factor @ term
1859
+
term -> factor @ term
1859
&
term -> factor @ term
1859
-
term -> factor @ term
1859
>=
term -> factor @ term
1859
>>
term -> factor @ term
1859
^
term -> factor @ term
1860
>
term -> factor % term
1860
!=
term -> factor % term
1860
&
term -> factor % term
1860
>=
term -> factor % term
1860
or
term -> factor % term
1860
=
term -> factor % term
1860
==
term -> factor % term
1860
^
term -> factor % term
1860
in
term -> factor % term
1860
|
term -> factor % term
1860
and
term -> factor % term
1860
if
term -> factor % term
1860
not
term -> factor % term
1860
is
term -> factor % term
1860
<
term -> factor % term
1860
>>
term -> factor % term
1860
-
term -> factor % term
1860
<=
term -> factor % term
1860
<<
term -> factor % term
1860
+
term -> factor % term
1861
+
term -> factor // term
1861
==
term -> factor // term
1861
<<
term -> factor // term
1861
<
term -> factor // term
1861
if
term -> factor // term
1861
in
term -> factor // term
1861
!=
term -> factor // term
1861
>
term -> factor // term
1861
not
term -> factor // term
1861
=
term -> factor // term
1861
>=
term -> factor // term
1861
and
term -> factor // term
1861
is
term -> factor // term
1861
-
term -> factor // term
1861
&
term -> factor // term
1861
|
term -> factor // term
1861
^
term -> factor // term
1861
<=
term -> factor // term
1861
or
term -> factor // term
1861
>>
term -> factor // term
1862
&
term -> factor * term
1862
-
term -> factor * term
1862
in
term -> factor * term
1862
or
term -> factor * term
1862
<=
term -> factor * term
1862
|
term -> factor * term
1862
and
term -> factor * term
1862
not
term -> factor * term
1862
<<
term -> factor * term
1862
==
term -> factor * term
1862
if
term -> factor * term
1862
>
term -> factor * term
1862
>>
term -> factor * term
1862
<
term -> factor * term
1862
!=
term -> factor * term
1862
=
term -> factor * term
1862
>=
term -> factor * term
1862
^
term -> factor * term
1862
+
term -> factor * term
1862
is
term -> factor * term
1863
|
and_expr -> shift_expr & and_expr
1863
!=
and_expr -> shift_expr & and_expr
1863
=
and_expr -> shift_expr & and_expr
1863
>=
and_expr -> shift_expr & and_expr
1863
not
and_expr -> shift_expr & and_expr
1863
and
and_expr -> shift_expr & and_expr
1863
is
and_expr -> shift_expr & and_expr
1863
in
and_expr -> shift_expr & and_expr
1863
or
and_expr -> shift_expr & and_expr
1863
==
and_expr -> shift_expr & and_expr
1863
^
and_expr -> shift_expr & and_expr
1863
>
and_expr -> shift_expr & and_expr
1863
<
and_expr -> shift_expr & and_expr
1863
if
and_expr -> shift_expr & and_expr
1863
<=
and_expr -> shift_expr & and_expr
1864
not
arith_expr -> term + arith_expr
1864
>>
arith_expr -> term + arith_expr
1864
^
arith_expr -> term + arith_expr
1864
in
arith_expr -> term + arith_expr
1864
>=
arith_expr -> term + arith_expr
1864
&
arith_expr -> term + arith_expr
1864
<
arith_expr -> term + arith_expr
1864
<=
arith_expr -> term + arith_expr
1864
>
arith_expr -> term + arith_expr
1864
|
arith_expr -> term + arith_expr
1864
==
arith_expr -> term + arith_expr
1864
and
arith_expr -> term + arith_expr
1864
if
arith_expr -> term + arith_expr
1864
is
arith_expr -> term + arith_expr
1864
=
arith_expr -> term + arith_expr
1864
!=
arith_expr -> term + arith_expr
1864
or
arith_expr -> term + arith_expr
1864
<<
arith_expr -> term + arith_expr
1865
if
arith_expr -> term - arith_expr
1865
|
arith_expr -> term - arith_expr
1865
and
arith_expr -> term - arith_expr
1865
or
arith_expr -> term - arith_expr
1865
&
arith_expr -> term - arith_expr
1865
<
arith_expr -> term - arith_expr
1865
^
arith_expr -> term - arith_expr
1865
in
arith_expr -> term - arith_expr
1865
<=
arith_expr -> term - arith_expr
1865
not
arith_expr -> term - arith_expr
1865
>=
arith_expr -> term - arith_expr
1865
>
arith_expr -> term - arith_expr
1865
!=
arith_expr -> term - arith_expr
1865
<<
arith_expr -> term - arith_expr
1865
==
arith_expr -> term - arith_expr
1865
=
arith_expr -> term - arith_expr
1865
is
arith_expr -> term - arith_expr
1865
>>
arith_expr -> term - arith_expr
1866
@
power -> atom_expr ** factor
1866
==
power -> atom_expr ** factor
1866
&
power -> atom_expr ** factor
1866
-
power -> atom_expr ** factor
1866
>
power -> atom_expr ** factor
1866
and
power -> atom_expr ** factor
1866
|
power -> atom_expr ** factor
1866
<=
power -> atom_expr ** factor
1866
%
power -> atom_expr ** factor
1866
or
power -> atom_expr ** factor
1866
=
power -> atom_expr ** factor
1866
*
power -> atom_expr ** factor
1866
not
power -> atom_expr ** factor
1866
in
power -> atom_expr ** factor
1866
<<
power -> atom_expr ** factor
1866
//
power -> atom_expr ** factor
1866
/
power -> atom_expr ** factor
1866
>>
power -> atom_expr ** factor
1866
^
power -> atom_expr ** factor
1866
if
power -> atom_expr ** factor
1866
!=
power -> atom_expr ** factor
1866
is
power -> atom_expr ** factor
1866
<
power -> atom_expr ** factor
1866
+
power -> atom_expr ** factor
1866
>=
power -> atom_expr ** factor
1867
/
atom -> [ test_list_comp ]
1867
*
atom -> [ test_list_comp ]
1867
or
atom -> [ test_list_comp ]
1867
|
atom -> [ test_list_comp ]
1867
==
atom -> [ test_list_comp ]
1867
is
atom -> [ test_list_comp ]
1867
-
atom -> [ test_list_comp ]
1867
**
atom -> [ test_list_comp ]
1867
&
atom -> [ test_list_comp ]
1867
(
atom -> [ test_list_comp ]
1867
=
atom -> [ test_list_comp ]
1867
<
atom -> [ test_list_comp ]
1867
@
atom -> [ test_list_comp ]
1867
//
atom -> [ test_list_comp ]
1867
>
atom -> [ test_list_comp ]
1867
if
atom -> [ test_list_comp ]
1867
in
atom -> [ test_list_comp ]
1867
^
atom -> [ test_list_comp ]
1867
<<
atom -> [ test_list_comp ]
1867
[
atom -> [ test_list_comp ]
1867
!=
atom -> [ test_list_comp ]
1867
<=
atom -> [ test_list_comp ]
1867
and
atom -> [ test_list_comp ]
1867
%
atom -> [ test_list_comp ]
1867
not
atom -> [ test_list_comp ]
1867
+
atom -> [ test_list_comp ]
1867
>=
atom -> [ test_list_comp ]
1867
>>
atom -> [ test_list_comp ]
1867
.
atom -> [ test_list_comp ]
1868
@
atom -> ( test_list_comp )
1868
>>
atom -> ( test_list_comp )
1868
<<
atom -> ( test_list_comp )
1868
==
atom -> ( test_list_comp )
1868
is
atom -> ( test_list_comp )
1868
or
atom -> ( test_list_comp )
1868
<=
atom -> ( test_list_comp )
1868
[
atom -> ( test_list_comp )
1868
%
atom -> ( test_list_comp )
1868
if
atom -> ( test_list_comp )
1868
^
atom -> ( test_list_comp )
1868
<
atom -> ( test_list_comp )
1868
and
atom -> ( test_list_comp )
1868
=
atom -> ( test_list_comp )
1868
+
atom -> ( test_list_comp )
1868
&
atom -> ( test_list_comp )
1868
!=
atom -> ( test_list_comp )
1868
in
atom -> ( test_list_comp )
1868
**
atom -> ( test_list_comp )
1868
not
atom -> ( test_list_comp )
1868
-
atom -> ( test_list_comp )
1868
(
atom -> ( test_list_comp )
1868
*
atom -> ( test_list_comp )
1868
|
atom -> ( test_list_comp )
1868
//
atom -> ( test_list_comp )
1868
>
atom -> ( test_list_comp )
1868
>=
atom -> ( test_list_comp )
1868
.
atom -> ( test_list_comp )
1868
/
atom -> ( test_list_comp )
1869
>=
shift_expr -> arith_expr >> shift_expr
1869
not
shift_expr -> arith_expr >> shift_expr
1869
=
shift_expr -> arith_expr >> shift_expr
1869
>
shift_expr -> arith_expr >> shift_expr
1869
^
shift_expr -> arith_expr >> shift_expr
1869
is
shift_expr -> arith_expr >> shift_expr
1869
&
shift_expr -> arith_expr >> shift_expr
1869
if
shift_expr -> arith_expr >> shift_expr
1869
!=
shift_expr -> arith_expr >> shift_expr
1869
<=
shift_expr -> arith_expr >> shift_expr
1869
and
shift_expr -> arith_expr >> shift_expr
1869
==
shift_expr -> arith_expr >> shift_expr
1869
or
shift_expr -> arith_expr >> shift_expr
1869
in
shift_expr -> arith_expr >> shift_expr
1869
|
shift_expr -> arith_expr >> shift_expr
1869
<
shift_expr -> arith_expr >> shift_expr
1870
>=
shift_expr -> arith_expr << shift_expr
1870
in
shift_expr -> arith_expr << shift_expr
1870
>
shift_expr -> arith_expr << shift_expr
1870
|
shift_expr -> arith_expr << shift_expr
1870
!=
shift_expr -> arith_expr << shift_expr
1870
<=
shift_expr -> arith_expr << shift_expr
1870
&
shift_expr -> arith_expr << shift_expr
1870
not
shift_expr -> arith_expr << shift_expr
1870
=
shift_expr -> arith_expr << shift_expr
1870
<
shift_expr -> arith_expr << shift_expr
1870
==
shift_expr -> arith_expr << shift_expr
1870
if
shift_expr -> arith_expr << shift_expr
1870
^
shift_expr -> arith_expr << shift_expr
1870
or
shift_expr -> arith_expr << shift_expr
1870
is
shift_expr -> arith_expr << shift_expr
1870
and
shift_expr -> arith_expr << shift_expr
1871
]
2200
1872
/
trailer -> ( )
1872
[
trailer -> ( )
1872
(
trailer -> ( )
1872
|
trailer -> ( )
1872
<=
trailer -> ( )
1872
in
trailer -> ( )
1872
not
trailer -> ( )
1872
>>
trailer -> ( )
1872
^
trailer -> ( )
1872
.
trailer -> ( )
1872
**
trailer -> ( )
1872
if
trailer -> ( )
1872
+
trailer -> ( )
1872
is
trailer -> ( )
1872
<
trailer -> ( )
1872
>
trailer -> ( )
1872
==
trailer -> ( )
1872
//
trailer -> ( )
1872
<<
trailer -> ( )
1872
*
trailer -> ( )
1872
-
trailer -> ( )
1872
=
trailer -> ( )
1872
>=
trailer -> ( )
1872
%
trailer -> ( )
1872
and
trailer -> ( )
1872
@
trailer -> ( )
1872
&
trailer -> ( )
1872
!=
trailer -> ( )
1872
or
trailer -> ( )
1873
)
2201
1874
is
trailer_expr -> trailer trailer_expr
1874
!=
trailer_expr -> trailer trailer_expr
1874
<<
trailer_expr -> trailer trailer_expr
1874
and
trailer_expr -> trailer trailer_expr
1874
&
trailer_expr -> trailer trailer_expr
1874
//
trailer_expr -> trailer trailer_expr
1874
|
trailer_expr -> trailer trailer_expr
1874
==
trailer_expr -> trailer trailer_expr
1874
<
trailer_expr -> trailer trailer_expr
1874
or
trailer_expr -> trailer trailer_expr
1874
^
trailer_expr -> trailer trailer_expr
1874
<=
trailer_expr -> trailer trailer_expr
1874
@
trailer_expr -> trailer trailer_expr
1874
not
trailer_expr -> trailer trailer_expr
1874
in
trailer_expr -> trailer trailer_expr
1874
=
trailer_expr -> trailer trailer_expr
1874
*
trailer_expr -> trailer trailer_expr
1874
+
trailer_expr -> trailer trailer_expr
1874
if
trailer_expr -> trailer trailer_expr
1874
**
trailer_expr -> trailer trailer_expr
1874
>>
trailer_expr -> trailer trailer_expr
1874
>=
trailer_expr -> trailer trailer_expr
1874
%
trailer_expr -> trailer trailer_expr
1874
-
trailer_expr -> trailer trailer_expr
1874
>
trailer_expr -> trailer trailer_expr
1874
/
trailer_expr -> trailer trailer_expr
1875
=
trailer -> . NAME
1875
<=
trailer -> . NAME
1875
if
trailer -> . NAME
1875
<
trailer -> . NAME
1875
%
trailer -> . NAME
1875
.
trailer -> . NAME
1875
//
trailer -> . NAME
1875
|
trailer -> . NAME
1875
==
trailer -> . NAME
1875
>=
trailer -> . NAME
1875
[
trailer -> . NAME
1875
^
trailer -> . NAME
1875
<<
trailer -> . NAME
1875
in
trailer -> . NAME
1875
&
trailer -> . NAME
1875
or
trailer -> . NAME
1875
*
trailer -> . NAME
1875
(
trailer -> . NAME
1875
and
trailer -> . NAME
1875
-
trailer -> . NAME
1875
+
trailer -> . NAME
1875
!=
trailer -> . NAME
1875
not
trailer -> . NAME
1875
**
trailer -> . NAME
1875
>>
trailer -> . NAME
1875
@
trailer -> . NAME
1875
/
trailer -> . NAME
1875
is
trailer -> . NAME
1875
>
trailer -> . NAME
1876
==
xor_expr -> and_expr ^ xor_expr
1876
!=
xor_expr -> and_expr ^ xor_expr
1876
>
xor_expr -> and_expr ^ xor_expr
1876
not
xor_expr -> and_expr ^ xor_expr
1876
if
xor_expr -> and_expr ^ xor_expr
1876
is
xor_expr -> and_expr ^ xor_expr
1876
<=
xor_expr -> and_expr ^ xor_expr
1876
|
xor_expr -> and_expr ^ xor_expr
1876
>=
xor_expr -> and_expr ^ xor_expr
1876
and
xor_expr -> and_expr ^ xor_expr
1876
in
xor_expr -> and_expr ^ xor_expr
1876
=
xor_expr -> and_expr ^ xor_expr
1876
<
xor_expr -> and_expr ^ xor_expr
1876
or
xor_expr -> and_expr ^ xor_expr
1877
=
and_test -> not_test and and_test
1877
if
and_test -> not_test and and_test
1877
or
and_test -> not_test and and_test
1878
and
expr -> xor_expr | expr
1878
in
expr -> xor_expr | expr
1878
>=
expr -> xor_expr | expr
1878
is
expr -> xor_expr | expr
1878
==
expr -> xor_expr | expr
1878
or
expr -> xor_expr | expr
1878
<
expr -> xor_expr | expr
1878
if
expr -> xor_expr | expr
1878
=
expr -> xor_expr | expr
1878
not
expr -> xor_expr | expr
1878
!=
expr -> xor_expr | expr
1878
<=
expr -> xor_expr | expr
1878
>
expr -> xor_expr | expr
1879
if
or_test -> and_test or or_test
1879
=
or_test -> and_test or or_test
1880
~
858
1880
factor
859
1880
STRING
860
1880
shift_expr
861
1880
term
862
1880
NUMBER
863
1880
{
864
1880
atom_expr
865
1880
[
866
1880
-
867
1880
None
868
1880
(
869
1880
arith_expr
870
1880
atom
871
1880
and_expr
872
1880
+
873
1880
not_test
874
1880
NAME
875
1880
power
876
1880
True
877
1880
comparison
878
1880
xor_expr
879
1880
False
880
1880
and_test
881
1880
lambda
882
1880
test
2202
1880
expr
883
1880
not
884
1880
or_test
886
1880
lambdef
887
1881
=
lambdef -> lambda : test
1882
and
comparison -> expr comp_op comparison
1882
=
comparison -> expr comp_op comparison
1882
if
comparison -> expr comp_op comparison
1882
or
comparison -> expr comp_op comparison
1883
NEWLINE
annassign -> : test = test
1884
else
2203
1885
NEWLINE
yield_arg -> from test
1886
//
trailer -> [ subscriptlist ]
1886
/
trailer -> [ subscriptlist ]
1886
^
trailer -> [ subscriptlist ]
1886
.
trailer -> [ subscriptlist ]
1886
<
trailer -> [ subscriptlist ]
1886
<<
trailer -> [ subscriptlist ]
1886
in
trailer -> [ subscriptlist ]
1886
NEWLINE
trailer -> [ subscriptlist ]
1886
@
trailer -> [ subscriptlist ]
1886
>
trailer -> [ subscriptlist ]
1886
*
trailer -> [ subscriptlist ]
1886
and
trailer -> [ subscriptlist ]
1886
+
trailer -> [ subscriptlist ]
1886
(
trailer -> [ subscriptlist ]
1886
is
trailer -> [ subscriptlist ]
1886
or
trailer -> [ subscriptlist ]
1886
<=
trailer -> [ subscriptlist ]
1886
if
trailer -> [ subscriptlist ]
1886
|
trailer -> [ subscriptlist ]
1886
==
trailer -> [ subscriptlist ]
1886
not
trailer -> [ subscriptlist ]
1886
-
trailer -> [ subscriptlist ]
1886
!=
trailer -> [ subscriptlist ]
1886
&
trailer -> [ subscriptlist ]
1886
[
trailer -> [ subscriptlist ]
1886
>>
trailer -> [ subscriptlist ]
1886
%
trailer -> [ subscriptlist ]
1886
>=
trailer -> [ subscriptlist ]
1886
**
trailer -> [ subscriptlist ]
1887
>=
trailer -> ( arglist )
1887
//
trailer -> ( arglist )
1887
%
trailer -> ( arglist )
1887
in
trailer -> ( arglist )
1887
&
trailer -> ( arglist )
1887
>>
trailer -> ( arglist )
1887
-
trailer -> ( arglist )
1887
^
trailer -> ( arglist )
1887
>
trailer -> ( arglist )
1887
<<
trailer -> ( arglist )
1887
==
trailer -> ( arglist )
1887
<=
trailer -> ( arglist )
1887
*
trailer -> ( arglist )
1887
and
trailer -> ( arglist )
1887
/
trailer -> ( arglist )
1887
[
trailer -> ( arglist )
1887
(
trailer -> ( arglist )
1887
<
trailer -> ( arglist )
1887
NEWLINE
trailer -> ( arglist )
1887
|
trailer -> ( arglist )
1887
+
trailer -> ( arglist )
1887
not
trailer -> ( arglist )
1887
or
trailer -> ( arglist )
1887
is
trailer -> ( arglist )
1887
.
trailer -> ( arglist )
1887
!=
trailer -> ( arglist )
1887
@
trailer -> ( arglist )
1887
**
trailer -> ( arglist )
1887
if
trailer -> ( arglist )
1888
NEWLINE
lambdef -> lambda varargslist : test
1889
~
397
1889
factor
398
1889
STRING
399
1889
shift_expr
400
1889
term
401
1889
NUMBER
402
1889
{
403
1889
atom_expr
404
1889
[
405
1889
-
406
1889
None
407
1889
(
408
1889
arith_expr
409
1889
atom
410
1889
+
411
1889
and_expr
412
1889
NAME
413
1889
power
414
1889
True
415
1889
comparison
416
1889
lambda
417
1889
xor_expr
418
1889
False
419
1889
not_test
420
1889
lambdef
421
1889
or_test
423
1889
and_test
424
1889
not
425
1889
expr
426
1889
test
2204
1890
)
test -> or_test if or_test else test
1890
for
test -> or_test if or_test else test
1890
,
test -> or_test if or_test else test
1891
<=
term -> factor / term
1891
!=
term -> factor / term
1891
and
term -> factor / term
1891
or
term -> factor / term
1891
)
term -> factor / term
1891
|
term -> factor / term
1891
^
term -> factor / term
1891
>>
term -> factor / term
1891
==
term -> factor / term
1891
>
term -> factor / term
1891
if
term -> factor / term
1891
&
term -> factor / term
1891
<<
term -> factor / term
1891
+
term -> factor / term
1891
-
term -> factor / term
1891
not
term -> factor / term
1891
in
term -> factor / term
1891
<
term -> factor / term
1891
is
term -> factor / term
1891
>=
term -> factor / term
1891
,
term -> factor / term
1892
is
term -> factor @ term
1892
and
term -> factor @ term
1892
>
term -> factor @ term
1892
not
term -> factor @ term
1892
in
term -> factor @ term
1892
==
term -> factor @ term
1892
<
term -> factor @ term
1892
,
term -> factor @ term
1892
or
term -> factor @ term
1892
!=
term -> factor @ term
1892
<<
term -> factor @ term
1892
<=
term -> factor @ term
1892
if
term -> factor @ term
1892
|
term -> factor @ term
1892
+
term -> factor @ term
1892
-
term -> factor @ term
1892
)
term -> factor @ term
1892
&
term -> factor @ term
1892
>=
term -> factor @ term
1892
>>
term -> factor @ term
1892
^
term -> factor @ term
1893
>
term -> factor % term
1893
!=
term -> factor % term
1893
&
term -> factor % term
1893
>=
term -> factor % term
1893
or
term -> factor % term
1893
)
term -> factor % term
1893
==
term -> factor % term
1893
^
term -> factor % term
1893
in
term -> factor % term
1893
,
term -> factor % term
1893
|
term -> factor % term
1893
and
term -> factor % term
1893
if
term -> factor % term
1893
not
term -> factor % term
1893
is
term -> factor % term
1893
<
term -> factor % term
1893
>>
term -> factor % term
1893
-
term -> factor % term
1893
<=
term -> factor % term
1893
<<
term -> factor % term
1893
+
term -> factor % term
1894
+
term -> factor // term
1894
==
term -> factor // term
1894
<<
term -> factor // term
1894
<
term -> factor // term
1894
if
term -> factor // term
1894
in
term -> factor // term
1894
!=
term -> factor // term
1894
>
term -> factor // term
1894
not
term -> factor // term
1894
>=
term -> factor // term
1894
and
term -> factor // term
1894
is
term -> factor // term
1894
-
term -> factor // term
1894
&
term -> factor // term
1894
|
term -> factor // term
1894
,
term -> factor // term
1894
^
term -> factor // term
1894
<=
term -> factor // term
1894
or
term -> factor // term
1894
>>
term -> factor // term
1894
)
term -> factor // term
1895
&
term -> factor * term
1895
-
term -> factor * term
1895
in
term -> factor * term
1895
or
term -> factor * term
1895
<=
term -> factor * term
1895
,
term -> factor * term
1895
|
term -> factor * term
1895
and
term -> factor * term
1895
not
term -> factor * term
1895
<<
term -> factor * term
1895
==
term -> factor * term
1895
)
term -> factor * term
1895
if
term -> factor * term
1895
>
term -> factor * term
1895
>>
term -> factor * term
1895
<
term -> factor * term
1895
!=
term -> factor * term
1895
>=
term -> factor * term
1895
^
term -> factor * term
1895
+
term -> factor * term
1895
is
term -> factor * term
1896
)
and_expr -> shift_expr & and_expr
1896
|
and_expr -> shift_expr & and_expr
1896
!=
and_expr -> shift_expr & and_expr
1896
,
and_expr -> shift_expr & and_expr
1896
>=
and_expr -> shift_expr & and_expr
1896
not
and_expr -> shift_expr & and_expr
1896
and
and_expr -> shift_expr & and_expr
1896
is
and_expr -> shift_expr & and_expr
1896
in
and_expr -> shift_expr & and_expr
1896
or
and_expr -> shift_expr & and_expr
1896
==
and_expr -> shift_expr & and_expr
1896
^
and_expr -> shift_expr & and_expr
1896
>
and_expr -> shift_expr & and_expr
1896
<
and_expr -> shift_expr & and_expr
1896
if
and_expr -> shift_expr & and_expr
1896
<=
and_expr -> shift_expr & and_expr
1897
>=
shift_expr -> arith_expr >> shift_expr
1897
not
shift_expr -> arith_expr >> shift_expr
1897
>
shift_expr -> arith_expr >> shift_expr
1897
^
shift_expr -> arith_expr >> shift_expr
1897
,
shift_expr -> arith_expr >> shift_expr
1897
is
shift_expr -> arith_expr >> shift_expr
1897
&
shift_expr -> arith_expr >> shift_expr
1897
!=
shift_expr -> arith_expr >> shift_expr
1897
<=
shift_expr -> arith_expr >> shift_expr
1897
and
shift_expr -> arith_expr >> shift_expr
1897
if
shift_expr -> arith_expr >> shift_expr
1897
==
shift_expr -> arith_expr >> shift_expr
1897
or
shift_expr -> arith_expr >> shift_expr
1897
in
shift_expr -> arith_expr >> shift_expr
1897
|
shift_expr -> arith_expr >> shift_expr
1897
<
shift_expr -> arith_expr >> shift_expr
1897
)
shift_expr -> arith_expr >> shift_expr
1898
,
shift_expr -> arith_expr << shift_expr
1898
>=
shift_expr -> arith_expr << shift_expr
1898
in
shift_expr -> arith_expr << shift_expr
1898
>
shift_expr -> arith_expr << shift_expr
1898
|
shift_expr -> arith_expr << shift_expr
1898
!=
shift_expr -> arith_expr << shift_expr
1898
<=
shift_expr -> arith_expr << shift_expr
1898
)
shift_expr -> arith_expr << shift_expr
1898
&
shift_expr -> arith_expr << shift_expr
1898
not
shift_expr -> arith_expr << shift_expr
1898
^
shift_expr -> arith_expr << shift_expr
1898
<
shift_expr -> arith_expr << shift_expr
1898
==
shift_expr -> arith_expr << shift_expr
1898
if
shift_expr -> arith_expr << shift_expr
1898
or
shift_expr -> arith_expr << shift_expr
1898
is
shift_expr -> arith_expr << shift_expr
1898
and
shift_expr -> arith_expr << shift_expr
1899
>>
arith_expr -> term + arith_expr
1899
^
arith_expr -> term + arith_expr
1899
<
arith_expr -> term + arith_expr
1899
|
arith_expr -> term + arith_expr
1899
and
arith_expr -> term + arith_expr
1899
!=
arith_expr -> term + arith_expr
1899
or
arith_expr -> term + arith_expr
1899
not
arith_expr -> term + arith_expr
1899
<=
arith_expr -> term + arith_expr
1899
>
arith_expr -> term + arith_expr
1899
,
arith_expr -> term + arith_expr
1899
if
arith_expr -> term + arith_expr
1899
is
arith_expr -> term + arith_expr
1899
==
arith_expr -> term + arith_expr
1899
&
arith_expr -> term + arith_expr
1899
>=
arith_expr -> term + arith_expr
1899
)
arith_expr -> term + arith_expr
1899
in
arith_expr -> term + arith_expr
1899
<<
arith_expr -> term + arith_expr
1900
==
arith_expr -> term - arith_expr
1900
)
arith_expr -> term - arith_expr
1900
is
arith_expr -> term - arith_expr
1900
<=
arith_expr -> term - arith_expr
1900
not
arith_expr -> term - arith_expr
1900
<<
arith_expr -> term - arith_expr
1900
&
arith_expr -> term - arith_expr
1900
|
arith_expr -> term - arith_expr
1900
and
arith_expr -> term - arith_expr
1900
or
arith_expr -> term - arith_expr
1900
,
arith_expr -> term - arith_expr
1900
>>
arith_expr -> term - arith_expr
1900
if
arith_expr -> term - arith_expr
1900
>=
arith_expr -> term - arith_expr
1900
<
arith_expr -> term - arith_expr
1900
^
arith_expr -> term - arith_expr
1900
>
arith_expr -> term - arith_expr
1900
!=
arith_expr -> term - arith_expr
1900
in
arith_expr -> term - arith_expr
1901
@
power -> atom_expr ** factor
1901
==
power -> atom_expr ** factor
1901
)
power -> atom_expr ** factor
1901
&
power -> atom_expr ** factor
1901
-
power -> atom_expr ** factor
1901
>
power -> atom_expr ** factor
1901
and
power -> atom_expr ** factor
1901
|
power -> atom_expr ** factor
1901
<=
power -> atom_expr ** factor
1901
%
power -> atom_expr ** factor
1901
or
power -> atom_expr ** factor
1901
*
power -> atom_expr ** factor
1901
not
power -> atom_expr ** factor
1901
in
power -> atom_expr ** factor
1901
<<
power -> atom_expr ** factor
1901
//
power -> atom_expr ** factor
1901
/
power -> atom_expr ** factor
1901
>>
power -> atom_expr ** factor
1901
,
power -> atom_expr ** factor
1901
^
power -> atom_expr ** factor
1901
if
power -> atom_expr ** factor
1901
!=
power -> atom_expr ** factor
1901
is
power -> atom_expr ** factor
1901
<
power -> atom_expr ** factor
1901
+
power -> atom_expr ** factor
1901
>=
power -> atom_expr ** factor
1902
/
atom -> [ test_list_comp ]
1902
,
atom -> [ test_list_comp ]
1902
*
atom -> [ test_list_comp ]
1902
or
atom -> [ test_list_comp ]
1902
|
atom -> [ test_list_comp ]
1902
==
atom -> [ test_list_comp ]
1902
is
atom -> [ test_list_comp ]
1902
-
atom -> [ test_list_comp ]
1902
**
atom -> [ test_list_comp ]
1902
&
atom -> [ test_list_comp ]
1902
(
atom -> [ test_list_comp ]
1902
<
atom -> [ test_list_comp ]
1902
@
atom -> [ test_list_comp ]
1902
//
atom -> [ test_list_comp ]
1902
>
atom -> [ test_list_comp ]
1902
)
atom -> [ test_list_comp ]
1902
if
atom -> [ test_list_comp ]
1902
in
atom -> [ test_list_comp ]
1902
^
atom -> [ test_list_comp ]
1902
<<
atom -> [ test_list_comp ]
1902
[
atom -> [ test_list_comp ]
1902
!=
atom -> [ test_list_comp ]
1902
<=
atom -> [ test_list_comp ]
1902
and
atom -> [ test_list_comp ]
1902
%
atom -> [ test_list_comp ]
1902
not
atom -> [ test_list_comp ]
1902
+
atom -> [ test_list_comp ]
1902
>=
atom -> [ test_list_comp ]
1902
>>
atom -> [ test_list_comp ]
1902
.
atom -> [ test_list_comp ]
1903
@
atom -> ( test_list_comp )
1903
>>
atom -> ( test_list_comp )
1903
<<
atom -> ( test_list_comp )
1903
==
atom -> ( test_list_comp )
1903
is
atom -> ( test_list_comp )
1903
or
atom -> ( test_list_comp )
1903
<=
atom -> ( test_list_comp )
1903
[
atom -> ( test_list_comp )
1903
%
atom -> ( test_list_comp )
1903
if
atom -> ( test_list_comp )
1903
^
atom -> ( test_list_comp )
1903
<
atom -> ( test_list_comp )
1903
and
atom -> ( test_list_comp )
1903
.
atom -> ( test_list_comp )
1903
+
atom -> ( test_list_comp )
1903
&
atom -> ( test_list_comp )
1903
!=
atom -> ( test_list_comp )
1903
in
atom -> ( test_list_comp )
1903
**
atom -> ( test_list_comp )
1903
not
atom -> ( test_list_comp )
1903
-
atom -> ( test_list_comp )
1903
(
atom -> ( test_list_comp )
1903
*
atom -> ( test_list_comp )
1903
|
atom -> ( test_list_comp )
1903
//
atom -> ( test_list_comp )
1903
>
atom -> ( test_list_comp )
1903
>=
atom -> ( test_list_comp )
1903
,
atom -> ( test_list_comp )
1903
)
atom -> ( test_list_comp )
1903
/
atom -> ( test_list_comp )
1904
]
2205
1905
)
2206
1906
,
trailer -> ( )
1906
/
trailer -> ( )
1906
[
trailer -> ( )
1906
(
trailer -> ( )
1906
|
trailer -> ( )
1906
<=
trailer -> ( )
1906
in
trailer -> ( )
1906
not
trailer -> ( )
1906
>>
trailer -> ( )
1906
^
trailer -> ( )
1906
.
trailer -> ( )
1906
**
trailer -> ( )
1906
if
trailer -> ( )
1906
)
trailer -> ( )
1906
+
trailer -> ( )
1906
is
trailer -> ( )
1906
<
trailer -> ( )
1906
>
trailer -> ( )
1906
==
trailer -> ( )
1906
//
trailer -> ( )
1906
<<
trailer -> ( )
1906
*
trailer -> ( )
1906
-
trailer -> ( )
1906
>=
trailer -> ( )
1906
%
trailer -> ( )
1906
and
trailer -> ( )
1906
@
trailer -> ( )
1906
&
trailer -> ( )
1906
!=
trailer -> ( )
1906
or
trailer -> ( )
1907
is
trailer_expr -> trailer trailer_expr
1907
!=
trailer_expr -> trailer trailer_expr
1907
<<
trailer_expr -> trailer trailer_expr
1907
)
trailer_expr -> trailer trailer_expr
1907
and
trailer_expr -> trailer trailer_expr
1907
&
trailer_expr -> trailer trailer_expr
1907
//
trailer_expr -> trailer trailer_expr
1907
|
trailer_expr -> trailer trailer_expr
1907
==
trailer_expr -> trailer trailer_expr
1907
<
trailer_expr -> trailer trailer_expr
1907
or
trailer_expr -> trailer trailer_expr
1907
^
trailer_expr -> trailer trailer_expr
1907
<=
trailer_expr -> trailer trailer_expr
1907
@
trailer_expr -> trailer trailer_expr
1907
not
trailer_expr -> trailer trailer_expr
1907
in
trailer_expr -> trailer trailer_expr
1907
*
trailer_expr -> trailer trailer_expr
1907
+
trailer_expr -> trailer trailer_expr
1907
if
trailer_expr -> trailer trailer_expr
1907
**
trailer_expr -> trailer trailer_expr
1907
>>
trailer_expr -> trailer trailer_expr
1907
>=
trailer_expr -> trailer trailer_expr
1907
%
trailer_expr -> trailer trailer_expr
1907
-
trailer_expr -> trailer trailer_expr
1907
>
trailer_expr -> trailer trailer_expr
1907
/
trailer_expr -> trailer trailer_expr
1907
,
trailer_expr -> trailer trailer_expr
1908
<=
trailer -> . NAME
1908
if
trailer -> . NAME
1908
<
trailer -> . NAME
1908
%
trailer -> . NAME
1908
.
trailer -> . NAME
1908
//
trailer -> . NAME
1908
)
trailer -> . NAME
1908
|
trailer -> . NAME
1908
==
trailer -> . NAME
1908
>=
trailer -> . NAME
1908
[
trailer -> . NAME
1908
^
trailer -> . NAME
1908
<<
trailer -> . NAME
1908
in
trailer -> . NAME
1908
&
trailer -> . NAME
1908
or
trailer -> . NAME
1908
*
trailer -> . NAME
1908
(
trailer -> . NAME
1908
and
trailer -> . NAME
1908
-
trailer -> . NAME
1908
+
trailer -> . NAME
1908
!=
trailer -> . NAME
1908
not
trailer -> . NAME
1908
**
trailer -> . NAME
1908
>>
trailer -> . NAME
1908
@
trailer -> . NAME
1908
/
trailer -> . NAME
1908
is
trailer -> . NAME
1908
>
trailer -> . NAME
1908
,
trailer -> . NAME
1909
and
expr -> xor_expr | expr
1909
in
expr -> xor_expr | expr
1909
>=
expr -> xor_expr | expr
1909
is
expr -> xor_expr | expr
1909
==
expr -> xor_expr | expr
1909
or
expr -> xor_expr | expr
1909
<
expr -> xor_expr | expr
1909
if
expr -> xor_expr | expr
1909
)
expr -> xor_expr | expr
1909
,
expr -> xor_expr | expr
1909
not
expr -> xor_expr | expr
1909
!=
expr -> xor_expr | expr
1909
<=
expr -> xor_expr | expr
1909
>
expr -> xor_expr | expr
1910
==
xor_expr -> and_expr ^ xor_expr
1910
!=
xor_expr -> and_expr ^ xor_expr
1910
>
xor_expr -> and_expr ^ xor_expr
1910
not
xor_expr -> and_expr ^ xor_expr
1910
if
xor_expr -> and_expr ^ xor_expr
1910
is
xor_expr -> and_expr ^ xor_expr
1910
)
xor_expr -> and_expr ^ xor_expr
1910
<=
xor_expr -> and_expr ^ xor_expr
1910
,
xor_expr -> and_expr ^ xor_expr
1910
|
xor_expr -> and_expr ^ xor_expr
1910
>=
xor_expr -> and_expr ^ xor_expr
1910
and
xor_expr -> and_expr ^ xor_expr
1910
in
xor_expr -> and_expr ^ xor_expr
1910
<
xor_expr -> and_expr ^ xor_expr
1910
or
xor_expr -> and_expr ^ xor_expr
1911
if
and_test -> not_test and and_test
1911
,
and_test -> not_test and and_test
1911
)
and_test -> not_test and and_test
1911
or
and_test -> not_test and and_test
1912
,
lambdef -> lambda : test
1912
)
lambdef -> lambda : test
1913
~
948
1913
factor
949
1913
STRING
950
1913
shift_expr
951
1913
arith_expr
952
1913
term
953
1913
NUMBER
954
1913
{
955
1913
atom_expr
956
1913
[
957
1913
-
958
1913
None
959
1913
(
960
1913
atom
961
1913
+
962
1913
NAME
964
1913
power
965
1913
True
966
1913
comparison
967
1913
xor_expr
968
1913
False
969
1913
and_expr
970
1913
not_test
971
1913
test
2207
1913
lambdef
972
1913
lambda
973
1913
or_test
974
1913
and_test
975
1913
not
976
1913
expr
977
1914
else
2208
1915
)
or_test -> and_test or or_test
1915
if
or_test -> and_test or or_test
1915
,
or_test -> and_test or or_test
1916
)
comparison -> expr comp_op comparison
1916
or
comparison -> expr comp_op comparison
1916
,
comparison -> expr comp_op comparison
1916
if
comparison -> expr comp_op comparison
1916
and
comparison -> expr comp_op comparison
1917
~
1917
1917
STRING
1919
1917
NUMBER
1922
1917
{
1924
1917
[
1926
1917
atom_expr
1925
1917
None
1928
1917
-
1927
1917
factor
2209
1917
(
1929
1917
atom
1931
1917
+
1932
1917
NAME
1933
1917
power
1934
1917
True
1935
1917
False
1938
1918
/
2210
1918
@
2211
1918
if
term -> factor
1918
%
2212
1918
<<
term -> factor
1918
-
term -> factor
1918
//
2213
1918
*
2214
1918
>=
term -> factor
1918
or
term -> factor
1918
<=
term -> factor
1918
>
term -> factor
1918
)
term -> factor
1918
in
term -> factor
1918
<
term -> factor
1918
>>
term -> factor
1918
for
term -> factor
1918
==
term -> factor
1918
is
term -> factor
1918
+
term -> factor
1918
|
term -> factor
1918
!=
term -> factor
1918
&
term -> factor
1918
not
term -> factor
1918
and
term -> factor
1918
^
term -> factor
1919
==
atom -> STRING
1919
>
atom -> STRING
1919
for
atom -> STRING
1919
<=
atom -> STRING
1919
&
atom -> STRING
1919
.
atom -> STRING
1919
>=
atom -> STRING
1919
@
atom -> STRING
1919
[
atom -> STRING
1919
^
atom -> STRING
1919
%
atom -> STRING
1919
**
atom -> STRING
1919
-
atom -> STRING
1919
//
atom -> STRING
1919
>>
atom -> STRING
1919
<
atom -> STRING
1919
|
atom -> STRING
1919
(
atom -> STRING
1919
is
atom -> STRING
1919
and
atom -> STRING
1919
*
atom -> STRING
1919
or
atom -> STRING
1919
not
atom -> STRING
1919
<<
atom -> STRING
1919
/
atom -> STRING
1919
+
atom -> STRING
1919
!=
atom -> STRING
1919
in
atom -> STRING
1919
)
atom -> STRING
1919
if
atom -> STRING
1920
&
2215
1920
in
and_expr -> shift_expr
1920
for
and_expr -> shift_expr
1920
not
and_expr -> shift_expr
1920
!=
and_expr -> shift_expr
1920
>=
and_expr -> shift_expr
1920
if
and_expr -> shift_expr
1920
)
and_expr -> shift_expr
1920
and
and_expr -> shift_expr
1920
|
and_expr -> shift_expr
1920
is
and_expr -> shift_expr
1920
<=
and_expr -> shift_expr
1920
>
and_expr -> shift_expr
1920
^
and_expr -> shift_expr
1920
or
and_expr -> shift_expr
1920
<
and_expr -> shift_expr
1920
==
and_expr -> shift_expr
1921
+
2216
1921
if
arith_expr -> term
1921
-
2217
1921
<=
arith_expr -> term
1921
for
arith_expr -> term
1921
|
arith_expr -> term
1921
not
arith_expr -> term
1921
^
arith_expr -> term
1921
<<
arith_expr -> term
1921
&
arith_expr -> term
1921
==
arith_expr -> term
1921
is
arith_expr -> term
1921
!=
arith_expr -> term
1921
>
arith_expr -> term
1921
and
arith_expr -> term
1921
<
arith_expr -> term
1921
or
arith_expr -> term
1921
)
arith_expr -> term
1921
>=
arith_expr -> term
1921
>>
arith_expr -> term
1921
in
arith_expr -> term
1922
<<
atom -> NUMBER
1922
)
atom -> NUMBER
1922
-
atom -> NUMBER
1922
^
atom -> NUMBER
1922
or
atom -> NUMBER
1922
==
atom -> NUMBER
1922
!=
atom -> NUMBER
1922
/
atom -> NUMBER
1922
and
atom -> NUMBER
1922
%
atom -> NUMBER
1922
>=
atom -> NUMBER
1922
@
atom -> NUMBER
1922
|
atom -> NUMBER
1922
[
atom -> NUMBER
1922
//
atom -> NUMBER
1922
.
atom -> NUMBER
1922
not
atom -> NUMBER
1922
for
atom -> NUMBER
1922
<
atom -> NUMBER
1922
>>
atom -> NUMBER
1922
if
atom -> NUMBER
1922
<=
atom -> NUMBER
1922
>
atom -> NUMBER
1922
&
atom -> NUMBER
1922
is
atom -> NUMBER
1922
**
atom -> NUMBER
1922
in
atom -> NUMBER
1922
+
atom -> NUMBER
1922
(
atom -> NUMBER
1922
*
atom -> NUMBER
1923
not
xor_expr -> and_expr
1923
^
2218
1923
)
xor_expr -> and_expr
1923
if
xor_expr -> and_expr
1923
|
xor_expr -> and_expr
1923
>
xor_expr -> and_expr
1923
<
xor_expr -> and_expr
1923
for
xor_expr -> and_expr
1923
or
xor_expr -> and_expr
1923
>=
xor_expr -> and_expr
1923
in
xor_expr -> and_expr
1923
and
xor_expr -> and_expr
1923
is
xor_expr -> and_expr
1923
==
xor_expr -> and_expr
1923
!=
xor_expr -> and_expr
1923
<=
xor_expr -> and_expr
1924
}
2219
1925
**
2220
1925
or
power -> atom_expr
1925
for
power -> atom_expr
1925
*
power -> atom_expr
1925
>=
power -> atom_expr
1925
^
power -> atom_expr
1925
in
power -> atom_expr
1925
!=
power -> atom_expr
1925
if
power -> atom_expr
1925
@
power -> atom_expr
1925
-
power -> atom_expr
1925
and
power -> atom_expr
1925
not
power -> atom_expr
1925
==
power -> atom_expr
1925
<
power -> atom_expr
1925
&
power -> atom_expr
1925
|
power -> atom_expr
1925
//
power -> atom_expr
1925
>
power -> atom_expr
1925
%
power -> atom_expr
1925
/
power -> atom_expr
1925
is
power -> atom_expr
1925
<<
power -> atom_expr
1925
>>
power -> atom_expr
1925
+
power -> atom_expr
1925
)
power -> atom_expr
1925
<=
power -> atom_expr
1926
~
186
1926
factor
187
1926
STRING
188
1926
shift_expr
189
1926
test_list_comp
2221
1926
arith_expr
191
1926
term
192
1926
atom_expr
193
1926
]
2222
1926
test
195
1926
NUMBER
196
1926
and_expr
197
1926
{
198
1926
[
199
1926
-
200
1926
None
201
1926
(
202
1926
atom
203
1926
+
204
1926
NAME
205
1926
power
206
1926
True
207
1926
comparison
208
1926
xor_expr
209
1926
lambdef
210
1926
False
211
1926
not_test
212
1926
or_test
213
1926
and_test
214
1926
lambda
215
1926
not
216
1926
expr
217
1926
test_list
218
1927
~
1917
1927
STRING
1919
1927
NUMBER
1922
1927
factor
2223
1927
{
1924
1927
[
1926
1927
atom_expr
1925
1927
None
1928
1927
-
1927
1927
(
1929
1927
atom
1931
1927
+
1932
1927
NAME
1933
1927
power
1934
1927
True
1935
1927
False
1938
1928
not
atom -> None
1928
or
atom -> None
1928
==
atom -> None
1928
*
atom -> None
1928
for
atom -> None
1928
-
atom -> None
1928
^
atom -> None
1928
>>
atom -> None
1928
if
atom -> None
1928
<<
atom -> None
1928
and
atom -> None
1928
|
atom -> None
1928
&
atom -> None
1928
!=
atom -> None
1928
@
atom -> None
1928
.
atom -> None
1928
/
atom -> None
1928
%
atom -> None
1928
>
atom -> None
1928
is
atom -> None
1928
<
atom -> None
1928
)
atom -> None
1928
(
atom -> None
1928
**
atom -> None
1928
//
atom -> None
1928
in
atom -> None
1928
<=
atom -> None
1928
>=
atom -> None
1928
+
atom -> None
1928
[
atom -> None
1929
~
92
1929
factor
93
1929
STRING
94
1929
shift_expr
95
1929
arith_expr
96
1929
term
97
1929
NUMBER
98
1929
and_expr
99
1929
{
100
1929
atom_expr
101
1929
[
102
1929
-
103
1929
None
105
1929
(
106
1929
atom
107
1929
+
109
1929
)
2224
1929
NAME
110
1929
test_list_comp
2225
1929
power
111
1929
test_list
112
1929
True
113
1929
comparison
114
1929
xor_expr
115
1929
lambdef
116
1929
False
117
1929
not_test
118
1929
or_test
119
1929
test
120
1929
lambda
121
1929
and_test
122
1929
not
123
1929
expr
124
1930
>>
2226
1930
^
shift_expr -> arith_expr
1930
<<
2227
1930
or
shift_expr -> arith_expr
1930
|
shift_expr -> arith_expr
1930
<=
shift_expr -> arith_expr
1930
for
shift_expr -> arith_expr
1930
is
shift_expr -> arith_expr
1930
<
shift_expr -> arith_expr
1930
if
shift_expr -> arith_expr
1930
not
shift_expr -> arith_expr
1930
in
shift_expr -> arith_expr
1930
and
shift_expr -> arith_expr
1930
>=
shift_expr -> arith_expr
1930
==
shift_expr -> arith_expr
1930
)
shift_expr -> arith_expr
1930
!=
shift_expr -> arith_expr
1930
>
shift_expr -> arith_expr
1930
&
shift_expr -> arith_expr
1931
[
2228
1931
(
2229
1931
.
2230
1931
//
trailer_expr -> 
1931
trailer
2231
1931
<<
trailer_expr -> 
1931
trailer_expr
2232
1931
*
trailer_expr -> 
1931
in
trailer_expr -> 
1931
&
trailer_expr -> 
1931
and
trailer_expr -> 
1931
<=
trailer_expr -> 
1931
|
trailer_expr -> 
1931
or
trailer_expr -> 
1931
>=
trailer_expr -> 
1931
for
trailer_expr -> 
1931
+
trailer_expr -> 
1931
**
trailer_expr -> 
1931
>>
trailer_expr -> 
1931
!=
trailer_expr -> 
1931
-
trailer_expr -> 
1931
/
trailer_expr -> 
1931
%
trailer_expr -> 
1931
is
trailer_expr -> 
1931
<
trailer_expr -> 
1931
if
trailer_expr -> 
1931
>
trailer_expr -> 
1931
^
trailer_expr -> 
1931
==
trailer_expr -> 
1931
@
trailer_expr -> 
1931
)
trailer_expr -> 
1931
not
trailer_expr -> 
1932
~
1917
1932
STRING
1919
1932
NUMBER
1922
1932
{
1924
1932
factor
2233
1932
atom_expr
1925
1932
[
1926
1932
None
1928
1932
-
1927
1932
(
1929
1932
atom
1931
1932
+
1932
1932
NAME
1933
1932
power
1934
1932
True
1935
1932
False
1938
1933
<=
atom -> NAME
1933
@
atom -> NAME
1933
>>
atom -> NAME
1933
==
atom -> NAME
1933
>
atom -> NAME
1933
*
atom -> NAME
1933
-
atom -> NAME
1933
&
atom -> NAME
1933
is
atom -> NAME
1933
.
atom -> NAME
1933
or
atom -> NAME
1933
in
atom -> NAME
1933
for
atom -> NAME
1933
)
atom -> NAME
1933
<<
atom -> NAME
1933
+
atom -> NAME
1933
if
atom -> NAME
1933
|
atom -> NAME
1933
and
atom -> NAME
1933
^
atom -> NAME
1933
[
atom -> NAME
1933
/
atom -> NAME
1933
not
atom -> NAME
1933
!=
atom -> NAME
1933
%
atom -> NAME
1933
<
atom -> NAME
1933
>=
atom -> NAME
1933
**
atom -> NAME
1933
(
atom -> NAME
1933
//
atom -> NAME
1934
if
factor -> power
1934
is
factor -> power
1934
%
factor -> power
1934
==
factor -> power
1934
>=
factor -> power
1934
or
factor -> power
1934
and
factor -> power
1934
/
factor -> power
1934
<
factor -> power
1934
+
factor -> power
1934
//
factor -> power
1934
for
factor -> power
1934
@
factor -> power
1934
in
factor -> power
1934
)
factor -> power
1934
<=
factor -> power
1934
&
factor -> power
1934
!=
factor -> power
1934
<<
factor -> power
1934
|
factor -> power
1934
>
factor -> power
1934
*
factor -> power
1934
^
factor -> power
1934
-
factor -> power
1934
not
factor -> power
1934
>>
factor -> power
1935
for
atom -> True
1935
>
atom -> True
1935
|
atom -> True
1935
-
atom -> True
1935
==
atom -> True
1935
<<
atom -> True
1935
if
atom -> True
1935
%
atom -> True
1935
/
atom -> True
1935
[
atom -> True
1935
*
atom -> True
1935
<=
atom -> True
1935
<
atom -> True
1935
&
atom -> True
1935
+
atom -> True
1935
**
atom -> True
1935
!=
atom -> True
1935
>>
atom -> True
1935
//
atom -> True
1935
and
atom -> True
1935
^
atom -> True
1935
is
atom -> True
1935
or
atom -> True
1935
)
atom -> True
1935
.
atom -> True
1935
(
atom -> True
1935
>=
atom -> True
1935
@
atom -> True
1935
not
atom -> True
1935
in
atom -> True
1936
for
not_test -> comparison
1936
or
not_test -> comparison
1936
if
not_test -> comparison
1936
and
not_test -> comparison
1936
)
not_test -> comparison
1937
not
expr -> xor_expr
1937
or
expr -> xor_expr
1937
|
2234
1937
==
expr -> xor_expr
1937
in
expr -> xor_expr
1937
if
expr -> xor_expr
1937
<=
expr -> xor_expr
1937
is
expr -> xor_expr
1937
<
expr -> xor_expr
1937
>=
expr -> xor_expr
1937
for
expr -> xor_expr
1937
>
expr -> xor_expr
1937
)
expr -> xor_expr
1937
and
expr -> xor_expr
1937
!=
expr -> xor_expr
1938
<=
atom -> False
1938
*
atom -> False
1938
not
atom -> False
1938
!=
atom -> False
1938
for
atom -> False
1938
@
atom -> False
1938
and
atom -> False
1938
if
atom -> False
1938
<<
atom -> False
1938
>
atom -> False
1938
+
atom -> False
1938
/
atom -> False
1938
==
atom -> False
1938
&
atom -> False
1938
^
atom -> False
1938
)
atom -> False
1938
[
atom -> False
1938
in
atom -> False
1938
is
atom -> False
1938
%
atom -> False
1938
>=
atom -> False
1938
//
atom -> False
1938
(
atom -> False
1938
|
atom -> False
1938
<
atom -> False
1938
.
atom -> False
1938
or
atom -> False
1938
**
atom -> False
1938
>>
atom -> False
1938
-
atom -> False
1939
or
and_test -> not_test
1939
and
2235
1939
if
and_test -> not_test
1939
)
and_test -> not_test
1939
for
and_test -> not_test
1940
)
or_test -> and_test
1940
if
or_test -> and_test
1940
or
2236
1940
for
or_test -> and_test
1941
~
1917
1941
factor
1918
1941
STRING
1919
1941
shift_expr
1920
1941
term
1921
1941
NUMBER
1922
1941
and_expr
1923
1941
{
1924
1941
atom_expr
1925
1941
[
1926
1941
-
1927
1941
None
1928
1941
(
1929
1941
arith_expr
1930
1941
atom
1931
1941
+
1932
1941
NAME
1933
1941
power
1934
1941
True
1935
1941
comparison
1936
1941
xor_expr
1937
1941
False
1938
1941
not_test
2237
1941
not
1941
1941
expr
1942
1942
!=
125
1942
is
126
1942
>=
127
1942
in
128
1942
<
129
1942
==
131
1942
comp_op
2238
1942
<=
132
1942
not
133
1942
>
134
1942
)
comparison -> expr
1942
for
comparison -> expr
1942
or
comparison -> expr
1942
if
comparison -> expr
1942
and
comparison -> expr
1943
comp_if
2239
1943
comp_for
2240
1943
comp_iter
2241
1943
)
comp_iter -> 
1943
if
2242
1943
for
463
1944
DEDENT
2243
1945
~
397
1945
factor
398
1945
STRING
399
1945
shift_expr
400
1945
term
401
1945
NUMBER
402
1945
{
403
1945
atom_expr
404
1945
[
405
1945
-
406
1945
None
407
1945
(
408
1945
test
2244
1945
arith_expr
409
1945
atom
410
1945
+
411
1945
and_expr
412
1945
NAME
413
1945
power
414
1945
True
415
1945
comparison
416
1945
lambda
417
1945
xor_expr
418
1945
False
419
1945
not_test
420
1945
lambdef
421
1945
or_test
423
1945
and_test
424
1945
not
425
1945
expr
426
1946
expr
5
1946
factor
1
1946
(
3
1946
STRING
4
1946
term
6
1946
not
8
1946
or_test
10
1946
~
12
1946
suite
2245
1946
atom_expr
13
1946
comparison
14
1946
shift_expr
29
1946
None
15
1946
power
43
1946
+
19
1946
small_stmt
42
1946
xor_expr
17
1946
arith_expr
18
1946
[
32
1946
simple_stmt
1050
1946
atom
22
1946
NUMBER
26
1946
and_test
39
1946
NAME
27
1946
-
36
1946
False
28
1946
lambda
46
1946
test
47
1946
NEWLINE
1051
1946
not_test
34
1946
{
35
1946
and_expr
33
1946
lambdef
45
1946
True
48
1946
endsim
75
1946
flow_stmt
53
1946
pass
76
1946
break
54
1946
raise
55
1946
yield
56
1946
assert
57
1946
global_stmt
77
1946
continue_stmt
58
1946
del_stmt
78
1946
stat_stmt
59
1946
global
79
1946
return_stmt
60
1946
test_list
61
1946
continue
62
1946
yield_stmt
63
1946
return
68
1946
sim_stmt
65
1946
resetstats
66
1946
break_stmt
82
1946
del
67
1946
raise_stmt
69
1946
nonlocal
70
1946
pass_stmt
71
1946
begsim
83
1946
expr_stmt
72
1946
nonlocal_stmt
84
1946
assert_stmt
74
1947
DEDENT
2246
1948
:
test -> or_test if or_test else test
1949
//
trailer -> [ subscriptlist ]
1949
/
trailer -> [ subscriptlist ]
1949
^
trailer -> [ subscriptlist ]
1949
.
trailer -> [ subscriptlist ]
1949
else
trailer -> [ subscriptlist ]
1949
<
trailer -> [ subscriptlist ]
1949
<<
trailer -> [ subscriptlist ]
1949
in
trailer -> [ subscriptlist ]
1949
@
trailer -> [ subscriptlist ]
1949
>
trailer -> [ subscriptlist ]
1949
*
trailer -> [ subscriptlist ]
1949
and
trailer -> [ subscriptlist ]
1949
+
trailer -> [ subscriptlist ]
1949
(
trailer -> [ subscriptlist ]
1949
is
trailer -> [ subscriptlist ]
1949
or
trailer -> [ subscriptlist ]
1949
<=
trailer -> [ subscriptlist ]
1949
|
trailer -> [ subscriptlist ]
1949
==
trailer -> [ subscriptlist ]
1949
not
trailer -> [ subscriptlist ]
1949
-
trailer -> [ subscriptlist ]
1949
!=
trailer -> [ subscriptlist ]
1949
&
trailer -> [ subscriptlist ]
1949
[
trailer -> [ subscriptlist ]
1949
>>
trailer -> [ subscriptlist ]
1949
%
trailer -> [ subscriptlist ]
1949
>=
trailer -> [ subscriptlist ]
1949
**
trailer -> [ subscriptlist ]
1950
>=
trailer -> ( arglist )
1950
//
trailer -> ( arglist )
1950
%
trailer -> ( arglist )
1950
in
trailer -> ( arglist )
1950
&
trailer -> ( arglist )
1950
>>
trailer -> ( arglist )
1950
-
trailer -> ( arglist )
1950
^
trailer -> ( arglist )
1950
>
trailer -> ( arglist )
1950
else
trailer -> ( arglist )
1950
<<
trailer -> ( arglist )
1950
==
trailer -> ( arglist )
1950
<=
trailer -> ( arglist )
1950
*
trailer -> ( arglist )
1950
and
trailer -> ( arglist )
1950
/
trailer -> ( arglist )
1950
[
trailer -> ( arglist )
1950
(
trailer -> ( arglist )
1950
<
trailer -> ( arglist )
1950
|
trailer -> ( arglist )
1950
+
trailer -> ( arglist )
1950
not
trailer -> ( arglist )
1950
or
trailer -> ( arglist )
1950
is
trailer -> ( arglist )
1950
.
trailer -> ( arglist )
1950
!=
trailer -> ( arglist )
1950
@
trailer -> ( arglist )
1950
**
trailer -> ( arglist )
1951
:
2247
1952
:
2248
1953
DEDENT
2249
1954
DEDENT
2250
1955
expr
5
1955
factor
1
1955
(
3
1955
STRING
4
1955
term
6
1955
suite
2251
1955
not
8
1955
or_test
10
1955
~
12
1955
atom_expr
13
1955
comparison
14
1955
shift_expr
29
1955
None
15
1955
power
43
1955
+
19
1955
small_stmt
42
1955
xor_expr
17
1955
arith_expr
18
1955
[
32
1955
simple_stmt
1050
1955
atom
22
1955
NUMBER
26
1955
and_test
39
1955
NAME
27
1955
-
36
1955
False
28
1955
lambda
46
1955
test
47
1955
NEWLINE
1051
1955
not_test
34
1955
{
35
1955
and_expr
33
1955
lambdef
45
1955
True
48
1955
endsim
75
1955
flow_stmt
53
1955
pass
76
1955
break
54
1955
raise
55
1955
yield
56
1955
assert
57
1955
global_stmt
77
1955
continue_stmt
58
1955
del_stmt
78
1955
stat_stmt
59
1955
global
79
1955
return_stmt
60
1955
test_list
61
1955
continue
62
1955
yield_stmt
63
1955
return
68
1955
sim_stmt
65
1955
resetstats
66
1955
break_stmt
82
1955
del
67
1955
raise_stmt
69
1955
nonlocal
70
1955
pass_stmt
71
1955
begsim
83
1955
expr_stmt
72
1955
nonlocal_stmt
84
1955
assert_stmt
74
1956
conf
classdef -> class NAME ( ) : suite
1956
False
classdef -> class NAME ( ) : suite
1956
-
classdef -> class NAME ( ) : suite
1956
not
classdef -> class NAME ( ) : suite
1956
yield
classdef -> class NAME ( ) : suite
1956
NUMBER
classdef -> class NAME ( ) : suite
1956
if
classdef -> class NAME ( ) : suite
1956
endsim
classdef -> class NAME ( ) : suite
1956
+
classdef -> class NAME ( ) : suite
1956
NEWLINE
classdef -> class NAME ( ) : suite
1956
(
classdef -> class NAME ( ) : suite
1956
nonlocal
classdef -> class NAME ( ) : suite
1956
assert
classdef -> class NAME ( ) : suite
1956
del
classdef -> class NAME ( ) : suite
1956
STRING
classdef -> class NAME ( ) : suite
1956
begsim
classdef -> class NAME ( ) : suite
1956
with
classdef -> class NAME ( ) : suite
1956
return
classdef -> class NAME ( ) : suite
1956
None
classdef -> class NAME ( ) : suite
1956
{
classdef -> class NAME ( ) : suite
1956
continue
classdef -> class NAME ( ) : suite
1956
def
classdef -> class NAME ( ) : suite
1956
for
classdef -> class NAME ( ) : suite
1956
~
classdef -> class NAME ( ) : suite
1956
lambda
classdef -> class NAME ( ) : suite
1956
$
classdef -> class NAME ( ) : suite
1956
[
classdef -> class NAME ( ) : suite
1956
global
classdef -> class NAME ( ) : suite
1956
while
classdef -> class NAME ( ) : suite
1956
try
classdef -> class NAME ( ) : suite
1956
break
classdef -> class NAME ( ) : suite
1956
class
classdef -> class NAME ( ) : suite
1956
resetstats
classdef -> class NAME ( ) : suite
1956
NAME
classdef -> class NAME ( ) : suite
1956
pass
classdef -> class NAME ( ) : suite
1956
raise
classdef -> class NAME ( ) : suite
1956
True
classdef -> class NAME ( ) : suite
1956
@
classdef -> class NAME ( ) : suite
1957
,
trailer -> [ subscriptlist ]
1957
//
trailer -> [ subscriptlist ]
1957
/
trailer -> [ subscriptlist ]
1957
^
trailer -> [ subscriptlist ]
1957
.
trailer -> [ subscriptlist ]
1957
<
trailer -> [ subscriptlist ]
1957
<<
trailer -> [ subscriptlist ]
1957
in
trailer -> [ subscriptlist ]
1957
@
trailer -> [ subscriptlist ]
1957
>
trailer -> [ subscriptlist ]
1957
:
trailer -> [ subscriptlist ]
1957
*
trailer -> [ subscriptlist ]
1957
and
trailer -> [ subscriptlist ]
1957
+
trailer -> [ subscriptlist ]
1957
(
trailer -> [ subscriptlist ]
1957
is
trailer -> [ subscriptlist ]
1957
or
trailer -> [ subscriptlist ]
1957
<=
trailer -> [ subscriptlist ]
1957
if
trailer -> [ subscriptlist ]
1957
|
trailer -> [ subscriptlist ]
1957
==
trailer -> [ subscriptlist ]
1957
not
trailer -> [ subscriptlist ]
1957
-
trailer -> [ subscriptlist ]
1957
!=
trailer -> [ subscriptlist ]
1957
&
trailer -> [ subscriptlist ]
1957
[
trailer -> [ subscriptlist ]
1957
>>
trailer -> [ subscriptlist ]
1957
%
trailer -> [ subscriptlist ]
1957
>=
trailer -> [ subscriptlist ]
1957
**
trailer -> [ subscriptlist ]
1957
]
trailer -> [ subscriptlist ]
1958
>=
trailer -> ( arglist )
1958
//
trailer -> ( arglist )
1958
%
trailer -> ( arglist )
1958
in
trailer -> ( arglist )
1958
&
trailer -> ( arglist )
1958
,
trailer -> ( arglist )
1958
>>
trailer -> ( arglist )
1958
-
trailer -> ( arglist )
1958
:
trailer -> ( arglist )
1958
^
trailer -> ( arglist )
1958
>
trailer -> ( arglist )
1958
<<
trailer -> ( arglist )
1958
==
trailer -> ( arglist )
1958
<=
trailer -> ( arglist )
1958
]
trailer -> ( arglist )
1958
*
trailer -> ( arglist )
1958
and
trailer -> ( arglist )
1958
/
trailer -> ( arglist )
1958
[
trailer -> ( arglist )
1958
(
trailer -> ( arglist )
1958
<
trailer -> ( arglist )
1958
|
trailer -> ( arglist )
1958
+
trailer -> ( arglist )
1958
not
trailer -> ( arglist )
1958
or
trailer -> ( arglist )
1958
is
trailer -> ( arglist )
1958
.
trailer -> ( arglist )
1958
!=
trailer -> ( arglist )
1958
@
trailer -> ( arglist )
1958
**
trailer -> ( arglist )
1958
if
trailer -> ( arglist )
1959
,
lambdef -> lambda varargslist : test
1959
]
lambdef -> lambda varargslist : test
1959
:
lambdef -> lambda varargslist : test
1960
~
544
1960
factor
545
1960
STRING
546
1960
shift_expr
547
1960
expr
548
1960
arith_expr
549
1960
term
550
1960
atom_expr
551
1960
NUMBER
552
1960
{
554
1960
[
555
1960
-
556
1960
None
557
1960
+
558
1960
(
559
1960
atom
561
1960
and_expr
562
1960
NAME
563
1960
power
564
1960
True
565
1960
test
2252
1960
comparison
566
1960
xor_expr
567
1960
lambda
568
1960
False
569
1960
not_test
570
1960
and_test
571
1960
or_test
573
1960
not
574
1960
lambdef
576
1961
~
1154
1961
factor
1155
1961
STRING
1156
1961
shift_expr
1157
1961
arith_expr
1158
1961
term
1159
1961
atom_expr
1160
1961
NUMBER
1161
1961
{
1163
1961
[
1164
1961
-
1165
1961
None
1166
1961
(
1167
1961
test
2253
1961
atom
1169
1961
+
1170
1961
and_expr
1171
1961
NAME
1172
1961
power
1173
1961
True
1174
1961
]
maybe_test -> 
1961
comparison
1175
1961
xor_expr
1176
1961
False
1177
1961
maybe_test
2254
1961
not_test
1178
1961
,
maybe_test -> 
1961
and_test
1179
1961
or_test
1180
1961
not
1181
1961
expr
1182
1961
lambda
1183
1961
lambdef
1184
1962
,
subscript -> maybe_test : maybe_test sliceop
1962
]
subscript -> maybe_test : maybe_test sliceop
1963
,
trailer -> [ subscriptlist ]
1963
//
trailer -> [ subscriptlist ]
1963
/
trailer -> [ subscriptlist ]
1963
^
trailer -> [ subscriptlist ]
1963
)
trailer -> [ subscriptlist ]
1963
.
trailer -> [ subscriptlist ]
1963
<
trailer -> [ subscriptlist ]
1963
<<
trailer -> [ subscriptlist ]
1963
in
trailer -> [ subscriptlist ]
1963
@
trailer -> [ subscriptlist ]
1963
>
trailer -> [ subscriptlist ]
1963
for
trailer -> [ subscriptlist ]
1963
*
trailer -> [ subscriptlist ]
1963
and
trailer -> [ subscriptlist ]
1963
+
trailer -> [ subscriptlist ]
1963
(
trailer -> [ subscriptlist ]
1963
=
trailer -> [ subscriptlist ]
1963
is
trailer -> [ subscriptlist ]
1963
or
trailer -> [ subscriptlist ]
1963
<=
trailer -> [ subscriptlist ]
1963
if
trailer -> [ subscriptlist ]
1963
|
trailer -> [ subscriptlist ]
1963
==
trailer -> [ subscriptlist ]
1963
not
trailer -> [ subscriptlist ]
1963
-
trailer -> [ subscriptlist ]
1963
!=
trailer -> [ subscriptlist ]
1963
&
trailer -> [ subscriptlist ]
1963
[
trailer -> [ subscriptlist ]
1963
>>
trailer -> [ subscriptlist ]
1963
%
trailer -> [ subscriptlist ]
1963
>=
trailer -> [ subscriptlist ]
1963
**
trailer -> [ subscriptlist ]
1964
>=
trailer -> ( arglist )
1964
//
trailer -> ( arglist )
1964
%
trailer -> ( arglist )
1964
in
trailer -> ( arglist )
1964
&
trailer -> ( arglist )
1964
for
trailer -> ( arglist )
1964
,
trailer -> ( arglist )
1964
>>
trailer -> ( arglist )
1964
-
trailer -> ( arglist )
1964
^
trailer -> ( arglist )
1964
>
trailer -> ( arglist )
1964
<<
trailer -> ( arglist )
1964
==
trailer -> ( arglist )
1964
<=
trailer -> ( arglist )
1964
*
trailer -> ( arglist )
1964
and
trailer -> ( arglist )
1964
=
trailer -> ( arglist )
1964
/
trailer -> ( arglist )
1964
[
trailer -> ( arglist )
1964
(
trailer -> ( arglist )
1964
<
trailer -> ( arglist )
1964
|
trailer -> ( arglist )
1964
+
trailer -> ( arglist )
1964
not
trailer -> ( arglist )
1964
or
trailer -> ( arglist )
1964
)
trailer -> ( arglist )
1964
is
trailer -> ( arglist )
1964
.
trailer -> ( arglist )
1964
!=
trailer -> ( arglist )
1964
@
trailer -> ( arglist )
1964
**
trailer -> ( arglist )
1964
if
trailer -> ( arglist )
1965
~
92
1965
factor
93
1965
STRING
94
1965
shift_expr
95
1965
arith_expr
96
1965
term
97
1965
NUMBER
98
1965
and_expr
99
1965
{
100
1965
atom_expr
101
1965
[
102
1965
-
103
1965
None
105
1965
(
106
1965
atom
107
1965
+
109
1965
NAME
110
1965
power
111
1965
True
113
1965
comparison
114
1965
xor_expr
115
1965
False
117
1965
not_test
118
1965
and_test
122
1965
not
123
1965
expr
124
1965
or_test
2255
1966
,
lambdef -> lambda varargslist : test
1966
)
lambdef -> lambda varargslist : test
1966
=
lambdef -> lambda varargslist : test
1966
for
lambdef -> lambda varargslist : test
1967
~
579
1967
factor
580
1967
STRING
581
1967
shift_expr
582
1967
arith_expr
583
1967
term
584
1967
NUMBER
585
1967
and_expr
586
1967
{
587
1967
atom_expr
589
1967
[
590
1967
-
591
1967
None
592
1967
(
593
1967
atom
594
1967
+
595
1967
not_test
596
1967
NAME
598
1967
power
599
1967
True
600
1967
test
2256
1967
comparison
601
1967
xor_expr
602
1967
lambdef
603
1967
False
604
1967
and_test
606
1967
lambda
607
1967
or_test
608
1967
expr
609
1967
not
610
1968
def
funcdef -> def NAME ( ) : suite
1968
conf
funcdef -> def NAME ( ) : suite
1968
(
funcdef -> def NAME ( ) : suite
1968
endsim
funcdef -> def NAME ( ) : suite
1968
resetstats
funcdef -> def NAME ( ) : suite
1968
try
funcdef -> def NAME ( ) : suite
1968
{
funcdef -> def NAME ( ) : suite
1968
raise
funcdef -> def NAME ( ) : suite
1968
class
funcdef -> def NAME ( ) : suite
1968
not
funcdef -> def NAME ( ) : suite
1968
with
funcdef -> def NAME ( ) : suite
1968
[
funcdef -> def NAME ( ) : suite
1968
continue
funcdef -> def NAME ( ) : suite
1968
global
funcdef -> def NAME ( ) : suite
1968
-
funcdef -> def NAME ( ) : suite
1968
yield
funcdef -> def NAME ( ) : suite
1968
for
funcdef -> def NAME ( ) : suite
1968
@
funcdef -> def NAME ( ) : suite
1968
if
funcdef -> def NAME ( ) : suite
1968
break
funcdef -> def NAME ( ) : suite
1968
NAME
funcdef -> def NAME ( ) : suite
1968
assert
funcdef -> def NAME ( ) : suite
1968
begsim
funcdef -> def NAME ( ) : suite
1968
return
funcdef -> def NAME ( ) : suite
1968
None
funcdef -> def NAME ( ) : suite
1968
True
funcdef -> def NAME ( ) : suite
1968
STRING
funcdef -> def NAME ( ) : suite
1968
while
funcdef -> def NAME ( ) : suite
1968
pass
funcdef -> def NAME ( ) : suite
1968
del
funcdef -> def NAME ( ) : suite
1968
False
funcdef -> def NAME ( ) : suite
1968
NEWLINE
funcdef -> def NAME ( ) : suite
1968
$
funcdef -> def NAME ( ) : suite
1968
+
funcdef -> def NAME ( ) : suite
1968
NUMBER
funcdef -> def NAME ( ) : suite
1968
~
funcdef -> def NAME ( ) : suite
1968
lambda
funcdef -> def NAME ( ) : suite
1968
nonlocal
funcdef -> def NAME ( ) : suite
1969
expr
5
1969
factor
1
1969
(
3
1969
STRING
4
1969
term
6
1969
not
8
1969
or_test
10
1969
~
12
1969
atom_expr
13
1969
comparison
14
1969
shift_expr
29
1969
None
15
1969
power
43
1969
+
19
1969
small_stmt
42
1969
xor_expr
17
1969
arith_expr
18
1969
[
32
1969
simple_stmt
1050
1969
atom
22
1969
NUMBER
26
1969
and_test
39
1969
NAME
27
1969
-
36
1969
False
28
1969
lambda
46
1969
test
47
1969
NEWLINE
1051
1969
not_test
34
1969
{
35
1969
suite
2257
1969
and_expr
33
1969
lambdef
45
1969
True
48
1969
endsim
75
1969
flow_stmt
53
1969
pass
76
1969
break
54
1969
raise
55
1969
yield
56
1969
assert
57
1969
global_stmt
77
1969
continue_stmt
58
1969
del_stmt
78
1969
stat_stmt
59
1969
global
79
1969
return_stmt
60
1969
test_list
61
1969
continue
62
1969
yield_stmt
63
1969
return
68
1969
sim_stmt
65
1969
resetstats
66
1969
break_stmt
82
1969
del
67
1969
raise_stmt
69
1969
nonlocal
70
1969
pass_stmt
71
1969
begsim
83
1969
expr_stmt
72
1969
nonlocal_stmt
84
1969
assert_stmt
74
1970
~
948
1970
factor
949
1970
STRING
950
1970
shift_expr
951
1970
arith_expr
952
1970
term
953
1970
NUMBER
954
1970
{
955
1970
atom_expr
956
1970
[
957
1970
-
958
1970
None
959
1970
(
960
1970
atom
961
1970
+
962
1970
NAME
964
1970
power
965
1970
True
966
1970
comparison
967
1970
xor_expr
968
1970
False
969
1970
and_expr
970
1970
not_test
971
1970
lambdef
972
1970
lambda
973
1970
or_test
974
1970
and_test
975
1970
not
976
1970
expr
977
1970
test
2258
1971
~
1971
1971
STRING
1973
1971
NUMBER
1977
1971
{
1978
1971
[
1980
1971
atom_expr
1979
1971
None
1982
1971
-
1981
1971
factor
2259
1971
(
1983
1971
atom
1984
1971
+
1986
1971
NAME
1988
1971
power
1989
1971
True
1990
1971
False
1993
1972
/
2260
1972
@
2261
1972
if
term -> factor
1972
%
2262
1972
<<
term -> factor
1972
-
term -> factor
1972
//
2263
1972
*
2264
1972
>=
term -> factor
1972
or
term -> factor
1972
<=
term -> factor
1972
>
term -> factor
1972
)
term -> factor
1972
in
term -> factor
1972
<
term -> factor
1972
>>
term -> factor
1972
,
term -> factor
1972
==
term -> factor
1972
=
term -> factor
1972
is
term -> factor
1972
+
term -> factor
1972
|
term -> factor
1972
!=
term -> factor
1972
&
term -> factor
1972
not
term -> factor
1972
and
term -> factor
1972
^
term -> factor
1973
==
atom -> STRING
1973
>
atom -> STRING
1973
<=
atom -> STRING
1973
,
atom -> STRING
1973
&
atom -> STRING
1973
.
atom -> STRING
1973
>=
atom -> STRING
1973
@
atom -> STRING
1973
[
atom -> STRING
1973
^
atom -> STRING
1973
%
atom -> STRING
1973
=
atom -> STRING
1973
**
atom -> STRING
1973
-
atom -> STRING
1973
//
atom -> STRING
1973
>>
atom -> STRING
1973
<
atom -> STRING
1973
|
atom -> STRING
1973
(
atom -> STRING
1973
is
atom -> STRING
1973
and
atom -> STRING
1973
*
atom -> STRING
1973
or
atom -> STRING
1973
not
atom -> STRING
1973
<<
atom -> STRING
1973
/
atom -> STRING
1973
+
atom -> STRING
1973
!=
atom -> STRING
1973
in
atom -> STRING
1973
)
atom -> STRING
1973
if
atom -> STRING
1974
&
2265
1974
in
and_expr -> shift_expr
1974
,
and_expr -> shift_expr
1974
not
and_expr -> shift_expr
1974
!=
and_expr -> shift_expr
1974
>=
and_expr -> shift_expr
1974
if
and_expr -> shift_expr
1974
)
and_expr -> shift_expr
1974
and
and_expr -> shift_expr
1974
|
and_expr -> shift_expr
1974
is
and_expr -> shift_expr
1974
<=
and_expr -> shift_expr
1974
>
and_expr -> shift_expr
1974
=
and_expr -> shift_expr
1974
^
and_expr -> shift_expr
1974
or
and_expr -> shift_expr
1974
<
and_expr -> shift_expr
1974
==
and_expr -> shift_expr
1975
>>
2266
1975
=
shift_expr -> arith_expr
1975
^
shift_expr -> arith_expr
1975
<<
2267
1975
or
shift_expr -> arith_expr
1975
|
shift_expr -> arith_expr
1975
<=
shift_expr -> arith_expr
1975
is
shift_expr -> arith_expr
1975
<
shift_expr -> arith_expr
1975
if
shift_expr -> arith_expr
1975
not
shift_expr -> arith_expr
1975
in
shift_expr -> arith_expr
1975
and
shift_expr -> arith_expr
1975
>=
shift_expr -> arith_expr
1975
==
shift_expr -> arith_expr
1975
)
shift_expr -> arith_expr
1975
!=
shift_expr -> arith_expr
1975
>
shift_expr -> arith_expr
1975
,
shift_expr -> arith_expr
1975
&
shift_expr -> arith_expr
1976
+
2268
1976
-
2269
1976
if
arith_expr -> term
1976
=
arith_expr -> term
1976
<=
arith_expr -> term
1976
|
arith_expr -> term
1976
not
arith_expr -> term
1976
^
arith_expr -> term
1976
<<
arith_expr -> term
1976
&
arith_expr -> term
1976
==
arith_expr -> term
1976
is
arith_expr -> term
1976
!=
arith_expr -> term
1976
>
arith_expr -> term
1976
and
arith_expr -> term
1976
<
arith_expr -> term
1976
or
arith_expr -> term
1976
,
arith_expr -> term
1976
)
arith_expr -> term
1976
>=
arith_expr -> term
1976
>>
arith_expr -> term
1976
in
arith_expr -> term
1977
<<
atom -> NUMBER
1977
)
atom -> NUMBER
1977
-
atom -> NUMBER
1977
^
atom -> NUMBER
1977
or
atom -> NUMBER
1977
==
atom -> NUMBER
1977
!=
atom -> NUMBER
1977
/
atom -> NUMBER
1977
and
atom -> NUMBER
1977
%
atom -> NUMBER
1977
,
atom -> NUMBER
1977
>=
atom -> NUMBER
1977
@
atom -> NUMBER
1977
|
atom -> NUMBER
1977
[
atom -> NUMBER
1977
//
atom -> NUMBER
1977
.
atom -> NUMBER
1977
=
atom -> NUMBER
1977
not
atom -> NUMBER
1977
<
atom -> NUMBER
1977
>>
atom -> NUMBER
1977
if
atom -> NUMBER
1977
<=
atom -> NUMBER
1977
>
atom -> NUMBER
1977
&
atom -> NUMBER
1977
is
atom -> NUMBER
1977
**
atom -> NUMBER
1977
in
atom -> NUMBER
1977
+
atom -> NUMBER
1977
(
atom -> NUMBER
1977
*
atom -> NUMBER
1978
}
2270
1979
**
2271
1979
or
power -> atom_expr
1979
*
power -> atom_expr
1979
>=
power -> atom_expr
1979
^
power -> atom_expr
1979
in
power -> atom_expr
1979
!=
power -> atom_expr
1979
if
power -> atom_expr
1979
@
power -> atom_expr
1979
=
power -> atom_expr
1979
-
power -> atom_expr
1979
and
power -> atom_expr
1979
not
power -> atom_expr
1979
==
power -> atom_expr
1979
<
power -> atom_expr
1979
&
power -> atom_expr
1979
|
power -> atom_expr
1979
//
power -> atom_expr
1979
>
power -> atom_expr
1979
,
power -> atom_expr
1979
%
power -> atom_expr
1979
/
power -> atom_expr
1979
is
power -> atom_expr
1979
<<
power -> atom_expr
1979
>>
power -> atom_expr
1979
+
power -> atom_expr
1979
)
power -> atom_expr
1979
<=
power -> atom_expr
1980
~
186
1980
factor
187
1980
STRING
188
1980
shift_expr
189
1980
test_list_comp
2272
1980
arith_expr
191
1980
term
192
1980
atom_expr
193
1980
]
2273
1980
test
195
1980
NUMBER
196
1980
and_expr
197
1980
{
198
1980
[
199
1980
-
200
1980
None
201
1980
(
202
1980
atom
203
1980
+
204
1980
NAME
205
1980
power
206
1980
True
207
1980
comparison
208
1980
xor_expr
209
1980
lambdef
210
1980
False
211
1980
not_test
212
1980
or_test
213
1980
and_test
214
1980
lambda
215
1980
not
216
1980
expr
217
1980
test_list
218
1981
~
1971
1981
STRING
1973
1981
NUMBER
1977
1981
factor
2274
1981
{
1978
1981
[
1980
1981
atom_expr
1979
1981
None
1982
1981
-
1981
1981
(
1983
1981
atom
1984
1981
+
1986
1981
NAME
1988
1981
power
1989
1981
True
1990
1981
False
1993
1982
not
atom -> None
1982
or
atom -> None
1982
==
atom -> None
1982
*
atom -> None
1982
-
atom -> None
1982
^
atom -> None
1982
>>
atom -> None
1982
=
atom -> None
1982
if
atom -> None
1982
,
atom -> None
1982
<<
atom -> None
1982
and
atom -> None
1982
|
atom -> None
1982
&
atom -> None
1982
!=
atom -> None
1982
@
atom -> None
1982
.
atom -> None
1982
/
atom -> None
1982
%
atom -> None
1982
>
atom -> None
1982
is
atom -> None
1982
<
atom -> None
1982
)
atom -> None
1982
(
atom -> None
1982
**
atom -> None
1982
//
atom -> None
1982
in
atom -> None
1982
<=
atom -> None
1982
>=
atom -> None
1982
+
atom -> None
1982
[
atom -> None
1983
~
92
1983
factor
93
1983
STRING
94
1983
shift_expr
95
1983
arith_expr
96
1983
term
97
1983
NUMBER
98
1983
and_expr
99
1983
{
100
1983
atom_expr
101
1983
[
102
1983
-
103
1983
)
2275
1983
None
105
1983
(
106
1983
atom
107
1983
test_list_comp
2276
1983
+
109
1983
NAME
110
1983
power
111
1983
test_list
112
1983
True
113
1983
comparison
114
1983
xor_expr
115
1983
lambdef
116
1983
False
117
1983
not_test
118
1983
or_test
119
1983
test
120
1983
lambda
121
1983
and_test
122
1983
not
123
1983
expr
124
1984
[
2277
1984
(
2278
1984
//
trailer_expr -> 
1984
trailer
2279
1984
<<
trailer_expr -> 
1984
trailer_expr
2280
1984
*
trailer_expr -> 
1984
in
trailer_expr -> 
1984
&
trailer_expr -> 
1984
.
2281
1984
and
trailer_expr -> 
1984
<=
trailer_expr -> 
1984
,
trailer_expr -> 
1984
|
trailer_expr -> 
1984
or
trailer_expr -> 
1984
>=
trailer_expr -> 
1984
=
trailer_expr -> 
1984
+
trailer_expr -> 
1984
**
trailer_expr -> 
1984
>>
trailer_expr -> 
1984
!=
trailer_expr -> 
1984
-
trailer_expr -> 
1984
/
trailer_expr -> 
1984
%
trailer_expr -> 
1984
is
trailer_expr -> 
1984
<
trailer_expr -> 
1984
if
trailer_expr -> 
1984
>
trailer_expr -> 
1984
^
trailer_expr -> 
1984
==
trailer_expr -> 
1984
@
trailer_expr -> 
1984
)
trailer_expr -> 
1984
not
trailer_expr -> 
1985
not
xor_expr -> and_expr
1985
^
2282
1985
)
xor_expr -> and_expr
1985
=
xor_expr -> and_expr
1985
if
xor_expr -> and_expr
1985
|
xor_expr -> and_expr
1985
>
xor_expr -> and_expr
1985
<
xor_expr -> and_expr
1985
or
xor_expr -> and_expr
1985
>=
xor_expr -> and_expr
1985
in
xor_expr -> and_expr
1985
and
xor_expr -> and_expr
1985
is
xor_expr -> and_expr
1985
==
xor_expr -> and_expr
1985
!=
xor_expr -> and_expr
1985
<=
xor_expr -> and_expr
1985
,
xor_expr -> and_expr
1986
~
1971
1986
STRING
1973
1986
NUMBER
1977
1986
{
1978
1986
factor
2283
1986
atom_expr
1979
1986
[
1980
1986
None
1982
1986
-
1981
1986
(
1983
1986
atom
1984
1986
+
1986
1986
NAME
1988
1986
power
1989
1986
True
1990
1986
False
1993
1987
or
and_test -> not_test
1987
,
and_test -> not_test
1987
if
and_test -> not_test
1987
)
and_test -> not_test
1987
and
2284
1987
=
and_test -> not_test
1988
<=
atom -> NAME
1988
@
atom -> NAME
1988
>>
atom -> NAME
1988
==
atom -> NAME
1988
>
atom -> NAME
1988
*
atom -> NAME
1988
-
atom -> NAME
1988
&
atom -> NAME
1988
is
atom -> NAME
1988
.
atom -> NAME
1988
or
atom -> NAME
1988
in
atom -> NAME
1988
)
atom -> NAME
1988
<<
atom -> NAME
1988
+
atom -> NAME
1988
,
atom -> NAME
1988
if
atom -> NAME
1988
|
atom -> NAME
1988
and
atom -> NAME
1988
=
atom -> NAME
1988
^
atom -> NAME
1988
/
atom -> NAME
1988
[
atom -> NAME
1988
not
atom -> NAME
1988
!=
atom -> NAME
1988
%
atom -> NAME
1988
<
atom -> NAME
1988
>=
atom -> NAME
1988
**
atom -> NAME
1988
(
atom -> NAME
1988
//
atom -> NAME
1989
if
factor -> power
1989
is
factor -> power
1989
%
factor -> power
1989
==
factor -> power
1989
>=
factor -> power
1989
or
factor -> power
1989
and
factor -> power
1989
/
factor -> power
1989
<
factor -> power
1989
+
factor -> power
1989
,
factor -> power
1989
//
factor -> power
1989
@
factor -> power
1989
in
factor -> power
1989
)
factor -> power
1989
=
factor -> power
1989
<=
factor -> power
1989
&
factor -> power
1989
!=
factor -> power
1989
<<
factor -> power
1989
|
factor -> power
1989
>
factor -> power
1989
*
factor -> power
1989
^
factor -> power
1989
-
factor -> power
1989
not
factor -> power
1989
>>
factor -> power
1990
>
atom -> True
1990
|
atom -> True
1990
-
atom -> True
1990
==
atom -> True
1990
<<
atom -> True
1990
if
atom -> True
1990
%
atom -> True
1990
/
atom -> True
1990
[
atom -> True
1990
*
atom -> True
1990
<=
atom -> True
1990
<
atom -> True
1990
&
atom -> True
1990
+
atom -> True
1990
**
atom -> True
1990
!=
atom -> True
1990
>>
atom -> True
1990
//
atom -> True
1990
and
atom -> True
1990
^
atom -> True
1990
is
atom -> True
1990
or
atom -> True
1990
)
atom -> True
1990
.
atom -> True
1990
,
atom -> True
1990
(
atom -> True
1990
>=
atom -> True
1990
@
atom -> True
1990
=
atom -> True
1990
not
atom -> True
1990
in
atom -> True
1991
or
not_test -> comparison
1991
if
not_test -> comparison
1991
and
not_test -> comparison
1991
,
not_test -> comparison
1991
=
not_test -> comparison
1991
)
not_test -> comparison
1992
|
2285
1992
not
expr -> xor_expr
1992
or
expr -> xor_expr
1992
==
expr -> xor_expr
1992
in
expr -> xor_expr
1992
if
expr -> xor_expr
1992
<=
expr -> xor_expr
1992
is
expr -> xor_expr
1992
<
expr -> xor_expr
1992
>=
expr -> xor_expr
1992
=
expr -> xor_expr
1992
>
expr -> xor_expr
1992
)
expr -> xor_expr
1992
and
expr -> xor_expr
1992
!=
expr -> xor_expr
1992
,
expr -> xor_expr
1993
<=
atom -> False
1993
*
atom -> False
1993
not
atom -> False
1993
!=
atom -> False
1993
@
atom -> False
1993
and
atom -> False
1993
=
atom -> False
1993
if
atom -> False
1993
<<
atom -> False
1993
>
atom -> False
1993
,
atom -> False
1993
+
atom -> False
1993
/
atom -> False
1993
==
atom -> False
1993
&
atom -> False
1993
^
atom -> False
1993
)
atom -> False
1993
[
atom -> False
1993
in
atom -> False
1993
is
atom -> False
1993
%
atom -> False
1993
>=
atom -> False
1993
//
atom -> False
1993
(
atom -> False
1993
|
atom -> False
1993
<
atom -> False
1993
.
atom -> False
1993
or
atom -> False
1993
**
atom -> False
1993
>>
atom -> False
1993
-
atom -> False
1994
=
or_test -> and_test
1994
or
2286
1994
)
or_test -> and_test
1994
if
or_test -> and_test
1994
,
or_test -> and_test
1995
NAME
251
1995
varargslist
2287
1995
vfpdef
253
1995
:
2288
1996
,
test -> lambdef
1996
=
test -> lambdef
1996
)
test -> lambdef
1997
!=
125
1997
=
comparison -> expr
1997
,
comparison -> expr
1997
is
126
1997
>=
127
1997
in
128
1997
<
129
1997
==
131
1997
<=
132
1997
not
133
1997
>
134
1997
comp_op
2289
1997
)
comparison -> expr
1997
or
comparison -> expr
1997
if
comparison -> expr
1997
and
comparison -> expr
1998
~
1971
1998
factor
1972
1998
STRING
1973
1998
shift_expr
1974
1998
arith_expr
1975
1998
term
1976
1998
NUMBER
1977
1998
{
1978
1998
atom_expr
1979
1998
[
1980
1998
-
1981
1998
None
1982
1998
(
1983
1998
atom
1984
1998
and_expr
1985
1998
+
1986
1998
NAME
1988
1998
power
1989
1998
True
1990
1998
comparison
1991
1998
xor_expr
1992
1998
False
1993
1998
not_test
2290
1998
expr
1997
1998
not
1998
1999
=
test -> or_test
1999
if
2291
1999
)
test -> or_test
1999
,
test -> or_test
2000
=
tfpdef -> NAME : test
2000
,
tfpdef -> NAME : test
2000
)
tfpdef -> NAME : test
2001
)
param -> tfpdef = test
2001
,
param -> tfpdef = test
2002
)
parameters -> param , parameters
2003
expr
5
2003
factor
1
2003
(
3
2003
STRING
4
2003
term
6
2003
not
8
2003
suite
2292
2003
or_test
10
2003
~
12
2003
atom_expr
13
2003
comparison
14
2003
shift_expr
29
2003
None
15
2003
power
43
2003
+
19
2003
small_stmt
42
2003
xor_expr
17
2003
arith_expr
18
2003
[
32
2003
simple_stmt
1050
2003
atom
22
2003
NUMBER
26
2003
and_test
39
2003
NAME
27
2003
-
36
2003
False
28
2003
lambda
46
2003
test
47
2003
NEWLINE
1051
2003
not_test
34
2003
{
35
2003
and_expr
33
2003
lambdef
45
2003
True
48
2003
endsim
75
2003
flow_stmt
53
2003
pass
76
2003
break
54
2003
raise
55
2003
yield
56
2003
assert
57
2003
global_stmt
77
2003
continue_stmt
58
2003
del_stmt
78
2003
stat_stmt
59
2003
global
79
2003
return_stmt
60
2003
test_list
61
2003
continue
62
2003
yield_stmt
63
2003
return
68
2003
sim_stmt
65
2003
resetstats
66
2003
break_stmt
82
2003
del
67
2003
raise_stmt
69
2003
nonlocal
70
2003
pass_stmt
71
2003
begsim
83
2003
expr_stmt
72
2003
nonlocal_stmt
84
2003
assert_stmt
74
2004
expr
5
2004
factor
1
2004
(
3
2004
STRING
4
2004
term
6
2004
not
8
2004
or_test
10
2004
~
12
2004
atom_expr
13
2004
comparison
14
2004
shift_expr
29
2004
None
15
2004
power
43
2004
+
19
2004
small_stmt
2293
2004
xor_expr
17
2004
arith_expr
18
2004
[
32
2004
simple_stmt
2294
2004
atom
22
2004
NUMBER
26
2004
suite
2295
2004
and_test
39
2004
NAME
27
2004
-
36
2004
False
28
2004
lambda
46
2004
test
47
2004
NEWLINE
2296
2004
not_test
34
2004
{
35
2004
and_expr
33
2004
lambdef
45
2004
True
48
2004
endsim
75
2004
flow_stmt
53
2004
pass
76
2004
break
54
2004
raise
55
2004
yield
56
2004
assert
57
2004
global_stmt
77
2004
continue_stmt
58
2004
del_stmt
78
2004
stat_stmt
59
2004
global
79
2004
return_stmt
60
2004
test_list
61
2004
continue
62
2004
yield_stmt
63
2004
return
68
2004
sim_stmt
65
2004
resetstats
66
2004
break_stmt
82
2004
del
67
2004
raise_stmt
69
2004
nonlocal
70
2004
pass_stmt
71
2004
begsim
83
2004
expr_stmt
72
2004
nonlocal_stmt
84
2004
assert_stmt
74
2005
<
factor -> ~ factor
2005
in
factor -> ~ factor
2005
==
factor -> ~ factor
2005
|
factor -> ~ factor
2005
<<
factor -> ~ factor
2005
>
factor -> ~ factor
2005
not
factor -> ~ factor
2005
<=
factor -> ~ factor
2005
//
factor -> ~ factor
2005
>=
factor -> ~ factor
2005
>>
factor -> ~ factor
2005
-
factor -> ~ factor
2005
*
factor -> ~ factor
2005
/
factor -> ~ factor
2005
if
factor -> ~ factor
2005
:
factor -> ~ factor
2005
^
factor -> ~ factor
2005
and
factor -> ~ factor
2005
is
factor -> ~ factor
2005
+
factor -> ~ factor
2005
or
factor -> ~ factor
2005
&
factor -> ~ factor
2005
as
factor -> ~ factor
2005
!=
factor -> ~ factor
2005
%
factor -> ~ factor
2005
@
factor -> ~ factor
2006
~
1630
2006
factor
1631
2006
STRING
1634
2006
term
2297
2006
NUMBER
1637
2006
{
1639
2006
[
1642
2006
atom_expr
1641
2006
-
1643
2006
None
1644
2006
+
1645
2006
(
1646
2006
atom
1648
2006
NAME
1650
2006
power
1651
2006
True
1652
2006
False
1656
2007
~
1630
2007
factor
1631
2007
STRING
1634
2007
NUMBER
1637
2007
{
1639
2007
[
1642
2007
atom_expr
1641
2007
-
1643
2007
None
1644
2007
+
1645
2007
(
1646
2007
atom
1648
2007
NAME
1650
2007
power
1651
2007
True
1652
2007
False
1656
2007
term
2298
2008
~
1630
2008
factor
1631
2008
STRING
1634
2008
NUMBER
1637
2008
{
1639
2008
term
2299
2008
[
1642
2008
atom_expr
1641
2008
-
1643
2008
None
1644
2008
+
1645
2008
(
1646
2008
atom
1648
2008
NAME
1650
2008
power
1651
2008
True
1652
2008
False
1656
2009
~
1630
2009
factor
1631
2009
STRING
1634
2009
NUMBER
1637
2009
{
1639
2009
[
1642
2009
atom_expr
1641
2009
-
1643
2009
None
1644
2009
+
1645
2009
(
1646
2009
term
2300
2009
atom
1648
2009
NAME
1650
2009
power
1651
2009
True
1652
2009
False
1656
2010
~
1630
2010
factor
1631
2010
STRING
1634
2010
NUMBER
1637
2010
{
1639
2010
[
1642
2010
atom_expr
1641
2010
-
1643
2010
None
1644
2010
+
1645
2010
(
1646
2010
atom
1648
2010
term
2301
2010
NAME
1650
2010
power
1651
2010
True
1652
2010
False
1656
2011
NAME
2302
2012
expr
5
2012
factor
1
2012
(
3
2012
STRING
4
2012
term
6
2012
suite
2303
2012
not
8
2012
or_test
10
2012
~
12
2012
atom_expr
13
2012
comparison
14
2012
shift_expr
29
2012
None
15
2012
power
43
2012
+
19
2012
small_stmt
2017
2012
xor_expr
17
2012
arith_expr
18
2012
[
32
2012
simple_stmt
2018
2012
atom
22
2012
NUMBER
26
2012
and_test
39
2012
NAME
27
2012
-
36
2012
False
28
2012
lambda
46
2012
test
47
2012
NEWLINE
2019
2012
not_test
34
2012
{
35
2012
and_expr
33
2012
lambdef
45
2012
True
48
2012
endsim
75
2012
flow_stmt
53
2012
pass
76
2012
break
54
2012
raise
55
2012
yield
56
2012
assert
57
2012
global_stmt
77
2012
continue_stmt
58
2012
del_stmt
78
2012
stat_stmt
59
2012
global
79
2012
return_stmt
60
2012
test_list
61
2012
continue
62
2012
yield_stmt
63
2012
return
68
2012
sim_stmt
65
2012
resetstats
66
2012
break_stmt
82
2012
del
67
2012
raise_stmt
69
2012
nonlocal
70
2012
pass_stmt
71
2012
begsim
83
2012
expr_stmt
72
2012
nonlocal_stmt
84
2012
assert_stmt
74
2013
~
1630
2013
factor
1631
2013
STRING
1634
2013
shift_expr
1633
2013
term
1636
2013
NUMBER
1637
2013
{
1639
2013
atom_expr
1641
2013
[
1642
2013
-
1643
2013
None
1644
2013
+
1645
2013
(
1646
2013
arith_expr
1647
2013
atom
1648
2013
NAME
1650
2013
power
1651
2013
True
1652
2013
False
1656
2013
and_expr
2304
2014
~
1630
2014
factor
1631
2014
STRING
1634
2014
shift_expr
1633
2014
expr
1635
2014
term
1636
2014
NUMBER
1637
2014
{
1639
2014
atom_expr
1641
2014
[
1642
2014
-
1643
2014
None
1644
2014
+
1645
2014
(
1646
2014
arith_expr
1647
2014
atom
1648
2014
and_expr
1649
2014
NAME
1650
2014
power
1651
2014
True
1652
2014
xor_expr
1654
2014
False
1656
2014
comparison
2305
2015
~
1630
2015
factor
1631
2015
STRING
1634
2015
arith_expr
2306
2015
term
1636
2015
NUMBER
1637
2015
{
1639
2015
[
1642
2015
atom_expr
1641
2015
-
1643
2015
None
1644
2015
+
1645
2015
(
1646
2015
atom
1648
2015
NAME
1650
2015
power
1651
2015
True
1652
2015
False
1656
2016
~
1630
2016
factor
1631
2016
STRING
1634
2016
term
1636
2016
arith_expr
2307
2016
NUMBER
1637
2016
{
1639
2016
[
1642
2016
atom_expr
1641
2016
-
1643
2016
None
1644
2016
+
1645
2016
(
1646
2016
atom
1648
2016
NAME
1650
2016
power
1651
2016
True
1652
2016
False
1656
2017
NEWLINE
2308
2018
False
suite -> simple_stmt
2018
-
suite -> simple_stmt
2018
break
suite -> simple_stmt
2018
@
suite -> simple_stmt
2018
endsim
suite -> simple_stmt
2018
+
suite -> simple_stmt
2018
STRING
suite -> simple_stmt
2018
finally
suite -> simple_stmt
2018
if
suite -> simple_stmt
2018
NEWLINE
suite -> simple_stmt
2018
else
suite -> simple_stmt
2018
return
suite -> simple_stmt
2018
~
suite -> simple_stmt
2018
for
suite -> simple_stmt
2018
pass
suite -> simple_stmt
2018
with
suite -> simple_stmt
2018
while
suite -> simple_stmt
2018
NAME
suite -> simple_stmt
2018
del
suite -> simple_stmt
2018
(
suite -> simple_stmt
2018
class
suite -> simple_stmt
2018
[
suite -> simple_stmt
2018
resetstats
suite -> simple_stmt
2018
def
suite -> simple_stmt
2018
continue
suite -> simple_stmt
2018
begsim
suite -> simple_stmt
2018
raise
suite -> simple_stmt
2018
yield
suite -> simple_stmt
2018
nonlocal
suite -> simple_stmt
2018
except
suite -> simple_stmt
2018
None
suite -> simple_stmt
2018
not
suite -> simple_stmt
2018
{
suite -> simple_stmt
2018
lambda
suite -> simple_stmt
2018
$
suite -> simple_stmt
2018
NUMBER
suite -> simple_stmt
2018
try
suite -> simple_stmt
2018
assert
suite -> simple_stmt
2018
global
suite -> simple_stmt
2018
True
suite -> simple_stmt
2018
conf
suite -> simple_stmt
2019
INDENT
2309
2020
except_clause
2310
2020
maybe_except_clause
2311
2020
@
maybe_except_clause -> 
2020
except
1139
2020
pass
maybe_except_clause -> 
2020
if
maybe_except_clause -> 
2020
NUMBER
maybe_except_clause -> 
2020
NEWLINE
maybe_except_clause -> 
2020
class
maybe_except_clause -> 
2020
del
maybe_except_clause -> 
2020
raise
maybe_except_clause -> 
2020
conf
maybe_except_clause -> 
2020
for
maybe_except_clause -> 
2020
assert
maybe_except_clause -> 
2020
$
maybe_except_clause -> 
2020
STRING
maybe_except_clause -> 
2020
[
maybe_except_clause -> 
2020
None
maybe_except_clause -> 
2020
return
maybe_except_clause -> 
2020
not
maybe_except_clause -> 
2020
yield
maybe_except_clause -> 
2020
nonlocal
maybe_except_clause -> 
2020
-
maybe_except_clause -> 
2020
try
maybe_except_clause -> 
2020
while
maybe_except_clause -> 
2020
begsim
maybe_except_clause -> 
2020
lambda
maybe_except_clause -> 
2020
(
maybe_except_clause -> 
2020
~
maybe_except_clause -> 
2020
global
maybe_except_clause -> 
2020
NAME
maybe_except_clause -> 
2020
else
maybe_except_clause -> 
2020
def
maybe_except_clause -> 
2020
resetstats
maybe_except_clause -> 
2020
False
maybe_except_clause -> 
2020
break
maybe_except_clause -> 
2020
with
maybe_except_clause -> 
2020
+
maybe_except_clause -> 
2020
endsim
maybe_except_clause -> 
2020
continue
maybe_except_clause -> 
2020
{
maybe_except_clause -> 
2020
True
maybe_except_clause -> 
2020
finally
maybe_except_clause -> 
2021
//
atom -> { }
2021
[
atom -> { }
2021
as
atom -> { }
2021
|
atom -> { }
2021
>
atom -> { }
2021
>=
atom -> { }
2021
==
atom -> { }
2021
&
atom -> { }
2021
not
atom -> { }
2021
**
atom -> { }
2021
in
atom -> { }
2021
or
atom -> { }
2021
:
atom -> { }
2021
<
atom -> { }
2021
!=
atom -> { }
2021
+
atom -> { }
2021
<<
atom -> { }
2021
^
atom -> { }
2021
<=
atom -> { }
2021
if
atom -> { }
2021
/
atom -> { }
2021
is
atom -> { }
2021
-
atom -> { }
2021
>>
atom -> { }
2021
%
atom -> { }
2021
.
atom -> { }
2021
(
atom -> { }
2021
and
atom -> { }
2021
*
atom -> { }
2021
@
atom -> { }
2022
or_test
2312
2022
factor
1631
2022
~
1630
2022
shift_expr
1633
2022
STRING
1634
2022
expr
1635
2022
term
1636
2022
NUMBER
1637
2022
{
1639
2022
and_test
1640
2022
atom_expr
1641
2022
[
1642
2022
-
1643
2022
None
1644
2022
+
1645
2022
(
1646
2022
arith_expr
1647
2022
atom
1648
2022
and_expr
1649
2022
NAME
1650
2022
power
1651
2022
True
1652
2022
comparison
1653
2022
xor_expr
1654
2022
False
1656
2022
not_test
1657
2022
not
1660
2023
~
1630
2023
STRING
1634
2023
NUMBER
1637
2023
factor
2313
2023
{
1639
2023
[
1642
2023
atom_expr
1641
2023
None
1644
2023
-
1643
2023
+
1645
2023
(
1646
2023
atom
1648
2023
NAME
1650
2023
power
1651
2023
True
1652
2023
False
1656
2024
]
2314
2025
==
atom -> [ ]
2025
%
atom -> [ ]
2025
**
atom -> [ ]
2025
.
atom -> [ ]
2025
as
atom -> [ ]
2025
<<
atom -> [ ]
2025
not
atom -> [ ]
2025
/
atom -> [ ]
2025
*
atom -> [ ]
2025
if
atom -> [ ]
2025
!=
atom -> [ ]
2025
<=
atom -> [ ]
2025
@
atom -> [ ]
2025
-
atom -> [ ]
2025
>>
atom -> [ ]
2025
^
atom -> [ ]
2025
|
atom -> [ ]
2025
:
atom -> [ ]
2025
<
atom -> [ ]
2025
[
atom -> [ ]
2025
is
atom -> [ ]
2025
in
atom -> [ ]
2025
>
atom -> [ ]
2025
+
atom -> [ ]
2025
>=
atom -> [ ]
2025
and
atom -> [ ]
2025
or
atom -> [ ]
2025
&
atom -> [ ]
2025
(
atom -> [ ]
2025
//
atom -> [ ]
2026
if
factor -> - factor
2026
/
factor -> - factor
2026
not
factor -> - factor
2026
<
factor -> - factor
2026
or
factor -> - factor
2026
//
factor -> - factor
2026
!=
factor -> - factor
2026
%
factor -> - factor
2026
|
factor -> - factor
2026
>
factor -> - factor
2026
+
factor -> - factor
2026
:
factor -> - factor
2026
-
factor -> - factor
2026
^
factor -> - factor
2026
in
factor -> - factor
2026
<<
factor -> - factor
2026
&
factor -> - factor
2026
<=
factor -> - factor
2026
==
factor -> - factor
2026
and
factor -> - factor
2026
@
factor -> - factor
2026
>=
factor -> - factor
2026
is
factor -> - factor
2026
>>
factor -> - factor
2026
as
factor -> - factor
2026
*
factor -> - factor
2027
<
factor -> + factor
2027
in
factor -> + factor
2027
|
factor -> + factor
2027
==
factor -> + factor
2027
>
factor -> + factor
2027
-
factor -> + factor
2027
and
factor -> + factor
2027
*
factor -> + factor
2027
as
factor -> + factor
2027
if
factor -> + factor
2027
%
factor -> + factor
2027
@
factor -> + factor
2027
is
factor -> + factor
2027
//
factor -> + factor
2027
&
factor -> + factor
2027
^
factor -> + factor
2027
>=
factor -> + factor
2027
not
factor -> + factor
2027
/
factor -> + factor
2027
:
factor -> + factor
2027
or
factor -> + factor
2027
!=
factor -> + factor
2027
<<
factor -> + factor
2027
>>
factor -> + factor
2027
<=
factor -> + factor
2027
+
factor -> + factor
2028
-
atom -> ( )
2028
==
atom -> ( )
2028
/
atom -> ( )
2028
<=
atom -> ( )
2028
(
atom -> ( )
2028
&
atom -> ( )
2028
[
atom -> ( )
2028
^
atom -> ( )
2028
or
atom -> ( )
2028
+
atom -> ( )
2028
>>
atom -> ( )
2028
as
atom -> ( )
2028
is
atom -> ( )
2028
*
atom -> ( )
2028
if
atom -> ( )
2028
and
atom -> ( )
2028
>=
atom -> ( )
2028
>
atom -> ( )
2028
@
atom -> ( )
2028
:
atom -> ( )
2028
in
atom -> ( )
2028
not
atom -> ( )
2028
<
atom -> ( )
2028
.
atom -> ( )
2028
//
atom -> ( )
2028
%
atom -> ( )
2028
<<
atom -> ( )
2028
|
atom -> ( )
2028
**
atom -> ( )
2028
!=
atom -> ( )
2029
)
2315
2030
~
1630
2030
factor
1631
2030
STRING
1634
2030
term
1636
2030
NUMBER
1637
2030
{
1639
2030
[
1642
2030
atom_expr
1641
2030
-
1643
2030
shift_expr
2316
2030
None
1644
2030
+
1645
2030
(
1646
2030
arith_expr
1647
2030
atom
1648
2030
NAME
1650
2030
power
1651
2030
True
1652
2030
False
1656
2031
~
1630
2031
factor
1631
2031
STRING
1634
2031
term
1636
2031
NUMBER
1637
2031
{
1639
2031
[
1642
2031
atom_expr
1641
2031
-
1643
2031
None
1644
2031
+
1645
2031
(
1646
2031
arith_expr
1647
2031
atom
1648
2031
shift_expr
2317
2031
NAME
1650
2031
power
1651
2031
True
1652
2031
False
1656
2032
~
544
2032
factor
545
2032
STRING
546
2032
shift_expr
547
2032
expr
548
2032
arith_expr
549
2032
term
550
2032
atom_expr
551
2032
NUMBER
552
2032
subscript
553
2032
{
554
2032
[
555
2032
-
556
2032
None
557
2032
+
558
2032
(
559
2032
subscriptlist
2318
2032
atom
561
2032
and_expr
562
2032
NAME
563
2032
power
564
2032
True
565
2032
comparison
566
2032
xor_expr
567
2032
lambda
568
2032
False
569
2032
not_test
570
2032
and_test
571
2032
test
572
2032
or_test
573
2032
not
574
2032
:
maybe_test -> 
2032
maybe_test
575
2032
lambdef
576
2033
)
2319
2033
~
579
2033
factor
580
2033
STRING
581
2033
shift_expr
582
2033
arith_expr
583
2033
term
584
2033
NUMBER
585
2033
and_expr
586
2033
{
587
2033
atom_expr
589
2033
[
590
2033
-
591
2033
None
592
2033
(
593
2033
atom
594
2033
+
595
2033
not_test
596
2033
arglist
2320
2033
test
597
2033
NAME
598
2033
power
599
2033
True
600
2033
comparison
601
2033
xor_expr
602
2033
lambdef
603
2033
False
604
2033
argument
605
2033
and_test
606
2033
lambda
607
2033
or_test
608
2033
expr
609
2033
not
610
2033
**
611
2033
*
612
2034
[
2032
2034
(
2033
2034
//
trailer_expr -> 
2034
trailer
2034
2034
<<
trailer_expr -> 
2034
*
trailer_expr -> 
2034
in
trailer_expr -> 
2034
&
trailer_expr -> 
2034
trailer_expr
2321
2034
and
trailer_expr -> 
2034
.
2036
2034
<=
trailer_expr -> 
2034
|
trailer_expr -> 
2034
or
trailer_expr -> 
2034
>=
trailer_expr -> 
2034
:
trailer_expr -> 
2034
+
trailer_expr -> 
2034
**
trailer_expr -> 
2034
>>
trailer_expr -> 
2034
!=
trailer_expr -> 
2034
-
trailer_expr -> 
2034
/
trailer_expr -> 
2034
%
trailer_expr -> 
2034
is
trailer_expr -> 
2034
as
trailer_expr -> 
2034
<
trailer_expr -> 
2034
>
trailer_expr -> 
2034
if
trailer_expr -> 
2034
^
trailer_expr -> 
2034
==
trailer_expr -> 
2034
@
trailer_expr -> 
2034
not
trailer_expr -> 
2035
<=
atom_expr -> atom trailer_expr
2035
or
atom_expr -> atom trailer_expr
2035
*
atom_expr -> atom trailer_expr
2035
>=
atom_expr -> atom trailer_expr
2035
**
atom_expr -> atom trailer_expr
2035
&
atom_expr -> atom trailer_expr
2035
%
atom_expr -> atom trailer_expr
2035
if
atom_expr -> atom trailer_expr
2035
+
atom_expr -> atom trailer_expr
2035
:
atom_expr -> atom trailer_expr
2035
is
atom_expr -> atom trailer_expr
2035
//
atom_expr -> atom trailer_expr
2035
!=
atom_expr -> atom trailer_expr
2035
|
atom_expr -> atom trailer_expr
2035
<
atom_expr -> atom trailer_expr
2035
@
atom_expr -> atom trailer_expr
2035
not
atom_expr -> atom trailer_expr
2035
-
atom_expr -> atom trailer_expr
2035
in
atom_expr -> atom trailer_expr
2035
/
atom_expr -> atom trailer_expr
2035
^
atom_expr -> atom trailer_expr
2035
>
atom_expr -> atom trailer_expr
2035
==
atom_expr -> atom trailer_expr
2035
as
atom_expr -> atom trailer_expr
2035
<<
atom_expr -> atom trailer_expr
2035
>>
atom_expr -> atom trailer_expr
2035
and
atom_expr -> atom trailer_expr
2036
NAME
2322
2037
~
1630
2037
factor
1631
2037
STRING
1634
2037
shift_expr
1633
2037
term
1636
2037
NUMBER
1637
2037
{
1639
2037
atom_expr
1641
2037
[
1642
2037
xor_expr
2323
2037
-
1643
2037
None
1644
2037
+
1645
2037
(
1646
2037
arith_expr
1647
2037
atom
1648
2037
and_expr
1649
2037
NAME
1650
2037
power
1651
2037
True
1652
2037
False
1656
2038
~
1630
2038
factor
1631
2038
STRING
1634
2038
shift_expr
1633
2038
term
1636
2038
NUMBER
1637
2038
{
1639
2038
atom_expr
1641
2038
[
1642
2038
-
1643
2038
None
1644
2038
+
1645
2038
(
1646
2038
arith_expr
1647
2038
atom
1648
2038
and_expr
1649
2038
NAME
1650
2038
power
1651
2038
True
1652
2038
xor_expr
1654
2038
False
1656
2038
expr
2324
2039
~
1630
2039
factor
1631
2039
STRING
1634
2039
shift_expr
1633
2039
expr
1635
2039
term
1636
2039
NUMBER
1637
2039
{
1639
2039
and_test
1640
2039
atom_expr
1641
2039
[
1642
2039
-
1643
2039
None
1644
2039
+
1645
2039
(
1646
2039
arith_expr
1647
2039
atom
1648
2039
and_expr
1649
2039
NAME
1650
2039
power
1651
2039
True
1652
2039
comparison
1653
2039
xor_expr
1654
2039
lambda
1655
2039
False
1656
2039
not_test
1657
2039
or_test
1658
2039
lambdef
1659
2039
test
2325
2039
not
1660
2040
:
2326
2041
~
1630
2041
factor
1631
2041
STRING
1634
2041
shift_expr
1633
2041
expr
1635
2041
term
1636
2041
NUMBER
1637
2041
{
1639
2041
atom_expr
1641
2041
[
1642
2041
-
1643
2041
None
1644
2041
+
1645
2041
(
1646
2041
arith_expr
1647
2041
atom
1648
2041
and_expr
1649
2041
NAME
1650
2041
power
1651
2041
True
1652
2041
and_test
2327
2041
comparison
1653
2041
xor_expr
1654
2041
False
1656
2041
not_test
1657
2041
not
1660
2042
~
509
2042
factor
510
2042
STRING
511
2042
shift_expr
512
2042
term
513
2042
NUMBER
514
2042
{
515
2042
atom_expr
516
2042
[
517
2042
-
518
2042
None
519
2042
(
520
2042
atom
521
2042
arith_expr
522
2042
False
523
2042
+
524
2042
or_test
2328
2042
NAME
526
2042
power
527
2042
True
528
2042
xor_expr
529
2042
comparison
530
2042
and_expr
531
2042
not_test
532
2042
not
533
2042
expr
534
2042
and_test
535
2043
:
not_test -> not not_test
2043
if
not_test -> not not_test
2043
and
not_test -> not not_test
2043
as
not_test -> not not_test
2043
or
not_test -> not not_test
2044
begsim
decorated -> decorators classdef
2044
class
decorated -> decorators classdef
2044
for
decorated -> decorators classdef
2044
~
decorated -> decorators classdef
2044
lambda
decorated -> decorators classdef
2044
-
decorated -> decorators classdef
2044
(
decorated -> decorators classdef
2044
raise
decorated -> decorators classdef
2044
pass
decorated -> decorators classdef
2044
not
decorated -> decorators classdef
2044
@
decorated -> decorators classdef
2044
endsim
decorated -> decorators classdef
2044
global
decorated -> decorators classdef
2044
False
decorated -> decorators classdef
2044
resetstats
decorated -> decorators classdef
2044
try
decorated -> decorators classdef
2044
continue
decorated -> decorators classdef
2044
yield
decorated -> decorators classdef
2044
{
decorated -> decorators classdef
2044
conf
decorated -> decorators classdef
2044
def
decorated -> decorators classdef
2044
STRING
decorated -> decorators classdef
2044
None
decorated -> decorators classdef
2044
assert
decorated -> decorators classdef
2044
[
decorated -> decorators classdef
2044
break
decorated -> decorators classdef
2044
while
decorated -> decorators classdef
2044
if
decorated -> decorators classdef
2044
nonlocal
decorated -> decorators classdef
2044
DEDENT
decorated -> decorators classdef
2044
with
decorated -> decorators classdef
2044
return
decorated -> decorators classdef
2044
NAME
decorated -> decorators classdef
2044
+
decorated -> decorators classdef
2044
del
decorated -> decorators classdef
2044
True
decorated -> decorators classdef
2044
NUMBER
decorated -> decorators classdef
2045
return
decorated -> decorators funcdef
2045
DEDENT
decorated -> decorators funcdef
2045
begsim
decorated -> decorators funcdef
2045
global
decorated -> decorators funcdef
2045
False
decorated -> decorators funcdef
2045
{
decorated -> decorators funcdef
2045
NUMBER
decorated -> decorators funcdef
2045
-
decorated -> decorators funcdef
2045
not
decorated -> decorators funcdef
2045
for
decorated -> decorators funcdef
2045
raise
decorated -> decorators funcdef
2045
+
decorated -> decorators funcdef
2045
(
decorated -> decorators funcdef
2045
assert
decorated -> decorators funcdef
2045
try
decorated -> decorators funcdef
2045
yield
decorated -> decorators funcdef
2045
continue
decorated -> decorators funcdef
2045
resetstats
decorated -> decorators funcdef
2045
~
decorated -> decorators funcdef
2045
while
decorated -> decorators funcdef
2045
lambda
decorated -> decorators funcdef
2045
pass
decorated -> decorators funcdef
2045
del
decorated -> decorators funcdef
2045
NAME
decorated -> decorators funcdef
2045
conf
decorated -> decorators funcdef
2045
True
decorated -> decorators funcdef
2045
[
decorated -> decorators funcdef
2045
STRING
decorated -> decorators funcdef
2045
None
decorated -> decorators funcdef
2045
nonlocal
decorated -> decorators funcdef
2045
endsim
decorated -> decorators funcdef
2045
@
decorated -> decorators funcdef
2045
class
decorated -> decorators funcdef
2045
break
decorated -> decorators funcdef
2045
if
decorated -> decorators funcdef
2045
def
decorated -> decorators funcdef
2045
with
decorated -> decorators funcdef
2046
:
2329
2047
:
2330
2048
:
2331
2049
:
2332
2049
(
2333
2050
(
2334
2051
expr
5
2051
factor
1
2051
(
3
2051
STRING
4
2051
suite
2335
2051
term
6
2051
not
8
2051
or_test
10
2051
~
12
2051
atom_expr
13
2051
comparison
14
2051
shift_expr
29
2051
None
15
2051
power
43
2051
+
19
2051
xor_expr
17
2051
arith_expr
18
2051
[
32
2051
atom
22
2051
NUMBER
26
2051
and_test
39
2051
NAME
27
2051
-
36
2051
False
28
2051
lambda
46
2051
test
47
2051
not_test
34
2051
{
35
2051
and_expr
33
2051
lambdef
45
2051
True
48
2051
endsim
75
2051
flow_stmt
53
2051
pass
76
2051
break
54
2051
raise
55
2051
yield
56
2051
assert
57
2051
global_stmt
77
2051
continue_stmt
58
2051
del_stmt
78
2051
stat_stmt
59
2051
global
79
2051
return_stmt
60
2051
test_list
61
2051
continue
62
2051
yield_stmt
63
2051
simple_stmt
615
2051
return
68
2051
sim_stmt
65
2051
resetstats
66
2051
small_stmt
616
2051
break_stmt
82
2051
del
67
2051
NEWLINE
617
2051
raise_stmt
69
2051
nonlocal
70
2051
pass_stmt
71
2051
begsim
83
2051
expr_stmt
72
2051
nonlocal_stmt
84
2051
assert_stmt
74
2052
in
2336
2053
~
simple_stmt -> small_stmt NEWLINE
2053
begsim
simple_stmt -> small_stmt NEWLINE
2053
endsim
simple_stmt -> small_stmt NEWLINE
2053
if
simple_stmt -> small_stmt NEWLINE
2053
break
simple_stmt -> small_stmt NEWLINE
2053
False
simple_stmt -> small_stmt NEWLINE
2053
def
simple_stmt -> small_stmt NEWLINE
2053
STRING
simple_stmt -> small_stmt NEWLINE
2053
assert
simple_stmt -> small_stmt NEWLINE
2053
lambda
simple_stmt -> small_stmt NEWLINE
2053
yield
simple_stmt -> small_stmt NEWLINE
2053
True
simple_stmt -> small_stmt NEWLINE
2053
+
simple_stmt -> small_stmt NEWLINE
2053
try
simple_stmt -> small_stmt NEWLINE
2053
for
simple_stmt -> small_stmt NEWLINE
2053
conf
simple_stmt -> small_stmt NEWLINE
2053
nonlocal
simple_stmt -> small_stmt NEWLINE
2053
continue
simple_stmt -> small_stmt NEWLINE
2053
-
simple_stmt -> small_stmt NEWLINE
2053
resetstats
simple_stmt -> small_stmt NEWLINE
2053
raise
simple_stmt -> small_stmt NEWLINE
2053
(
simple_stmt -> small_stmt NEWLINE
2053
None
simple_stmt -> small_stmt NEWLINE
2053
while
simple_stmt -> small_stmt NEWLINE
2053
not
simple_stmt -> small_stmt NEWLINE
2053
DEDENT
simple_stmt -> small_stmt NEWLINE
2053
NAME
simple_stmt -> small_stmt NEWLINE
2053
del
simple_stmt -> small_stmt NEWLINE
2053
with
simple_stmt -> small_stmt NEWLINE
2053
global
simple_stmt -> small_stmt NEWLINE
2053
@
simple_stmt -> small_stmt NEWLINE
2053
class
simple_stmt -> small_stmt NEWLINE
2053
{
simple_stmt -> small_stmt NEWLINE
2053
NUMBER
simple_stmt -> small_stmt NEWLINE
2053
[
simple_stmt -> small_stmt NEWLINE
2053
pass
simple_stmt -> small_stmt NEWLINE
2053
return
simple_stmt -> small_stmt NEWLINE
2054
:
2337
2055
DEDENT
stmt_list -> stmt stmt_list
2056
except
suite -> NEWLINE INDENT stmt_list DEDENT
2057
~
2057
2057
STRING
2059
2057
atom_expr
2062
2057
NUMBER
2063
2057
{
2065
2057
[
2066
2057
None
2068
2057
-
2067
2057
factor
2338
2057
(
2069
2057
atom
2071
2057
+
2072
2057
NAME
2073
2057
power
2074
2057
True
2075
2057
False
2078
2058
/
2339
2058
@
2340
2058
if
term -> factor
2058
*
2341
2058
%
2342
2058
<<
term -> factor
2058
-
term -> factor
2058
//
2343
2058
>=
term -> factor
2058
or
term -> factor
2058
<=
term -> factor
2058
]
term -> factor
2058
>
term -> factor
2058
in
term -> factor
2058
<
term -> factor
2058
>>
term -> factor
2058
for
term -> factor
2058
==
term -> factor
2058
is
term -> factor
2058
+
term -> factor
2058
|
term -> factor
2058
!=
term -> factor
2058
&
term -> factor
2058
not
term -> factor
2058
and
term -> factor
2058
^
term -> factor
2059
==
atom -> STRING
2059
>
atom -> STRING
2059
for
atom -> STRING
2059
<=
atom -> STRING
2059
&
atom -> STRING
2059
.
atom -> STRING
2059
>=
atom -> STRING
2059
@
atom -> STRING
2059
[
atom -> STRING
2059
^
atom -> STRING
2059
%
atom -> STRING
2059
**
atom -> STRING
2059
-
atom -> STRING
2059
//
atom -> STRING
2059
>>
atom -> STRING
2059
<
atom -> STRING
2059
|
atom -> STRING
2059
(
atom -> STRING
2059
]
atom -> STRING
2059
is
atom -> STRING
2059
and
atom -> STRING
2059
*
atom -> STRING
2059
or
atom -> STRING
2059
not
atom -> STRING
2059
<<
atom -> STRING
2059
/
atom -> STRING
2059
+
atom -> STRING
2059
!=
atom -> STRING
2059
in
atom -> STRING
2059
if
atom -> STRING
2060
&
2344
2060
in
and_expr -> shift_expr
2060
for
and_expr -> shift_expr
2060
not
and_expr -> shift_expr
2060
!=
and_expr -> shift_expr
2060
>=
and_expr -> shift_expr
2060
if
and_expr -> shift_expr
2060
and
and_expr -> shift_expr
2060
|
and_expr -> shift_expr
2060
is
and_expr -> shift_expr
2060
<=
and_expr -> shift_expr
2060
>
and_expr -> shift_expr
2060
]
and_expr -> shift_expr
2060
^
and_expr -> shift_expr
2060
or
and_expr -> shift_expr
2060
<
and_expr -> shift_expr
2060
==
and_expr -> shift_expr
2061
+
2345
2061
if
arith_expr -> term
2061
-
2346
2061
<=
arith_expr -> term
2061
for
arith_expr -> term
2061
|
arith_expr -> term
2061
not
arith_expr -> term
2061
^
arith_expr -> term
2061
<<
arith_expr -> term
2061
&
arith_expr -> term
2061
==
arith_expr -> term
2061
is
arith_expr -> term
2061
!=
arith_expr -> term
2061
]
arith_expr -> term
2061
>
arith_expr -> term
2061
and
arith_expr -> term
2061
<
arith_expr -> term
2061
or
arith_expr -> term
2061
>=
arith_expr -> term
2061
>>
arith_expr -> term
2061
in
arith_expr -> term
2062
**
2347
2062
or
power -> atom_expr
2062
for
power -> atom_expr
2062
*
power -> atom_expr
2062
>=
power -> atom_expr
2062
^
power -> atom_expr
2062
in
power -> atom_expr
2062
!=
power -> atom_expr
2062
if
power -> atom_expr
2062
@
power -> atom_expr
2062
-
power -> atom_expr
2062
and
power -> atom_expr
2062
not
power -> atom_expr
2062
==
power -> atom_expr
2062
<
power -> atom_expr
2062
&
power -> atom_expr
2062
|
power -> atom_expr
2062
//
power -> atom_expr
2062
>
power -> atom_expr
2062
%
power -> atom_expr
2062
/
power -> atom_expr
2062
is
power -> atom_expr
2062
<<
power -> atom_expr
2062
>>
power -> atom_expr
2062
]
power -> atom_expr
2062
+
power -> atom_expr
2062
<=
power -> atom_expr
2063
<<
atom -> NUMBER
2063
-
atom -> NUMBER
2063
^
atom -> NUMBER
2063
or
atom -> NUMBER
2063
]
atom -> NUMBER
2063
==
atom -> NUMBER
2063
!=
atom -> NUMBER
2063
/
atom -> NUMBER
2063
and
atom -> NUMBER
2063
%
atom -> NUMBER
2063
>=
atom -> NUMBER
2063
@
atom -> NUMBER
2063
|
atom -> NUMBER
2063
[
atom -> NUMBER
2063
//
atom -> NUMBER
2063
.
atom -> NUMBER
2063
not
atom -> NUMBER
2063
for
atom -> NUMBER
2063
<
atom -> NUMBER
2063
>>
atom -> NUMBER
2063
if
atom -> NUMBER
2063
<=
atom -> NUMBER
2063
>
atom -> NUMBER
2063
&
atom -> NUMBER
2063
is
atom -> NUMBER
2063
**
atom -> NUMBER
2063
in
atom -> NUMBER
2063
+
atom -> NUMBER
2063
(
atom -> NUMBER
2063
*
atom -> NUMBER
2064
not
xor_expr -> and_expr
2064
^
2348
2064
if
xor_expr -> and_expr
2064
|
xor_expr -> and_expr
2064
>
xor_expr -> and_expr
2064
<
xor_expr -> and_expr
2064
for
xor_expr -> and_expr
2064
]
xor_expr -> and_expr
2064
or
xor_expr -> and_expr
2064
>=
xor_expr -> and_expr
2064
in
xor_expr -> and_expr
2064
and
xor_expr -> and_expr
2064
is
xor_expr -> and_expr
2064
==
xor_expr -> and_expr
2064
!=
xor_expr -> and_expr
2064
<=
xor_expr -> and_expr
2065
}
2349
2066
~
186
2066
factor
187
2066
STRING
188
2066
shift_expr
189
2066
test_list_comp
2350
2066
arith_expr
191
2066
term
192
2066
atom_expr
193
2066
]
2351
2066
test
195
2066
NUMBER
196
2066
and_expr
197
2066
{
198
2066
[
199
2066
-
200
2066
None
201
2066
(
202
2066
atom
203
2066
+
204
2066
NAME
205
2066
power
206
2066
True
207
2066
comparison
208
2066
xor_expr
209
2066
lambdef
210
2066
False
211
2066
not_test
212
2066
or_test
213
2066
and_test
214
2066
lambda
215
2066
not
216
2066
expr
217
2066
test_list
218
2067
~
2057
2067
STRING
2059
2067
atom_expr
2062
2067
NUMBER
2063
2067
factor
2352
2067
{
2065
2067
[
2066
2067
None
2068
2067
-
2067
2067
(
2069
2067
atom
2071
2067
+
2072
2067
NAME
2073
2067
power
2074
2067
True
2075
2067
False
2078
2068
not
atom -> None
2068
or
atom -> None
2068
==
atom -> None
2068
*
atom -> None
2068
for
atom -> None
2068
-
atom -> None
2068
^
atom -> None
2068
>>
atom -> None
2068
if
atom -> None
2068
<<
atom -> None
2068
and
atom -> None
2068
|
atom -> None
2068
&
atom -> None
2068
!=
atom -> None
2068
@
atom -> None
2068
.
atom -> None
2068
/
atom -> None
2068
%
atom -> None
2068
>
atom -> None
2068
is
atom -> None
2068
]
atom -> None
2068
<
atom -> None
2068
(
atom -> None
2068
**
atom -> None
2068
//
atom -> None
2068
in
atom -> None
2068
<=
atom -> None
2068
>=
atom -> None
2068
+
atom -> None
2068
[
atom -> None
2069
~
92
2069
factor
93
2069
STRING
94
2069
shift_expr
95
2069
arith_expr
96
2069
term
97
2069
NUMBER
98
2069
and_expr
99
2069
{
100
2069
atom_expr
101
2069
[
102
2069
-
103
2069
None
105
2069
(
106
2069
atom
107
2069
)
2353
2069
+
109
2069
NAME
110
2069
test_list_comp
2354
2069
power
111
2069
test_list
112
2069
True
113
2069
comparison
114
2069
xor_expr
115
2069
lambdef
116
2069
False
117
2069
not_test
118
2069
or_test
119
2069
test
120
2069
lambda
121
2069
and_test
122
2069
not
123
2069
expr
124
2070
>>
2355
2070
^
shift_expr -> arith_expr
2070
<<
2356
2070
or
shift_expr -> arith_expr
2070
|
shift_expr -> arith_expr
2070
<=
shift_expr -> arith_expr
2070
for
shift_expr -> arith_expr
2070
is
shift_expr -> arith_expr
2070
<
shift_expr -> arith_expr
2070
if
shift_expr -> arith_expr
2070
not
shift_expr -> arith_expr
2070
in
shift_expr -> arith_expr
2070
and
shift_expr -> arith_expr
2070
>=
shift_expr -> arith_expr
2070
==
shift_expr -> arith_expr
2070
]
shift_expr -> arith_expr
2070
!=
shift_expr -> arith_expr
2070
>
shift_expr -> arith_expr
2070
&
shift_expr -> arith_expr
2071
[
2357
2071
(
2358
2071
.
2359
2071
//
trailer_expr -> 
2071
trailer
2360
2071
<<
trailer_expr -> 
2071
trailer_expr
2361
2071
*
trailer_expr -> 
2071
in
trailer_expr -> 
2071
&
trailer_expr -> 
2071
and
trailer_expr -> 
2071
<=
trailer_expr -> 
2071
|
trailer_expr -> 
2071
or
trailer_expr -> 
2071
>=
trailer_expr -> 
2071
for
trailer_expr -> 
2071
+
trailer_expr -> 
2071
**
trailer_expr -> 
2071
>>
trailer_expr -> 
2071
!=
trailer_expr -> 
2071
-
trailer_expr -> 
2071
/
trailer_expr -> 
2071
]
trailer_expr -> 
2071
%
trailer_expr -> 
2071
is
trailer_expr -> 
2071
<
trailer_expr -> 
2071
if
trailer_expr -> 
2071
>
trailer_expr -> 
2071
^
trailer_expr -> 
2071
==
trailer_expr -> 
2071
@
trailer_expr -> 
2071
not
trailer_expr -> 
2072
~
2057
2072
STRING
2059
2072
atom_expr
2062
2072
NUMBER
2063
2072
{
2065
2072
factor
2362
2072
[
2066
2072
None
2068
2072
-
2067
2072
(
2069
2072
atom
2071
2072
+
2072
2072
NAME
2073
2072
power
2074
2072
True
2075
2072
False
2078
2073
<=
atom -> NAME
2073
@
atom -> NAME
2073
>>
atom -> NAME
2073
==
atom -> NAME
2073
>
atom -> NAME
2073
*
atom -> NAME
2073
-
atom -> NAME
2073
&
atom -> NAME
2073
is
atom -> NAME
2073
.
atom -> NAME
2073
or
atom -> NAME
2073
in
atom -> NAME
2073
for
atom -> NAME
2073
<<
atom -> NAME
2073
+
atom -> NAME
2073
if
atom -> NAME
2073
|
atom -> NAME
2073
and
atom -> NAME
2073
^
atom -> NAME
2073
[
atom -> NAME
2073
/
atom -> NAME
2073
not
atom -> NAME
2073
!=
atom -> NAME
2073
%
atom -> NAME
2073
]
atom -> NAME
2073
<
atom -> NAME
2073
>=
atom -> NAME
2073
**
atom -> NAME
2073
(
atom -> NAME
2073
//
atom -> NAME
2074
if
factor -> power
2074
is
factor -> power
2074
%
factor -> power
2074
]
factor -> power
2074
==
factor -> power
2074
>=
factor -> power
2074
or
factor -> power
2074
and
factor -> power
2074
/
factor -> power
2074
<
factor -> power
2074
+
factor -> power
2074
//
factor -> power
2074
for
factor -> power
2074
@
factor -> power
2074
in
factor -> power
2074
<=
factor -> power
2074
&
factor -> power
2074
!=
factor -> power
2074
<<
factor -> power
2074
|
factor -> power
2074
>
factor -> power
2074
*
factor -> power
2074
^
factor -> power
2074
-
factor -> power
2074
not
factor -> power
2074
>>
factor -> power
2075
for
atom -> True
2075
]
atom -> True
2075
>
atom -> True
2075
|
atom -> True
2075
-
atom -> True
2075
==
atom -> True
2075
<<
atom -> True
2075
if
atom -> True
2075
%
atom -> True
2075
/
atom -> True
2075
[
atom -> True
2075
*
atom -> True
2075
<=
atom -> True
2075
<
atom -> True
2075
&
atom -> True
2075
+
atom -> True
2075
**
atom -> True
2075
!=
atom -> True
2075
>>
atom -> True
2075
//
atom -> True
2075
and
atom -> True
2075
^
atom -> True
2075
is
atom -> True
2075
or
atom -> True
2075
.
atom -> True
2075
(
atom -> True
2075
>=
atom -> True
2075
@
atom -> True
2075
not
atom -> True
2075
in
atom -> True
2076
for
not_test -> comparison
2076
or
not_test -> comparison
2076
if
not_test -> comparison
2076
and
not_test -> comparison
2076
]
not_test -> comparison
2077
not
expr -> xor_expr
2077
or
expr -> xor_expr
2077
|
2363
2077
==
expr -> xor_expr
2077
in
expr -> xor_expr
2077
if
expr -> xor_expr
2077
<=
expr -> xor_expr
2077
]
expr -> xor_expr
2077
is
expr -> xor_expr
2077
<
expr -> xor_expr
2077
>=
expr -> xor_expr
2077
for
expr -> xor_expr
2077
>
expr -> xor_expr
2077
and
expr -> xor_expr
2077
!=
expr -> xor_expr
2078
<=
atom -> False
2078
*
atom -> False
2078
]
atom -> False
2078
not
atom -> False
2078
!=
atom -> False
2078
for
atom -> False
2078
@
atom -> False
2078
and
atom -> False
2078
if
atom -> False
2078
<<
atom -> False
2078
>
atom -> False
2078
+
atom -> False
2078
/
atom -> False
2078
==
atom -> False
2078
&
atom -> False
2078
^
atom -> False
2078
in
atom -> False
2078
[
atom -> False
2078
is
atom -> False
2078
%
atom -> False
2078
>=
atom -> False
2078
//
atom -> False
2078
(
atom -> False
2078
|
atom -> False
2078
<
atom -> False
2078
.
atom -> False
2078
or
atom -> False
2078
**
atom -> False
2078
>>
atom -> False
2078
-
atom -> False
2079
or
and_test -> not_test
2079
and
2364
2079
if
and_test -> not_test
2079
]
and_test -> not_test
2079
for
and_test -> not_test
2080
or
2365
2080
if
or_test -> and_test
2080
]
or_test -> and_test
2080
for
or_test -> and_test
2081
comp_iter
2366
2081
]
comp_iter -> 
2081
comp_for
2367
2081
for
632
2081
comp_if
2368
2081
if
2369
2082
~
2057
2082
factor
2058
2082
STRING
2059
2082
shift_expr
2060
2082
term
2061
2082
atom_expr
2062
2082
NUMBER
2063
2082
and_expr
2064
2082
{
2065
2082
[
2066
2082
-
2067
2082
None
2068
2082
(
2069
2082
arith_expr
2070
2082
atom
2071
2082
+
2072
2082
NAME
2073
2082
power
2074
2082
True
2075
2082
comparison
2076
2082
xor_expr
2077
2082
False
2078
2082
not_test
2370
2082
not
2082
2082
expr
2083
2083
!=
125
2083
is
126
2083
>=
127
2083
in
128
2083
<
129
2083
==
131
2083
comp_op
2371
2083
<=
132
2083
not
133
2083
>
134
2083
for
comparison -> expr
2083
or
comparison -> expr
2083
if
comparison -> expr
2083
and
comparison -> expr
2083
]
comparison -> expr
2084
<=
term -> factor / term
2084
!=
term -> factor / term
2084
and
term -> factor / term
2084
or
term -> factor / term
2084
|
term -> factor / term
2084
^
term -> factor / term
2084
>>
term -> factor / term
2084
==
term -> factor / term
2084
>
term -> factor / term
2084
if
term -> factor / term
2084
&
term -> factor / term
2084
]
term -> factor / term
2084
<<
term -> factor / term
2084
+
term -> factor / term
2084
-
term -> factor / term
2084
not
term -> factor / term
2084
in
term -> factor / term
2084
<
term -> factor / term
2084
is
term -> factor / term
2084
>=
term -> factor / term
2084
,
term -> factor / term
2085
is
term -> factor @ term
2085
and
term -> factor @ term
2085
>
term -> factor @ term
2085
not
term -> factor @ term
2085
in
term -> factor @ term
2085
==
term -> factor @ term
2085
<
term -> factor @ term
2085
,
term -> factor @ term
2085
]
term -> factor @ term
2085
or
term -> factor @ term
2085
!=
term -> factor @ term
2085
<<
term -> factor @ term
2085
<=
term -> factor @ term
2085
if
term -> factor @ term
2085
|
term -> factor @ term
2085
+
term -> factor @ term
2085
-
term -> factor @ term
2085
&
term -> factor @ term
2085
>=
term -> factor @ term
2085
>>
term -> factor @ term
2085
^
term -> factor @ term
2086
&
term -> factor * term
2086
-
term -> factor * term
2086
in
term -> factor * term
2086
]
term -> factor * term
2086
or
term -> factor * term
2086
<=
term -> factor * term
2086
,
term -> factor * term
2086
|
term -> factor * term
2086
and
term -> factor * term
2086
not
term -> factor * term
2086
<<
term -> factor * term
2086
==
term -> factor * term
2086
if
term -> factor * term
2086
>
term -> factor * term
2086
>>
term -> factor * term
2086
<
term -> factor * term
2086
!=
term -> factor * term
2086
>=
term -> factor * term
2086
^
term -> factor * term
2086
+
term -> factor * term
2086
is
term -> factor * term
2087
>
term -> factor % term
2087
!=
term -> factor % term
2087
&
term -> factor % term
2087
>=
term -> factor % term
2087
or
term -> factor % term
2087
==
term -> factor % term
2087
^
term -> factor % term
2087
in
term -> factor % term
2087
,
term -> factor % term
2087
|
term -> factor % term
2087
and
term -> factor % term
2087
if
term -> factor % term
2087
not
term -> factor % term
2087
is
term -> factor % term
2087
<
term -> factor % term
2087
>>
term -> factor % term
2087
-
term -> factor % term
2087
<=
term -> factor % term
2087
]
term -> factor % term
2087
<<
term -> factor % term
2087
+
term -> factor % term
2088
+
term -> factor // term
2088
==
term -> factor // term
2088
]
term -> factor // term
2088
<<
term -> factor // term
2088
<
term -> factor // term
2088
if
term -> factor // term
2088
in
term -> factor // term
2088
!=
term -> factor // term
2088
>
term -> factor // term
2088
not
term -> factor // term
2088
>=
term -> factor // term
2088
and
term -> factor // term
2088
is
term -> factor // term
2088
-
term -> factor // term
2088
&
term -> factor // term
2088
|
term -> factor // term
2088
,
term -> factor // term
2088
^
term -> factor // term
2088
<=
term -> factor // term
2088
or
term -> factor // term
2088
>>
term -> factor // term
2089
|
and_expr -> shift_expr & and_expr
2089
!=
and_expr -> shift_expr & and_expr
2089
,
and_expr -> shift_expr & and_expr
2089
>=
and_expr -> shift_expr & and_expr
2089
not
and_expr -> shift_expr & and_expr
2089
and
and_expr -> shift_expr & and_expr
2089
is
and_expr -> shift_expr & and_expr
2089
in
and_expr -> shift_expr & and_expr
2089
or
and_expr -> shift_expr & and_expr
2089
==
and_expr -> shift_expr & and_expr
2089
^
and_expr -> shift_expr & and_expr
2089
<
and_expr -> shift_expr & and_expr
2089
>
and_expr -> shift_expr & and_expr
2089
]
and_expr -> shift_expr & and_expr
2089
if
and_expr -> shift_expr & and_expr
2089
<=
and_expr -> shift_expr & and_expr
2090
>=
shift_expr -> arith_expr >> shift_expr
2090
not
shift_expr -> arith_expr >> shift_expr
2090
>
shift_expr -> arith_expr >> shift_expr
2090
^
shift_expr -> arith_expr >> shift_expr
2090
,
shift_expr -> arith_expr >> shift_expr
2090
is
shift_expr -> arith_expr >> shift_expr
2090
&
shift_expr -> arith_expr >> shift_expr
2090
!=
shift_expr -> arith_expr >> shift_expr
2090
<=
shift_expr -> arith_expr >> shift_expr
2090
and
shift_expr -> arith_expr >> shift_expr
2090
if
shift_expr -> arith_expr >> shift_expr
2090
==
shift_expr -> arith_expr >> shift_expr
2090
or
shift_expr -> arith_expr >> shift_expr
2090
in
shift_expr -> arith_expr >> shift_expr
2090
|
shift_expr -> arith_expr >> shift_expr
2090
]
shift_expr -> arith_expr >> shift_expr
2090
<
shift_expr -> arith_expr >> shift_expr
2091
,
shift_expr -> arith_expr << shift_expr
2091
>=
shift_expr -> arith_expr << shift_expr
2091
in
shift_expr -> arith_expr << shift_expr
2091
>
shift_expr -> arith_expr << shift_expr
2091
|
shift_expr -> arith_expr << shift_expr
2091
!=
shift_expr -> arith_expr << shift_expr
2091
<=
shift_expr -> arith_expr << shift_expr
2091
]
shift_expr -> arith_expr << shift_expr
2091
&
shift_expr -> arith_expr << shift_expr
2091
not
shift_expr -> arith_expr << shift_expr
2091
^
shift_expr -> arith_expr << shift_expr
2091
<
shift_expr -> arith_expr << shift_expr
2091
==
shift_expr -> arith_expr << shift_expr
2091
if
shift_expr -> arith_expr << shift_expr
2091
or
shift_expr -> arith_expr << shift_expr
2091
is
shift_expr -> arith_expr << shift_expr
2091
and
shift_expr -> arith_expr << shift_expr
2092
>>
arith_expr -> term + arith_expr
2092
^
arith_expr -> term + arith_expr
2092
<
arith_expr -> term + arith_expr
2092
|
arith_expr -> term + arith_expr
2092
and
arith_expr -> term + arith_expr
2092
!=
arith_expr -> term + arith_expr
2092
or
arith_expr -> term + arith_expr
2092
not
arith_expr -> term + arith_expr
2092
<=
arith_expr -> term + arith_expr
2092
>
arith_expr -> term + arith_expr
2092
,
arith_expr -> term + arith_expr
2092
if
arith_expr -> term + arith_expr
2092
is
arith_expr -> term + arith_expr
2092
]
arith_expr -> term + arith_expr
2092
==
arith_expr -> term + arith_expr
2092
&
arith_expr -> term + arith_expr
2092
>=
arith_expr -> term + arith_expr
2092
in
arith_expr -> term + arith_expr
2092
<<
arith_expr -> term + arith_expr
2093
==
arith_expr -> term - arith_expr
2093
is
arith_expr -> term - arith_expr
2093
<=
arith_expr -> term - arith_expr
2093
not
arith_expr -> term - arith_expr
2093
<<
arith_expr -> term - arith_expr
2093
&
arith_expr -> term - arith_expr
2093
|
arith_expr -> term - arith_expr
2093
and
arith_expr -> term - arith_expr
2093
or
arith_expr -> term - arith_expr
2093
,
arith_expr -> term - arith_expr
2093
]
arith_expr -> term - arith_expr
2093
>>
arith_expr -> term - arith_expr
2093
if
arith_expr -> term - arith_expr
2093
>=
arith_expr -> term - arith_expr
2093
<
arith_expr -> term - arith_expr
2093
^
arith_expr -> term - arith_expr
2093
>
arith_expr -> term - arith_expr
2093
!=
arith_expr -> term - arith_expr
2093
in
arith_expr -> term - arith_expr
2094
@
power -> atom_expr ** factor
2094
==
power -> atom_expr ** factor
2094
&
power -> atom_expr ** factor
2094
-
power -> atom_expr ** factor
2094
>
power -> atom_expr ** factor
2094
and
power -> atom_expr ** factor
2094
|
power -> atom_expr ** factor
2094
<=
power -> atom_expr ** factor
2094
%
power -> atom_expr ** factor
2094
or
power -> atom_expr ** factor
2094
*
power -> atom_expr ** factor
2094
not
power -> atom_expr ** factor
2094
]
power -> atom_expr ** factor
2094
in
power -> atom_expr ** factor
2094
<<
power -> atom_expr ** factor
2094
//
power -> atom_expr ** factor
2094
/
power -> atom_expr ** factor
2094
>>
power -> atom_expr ** factor
2094
,
power -> atom_expr ** factor
2094
^
power -> atom_expr ** factor
2094
if
power -> atom_expr ** factor
2094
!=
power -> atom_expr ** factor
2094
is
power -> atom_expr ** factor
2094
<
power -> atom_expr ** factor
2094
+
power -> atom_expr ** factor
2094
>=
power -> atom_expr ** factor
2095
/
atom -> [ test_list_comp ]
2095
,
atom -> [ test_list_comp ]
2095
*
atom -> [ test_list_comp ]
2095
or
atom -> [ test_list_comp ]
2095
|
atom -> [ test_list_comp ]
2095
==
atom -> [ test_list_comp ]
2095
is
atom -> [ test_list_comp ]
2095
-
atom -> [ test_list_comp ]
2095
**
atom -> [ test_list_comp ]
2095
&
atom -> [ test_list_comp ]
2095
(
atom -> [ test_list_comp ]
2095
<
atom -> [ test_list_comp ]
2095
@
atom -> [ test_list_comp ]
2095
//
atom -> [ test_list_comp ]
2095
>
atom -> [ test_list_comp ]
2095
if
atom -> [ test_list_comp ]
2095
in
atom -> [ test_list_comp ]
2095
^
atom -> [ test_list_comp ]
2095
<<
atom -> [ test_list_comp ]
2095
[
atom -> [ test_list_comp ]
2095
!=
atom -> [ test_list_comp ]
2095
<=
atom -> [ test_list_comp ]
2095
and
atom -> [ test_list_comp ]
2095
%
atom -> [ test_list_comp ]
2095
not
atom -> [ test_list_comp ]
2095
+
atom -> [ test_list_comp ]
2095
>=
atom -> [ test_list_comp ]
2095
>>
atom -> [ test_list_comp ]
2095
.
atom -> [ test_list_comp ]
2095
]
atom -> [ test_list_comp ]
2096
@
atom -> ( test_list_comp )
2096
>>
atom -> ( test_list_comp )
2096
<<
atom -> ( test_list_comp )
2096
==
atom -> ( test_list_comp )
2096
is
atom -> ( test_list_comp )
2096
or
atom -> ( test_list_comp )
2096
<=
atom -> ( test_list_comp )
2096
[
atom -> ( test_list_comp )
2096
if
atom -> ( test_list_comp )
2096
^
atom -> ( test_list_comp )
2096
<
atom -> ( test_list_comp )
2096
and
atom -> ( test_list_comp )
2096
.
atom -> ( test_list_comp )
2096
+
atom -> ( test_list_comp )
2096
&
atom -> ( test_list_comp )
2096
!=
atom -> ( test_list_comp )
2096
in
atom -> ( test_list_comp )
2096
]
atom -> ( test_list_comp )
2096
**
atom -> ( test_list_comp )
2096
not
atom -> ( test_list_comp )
2096
-
atom -> ( test_list_comp )
2096
(
atom -> ( test_list_comp )
2096
*
atom -> ( test_list_comp )
2096
|
atom -> ( test_list_comp )
2096
//
atom -> ( test_list_comp )
2096
>
atom -> ( test_list_comp )
2096
>=
atom -> ( test_list_comp )
2096
,
atom -> ( test_list_comp )
2096
%
atom -> ( test_list_comp )
2096
/
atom -> ( test_list_comp )
2097
]
2372
2098
,
trailer -> ( )
2098
/
trailer -> ( )
2098
[
trailer -> ( )
2098
(
trailer -> ( )
2098
|
trailer -> ( )
2098
<=
trailer -> ( )
2098
in
trailer -> ( )
2098
not
trailer -> ( )
2098
>>
trailer -> ( )
2098
^
trailer -> ( )
2098
.
trailer -> ( )
2098
**
trailer -> ( )
2098
if
trailer -> ( )
2098
+
trailer -> ( )
2098
is
trailer -> ( )
2098
<
trailer -> ( )
2098
>
trailer -> ( )
2098
==
trailer -> ( )
2098
//
trailer -> ( )
2098
<<
trailer -> ( )
2098
*
trailer -> ( )
2098
-
trailer -> ( )
2098
]
trailer -> ( )
2098
>=
trailer -> ( )
2098
%
trailer -> ( )
2098
and
trailer -> ( )
2098
@
trailer -> ( )
2098
&
trailer -> ( )
2098
!=
trailer -> ( )
2098
or
trailer -> ( )
2099
)
2373
2100
is
trailer_expr -> trailer trailer_expr
2100
!=
trailer_expr -> trailer trailer_expr
2100
<<
trailer_expr -> trailer trailer_expr
2100
and
trailer_expr -> trailer trailer_expr
2100
&
trailer_expr -> trailer trailer_expr
2100
//
trailer_expr -> trailer trailer_expr
2100
|
trailer_expr -> trailer trailer_expr
2100
==
trailer_expr -> trailer trailer_expr
2100
<
trailer_expr -> trailer trailer_expr
2100
or
trailer_expr -> trailer trailer_expr
2100
^
trailer_expr -> trailer trailer_expr
2100
<=
trailer_expr -> trailer trailer_expr
2100
@
trailer_expr -> trailer trailer_expr
2100
not
trailer_expr -> trailer trailer_expr
2100
in
trailer_expr -> trailer trailer_expr
2100
*
trailer_expr -> trailer trailer_expr
2100
+
trailer_expr -> trailer trailer_expr
2100
if
trailer_expr -> trailer trailer_expr
2100
**
trailer_expr -> trailer trailer_expr
2100
>>
trailer_expr -> trailer trailer_expr
2100
>=
trailer_expr -> trailer trailer_expr
2100
%
trailer_expr -> trailer trailer_expr
2100
]
trailer_expr -> trailer trailer_expr
2100
-
trailer_expr -> trailer trailer_expr
2100
>
trailer_expr -> trailer trailer_expr
2100
/
trailer_expr -> trailer trailer_expr
2100
,
trailer_expr -> trailer trailer_expr
2101
<=
trailer -> . NAME
2101
if
trailer -> . NAME
2101
<
trailer -> . NAME
2101
%
trailer -> . NAME
2101
.
trailer -> . NAME
2101
//
trailer -> . NAME
2101
]
trailer -> . NAME
2101
|
trailer -> . NAME
2101
==
trailer -> . NAME
2101
>=
trailer -> . NAME
2101
[
trailer -> . NAME
2101
^
trailer -> . NAME
2101
<<
trailer -> . NAME
2101
in
trailer -> . NAME
2101
&
trailer -> . NAME
2101
or
trailer -> . NAME
2101
*
trailer -> . NAME
2101
(
trailer -> . NAME
2101
and
trailer -> . NAME
2101
-
trailer -> . NAME
2101
+
trailer -> . NAME
2101
!=
trailer -> . NAME
2101
not
trailer -> . NAME
2101
**
trailer -> . NAME
2101
>>
trailer -> . NAME
2101
@
trailer -> . NAME
2101
/
trailer -> . NAME
2101
is
trailer -> . NAME
2101
>
trailer -> . NAME
2101
,
trailer -> . NAME
2102
==
xor_expr -> and_expr ^ xor_expr
2102
!=
xor_expr -> and_expr ^ xor_expr
2102
>
xor_expr -> and_expr ^ xor_expr
2102
not
xor_expr -> and_expr ^ xor_expr
2102
if
xor_expr -> and_expr ^ xor_expr
2102
is
xor_expr -> and_expr ^ xor_expr
2102
<=
xor_expr -> and_expr ^ xor_expr
2102
,
xor_expr -> and_expr ^ xor_expr
2102
|
xor_expr -> and_expr ^ xor_expr
2102
>=
xor_expr -> and_expr ^ xor_expr
2102
and
xor_expr -> and_expr ^ xor_expr
2102
]
xor_expr -> and_expr ^ xor_expr
2102
in
xor_expr -> and_expr ^ xor_expr
2102
<
xor_expr -> and_expr ^ xor_expr
2102
or
xor_expr -> and_expr ^ xor_expr
2103
and
expr -> xor_expr | expr
2103
in
expr -> xor_expr | expr
2103
>=
expr -> xor_expr | expr
2103
!=
expr -> xor_expr | expr
2103
is
expr -> xor_expr | expr
2103
==
expr -> xor_expr | expr
2103
or
expr -> xor_expr | expr
2103
<
expr -> xor_expr | expr
2103
if
expr -> xor_expr | expr
2103
,
expr -> xor_expr | expr
2103
not
expr -> xor_expr | expr
2103
]
expr -> xor_expr | expr
2103
<=
expr -> xor_expr | expr
2103
>
expr -> xor_expr | expr
2104
if
and_test -> not_test and and_test
2104
,
and_test -> not_test and and_test
2104
]
and_test -> not_test and and_test
2104
or
and_test -> not_test and and_test
2105
if
or_test -> and_test or or_test
2105
,
or_test -> and_test or or_test
2105
]
or_test -> and_test or or_test
2106
else
2374
2107
or
comparison -> expr comp_op comparison
2107
,
comparison -> expr comp_op comparison
2107
if
comparison -> expr comp_op comparison
2107
and
comparison -> expr comp_op comparison
2107
]
comparison -> expr comp_op comparison
2108
,
lambdef -> lambda : test
2108
]
lambdef -> lambda : test
2109
~
1154
2109
factor
1155
2109
STRING
1156
2109
shift_expr
1157
2109
arith_expr
1158
2109
term
1159
2109
atom_expr
1160
2109
NUMBER
1161
2109
{
1163
2109
[
1164
2109
-
1165
2109
None
1166
2109
(
1167
2109
atom
1169
2109
+
1170
2109
and_expr
1171
2109
NAME
1172
2109
power
1173
2109
True
1174
2109
comparison
1175
2109
xor_expr
1176
2109
False
1177
2109
not_test
1178
2109
test
2375
2109
and_test
1179
2109
or_test
1180
2109
not
1181
2109
expr
1182
2109
lambda
1183
2109
lambdef
1184
2110
for
test -> or_test if or_test else test
2110
]
test -> or_test if or_test else test
2110
,
test -> or_test if or_test else test
2111
else
2376
2111
(
for_stmt -> for expr_list in test_list : suite
2111
None
for_stmt -> for expr_list in test_list : suite
2111
del
for_stmt -> for expr_list in test_list : suite
2111
[
for_stmt -> for expr_list in test_list : suite
2111
not
for_stmt -> for expr_list in test_list : suite
2111
@
for_stmt -> for expr_list in test_list : suite
2111
conf
for_stmt -> for expr_list in test_list : suite
2111
assert
for_stmt -> for expr_list in test_list : suite
2111
endsim
for_stmt -> for expr_list in test_list : suite
2111
~
for_stmt -> for expr_list in test_list : suite
2111
+
for_stmt -> for expr_list in test_list : suite
2111
with
for_stmt -> for expr_list in test_list : suite
2111
continue
for_stmt -> for expr_list in test_list : suite
2111
global
for_stmt -> for expr_list in test_list : suite
2111
NUMBER
for_stmt -> for expr_list in test_list : suite
2111
nonlocal
for_stmt -> for expr_list in test_list : suite
2111
if
for_stmt -> for expr_list in test_list : suite
2111
NEWLINE
for_stmt -> for expr_list in test_list : suite
2111
{
for_stmt -> for expr_list in test_list : suite
2111
True
for_stmt -> for expr_list in test_list : suite
2111
return
for_stmt -> for expr_list in test_list : suite
2111
False
for_stmt -> for expr_list in test_list : suite
2111
class
for_stmt -> for expr_list in test_list : suite
2111
begsim
for_stmt -> for expr_list in test_list : suite
2111
yield
for_stmt -> for expr_list in test_list : suite
2111
def
for_stmt -> for expr_list in test_list : suite
2111
resetstats
for_stmt -> for expr_list in test_list : suite
2111
STRING
for_stmt -> for expr_list in test_list : suite
2111
lambda
for_stmt -> for expr_list in test_list : suite
2111
break
for_stmt -> for expr_list in test_list : suite
2111
for
for_stmt -> for expr_list in test_list : suite
2111
$
for_stmt -> for expr_list in test_list : suite
2111
while
for_stmt -> for expr_list in test_list : suite
2111
raise
for_stmt -> for expr_list in test_list : suite
2111
pass
for_stmt -> for expr_list in test_list : suite
2111
-
for_stmt -> for expr_list in test_list : suite
2111
NAME
for_stmt -> for expr_list in test_list : suite
2111
try
for_stmt -> for expr_list in test_list : suite
2112
<=
term -> factor / term
2112
!=
term -> factor / term
2112
and
term -> factor / term
2112
or
term -> factor / term
2112
|
term -> factor / term
2112
^
term -> factor / term
2112
>>
term -> factor / term
2112
==
term -> factor / term
2112
>
term -> factor / term
2112
if
term -> factor / term
2112
:
term -> factor / term
2112
&
term -> factor / term
2112
<<
term -> factor / term
2112
+
term -> factor / term
2112
-
term -> factor / term
2112
not
term -> factor / term
2112
in
term -> factor / term
2112
<
term -> factor / term
2112
is
term -> factor / term
2112
>=
term -> factor / term
2112
,
term -> factor / term
2113
is
term -> factor @ term
2113
and
term -> factor @ term
2113
>
term -> factor @ term
2113
not
term -> factor @ term
2113
in
term -> factor @ term
2113
==
term -> factor @ term
2113
<
term -> factor @ term
2113
,
term -> factor @ term
2113
or
term -> factor @ term
2113
!=
term -> factor @ term
2113
<<
term -> factor @ term
2113
<=
term -> factor @ term
2113
if
term -> factor @ term
2113
|
term -> factor @ term
2113
+
term -> factor @ term
2113
-
term -> factor @ term
2113
&
term -> factor @ term
2113
>=
term -> factor @ term
2113
:
term -> factor @ term
2113
>>
term -> factor @ term
2113
^
term -> factor @ term
2114
>
term -> factor % term
2114
!=
term -> factor % term
2114
&
term -> factor % term
2114
>=
term -> factor % term
2114
or
term -> factor % term
2114
==
term -> factor % term
2114
^
term -> factor % term
2114
in
term -> factor % term
2114
,
term -> factor % term
2114
|
term -> factor % term
2114
and
term -> factor % term
2114
if
term -> factor % term
2114
not
term -> factor % term
2114
is
term -> factor % term
2114
<
term -> factor % term
2114
>>
term -> factor % term
2114
-
term -> factor % term
2114
<=
term -> factor % term
2114
<<
term -> factor % term
2114
+
term -> factor % term
2114
:
term -> factor % term
2115
&
term -> factor * term
2115
-
term -> factor * term
2115
:
term -> factor * term
2115
in
term -> factor * term
2115
or
term -> factor * term
2115
<=
term -> factor * term
2115
,
term -> factor * term
2115
|
term -> factor * term
2115
and
term -> factor * term
2115
not
term -> factor * term
2115
<<
term -> factor * term
2115
==
term -> factor * term
2115
if
term -> factor * term
2115
>
term -> factor * term
2115
>>
term -> factor * term
2115
<
term -> factor * term
2115
!=
term -> factor * term
2115
>=
term -> factor * term
2115
^
term -> factor * term
2115
+
term -> factor * term
2115
is
term -> factor * term
2116
+
term -> factor // term
2116
==
term -> factor // term
2116
<<
term -> factor // term
2116
<
term -> factor // term
2116
if
term -> factor // term
2116
in
term -> factor // term
2116
:
term -> factor // term
2116
!=
term -> factor // term
2116
>
term -> factor // term
2116
not
term -> factor // term
2116
>=
term -> factor // term
2116
and
term -> factor // term
2116
is
term -> factor // term
2116
-
term -> factor // term
2116
&
term -> factor // term
2116
|
term -> factor // term
2116
,
term -> factor // term
2116
^
term -> factor // term
2116
<=
term -> factor // term
2116
or
term -> factor // term
2116
>>
term -> factor // term
2117
|
and_expr -> shift_expr & and_expr
2117
!=
and_expr -> shift_expr & and_expr
2117
,
and_expr -> shift_expr & and_expr
2117
>=
and_expr -> shift_expr & and_expr
2117
not
and_expr -> shift_expr & and_expr
2117
and
and_expr -> shift_expr & and_expr
2117
is
and_expr -> shift_expr & and_expr
2117
in
and_expr -> shift_expr & and_expr
2117
or
and_expr -> shift_expr & and_expr
2117
==
and_expr -> shift_expr & and_expr
2117
^
and_expr -> shift_expr & and_expr
2117
>
and_expr -> shift_expr & and_expr
2117
<
and_expr -> shift_expr & and_expr
2117
if
and_expr -> shift_expr & and_expr
2117
<=
and_expr -> shift_expr & and_expr
2117
:
and_expr -> shift_expr & and_expr
2118
or
comparison -> expr comp_op comparison
2118
,
comparison -> expr comp_op comparison
2118
:
comparison -> expr comp_op comparison
2118
if
comparison -> expr comp_op comparison
2118
and
comparison -> expr comp_op comparison
2119
>=
shift_expr -> arith_expr >> shift_expr
2119
not
shift_expr -> arith_expr >> shift_expr
2119
>
shift_expr -> arith_expr >> shift_expr
2119
^
shift_expr -> arith_expr >> shift_expr
2119
:
shift_expr -> arith_expr >> shift_expr
2119
,
shift_expr -> arith_expr >> shift_expr
2119
is
shift_expr -> arith_expr >> shift_expr
2119
&
shift_expr -> arith_expr >> shift_expr
2119
!=
shift_expr -> arith_expr >> shift_expr
2119
<=
shift_expr -> arith_expr >> shift_expr
2119
and
shift_expr -> arith_expr >> shift_expr
2119
if
shift_expr -> arith_expr >> shift_expr
2119
==
shift_expr -> arith_expr >> shift_expr
2119
or
shift_expr -> arith_expr >> shift_expr
2119
in
shift_expr -> arith_expr >> shift_expr
2119
|
shift_expr -> arith_expr >> shift_expr
2119
<
shift_expr -> arith_expr >> shift_expr
2120
,
shift_expr -> arith_expr << shift_expr
2120
>=
shift_expr -> arith_expr << shift_expr
2120
in
shift_expr -> arith_expr << shift_expr
2120
>
shift_expr -> arith_expr << shift_expr
2120
|
shift_expr -> arith_expr << shift_expr
2120
!=
shift_expr -> arith_expr << shift_expr
2120
:
shift_expr -> arith_expr << shift_expr
2120
<=
shift_expr -> arith_expr << shift_expr
2120
&
shift_expr -> arith_expr << shift_expr
2120
not
shift_expr -> arith_expr << shift_expr
2120
^
shift_expr -> arith_expr << shift_expr
2120
<
shift_expr -> arith_expr << shift_expr
2120
==
shift_expr -> arith_expr << shift_expr
2120
if
shift_expr -> arith_expr << shift_expr
2120
or
shift_expr -> arith_expr << shift_expr
2120
is
shift_expr -> arith_expr << shift_expr
2120
and
shift_expr -> arith_expr << shift_expr
2121
:
arith_expr -> term + arith_expr
2121
>>
arith_expr -> term + arith_expr
2121
^
arith_expr -> term + arith_expr
2121
<
arith_expr -> term + arith_expr
2121
|
arith_expr -> term + arith_expr
2121
and
arith_expr -> term + arith_expr
2121
!=
arith_expr -> term + arith_expr
2121
or
arith_expr -> term + arith_expr
2121
not
arith_expr -> term + arith_expr
2121
<=
arith_expr -> term + arith_expr
2121
>
arith_expr -> term + arith_expr
2121
,
arith_expr -> term + arith_expr
2121
if
arith_expr -> term + arith_expr
2121
is
arith_expr -> term + arith_expr
2121
==
arith_expr -> term + arith_expr
2121
&
arith_expr -> term + arith_expr
2121
>=
arith_expr -> term + arith_expr
2121
in
arith_expr -> term + arith_expr
2121
<<
arith_expr -> term + arith_expr
2122
==
arith_expr -> term - arith_expr
2122
is
arith_expr -> term - arith_expr
2122
<=
arith_expr -> term - arith_expr
2122
not
arith_expr -> term - arith_expr
2122
<<
arith_expr -> term - arith_expr
2122
&
arith_expr -> term - arith_expr
2122
|
arith_expr -> term - arith_expr
2122
and
arith_expr -> term - arith_expr
2122
or
arith_expr -> term - arith_expr
2122
,
arith_expr -> term - arith_expr
2122
:
arith_expr -> term - arith_expr
2122
>>
arith_expr -> term - arith_expr
2122
if
arith_expr -> term - arith_expr
2122
>=
arith_expr -> term - arith_expr
2122
<
arith_expr -> term - arith_expr
2122
^
arith_expr -> term - arith_expr
2122
>
arith_expr -> term - arith_expr
2122
!=
arith_expr -> term - arith_expr
2122
in
arith_expr -> term - arith_expr
2123
@
power -> atom_expr ** factor
2123
==
power -> atom_expr ** factor
2123
&
power -> atom_expr ** factor
2123
-
power -> atom_expr ** factor
2123
>
power -> atom_expr ** factor
2123
and
power -> atom_expr ** factor
2123
|
power -> atom_expr ** factor
2123
<=
power -> atom_expr ** factor
2123
%
power -> atom_expr ** factor
2123
or
power -> atom_expr ** factor
2123
:
power -> atom_expr ** factor
2123
*
power -> atom_expr ** factor
2123
not
power -> atom_expr ** factor
2123
in
power -> atom_expr ** factor
2123
<<
power -> atom_expr ** factor
2123
//
power -> atom_expr ** factor
2123
/
power -> atom_expr ** factor
2123
>>
power -> atom_expr ** factor
2123
,
power -> atom_expr ** factor
2123
^
power -> atom_expr ** factor
2123
if
power -> atom_expr ** factor
2123
!=
power -> atom_expr ** factor
2123
is
power -> atom_expr ** factor
2123
<
power -> atom_expr ** factor
2123
+
power -> atom_expr ** factor
2123
>=
power -> atom_expr ** factor
2124
/
atom -> [ test_list_comp ]
2124
,
atom -> [ test_list_comp ]
2124
*
atom -> [ test_list_comp ]
2124
or
atom -> [ test_list_comp ]
2124
|
atom -> [ test_list_comp ]
2124
==
atom -> [ test_list_comp ]
2124
is
atom -> [ test_list_comp ]
2124
-
atom -> [ test_list_comp ]
2124
**
atom -> [ test_list_comp ]
2124
&
atom -> [ test_list_comp ]
2124
(
atom -> [ test_list_comp ]
2124
<
atom -> [ test_list_comp ]
2124
:
atom -> [ test_list_comp ]
2124
@
atom -> [ test_list_comp ]
2124
//
atom -> [ test_list_comp ]
2124
>
atom -> [ test_list_comp ]
2124
if
atom -> [ test_list_comp ]
2124
in
atom -> [ test_list_comp ]
2124
^
atom -> [ test_list_comp ]
2124
<<
atom -> [ test_list_comp ]
2124
[
atom -> [ test_list_comp ]
2124
!=
atom -> [ test_list_comp ]
2124
<=
atom -> [ test_list_comp ]
2124
and
atom -> [ test_list_comp ]
2124
%
atom -> [ test_list_comp ]
2124
not
atom -> [ test_list_comp ]
2124
+
atom -> [ test_list_comp ]
2124
>=
atom -> [ test_list_comp ]
2124
>>
atom -> [ test_list_comp ]
2124
.
atom -> [ test_list_comp ]
2125
@
atom -> ( test_list_comp )
2125
>>
atom -> ( test_list_comp )
2125
<<
atom -> ( test_list_comp )
2125
:
atom -> ( test_list_comp )
2125
==
atom -> ( test_list_comp )
2125
is
atom -> ( test_list_comp )
2125
or
atom -> ( test_list_comp )
2125
<=
atom -> ( test_list_comp )
2125
[
atom -> ( test_list_comp )
2125
if
atom -> ( test_list_comp )
2125
^
atom -> ( test_list_comp )
2125
<
atom -> ( test_list_comp )
2125
and
atom -> ( test_list_comp )
2125
.
atom -> ( test_list_comp )
2125
+
atom -> ( test_list_comp )
2125
&
atom -> ( test_list_comp )
2125
!=
atom -> ( test_list_comp )
2125
in
atom -> ( test_list_comp )
2125
**
atom -> ( test_list_comp )
2125
not
atom -> ( test_list_comp )
2125
-
atom -> ( test_list_comp )
2125
(
atom -> ( test_list_comp )
2125
*
atom -> ( test_list_comp )
2125
|
atom -> ( test_list_comp )
2125
//
atom -> ( test_list_comp )
2125
>
atom -> ( test_list_comp )
2125
>=
atom -> ( test_list_comp )
2125
,
atom -> ( test_list_comp )
2125
%
atom -> ( test_list_comp )
2125
/
atom -> ( test_list_comp )
2126
]
2377
2127
,
trailer -> ( )
2127
/
trailer -> ( )
2127
[
trailer -> ( )
2127
(
trailer -> ( )
2127
|
trailer -> ( )
2127
<=
trailer -> ( )
2127
in
trailer -> ( )
2127
not
trailer -> ( )
2127
>>
trailer -> ( )
2127
^
trailer -> ( )
2127
.
trailer -> ( )
2127
**
trailer -> ( )
2127
if
trailer -> ( )
2127
+
trailer -> ( )
2127
is
trailer -> ( )
2127
<
trailer -> ( )
2127
>
trailer -> ( )
2127
==
trailer -> ( )
2127
:
trailer -> ( )
2127
<<
trailer -> ( )
2127
//
trailer -> ( )
2127
*
trailer -> ( )
2127
-
trailer -> ( )
2127
>=
trailer -> ( )
2127
%
trailer -> ( )
2127
and
trailer -> ( )
2127
@
trailer -> ( )
2127
&
trailer -> ( )
2127
!=
trailer -> ( )
2127
or
trailer -> ( )
2128
)
2378
2129
:
trailer_expr -> trailer trailer_expr
2129
is
trailer_expr -> trailer trailer_expr
2129
!=
trailer_expr -> trailer trailer_expr
2129
<<
trailer_expr -> trailer trailer_expr
2129
and
trailer_expr -> trailer trailer_expr
2129
&
trailer_expr -> trailer trailer_expr
2129
//
trailer_expr -> trailer trailer_expr
2129
|
trailer_expr -> trailer trailer_expr
2129
==
trailer_expr -> trailer trailer_expr
2129
<
trailer_expr -> trailer trailer_expr
2129
or
trailer_expr -> trailer trailer_expr
2129
^
trailer_expr -> trailer trailer_expr
2129
<=
trailer_expr -> trailer trailer_expr
2129
@
trailer_expr -> trailer trailer_expr
2129
not
trailer_expr -> trailer trailer_expr
2129
in
trailer_expr -> trailer trailer_expr
2129
*
trailer_expr -> trailer trailer_expr
2129
+
trailer_expr -> trailer trailer_expr
2129
if
trailer_expr -> trailer trailer_expr
2129
**
trailer_expr -> trailer trailer_expr
2129
>>
trailer_expr -> trailer trailer_expr
2129
>=
trailer_expr -> trailer trailer_expr
2129
%
trailer_expr -> trailer trailer_expr
2129
-
trailer_expr -> trailer trailer_expr
2129
>
trailer_expr -> trailer trailer_expr
2129
/
trailer_expr -> trailer trailer_expr
2129
,
trailer_expr -> trailer trailer_expr
2130
<=
trailer -> . NAME
2130
if
trailer -> . NAME
2130
<
trailer -> . NAME
2130
%
trailer -> . NAME
2130
.
trailer -> . NAME
2130
//
trailer -> . NAME
2130
:
trailer -> . NAME
2130
|
trailer -> . NAME
2130
==
trailer -> . NAME
2130
>=
trailer -> . NAME
2130
[
trailer -> . NAME
2130
^
trailer -> . NAME
2130
<<
trailer -> . NAME
2130
in
trailer -> . NAME
2130
&
trailer -> . NAME
2130
or
trailer -> . NAME
2130
*
trailer -> . NAME
2130
(
trailer -> . NAME
2130
and
trailer -> . NAME
2130
-
trailer -> . NAME
2130
+
trailer -> . NAME
2130
!=
trailer -> . NAME
2130
not
trailer -> . NAME
2130
**
trailer -> . NAME
2130
>>
trailer -> . NAME
2130
@
trailer -> . NAME
2130
/
trailer -> . NAME
2130
is
trailer -> . NAME
2130
>
trailer -> . NAME
2130
,
trailer -> . NAME
2131
==
xor_expr -> and_expr ^ xor_expr
2131
!=
xor_expr -> and_expr ^ xor_expr
2131
>
xor_expr -> and_expr ^ xor_expr
2131
not
xor_expr -> and_expr ^ xor_expr
2131
:
xor_expr -> and_expr ^ xor_expr
2131
if
xor_expr -> and_expr ^ xor_expr
2131
is
xor_expr -> and_expr ^ xor_expr
2131
<=
xor_expr -> and_expr ^ xor_expr
2131
,
xor_expr -> and_expr ^ xor_expr
2131
|
xor_expr -> and_expr ^ xor_expr
2131
>=
xor_expr -> and_expr ^ xor_expr
2131
and
xor_expr -> and_expr ^ xor_expr
2131
in
xor_expr -> and_expr ^ xor_expr
2131
<
xor_expr -> and_expr ^ xor_expr
2131
or
xor_expr -> and_expr ^ xor_expr
2132
and
expr -> xor_expr | expr
2132
in
expr -> xor_expr | expr
2132
>=
expr -> xor_expr | expr
2132
is
expr -> xor_expr | expr
2132
==
expr -> xor_expr | expr
2132
or
expr -> xor_expr | expr
2132
<
expr -> xor_expr | expr
2132
if
expr -> xor_expr | expr
2132
,
expr -> xor_expr | expr
2132
not
expr -> xor_expr | expr
2132
!=
expr -> xor_expr | expr
2132
<=
expr -> xor_expr | expr
2132
>
expr -> xor_expr | expr
2132
:
expr -> xor_expr | expr
2133
,
lambdef -> lambda : test
2133
:
lambdef -> lambda : test
2134
~
1218
2134
factor
1217
2134
STRING
1220
2134
shift_expr
1219
2134
expr
1221
2134
arith_expr
1222
2134
term
1223
2134
NUMBER
1224
2134
{
1225
2134
atom_expr
1226
2134
[
1227
2134
-
1228
2134
None
1229
2134
+
1230
2134
(
1231
2134
atom
1232
2134
and_expr
1233
2134
NAME
1234
2134
power
1235
2134
True
1236
2134
comparison
1237
2134
xor_expr
1238
2134
lambda
1239
2134
False
1240
2134
not_test
1242
2134
test
2379
2134
or_test
1243
2134
and_test
1244
2134
not
1245
2134
lambdef
1246
2135
:
test_list -> test , test_list
2136
if
and_test -> not_test and and_test
2136
:
and_test -> not_test and and_test
2136
,
and_test -> not_test and and_test
2136
or
and_test -> not_test and and_test
2137
else
2380
2138
if
or_test -> and_test or or_test
2138
,
or_test -> and_test or or_test
2138
:
or_test -> and_test or or_test
2139
def
decorator -> @ dotted_name ( arglist ) NEWLINE
2139
@
decorator -> @ dotted_name ( arglist ) NEWLINE
2139
class
decorator -> @ dotted_name ( arglist ) NEWLINE
2140
>>
term -> factor % term
2140
-
term -> factor % term
2140
^
term -> factor % term
2140
<<
term -> factor % term
2140
+
term -> factor % term
2140
,
term -> factor % term
2140
|
term -> factor % term
2140
:
term -> factor % term
2140
&
term -> factor % term
2141
<<
term -> factor / term
2141
+
term -> factor / term
2141
|
term -> factor / term
2141
^
term -> factor / term
2141
-
term -> factor / term
2141
>>
term -> factor / term
2141
:
term -> factor / term
2141
&
term -> factor / term
2141
,
term -> factor / term
2142
:
term -> factor @ term
2142
,
term -> factor @ term
2142
&
term -> factor @ term
2142
|
term -> factor @ term
2142
>>
term -> factor @ term
2142
+
term -> factor @ term
2142
<<
term -> factor @ term
2142
^
term -> factor @ term
2142
-
term -> factor @ term
2143
^
term -> factor * term
2143
&
term -> factor * term
2143
>>
term -> factor * term
2143
,
term -> factor * term
2143
-
term -> factor * term
2143
|
term -> factor * term
2143
:
term -> factor * term
2143
+
term -> factor * term
2143
<<
term -> factor * term
2144
|
term -> factor // term
2144
:
term -> factor // term
2144
+
term -> factor // term
2144
,
term -> factor // term
2144
^
term -> factor // term
2144
-
term -> factor // term
2144
<<
term -> factor // term
2144
>>
term -> factor // term
2144
&
term -> factor // term
2145
^
shift_expr -> arith_expr >> shift_expr
2145
:
shift_expr -> arith_expr >> shift_expr
2145
,
shift_expr -> arith_expr >> shift_expr
2145
&
shift_expr -> arith_expr >> shift_expr
2145
|
shift_expr -> arith_expr >> shift_expr
2146
,
shift_expr -> arith_expr << shift_expr
2146
:
shift_expr -> arith_expr << shift_expr
2146
|
shift_expr -> arith_expr << shift_expr
2146
&
shift_expr -> arith_expr << shift_expr
2146
^
shift_expr -> arith_expr << shift_expr
2147
/
atom -> [ test_list_comp ]
2147
^
atom -> [ test_list_comp ]
2147
[
atom -> [ test_list_comp ]
2147
%
atom -> [ test_list_comp ]
2147
(
atom -> [ test_list_comp ]
2147
,
atom -> [ test_list_comp ]
2147
+
atom -> [ test_list_comp ]
2147
*
atom -> [ test_list_comp ]
2147
@
atom -> [ test_list_comp ]
2147
:
atom -> [ test_list_comp ]
2147
>>
atom -> [ test_list_comp ]
2147
|
atom -> [ test_list_comp ]
2147
.
atom -> [ test_list_comp ]
2147
//
atom -> [ test_list_comp ]
2147
-
atom -> [ test_list_comp ]
2147
**
atom -> [ test_list_comp ]
2147
&
atom -> [ test_list_comp ]
2147
<<
atom -> [ test_list_comp ]
2148
//
atom -> ( test_list_comp )
2148
^
atom -> ( test_list_comp )
2148
@
atom -> ( test_list_comp )
2148
**
atom -> ( test_list_comp )
2148
.
atom -> ( test_list_comp )
2148
[
atom -> ( test_list_comp )
2148
>>
atom -> ( test_list_comp )
2148
|
atom -> ( test_list_comp )
2148
-
atom -> ( test_list_comp )
2148
<<
atom -> ( test_list_comp )
2148
(
atom -> ( test_list_comp )
2148
+
atom -> ( test_list_comp )
2148
*
atom -> ( test_list_comp )
2148
&
atom -> ( test_list_comp )
2148
:
atom -> ( test_list_comp )
2148
,
atom -> ( test_list_comp )
2148
%
atom -> ( test_list_comp )
2148
/
atom -> ( test_list_comp )
2149
]
2381
2150
:
trailer_expr -> trailer trailer_expr
2150
*
trailer_expr -> trailer trailer_expr
2150
+
trailer_expr -> trailer trailer_expr
2150
%
trailer_expr -> trailer trailer_expr
2150
<<
trailer_expr -> trailer trailer_expr
2150
^
trailer_expr -> trailer trailer_expr
2150
-
trailer_expr -> trailer trailer_expr
2150
//
trailer_expr -> trailer trailer_expr
2150
@
trailer_expr -> trailer trailer_expr
2150
&
trailer_expr -> trailer trailer_expr
2150
/
trailer_expr -> trailer trailer_expr
2150
**
trailer_expr -> trailer trailer_expr
2150
,
trailer_expr -> trailer trailer_expr
2150
>>
trailer_expr -> trailer trailer_expr
2150
|
trailer_expr -> trailer trailer_expr
2151
&
trailer -> . NAME
2151
:
trailer -> . NAME
2151
|
trailer -> . NAME
2151
*
trailer -> . NAME
2151
[
trailer -> . NAME
2151
**
trailer -> . NAME
2151
(
trailer -> . NAME
2151
>>
trailer -> . NAME
2151
%
trailer -> . NAME
2151
.
trailer -> . NAME
2151
^
trailer -> . NAME
2151
<<
trailer -> . NAME
2151
@
trailer -> . NAME
2151
-
trailer -> . NAME
2151
+
trailer -> . NAME
2151
/
trailer -> . NAME
2151
//
trailer -> . NAME
2151
,
trailer -> . NAME
2152
,
trailer -> ( )
2152
/
trailer -> ( )
2152
>>
trailer -> ( )
2152
^
trailer -> ( )
2152
.
trailer -> ( )
2152
[
trailer -> ( )
2152
**
trailer -> ( )
2152
:
trailer -> ( )
2152
<<
trailer -> ( )
2152
//
trailer -> ( )
2152
*
trailer -> ( )
2152
%
trailer -> ( )
2152
|
trailer -> ( )
2152
-
trailer -> ( )
2152
(
trailer -> ( )
2152
@
trailer -> ( )
2152
&
trailer -> ( )
2152
+
trailer -> ( )
2153
)
2382
2154
@
power -> atom_expr ** factor
2154
|
power -> atom_expr ** factor
2154
//
power -> atom_expr ** factor
2154
%
power -> atom_expr ** factor
2154
&
power -> atom_expr ** factor
2154
-
power -> atom_expr ** factor
2154
:
power -> atom_expr ** factor
2154
/
power -> atom_expr ** factor
2154
*
power -> atom_expr ** factor
2154
>>
power -> atom_expr ** factor
2154
,
power -> atom_expr ** factor
2154
+
power -> atom_expr ** factor
2154
^
power -> atom_expr ** factor
2154
<<
power -> atom_expr ** factor
2155
:
xor_expr -> and_expr ^ xor_expr
2155
|
xor_expr -> and_expr ^ xor_expr
2155
,
xor_expr -> and_expr ^ xor_expr
2156
>>
arith_expr -> term - arith_expr
2156
|
arith_expr -> term - arith_expr
2156
,
arith_expr -> term - arith_expr
2156
^
arith_expr -> term - arith_expr
2156
<<
arith_expr -> term - arith_expr
2156
:
arith_expr -> term - arith_expr
2156
&
arith_expr -> term - arith_expr
2157
:
arith_expr -> term + arith_expr
2157
>>
arith_expr -> term + arith_expr
2157
^
arith_expr -> term + arith_expr
2157
|
arith_expr -> term + arith_expr
2157
,
arith_expr -> term + arith_expr
2157
&
arith_expr -> term + arith_expr
2157
<<
arith_expr -> term + arith_expr
2158
|
and_expr -> shift_expr & and_expr
2158
,
and_expr -> shift_expr & and_expr
2158
^
and_expr -> shift_expr & and_expr
2158
:
and_expr -> shift_expr & and_expr
2159
,
expr -> xor_expr | expr
2159
:
expr -> xor_expr | expr
2160
:
test -> or_test if or_test else test
2160
as
test -> or_test if or_test else test
2160
,
test -> or_test if or_test else test
2161
from
test -> or_test if or_test else test
2161
NEWLINE
test -> or_test if or_test else test
2162
NEWLINE
test -> or_test if or_test else test
2162
,
test -> or_test if or_test else test
2163
,
trailer -> [ subscriptlist ]
2163
//
trailer -> [ subscriptlist ]
2163
/
trailer -> [ subscriptlist ]
2163
^
trailer -> [ subscriptlist ]
2163
.
trailer -> [ subscriptlist ]
2163
<
trailer -> [ subscriptlist ]
2163
<<
trailer -> [ subscriptlist ]
2163
in
trailer -> [ subscriptlist ]
2163
NEWLINE
trailer -> [ subscriptlist ]
2163
@
trailer -> [ subscriptlist ]
2163
>
trailer -> [ subscriptlist ]
2163
*
trailer -> [ subscriptlist ]
2163
and
trailer -> [ subscriptlist ]
2163
+
trailer -> [ subscriptlist ]
2163
(
trailer -> [ subscriptlist ]
2163
=
trailer -> [ subscriptlist ]
2163
is
trailer -> [ subscriptlist ]
2163
or
trailer -> [ subscriptlist ]
2163
<=
trailer -> [ subscriptlist ]
2163
if
trailer -> [ subscriptlist ]
2163
|
trailer -> [ subscriptlist ]
2163
==
trailer -> [ subscriptlist ]
2163
not
trailer -> [ subscriptlist ]
2163
-
trailer -> [ subscriptlist ]
2163
!=
trailer -> [ subscriptlist ]
2163
&
trailer -> [ subscriptlist ]
2163
[
trailer -> [ subscriptlist ]
2163
>>
trailer -> [ subscriptlist ]
2163
%
trailer -> [ subscriptlist ]
2163
>=
trailer -> [ subscriptlist ]
2163
**
trailer -> [ subscriptlist ]
2164
>=
trailer -> ( arglist )
2164
//
trailer -> ( arglist )
2164
%
trailer -> ( arglist )
2164
in
trailer -> ( arglist )
2164
&
trailer -> ( arglist )
2164
,
trailer -> ( arglist )
2164
>>
trailer -> ( arglist )
2164
-
trailer -> ( arglist )
2164
^
trailer -> ( arglist )
2164
>
trailer -> ( arglist )
2164
<<
trailer -> ( arglist )
2164
==
trailer -> ( arglist )
2164
<=
trailer -> ( arglist )
2164
*
trailer -> ( arglist )
2164
and
trailer -> ( arglist )
2164
=
trailer -> ( arglist )
2164
/
trailer -> ( arglist )
2164
[
trailer -> ( arglist )
2164
(
trailer -> ( arglist )
2164
<
trailer -> ( arglist )
2164
NEWLINE
trailer -> ( arglist )
2164
|
trailer -> ( arglist )
2164
+
trailer -> ( arglist )
2164
not
trailer -> ( arglist )
2164
or
trailer -> ( arglist )
2164
is
trailer -> ( arglist )
2164
.
trailer -> ( arglist )
2164
!=
trailer -> ( arglist )
2164
@
trailer -> ( arglist )
2164
**
trailer -> ( arglist )
2164
if
trailer -> ( arglist )
2165
,
lambdef -> lambda varargslist : test
2165
NEWLINE
lambdef -> lambda varargslist : test
2165
=
lambdef -> lambda varargslist : test
2166
~
825
2166
factor
826
2166
STRING
827
2166
shift_expr
828
2166
arith_expr
829
2166
term
830
2166
NUMBER
831
2166
{
832
2166
atom_expr
833
2166
[
834
2166
-
835
2166
None
836
2166
(
837
2166
atom
838
2166
and_expr
839
2166
+
840
2166
not_test
841
2166
NAME
843
2166
power
845
2166
True
846
2166
test
2383
2166
comparison
847
2166
xor_expr
848
2166
lambda
849
2166
False
850
2166
and_test
851
2166
lambdef
852
2166
expr
853
2166
not
854
2166
or_test
855
2167
<
factor -> ~ factor
2167
in
factor -> ~ factor
2167
==
factor -> ~ factor
2167
|
factor -> ~ factor
2167
<<
factor -> ~ factor
2167
>
factor -> ~ factor
2167
not
factor -> ~ factor
2167
<=
factor -> ~ factor
2167
//
factor -> ~ factor
2167
>=
factor -> ~ factor
2167
>>
factor -> ~ factor
2167
-
factor -> ~ factor
2167
*
factor -> ~ factor
2167
/
factor -> ~ factor
2167
if
factor -> ~ factor
2167
^
factor -> ~ factor
2167
and
factor -> ~ factor
2167
is
factor -> ~ factor
2167
+
factor -> ~ factor
2167
or
factor -> ~ factor
2167
&
factor -> ~ factor
2167
=
factor -> ~ factor
2167
NEWLINE
factor -> ~ factor
2167
!=
factor -> ~ factor
2167
%
factor -> ~ factor
2167
@
factor -> ~ factor
2168
~
1828
2168
factor
1829
2168
STRING
1830
2168
term
2384
2168
NUMBER
1833
2168
{
1834
2168
[
1836
2168
atom_expr
1835
2168
-
1837
2168
None
1838
2168
(
1839
2168
atom
1841
2168
+
1843
2168
NAME
1845
2168
power
1846
2168
True
1847
2168
False
1851
2169
~
1828
2169
factor
1829
2169
STRING
1830
2169
NUMBER
1833
2169
{
1834
2169
[
1836
2169
atom_expr
1835
2169
-
1837
2169
None
1838
2169
(
1839
2169
atom
1841
2169
+
1843
2169
NAME
1845
2169
power
1846
2169
True
1847
2169
False
1851
2169
term
2385
2170
~
1828
2170
factor
1829
2170
STRING
1830
2170
NUMBER
1833
2170
{
1834
2170
term
2386
2170
[
1836
2170
atom_expr
1835
2170
-
1837
2170
None
1838
2170
(
1839
2170
atom
1841
2170
+
1843
2170
NAME
1845
2170
power
1846
2170
True
1847
2170
False
1851
2171
~
1828
2171
factor
1829
2171
STRING
1830
2171
NUMBER
1833
2171
{
1834
2171
[
1836
2171
atom_expr
1835
2171
-
1837
2171
None
1838
2171
(
1839
2171
atom
1841
2171
+
1843
2171
term
2387
2171
NAME
1845
2171
power
1846
2171
True
1847
2171
False
1851
2172
~
1828
2172
factor
1829
2172
STRING
1830
2172
NUMBER
1833
2172
{
1834
2172
[
1836
2172
atom_expr
1835
2172
-
1837
2172
None
1838
2172
(
1839
2172
term
2388
2172
atom
1841
2172
+
1843
2172
NAME
1845
2172
power
1846
2172
True
1847
2172
False
1851
2173
~
1828
2173
factor
1829
2173
STRING
1830
2173
shift_expr
1831
2173
term
1832
2173
NUMBER
1833
2173
{
1834
2173
atom_expr
1835
2173
[
1836
2173
-
1837
2173
None
1838
2173
(
1839
2173
arith_expr
1840
2173
atom
1841
2173
+
1843
2173
NAME
1845
2173
power
1846
2173
True
1847
2173
False
1851
2173
and_expr
2389
2174
~
1828
2174
factor
1829
2174
STRING
1830
2174
arith_expr
2390
2174
term
1832
2174
NUMBER
1833
2174
{
1834
2174
[
1836
2174
atom_expr
1835
2174
-
1837
2174
None
1838
2174
(
1839
2174
atom
1841
2174
+
1843
2174
NAME
1845
2174
power
1846
2174
True
1847
2174
False
1851
2175
~
1828
2175
factor
1829
2175
STRING
1830
2175
term
1832
2175
arith_expr
2391
2175
NUMBER
1833
2175
{
1834
2175
[
1836
2175
atom_expr
1835
2175
-
1837
2175
None
1838
2175
(
1839
2175
atom
1841
2175
+
1843
2175
NAME
1845
2175
power
1846
2175
True
1847
2175
False
1851
2176
//
atom -> { }
2176
[
atom -> { }
2176
|
atom -> { }
2176
>
atom -> { }
2176
>=
atom -> { }
2176
NEWLINE
atom -> { }
2176
==
atom -> { }
2176
&
atom -> { }
2176
not
atom -> { }
2176
**
atom -> { }
2176
in
atom -> { }
2176
or
atom -> { }
2176
<
atom -> { }
2176
!=
atom -> { }
2176
+
atom -> { }
2176
<<
atom -> { }
2176
^
atom -> { }
2176
<=
atom -> { }
2176
if
atom -> { }
2176
/
atom -> { }
2176
is
atom -> { }
2176
-
atom -> { }
2176
>>
atom -> { }
2176
%
atom -> { }
2176
.
atom -> { }
2176
=
atom -> { }
2176
and
atom -> { }
2176
(
atom -> { }
2176
*
atom -> { }
2176
@
atom -> { }
2177
~
1828
2177
STRING
1830
2177
NUMBER
1833
2177
factor
2392
2177
{
1834
2177
[
1836
2177
atom_expr
1835
2177
None
1838
2177
-
1837
2177
(
1839
2177
atom
1841
2177
+
1843
2177
NAME
1845
2177
power
1846
2177
True
1847
2177
False
1851
2178
]
2393
2179
==
atom -> [ ]
2179
%
atom -> [ ]
2179
**
atom -> [ ]
2179
.
atom -> [ ]
2179
<<
atom -> [ ]
2179
not
atom -> [ ]
2179
/
atom -> [ ]
2179
*
atom -> [ ]
2179
if
atom -> [ ]
2179
!=
atom -> [ ]
2179
<=
atom -> [ ]
2179
@
atom -> [ ]
2179
-
atom -> [ ]
2179
>>
atom -> [ ]
2179
^
atom -> [ ]
2179
NEWLINE
atom -> [ ]
2179
|
atom -> [ ]
2179
<
atom -> [ ]
2179
[
atom -> [ ]
2179
is
atom -> [ ]
2179
in
atom -> [ ]
2179
>
atom -> [ ]
2179
=
atom -> [ ]
2179
+
atom -> [ ]
2179
>=
atom -> [ ]
2179
and
atom -> [ ]
2179
or
atom -> [ ]
2179
&
atom -> [ ]
2179
(
atom -> [ ]
2179
//
atom -> [ ]
2180
if
factor -> - factor
2180
/
factor -> - factor
2180
not
factor -> - factor
2180
<
factor -> - factor
2180
or
factor -> - factor
2180
//
factor -> - factor
2180
!=
factor -> - factor
2180
%
factor -> - factor
2180
|
factor -> - factor
2180
>
factor -> - factor
2180
+
factor -> - factor
2180
=
factor -> - factor
2180
-
factor -> - factor
2180
^
factor -> - factor
2180
in
factor -> - factor
2180
<<
factor -> - factor
2180
NEWLINE
factor -> - factor
2180
&
factor -> - factor
2180
<=
factor -> - factor
2180
==
factor -> - factor
2180
and
factor -> - factor
2180
@
factor -> - factor
2180
>=
factor -> - factor
2180
is
factor -> - factor
2180
>>
factor -> - factor
2180
*
factor -> - factor
2181
-
atom -> ( )
2181
==
atom -> ( )
2181
/
atom -> ( )
2181
<=
atom -> ( )
2181
(
atom -> ( )
2181
&
atom -> ( )
2181
[
atom -> ( )
2181
=
atom -> ( )
2181
^
atom -> ( )
2181
or
atom -> ( )
2181
+
atom -> ( )
2181
NEWLINE
atom -> ( )
2181
>>
atom -> ( )
2181
is
atom -> ( )
2181
*
atom -> ( )
2181
if
atom -> ( )
2181
and
atom -> ( )
2181
>=
atom -> ( )
2181
>
atom -> ( )
2181
@
atom -> ( )
2181
in
atom -> ( )
2181
not
atom -> ( )
2181
<
atom -> ( )
2181
.
atom -> ( )
2181
//
atom -> ( )
2181
%
atom -> ( )
2181
<<
atom -> ( )
2181
|
atom -> ( )
2181
**
atom -> ( )
2181
!=
atom -> ( )
2182
)
2394
2183
~
1828
2183
factor
1829
2183
STRING
1830
2183
term
1832
2183
NUMBER
1833
2183
{
1834
2183
[
1836
2183
atom_expr
1835
2183
-
1837
2183
shift_expr
2395
2183
None
1838
2183
(
1839
2183
arith_expr
1840
2183
atom
1841
2183
+
1843
2183
NAME
1845
2183
power
1846
2183
True
1847
2183
False
1851
2184
~
1828
2184
factor
1829
2184
STRING
1830
2184
term
1832
2184
NUMBER
1833
2184
{
1834
2184
[
1836
2184
atom_expr
1835
2184
-
1837
2184
None
1838
2184
(
1839
2184
arith_expr
1840
2184
atom
1841
2184
+
1843
2184
shift_expr
2396
2184
NAME
1845
2184
power
1846
2184
True
1847
2184
False
1851
2185
~
544
2185
factor
545
2185
STRING
546
2185
shift_expr
547
2185
expr
548
2185
arith_expr
549
2185
term
550
2185
atom_expr
551
2185
NUMBER
552
2185
subscript
553
2185
{
554
2185
[
555
2185
-
556
2185
None
557
2185
+
558
2185
(
559
2185
subscriptlist
2397
2185
atom
561
2185
and_expr
562
2185
NAME
563
2185
power
564
2185
True
565
2185
comparison
566
2185
xor_expr
567
2185
lambda
568
2185
False
569
2185
not_test
570
2185
and_test
571
2185
test
572
2185
or_test
573
2185
not
574
2185
:
maybe_test -> 
2185
maybe_test
575
2185
lambdef
576
2186
)
2398
2186
~
579
2186
factor
580
2186
STRING
581
2186
shift_expr
582
2186
arith_expr
583
2186
term
584
2186
NUMBER
585
2186
and_expr
586
2186
{
587
2186
arglist
2399
2186
atom_expr
589
2186
[
590
2186
-
591
2186
None
592
2186
(
593
2186
atom
594
2186
+
595
2186
not_test
596
2186
test
597
2186
NAME
598
2186
power
599
2186
True
600
2186
comparison
601
2186
xor_expr
602
2186
lambdef
603
2186
False
604
2186
argument
605
2186
and_test
606
2186
lambda
607
2186
or_test
608
2186
expr
609
2186
not
610
2186
**
611
2186
*
612
2187
[
2185
2187
(
2186
2187
//
trailer_expr -> 
2187
trailer
2187
2187
<<
trailer_expr -> 
2187
*
trailer_expr -> 
2187
in
trailer_expr -> 
2187
trailer_expr
2400
2187
&
trailer_expr -> 
2187
and
trailer_expr -> 
2187
.
2189
2187
<=
trailer_expr -> 
2187
|
trailer_expr -> 
2187
or
trailer_expr -> 
2187
>=
trailer_expr -> 
2187
=
trailer_expr -> 
2187
+
trailer_expr -> 
2187
**
trailer_expr -> 
2187
>>
trailer_expr -> 
2187
!=
trailer_expr -> 
2187
-
trailer_expr -> 
2187
/
trailer_expr -> 
2187
%
trailer_expr -> 
2187
is
trailer_expr -> 
2187
<
trailer_expr -> 
2187
>
trailer_expr -> 
2187
NEWLINE
trailer_expr -> 
2187
if
trailer_expr -> 
2187
^
trailer_expr -> 
2187
==
trailer_expr -> 
2187
@
trailer_expr -> 
2187
not
trailer_expr -> 
2188
<=
atom_expr -> atom trailer_expr
2188
or
atom_expr -> atom trailer_expr
2188
*
atom_expr -> atom trailer_expr
2188
>=
atom_expr -> atom trailer_expr
2188
**
atom_expr -> atom trailer_expr
2188
&
atom_expr -> atom trailer_expr
2188
%
atom_expr -> atom trailer_expr
2188
if
atom_expr -> atom trailer_expr
2188
+
atom_expr -> atom trailer_expr
2188
//
atom_expr -> atom trailer_expr
2188
is
atom_expr -> atom trailer_expr
2188
!=
atom_expr -> atom trailer_expr
2188
|
atom_expr -> atom trailer_expr
2188
<
atom_expr -> atom trailer_expr
2188
@
atom_expr -> atom trailer_expr
2188
not
atom_expr -> atom trailer_expr
2188
NEWLINE
atom_expr -> atom trailer_expr
2188
-
atom_expr -> atom trailer_expr
2188
in
atom_expr -> atom trailer_expr
2188
/
atom_expr -> atom trailer_expr
2188
^
atom_expr -> atom trailer_expr
2188
=
atom_expr -> atom trailer_expr
2188
>
atom_expr -> atom trailer_expr
2188
==
atom_expr -> atom trailer_expr
2188
<<
atom_expr -> atom trailer_expr
2188
>>
atom_expr -> atom trailer_expr
2188
and
atom_expr -> atom trailer_expr
2189
NAME
2401
2190
~
1828
2190
factor
1829
2190
STRING
1830
2190
shift_expr
1831
2190
term
1832
2190
NUMBER
1833
2190
{
1834
2190
atom_expr
1835
2190
[
1836
2190
xor_expr
2402
2190
-
1837
2190
None
1838
2190
(
1839
2190
arith_expr
1840
2190
atom
1841
2190
and_expr
1842
2190
+
1843
2190
NAME
1845
2190
power
1846
2190
True
1847
2190
False
1851
2191
<
factor -> + factor
2191
in
factor -> + factor
2191
|
factor -> + factor
2191
==
factor -> + factor
2191
>
factor -> + factor
2191
-
factor -> + factor
2191
and
factor -> + factor
2191
*
factor -> + factor
2191
if
factor -> + factor
2191
%
factor -> + factor
2191
@
factor -> + factor
2191
is
factor -> + factor
2191
//
factor -> + factor
2191
&
factor -> + factor
2191
^
factor -> + factor
2191
>=
factor -> + factor
2191
not
factor -> + factor
2191
/
factor -> + factor
2191
=
factor -> + factor
2191
NEWLINE
factor -> + factor
2191
or
factor -> + factor
2191
!=
factor -> + factor
2191
<<
factor -> + factor
2191
>>
factor -> + factor
2191
<=
factor -> + factor
2191
+
factor -> + factor
2192
~
1828
2192
factor
1829
2192
STRING
1830
2192
shift_expr
1831
2192
term
1832
2192
NUMBER
1833
2192
{
1834
2192
atom_expr
1835
2192
[
1836
2192
and_test
2403
2192
-
1837
2192
None
1838
2192
(
1839
2192
arith_expr
1840
2192
atom
1841
2192
and_expr
1842
2192
+
1843
2192
not_test
1844
2192
NAME
1845
2192
power
1846
2192
True
1847
2192
comparison
1848
2192
xor_expr
1849
2192
False
1851
2192
expr
1855
2192
not
1856
2193
~
1828
2193
factor
1829
2193
STRING
1830
2193
shift_expr
1831
2193
term
1832
2193
NUMBER
1833
2193
{
1834
2193
atom_expr
1835
2193
[
1836
2193
-
1837
2193
None
1838
2193
(
1839
2193
arith_expr
1840
2193
atom
1841
2193
and_expr
1842
2193
+
1843
2193
NAME
1845
2193
power
1846
2193
True
1847
2193
xor_expr
1849
2193
False
1851
2193
expr
2404
2194
~
1828
2194
factor
1829
2194
STRING
1830
2194
shift_expr
1831
2194
term
1832
2194
NUMBER
1833
2194
{
1834
2194
atom_expr
1835
2194
[
1836
2194
-
1837
2194
None
1838
2194
(
1839
2194
arith_expr
1840
2194
atom
1841
2194
and_expr
1842
2194
+
1843
2194
not_test
1844
2194
NAME
1845
2194
power
1846
2194
True
1847
2194
comparison
1848
2194
xor_expr
1849
2194
lambda
1850
2194
False
1851
2194
and_test
1852
2194
lambdef
1854
2194
test
2405
2194
expr
1855
2194
not
1856
2194
or_test
1857
2195
:
2406
2196
or_test
2407
2196
factor
1829
2196
~
1828
2196
shift_expr
1831
2196
STRING
1830
2196
term
1832
2196
NUMBER
1833
2196
{
1834
2196
atom_expr
1835
2196
[
1836
2196
-
1837
2196
None
1838
2196
(
1839
2196
arith_expr
1840
2196
atom
1841
2196
and_expr
1842
2196
+
1843
2196
not_test
1844
2196
NAME
1845
2196
power
1846
2196
True
1847
2196
comparison
1848
2196
xor_expr
1849
2196
False
1851
2196
and_test
1852
2196
expr
1855
2196
not
1856
2197
~
1828
2197
factor
1829
2197
STRING
1830
2197
shift_expr
1831
2197
term
1832
2197
NUMBER
1833
2197
{
1834
2197
atom_expr
1835
2197
[
1836
2197
-
1837
2197
None
1838
2197
(
1839
2197
arith_expr
1840
2197
atom
1841
2197
and_expr
1842
2197
+
1843
2197
NAME
1845
2197
power
1846
2197
True
1847
2197
xor_expr
1849
2197
False
1851
2197
comparison
2408
2197
expr
1855
2198
NEWLINE
not_test -> not not_test
2198
=
not_test -> not not_test
2198
if
not_test -> not not_test
2198
and
not_test -> not not_test
2198
or
not_test -> not not_test
2199
~
509
2199
factor
510
2199
STRING
511
2199
shift_expr
512
2199
term
513
2199
NUMBER
514
2199
{
515
2199
atom_expr
516
2199
[
517
2199
-
518
2199
None
519
2199
(
520
2199
atom
521
2199
arith_expr
522
2199
False
523
2199
+
524
2199
NAME
526
2199
power
527
2199
True
528
2199
xor_expr
529
2199
comparison
530
2199
and_expr
531
2199
not_test
532
2199
not
533
2199
expr
534
2199
and_test
535
2199
or_test
2409
2200
//
trailer -> [ subscriptlist ]
2200
/
trailer -> [ subscriptlist ]
2200
^
trailer -> [ subscriptlist ]
2200
.
trailer -> [ subscriptlist ]
2200
<
trailer -> [ subscriptlist ]
2200
<<
trailer -> [ subscriptlist ]
2200
in
trailer -> [ subscriptlist ]
2200
@
trailer -> [ subscriptlist ]
2200
>
trailer -> [ subscriptlist ]
2200
*
trailer -> [ subscriptlist ]
2200
and
trailer -> [ subscriptlist ]
2200
+
trailer -> [ subscriptlist ]
2200
(
trailer -> [ subscriptlist ]
2200
=
trailer -> [ subscriptlist ]
2200
is
trailer -> [ subscriptlist ]
2200
or
trailer -> [ subscriptlist ]
2200
<=
trailer -> [ subscriptlist ]
2200
if
trailer -> [ subscriptlist ]
2200
|
trailer -> [ subscriptlist ]
2200
==
trailer -> [ subscriptlist ]
2200
not
trailer -> [ subscriptlist ]
2200
-
trailer -> [ subscriptlist ]
2200
!=
trailer -> [ subscriptlist ]
2200
&
trailer -> [ subscriptlist ]
2200
[
trailer -> [ subscriptlist ]
2200
>>
trailer -> [ subscriptlist ]
2200
%
trailer -> [ subscriptlist ]
2200
>=
trailer -> [ subscriptlist ]
2200
**
trailer -> [ subscriptlist ]
2201
>=
trailer -> ( arglist )
2201
//
trailer -> ( arglist )
2201
%
trailer -> ( arglist )
2201
in
trailer -> ( arglist )
2201
&
trailer -> ( arglist )
2201
>>
trailer -> ( arglist )
2201
-
trailer -> ( arglist )
2201
^
trailer -> ( arglist )
2201
>
trailer -> ( arglist )
2201
<<
trailer -> ( arglist )
2201
==
trailer -> ( arglist )
2201
<=
trailer -> ( arglist )
2201
*
trailer -> ( arglist )
2201
and
trailer -> ( arglist )
2201
=
trailer -> ( arglist )
2201
/
trailer -> ( arglist )
2201
[
trailer -> ( arglist )
2201
(
trailer -> ( arglist )
2201
<
trailer -> ( arglist )
2201
|
trailer -> ( arglist )
2201
+
trailer -> ( arglist )
2201
not
trailer -> ( arglist )
2201
or
trailer -> ( arglist )
2201
is
trailer -> ( arglist )
2201
.
trailer -> ( arglist )
2201
!=
trailer -> ( arglist )
2201
@
trailer -> ( arglist )
2201
**
trailer -> ( arglist )
2201
if
trailer -> ( arglist )
2202
=
lambdef -> lambda varargslist : test
2203
~
858
2203
factor
859
2203
STRING
860
2203
shift_expr
861
2203
term
862
2203
NUMBER
863
2203
{
864
2203
atom_expr
865
2203
[
866
2203
-
867
2203
None
868
2203
(
869
2203
arith_expr
870
2203
atom
871
2203
and_expr
872
2203
+
873
2203
not_test
874
2203
NAME
875
2203
power
876
2203
True
877
2203
comparison
878
2203
xor_expr
879
2203
False
880
2203
and_test
881
2203
lambda
882
2203
expr
883
2203
not
884
2203
or_test
886
2203
lambdef
887
2203
test
2410
2204
NEWLINE
test -> or_test if or_test else test
2205
,
trailer -> [ subscriptlist ]
2205
//
trailer -> [ subscriptlist ]
2205
/
trailer -> [ subscriptlist ]
2205
^
trailer -> [ subscriptlist ]
2205
)
trailer -> [ subscriptlist ]
2205
.
trailer -> [ subscriptlist ]
2205
<
trailer -> [ subscriptlist ]
2205
<<
trailer -> [ subscriptlist ]
2205
in
trailer -> [ subscriptlist ]
2205
@
trailer -> [ subscriptlist ]
2205
>
trailer -> [ subscriptlist ]
2205
*
trailer -> [ subscriptlist ]
2205
and
trailer -> [ subscriptlist ]
2205
+
trailer -> [ subscriptlist ]
2205
(
trailer -> [ subscriptlist ]
2205
is
trailer -> [ subscriptlist ]
2205
or
trailer -> [ subscriptlist ]
2205
<=
trailer -> [ subscriptlist ]
2205
if
trailer -> [ subscriptlist ]
2205
|
trailer -> [ subscriptlist ]
2205
==
trailer -> [ subscriptlist ]
2205
not
trailer -> [ subscriptlist ]
2205
-
trailer -> [ subscriptlist ]
2205
!=
trailer -> [ subscriptlist ]
2205
&
trailer -> [ subscriptlist ]
2205
[
trailer -> [ subscriptlist ]
2205
>>
trailer -> [ subscriptlist ]
2205
%
trailer -> [ subscriptlist ]
2205
>=
trailer -> [ subscriptlist ]
2205
**
trailer -> [ subscriptlist ]
2206
>=
trailer -> ( arglist )
2206
//
trailer -> ( arglist )
2206
%
trailer -> ( arglist )
2206
in
trailer -> ( arglist )
2206
&
trailer -> ( arglist )
2206
,
trailer -> ( arglist )
2206
>>
trailer -> ( arglist )
2206
-
trailer -> ( arglist )
2206
^
trailer -> ( arglist )
2206
>
trailer -> ( arglist )
2206
<<
trailer -> ( arglist )
2206
==
trailer -> ( arglist )
2206
<=
trailer -> ( arglist )
2206
*
trailer -> ( arglist )
2206
and
trailer -> ( arglist )
2206
/
trailer -> ( arglist )
2206
[
trailer -> ( arglist )
2206
(
trailer -> ( arglist )
2206
<
trailer -> ( arglist )
2206
|
trailer -> ( arglist )
2206
+
trailer -> ( arglist )
2206
not
trailer -> ( arglist )
2206
or
trailer -> ( arglist )
2206
)
trailer -> ( arglist )
2206
is
trailer -> ( arglist )
2206
.
trailer -> ( arglist )
2206
!=
trailer -> ( arglist )
2206
@
trailer -> ( arglist )
2206
**
trailer -> ( arglist )
2206
if
trailer -> ( arglist )
2207
,
lambdef -> lambda varargslist : test
2207
)
lambdef -> lambda varargslist : test
2208
~
948
2208
factor
949
2208
STRING
950
2208
shift_expr
951
2208
arith_expr
952
2208
term
953
2208
NUMBER
954
2208
{
955
2208
atom_expr
956
2208
[
957
2208
-
958
2208
None
959
2208
(
960
2208
atom
961
2208
+
962
2208
NAME
964
2208
power
965
2208
True
966
2208
test
2411
2208
comparison
967
2208
xor_expr
968
2208
False
969
2208
and_expr
970
2208
not_test
971
2208
lambdef
972
2208
lambda
973
2208
or_test
974
2208
and_test
975
2208
not
976
2208
expr
977
2209
<
factor -> ~ factor
2209
in
factor -> ~ factor
2209
==
factor -> ~ factor
2209
|
factor -> ~ factor
2209
)
factor -> ~ factor
2209
<<
factor -> ~ factor
2209
>
factor -> ~ factor
2209
not
factor -> ~ factor
2209
<=
factor -> ~ factor
2209
//
factor -> ~ factor
2209
>=
factor -> ~ factor
2209
>>
factor -> ~ factor
2209
-
factor -> ~ factor
2209
*
factor -> ~ factor
2209
/
factor -> ~ factor
2209
if
factor -> ~ factor
2209
^
factor -> ~ factor
2209
and
factor -> ~ factor
2209
is
factor -> ~ factor
2209
for
factor -> ~ factor
2209
+
factor -> ~ factor
2209
or
factor -> ~ factor
2209
&
factor -> ~ factor
2209
!=
factor -> ~ factor
2209
%
factor -> ~ factor
2209
@
factor -> ~ factor
2210
~
1917
2210
factor
1918
2210
STRING
1919
2210
term
2412
2210
NUMBER
1922
2210
{
1924
2210
[
1926
2210
atom_expr
1925
2210
-
1927
2210
None
1928
2210
(
1929
2210
atom
1931
2210
+
1932
2210
NAME
1933
2210
power
1934
2210
True
1935
2210
False
1938
2211
~
1917
2211
factor
1918
2211
STRING
1919
2211
NUMBER
1922
2211
{
1924
2211
[
1926
2211
atom_expr
1925
2211
-
1927
2211
None
1928
2211
(
1929
2211
atom
1931
2211
+
1932
2211
NAME
1933
2211
power
1934
2211
True
1935
2211
False
1938
2211
term
2413
2212
~
1917
2212
factor
1918
2212
STRING
1919
2212
NUMBER
1922
2212
{
1924
2212
term
2414
2212
[
1926
2212
atom_expr
1925
2212
-
1927
2212
None
1928
2212
(
1929
2212
atom
1931
2212
+
1932
2212
NAME
1933
2212
power
1934
2212
True
1935
2212
False
1938
2213
~
1917
2213
factor
1918
2213
STRING
1919
2213
NUMBER
1922
2213
{
1924
2213
[
1926
2213
atom_expr
1925
2213
-
1927
2213
None
1928
2213
(
1929
2213
atom
1931
2213
+
1932
2213
term
2415
2213
NAME
1933
2213
power
1934
2213
True
1935
2213
False
1938
2214
~
1917
2214
factor
1918
2214
STRING
1919
2214
NUMBER
1922
2214
{
1924
2214
[
1926
2214
atom_expr
1925
2214
-
1927
2214
None
1928
2214
(
1929
2214
term
2416
2214
atom
1931
2214
+
1932
2214
NAME
1933
2214
power
1934
2214
True
1935
2214
False
1938
2215
~
1917
2215
factor
1918
2215
STRING
1919
2215
shift_expr
1920
2215
term
1921
2215
NUMBER
1922
2215
{
1924
2215
atom_expr
1925
2215
[
1926
2215
-
1927
2215
None
1928
2215
(
1929
2215
arith_expr
1930
2215
atom
1931
2215
+
1932
2215
NAME
1933
2215
power
1934
2215
True
1935
2215
False
1938
2215
and_expr
2417
2216
~
1917
2216
factor
1918
2216
STRING
1919
2216
arith_expr
2418
2216
term
1921
2216
NUMBER
1922
2216
{
1924
2216
[
1926
2216
atom_expr
1925
2216
-
1927
2216
None
1928
2216
(
1929
2216
atom
1931
2216
+
1932
2216
NAME
1933
2216
power
1934
2216
True
1935
2216
False
1938
2217
~
1917
2217
factor
1918
2217
STRING
1919
2217
term
1921
2217
arith_expr
2419
2217
NUMBER
1922
2217
{
1924
2217
[
1926
2217
atom_expr
1925
2217
-
1927
2217
None
1928
2217
(
1929
2217
atom
1931
2217
+
1932
2217
NAME
1933
2217
power
1934
2217
True
1935
2217
False
1938
2218
~
1917
2218
factor
1918
2218
STRING
1919
2218
shift_expr
1920
2218
term
1921
2218
NUMBER
1922
2218
and_expr
1923
2218
{
1924
2218
atom_expr
1925
2218
[
1926
2218
xor_expr
2420
2218
-
1927
2218
None
1928
2218
(
1929
2218
arith_expr
1930
2218
atom
1931
2218
+
1932
2218
NAME
1933
2218
power
1934
2218
True
1935
2218
False
1938
2219
//
atom -> { }
2219
)
atom -> { }
2219
[
atom -> { }
2219
|
atom -> { }
2219
>
atom -> { }
2219
>=
atom -> { }
2219
==
atom -> { }
2219
&
atom -> { }
2219
not
atom -> { }
2219
**
atom -> { }
2219
in
atom -> { }
2219
or
atom -> { }
2219
<
atom -> { }
2219
!=
atom -> { }
2219
+
atom -> { }
2219
<<
atom -> { }
2219
^
atom -> { }
2219
<=
atom -> { }
2219
if
atom -> { }
2219
for
atom -> { }
2219
/
atom -> { }
2219
is
atom -> { }
2219
-
atom -> { }
2219
>>
atom -> { }
2219
%
atom -> { }
2219
.
atom -> { }
2219
(
atom -> { }
2219
and
atom -> { }
2219
*
atom -> { }
2219
@
atom -> { }
2220
~
1917
2220
STRING
1919
2220
NUMBER
1922
2220
factor
2421
2220
{
1924
2220
[
1926
2220
atom_expr
1925
2220
None
1928
2220
-
1927
2220
(
1929
2220
atom
1931
2220
+
1932
2220
NAME
1933
2220
power
1934
2220
True
1935
2220
False
1938
2221
]
2422
2222
for
atom -> [ ]
2222
==
atom -> [ ]
2222
%
atom -> [ ]
2222
**
atom -> [ ]
2222
.
atom -> [ ]
2222
<<
atom -> [ ]
2222
not
atom -> [ ]
2222
/
atom -> [ ]
2222
*
atom -> [ ]
2222
if
atom -> [ ]
2222
!=
atom -> [ ]
2222
<=
atom -> [ ]
2222
@
atom -> [ ]
2222
-
atom -> [ ]
2222
>>
atom -> [ ]
2222
^
atom -> [ ]
2222
|
atom -> [ ]
2222
<
atom -> [ ]
2222
[
atom -> [ ]
2222
is
atom -> [ ]
2222
in
atom -> [ ]
2222
>
atom -> [ ]
2222
+
atom -> [ ]
2222
>=
atom -> [ ]
2222
and
atom -> [ ]
2222
or
atom -> [ ]
2222
)
atom -> [ ]
2222
&
atom -> [ ]
2222
(
atom -> [ ]
2222
//
atom -> [ ]
2223
if
factor -> - factor
2223
/
factor -> - factor
2223
not
factor -> - factor
2223
<
factor -> - factor
2223
or
factor -> - factor
2223
//
factor -> - factor
2223
!=
factor -> - factor
2223
%
factor -> - factor
2223
|
factor -> - factor
2223
for
factor -> - factor
2223
>
factor -> - factor
2223
+
factor -> - factor
2223
-
factor -> - factor
2223
^
factor -> - factor
2223
in
factor -> - factor
2223
<<
factor -> - factor
2223
&
factor -> - factor
2223
<=
factor -> - factor
2223
==
factor -> - factor
2223
and
factor -> - factor
2223
@
factor -> - factor
2223
>=
factor -> - factor
2223
is
factor -> - factor
2223
>>
factor -> - factor
2223
*
factor -> - factor
2223
)
factor -> - factor
2224
-
atom -> ( )
2224
==
atom -> ( )
2224
/
atom -> ( )
2224
<=
atom -> ( )
2224
(
atom -> ( )
2224
&
atom -> ( )
2224
[
atom -> ( )
2224
^
atom -> ( )
2224
or
atom -> ( )
2224
+
atom -> ( )
2224
>>
atom -> ( )
2224
)
atom -> ( )
2224
is
atom -> ( )
2224
*
atom -> ( )
2224
if
atom -> ( )
2224
and
atom -> ( )
2224
>=
atom -> ( )
2224
>
atom -> ( )
2224
@
atom -> ( )
2224
in
atom -> ( )
2224
not
atom -> ( )
2224
<
atom -> ( )
2224
.
atom -> ( )
2224
//
atom -> ( )
2224
%
atom -> ( )
2224
<<
atom -> ( )
2224
for
atom -> ( )
2224
|
atom -> ( )
2224
**
atom -> ( )
2224
!=
atom -> ( )
2225
)
2423
2226
~
1917
2226
factor
1918
2226
STRING
1919
2226
term
1921
2226
NUMBER
1922
2226
{
1924
2226
[
1926
2226
atom_expr
1925
2226
-
1927
2226
shift_expr
2424
2226
None
1928
2226
(
1929
2226
arith_expr
1930
2226
atom
1931
2226
+
1932
2226
NAME
1933
2226
power
1934
2226
True
1935
2226
False
1938
2227
~
1917
2227
factor
1918
2227
STRING
1919
2227
term
1921
2227
NUMBER
1922
2227
{
1924
2227
[
1926
2227
atom_expr
1925
2227
-
1927
2227
None
1928
2227
(
1929
2227
arith_expr
1930
2227
atom
1931
2227
+
1932
2227
shift_expr
2425
2227
NAME
1933
2227
power
1934
2227
True
1935
2227
False
1938
2228
~
544
2228
factor
545
2228
STRING
546
2228
shift_expr
547
2228
expr
548
2228
arith_expr
549
2228
term
550
2228
atom_expr
551
2228
NUMBER
552
2228
subscript
553
2228
{
554
2228
[
555
2228
-
556
2228
None
557
2228
+
558
2228
(
559
2228
subscriptlist
2426
2228
atom
561
2228
and_expr
562
2228
NAME
563
2228
power
564
2228
True
565
2228
comparison
566
2228
xor_expr
567
2228
lambda
568
2228
False
569
2228
not_test
570
2228
and_test
571
2228
test
572
2228
or_test
573
2228
not
574
2228
:
maybe_test -> 
2228
maybe_test
575
2228
lambdef
576
2229
arglist
2427
2229
)
2428
2229
~
579
2229
factor
580
2229
STRING
581
2229
shift_expr
582
2229
arith_expr
583
2229
term
584
2229
NUMBER
585
2229
and_expr
586
2229
{
587
2229
atom_expr
589
2229
[
590
2229
-
591
2229
None
592
2229
(
593
2229
atom
594
2229
+
595
2229
not_test
596
2229
test
597
2229
NAME
598
2229
power
599
2229
True
600
2229
comparison
601
2229
xor_expr
602
2229
lambdef
603
2229
False
604
2229
argument
605
2229
and_test
606
2229
lambda
607
2229
or_test
608
2229
expr
609
2229
not
610
2229
**
611
2229
*
612
2230
NAME
2429
2231
[
2228
2231
(
2229
2231
.
2230
2231
//
trailer_expr -> 
2231
trailer
2231
2231
<<
trailer_expr -> 
2231
*
trailer_expr -> 
2231
in
trailer_expr -> 
2231
&
trailer_expr -> 
2231
trailer_expr
2430
2231
and
trailer_expr -> 
2231
<=
trailer_expr -> 
2231
|
trailer_expr -> 
2231
or
trailer_expr -> 
2231
>=
trailer_expr -> 
2231
for
trailer_expr -> 
2231
+
trailer_expr -> 
2231
**
trailer_expr -> 
2231
>>
trailer_expr -> 
2231
!=
trailer_expr -> 
2231
-
trailer_expr -> 
2231
/
trailer_expr -> 
2231
%
trailer_expr -> 
2231
is
trailer_expr -> 
2231
<
trailer_expr -> 
2231
>
trailer_expr -> 
2231
if
trailer_expr -> 
2231
^
trailer_expr -> 
2231
==
trailer_expr -> 
2231
@
trailer_expr -> 
2231
)
trailer_expr -> 
2231
not
trailer_expr -> 
2232
for
atom_expr -> atom trailer_expr
2232
<=
atom_expr -> atom trailer_expr
2232
or
atom_expr -> atom trailer_expr
2232
*
atom_expr -> atom trailer_expr
2232
>=
atom_expr -> atom trailer_expr
2232
**
atom_expr -> atom trailer_expr
2232
&
atom_expr -> atom trailer_expr
2232
%
atom_expr -> atom trailer_expr
2232
if
atom_expr -> atom trailer_expr
2232
+
atom_expr -> atom trailer_expr
2232
//
atom_expr -> atom trailer_expr
2232
is
atom_expr -> atom trailer_expr
2232
!=
atom_expr -> atom trailer_expr
2232
|
atom_expr -> atom trailer_expr
2232
<
atom_expr -> atom trailer_expr
2232
@
atom_expr -> atom trailer_expr
2232
not
atom_expr -> atom trailer_expr
2232
-
atom_expr -> atom trailer_expr
2232
in
atom_expr -> atom trailer_expr
2232
/
atom_expr -> atom trailer_expr
2232
^
atom_expr -> atom trailer_expr
2232
>
atom_expr -> atom trailer_expr
2232
==
atom_expr -> atom trailer_expr
2232
<<
atom_expr -> atom trailer_expr
2232
>>
atom_expr -> atom trailer_expr
2232
and
atom_expr -> atom trailer_expr
2232
)
atom_expr -> atom trailer_expr
2233
<
factor -> + factor
2233
for
factor -> + factor
2233
in
factor -> + factor
2233
|
factor -> + factor
2233
==
factor -> + factor
2233
>
factor -> + factor
2233
-
factor -> + factor
2233
and
factor -> + factor
2233
*
factor -> + factor
2233
if
factor -> + factor
2233
%
factor -> + factor
2233
@
factor -> + factor
2233
is
factor -> + factor
2233
//
factor -> + factor
2233
&
factor -> + factor
2233
)
factor -> + factor
2233
^
factor -> + factor
2233
>=
factor -> + factor
2233
not
factor -> + factor
2233
/
factor -> + factor
2233
or
factor -> + factor
2233
!=
factor -> + factor
2233
<<
factor -> + factor
2233
>>
factor -> + factor
2233
<=
factor -> + factor
2233
+
factor -> + factor
2234
~
1917
2234
factor
1918
2234
STRING
1919
2234
shift_expr
1920
2234
term
1921
2234
expr
2431
2234
NUMBER
1922
2234
and_expr
1923
2234
{
1924
2234
atom_expr
1925
2234
[
1926
2234
-
1927
2234
None
1928
2234
(
1929
2234
arith_expr
1930
2234
atom
1931
2234
+
1932
2234
NAME
1933
2234
power
1934
2234
True
1935
2234
xor_expr
1937
2234
False
1938
2235
~
1917
2235
factor
1918
2235
STRING
1919
2235
shift_expr
1920
2235
term
1921
2235
NUMBER
1922
2235
and_expr
1923
2235
{
1924
2235
atom_expr
1925
2235
[
1926
2235
-
1927
2235
None
1928
2235
(
1929
2235
arith_expr
1930
2235
atom
1931
2235
+
1932
2235
NAME
1933
2235
power
1934
2235
True
1935
2235
and_test
2432
2235
comparison
1936
2235
xor_expr
1937
2235
False
1938
2235
not_test
1939
2235
not
1941
2235
expr
1942
2236
or_test
2433
2236
factor
1918
2236
~
1917
2236
shift_expr
1920
2236
STRING
1919
2236
term
1921
2236
NUMBER
1922
2236
and_expr
1923
2236
{
1924
2236
atom_expr
1925
2236
[
1926
2236
-
1927
2236
None
1928
2236
(
1929
2236
arith_expr
1930
2236
atom
1931
2236
+
1932
2236
NAME
1933
2236
power
1934
2236
True
1935
2236
comparison
1936
2236
xor_expr
1937
2236
False
1938
2236
not_test
1939
2236
and_test
1940
2236
not
1941
2236
expr
1942
2237
)
not_test -> not not_test
2237
if
not_test -> not not_test
2237
and
not_test -> not not_test
2237
or
not_test -> not not_test
2237
for
not_test -> not not_test
2238
~
1917
2238
factor
1918
2238
STRING
1919
2238
shift_expr
1920
2238
term
1921
2238
NUMBER
1922
2238
and_expr
1923
2238
{
1924
2238
atom_expr
1925
2238
[
1926
2238
-
1927
2238
None
1928
2238
(
1929
2238
arith_expr
1930
2238
atom
1931
2238
+
1932
2238
NAME
1933
2238
power
1934
2238
True
1935
2238
xor_expr
1937
2238
False
1938
2238
comparison
2434
2238
expr
1942
2239
)
comp_iter -> comp_if
2240
)
comp_iter -> comp_for
2241
)
comp_for -> for expr_list in or_test comp_iter
2242
~
1917
2242
factor
1918
2242
STRING
1919
2242
shift_expr
1920
2242
term
1921
2242
NUMBER
1922
2242
and_expr
1923
2242
{
1924
2242
atom_expr
1925
2242
[
1926
2242
-
1927
2242
None
1928
2242
(
1929
2242
arith_expr
1930
2242
atom
1931
2242
or_test
2435
2242
+
1932
2242
NAME
1933
2242
power
1934
2242
True
1935
2242
comparison
1936
2242
xor_expr
1937
2242
test_nocond
2436
2242
False
1938
2242
lambdef_nocond
2437
2242
not_test
1939
2242
lambda
2438
2242
and_test
1940
2242
not
1941
2242
expr
1942
2243
-
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
pass
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
def
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
endsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
None
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
begsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
raise
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
continue
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
try
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
@
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
(
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
NEWLINE
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
+
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
$
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
STRING
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
~
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
[
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
return
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
while
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
lambda
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
True
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
if
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
del
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
resetstats
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
nonlocal
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
NUMBER
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
class
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
global
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
conf
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
for
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
assert
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
not
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
False
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
{
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
yield
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
break
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
NAME
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2243
with
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2244
NEWLINE
2439
2245
class
while_stmt -> while test : suite else : suite
2245
NAME
while_stmt -> while test : suite else : suite
2245
try
while_stmt -> while test : suite else : suite
2245
with
while_stmt -> while test : suite else : suite
2245
break
while_stmt -> while test : suite else : suite
2245
NUMBER
while_stmt -> while test : suite else : suite
2245
pass
while_stmt -> while test : suite else : suite
2245
False
while_stmt -> while test : suite else : suite
2245
del
while_stmt -> while test : suite else : suite
2245
nonlocal
while_stmt -> while test : suite else : suite
2245
return
while_stmt -> while test : suite else : suite
2245
STRING
while_stmt -> while test : suite else : suite
2245
while
while_stmt -> while test : suite else : suite
2245
[
while_stmt -> while test : suite else : suite
2245
for
while_stmt -> while test : suite else : suite
2245
if
while_stmt -> while test : suite else : suite
2245
-
while_stmt -> while test : suite else : suite
2245
global
while_stmt -> while test : suite else : suite
2245
lambda
while_stmt -> while test : suite else : suite
2245
NEWLINE
while_stmt -> while test : suite else : suite
2245
yield
while_stmt -> while test : suite else : suite
2245
raise
while_stmt -> while test : suite else : suite
2245
None
while_stmt -> while test : suite else : suite
2245
$
while_stmt -> while test : suite else : suite
2245
True
while_stmt -> while test : suite else : suite
2245
resetstats
while_stmt -> while test : suite else : suite
2245
assert
while_stmt -> while test : suite else : suite
2245
+
while_stmt -> while test : suite else : suite
2245
def
while_stmt -> while test : suite else : suite
2245
conf
while_stmt -> while test : suite else : suite
2245
(
while_stmt -> while test : suite else : suite
2245
continue
while_stmt -> while test : suite else : suite
2245
not
while_stmt -> while test : suite else : suite
2245
endsim
while_stmt -> while test : suite else : suite
2245
begsim
while_stmt -> while test : suite else : suite
2245
@
while_stmt -> while test : suite else : suite
2245
{
while_stmt -> while test : suite else : suite
2245
~
while_stmt -> while test : suite else : suite
2246
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2246
return
suite -> NEWLINE INDENT stmt_list DEDENT
2246
if
suite -> NEWLINE INDENT stmt_list DEDENT
2246
not
suite -> NEWLINE INDENT stmt_list DEDENT
2246
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2246
{
suite -> NEWLINE INDENT stmt_list DEDENT
2246
break
suite -> NEWLINE INDENT stmt_list DEDENT
2246
False
suite -> NEWLINE INDENT stmt_list DEDENT
2246
+
suite -> NEWLINE INDENT stmt_list DEDENT
2246
class
suite -> NEWLINE INDENT stmt_list DEDENT
2246
with
suite -> NEWLINE INDENT stmt_list DEDENT
2246
(
suite -> NEWLINE INDENT stmt_list DEDENT
2246
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2246
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2246
global
suite -> NEWLINE INDENT stmt_list DEDENT
2246
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2246
$
suite -> NEWLINE INDENT stmt_list DEDENT
2246
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2246
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2246
try
suite -> NEWLINE INDENT stmt_list DEDENT
2246
while
suite -> NEWLINE INDENT stmt_list DEDENT
2246
del
suite -> NEWLINE INDENT stmt_list DEDENT
2246
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2246
True
suite -> NEWLINE INDENT stmt_list DEDENT
2246
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2246
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2246
for
suite -> NEWLINE INDENT stmt_list DEDENT
2246
~
suite -> NEWLINE INDENT stmt_list DEDENT
2246
else
suite -> NEWLINE INDENT stmt_list DEDENT
2246
-
suite -> NEWLINE INDENT stmt_list DEDENT
2246
@
suite -> NEWLINE INDENT stmt_list DEDENT
2246
None
suite -> NEWLINE INDENT stmt_list DEDENT
2246
[
suite -> NEWLINE INDENT stmt_list DEDENT
2246
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2246
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2246
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2246
def
suite -> NEWLINE INDENT stmt_list DEDENT
2246
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2246
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2247
expr
5
2247
factor
1
2247
(
3
2247
STRING
4
2247
term
6
2247
not
8
2247
or_test
10
2247
~
12
2247
atom_expr
13
2247
comparison
14
2247
shift_expr
29
2247
None
15
2247
power
43
2247
+
19
2247
small_stmt
1046
2247
xor_expr
17
2247
arith_expr
18
2247
[
32
2247
simple_stmt
1048
2247
atom
22
2247
NUMBER
26
2247
and_test
39
2247
suite
2440
2247
NAME
27
2247
-
36
2247
False
28
2247
lambda
46
2247
test
47
2247
NEWLINE
1049
2247
not_test
34
2247
{
35
2247
and_expr
33
2247
lambdef
45
2247
True
48
2247
endsim
75
2247
flow_stmt
53
2247
pass
76
2247
break
54
2247
raise
55
2247
yield
56
2247
assert
57
2247
global_stmt
77
2247
continue_stmt
58
2247
del_stmt
78
2247
stat_stmt
59
2247
global
79
2247
return_stmt
60
2247
test_list
61
2247
continue
62
2247
yield_stmt
63
2247
return
68
2247
sim_stmt
65
2247
resetstats
66
2247
break_stmt
82
2247
del
67
2247
raise_stmt
69
2247
nonlocal
70
2247
pass_stmt
71
2247
begsim
83
2247
expr_stmt
72
2247
nonlocal_stmt
84
2247
assert_stmt
74
2248
expr
5
2248
factor
1
2248
(
3
2248
STRING
4
2248
term
6
2248
not
8
2248
or_test
10
2248
~
12
2248
atom_expr
13
2248
comparison
14
2248
shift_expr
29
2248
None
15
2248
power
43
2248
+
19
2248
small_stmt
42
2248
xor_expr
17
2248
arith_expr
18
2248
[
32
2248
simple_stmt
1050
2248
atom
22
2248
NUMBER
26
2248
and_test
39
2248
NAME
27
2248
-
36
2248
False
28
2248
lambda
46
2248
test
47
2248
NEWLINE
1051
2248
not_test
34
2248
{
35
2248
and_expr
33
2248
lambdef
45
2248
True
48
2248
suite
2441
2248
endsim
75
2248
flow_stmt
53
2248
pass
76
2248
break
54
2248
raise
55
2248
yield
56
2248
assert
57
2248
global_stmt
77
2248
continue_stmt
58
2248
del_stmt
78
2248
stat_stmt
59
2248
global
79
2248
return_stmt
60
2248
test_list
61
2248
continue
62
2248
yield_stmt
63
2248
return
68
2248
sim_stmt
65
2248
resetstats
66
2248
break_stmt
82
2248
del
67
2248
raise_stmt
69
2248
nonlocal
70
2248
pass_stmt
71
2248
begsim
83
2248
expr_stmt
72
2248
nonlocal_stmt
84
2248
assert_stmt
74
2249
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2249
return
suite -> NEWLINE INDENT stmt_list DEDENT
2249
if
suite -> NEWLINE INDENT stmt_list DEDENT
2249
not
suite -> NEWLINE INDENT stmt_list DEDENT
2249
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2249
{
suite -> NEWLINE INDENT stmt_list DEDENT
2249
break
suite -> NEWLINE INDENT stmt_list DEDENT
2249
False
suite -> NEWLINE INDENT stmt_list DEDENT
2249
+
suite -> NEWLINE INDENT stmt_list DEDENT
2249
class
suite -> NEWLINE INDENT stmt_list DEDENT
2249
with
suite -> NEWLINE INDENT stmt_list DEDENT
2249
(
suite -> NEWLINE INDENT stmt_list DEDENT
2249
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2249
elif
suite -> NEWLINE INDENT stmt_list DEDENT
2249
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2249
global
suite -> NEWLINE INDENT stmt_list DEDENT
2249
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2249
$
suite -> NEWLINE INDENT stmt_list DEDENT
2249
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2249
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2249
try
suite -> NEWLINE INDENT stmt_list DEDENT
2249
while
suite -> NEWLINE INDENT stmt_list DEDENT
2249
del
suite -> NEWLINE INDENT stmt_list DEDENT
2249
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2249
True
suite -> NEWLINE INDENT stmt_list DEDENT
2249
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2249
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2249
for
suite -> NEWLINE INDENT stmt_list DEDENT
2249
~
suite -> NEWLINE INDENT stmt_list DEDENT
2249
else
suite -> NEWLINE INDENT stmt_list DEDENT
2249
-
suite -> NEWLINE INDENT stmt_list DEDENT
2249
@
suite -> NEWLINE INDENT stmt_list DEDENT
2249
None
suite -> NEWLINE INDENT stmt_list DEDENT
2249
[
suite -> NEWLINE INDENT stmt_list DEDENT
2249
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2249
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2249
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2249
def
suite -> NEWLINE INDENT stmt_list DEDENT
2249
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2249
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2250
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2250
return
suite -> NEWLINE INDENT stmt_list DEDENT
2250
if
suite -> NEWLINE INDENT stmt_list DEDENT
2250
not
suite -> NEWLINE INDENT stmt_list DEDENT
2250
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2250
{
suite -> NEWLINE INDENT stmt_list DEDENT
2250
break
suite -> NEWLINE INDENT stmt_list DEDENT
2250
False
suite -> NEWLINE INDENT stmt_list DEDENT
2250
+
suite -> NEWLINE INDENT stmt_list DEDENT
2250
class
suite -> NEWLINE INDENT stmt_list DEDENT
2250
with
suite -> NEWLINE INDENT stmt_list DEDENT
2250
(
suite -> NEWLINE INDENT stmt_list DEDENT
2250
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2250
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2250
global
suite -> NEWLINE INDENT stmt_list DEDENT
2250
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2250
$
suite -> NEWLINE INDENT stmt_list DEDENT
2250
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2250
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2250
try
suite -> NEWLINE INDENT stmt_list DEDENT
2250
while
suite -> NEWLINE INDENT stmt_list DEDENT
2250
del
suite -> NEWLINE INDENT stmt_list DEDENT
2250
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2250
True
suite -> NEWLINE INDENT stmt_list DEDENT
2250
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2250
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2250
for
suite -> NEWLINE INDENT stmt_list DEDENT
2250
~
suite -> NEWLINE INDENT stmt_list DEDENT
2250
-
suite -> NEWLINE INDENT stmt_list DEDENT
2250
@
suite -> NEWLINE INDENT stmt_list DEDENT
2250
None
suite -> NEWLINE INDENT stmt_list DEDENT
2250
[
suite -> NEWLINE INDENT stmt_list DEDENT
2250
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2250
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2250
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2250
def
suite -> NEWLINE INDENT stmt_list DEDENT
2250
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2250
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2251
break
classdef -> class NAME ( arglist ) : suite
2251
for
classdef -> class NAME ( arglist ) : suite
2251
conf
classdef -> class NAME ( arglist ) : suite
2251
assert
classdef -> class NAME ( arglist ) : suite
2251
None
classdef -> class NAME ( arglist ) : suite
2251
lambda
classdef -> class NAME ( arglist ) : suite
2251
+
classdef -> class NAME ( arglist ) : suite
2251
raise
classdef -> class NAME ( arglist ) : suite
2251
STRING
classdef -> class NAME ( arglist ) : suite
2251
with
classdef -> class NAME ( arglist ) : suite
2251
def
classdef -> class NAME ( arglist ) : suite
2251
True
classdef -> class NAME ( arglist ) : suite
2251
False
classdef -> class NAME ( arglist ) : suite
2251
del
classdef -> class NAME ( arglist ) : suite
2251
not
classdef -> class NAME ( arglist ) : suite
2251
NUMBER
classdef -> class NAME ( arglist ) : suite
2251
global
classdef -> class NAME ( arglist ) : suite
2251
nonlocal
classdef -> class NAME ( arglist ) : suite
2251
return
classdef -> class NAME ( arglist ) : suite
2251
resetstats
classdef -> class NAME ( arglist ) : suite
2251
[
classdef -> class NAME ( arglist ) : suite
2251
continue
classdef -> class NAME ( arglist ) : suite
2251
-
classdef -> class NAME ( arglist ) : suite
2251
NAME
classdef -> class NAME ( arglist ) : suite
2251
~
classdef -> class NAME ( arglist ) : suite
2251
endsim
classdef -> class NAME ( arglist ) : suite
2251
begsim
classdef -> class NAME ( arglist ) : suite
2251
pass
classdef -> class NAME ( arglist ) : suite
2251
yield
classdef -> class NAME ( arglist ) : suite
2251
$
classdef -> class NAME ( arglist ) : suite
2251
class
classdef -> class NAME ( arglist ) : suite
2251
if
classdef -> class NAME ( arglist ) : suite
2251
{
classdef -> class NAME ( arglist ) : suite
2251
while
classdef -> class NAME ( arglist ) : suite
2251
try
classdef -> class NAME ( arglist ) : suite
2251
(
classdef -> class NAME ( arglist ) : suite
2251
@
classdef -> class NAME ( arglist ) : suite
2251
NEWLINE
classdef -> class NAME ( arglist ) : suite
2252
:
test -> or_test if or_test else test
2252
]
test -> or_test if or_test else test
2252
,
test -> or_test if or_test else test
2253
,
maybe_test -> test
2253
]
maybe_test -> test
2254
,
sliceop -> : maybe_test
2254
]
sliceop -> : maybe_test
2255
comp_if
2442
2255
,
comp_iter -> 
2255
comp_iter
2443
2255
)
comp_iter -> 
2255
for
1119
2255
comp_for
2444
2255
if
2445
2256
)
test -> or_test if or_test else test
2256
for
test -> or_test if or_test else test
2256
=
test -> or_test if or_test else test
2256
,
test -> or_test if or_test else test
2257
while
funcdef -> def NAME ( parameters ) : suite
2257
for
funcdef -> def NAME ( parameters ) : suite
2257
begsim
funcdef -> def NAME ( parameters ) : suite
2257
False
funcdef -> def NAME ( parameters ) : suite
2257
resetstats
funcdef -> def NAME ( parameters ) : suite
2257
-
funcdef -> def NAME ( parameters ) : suite
2257
None
funcdef -> def NAME ( parameters ) : suite
2257
endsim
funcdef -> def NAME ( parameters ) : suite
2257
(
funcdef -> def NAME ( parameters ) : suite
2257
{
funcdef -> def NAME ( parameters ) : suite
2257
not
funcdef -> def NAME ( parameters ) : suite
2257
[
funcdef -> def NAME ( parameters ) : suite
2257
global
funcdef -> def NAME ( parameters ) : suite
2257
continue
funcdef -> def NAME ( parameters ) : suite
2257
del
funcdef -> def NAME ( parameters ) : suite
2257
~
funcdef -> def NAME ( parameters ) : suite
2257
return
funcdef -> def NAME ( parameters ) : suite
2257
nonlocal
funcdef -> def NAME ( parameters ) : suite
2257
pass
funcdef -> def NAME ( parameters ) : suite
2257
lambda
funcdef -> def NAME ( parameters ) : suite
2257
assert
funcdef -> def NAME ( parameters ) : suite
2257
NAME
funcdef -> def NAME ( parameters ) : suite
2257
break
funcdef -> def NAME ( parameters ) : suite
2257
try
funcdef -> def NAME ( parameters ) : suite
2257
STRING
funcdef -> def NAME ( parameters ) : suite
2257
$
funcdef -> def NAME ( parameters ) : suite
2257
yield
funcdef -> def NAME ( parameters ) : suite
2257
def
funcdef -> def NAME ( parameters ) : suite
2257
if
funcdef -> def NAME ( parameters ) : suite
2257
@
funcdef -> def NAME ( parameters ) : suite
2257
raise
funcdef -> def NAME ( parameters ) : suite
2257
NEWLINE
funcdef -> def NAME ( parameters ) : suite
2257
conf
funcdef -> def NAME ( parameters ) : suite
2257
class
funcdef -> def NAME ( parameters ) : suite
2257
with
funcdef -> def NAME ( parameters ) : suite
2257
+
funcdef -> def NAME ( parameters ) : suite
2257
NUMBER
funcdef -> def NAME ( parameters ) : suite
2257
True
funcdef -> def NAME ( parameters ) : suite
2258
,
tfpdef -> NAME : test
2258
)
tfpdef -> NAME : test
2259
,
factor -> ~ factor
2259
<
factor -> ~ factor
2259
in
factor -> ~ factor
2259
==
factor -> ~ factor
2259
|
factor -> ~ factor
2259
)
factor -> ~ factor
2259
<<
factor -> ~ factor
2259
>
factor -> ~ factor
2259
not
factor -> ~ factor
2259
<=
factor -> ~ factor
2259
//
factor -> ~ factor
2259
>=
factor -> ~ factor
2259
>>
factor -> ~ factor
2259
-
factor -> ~ factor
2259
*
factor -> ~ factor
2259
/
factor -> ~ factor
2259
if
factor -> ~ factor
2259
^
factor -> ~ factor
2259
and
factor -> ~ factor
2259
is
factor -> ~ factor
2259
+
factor -> ~ factor
2259
or
factor -> ~ factor
2259
&
factor -> ~ factor
2259
=
factor -> ~ factor
2259
!=
factor -> ~ factor
2259
%
factor -> ~ factor
2259
@
factor -> ~ factor
2260
~
1971
2260
factor
1972
2260
STRING
1973
2260
term
2446
2260
NUMBER
1977
2260
{
1978
2260
[
1980
2260
atom_expr
1979
2260
-
1981
2260
None
1982
2260
(
1983
2260
atom
1984
2260
+
1986
2260
NAME
1988
2260
power
1989
2260
True
1990
2260
False
1993
2261
~
1971
2261
factor
1972
2261
STRING
1973
2261
NUMBER
1977
2261
{
1978
2261
[
1980
2261
atom_expr
1979
2261
-
1981
2261
None
1982
2261
(
1983
2261
atom
1984
2261
+
1986
2261
NAME
1988
2261
power
1989
2261
True
1990
2261
False
1993
2261
term
2447
2262
~
1971
2262
factor
1972
2262
STRING
1973
2262
NUMBER
1977
2262
{
1978
2262
term
2448
2262
[
1980
2262
atom_expr
1979
2262
-
1981
2262
None
1982
2262
(
1983
2262
atom
1984
2262
+
1986
2262
NAME
1988
2262
power
1989
2262
True
1990
2262
False
1993
2263
~
1971
2263
factor
1972
2263
STRING
1973
2263
NUMBER
1977
2263
{
1978
2263
[
1980
2263
atom_expr
1979
2263
-
1981
2263
None
1982
2263
(
1983
2263
atom
1984
2263
+
1986
2263
term
2449
2263
NAME
1988
2263
power
1989
2263
True
1990
2263
False
1993
2264
~
1971
2264
factor
1972
2264
STRING
1973
2264
NUMBER
1977
2264
{
1978
2264
[
1980
2264
atom_expr
1979
2264
-
1981
2264
None
1982
2264
(
1983
2264
term
2450
2264
atom
1984
2264
+
1986
2264
NAME
1988
2264
power
1989
2264
True
1990
2264
False
1993
2265
~
1971
2265
factor
1972
2265
STRING
1973
2265
shift_expr
1974
2265
arith_expr
1975
2265
term
1976
2265
NUMBER
1977
2265
{
1978
2265
atom_expr
1979
2265
[
1980
2265
-
1981
2265
None
1982
2265
(
1983
2265
atom
1984
2265
+
1986
2265
NAME
1988
2265
power
1989
2265
True
1990
2265
False
1993
2265
and_expr
2451
2266
~
1971
2266
factor
1972
2266
STRING
1973
2266
arith_expr
1975
2266
term
1976
2266
NUMBER
1977
2266
{
1978
2266
[
1980
2266
atom_expr
1979
2266
-
1981
2266
shift_expr
2452
2266
None
1982
2266
(
1983
2266
atom
1984
2266
+
1986
2266
NAME
1988
2266
power
1989
2266
True
1990
2266
False
1993
2267
~
1971
2267
factor
1972
2267
STRING
1973
2267
arith_expr
1975
2267
term
1976
2267
NUMBER
1977
2267
{
1978
2267
[
1980
2267
atom_expr
1979
2267
-
1981
2267
None
1982
2267
(
1983
2267
atom
1984
2267
+
1986
2267
shift_expr
2453
2267
NAME
1988
2267
power
1989
2267
True
1990
2267
False
1993
2268
~
1971
2268
factor
1972
2268
STRING
1973
2268
arith_expr
2454
2268
term
1976
2268
NUMBER
1977
2268
{
1978
2268
[
1980
2268
atom_expr
1979
2268
-
1981
2268
None
1982
2268
(
1983
2268
atom
1984
2268
+
1986
2268
NAME
1988
2268
power
1989
2268
True
1990
2268
False
1993
2269
~
1971
2269
factor
1972
2269
STRING
1973
2269
term
1976
2269
arith_expr
2455
2269
NUMBER
1977
2269
{
1978
2269
[
1980
2269
atom_expr
1979
2269
-
1981
2269
None
1982
2269
(
1983
2269
atom
1984
2269
+
1986
2269
NAME
1988
2269
power
1989
2269
True
1990
2269
False
1993
2270
//
atom -> { }
2270
)
atom -> { }
2270
[
atom -> { }
2270
|
atom -> { }
2270
>
atom -> { }
2270
>=
atom -> { }
2270
==
atom -> { }
2270
&
atom -> { }
2270
not
atom -> { }
2270
**
atom -> { }
2270
in
atom -> { }
2270
,
atom -> { }
2270
or
atom -> { }
2270
<
atom -> { }
2270
!=
atom -> { }
2270
+
atom -> { }
2270
<<
atom -> { }
2270
^
atom -> { }
2270
<=
atom -> { }
2270
if
atom -> { }
2270
/
atom -> { }
2270
is
atom -> { }
2270
-
atom -> { }
2270
>>
atom -> { }
2270
%
atom -> { }
2270
.
atom -> { }
2270
=
atom -> { }
2270
and
atom -> { }
2270
(
atom -> { }
2270
*
atom -> { }
2270
@
atom -> { }
2271
~
1971
2271
STRING
1973
2271
NUMBER
1977
2271
factor
2456
2271
{
1978
2271
[
1980
2271
atom_expr
1979
2271
None
1982
2271
-
1981
2271
(
1983
2271
atom
1984
2271
+
1986
2271
NAME
1988
2271
power
1989
2271
True
1990
2271
False
1993
2272
]
2457
2273
==
atom -> [ ]
2273
%
atom -> [ ]
2273
**
atom -> [ ]
2273
.
atom -> [ ]
2273
<<
atom -> [ ]
2273
not
atom -> [ ]
2273
/
atom -> [ ]
2273
*
atom -> [ ]
2273
if
atom -> [ ]
2273
!=
atom -> [ ]
2273
<=
atom -> [ ]
2273
@
atom -> [ ]
2273
-
atom -> [ ]
2273
>>
atom -> [ ]
2273
^
atom -> [ ]
2273
|
atom -> [ ]
2273
,
atom -> [ ]
2273
<
atom -> [ ]
2273
[
atom -> [ ]
2273
is
atom -> [ ]
2273
in
atom -> [ ]
2273
>
atom -> [ ]
2273
=
atom -> [ ]
2273
+
atom -> [ ]
2273
>=
atom -> [ ]
2273
and
atom -> [ ]
2273
or
atom -> [ ]
2273
)
atom -> [ ]
2273
&
atom -> [ ]
2273
(
atom -> [ ]
2273
//
atom -> [ ]
2274
if
factor -> - factor
2274
/
factor -> - factor
2274
,
factor -> - factor
2274
not
factor -> - factor
2274
<
factor -> - factor
2274
or
factor -> - factor
2274
//
factor -> - factor
2274
!=
factor -> - factor
2274
%
factor -> - factor
2274
|
factor -> - factor
2274
>
factor -> - factor
2274
+
factor -> - factor
2274
=
factor -> - factor
2274
-
factor -> - factor
2274
^
factor -> - factor
2274
in
factor -> - factor
2274
<<
factor -> - factor
2274
&
factor -> - factor
2274
<=
factor -> - factor
2274
==
factor -> - factor
2274
and
factor -> - factor
2274
@
factor -> - factor
2274
>=
factor -> - factor
2274
is
factor -> - factor
2274
>>
factor -> - factor
2274
*
factor -> - factor
2274
)
factor -> - factor
2275
-
atom -> ( )
2275
==
atom -> ( )
2275
/
atom -> ( )
2275
<=
atom -> ( )
2275
(
atom -> ( )
2275
&
atom -> ( )
2275
[
atom -> ( )
2275
,
atom -> ( )
2275
=
atom -> ( )
2275
^
atom -> ( )
2275
or
atom -> ( )
2275
+
atom -> ( )
2275
>>
atom -> ( )
2275
)
atom -> ( )
2275
is
atom -> ( )
2275
*
atom -> ( )
2275
if
atom -> ( )
2275
and
atom -> ( )
2275
>=
atom -> ( )
2275
>
atom -> ( )
2275
@
atom -> ( )
2275
in
atom -> ( )
2275
not
atom -> ( )
2275
<
atom -> ( )
2275
.
atom -> ( )
2275
//
atom -> ( )
2275
%
atom -> ( )
2275
<<
atom -> ( )
2275
|
atom -> ( )
2275
**
atom -> ( )
2275
!=
atom -> ( )
2276
)
2458
2277
~
544
2277
factor
545
2277
STRING
546
2277
shift_expr
547
2277
expr
548
2277
arith_expr
549
2277
term
550
2277
atom_expr
551
2277
NUMBER
552
2277
subscript
553
2277
{
554
2277
[
555
2277
-
556
2277
None
557
2277
+
558
2277
(
559
2277
subscriptlist
2459
2277
atom
561
2277
and_expr
562
2277
NAME
563
2277
power
564
2277
True
565
2277
comparison
566
2277
xor_expr
567
2277
lambda
568
2277
False
569
2277
not_test
570
2277
and_test
571
2277
test
572
2277
or_test
573
2277
not
574
2277
:
maybe_test -> 
2277
maybe_test
575
2277
lambdef
576
2278
arglist
2460
2278
)
2461
2278
~
579
2278
factor
580
2278
STRING
581
2278
shift_expr
582
2278
arith_expr
583
2278
term
584
2278
NUMBER
585
2278
and_expr
586
2278
{
587
2278
atom_expr
589
2278
[
590
2278
-
591
2278
None
592
2278
(
593
2278
atom
594
2278
+
595
2278
not_test
596
2278
test
597
2278
NAME
598
2278
power
599
2278
True
600
2278
comparison
601
2278
xor_expr
602
2278
lambdef
603
2278
False
604
2278
argument
605
2278
and_test
606
2278
lambda
607
2278
or_test
608
2278
expr
609
2278
not
610
2278
**
611
2278
*
612
2279
[
2277
2279
(
2278
2279
//
trailer_expr -> 
2279
trailer
2279
2279
<<
trailer_expr -> 
2279
*
trailer_expr -> 
2279
in
trailer_expr -> 
2279
&
trailer_expr -> 
2279
trailer_expr
2462
2279
and
trailer_expr -> 
2279
.
2281
2279
<=
trailer_expr -> 
2279
,
trailer_expr -> 
2279
|
trailer_expr -> 
2279
or
trailer_expr -> 
2279
>=
trailer_expr -> 
2279
=
trailer_expr -> 
2279
+
trailer_expr -> 
2279
**
trailer_expr -> 
2279
>>
trailer_expr -> 
2279
!=
trailer_expr -> 
2279
-
trailer_expr -> 
2279
/
trailer_expr -> 
2279
%
trailer_expr -> 
2279
is
trailer_expr -> 
2279
<
trailer_expr -> 
2279
>
trailer_expr -> 
2279
if
trailer_expr -> 
2279
^
trailer_expr -> 
2279
==
trailer_expr -> 
2279
@
trailer_expr -> 
2279
)
trailer_expr -> 
2279
not
trailer_expr -> 
2280
<=
atom_expr -> atom trailer_expr
2280
or
atom_expr -> atom trailer_expr
2280
,
atom_expr -> atom trailer_expr
2280
*
atom_expr -> atom trailer_expr
2280
>=
atom_expr -> atom trailer_expr
2280
**
atom_expr -> atom trailer_expr
2280
&
atom_expr -> atom trailer_expr
2280
%
atom_expr -> atom trailer_expr
2280
if
atom_expr -> atom trailer_expr
2280
+
atom_expr -> atom trailer_expr
2280
//
atom_expr -> atom trailer_expr
2280
is
atom_expr -> atom trailer_expr
2280
!=
atom_expr -> atom trailer_expr
2280
|
atom_expr -> atom trailer_expr
2280
<
atom_expr -> atom trailer_expr
2280
@
atom_expr -> atom trailer_expr
2280
not
atom_expr -> atom trailer_expr
2280
-
atom_expr -> atom trailer_expr
2280
in
atom_expr -> atom trailer_expr
2280
/
atom_expr -> atom trailer_expr
2280
^
atom_expr -> atom trailer_expr
2280
=
atom_expr -> atom trailer_expr
2280
>
atom_expr -> atom trailer_expr
2280
==
atom_expr -> atom trailer_expr
2280
<<
atom_expr -> atom trailer_expr
2280
>>
atom_expr -> atom trailer_expr
2280
and
atom_expr -> atom trailer_expr
2280
)
atom_expr -> atom trailer_expr
2281
NAME
2463
2282
~
1971
2282
factor
1972
2282
STRING
1973
2282
shift_expr
1974
2282
arith_expr
1975
2282
term
1976
2282
NUMBER
1977
2282
{
1978
2282
atom_expr
1979
2282
[
1980
2282
xor_expr
2464
2282
-
1981
2282
None
1982
2282
(
1983
2282
atom
1984
2282
and_expr
1985
2282
+
1986
2282
NAME
1988
2282
power
1989
2282
True
1990
2282
False
1993
2283
<
factor -> + factor
2283
,
factor -> + factor
2283
in
factor -> + factor
2283
|
factor -> + factor
2283
==
factor -> + factor
2283
>
factor -> + factor
2283
-
factor -> + factor
2283
and
factor -> + factor
2283
*
factor -> + factor
2283
if
factor -> + factor
2283
%
factor -> + factor
2283
@
factor -> + factor
2283
is
factor -> + factor
2283
//
factor -> + factor
2283
&
factor -> + factor
2283
)
factor -> + factor
2283
^
factor -> + factor
2283
>=
factor -> + factor
2283
not
factor -> + factor
2283
/
factor -> + factor
2283
=
factor -> + factor
2283
or
factor -> + factor
2283
!=
factor -> + factor
2283
<<
factor -> + factor
2283
>>
factor -> + factor
2283
<=
factor -> + factor
2283
+
factor -> + factor
2284
~
1971
2284
factor
1972
2284
STRING
1973
2284
shift_expr
1974
2284
arith_expr
1975
2284
term
1976
2284
NUMBER
1977
2284
{
1978
2284
atom_expr
1979
2284
[
1980
2284
-
1981
2284
None
1982
2284
(
1983
2284
atom
1984
2284
and_expr
1985
2284
+
1986
2284
not_test
1987
2284
NAME
1988
2284
power
1989
2284
True
1990
2284
and_test
2465
2284
comparison
1991
2284
xor_expr
1992
2284
False
1993
2284
expr
1997
2284
not
1998
2285
~
1971
2285
factor
1972
2285
STRING
1973
2285
shift_expr
1974
2285
arith_expr
1975
2285
term
1976
2285
NUMBER
1977
2285
{
1978
2285
atom_expr
1979
2285
[
1980
2285
-
1981
2285
None
1982
2285
(
1983
2285
atom
1984
2285
and_expr
1985
2285
+
1986
2285
expr
2466
2285
NAME
1988
2285
power
1989
2285
True
1990
2285
xor_expr
1992
2285
False
1993
2286
or_test
2467
2286
factor
1972
2286
~
1971
2286
shift_expr
1974
2286
STRING
1973
2286
arith_expr
1975
2286
term
1976
2286
NUMBER
1977
2286
{
1978
2286
atom_expr
1979
2286
[
1980
2286
-
1981
2286
None
1982
2286
(
1983
2286
atom
1984
2286
and_expr
1985
2286
+
1986
2286
not_test
1987
2286
NAME
1988
2286
power
1989
2286
True
1990
2286
comparison
1991
2286
xor_expr
1992
2286
False
1993
2286
and_test
1994
2286
expr
1997
2286
not
1998
2287
:
2468
2288
~
1971
2288
factor
1972
2288
STRING
1973
2288
shift_expr
1974
2288
arith_expr
1975
2288
term
1976
2288
NUMBER
1977
2288
{
1978
2288
atom_expr
1979
2288
[
1980
2288
-
1981
2288
None
1982
2288
(
1983
2288
atom
1984
2288
and_expr
1985
2288
+
1986
2288
not_test
1987
2288
NAME
1988
2288
power
1989
2288
True
1990
2288
comparison
1991
2288
xor_expr
1992
2288
False
1993
2288
and_test
1994
2288
lambda
1995
2288
test
2469
2288
lambdef
1996
2288
expr
1997
2288
not
1998
2288
or_test
1999
2289
~
1971
2289
factor
1972
2289
STRING
1973
2289
shift_expr
1974
2289
arith_expr
1975
2289
term
1976
2289
NUMBER
1977
2289
{
1978
2289
atom_expr
1979
2289
[
1980
2289
-
1981
2289
None
1982
2289
(
1983
2289
atom
1984
2289
and_expr
1985
2289
+
1986
2289
NAME
1988
2289
power
1989
2289
True
1990
2289
xor_expr
1992
2289
False
1993
2289
comparison
2470
2289
expr
1997
2290
)
not_test -> not not_test
2290
,
not_test -> not not_test
2290
=
not_test -> not not_test
2290
if
not_test -> not not_test
2290
and
not_test -> not not_test
2290
or
not_test -> not not_test
2291
~
509
2291
factor
510
2291
STRING
511
2291
shift_expr
512
2291
term
513
2291
NUMBER
514
2291
{
515
2291
atom_expr
516
2291
[
517
2291
-
518
2291
None
519
2291
(
520
2291
atom
521
2291
arith_expr
522
2291
False
523
2291
+
524
2291
NAME
526
2291
power
527
2291
True
528
2291
xor_expr
529
2291
comparison
530
2291
and_expr
531
2291
not_test
532
2291
or_test
2471
2291
not
533
2291
expr
534
2291
and_test
535
2292
[
try_stmt -> try : suite except_clause finally : suite
2292
yield
try_stmt -> try : suite except_clause finally : suite
2292
return
try_stmt -> try : suite except_clause finally : suite
2292
$
try_stmt -> try : suite except_clause finally : suite
2292
~
try_stmt -> try : suite except_clause finally : suite
2292
raise
try_stmt -> try : suite except_clause finally : suite
2292
False
try_stmt -> try : suite except_clause finally : suite
2292
global
try_stmt -> try : suite except_clause finally : suite
2292
begsim
try_stmt -> try : suite except_clause finally : suite
2292
class
try_stmt -> try : suite except_clause finally : suite
2292
endsim
try_stmt -> try : suite except_clause finally : suite
2292
lambda
try_stmt -> try : suite except_clause finally : suite
2292
-
try_stmt -> try : suite except_clause finally : suite
2292
del
try_stmt -> try : suite except_clause finally : suite
2292
True
try_stmt -> try : suite except_clause finally : suite
2292
@
try_stmt -> try : suite except_clause finally : suite
2292
{
try_stmt -> try : suite except_clause finally : suite
2292
NEWLINE
try_stmt -> try : suite except_clause finally : suite
2292
with
try_stmt -> try : suite except_clause finally : suite
2292
pass
try_stmt -> try : suite except_clause finally : suite
2292
NAME
try_stmt -> try : suite except_clause finally : suite
2292
conf
try_stmt -> try : suite except_clause finally : suite
2292
STRING
try_stmt -> try : suite except_clause finally : suite
2292
for
try_stmt -> try : suite except_clause finally : suite
2292
while
try_stmt -> try : suite except_clause finally : suite
2292
+
try_stmt -> try : suite except_clause finally : suite
2292
(
try_stmt -> try : suite except_clause finally : suite
2292
nonlocal
try_stmt -> try : suite except_clause finally : suite
2292
resetstats
try_stmt -> try : suite except_clause finally : suite
2292
def
try_stmt -> try : suite except_clause finally : suite
2292
break
try_stmt -> try : suite except_clause finally : suite
2292
not
try_stmt -> try : suite except_clause finally : suite
2292
continue
try_stmt -> try : suite except_clause finally : suite
2292
try
try_stmt -> try : suite except_clause finally : suite
2292
assert
try_stmt -> try : suite except_clause finally : suite
2292
None
try_stmt -> try : suite except_clause finally : suite
2292
if
try_stmt -> try : suite except_clause finally : suite
2292
NUMBER
try_stmt -> try : suite except_clause finally : suite
2293
NEWLINE
2472
2294
False
suite -> simple_stmt
2294
-
suite -> simple_stmt
2294
break
suite -> simple_stmt
2294
@
suite -> simple_stmt
2294
endsim
suite -> simple_stmt
2294
+
suite -> simple_stmt
2294
STRING
suite -> simple_stmt
2294
finally
suite -> simple_stmt
2294
if
suite -> simple_stmt
2294
NEWLINE
suite -> simple_stmt
2294
return
suite -> simple_stmt
2294
~
suite -> simple_stmt
2294
for
suite -> simple_stmt
2294
pass
suite -> simple_stmt
2294
with
suite -> simple_stmt
2294
while
suite -> simple_stmt
2294
NAME
suite -> simple_stmt
2294
del
suite -> simple_stmt
2294
(
suite -> simple_stmt
2294
class
suite -> simple_stmt
2294
[
suite -> simple_stmt
2294
resetstats
suite -> simple_stmt
2294
def
suite -> simple_stmt
2294
continue
suite -> simple_stmt
2294
begsim
suite -> simple_stmt
2294
raise
suite -> simple_stmt
2294
yield
suite -> simple_stmt
2294
nonlocal
suite -> simple_stmt
2294
None
suite -> simple_stmt
2294
not
suite -> simple_stmt
2294
{
suite -> simple_stmt
2294
lambda
suite -> simple_stmt
2294
$
suite -> simple_stmt
2294
NUMBER
suite -> simple_stmt
2294
try
suite -> simple_stmt
2294
assert
suite -> simple_stmt
2294
global
suite -> simple_stmt
2294
True
suite -> simple_stmt
2294
conf
suite -> simple_stmt
2295
del
try_stmt -> try : suite except_clause else : suite
2295
+
try_stmt -> try : suite except_clause else : suite
2295
finally
2473
2295
True
try_stmt -> try : suite except_clause else : suite
2295
nonlocal
try_stmt -> try : suite except_clause else : suite
2295
-
try_stmt -> try : suite except_clause else : suite
2295
break
try_stmt -> try : suite except_clause else : suite
2295
class
try_stmt -> try : suite except_clause else : suite
2295
lambda
try_stmt -> try : suite except_clause else : suite
2295
@
try_stmt -> try : suite except_clause else : suite
2295
(
try_stmt -> try : suite except_clause else : suite
2295
$
try_stmt -> try : suite except_clause else : suite
2295
{
try_stmt -> try : suite except_clause else : suite
2295
False
try_stmt -> try : suite except_clause else : suite
2295
conf
try_stmt -> try : suite except_clause else : suite
2295
with
try_stmt -> try : suite except_clause else : suite
2295
raise
try_stmt -> try : suite except_clause else : suite
2295
continue
try_stmt -> try : suite except_clause else : suite
2295
return
try_stmt -> try : suite except_clause else : suite
2295
endsim
try_stmt -> try : suite except_clause else : suite
2295
[
try_stmt -> try : suite except_clause else : suite
2295
global
try_stmt -> try : suite except_clause else : suite
2295
STRING
try_stmt -> try : suite except_clause else : suite
2295
assert
try_stmt -> try : suite except_clause else : suite
2295
NEWLINE
try_stmt -> try : suite except_clause else : suite
2295
~
try_stmt -> try : suite except_clause else : suite
2295
NAME
try_stmt -> try : suite except_clause else : suite
2295
NUMBER
try_stmt -> try : suite except_clause else : suite
2295
while
try_stmt -> try : suite except_clause else : suite
2295
yield
try_stmt -> try : suite except_clause else : suite
2295
def
try_stmt -> try : suite except_clause else : suite
2295
resetstats
try_stmt -> try : suite except_clause else : suite
2295
None
try_stmt -> try : suite except_clause else : suite
2295
for
try_stmt -> try : suite except_clause else : suite
2295
pass
try_stmt -> try : suite except_clause else : suite
2295
if
try_stmt -> try : suite except_clause else : suite
2295
try
try_stmt -> try : suite except_clause else : suite
2295
not
try_stmt -> try : suite except_clause else : suite
2295
begsim
try_stmt -> try : suite except_clause else : suite
2296
INDENT
2474
2297
<=
term -> factor / term
2297
!=
term -> factor / term
2297
and
term -> factor / term
2297
or
term -> factor / term
2297
|
term -> factor / term
2297
^
term -> factor / term
2297
>>
term -> factor / term
2297
==
term -> factor / term
2297
>
term -> factor / term
2297
if
term -> factor / term
2297
:
term -> factor / term
2297
&
term -> factor / term
2297
as
term -> factor / term
2297
<<
term -> factor / term
2297
+
term -> factor / term
2297
-
term -> factor / term
2297
not
term -> factor / term
2297
in
term -> factor / term
2297
<
term -> factor / term
2297
is
term -> factor / term
2297
>=
term -> factor / term
2298
is
term -> factor @ term
2298
and
term -> factor @ term
2298
>
term -> factor @ term
2298
not
term -> factor @ term
2298
in
term -> factor @ term
2298
as
term -> factor @ term
2298
==
term -> factor @ term
2298
<
term -> factor @ term
2298
or
term -> factor @ term
2298
!=
term -> factor @ term
2298
<<
term -> factor @ term
2298
<=
term -> factor @ term
2298
if
term -> factor @ term
2298
|
term -> factor @ term
2298
+
term -> factor @ term
2298
&
term -> factor @ term
2298
-
term -> factor @ term
2298
>=
term -> factor @ term
2298
:
term -> factor @ term
2298
>>
term -> factor @ term
2298
^
term -> factor @ term
2299
>
term -> factor % term
2299
!=
term -> factor % term
2299
&
term -> factor % term
2299
>=
term -> factor % term
2299
or
term -> factor % term
2299
==
term -> factor % term
2299
^
term -> factor % term
2299
in
term -> factor % term
2299
|
term -> factor % term
2299
and
term -> factor % term
2299
if
term -> factor % term
2299
not
term -> factor % term
2299
is
term -> factor % term
2299
as
term -> factor % term
2299
<
term -> factor % term
2299
>>
term -> factor % term
2299
-
term -> factor % term
2299
<=
term -> factor % term
2299
<<
term -> factor % term
2299
+
term -> factor % term
2299
:
term -> factor % term
2300
&
term -> factor * term
2300
-
term -> factor * term
2300
as
term -> factor * term
2300
:
term -> factor * term
2300
in
term -> factor * term
2300
or
term -> factor * term
2300
<=
term -> factor * term
2300
|
term -> factor * term
2300
and
term -> factor * term
2300
not
term -> factor * term
2300
<<
term -> factor * term
2300
==
term -> factor * term
2300
if
term -> factor * term
2300
>
term -> factor * term
2300
>>
term -> factor * term
2300
<
term -> factor * term
2300
!=
term -> factor * term
2300
>=
term -> factor * term
2300
^
term -> factor * term
2300
+
term -> factor * term
2300
is
term -> factor * term
2301
+
term -> factor // term
2301
==
term -> factor // term
2301
<<
term -> factor // term
2301
<
term -> factor // term
2301
if
term -> factor // term
2301
in
term -> factor // term
2301
:
term -> factor // term
2301
!=
term -> factor // term
2301
>
term -> factor // term
2301
not
term -> factor // term
2301
as
term -> factor // term
2301
>=
term -> factor // term
2301
and
term -> factor // term
2301
is
term -> factor // term
2301
-
term -> factor // term
2301
&
term -> factor // term
2301
|
term -> factor // term
2301
^
term -> factor // term
2301
<=
term -> factor // term
2301
or
term -> factor // term
2301
>>
term -> factor // term
2302
:
2475
2303
except_clause
2310
2303
maybe_except_clause
2476
2303
except
1139
2303
@
maybe_except_clause -> 
2303
pass
maybe_except_clause -> 
2303
if
maybe_except_clause -> 
2303
NUMBER
maybe_except_clause -> 
2303
NEWLINE
maybe_except_clause -> 
2303
class
maybe_except_clause -> 
2303
del
maybe_except_clause -> 
2303
raise
maybe_except_clause -> 
2303
conf
maybe_except_clause -> 
2303
for
maybe_except_clause -> 
2303
assert
maybe_except_clause -> 
2303
$
maybe_except_clause -> 
2303
STRING
maybe_except_clause -> 
2303
[
maybe_except_clause -> 
2303
None
maybe_except_clause -> 
2303
return
maybe_except_clause -> 
2303
not
maybe_except_clause -> 
2303
yield
maybe_except_clause -> 
2303
nonlocal
maybe_except_clause -> 
2303
-
maybe_except_clause -> 
2303
try
maybe_except_clause -> 
2303
while
maybe_except_clause -> 
2303
begsim
maybe_except_clause -> 
2303
lambda
maybe_except_clause -> 
2303
(
maybe_except_clause -> 
2303
~
maybe_except_clause -> 
2303
global
maybe_except_clause -> 
2303
NAME
maybe_except_clause -> 
2303
else
maybe_except_clause -> 
2303
def
maybe_except_clause -> 
2303
resetstats
maybe_except_clause -> 
2303
False
maybe_except_clause -> 
2303
break
maybe_except_clause -> 
2303
with
maybe_except_clause -> 
2303
+
maybe_except_clause -> 
2303
endsim
maybe_except_clause -> 
2303
continue
maybe_except_clause -> 
2303
{
maybe_except_clause -> 
2303
True
maybe_except_clause -> 
2303
finally
maybe_except_clause -> 
2304
|
and_expr -> shift_expr & and_expr
2304
!=
and_expr -> shift_expr & and_expr
2304
and
and_expr -> shift_expr & and_expr
2304
>=
and_expr -> shift_expr & and_expr
2304
<=
and_expr -> shift_expr & and_expr
2304
not
and_expr -> shift_expr & and_expr
2304
is
and_expr -> shift_expr & and_expr
2304
in
and_expr -> shift_expr & and_expr
2304
or
and_expr -> shift_expr & and_expr
2304
==
and_expr -> shift_expr & and_expr
2304
^
and_expr -> shift_expr & and_expr
2304
>
and_expr -> shift_expr & and_expr
2304
<
and_expr -> shift_expr & and_expr
2304
if
and_expr -> shift_expr & and_expr
2304
as
and_expr -> shift_expr & and_expr
2304
:
and_expr -> shift_expr & and_expr
2305
as
comparison -> expr comp_op comparison
2305
or
comparison -> expr comp_op comparison
2305
:
comparison -> expr comp_op comparison
2305
if
comparison -> expr comp_op comparison
2305
and
comparison -> expr comp_op comparison
2306
:
arith_expr -> term + arith_expr
2306
>>
arith_expr -> term + arith_expr
2306
^
arith_expr -> term + arith_expr
2306
<
arith_expr -> term + arith_expr
2306
|
arith_expr -> term + arith_expr
2306
and
arith_expr -> term + arith_expr
2306
!=
arith_expr -> term + arith_expr
2306
or
arith_expr -> term + arith_expr
2306
not
arith_expr -> term + arith_expr
2306
<=
arith_expr -> term + arith_expr
2306
>
arith_expr -> term + arith_expr
2306
is
arith_expr -> term + arith_expr
2306
if
arith_expr -> term + arith_expr
2306
==
arith_expr -> term + arith_expr
2306
as
arith_expr -> term + arith_expr
2306
&
arith_expr -> term + arith_expr
2306
>=
arith_expr -> term + arith_expr
2306
in
arith_expr -> term + arith_expr
2306
<<
arith_expr -> term + arith_expr
2307
==
arith_expr -> term - arith_expr
2307
as
arith_expr -> term - arith_expr
2307
is
arith_expr -> term - arith_expr
2307
<=
arith_expr -> term - arith_expr
2307
not
arith_expr -> term - arith_expr
2307
<<
arith_expr -> term - arith_expr
2307
&
arith_expr -> term - arith_expr
2307
|
arith_expr -> term - arith_expr
2307
and
arith_expr -> term - arith_expr
2307
or
arith_expr -> term - arith_expr
2307
:
arith_expr -> term - arith_expr
2307
>>
arith_expr -> term - arith_expr
2307
if
arith_expr -> term - arith_expr
2307
>=
arith_expr -> term - arith_expr
2307
<
arith_expr -> term - arith_expr
2307
^
arith_expr -> term - arith_expr
2307
>
arith_expr -> term - arith_expr
2307
!=
arith_expr -> term - arith_expr
2307
in
arith_expr -> term - arith_expr
2308
~
simple_stmt -> small_stmt NEWLINE
2308
begsim
simple_stmt -> small_stmt NEWLINE
2308
endsim
simple_stmt -> small_stmt NEWLINE
2308
if
simple_stmt -> small_stmt NEWLINE
2308
break
simple_stmt -> small_stmt NEWLINE
2308
False
simple_stmt -> small_stmt NEWLINE
2308
def
simple_stmt -> small_stmt NEWLINE
2308
STRING
simple_stmt -> small_stmt NEWLINE
2308
finally
simple_stmt -> small_stmt NEWLINE
2308
else
simple_stmt -> small_stmt NEWLINE
2308
assert
simple_stmt -> small_stmt NEWLINE
2308
lambda
simple_stmt -> small_stmt NEWLINE
2308
yield
simple_stmt -> small_stmt NEWLINE
2308
True
simple_stmt -> small_stmt NEWLINE
2308
+
simple_stmt -> small_stmt NEWLINE
2308
try
simple_stmt -> small_stmt NEWLINE
2308
for
simple_stmt -> small_stmt NEWLINE
2308
conf
simple_stmt -> small_stmt NEWLINE
2308
nonlocal
simple_stmt -> small_stmt NEWLINE
2308
continue
simple_stmt -> small_stmt NEWLINE
2308
-
simple_stmt -> small_stmt NEWLINE
2308
resetstats
simple_stmt -> small_stmt NEWLINE
2308
raise
simple_stmt -> small_stmt NEWLINE
2308
(
simple_stmt -> small_stmt NEWLINE
2308
None
simple_stmt -> small_stmt NEWLINE
2308
NEWLINE
simple_stmt -> small_stmt NEWLINE
2308
while
simple_stmt -> small_stmt NEWLINE
2308
not
simple_stmt -> small_stmt NEWLINE
2308
$
simple_stmt -> small_stmt NEWLINE
2308
except
simple_stmt -> small_stmt NEWLINE
2308
NAME
simple_stmt -> small_stmt NEWLINE
2308
del
simple_stmt -> small_stmt NEWLINE
2308
with
simple_stmt -> small_stmt NEWLINE
2308
global
simple_stmt -> small_stmt NEWLINE
2308
@
simple_stmt -> small_stmt NEWLINE
2308
class
simple_stmt -> small_stmt NEWLINE
2308
{
simple_stmt -> small_stmt NEWLINE
2308
NUMBER
simple_stmt -> small_stmt NEWLINE
2308
[
simple_stmt -> small_stmt NEWLINE
2308
pass
simple_stmt -> small_stmt NEWLINE
2308
return
simple_stmt -> small_stmt NEWLINE
2309
factor
1
2309
decorators
1661
2309
(
3
2309
STRING
4
2309
expr
5
2309
term
6
2309
conf
1662
2309
not
8
2309
while
1663
2309
or_test
10
2309
if
1664
2309
~
12
2309
atom_expr
13
2309
comparison
14
2309
None
15
2309
class
1665
2309
xor_expr
17
2309
arith_expr
18
2309
+
19
2309
stmt_list
2477
2309
confdef
1666
2309
decorated
1667
2309
atom
22
2309
try_stmt
1668
2309
def
1669
2309
compound_stmt
1670
2309
try
1671
2309
NUMBER
26
2309
NAME
27
2309
False
28
2309
shift_expr
29
2309
while_stmt
1672
2309
[
32
2309
and_expr
33
2309
not_test
34
2309
{
35
2309
-
36
2309
simple_stmt
1673
2309
for
1674
2309
and_test
39
2309
@
40
2309
with_stmt
1675
2309
funcdef
1676
2309
small_stmt
1677
2309
power
43
2309
classdef
1678
2309
lambdef
45
2309
lambda
46
2309
test
47
2309
True
48
2309
if_stmt
1679
2309
for_stmt
1680
2309
with
1681
2309
flow_stmt
53
2309
break
54
2309
raise
55
2309
yield
56
2309
assert
57
2309
continue_stmt
58
2309
stat_stmt
59
2309
return_stmt
60
2309
test_list
61
2309
stmt
1682
2309
continue
62
2309
yield_stmt
63
2309
decorator
64
2309
sim_stmt
65
2309
resetstats
66
2309
del
67
2309
return
68
2309
raise_stmt
69
2309
nonlocal
70
2309
pass_stmt
71
2309
expr_stmt
72
2309
assert_stmt
74
2309
endsim
75
2309
pass
76
2309
global_stmt
77
2309
del_stmt
78
2309
global
79
2309
break_stmt
82
2309
begsim
83
2309
nonlocal_stmt
84
2310
try
maybe_except_clause -> except_clause
2310
return
maybe_except_clause -> except_clause
2310
for
maybe_except_clause -> except_clause
2310
-
maybe_except_clause -> except_clause
2310
del
maybe_except_clause -> except_clause
2310
assert
maybe_except_clause -> except_clause
2310
None
maybe_except_clause -> except_clause
2310
conf
maybe_except_clause -> except_clause
2310
raise
maybe_except_clause -> except_clause
2310
(
maybe_except_clause -> except_clause
2310
True
maybe_except_clause -> except_clause
2310
nonlocal
maybe_except_clause -> except_clause
2310
else
maybe_except_clause -> except_clause
2310
def
maybe_except_clause -> except_clause
2310
STRING
maybe_except_clause -> except_clause
2310
+
maybe_except_clause -> except_clause
2310
[
maybe_except_clause -> except_clause
2310
yield
maybe_except_clause -> except_clause
2310
with
maybe_except_clause -> except_clause
2310
False
maybe_except_clause -> except_clause
2310
resetstats
maybe_except_clause -> except_clause
2310
while
maybe_except_clause -> except_clause
2310
global
maybe_except_clause -> except_clause
2310
not
maybe_except_clause -> except_clause
2310
begsim
maybe_except_clause -> except_clause
2310
lambda
maybe_except_clause -> except_clause
2310
@
maybe_except_clause -> except_clause
2310
NUMBER
maybe_except_clause -> except_clause
2310
NAME
maybe_except_clause -> except_clause
2310
{
maybe_except_clause -> except_clause
2310
~
maybe_except_clause -> except_clause
2310
finally
maybe_except_clause -> except_clause
2310
pass
maybe_except_clause -> except_clause
2310
endsim
maybe_except_clause -> except_clause
2310
continue
maybe_except_clause -> except_clause
2310
class
maybe_except_clause -> except_clause
2310
if
maybe_except_clause -> except_clause
2310
NEWLINE
maybe_except_clause -> except_clause
2310
$
maybe_except_clause -> except_clause
2310
break
maybe_except_clause -> except_clause
2311
raise
except_clause -> except : suite maybe_except_clause
2311
finally
except_clause -> except : suite maybe_except_clause
2311
True
except_clause -> except : suite maybe_except_clause
2311
not
except_clause -> except : suite maybe_except_clause
2311
False
except_clause -> except : suite maybe_except_clause
2311
[
except_clause -> except : suite maybe_except_clause
2311
None
except_clause -> except : suite maybe_except_clause
2311
pass
except_clause -> except : suite maybe_except_clause
2311
del
except_clause -> except : suite maybe_except_clause
2311
nonlocal
except_clause -> except : suite maybe_except_clause
2311
begsim
except_clause -> except : suite maybe_except_clause
2311
@
except_clause -> except : suite maybe_except_clause
2311
try
except_clause -> except : suite maybe_except_clause
2311
STRING
except_clause -> except : suite maybe_except_clause
2311
global
except_clause -> except : suite maybe_except_clause
2311
NUMBER
except_clause -> except : suite maybe_except_clause
2311
lambda
except_clause -> except : suite maybe_except_clause
2311
while
except_clause -> except : suite maybe_except_clause
2311
conf
except_clause -> except : suite maybe_except_clause
2311
NEWLINE
except_clause -> except : suite maybe_except_clause
2311
NAME
except_clause -> except : suite maybe_except_clause
2311
for
except_clause -> except : suite maybe_except_clause
2311
+
except_clause -> except : suite maybe_except_clause
2311
else
except_clause -> except : suite maybe_except_clause
2311
$
except_clause -> except : suite maybe_except_clause
2311
if
except_clause -> except : suite maybe_except_clause
2311
assert
except_clause -> except : suite maybe_except_clause
2311
def
except_clause -> except : suite maybe_except_clause
2311
break
except_clause -> except : suite maybe_except_clause
2311
return
except_clause -> except : suite maybe_except_clause
2311
class
except_clause -> except : suite maybe_except_clause
2311
continue
except_clause -> except : suite maybe_except_clause
2311
(
except_clause -> except : suite maybe_except_clause
2311
with
except_clause -> except : suite maybe_except_clause
2311
-
except_clause -> except : suite maybe_except_clause
2311
{
except_clause -> except : suite maybe_except_clause
2311
~
except_clause -> except : suite maybe_except_clause
2311
yield
except_clause -> except : suite maybe_except_clause
2311
resetstats
except_clause -> except : suite maybe_except_clause
2311
endsim
except_clause -> except : suite maybe_except_clause
2312
if
or_test -> and_test or or_test
2312
as
or_test -> and_test or or_test
2312
:
or_test -> and_test or or_test
2313
@
power -> atom_expr ** factor
2313
==
power -> atom_expr ** factor
2313
&
power -> atom_expr ** factor
2313
-
power -> atom_expr ** factor
2313
>
power -> atom_expr ** factor
2313
and
power -> atom_expr ** factor
2313
|
power -> atom_expr ** factor
2313
<=
power -> atom_expr ** factor
2313
%
power -> atom_expr ** factor
2313
or
power -> atom_expr ** factor
2313
:
power -> atom_expr ** factor
2313
*
power -> atom_expr ** factor
2313
as
power -> atom_expr ** factor
2313
not
power -> atom_expr ** factor
2313
in
power -> atom_expr ** factor
2313
<<
power -> atom_expr ** factor
2313
//
power -> atom_expr ** factor
2313
/
power -> atom_expr ** factor
2313
>>
power -> atom_expr ** factor
2313
^
power -> atom_expr ** factor
2313
if
power -> atom_expr ** factor
2313
!=
power -> atom_expr ** factor
2313
is
power -> atom_expr ** factor
2313
<
power -> atom_expr ** factor
2313
+
power -> atom_expr ** factor
2313
>=
power -> atom_expr ** factor
2314
/
atom -> [ test_list_comp ]
2314
*
atom -> [ test_list_comp ]
2314
or
atom -> [ test_list_comp ]
2314
|
atom -> [ test_list_comp ]
2314
==
atom -> [ test_list_comp ]
2314
is
atom -> [ test_list_comp ]
2314
-
atom -> [ test_list_comp ]
2314
**
atom -> [ test_list_comp ]
2314
&
atom -> [ test_list_comp ]
2314
(
atom -> [ test_list_comp ]
2314
<
atom -> [ test_list_comp ]
2314
:
atom -> [ test_list_comp ]
2314
@
atom -> [ test_list_comp ]
2314
//
atom -> [ test_list_comp ]
2314
>
atom -> [ test_list_comp ]
2314
if
atom -> [ test_list_comp ]
2314
in
atom -> [ test_list_comp ]
2314
^
atom -> [ test_list_comp ]
2314
<<
atom -> [ test_list_comp ]
2314
[
atom -> [ test_list_comp ]
2314
!=
atom -> [ test_list_comp ]
2314
<=
atom -> [ test_list_comp ]
2314
and
atom -> [ test_list_comp ]
2314
%
atom -> [ test_list_comp ]
2314
not
atom -> [ test_list_comp ]
2314
+
atom -> [ test_list_comp ]
2314
>=
atom -> [ test_list_comp ]
2314
>>
atom -> [ test_list_comp ]
2314
.
atom -> [ test_list_comp ]
2314
as
atom -> [ test_list_comp ]
2315
@
atom -> ( test_list_comp )
2315
>>
atom -> ( test_list_comp )
2315
<<
atom -> ( test_list_comp )
2315
:
atom -> ( test_list_comp )
2315
==
atom -> ( test_list_comp )
2315
is
atom -> ( test_list_comp )
2315
or
atom -> ( test_list_comp )
2315
<=
atom -> ( test_list_comp )
2315
[
atom -> ( test_list_comp )
2315
%
atom -> ( test_list_comp )
2315
if
atom -> ( test_list_comp )
2315
^
atom -> ( test_list_comp )
2315
as
atom -> ( test_list_comp )
2315
<
atom -> ( test_list_comp )
2315
and
atom -> ( test_list_comp )
2315
+
atom -> ( test_list_comp )
2315
&
atom -> ( test_list_comp )
2315
!=
atom -> ( test_list_comp )
2315
in
atom -> ( test_list_comp )
2315
**
atom -> ( test_list_comp )
2315
not
atom -> ( test_list_comp )
2315
-
atom -> ( test_list_comp )
2315
(
atom -> ( test_list_comp )
2315
*
atom -> ( test_list_comp )
2315
|
atom -> ( test_list_comp )
2315
//
atom -> ( test_list_comp )
2315
>
atom -> ( test_list_comp )
2315
>=
atom -> ( test_list_comp )
2315
.
atom -> ( test_list_comp )
2315
/
atom -> ( test_list_comp )
2316
>=
shift_expr -> arith_expr >> shift_expr
2316
not
shift_expr -> arith_expr >> shift_expr
2316
>
shift_expr -> arith_expr >> shift_expr
2316
^
shift_expr -> arith_expr >> shift_expr
2316
:
shift_expr -> arith_expr >> shift_expr
2316
is
shift_expr -> arith_expr >> shift_expr
2316
&
shift_expr -> arith_expr >> shift_expr
2316
if
shift_expr -> arith_expr >> shift_expr
2316
!=
shift_expr -> arith_expr >> shift_expr
2316
<=
shift_expr -> arith_expr >> shift_expr
2316
and
shift_expr -> arith_expr >> shift_expr
2316
==
shift_expr -> arith_expr >> shift_expr
2316
as
shift_expr -> arith_expr >> shift_expr
2316
in
shift_expr -> arith_expr >> shift_expr
2316
or
shift_expr -> arith_expr >> shift_expr
2316
|
shift_expr -> arith_expr >> shift_expr
2316
<
shift_expr -> arith_expr >> shift_expr
2317
:
shift_expr -> arith_expr << shift_expr
2317
>=
shift_expr -> arith_expr << shift_expr
2317
in
shift_expr -> arith_expr << shift_expr
2317
>
shift_expr -> arith_expr << shift_expr
2317
|
shift_expr -> arith_expr << shift_expr
2317
!=
shift_expr -> arith_expr << shift_expr
2317
<=
shift_expr -> arith_expr << shift_expr
2317
&
shift_expr -> arith_expr << shift_expr
2317
not
shift_expr -> arith_expr << shift_expr
2317
^
shift_expr -> arith_expr << shift_expr
2317
<
shift_expr -> arith_expr << shift_expr
2317
==
shift_expr -> arith_expr << shift_expr
2317
if
shift_expr -> arith_expr << shift_expr
2317
as
shift_expr -> arith_expr << shift_expr
2317
or
shift_expr -> arith_expr << shift_expr
2317
is
shift_expr -> arith_expr << shift_expr
2317
and
shift_expr -> arith_expr << shift_expr
2318
]
2478
2319
/
trailer -> ( )
2319
[
trailer -> ( )
2319
(
trailer -> ( )
2319
|
trailer -> ( )
2319
<=
trailer -> ( )
2319
in
trailer -> ( )
2319
not
trailer -> ( )
2319
>>
trailer -> ( )
2319
^
trailer -> ( )
2319
.
trailer -> ( )
2319
**
trailer -> ( )
2319
if
trailer -> ( )
2319
+
trailer -> ( )
2319
is
trailer -> ( )
2319
<
trailer -> ( )
2319
>
trailer -> ( )
2319
==
trailer -> ( )
2319
:
trailer -> ( )
2319
<<
trailer -> ( )
2319
//
trailer -> ( )
2319
*
trailer -> ( )
2319
-
trailer -> ( )
2319
as
trailer -> ( )
2319
>=
trailer -> ( )
2319
%
trailer -> ( )
2319
and
trailer -> ( )
2319
@
trailer -> ( )
2319
&
trailer -> ( )
2319
!=
trailer -> ( )
2319
or
trailer -> ( )
2320
)
2479
2321
:
trailer_expr -> trailer trailer_expr
2321
is
trailer_expr -> trailer trailer_expr
2321
!=
trailer_expr -> trailer trailer_expr
2321
<<
trailer_expr -> trailer trailer_expr
2321
and
trailer_expr -> trailer trailer_expr
2321
&
trailer_expr -> trailer trailer_expr
2321
//
trailer_expr -> trailer trailer_expr
2321
|
trailer_expr -> trailer trailer_expr
2321
==
trailer_expr -> trailer trailer_expr
2321
<
trailer_expr -> trailer trailer_expr
2321
or
trailer_expr -> trailer trailer_expr
2321
^
trailer_expr -> trailer trailer_expr
2321
<=
trailer_expr -> trailer trailer_expr
2321
@
trailer_expr -> trailer trailer_expr
2321
not
trailer_expr -> trailer trailer_expr
2321
in
trailer_expr -> trailer trailer_expr
2321
as
trailer_expr -> trailer trailer_expr
2321
*
trailer_expr -> trailer trailer_expr
2321
+
trailer_expr -> trailer trailer_expr
2321
if
trailer_expr -> trailer trailer_expr
2321
**
trailer_expr -> trailer trailer_expr
2321
>>
trailer_expr -> trailer trailer_expr
2321
>=
trailer_expr -> trailer trailer_expr
2321
%
trailer_expr -> trailer trailer_expr
2321
-
trailer_expr -> trailer trailer_expr
2321
>
trailer_expr -> trailer trailer_expr
2321
/
trailer_expr -> trailer trailer_expr
2322
<=
trailer -> . NAME
2322
if
trailer -> . NAME
2322
<
trailer -> . NAME
2322
%
trailer -> . NAME
2322
.
trailer -> . NAME
2322
as
trailer -> . NAME
2322
//
trailer -> . NAME
2322
:
trailer -> . NAME
2322
|
trailer -> . NAME
2322
==
trailer -> . NAME
2322
>=
trailer -> . NAME
2322
[
trailer -> . NAME
2322
^
trailer -> . NAME
2322
<<
trailer -> . NAME
2322
in
trailer -> . NAME
2322
&
trailer -> . NAME
2322
or
trailer -> . NAME
2322
*
trailer -> . NAME
2322
(
trailer -> . NAME
2322
and
trailer -> . NAME
2322
-
trailer -> . NAME
2322
+
trailer -> . NAME
2322
!=
trailer -> . NAME
2322
not
trailer -> . NAME
2322
**
trailer -> . NAME
2322
>>
trailer -> . NAME
2322
@
trailer -> . NAME
2322
/
trailer -> . NAME
2322
is
trailer -> . NAME
2322
>
trailer -> . NAME
2323
==
xor_expr -> and_expr ^ xor_expr
2323
!=
xor_expr -> and_expr ^ xor_expr
2323
>
xor_expr -> and_expr ^ xor_expr
2323
not
xor_expr -> and_expr ^ xor_expr
2323
:
xor_expr -> and_expr ^ xor_expr
2323
if
xor_expr -> and_expr ^ xor_expr
2323
is
xor_expr -> and_expr ^ xor_expr
2323
<=
xor_expr -> and_expr ^ xor_expr
2323
as
xor_expr -> and_expr ^ xor_expr
2323
|
xor_expr -> and_expr ^ xor_expr
2323
>=
xor_expr -> and_expr ^ xor_expr
2323
and
xor_expr -> and_expr ^ xor_expr
2323
in
xor_expr -> and_expr ^ xor_expr
2323
<
xor_expr -> and_expr ^ xor_expr
2323
or
xor_expr -> and_expr ^ xor_expr
2324
and
expr -> xor_expr | expr
2324
as
expr -> xor_expr | expr
2324
in
expr -> xor_expr | expr
2324
>=
expr -> xor_expr | expr
2324
is
expr -> xor_expr | expr
2324
==
expr -> xor_expr | expr
2324
or
expr -> xor_expr | expr
2324
<
expr -> xor_expr | expr
2324
if
expr -> xor_expr | expr
2324
not
expr -> xor_expr | expr
2324
!=
expr -> xor_expr | expr
2324
<=
expr -> xor_expr | expr
2324
>
expr -> xor_expr | expr
2324
:
expr -> xor_expr | expr
2325
as
lambdef -> lambda : test
2325
:
lambdef -> lambda : test
2326
~
1630
2326
factor
1631
2326
STRING
1634
2326
shift_expr
1633
2326
expr
1635
2326
term
1636
2326
NUMBER
1637
2326
{
1639
2326
and_test
1640
2326
atom_expr
1641
2326
[
1642
2326
-
1643
2326
None
1644
2326
+
1645
2326
(
1646
2326
arith_expr
1647
2326
atom
1648
2326
and_expr
1649
2326
NAME
1650
2326
power
1651
2326
True
1652
2326
comparison
1653
2326
xor_expr
1654
2326
lambda
1655
2326
False
1656
2326
not_test
1657
2326
or_test
1658
2326
lambdef
1659
2326
not
1660
2326
test
2480
2327
if
and_test -> not_test and and_test
2327
:
and_test -> not_test and and_test
2327
as
and_test -> not_test and and_test
2327
or
and_test -> not_test and and_test
2328
else
2481
2329
NEWLINE
2482
2330
expr
5
2330
factor
1
2330
(
3
2330
STRING
4
2330
term
6
2330
not
8
2330
or_test
10
2330
~
12
2330
atom_expr
13
2330
comparison
14
2330
shift_expr
29
2330
None
15
2330
power
43
2330
+
19
2330
small_stmt
2483
2330
xor_expr
17
2330
arith_expr
18
2330
[
32
2330
simple_stmt
2484
2330
atom
22
2330
suite
2485
2330
NUMBER
26
2330
and_test
39
2330
NAME
27
2330
-
36
2330
False
28
2330
lambda
46
2330
test
47
2330
NEWLINE
2486
2330
not_test
34
2330
{
35
2330
and_expr
33
2330
lambdef
45
2330
True
48
2330
endsim
75
2330
flow_stmt
53
2330
pass
76
2330
break
54
2330
raise
55
2330
yield
56
2330
assert
57
2330
global_stmt
77
2330
continue_stmt
58
2330
del_stmt
78
2330
stat_stmt
59
2330
global
79
2330
return_stmt
60
2330
test_list
61
2330
continue
62
2330
yield_stmt
63
2330
return
68
2330
sim_stmt
65
2330
resetstats
66
2330
break_stmt
82
2330
del
67
2330
raise_stmt
69
2330
nonlocal
70
2330
pass_stmt
71
2330
begsim
83
2330
expr_stmt
72
2330
nonlocal_stmt
84
2330
assert_stmt
74
2331
expr
5
2331
factor
1
2331
(
3
2331
STRING
4
2331
term
6
2331
not
8
2331
or_test
10
2331
~
12
2331
atom_expr
13
2331
comparison
14
2331
shift_expr
29
2331
None
15
2331
power
43
2331
+
19
2331
small_stmt
2487
2331
xor_expr
17
2331
arith_expr
18
2331
[
32
2331
simple_stmt
2488
2331
atom
22
2331
NUMBER
26
2331
and_test
39
2331
NAME
27
2331
-
36
2331
False
28
2331
lambda
46
2331
test
47
2331
NEWLINE
2489
2331
not_test
34
2331
{
35
2331
and_expr
33
2331
lambdef
45
2331
suite
2490
2331
True
48
2331
endsim
75
2331
flow_stmt
53
2331
pass
76
2331
break
54
2331
raise
55
2331
yield
56
2331
assert
57
2331
global_stmt
77
2331
continue_stmt
58
2331
del_stmt
78
2331
stat_stmt
59
2331
global
79
2331
return_stmt
60
2331
test_list
61
2331
continue
62
2331
yield_stmt
63
2331
return
68
2331
sim_stmt
65
2331
resetstats
66
2331
break_stmt
82
2331
del
67
2331
raise_stmt
69
2331
nonlocal
70
2331
pass_stmt
71
2331
begsim
83
2331
expr_stmt
72
2331
nonlocal_stmt
84
2331
assert_stmt
74
2332
expr
5
2332
factor
1
2332
(
3
2332
STRING
4
2332
term
6
2332
not
8
2332
or_test
10
2332
~
12
2332
atom_expr
13
2332
comparison
14
2332
shift_expr
29
2332
None
15
2332
power
43
2332
+
19
2332
small_stmt
1677
2332
xor_expr
17
2332
arith_expr
18
2332
[
32
2332
simple_stmt
2491
2332
atom
22
2332
NUMBER
26
2332
and_test
39
2332
NAME
27
2332
-
36
2332
False
28
2332
lambda
46
2332
test
47
2332
not_test
34
2332
{
35
2332
suite
2492
2332
and_expr
33
2332
lambdef
45
2332
True
48
2332
NEWLINE
2493
2332
endsim
75
2332
flow_stmt
53
2332
pass
76
2332
break
54
2332
raise
55
2332
yield
56
2332
assert
57
2332
global_stmt
77
2332
continue_stmt
58
2332
del_stmt
78
2332
stat_stmt
59
2332
global
79
2332
return_stmt
60
2332
test_list
61
2332
continue
62
2332
yield_stmt
63
2332
return
68
2332
sim_stmt
65
2332
resetstats
66
2332
break_stmt
82
2332
del
67
2332
raise_stmt
69
2332
nonlocal
70
2332
pass_stmt
71
2332
begsim
83
2332
expr_stmt
72
2332
nonlocal_stmt
84
2332
assert_stmt
74
2333
~
579
2333
factor
580
2333
STRING
581
2333
shift_expr
582
2333
arith_expr
583
2333
term
584
2333
NUMBER
585
2333
and_expr
586
2333
{
587
2333
atom_expr
589
2333
arglist
2494
2333
-
591
2333
[
590
2333
None
592
2333
(
593
2333
atom
594
2333
+
595
2333
not_test
596
2333
test
597
2333
NAME
598
2333
power
599
2333
True
600
2333
comparison
601
2333
xor_expr
602
2333
lambdef
603
2333
False
604
2333
argument
605
2333
)
2495
2333
and_test
606
2333
lambda
607
2333
or_test
608
2333
expr
609
2333
not
610
2333
**
611
2333
*
612
2334
)
2496
2334
parameters
2497
2334
*
1133
2334
NAME
1134
2334
**
1135
2334
tfpdef
1136
2334
param
1137
2335
except_clause
2498
2335
except
2499
2336
test_list
2500
2336
factor
1217
2336
~
1218
2336
shift_expr
1219
2336
STRING
1220
2336
expr
1221
2336
arith_expr
1222
2336
term
1223
2336
NUMBER
1224
2336
{
1225
2336
atom_expr
1226
2336
[
1227
2336
-
1228
2336
None
1229
2336
+
1230
2336
(
1231
2336
atom
1232
2336
and_expr
1233
2336
NAME
1234
2336
power
1235
2336
True
1236
2336
comparison
1237
2336
xor_expr
1238
2336
lambda
1239
2336
False
1240
2336
test
1241
2336
not_test
1242
2336
or_test
1243
2336
and_test
1244
2336
not
1245
2336
lambdef
1246
2337
expr
5
2337
factor
1
2337
(
3
2337
STRING
4
2337
term
6
2337
not
8
2337
or_test
10
2337
~
12
2337
atom_expr
13
2337
comparison
14
2337
shift_expr
29
2337
None
15
2337
power
43
2337
+
19
2337
small_stmt
1677
2337
xor_expr
17
2337
arith_expr
18
2337
suite
2501
2337
[
32
2337
simple_stmt
2491
2337
atom
22
2337
NUMBER
26
2337
and_test
39
2337
NAME
27
2337
-
36
2337
False
28
2337
lambda
46
2337
test
47
2337
not_test
34
2337
{
35
2337
and_expr
33
2337
lambdef
45
2337
True
48
2337
NEWLINE
2493
2337
endsim
75
2337
flow_stmt
53
2337
pass
76
2337
break
54
2337
raise
55
2337
yield
56
2337
assert
57
2337
global_stmt
77
2337
continue_stmt
58
2337
del_stmt
78
2337
stat_stmt
59
2337
global
79
2337
return_stmt
60
2337
test_list
61
2337
continue
62
2337
yield_stmt
63
2337
return
68
2337
sim_stmt
65
2337
resetstats
66
2337
break_stmt
82
2337
del
67
2337
raise_stmt
69
2337
nonlocal
70
2337
pass_stmt
71
2337
begsim
83
2337
expr_stmt
72
2337
nonlocal_stmt
84
2337
assert_stmt
74
2338
<
factor -> ~ factor
2338
in
factor -> ~ factor
2338
==
factor -> ~ factor
2338
|
factor -> ~ factor
2338
<<
factor -> ~ factor
2338
>
factor -> ~ factor
2338
not
factor -> ~ factor
2338
<=
factor -> ~ factor
2338
//
factor -> ~ factor
2338
>=
factor -> ~ factor
2338
>>
factor -> ~ factor
2338
]
factor -> ~ factor
2338
-
factor -> ~ factor
2338
*
factor -> ~ factor
2338
/
factor -> ~ factor
2338
if
factor -> ~ factor
2338
^
factor -> ~ factor
2338
and
factor -> ~ factor
2338
is
factor -> ~ factor
2338
for
factor -> ~ factor
2338
+
factor -> ~ factor
2338
or
factor -> ~ factor
2338
&
factor -> ~ factor
2338
!=
factor -> ~ factor
2338
%
factor -> ~ factor
2338
@
factor -> ~ factor
2339
~
2057
2339
factor
2058
2339
STRING
2059
2339
term
2502
2339
atom_expr
2062
2339
NUMBER
2063
2339
{
2065
2339
[
2066
2339
-
2067
2339
None
2068
2339
(
2069
2339
atom
2071
2339
+
2072
2339
NAME
2073
2339
power
2074
2339
True
2075
2339
False
2078
2340
~
2057
2340
factor
2058
2340
STRING
2059
2340
atom_expr
2062
2340
NUMBER
2063
2340
{
2065
2340
[
2066
2340
-
2067
2340
None
2068
2340
(
2069
2340
atom
2071
2340
+
2072
2340
NAME
2073
2340
power
2074
2340
True
2075
2340
False
2078
2340
term
2503
2341
~
2057
2341
factor
2058
2341
STRING
2059
2341
atom_expr
2062
2341
NUMBER
2063
2341
{
2065
2341
[
2066
2341
-
2067
2341
None
2068
2341
(
2069
2341
term
2504
2341
atom
2071
2341
+
2072
2341
NAME
2073
2341
power
2074
2341
True
2075
2341
False
2078
2342
~
2057
2342
factor
2058
2342
STRING
2059
2342
atom_expr
2062
2342
NUMBER
2063
2342
{
2065
2342
term
2505
2342
[
2066
2342
-
2067
2342
None
2068
2342
(
2069
2342
atom
2071
2342
+
2072
2342
NAME
2073
2342
power
2074
2342
True
2075
2342
False
2078
2343
~
2057
2343
factor
2058
2343
STRING
2059
2343
atom_expr
2062
2343
NUMBER
2063
2343
{
2065
2343
[
2066
2343
-
2067
2343
None
2068
2343
(
2069
2343
atom
2071
2343
+
2072
2343
term
2506
2343
NAME
2073
2343
power
2074
2343
True
2075
2343
False
2078
2344
~
2057
2344
factor
2058
2344
STRING
2059
2344
shift_expr
2060
2344
term
2061
2344
atom_expr
2062
2344
NUMBER
2063
2344
{
2065
2344
[
2066
2344
-
2067
2344
None
2068
2344
(
2069
2344
arith_expr
2070
2344
atom
2071
2344
+
2072
2344
NAME
2073
2344
power
2074
2344
True
2075
2344
False
2078
2344
and_expr
2507
2345
~
2057
2345
arith_expr
2508
2345
factor
2058
2345
STRING
2059
2345
term
2061
2345
atom_expr
2062
2345
NUMBER
2063
2345
{
2065
2345
[
2066
2345
-
2067
2345
None
2068
2345
(
2069
2345
atom
2071
2345
+
2072
2345
NAME
2073
2345
power
2074
2345
True
2075
2345
False
2078
2346
~
2057
2346
factor
2058
2346
STRING
2059
2346
term
2061
2346
arith_expr
2509
2346
atom_expr
2062
2346
NUMBER
2063
2346
{
2065
2346
[
2066
2346
-
2067
2346
None
2068
2346
(
2069
2346
atom
2071
2346
+
2072
2346
NAME
2073
2346
power
2074
2346
True
2075
2346
False
2078
2347
~
2057
2347
STRING
2059
2347
atom_expr
2062
2347
factor
2510
2347
NUMBER
2063
2347
{
2065
2347
[
2066
2347
None
2068
2347
-
2067
2347
(
2069
2347
atom
2071
2347
+
2072
2347
NAME
2073
2347
power
2074
2347
True
2075
2347
False
2078
2348
~
2057
2348
factor
2058
2348
STRING
2059
2348
shift_expr
2060
2348
term
2061
2348
atom_expr
2062
2348
NUMBER
2063
2348
and_expr
2064
2348
{
2065
2348
[
2066
2348
xor_expr
2511
2348
-
2067
2348
None
2068
2348
(
2069
2348
arith_expr
2070
2348
atom
2071
2348
+
2072
2348
NAME
2073
2348
power
2074
2348
True
2075
2348
False
2078
2349
//
atom -> { }
2349
[
atom -> { }
2349
|
atom -> { }
2349
>
atom -> { }
2349
>=
atom -> { }
2349
==
atom -> { }
2349
&
atom -> { }
2349
not
atom -> { }
2349
**
atom -> { }
2349
in
atom -> { }
2349
or
atom -> { }
2349
<
atom -> { }
2349
!=
atom -> { }
2349
+
atom -> { }
2349
<<
atom -> { }
2349
^
atom -> { }
2349
<=
atom -> { }
2349
if
atom -> { }
2349
for
atom -> { }
2349
/
atom -> { }
2349
is
atom -> { }
2349
-
atom -> { }
2349
>>
atom -> { }
2349
%
atom -> { }
2349
.
atom -> { }
2349
(
atom -> { }
2349
and
atom -> { }
2349
*
atom -> { }
2349
]
atom -> { }
2349
@
atom -> { }
2350
]
2512
2351
for
atom -> [ ]
2351
==
atom -> [ ]
2351
%
atom -> [ ]
2351
**
atom -> [ ]
2351
.
atom -> [ ]
2351
<<
atom -> [ ]
2351
not
atom -> [ ]
2351
/
atom -> [ ]
2351
*
atom -> [ ]
2351
if
atom -> [ ]
2351
!=
atom -> [ ]
2351
<=
atom -> [ ]
2351
@
atom -> [ ]
2351
-
atom -> [ ]
2351
>>
atom -> [ ]
2351
^
atom -> [ ]
2351
|
atom -> [ ]
2351
<
atom -> [ ]
2351
]
atom -> [ ]
2351
[
atom -> [ ]
2351
is
atom -> [ ]
2351
in
atom -> [ ]
2351
>
atom -> [ ]
2351
+
atom -> [ ]
2351
>=
atom -> [ ]
2351
and
atom -> [ ]
2351
or
atom -> [ ]
2351
&
atom -> [ ]
2351
(
atom -> [ ]
2351
//
atom -> [ ]
2352
if
factor -> - factor
2352
/
factor -> - factor
2352
]
factor -> - factor
2352
not
factor -> - factor
2352
<
factor -> - factor
2352
or
factor -> - factor
2352
//
factor -> - factor
2352
!=
factor -> - factor
2352
%
factor -> - factor
2352
|
factor -> - factor
2352
for
factor -> - factor
2352
>
factor -> - factor
2352
+
factor -> - factor
2352
-
factor -> - factor
2352
^
factor -> - factor
2352
in
factor -> - factor
2352
<<
factor -> - factor
2352
&
factor -> - factor
2352
<=
factor -> - factor
2352
==
factor -> - factor
2352
and
factor -> - factor
2352
@
factor -> - factor
2352
>=
factor -> - factor
2352
is
factor -> - factor
2352
>>
factor -> - factor
2352
*
factor -> - factor
2353
-
atom -> ( )
2353
==
atom -> ( )
2353
/
atom -> ( )
2353
<=
atom -> ( )
2353
(
atom -> ( )
2353
&
atom -> ( )
2353
[
atom -> ( )
2353
^
atom -> ( )
2353
or
atom -> ( )
2353
+
atom -> ( )
2353
>>
atom -> ( )
2353
]
atom -> ( )
2353
is
atom -> ( )
2353
*
atom -> ( )
2353
if
atom -> ( )
2353
and
atom -> ( )
2353
>=
atom -> ( )
2353
>
atom -> ( )
2353
@
atom -> ( )
2353
in
atom -> ( )
2353
not
atom -> ( )
2353
<
atom -> ( )
2353
.
atom -> ( )
2353
//
atom -> ( )
2353
%
atom -> ( )
2353
<<
atom -> ( )
2353
for
atom -> ( )
2353
|
atom -> ( )
2353
**
atom -> ( )
2353
!=
atom -> ( )
2354
)
2513
2355
~
2057
2355
factor
2058
2355
STRING
2059
2355
term
2061
2355
atom_expr
2062
2355
NUMBER
2063
2355
{
2065
2355
[
2066
2355
-
2067
2355
shift_expr
2514
2355
None
2068
2355
(
2069
2355
arith_expr
2070
2355
atom
2071
2355
+
2072
2355
NAME
2073
2355
power
2074
2355
True
2075
2355
False
2078
2356
~
2057
2356
factor
2058
2356
STRING
2059
2356
term
2061
2356
atom_expr
2062
2356
NUMBER
2063
2356
{
2065
2356
[
2066
2356
-
2067
2356
None
2068
2356
(
2069
2356
arith_expr
2070
2356
atom
2071
2356
+
2072
2356
shift_expr
2515
2356
NAME
2073
2356
power
2074
2356
True
2075
2356
False
2078
2357
~
544
2357
factor
545
2357
STRING
546
2357
shift_expr
547
2357
expr
548
2357
arith_expr
549
2357
term
550
2357
atom_expr
551
2357
NUMBER
552
2357
subscript
553
2357
{
554
2357
[
555
2357
-
556
2357
None
557
2357
+
558
2357
(
559
2357
subscriptlist
2516
2357
atom
561
2357
and_expr
562
2357
NAME
563
2357
power
564
2357
True
565
2357
comparison
566
2357
xor_expr
567
2357
lambda
568
2357
False
569
2357
not_test
570
2357
and_test
571
2357
test
572
2357
or_test
573
2357
not
574
2357
:
maybe_test -> 
2357
maybe_test
575
2357
lambdef
576
2358
)
2517
2358
~
579
2358
factor
580
2358
STRING
581
2358
shift_expr
582
2358
arith_expr
583
2358
term
584
2358
NUMBER
585
2358
and_expr
586
2358
{
587
2358
atom_expr
589
2358
[
590
2358
-
591
2358
None
592
2358
(
593
2358
atom
594
2358
+
595
2358
not_test
596
2358
arglist
2518
2358
test
597
2358
NAME
598
2358
power
599
2358
True
600
2358
comparison
601
2358
xor_expr
602
2358
lambdef
603
2358
False
604
2358
argument
605
2358
and_test
606
2358
lambda
607
2358
or_test
608
2358
expr
609
2358
not
610
2358
**
611
2358
*
612
2359
NAME
2519
2360
[
2357
2360
(
2358
2360
.
2359
2360
//
trailer_expr -> 
2360
trailer
2360
2360
<<
trailer_expr -> 
2360
*
trailer_expr -> 
2360
in
trailer_expr -> 
2360
&
trailer_expr -> 
2360
trailer_expr
2520
2360
and
trailer_expr -> 
2360
<=
trailer_expr -> 
2360
|
trailer_expr -> 
2360
or
trailer_expr -> 
2360
>=
trailer_expr -> 
2360
for
trailer_expr -> 
2360
+
trailer_expr -> 
2360
**
trailer_expr -> 
2360
>>
trailer_expr -> 
2360
!=
trailer_expr -> 
2360
-
trailer_expr -> 
2360
/
trailer_expr -> 
2360
]
trailer_expr -> 
2360
%
trailer_expr -> 
2360
is
trailer_expr -> 
2360
<
trailer_expr -> 
2360
>
trailer_expr -> 
2360
if
trailer_expr -> 
2360
^
trailer_expr -> 
2360
==
trailer_expr -> 
2360
@
trailer_expr -> 
2360
not
trailer_expr -> 
2361
for
atom_expr -> atom trailer_expr
2361
<=
atom_expr -> atom trailer_expr
2361
or
atom_expr -> atom trailer_expr
2361
*
atom_expr -> atom trailer_expr
2361
>=
atom_expr -> atom trailer_expr
2361
**
atom_expr -> atom trailer_expr
2361
&
atom_expr -> atom trailer_expr
2361
%
atom_expr -> atom trailer_expr
2361
if
atom_expr -> atom trailer_expr
2361
+
atom_expr -> atom trailer_expr
2361
//
atom_expr -> atom trailer_expr
2361
is
atom_expr -> atom trailer_expr
2361
!=
atom_expr -> atom trailer_expr
2361
|
atom_expr -> atom trailer_expr
2361
<
atom_expr -> atom trailer_expr
2361
@
atom_expr -> atom trailer_expr
2361
not
atom_expr -> atom trailer_expr
2361
-
atom_expr -> atom trailer_expr
2361
in
atom_expr -> atom trailer_expr
2361
/
atom_expr -> atom trailer_expr
2361
^
atom_expr -> atom trailer_expr
2361
>
atom_expr -> atom trailer_expr
2361
==
atom_expr -> atom trailer_expr
2361
<<
atom_expr -> atom trailer_expr
2361
>>
atom_expr -> atom trailer_expr
2361
]
atom_expr -> atom trailer_expr
2361
and
atom_expr -> atom trailer_expr
2362
<
factor -> + factor
2362
for
factor -> + factor
2362
in
factor -> + factor
2362
|
factor -> + factor
2362
==
factor -> + factor
2362
>
factor -> + factor
2362
-
factor -> + factor
2362
and
factor -> + factor
2362
*
factor -> + factor
2362
if
factor -> + factor
2362
%
factor -> + factor
2362
@
factor -> + factor
2362
is
factor -> + factor
2362
//
factor -> + factor
2362
&
factor -> + factor
2362
]
factor -> + factor
2362
^
factor -> + factor
2362
>=
factor -> + factor
2362
not
factor -> + factor
2362
/
factor -> + factor
2362
or
factor -> + factor
2362
!=
factor -> + factor
2362
<<
factor -> + factor
2362
>>
factor -> + factor
2362
<=
factor -> + factor
2362
+
factor -> + factor
2363
~
2057
2363
factor
2058
2363
STRING
2059
2363
shift_expr
2060
2363
term
2061
2363
expr
2521
2363
atom_expr
2062
2363
NUMBER
2063
2363
and_expr
2064
2363
{
2065
2363
[
2066
2363
-
2067
2363
None
2068
2363
(
2069
2363
arith_expr
2070
2363
atom
2071
2363
+
2072
2363
NAME
2073
2363
power
2074
2363
True
2075
2363
xor_expr
2077
2363
False
2078
2364
~
2057
2364
factor
2058
2364
STRING
2059
2364
shift_expr
2060
2364
term
2061
2364
atom_expr
2062
2364
NUMBER
2063
2364
and_expr
2064
2364
{
2065
2364
[
2066
2364
-
2067
2364
None
2068
2364
(
2069
2364
arith_expr
2070
2364
atom
2071
2364
+
2072
2364
NAME
2073
2364
power
2074
2364
True
2075
2364
and_test
2522
2364
comparison
2076
2364
xor_expr
2077
2364
False
2078
2364
not_test
2079
2364
not
2082
2364
expr
2083
2365
or_test
2523
2365
factor
2058
2365
~
2057
2365
shift_expr
2060
2365
STRING
2059
2365
term
2061
2365
atom_expr
2062
2365
NUMBER
2063
2365
and_expr
2064
2365
{
2065
2365
[
2066
2365
-
2067
2365
None
2068
2365
(
2069
2365
arith_expr
2070
2365
atom
2071
2365
+
2072
2365
NAME
2073
2365
power
2074
2365
True
2075
2365
comparison
2076
2365
xor_expr
2077
2365
False
2078
2365
not_test
2079
2365
and_test
2080
2365
not
2082
2365
expr
2083
2366
]
comp_for -> for expr_list in or_test comp_iter
2367
]
comp_iter -> comp_for
2368
]
comp_iter -> comp_if
2369
~
2057
2369
factor
2058
2369
STRING
2059
2369
shift_expr
2060
2369
term
2061
2369
atom_expr
2062
2369
NUMBER
2063
2369
and_expr
2064
2369
{
2065
2369
[
2066
2369
-
2067
2369
None
2068
2369
(
2069
2369
arith_expr
2070
2369
atom
2071
2369
or_test
2524
2369
+
2072
2369
NAME
2073
2369
power
2074
2369
True
2075
2369
comparison
2076
2369
xor_expr
2077
2369
False
2078
2369
lambdef_nocond
2525
2369
not_test
2079
2369
and_test
2080
2369
lambda
2526
2369
not
2082
2369
expr
2083
2369
test_nocond
2527
2370
if
not_test -> not not_test
2370
]
not_test -> not not_test
2370
and
not_test -> not not_test
2370
or
not_test -> not not_test
2370
for
not_test -> not not_test
2371
~
2057
2371
factor
2058
2371
STRING
2059
2371
shift_expr
2060
2371
term
2061
2371
atom_expr
2062
2371
NUMBER
2063
2371
and_expr
2064
2371
{
2065
2371
[
2066
2371
-
2067
2371
None
2068
2371
(
2069
2371
arith_expr
2070
2371
atom
2071
2371
+
2072
2371
NAME
2073
2371
power
2074
2371
True
2075
2371
xor_expr
2077
2371
False
2078
2371
comparison
2528
2371
expr
2083
2372
,
trailer -> [ subscriptlist ]
2372
//
trailer -> [ subscriptlist ]
2372
/
trailer -> [ subscriptlist ]
2372
^
trailer -> [ subscriptlist ]
2372
.
trailer -> [ subscriptlist ]
2372
<
trailer -> [ subscriptlist ]
2372
<<
trailer -> [ subscriptlist ]
2372
in
trailer -> [ subscriptlist ]
2372
@
trailer -> [ subscriptlist ]
2372
>
trailer -> [ subscriptlist ]
2372
*
trailer -> [ subscriptlist ]
2372
and
trailer -> [ subscriptlist ]
2372
+
trailer -> [ subscriptlist ]
2372
(
trailer -> [ subscriptlist ]
2372
is
trailer -> [ subscriptlist ]
2372
or
trailer -> [ subscriptlist ]
2372
<=
trailer -> [ subscriptlist ]
2372
if
trailer -> [ subscriptlist ]
2372
|
trailer -> [ subscriptlist ]
2372
==
trailer -> [ subscriptlist ]
2372
not
trailer -> [ subscriptlist ]
2372
-
trailer -> [ subscriptlist ]
2372
!=
trailer -> [ subscriptlist ]
2372
&
trailer -> [ subscriptlist ]
2372
[
trailer -> [ subscriptlist ]
2372
>>
trailer -> [ subscriptlist ]
2372
%
trailer -> [ subscriptlist ]
2372
>=
trailer -> [ subscriptlist ]
2372
**
trailer -> [ subscriptlist ]
2372
]
trailer -> [ subscriptlist ]
2373
>=
trailer -> ( arglist )
2373
//
trailer -> ( arglist )
2373
%
trailer -> ( arglist )
2373
in
trailer -> ( arglist )
2373
&
trailer -> ( arglist )
2373
,
trailer -> ( arglist )
2373
>>
trailer -> ( arglist )
2373
-
trailer -> ( arglist )
2373
^
trailer -> ( arglist )
2373
>
trailer -> ( arglist )
2373
<<
trailer -> ( arglist )
2373
==
trailer -> ( arglist )
2373
<=
trailer -> ( arglist )
2373
]
trailer -> ( arglist )
2373
*
trailer -> ( arglist )
2373
and
trailer -> ( arglist )
2373
/
trailer -> ( arglist )
2373
[
trailer -> ( arglist )
2373
(
trailer -> ( arglist )
2373
<
trailer -> ( arglist )
2373
|
trailer -> ( arglist )
2373
+
trailer -> ( arglist )
2373
not
trailer -> ( arglist )
2373
or
trailer -> ( arglist )
2373
is
trailer -> ( arglist )
2373
.
trailer -> ( arglist )
2373
!=
trailer -> ( arglist )
2373
@
trailer -> ( arglist )
2373
**
trailer -> ( arglist )
2373
if
trailer -> ( arglist )
2374
~
1154
2374
factor
1155
2374
STRING
1156
2374
shift_expr
1157
2374
arith_expr
1158
2374
term
1159
2374
atom_expr
1160
2374
NUMBER
1161
2374
{
1163
2374
[
1164
2374
-
1165
2374
None
1166
2374
(
1167
2374
atom
1169
2374
+
1170
2374
and_expr
1171
2374
NAME
1172
2374
power
1173
2374
True
1174
2374
test
2529
2374
comparison
1175
2374
xor_expr
1176
2374
False
1177
2374
not_test
1178
2374
and_test
1179
2374
or_test
1180
2374
not
1181
2374
expr
1182
2374
lambda
1183
2374
lambdef
1184
2375
,
lambdef -> lambda varargslist : test
2375
]
lambdef -> lambda varargslist : test
2376
:
2530
2377
,
trailer -> [ subscriptlist ]
2377
//
trailer -> [ subscriptlist ]
2377
/
trailer -> [ subscriptlist ]
2377
^
trailer -> [ subscriptlist ]
2377
.
trailer -> [ subscriptlist ]
2377
<
trailer -> [ subscriptlist ]
2377
<<
trailer -> [ subscriptlist ]
2377
in
trailer -> [ subscriptlist ]
2377
@
trailer -> [ subscriptlist ]
2377
>
trailer -> [ subscriptlist ]
2377
:
trailer -> [ subscriptlist ]
2377
*
trailer -> [ subscriptlist ]
2377
and
trailer -> [ subscriptlist ]
2377
+
trailer -> [ subscriptlist ]
2377
(
trailer -> [ subscriptlist ]
2377
is
trailer -> [ subscriptlist ]
2377
or
trailer -> [ subscriptlist ]
2377
<=
trailer -> [ subscriptlist ]
2377
if
trailer -> [ subscriptlist ]
2377
|
trailer -> [ subscriptlist ]
2377
==
trailer -> [ subscriptlist ]
2377
not
trailer -> [ subscriptlist ]
2377
-
trailer -> [ subscriptlist ]
2377
!=
trailer -> [ subscriptlist ]
2377
&
trailer -> [ subscriptlist ]
2377
[
trailer -> [ subscriptlist ]
2377
>>
trailer -> [ subscriptlist ]
2377
%
trailer -> [ subscriptlist ]
2377
>=
trailer -> [ subscriptlist ]
2377
**
trailer -> [ subscriptlist ]
2378
>=
trailer -> ( arglist )
2378
//
trailer -> ( arglist )
2378
%
trailer -> ( arglist )
2378
in
trailer -> ( arglist )
2378
&
trailer -> ( arglist )
2378
,
trailer -> ( arglist )
2378
>>
trailer -> ( arglist )
2378
-
trailer -> ( arglist )
2378
:
trailer -> ( arglist )
2378
^
trailer -> ( arglist )
2378
>
trailer -> ( arglist )
2378
<<
trailer -> ( arglist )
2378
==
trailer -> ( arglist )
2378
<=
trailer -> ( arglist )
2378
*
trailer -> ( arglist )
2378
and
trailer -> ( arglist )
2378
/
trailer -> ( arglist )
2378
[
trailer -> ( arglist )
2378
(
trailer -> ( arglist )
2378
<
trailer -> ( arglist )
2378
|
trailer -> ( arglist )
2378
+
trailer -> ( arglist )
2378
not
trailer -> ( arglist )
2378
or
trailer -> ( arglist )
2378
is
trailer -> ( arglist )
2378
.
trailer -> ( arglist )
2378
!=
trailer -> ( arglist )
2378
@
trailer -> ( arglist )
2378
**
trailer -> ( arglist )
2378
if
trailer -> ( arglist )
2379
,
lambdef -> lambda varargslist : test
2379
:
lambdef -> lambda varargslist : test
2380
~
1218
2380
factor
1217
2380
STRING
1220
2380
shift_expr
1219
2380
expr
1221
2380
arith_expr
1222
2380
term
1223
2380
NUMBER
1224
2380
{
1225
2380
atom_expr
1226
2380
[
1227
2380
-
1228
2380
None
1229
2380
+
1230
2380
(
1231
2380
atom
1232
2380
and_expr
1233
2380
NAME
1234
2380
power
1235
2380
True
1236
2380
test
2531
2380
comparison
1237
2380
xor_expr
1238
2380
lambda
1239
2380
False
1240
2380
not_test
1242
2380
or_test
1243
2380
and_test
1244
2380
not
1245
2380
lambdef
1246
2381
,
trailer -> [ subscriptlist ]
2381
//
trailer -> [ subscriptlist ]
2381
/
trailer -> [ subscriptlist ]
2381
-
trailer -> [ subscriptlist ]
2381
^
trailer -> [ subscriptlist ]
2381
&
trailer -> [ subscriptlist ]
2381
@
trailer -> [ subscriptlist ]
2381
+
trailer -> [ subscriptlist ]
2381
(
trailer -> [ subscriptlist ]
2381
[
trailer -> [ subscriptlist ]
2381
:
trailer -> [ subscriptlist ]
2381
.
trailer -> [ subscriptlist ]
2381
>>
trailer -> [ subscriptlist ]
2381
*
trailer -> [ subscriptlist ]
2381
%
trailer -> [ subscriptlist ]
2381
<<
trailer -> [ subscriptlist ]
2381
**
trailer -> [ subscriptlist ]
2381
|
trailer -> [ subscriptlist ]
2382
//
trailer -> ( arglist )
2382
/
trailer -> ( arglist )
2382
%
trailer -> ( arglist )
2382
[
trailer -> ( arglist )
2382
&
trailer -> ( arglist )
2382
@
trailer -> ( arglist )
2382
(
trailer -> ( arglist )
2382
<<
trailer -> ( arglist )
2382
,
trailer -> ( arglist )
2382
*
trailer -> ( arglist )
2382
.
trailer -> ( arglist )
2382
>>
trailer -> ( arglist )
2382
^
trailer -> ( arglist )
2382
-
trailer -> ( arglist )
2382
|
trailer -> ( arglist )
2382
:
trailer -> ( arglist )
2382
**
trailer -> ( arglist )
2382
+
trailer -> ( arglist )
2383
NEWLINE
test -> or_test if or_test else test
2383
=
test -> or_test if or_test else test
2383
,
test -> or_test if or_test else test
2384
<=
term -> factor / term
2384
!=
term -> factor / term
2384
and
term -> factor / term
2384
or
term -> factor / term
2384
|
term -> factor / term
2384
^
term -> factor / term
2384
NEWLINE
term -> factor / term
2384
>>
term -> factor / term
2384
==
term -> factor / term
2384
>
term -> factor / term
2384
if
term -> factor / term
2384
&
term -> factor / term
2384
=
term -> factor / term
2384
<<
term -> factor / term
2384
+
term -> factor / term
2384
-
term -> factor / term
2384
not
term -> factor / term
2384
in
term -> factor / term
2384
<
term -> factor / term
2384
is
term -> factor / term
2384
>=
term -> factor / term
2385
is
term -> factor @ term
2385
and
term -> factor @ term
2385
>
term -> factor @ term
2385
not
term -> factor @ term
2385
in
term -> factor @ term
2385
==
term -> factor @ term
2385
<
term -> factor @ term
2385
or
term -> factor @ term
2385
!=
term -> factor @ term
2385
<<
term -> factor @ term
2385
NEWLINE
term -> factor @ term
2385
<=
term -> factor @ term
2385
=
term -> factor @ term
2385
if
term -> factor @ term
2385
|
term -> factor @ term
2385
+
term -> factor @ term
2385
-
term -> factor @ term
2385
&
term -> factor @ term
2385
>=
term -> factor @ term
2385
>>
term -> factor @ term
2385
^
term -> factor @ term
2386
NEWLINE
term -> factor % term
2386
>
term -> factor % term
2386
!=
term -> factor % term
2386
&
term -> factor % term
2386
>=
term -> factor % term
2386
or
term -> factor % term
2386
=
term -> factor % term
2386
==
term -> factor % term
2386
^
term -> factor % term
2386
in
term -> factor % term
2386
|
term -> factor % term
2386
and
term -> factor % term
2386
if
term -> factor % term
2386
not
term -> factor % term
2386
is
term -> factor % term
2386
<
term -> factor % term
2386
>>
term -> factor % term
2386
-
term -> factor % term
2386
<=
term -> factor % term
2386
<<
term -> factor % term
2386
+
term -> factor % term
2387
+
term -> factor // term
2387
==
term -> factor // term
2387
<<
term -> factor // term
2387
<
term -> factor // term
2387
if
term -> factor // term
2387
in
term -> factor // term
2387
!=
term -> factor // term
2387
>
term -> factor // term
2387
not
term -> factor // term
2387
NEWLINE
term -> factor // term
2387
=
term -> factor // term
2387
>=
term -> factor // term
2387
and
term -> factor // term
2387
is
term -> factor // term
2387
-
term -> factor // term
2387
&
term -> factor // term
2387
|
term -> factor // term
2387
^
term -> factor // term
2387
<=
term -> factor // term
2387
or
term -> factor // term
2387
>>
term -> factor // term
2388
&
term -> factor * term
2388
-
term -> factor * term
2388
in
term -> factor * term
2388
or
term -> factor * term
2388
<=
term -> factor * term
2388
|
term -> factor * term
2388
and
term -> factor * term
2388
not
term -> factor * term
2388
<<
term -> factor * term
2388
==
term -> factor * term
2388
if
term -> factor * term
2388
>
term -> factor * term
2388
>>
term -> factor * term
2388
<
term -> factor * term
2388
!=
term -> factor * term
2388
=
term -> factor * term
2388
NEWLINE
term -> factor * term
2388
>=
term -> factor * term
2388
^
term -> factor * term
2388
+
term -> factor * term
2388
is
term -> factor * term
2389
|
and_expr -> shift_expr & and_expr
2389
!=
and_expr -> shift_expr & and_expr
2389
=
and_expr -> shift_expr & and_expr
2389
>=
and_expr -> shift_expr & and_expr
2389
not
and_expr -> shift_expr & and_expr
2389
and
and_expr -> shift_expr & and_expr
2389
NEWLINE
and_expr -> shift_expr & and_expr
2389
is
and_expr -> shift_expr & and_expr
2389
in
and_expr -> shift_expr & and_expr
2389
or
and_expr -> shift_expr & and_expr
2389
==
and_expr -> shift_expr & and_expr
2389
^
and_expr -> shift_expr & and_expr
2389
>
and_expr -> shift_expr & and_expr
2389
<
and_expr -> shift_expr & and_expr
2389
if
and_expr -> shift_expr & and_expr
2389
<=
and_expr -> shift_expr & and_expr
2390
>>
arith_expr -> term + arith_expr
2390
^
arith_expr -> term + arith_expr
2390
NEWLINE
arith_expr -> term + arith_expr
2390
<
arith_expr -> term + arith_expr
2390
|
arith_expr -> term + arith_expr
2390
and
arith_expr -> term + arith_expr
2390
=
arith_expr -> term + arith_expr
2390
!=
arith_expr -> term + arith_expr
2390
or
arith_expr -> term + arith_expr
2390
not
arith_expr -> term + arith_expr
2390
<=
arith_expr -> term + arith_expr
2390
>
arith_expr -> term + arith_expr
2390
is
arith_expr -> term + arith_expr
2390
if
arith_expr -> term + arith_expr
2390
==
arith_expr -> term + arith_expr
2390
&
arith_expr -> term + arith_expr
2390
>=
arith_expr -> term + arith_expr
2390
in
arith_expr -> term + arith_expr
2390
<<
arith_expr -> term + arith_expr
2391
==
arith_expr -> term - arith_expr
2391
is
arith_expr -> term - arith_expr
2391
NEWLINE
arith_expr -> term - arith_expr
2391
<=
arith_expr -> term - arith_expr
2391
not
arith_expr -> term - arith_expr
2391
<<
arith_expr -> term - arith_expr
2391
=
arith_expr -> term - arith_expr
2391
&
arith_expr -> term - arith_expr
2391
|
arith_expr -> term - arith_expr
2391
and
arith_expr -> term - arith_expr
2391
or
arith_expr -> term - arith_expr
2391
>>
arith_expr -> term - arith_expr
2391
if
arith_expr -> term - arith_expr
2391
>=
arith_expr -> term - arith_expr
2391
<
arith_expr -> term - arith_expr
2391
^
arith_expr -> term - arith_expr
2391
>
arith_expr -> term - arith_expr
2391
!=
arith_expr -> term - arith_expr
2391
in
arith_expr -> term - arith_expr
2392
@
power -> atom_expr ** factor
2392
==
power -> atom_expr ** factor
2392
&
power -> atom_expr ** factor
2392
-
power -> atom_expr ** factor
2392
>
power -> atom_expr ** factor
2392
NEWLINE
power -> atom_expr ** factor
2392
and
power -> atom_expr ** factor
2392
|
power -> atom_expr ** factor
2392
<=
power -> atom_expr ** factor
2392
%
power -> atom_expr ** factor
2392
or
power -> atom_expr ** factor
2392
=
power -> atom_expr ** factor
2392
*
power -> atom_expr ** factor
2392
not
power -> atom_expr ** factor
2392
in
power -> atom_expr ** factor
2392
<<
power -> atom_expr ** factor
2392
//
power -> atom_expr ** factor
2392
/
power -> atom_expr ** factor
2392
>>
power -> atom_expr ** factor
2392
^
power -> atom_expr ** factor
2392
if
power -> atom_expr ** factor
2392
!=
power -> atom_expr ** factor
2392
is
power -> atom_expr ** factor
2392
<
power -> atom_expr ** factor
2392
+
power -> atom_expr ** factor
2392
>=
power -> atom_expr ** factor
2393
/
atom -> [ test_list_comp ]
2393
*
atom -> [ test_list_comp ]
2393
or
atom -> [ test_list_comp ]
2393
|
atom -> [ test_list_comp ]
2393
==
atom -> [ test_list_comp ]
2393
is
atom -> [ test_list_comp ]
2393
-
atom -> [ test_list_comp ]
2393
**
atom -> [ test_list_comp ]
2393
&
atom -> [ test_list_comp ]
2393
(
atom -> [ test_list_comp ]
2393
=
atom -> [ test_list_comp ]
2393
<
atom -> [ test_list_comp ]
2393
@
atom -> [ test_list_comp ]
2393
//
atom -> [ test_list_comp ]
2393
>
atom -> [ test_list_comp ]
2393
if
atom -> [ test_list_comp ]
2393
in
atom -> [ test_list_comp ]
2393
^
atom -> [ test_list_comp ]
2393
<<
atom -> [ test_list_comp ]
2393
[
atom -> [ test_list_comp ]
2393
!=
atom -> [ test_list_comp ]
2393
<=
atom -> [ test_list_comp ]
2393
and
atom -> [ test_list_comp ]
2393
%
atom -> [ test_list_comp ]
2393
not
atom -> [ test_list_comp ]
2393
+
atom -> [ test_list_comp ]
2393
>=
atom -> [ test_list_comp ]
2393
>>
atom -> [ test_list_comp ]
2393
.
atom -> [ test_list_comp ]
2393
NEWLINE
atom -> [ test_list_comp ]
2394
@
atom -> ( test_list_comp )
2394
>>
atom -> ( test_list_comp )
2394
<<
atom -> ( test_list_comp )
2394
==
atom -> ( test_list_comp )
2394
is
atom -> ( test_list_comp )
2394
or
atom -> ( test_list_comp )
2394
<=
atom -> ( test_list_comp )
2394
[
atom -> ( test_list_comp )
2394
if
atom -> ( test_list_comp )
2394
^
atom -> ( test_list_comp )
2394
<
atom -> ( test_list_comp )
2394
and
atom -> ( test_list_comp )
2394
=
atom -> ( test_list_comp )
2394
.
atom -> ( test_list_comp )
2394
+
atom -> ( test_list_comp )
2394
&
atom -> ( test_list_comp )
2394
!=
atom -> ( test_list_comp )
2394
in
atom -> ( test_list_comp )
2394
**
atom -> ( test_list_comp )
2394
not
atom -> ( test_list_comp )
2394
-
atom -> ( test_list_comp )
2394
(
atom -> ( test_list_comp )
2394
*
atom -> ( test_list_comp )
2394
|
atom -> ( test_list_comp )
2394
NEWLINE
atom -> ( test_list_comp )
2394
//
atom -> ( test_list_comp )
2394
>
atom -> ( test_list_comp )
2394
>=
atom -> ( test_list_comp )
2394
%
atom -> ( test_list_comp )
2394
/
atom -> ( test_list_comp )
2395
>=
shift_expr -> arith_expr >> shift_expr
2395
not
shift_expr -> arith_expr >> shift_expr
2395
=
shift_expr -> arith_expr >> shift_expr
2395
>
shift_expr -> arith_expr >> shift_expr
2395
^
shift_expr -> arith_expr >> shift_expr
2395
is
shift_expr -> arith_expr >> shift_expr
2395
&
shift_expr -> arith_expr >> shift_expr
2395
if
shift_expr -> arith_expr >> shift_expr
2395
!=
shift_expr -> arith_expr >> shift_expr
2395
<=
shift_expr -> arith_expr >> shift_expr
2395
and
shift_expr -> arith_expr >> shift_expr
2395
==
shift_expr -> arith_expr >> shift_expr
2395
or
shift_expr -> arith_expr >> shift_expr
2395
in
shift_expr -> arith_expr >> shift_expr
2395
NEWLINE
shift_expr -> arith_expr >> shift_expr
2395
|
shift_expr -> arith_expr >> shift_expr
2395
<
shift_expr -> arith_expr >> shift_expr
2396
>=
shift_expr -> arith_expr << shift_expr
2396
in
shift_expr -> arith_expr << shift_expr
2396
>
shift_expr -> arith_expr << shift_expr
2396
|
shift_expr -> arith_expr << shift_expr
2396
!=
shift_expr -> arith_expr << shift_expr
2396
<=
shift_expr -> arith_expr << shift_expr
2396
&
shift_expr -> arith_expr << shift_expr
2396
not
shift_expr -> arith_expr << shift_expr
2396
=
shift_expr -> arith_expr << shift_expr
2396
<
shift_expr -> arith_expr << shift_expr
2396
==
shift_expr -> arith_expr << shift_expr
2396
if
shift_expr -> arith_expr << shift_expr
2396
^
shift_expr -> arith_expr << shift_expr
2396
NEWLINE
shift_expr -> arith_expr << shift_expr
2396
or
shift_expr -> arith_expr << shift_expr
2396
is
shift_expr -> arith_expr << shift_expr
2396
and
shift_expr -> arith_expr << shift_expr
2397
]
2532
2398
/
trailer -> ( )
2398
[
trailer -> ( )
2398
(
trailer -> ( )
2398
|
trailer -> ( )
2398
<=
trailer -> ( )
2398
in
trailer -> ( )
2398
not
trailer -> ( )
2398
>>
trailer -> ( )
2398
^
trailer -> ( )
2398
.
trailer -> ( )
2398
NEWLINE
trailer -> ( )
2398
**
trailer -> ( )
2398
if
trailer -> ( )
2398
+
trailer -> ( )
2398
is
trailer -> ( )
2398
<
trailer -> ( )
2398
>
trailer -> ( )
2398
==
trailer -> ( )
2398
//
trailer -> ( )
2398
<<
trailer -> ( )
2398
*
trailer -> ( )
2398
-
trailer -> ( )
2398
=
trailer -> ( )
2398
>=
trailer -> ( )
2398
%
trailer -> ( )
2398
and
trailer -> ( )
2398
@
trailer -> ( )
2398
&
trailer -> ( )
2398
!=
trailer -> ( )
2398
or
trailer -> ( )
2399
)
2533
2400
is
trailer_expr -> trailer trailer_expr
2400
!=
trailer_expr -> trailer trailer_expr
2400
<<
trailer_expr -> trailer trailer_expr
2400
and
trailer_expr -> trailer trailer_expr
2400
&
trailer_expr -> trailer trailer_expr
2400
//
trailer_expr -> trailer trailer_expr
2400
|
trailer_expr -> trailer trailer_expr
2400
==
trailer_expr -> trailer trailer_expr
2400
<
trailer_expr -> trailer trailer_expr
2400
or
trailer_expr -> trailer trailer_expr
2400
^
trailer_expr -> trailer trailer_expr
2400
<=
trailer_expr -> trailer trailer_expr
2400
@
trailer_expr -> trailer trailer_expr
2400
not
trailer_expr -> trailer trailer_expr
2400
in
trailer_expr -> trailer trailer_expr
2400
=
trailer_expr -> trailer trailer_expr
2400
*
trailer_expr -> trailer trailer_expr
2400
+
trailer_expr -> trailer trailer_expr
2400
if
trailer_expr -> trailer trailer_expr
2400
**
trailer_expr -> trailer trailer_expr
2400
>>
trailer_expr -> trailer trailer_expr
2400
>=
trailer_expr -> trailer trailer_expr
2400
NEWLINE
trailer_expr -> trailer trailer_expr
2400
%
trailer_expr -> trailer trailer_expr
2400
-
trailer_expr -> trailer trailer_expr
2400
>
trailer_expr -> trailer trailer_expr
2400
/
trailer_expr -> trailer trailer_expr
2401
=
trailer -> . NAME
2401
<=
trailer -> . NAME
2401
if
trailer -> . NAME
2401
<
trailer -> . NAME
2401
%
trailer -> . NAME
2401
.
trailer -> . NAME
2401
//
trailer -> . NAME
2401
|
trailer -> . NAME
2401
==
trailer -> . NAME
2401
>=
trailer -> . NAME
2401
[
trailer -> . NAME
2401
^
trailer -> . NAME
2401
<<
trailer -> . NAME
2401
in
trailer -> . NAME
2401
&
trailer -> . NAME
2401
or
trailer -> . NAME
2401
NEWLINE
trailer -> . NAME
2401
*
trailer -> . NAME
2401
(
trailer -> . NAME
2401
and
trailer -> . NAME
2401
-
trailer -> . NAME
2401
+
trailer -> . NAME
2401
!=
trailer -> . NAME
2401
not
trailer -> . NAME
2401
**
trailer -> . NAME
2401
>>
trailer -> . NAME
2401
@
trailer -> . NAME
2401
/
trailer -> . NAME
2401
is
trailer -> . NAME
2401
>
trailer -> . NAME
2402
==
xor_expr -> and_expr ^ xor_expr
2402
!=
xor_expr -> and_expr ^ xor_expr
2402
>
xor_expr -> and_expr ^ xor_expr
2402
not
xor_expr -> and_expr ^ xor_expr
2402
if
xor_expr -> and_expr ^ xor_expr
2402
NEWLINE
xor_expr -> and_expr ^ xor_expr
2402
is
xor_expr -> and_expr ^ xor_expr
2402
<=
xor_expr -> and_expr ^ xor_expr
2402
|
xor_expr -> and_expr ^ xor_expr
2402
>=
xor_expr -> and_expr ^ xor_expr
2402
and
xor_expr -> and_expr ^ xor_expr
2402
in
xor_expr -> and_expr ^ xor_expr
2402
=
xor_expr -> and_expr ^ xor_expr
2402
<
xor_expr -> and_expr ^ xor_expr
2402
or
xor_expr -> and_expr ^ xor_expr
2403
=
and_test -> not_test and and_test
2403
if
and_test -> not_test and and_test
2403
or
and_test -> not_test and and_test
2403
NEWLINE
and_test -> not_test and and_test
2404
and
expr -> xor_expr | expr
2404
in
expr -> xor_expr | expr
2404
>=
expr -> xor_expr | expr
2404
is
expr -> xor_expr | expr
2404
==
expr -> xor_expr | expr
2404
or
expr -> xor_expr | expr
2404
<
expr -> xor_expr | expr
2404
NEWLINE
expr -> xor_expr | expr
2404
if
expr -> xor_expr | expr
2404
=
expr -> xor_expr | expr
2404
not
expr -> xor_expr | expr
2404
!=
expr -> xor_expr | expr
2404
<=
expr -> xor_expr | expr
2404
>
expr -> xor_expr | expr
2405
=
lambdef -> lambda : test
2405
NEWLINE
lambdef -> lambda : test
2406
~
1828
2406
factor
1829
2406
STRING
1830
2406
shift_expr
1831
2406
term
1832
2406
NUMBER
1833
2406
{
1834
2406
atom_expr
1835
2406
[
1836
2406
-
1837
2406
None
1838
2406
(
1839
2406
arith_expr
1840
2406
atom
1841
2406
and_expr
1842
2406
+
1843
2406
not_test
1844
2406
NAME
1845
2406
power
1846
2406
True
1847
2406
comparison
1848
2406
xor_expr
1849
2406
lambda
1850
2406
False
1851
2406
and_test
1852
2406
lambdef
1854
2406
test
2534
2406
expr
1855
2406
not
1856
2406
or_test
1857
2407
if
or_test -> and_test or or_test
2407
=
or_test -> and_test or or_test
2407
NEWLINE
or_test -> and_test or or_test
2408
=
comparison -> expr comp_op comparison
2408
or
comparison -> expr comp_op comparison
2408
NEWLINE
comparison -> expr comp_op comparison
2408
if
comparison -> expr comp_op comparison
2408
and
comparison -> expr comp_op comparison
2409
else
2535
2410
=
test -> or_test if or_test else test
2411
)
test -> or_test if or_test else test
2411
,
test -> or_test if or_test else test
2412
<=
term -> factor / term
2412
!=
term -> factor / term
2412
and
term -> factor / term
2412
or
term -> factor / term
2412
)
term -> factor / term
2412
for
term -> factor / term
2412
|
term -> factor / term
2412
^
term -> factor / term
2412
>>
term -> factor / term
2412
==
term -> factor / term
2412
>
term -> factor / term
2412
if
term -> factor / term
2412
&
term -> factor / term
2412
<<
term -> factor / term
2412
+
term -> factor / term
2412
-
term -> factor / term
2412
not
term -> factor / term
2412
in
term -> factor / term
2412
<
term -> factor / term
2412
is
term -> factor / term
2412
>=
term -> factor / term
2413
is
term -> factor @ term
2413
for
term -> factor @ term
2413
and
term -> factor @ term
2413
>
term -> factor @ term
2413
not
term -> factor @ term
2413
in
term -> factor @ term
2413
==
term -> factor @ term
2413
<
term -> factor @ term
2413
or
term -> factor @ term
2413
!=
term -> factor @ term
2413
<<
term -> factor @ term
2413
<=
term -> factor @ term
2413
if
term -> factor @ term
2413
|
term -> factor @ term
2413
+
term -> factor @ term
2413
-
term -> factor @ term
2413
)
term -> factor @ term
2413
&
term -> factor @ term
2413
>=
term -> factor @ term
2413
>>
term -> factor @ term
2413
^
term -> factor @ term
2414
>
term -> factor % term
2414
!=
term -> factor % term
2414
&
term -> factor % term
2414
>=
term -> factor % term
2414
or
term -> factor % term
2414
)
term -> factor % term
2414
==
term -> factor % term
2414
^
term -> factor % term
2414
in
term -> factor % term
2414
for
term -> factor % term
2414
|
term -> factor % term
2414
and
term -> factor % term
2414
if
term -> factor % term
2414
not
term -> factor % term
2414
is
term -> factor % term
2414
<
term -> factor % term
2414
>>
term -> factor % term
2414
-
term -> factor % term
2414
<=
term -> factor % term
2414
<<
term -> factor % term
2414
+
term -> factor % term
2415
+
term -> factor // term
2415
==
term -> factor // term
2415
for
term -> factor // term
2415
<<
term -> factor // term
2415
<
term -> factor // term
2415
if
term -> factor // term
2415
in
term -> factor // term
2415
!=
term -> factor // term
2415
>
term -> factor // term
2415
not
term -> factor // term
2415
>=
term -> factor // term
2415
and
term -> factor // term
2415
is
term -> factor // term
2415
-
term -> factor // term
2415
&
term -> factor // term
2415
|
term -> factor // term
2415
^
term -> factor // term
2415
<=
term -> factor // term
2415
or
term -> factor // term
2415
>>
term -> factor // term
2415
)
term -> factor // term
2416
&
term -> factor * term
2416
-
term -> factor * term
2416
for
term -> factor * term
2416
in
term -> factor * term
2416
or
term -> factor * term
2416
<=
term -> factor * term
2416
|
term -> factor * term
2416
and
term -> factor * term
2416
not
term -> factor * term
2416
<<
term -> factor * term
2416
==
term -> factor * term
2416
)
term -> factor * term
2416
if
term -> factor * term
2416
>
term -> factor * term
2416
>>
term -> factor * term
2416
<
term -> factor * term
2416
!=
term -> factor * term
2416
>=
term -> factor * term
2416
^
term -> factor * term
2416
+
term -> factor * term
2416
is
term -> factor * term
2417
for
and_expr -> shift_expr & and_expr
2417
)
and_expr -> shift_expr & and_expr
2417
|
and_expr -> shift_expr & and_expr
2417
!=
and_expr -> shift_expr & and_expr
2417
and
and_expr -> shift_expr & and_expr
2417
>=
and_expr -> shift_expr & and_expr
2417
not
and_expr -> shift_expr & and_expr
2417
in
and_expr -> shift_expr & and_expr
2417
is
and_expr -> shift_expr & and_expr
2417
or
and_expr -> shift_expr & and_expr
2417
==
and_expr -> shift_expr & and_expr
2417
^
and_expr -> shift_expr & and_expr
2417
>
and_expr -> shift_expr & and_expr
2417
<
and_expr -> shift_expr & and_expr
2417
if
and_expr -> shift_expr & and_expr
2417
<=
and_expr -> shift_expr & and_expr
2418
for
arith_expr -> term + arith_expr
2418
>>
arith_expr -> term + arith_expr
2418
^
arith_expr -> term + arith_expr
2418
<
arith_expr -> term + arith_expr
2418
|
arith_expr -> term + arith_expr
2418
and
arith_expr -> term + arith_expr
2418
!=
arith_expr -> term + arith_expr
2418
or
arith_expr -> term + arith_expr
2418
not
arith_expr -> term + arith_expr
2418
<=
arith_expr -> term + arith_expr
2418
>
arith_expr -> term + arith_expr
2418
is
arith_expr -> term + arith_expr
2418
if
arith_expr -> term + arith_expr
2418
==
arith_expr -> term + arith_expr
2418
&
arith_expr -> term + arith_expr
2418
>=
arith_expr -> term + arith_expr
2418
)
arith_expr -> term + arith_expr
2418
in
arith_expr -> term + arith_expr
2418
<<
arith_expr -> term + arith_expr
2419
==
arith_expr -> term - arith_expr
2419
)
arith_expr -> term - arith_expr
2419
is
arith_expr -> term - arith_expr
2419
<=
arith_expr -> term - arith_expr
2419
not
arith_expr -> term - arith_expr
2419
<<
arith_expr -> term - arith_expr
2419
&
arith_expr -> term - arith_expr
2419
|
arith_expr -> term - arith_expr
2419
and
arith_expr -> term - arith_expr
2419
or
arith_expr -> term - arith_expr
2419
for
arith_expr -> term - arith_expr
2419
>>
arith_expr -> term - arith_expr
2419
if
arith_expr -> term - arith_expr
2419
>=
arith_expr -> term - arith_expr
2419
<
arith_expr -> term - arith_expr
2419
^
arith_expr -> term - arith_expr
2419
>
arith_expr -> term - arith_expr
2419
!=
arith_expr -> term - arith_expr
2419
in
arith_expr -> term - arith_expr
2420
==
xor_expr -> and_expr ^ xor_expr
2420
!=
xor_expr -> and_expr ^ xor_expr
2420
>
xor_expr -> and_expr ^ xor_expr
2420
not
xor_expr -> and_expr ^ xor_expr
2420
if
xor_expr -> and_expr ^ xor_expr
2420
is
xor_expr -> and_expr ^ xor_expr
2420
)
xor_expr -> and_expr ^ xor_expr
2420
<=
xor_expr -> and_expr ^ xor_expr
2420
for
xor_expr -> and_expr ^ xor_expr
2420
|
xor_expr -> and_expr ^ xor_expr
2420
>=
xor_expr -> and_expr ^ xor_expr
2420
and
xor_expr -> and_expr ^ xor_expr
2420
in
xor_expr -> and_expr ^ xor_expr
2420
<
xor_expr -> and_expr ^ xor_expr
2420
or
xor_expr -> and_expr ^ xor_expr
2421
@
power -> atom_expr ** factor
2421
==
power -> atom_expr ** factor
2421
)
power -> atom_expr ** factor
2421
&
power -> atom_expr ** factor
2421
-
power -> atom_expr ** factor
2421
>
power -> atom_expr ** factor
2421
and
power -> atom_expr ** factor
2421
|
power -> atom_expr ** factor
2421
<=
power -> atom_expr ** factor
2421
%
power -> atom_expr ** factor
2421
or
power -> atom_expr ** factor
2421
*
power -> atom_expr ** factor
2421
not
power -> atom_expr ** factor
2421
in
power -> atom_expr ** factor
2421
<<
power -> atom_expr ** factor
2421
//
power -> atom_expr ** factor
2421
/
power -> atom_expr ** factor
2421
>>
power -> atom_expr ** factor
2421
^
power -> atom_expr ** factor
2421
if
power -> atom_expr ** factor
2421
!=
power -> atom_expr ** factor
2421
for
power -> atom_expr ** factor
2421
is
power -> atom_expr ** factor
2421
<
power -> atom_expr ** factor
2421
+
power -> atom_expr ** factor
2421
>=
power -> atom_expr ** factor
2422
/
atom -> [ test_list_comp ]
2422
*
atom -> [ test_list_comp ]
2422
or
atom -> [ test_list_comp ]
2422
|
atom -> [ test_list_comp ]
2422
==
atom -> [ test_list_comp ]
2422
is
atom -> [ test_list_comp ]
2422
-
atom -> [ test_list_comp ]
2422
**
atom -> [ test_list_comp ]
2422
&
atom -> [ test_list_comp ]
2422
(
atom -> [ test_list_comp ]
2422
<
atom -> [ test_list_comp ]
2422
@
atom -> [ test_list_comp ]
2422
//
atom -> [ test_list_comp ]
2422
>
atom -> [ test_list_comp ]
2422
)
atom -> [ test_list_comp ]
2422
if
atom -> [ test_list_comp ]
2422
in
atom -> [ test_list_comp ]
2422
^
atom -> [ test_list_comp ]
2422
<<
atom -> [ test_list_comp ]
2422
for
atom -> [ test_list_comp ]
2422
[
atom -> [ test_list_comp ]
2422
!=
atom -> [ test_list_comp ]
2422
<=
atom -> [ test_list_comp ]
2422
and
atom -> [ test_list_comp ]
2422
%
atom -> [ test_list_comp ]
2422
not
atom -> [ test_list_comp ]
2422
+
atom -> [ test_list_comp ]
2422
>=
atom -> [ test_list_comp ]
2422
>>
atom -> [ test_list_comp ]
2422
.
atom -> [ test_list_comp ]
2423
@
atom -> ( test_list_comp )
2423
>>
atom -> ( test_list_comp )
2423
<<
atom -> ( test_list_comp )
2423
==
atom -> ( test_list_comp )
2423
is
atom -> ( test_list_comp )
2423
or
atom -> ( test_list_comp )
2423
<=
atom -> ( test_list_comp )
2423
[
atom -> ( test_list_comp )
2423
%
atom -> ( test_list_comp )
2423
if
atom -> ( test_list_comp )
2423
^
atom -> ( test_list_comp )
2423
<
atom -> ( test_list_comp )
2423
and
atom -> ( test_list_comp )
2423
.
atom -> ( test_list_comp )
2423
+
atom -> ( test_list_comp )
2423
&
atom -> ( test_list_comp )
2423
!=
atom -> ( test_list_comp )
2423
in
atom -> ( test_list_comp )
2423
**
atom -> ( test_list_comp )
2423
not
atom -> ( test_list_comp )
2423
-
atom -> ( test_list_comp )
2423
(
atom -> ( test_list_comp )
2423
*
atom -> ( test_list_comp )
2423
|
atom -> ( test_list_comp )
2423
//
atom -> ( test_list_comp )
2423
>
atom -> ( test_list_comp )
2423
for
atom -> ( test_list_comp )
2423
>=
atom -> ( test_list_comp )
2423
)
atom -> ( test_list_comp )
2423
/
atom -> ( test_list_comp )
2424
>=
shift_expr -> arith_expr >> shift_expr
2424
not
shift_expr -> arith_expr >> shift_expr
2424
>
shift_expr -> arith_expr >> shift_expr
2424
^
shift_expr -> arith_expr >> shift_expr
2424
for
shift_expr -> arith_expr >> shift_expr
2424
is
shift_expr -> arith_expr >> shift_expr
2424
&
shift_expr -> arith_expr >> shift_expr
2424
if
shift_expr -> arith_expr >> shift_expr
2424
!=
shift_expr -> arith_expr >> shift_expr
2424
<=
shift_expr -> arith_expr >> shift_expr
2424
and
shift_expr -> arith_expr >> shift_expr
2424
==
shift_expr -> arith_expr >> shift_expr
2424
or
shift_expr -> arith_expr >> shift_expr
2424
in
shift_expr -> arith_expr >> shift_expr
2424
|
shift_expr -> arith_expr >> shift_expr
2424
<
shift_expr -> arith_expr >> shift_expr
2424
)
shift_expr -> arith_expr >> shift_expr
2425
>=
shift_expr -> arith_expr << shift_expr
2425
in
shift_expr -> arith_expr << shift_expr
2425
>
shift_expr -> arith_expr << shift_expr
2425
|
shift_expr -> arith_expr << shift_expr
2425
!=
shift_expr -> arith_expr << shift_expr
2425
<=
shift_expr -> arith_expr << shift_expr
2425
)
shift_expr -> arith_expr << shift_expr
2425
&
shift_expr -> arith_expr << shift_expr
2425
not
shift_expr -> arith_expr << shift_expr
2425
^
shift_expr -> arith_expr << shift_expr
2425
<
shift_expr -> arith_expr << shift_expr
2425
==
shift_expr -> arith_expr << shift_expr
2425
if
shift_expr -> arith_expr << shift_expr
2425
or
shift_expr -> arith_expr << shift_expr
2425
for
shift_expr -> arith_expr << shift_expr
2425
is
shift_expr -> arith_expr << shift_expr
2425
and
shift_expr -> arith_expr << shift_expr
2426
]
2536
2427
)
2537
2428
/
trailer -> ( )
2428
[
trailer -> ( )
2428
(
trailer -> ( )
2428
|
trailer -> ( )
2428
<=
trailer -> ( )
2428
in
trailer -> ( )
2428
not
trailer -> ( )
2428
>>
trailer -> ( )
2428
^
trailer -> ( )
2428
.
trailer -> ( )
2428
**
trailer -> ( )
2428
if
trailer -> ( )
2428
)
trailer -> ( )
2428
+
trailer -> ( )
2428
is
trailer -> ( )
2428
<
trailer -> ( )
2428
>
trailer -> ( )
2428
==
trailer -> ( )
2428
//
trailer -> ( )
2428
<<
trailer -> ( )
2428
*
trailer -> ( )
2428
for
trailer -> ( )
2428
-
trailer -> ( )
2428
>=
trailer -> ( )
2428
%
trailer -> ( )
2428
and
trailer -> ( )
2428
@
trailer -> ( )
2428
&
trailer -> ( )
2428
!=
trailer -> ( )
2428
or
trailer -> ( )
2429
<=
trailer -> . NAME
2429
if
trailer -> . NAME
2429
<
trailer -> . NAME
2429
%
trailer -> . NAME
2429
.
trailer -> . NAME
2429
//
trailer -> . NAME
2429
)
trailer -> . NAME
2429
for
trailer -> . NAME
2429
|
trailer -> . NAME
2429
==
trailer -> . NAME
2429
>=
trailer -> . NAME
2429
[
trailer -> . NAME
2429
^
trailer -> . NAME
2429
<<
trailer -> . NAME
2429
in
trailer -> . NAME
2429
&
trailer -> . NAME
2429
or
trailer -> . NAME
2429
*
trailer -> . NAME
2429
(
trailer -> . NAME
2429
and
trailer -> . NAME
2429
-
trailer -> . NAME
2429
+
trailer -> . NAME
2429
!=
trailer -> . NAME
2429
not
trailer -> . NAME
2429
**
trailer -> . NAME
2429
>>
trailer -> . NAME
2429
@
trailer -> . NAME
2429
/
trailer -> . NAME
2429
is
trailer -> . NAME
2429
>
trailer -> . NAME
2430
is
trailer_expr -> trailer trailer_expr
2430
!=
trailer_expr -> trailer trailer_expr
2430
<<
trailer_expr -> trailer trailer_expr
2430
)
trailer_expr -> trailer trailer_expr
2430
and
trailer_expr -> trailer trailer_expr
2430
&
trailer_expr -> trailer trailer_expr
2430
//
trailer_expr -> trailer trailer_expr
2430
|
trailer_expr -> trailer trailer_expr
2430
==
trailer_expr -> trailer trailer_expr
2430
<
trailer_expr -> trailer trailer_expr
2430
or
trailer_expr -> trailer trailer_expr
2430
^
trailer_expr -> trailer trailer_expr
2430
<=
trailer_expr -> trailer trailer_expr
2430
@
trailer_expr -> trailer trailer_expr
2430
in
trailer_expr -> trailer trailer_expr
2430
not
trailer_expr -> trailer trailer_expr
2430
for
trailer_expr -> trailer trailer_expr
2430
*
trailer_expr -> trailer trailer_expr
2430
+
trailer_expr -> trailer trailer_expr
2430
if
trailer_expr -> trailer trailer_expr
2430
**
trailer_expr -> trailer trailer_expr
2430
>>
trailer_expr -> trailer trailer_expr
2430
>=
trailer_expr -> trailer trailer_expr
2430
%
trailer_expr -> trailer trailer_expr
2430
-
trailer_expr -> trailer trailer_expr
2430
>
trailer_expr -> trailer trailer_expr
2430
/
trailer_expr -> trailer trailer_expr
2431
and
expr -> xor_expr | expr
2431
in
expr -> xor_expr | expr
2431
>=
expr -> xor_expr | expr
2431
for
expr -> xor_expr | expr
2431
is
expr -> xor_expr | expr
2431
==
expr -> xor_expr | expr
2431
or
expr -> xor_expr | expr
2431
<
expr -> xor_expr | expr
2431
if
expr -> xor_expr | expr
2431
)
expr -> xor_expr | expr
2431
not
expr -> xor_expr | expr
2431
!=
expr -> xor_expr | expr
2431
<=
expr -> xor_expr | expr
2431
>
expr -> xor_expr | expr
2432
if
and_test -> not_test and and_test
2432
)
and_test -> not_test and and_test
2432
for
and_test -> not_test and and_test
2432
or
and_test -> not_test and and_test
2433
)
or_test -> and_test or or_test
2433
if
or_test -> and_test or or_test
2433
for
or_test -> and_test or or_test
2434
)
comparison -> expr comp_op comparison
2434
or
comparison -> expr comp_op comparison
2434
if
comparison -> expr comp_op comparison
2434
for
comparison -> expr comp_op comparison
2434
and
comparison -> expr comp_op comparison
2435
for
test_nocond -> or_test
2435
)
test_nocond -> or_test
2435
if
test_nocond -> or_test
2436
comp_if
2239
2436
comp_for
2240
2436
)
comp_iter -> 
2436
if
2242
2436
for
463
2436
comp_iter
2538
2437
for
test_nocond -> lambdef_nocond
2437
)
test_nocond -> lambdef_nocond
2437
if
test_nocond -> lambdef_nocond
2438
:
2539
2438
NAME
251
2438
vfpdef
253
2438
varargslist
2540
2439
confbody
2541
2439
NAME
1945
2439
DEDENT
confbody -> NAME test NEWLINE
2440
elif
1556
2440
global
elif_clause -> 
2440
elif_clause
2542
2440
conf
elif_clause -> 
2440
with
elif_clause -> 
2440
while
elif_clause -> 
2440
continue
elif_clause -> 
2440
class
elif_clause -> 
2440
{
elif_clause -> 
2440
STRING
elif_clause -> 
2440
$
elif_clause -> 
2440
NEWLINE
elif_clause -> 
2440
return
elif_clause -> 
2440
pass
elif_clause -> 
2440
del
elif_clause -> 
2440
True
elif_clause -> 
2440
NAME
elif_clause -> 
2440
for
elif_clause -> 
2440
not
elif_clause -> 
2440
assert
elif_clause -> 
2440
raise
elif_clause -> 
2440
def
elif_clause -> 
2440
if
elif_clause -> 
2440
yield
elif_clause -> 
2440
else
elif_clause -> 
2440
break
elif_clause -> 
2440
NUMBER
elif_clause -> 
2440
-
elif_clause -> 
2440
None
elif_clause -> 
2440
begsim
elif_clause -> 
2440
try
elif_clause -> 
2440
~
elif_clause -> 
2440
lambda
elif_clause -> 
2440
@
elif_clause -> 
2440
[
elif_clause -> 
2440
(
elif_clause -> 
2440
resetstats
elif_clause -> 
2440
nonlocal
elif_clause -> 
2440
endsim
elif_clause -> 
2440
False
elif_clause -> 
2440
+
elif_clause -> 
2441
NAME
if_stmt -> if test : suite elif_clause else : suite
2441
endsim
if_stmt -> if test : suite elif_clause else : suite
2441
not
if_stmt -> if test : suite elif_clause else : suite
2441
NEWLINE
if_stmt -> if test : suite elif_clause else : suite
2441
begsim
if_stmt -> if test : suite elif_clause else : suite
2441
try
if_stmt -> if test : suite elif_clause else : suite
2441
def
if_stmt -> if test : suite elif_clause else : suite
2441
pass
if_stmt -> if test : suite elif_clause else : suite
2441
(
if_stmt -> if test : suite elif_clause else : suite
2441
nonlocal
if_stmt -> if test : suite elif_clause else : suite
2441
None
if_stmt -> if test : suite elif_clause else : suite
2441
conf
if_stmt -> if test : suite elif_clause else : suite
2441
break
if_stmt -> if test : suite elif_clause else : suite
2441
while
if_stmt -> if test : suite elif_clause else : suite
2441
~
if_stmt -> if test : suite elif_clause else : suite
2441
{
if_stmt -> if test : suite elif_clause else : suite
2441
raise
if_stmt -> if test : suite elif_clause else : suite
2441
resetstats
if_stmt -> if test : suite elif_clause else : suite
2441
global
if_stmt -> if test : suite elif_clause else : suite
2441
False
if_stmt -> if test : suite elif_clause else : suite
2441
[
if_stmt -> if test : suite elif_clause else : suite
2441
assert
if_stmt -> if test : suite elif_clause else : suite
2441
continue
if_stmt -> if test : suite elif_clause else : suite
2441
with
if_stmt -> if test : suite elif_clause else : suite
2441
for
if_stmt -> if test : suite elif_clause else : suite
2441
True
if_stmt -> if test : suite elif_clause else : suite
2441
@
if_stmt -> if test : suite elif_clause else : suite
2441
return
if_stmt -> if test : suite elif_clause else : suite
2441
if
if_stmt -> if test : suite elif_clause else : suite
2441
yield
if_stmt -> if test : suite elif_clause else : suite
2441
del
if_stmt -> if test : suite elif_clause else : suite
2441
NUMBER
if_stmt -> if test : suite elif_clause else : suite
2441
class
if_stmt -> if test : suite elif_clause else : suite
2441
+
if_stmt -> if test : suite elif_clause else : suite
2441
-
if_stmt -> if test : suite elif_clause else : suite
2441
STRING
if_stmt -> if test : suite elif_clause else : suite
2441
lambda
if_stmt -> if test : suite elif_clause else : suite
2441
$
if_stmt -> if test : suite elif_clause else : suite
2442
)
comp_iter -> comp_if
2442
,
comp_iter -> comp_if
2443
)
comp_for -> for expr_list in or_test comp_iter
2443
,
comp_for -> for expr_list in or_test comp_iter
2444
)
comp_iter -> comp_for
2444
,
comp_iter -> comp_for
2445
~
92
2445
factor
93
2445
STRING
94
2445
shift_expr
95
2445
arith_expr
96
2445
term
97
2445
NUMBER
98
2445
and_expr
99
2445
{
100
2445
atom_expr
101
2445
[
102
2445
-
103
2445
None
105
2445
(
106
2445
atom
107
2445
or_test
2543
2445
+
109
2445
NAME
110
2445
power
111
2445
True
113
2445
comparison
114
2445
xor_expr
115
2445
test_nocond
2544
2445
False
117
2445
lambdef_nocond
2545
2445
not_test
118
2445
lambda
2546
2445
and_test
122
2445
not
123
2445
expr
124
2446
<=
term -> factor / term
2446
!=
term -> factor / term
2446
and
term -> factor / term
2446
or
term -> factor / term
2446
)
term -> factor / term
2446
|
term -> factor / term
2446
^
term -> factor / term
2446
>>
term -> factor / term
2446
==
term -> factor / term
2446
>
term -> factor / term
2446
if
term -> factor / term
2446
&
term -> factor / term
2446
=
term -> factor / term
2446
<<
term -> factor / term
2446
+
term -> factor / term
2446
-
term -> factor / term
2446
not
term -> factor / term
2446
in
term -> factor / term
2446
<
term -> factor / term
2446
is
term -> factor / term
2446
>=
term -> factor / term
2446
,
term -> factor / term
2447
is
term -> factor @ term
2447
and
term -> factor @ term
2447
>
term -> factor @ term
2447
not
term -> factor @ term
2447
in
term -> factor @ term
2447
==
term -> factor @ term
2447
<
term -> factor @ term
2447
,
term -> factor @ term
2447
or
term -> factor @ term
2447
!=
term -> factor @ term
2447
<<
term -> factor @ term
2447
<=
term -> factor @ term
2447
=
term -> factor @ term
2447
if
term -> factor @ term
2447
|
term -> factor @ term
2447
+
term -> factor @ term
2447
-
term -> factor @ term
2447
)
term -> factor @ term
2447
&
term -> factor @ term
2447
>=
term -> factor @ term
2447
>>
term -> factor @ term
2447
^
term -> factor @ term
2448
>
term -> factor % term
2448
!=
term -> factor % term
2448
&
term -> factor % term
2448
>=
term -> factor % term
2448
or
term -> factor % term
2448
=
term -> factor % term
2448
)
term -> factor % term
2448
==
term -> factor % term
2448
^
term -> factor % term
2448
in
term -> factor % term
2448
,
term -> factor % term
2448
|
term -> factor % term
2448
and
term -> factor % term
2448
if
term -> factor % term
2448
not
term -> factor % term
2448
is
term -> factor % term
2448
<
term -> factor % term
2448
>>
term -> factor % term
2448
-
term -> factor % term
2448
<=
term -> factor % term
2448
<<
term -> factor % term
2448
+
term -> factor % term
2449
+
term -> factor // term
2449
==
term -> factor // term
2449
<<
term -> factor // term
2449
<
term -> factor // term
2449
if
term -> factor // term
2449
in
term -> factor // term
2449
!=
term -> factor // term
2449
>
term -> factor // term
2449
not
term -> factor // term
2449
=
term -> factor // term
2449
>=
term -> factor // term
2449
and
term -> factor // term
2449
is
term -> factor // term
2449
-
term -> factor // term
2449
&
term -> factor // term
2449
|
term -> factor // term
2449
,
term -> factor // term
2449
^
term -> factor // term
2449
<=
term -> factor // term
2449
or
term -> factor // term
2449
>>
term -> factor // term
2449
)
term -> factor // term
2450
&
term -> factor * term
2450
-
term -> factor * term
2450
in
term -> factor * term
2450
or
term -> factor * term
2450
<=
term -> factor * term
2450
,
term -> factor * term
2450
|
term -> factor * term
2450
and
term -> factor * term
2450
not
term -> factor * term
2450
<<
term -> factor * term
2450
==
term -> factor * term
2450
)
term -> factor * term
2450
if
term -> factor * term
2450
>
term -> factor * term
2450
>>
term -> factor * term
2450
<
term -> factor * term
2450
!=
term -> factor * term
2450
=
term -> factor * term
2450
>=
term -> factor * term
2450
^
term -> factor * term
2450
+
term -> factor * term
2450
is
term -> factor * term
2451
)
and_expr -> shift_expr & and_expr
2451
|
and_expr -> shift_expr & and_expr
2451
!=
and_expr -> shift_expr & and_expr
2451
,
and_expr -> shift_expr & and_expr
2451
=
and_expr -> shift_expr & and_expr
2451
>=
and_expr -> shift_expr & and_expr
2451
not
and_expr -> shift_expr & and_expr
2451
and
and_expr -> shift_expr & and_expr
2451
is
and_expr -> shift_expr & and_expr
2451
in
and_expr -> shift_expr & and_expr
2451
or
and_expr -> shift_expr & and_expr
2451
==
and_expr -> shift_expr & and_expr
2451
^
and_expr -> shift_expr & and_expr
2451
>
and_expr -> shift_expr & and_expr
2451
<
and_expr -> shift_expr & and_expr
2451
if
and_expr -> shift_expr & and_expr
2451
<=
and_expr -> shift_expr & and_expr
2452
>=
shift_expr -> arith_expr >> shift_expr
2452
not
shift_expr -> arith_expr >> shift_expr
2452
=
shift_expr -> arith_expr >> shift_expr
2452
>
shift_expr -> arith_expr >> shift_expr
2452
^
shift_expr -> arith_expr >> shift_expr
2452
,
shift_expr -> arith_expr >> shift_expr
2452
is
shift_expr -> arith_expr >> shift_expr
2452
&
shift_expr -> arith_expr >> shift_expr
2452
!=
shift_expr -> arith_expr >> shift_expr
2452
<=
shift_expr -> arith_expr >> shift_expr
2452
and
shift_expr -> arith_expr >> shift_expr
2452
if
shift_expr -> arith_expr >> shift_expr
2452
==
shift_expr -> arith_expr >> shift_expr
2452
or
shift_expr -> arith_expr >> shift_expr
2452
in
shift_expr -> arith_expr >> shift_expr
2452
|
shift_expr -> arith_expr >> shift_expr
2452
<
shift_expr -> arith_expr >> shift_expr
2452
)
shift_expr -> arith_expr >> shift_expr
2453
,
shift_expr -> arith_expr << shift_expr
2453
>=
shift_expr -> arith_expr << shift_expr
2453
in
shift_expr -> arith_expr << shift_expr
2453
>
shift_expr -> arith_expr << shift_expr
2453
|
shift_expr -> arith_expr << shift_expr
2453
!=
shift_expr -> arith_expr << shift_expr
2453
<=
shift_expr -> arith_expr << shift_expr
2453
)
shift_expr -> arith_expr << shift_expr
2453
&
shift_expr -> arith_expr << shift_expr
2453
not
shift_expr -> arith_expr << shift_expr
2453
=
shift_expr -> arith_expr << shift_expr
2453
<
shift_expr -> arith_expr << shift_expr
2453
==
shift_expr -> arith_expr << shift_expr
2453
if
shift_expr -> arith_expr << shift_expr
2453
^
shift_expr -> arith_expr << shift_expr
2453
or
shift_expr -> arith_expr << shift_expr
2453
is
shift_expr -> arith_expr << shift_expr
2453
and
shift_expr -> arith_expr << shift_expr
2454
>>
arith_expr -> term + arith_expr
2454
^
arith_expr -> term + arith_expr
2454
<
arith_expr -> term + arith_expr
2454
|
arith_expr -> term + arith_expr
2454
and
arith_expr -> term + arith_expr
2454
=
arith_expr -> term + arith_expr
2454
!=
arith_expr -> term + arith_expr
2454
or
arith_expr -> term + arith_expr
2454
not
arith_expr -> term + arith_expr
2454
<=
arith_expr -> term + arith_expr
2454
>
arith_expr -> term + arith_expr
2454
,
arith_expr -> term + arith_expr
2454
if
arith_expr -> term + arith_expr
2454
is
arith_expr -> term + arith_expr
2454
==
arith_expr -> term + arith_expr
2454
&
arith_expr -> term + arith_expr
2454
>=
arith_expr -> term + arith_expr
2454
)
arith_expr -> term + arith_expr
2454
in
arith_expr -> term + arith_expr
2454
<<
arith_expr -> term + arith_expr
2455
==
arith_expr -> term - arith_expr
2455
)
arith_expr -> term - arith_expr
2455
is
arith_expr -> term - arith_expr
2455
<=
arith_expr -> term - arith_expr
2455
not
arith_expr -> term - arith_expr
2455
<<
arith_expr -> term - arith_expr
2455
=
arith_expr -> term - arith_expr
2455
&
arith_expr -> term - arith_expr
2455
|
arith_expr -> term - arith_expr
2455
and
arith_expr -> term - arith_expr
2455
or
arith_expr -> term - arith_expr
2455
,
arith_expr -> term - arith_expr
2455
>>
arith_expr -> term - arith_expr
2455
if
arith_expr -> term - arith_expr
2455
>=
arith_expr -> term - arith_expr
2455
<
arith_expr -> term - arith_expr
2455
^
arith_expr -> term - arith_expr
2455
>
arith_expr -> term - arith_expr
2455
!=
arith_expr -> term - arith_expr
2455
in
arith_expr -> term - arith_expr
2456
@
power -> atom_expr ** factor
2456
==
power -> atom_expr ** factor
2456
)
power -> atom_expr ** factor
2456
&
power -> atom_expr ** factor
2456
-
power -> atom_expr ** factor
2456
>
power -> atom_expr ** factor
2456
and
power -> atom_expr ** factor
2456
|
power -> atom_expr ** factor
2456
<=
power -> atom_expr ** factor
2456
%
power -> atom_expr ** factor
2456
or
power -> atom_expr ** factor
2456
=
power -> atom_expr ** factor
2456
*
power -> atom_expr ** factor
2456
not
power -> atom_expr ** factor
2456
in
power -> atom_expr ** factor
2456
<<
power -> atom_expr ** factor
2456
//
power -> atom_expr ** factor
2456
/
power -> atom_expr ** factor
2456
>>
power -> atom_expr ** factor
2456
,
power -> atom_expr ** factor
2456
^
power -> atom_expr ** factor
2456
if
power -> atom_expr ** factor
2456
!=
power -> atom_expr ** factor
2456
is
power -> atom_expr ** factor
2456
<
power -> atom_expr ** factor
2456
+
power -> atom_expr ** factor
2456
>=
power -> atom_expr ** factor
2457
/
atom -> [ test_list_comp ]
2457
,
atom -> [ test_list_comp ]
2457
*
atom -> [ test_list_comp ]
2457
or
atom -> [ test_list_comp ]
2457
|
atom -> [ test_list_comp ]
2457
==
atom -> [ test_list_comp ]
2457
is
atom -> [ test_list_comp ]
2457
-
atom -> [ test_list_comp ]
2457
**
atom -> [ test_list_comp ]
2457
&
atom -> [ test_list_comp ]
2457
(
atom -> [ test_list_comp ]
2457
=
atom -> [ test_list_comp ]
2457
<
atom -> [ test_list_comp ]
2457
@
atom -> [ test_list_comp ]
2457
//
atom -> [ test_list_comp ]
2457
>
atom -> [ test_list_comp ]
2457
)
atom -> [ test_list_comp ]
2457
if
atom -> [ test_list_comp ]
2457
in
atom -> [ test_list_comp ]
2457
^
atom -> [ test_list_comp ]
2457
<<
atom -> [ test_list_comp ]
2457
[
atom -> [ test_list_comp ]
2457
!=
atom -> [ test_list_comp ]
2457
<=
atom -> [ test_list_comp ]
2457
and
atom -> [ test_list_comp ]
2457
%
atom -> [ test_list_comp ]
2457
not
atom -> [ test_list_comp ]
2457
+
atom -> [ test_list_comp ]
2457
>=
atom -> [ test_list_comp ]
2457
>>
atom -> [ test_list_comp ]
2457
.
atom -> [ test_list_comp ]
2458
@
atom -> ( test_list_comp )
2458
>>
atom -> ( test_list_comp )
2458
<<
atom -> ( test_list_comp )
2458
==
atom -> ( test_list_comp )
2458
is
atom -> ( test_list_comp )
2458
or
atom -> ( test_list_comp )
2458
<=
atom -> ( test_list_comp )
2458
[
atom -> ( test_list_comp )
2458
%
atom -> ( test_list_comp )
2458
if
atom -> ( test_list_comp )
2458
^
atom -> ( test_list_comp )
2458
<
atom -> ( test_list_comp )
2458
and
atom -> ( test_list_comp )
2458
=
atom -> ( test_list_comp )
2458
.
atom -> ( test_list_comp )
2458
+
atom -> ( test_list_comp )
2458
&
atom -> ( test_list_comp )
2458
!=
atom -> ( test_list_comp )
2458
in
atom -> ( test_list_comp )
2458
**
atom -> ( test_list_comp )
2458
not
atom -> ( test_list_comp )
2458
-
atom -> ( test_list_comp )
2458
(
atom -> ( test_list_comp )
2458
*
atom -> ( test_list_comp )
2458
|
atom -> ( test_list_comp )
2458
//
atom -> ( test_list_comp )
2458
>
atom -> ( test_list_comp )
2458
>=
atom -> ( test_list_comp )
2458
,
atom -> ( test_list_comp )
2458
)
atom -> ( test_list_comp )
2458
/
atom -> ( test_list_comp )
2459
]
2547
2460
)
2548
2461
,
trailer -> ( )
2461
/
trailer -> ( )
2461
[
trailer -> ( )
2461
(
trailer -> ( )
2461
|
trailer -> ( )
2461
<=
trailer -> ( )
2461
in
trailer -> ( )
2461
not
trailer -> ( )
2461
>>
trailer -> ( )
2461
^
trailer -> ( )
2461
.
trailer -> ( )
2461
**
trailer -> ( )
2461
if
trailer -> ( )
2461
)
trailer -> ( )
2461
+
trailer -> ( )
2461
is
trailer -> ( )
2461
<
trailer -> ( )
2461
>
trailer -> ( )
2461
==
trailer -> ( )
2461
//
trailer -> ( )
2461
<<
trailer -> ( )
2461
*
trailer -> ( )
2461
-
trailer -> ( )
2461
=
trailer -> ( )
2461
>=
trailer -> ( )
2461
%
trailer -> ( )
2461
and
trailer -> ( )
2461
@
trailer -> ( )
2461
&
trailer -> ( )
2461
!=
trailer -> ( )
2461
or
trailer -> ( )
2462
is
trailer_expr -> trailer trailer_expr
2462
!=
trailer_expr -> trailer trailer_expr
2462
<<
trailer_expr -> trailer trailer_expr
2462
)
trailer_expr -> trailer trailer_expr
2462
and
trailer_expr -> trailer trailer_expr
2462
&
trailer_expr -> trailer trailer_expr
2462
//
trailer_expr -> trailer trailer_expr
2462
|
trailer_expr -> trailer trailer_expr
2462
==
trailer_expr -> trailer trailer_expr
2462
<
trailer_expr -> trailer trailer_expr
2462
or
trailer_expr -> trailer trailer_expr
2462
^
trailer_expr -> trailer trailer_expr
2462
<=
trailer_expr -> trailer trailer_expr
2462
@
trailer_expr -> trailer trailer_expr
2462
not
trailer_expr -> trailer trailer_expr
2462
in
trailer_expr -> trailer trailer_expr
2462
=
trailer_expr -> trailer trailer_expr
2462
*
trailer_expr -> trailer trailer_expr
2462
+
trailer_expr -> trailer trailer_expr
2462
if
trailer_expr -> trailer trailer_expr
2462
**
trailer_expr -> trailer trailer_expr
2462
>>
trailer_expr -> trailer trailer_expr
2462
>=
trailer_expr -> trailer trailer_expr
2462
%
trailer_expr -> trailer trailer_expr
2462
-
trailer_expr -> trailer trailer_expr
2462
>
trailer_expr -> trailer trailer_expr
2462
/
trailer_expr -> trailer trailer_expr
2462
,
trailer_expr -> trailer trailer_expr
2463
=
trailer -> . NAME
2463
<=
trailer -> . NAME
2463
if
trailer -> . NAME
2463
<
trailer -> . NAME
2463
%
trailer -> . NAME
2463
.
trailer -> . NAME
2463
//
trailer -> . NAME
2463
)
trailer -> . NAME
2463
|
trailer -> . NAME
2463
==
trailer -> . NAME
2463
>=
trailer -> . NAME
2463
[
trailer -> . NAME
2463
^
trailer -> . NAME
2463
<<
trailer -> . NAME
2463
in
trailer -> . NAME
2463
&
trailer -> . NAME
2463
or
trailer -> . NAME
2463
*
trailer -> . NAME
2463
(
trailer -> . NAME
2463
and
trailer -> . NAME
2463
-
trailer -> . NAME
2463
+
trailer -> . NAME
2463
!=
trailer -> . NAME
2463
not
trailer -> . NAME
2463
**
trailer -> . NAME
2463
>>
trailer -> . NAME
2463
@
trailer -> . NAME
2463
/
trailer -> . NAME
2463
is
trailer -> . NAME
2463
>
trailer -> . NAME
2463
,
trailer -> . NAME
2464
==
xor_expr -> and_expr ^ xor_expr
2464
!=
xor_expr -> and_expr ^ xor_expr
2464
>
xor_expr -> and_expr ^ xor_expr
2464
not
xor_expr -> and_expr ^ xor_expr
2464
if
xor_expr -> and_expr ^ xor_expr
2464
is
xor_expr -> and_expr ^ xor_expr
2464
)
xor_expr -> and_expr ^ xor_expr
2464
<=
xor_expr -> and_expr ^ xor_expr
2464
,
xor_expr -> and_expr ^ xor_expr
2464
|
xor_expr -> and_expr ^ xor_expr
2464
>=
xor_expr -> and_expr ^ xor_expr
2464
and
xor_expr -> and_expr ^ xor_expr
2464
in
xor_expr -> and_expr ^ xor_expr
2464
=
xor_expr -> and_expr ^ xor_expr
2464
<
xor_expr -> and_expr ^ xor_expr
2464
or
xor_expr -> and_expr ^ xor_expr
2465
=
and_test -> not_test and and_test
2465
,
and_test -> not_test and and_test
2465
if
and_test -> not_test and and_test
2465
)
and_test -> not_test and and_test
2465
or
and_test -> not_test and and_test
2466
and
expr -> xor_expr | expr
2466
in
expr -> xor_expr | expr
2466
>=
expr -> xor_expr | expr
2466
is
expr -> xor_expr | expr
2466
==
expr -> xor_expr | expr
2466
or
expr -> xor_expr | expr
2466
<
expr -> xor_expr | expr
2466
if
expr -> xor_expr | expr
2466
)
expr -> xor_expr | expr
2466
=
expr -> xor_expr | expr
2466
,
expr -> xor_expr | expr
2466
not
expr -> xor_expr | expr
2466
!=
expr -> xor_expr | expr
2466
<=
expr -> xor_expr | expr
2466
>
expr -> xor_expr | expr
2467
)
or_test -> and_test or or_test
2467
if
or_test -> and_test or or_test
2467
,
or_test -> and_test or or_test
2467
=
or_test -> and_test or or_test
2468
~
1971
2468
factor
1972
2468
STRING
1973
2468
shift_expr
1974
2468
arith_expr
1975
2468
term
1976
2468
NUMBER
1977
2468
{
1978
2468
atom_expr
1979
2468
[
1980
2468
-
1981
2468
None
1982
2468
(
1983
2468
atom
1984
2468
and_expr
1985
2468
+
1986
2468
not_test
1987
2468
NAME
1988
2468
power
1989
2468
True
1990
2468
comparison
1991
2468
xor_expr
1992
2468
False
1993
2468
and_test
1994
2468
lambda
1995
2468
test
2549
2468
lambdef
1996
2468
expr
1997
2468
not
1998
2468
or_test
1999
2469
,
lambdef -> lambda : test
2469
=
lambdef -> lambda : test
2469
)
lambdef -> lambda : test
2470
)
comparison -> expr comp_op comparison
2470
=
comparison -> expr comp_op comparison
2470
or
comparison -> expr comp_op comparison
2470
,
comparison -> expr comp_op comparison
2470
if
comparison -> expr comp_op comparison
2470
and
comparison -> expr comp_op comparison
2471
else
2550
2472
~
simple_stmt -> small_stmt NEWLINE
2472
begsim
simple_stmt -> small_stmt NEWLINE
2472
endsim
simple_stmt -> small_stmt NEWLINE
2472
if
simple_stmt -> small_stmt NEWLINE
2472
break
simple_stmt -> small_stmt NEWLINE
2472
False
simple_stmt -> small_stmt NEWLINE
2472
def
simple_stmt -> small_stmt NEWLINE
2472
STRING
simple_stmt -> small_stmt NEWLINE
2472
finally
simple_stmt -> small_stmt NEWLINE
2472
assert
simple_stmt -> small_stmt NEWLINE
2472
lambda
simple_stmt -> small_stmt NEWLINE
2472
yield
simple_stmt -> small_stmt NEWLINE
2472
True
simple_stmt -> small_stmt NEWLINE
2472
+
simple_stmt -> small_stmt NEWLINE
2472
try
simple_stmt -> small_stmt NEWLINE
2472
for
simple_stmt -> small_stmt NEWLINE
2472
conf
simple_stmt -> small_stmt NEWLINE
2472
nonlocal
simple_stmt -> small_stmt NEWLINE
2472
continue
simple_stmt -> small_stmt NEWLINE
2472
-
simple_stmt -> small_stmt NEWLINE
2472
resetstats
simple_stmt -> small_stmt NEWLINE
2472
raise
simple_stmt -> small_stmt NEWLINE
2472
(
simple_stmt -> small_stmt NEWLINE
2472
None
simple_stmt -> small_stmt NEWLINE
2472
NEWLINE
simple_stmt -> small_stmt NEWLINE
2472
while
simple_stmt -> small_stmt NEWLINE
2472
not
simple_stmt -> small_stmt NEWLINE
2472
$
simple_stmt -> small_stmt NEWLINE
2472
NAME
simple_stmt -> small_stmt NEWLINE
2472
del
simple_stmt -> small_stmt NEWLINE
2472
with
simple_stmt -> small_stmt NEWLINE
2472
global
simple_stmt -> small_stmt NEWLINE
2472
@
simple_stmt -> small_stmt NEWLINE
2472
class
simple_stmt -> small_stmt NEWLINE
2472
{
simple_stmt -> small_stmt NEWLINE
2472
NUMBER
simple_stmt -> small_stmt NEWLINE
2472
[
simple_stmt -> small_stmt NEWLINE
2472
pass
simple_stmt -> small_stmt NEWLINE
2472
return
simple_stmt -> small_stmt NEWLINE
2473
:
2551
2474
factor
1
2474
decorators
1661
2474
(
3
2474
STRING
4
2474
expr
5
2474
term
6
2474
conf
1662
2474
not
8
2474
while
1663
2474
or_test
10
2474
if
1664
2474
~
12
2474
atom_expr
13
2474
comparison
14
2474
None
15
2474
class
1665
2474
xor_expr
17
2474
arith_expr
18
2474
+
19
2474
stmt_list
2552
2474
confdef
1666
2474
decorated
1667
2474
atom
22
2474
try_stmt
1668
2474
def
1669
2474
compound_stmt
1670
2474
try
1671
2474
NUMBER
26
2474
NAME
27
2474
False
28
2474
shift_expr
29
2474
while_stmt
1672
2474
[
32
2474
and_expr
33
2474
not_test
34
2474
{
35
2474
-
36
2474
simple_stmt
1673
2474
for
1674
2474
and_test
39
2474
@
40
2474
with_stmt
1675
2474
funcdef
1676
2474
small_stmt
1677
2474
power
43
2474
classdef
1678
2474
lambdef
45
2474
lambda
46
2474
test
47
2474
True
48
2474
if_stmt
1679
2474
for_stmt
1680
2474
with
1681
2474
flow_stmt
53
2474
break
54
2474
raise
55
2474
yield
56
2474
assert
57
2474
continue_stmt
58
2474
stat_stmt
59
2474
return_stmt
60
2474
test_list
61
2474
stmt
1682
2474
continue
62
2474
yield_stmt
63
2474
decorator
64
2474
sim_stmt
65
2474
resetstats
66
2474
del
67
2474
return
68
2474
raise_stmt
69
2474
nonlocal
70
2474
pass_stmt
71
2474
expr_stmt
72
2474
assert_stmt
74
2474
endsim
75
2474
pass
76
2474
global_stmt
77
2474
del_stmt
78
2474
global
79
2474
break_stmt
82
2474
begsim
83
2474
nonlocal_stmt
84
2475
expr
5
2475
factor
1
2475
(
3
2475
STRING
4
2475
term
6
2475
not
8
2475
or_test
10
2475
~
12
2475
atom_expr
13
2475
comparison
14
2475
shift_expr
29
2475
None
15
2475
power
43
2475
+
19
2475
small_stmt
2017
2475
xor_expr
17
2475
arith_expr
18
2475
[
32
2475
simple_stmt
2018
2475
atom
22
2475
NUMBER
26
2475
and_test
39
2475
NAME
27
2475
-
36
2475
False
28
2475
lambda
46
2475
test
47
2475
NEWLINE
2019
2475
not_test
34
2475
{
35
2475
and_expr
33
2475
lambdef
45
2475
suite
2553
2475
True
48
2475
endsim
75
2475
flow_stmt
53
2475
pass
76
2475
break
54
2475
raise
55
2475
yield
56
2475
assert
57
2475
global_stmt
77
2475
continue_stmt
58
2475
del_stmt
78
2475
stat_stmt
59
2475
global
79
2475
return_stmt
60
2475
test_list
61
2475
continue
62
2475
yield_stmt
63
2475
return
68
2475
sim_stmt
65
2475
resetstats
66
2475
break_stmt
82
2475
del
67
2475
raise_stmt
69
2475
nonlocal
70
2475
pass_stmt
71
2475
begsim
83
2475
expr_stmt
72
2475
nonlocal_stmt
84
2475
assert_stmt
74
2476
with
except_clause -> except test : suite maybe_except_clause
2476
def
except_clause -> except test : suite maybe_except_clause
2476
global
except_clause -> except test : suite maybe_except_clause
2476
True
except_clause -> except test : suite maybe_except_clause
2476
NAME
except_clause -> except test : suite maybe_except_clause
2476
-
except_clause -> except test : suite maybe_except_clause
2476
return
except_clause -> except test : suite maybe_except_clause
2476
pass
except_clause -> except test : suite maybe_except_clause
2476
del
except_clause -> except test : suite maybe_except_clause
2476
NEWLINE
except_clause -> except test : suite maybe_except_clause
2476
conf
except_clause -> except test : suite maybe_except_clause
2476
raise
except_clause -> except test : suite maybe_except_clause
2476
[
except_clause -> except test : suite maybe_except_clause
2476
None
except_clause -> except test : suite maybe_except_clause
2476
$
except_clause -> except test : suite maybe_except_clause
2476
class
except_clause -> except test : suite maybe_except_clause
2476
continue
except_clause -> except test : suite maybe_except_clause
2476
~
except_clause -> except test : suite maybe_except_clause
2476
for
except_clause -> except test : suite maybe_except_clause
2476
while
except_clause -> except test : suite maybe_except_clause
2476
finally
except_clause -> except test : suite maybe_except_clause
2476
break
except_clause -> except test : suite maybe_except_clause
2476
yield
except_clause -> except test : suite maybe_except_clause
2476
if
except_clause -> except test : suite maybe_except_clause
2476
try
except_clause -> except test : suite maybe_except_clause
2476
+
except_clause -> except test : suite maybe_except_clause
2476
False
except_clause -> except test : suite maybe_except_clause
2476
resetstats
except_clause -> except test : suite maybe_except_clause
2476
{
except_clause -> except test : suite maybe_except_clause
2476
STRING
except_clause -> except test : suite maybe_except_clause
2476
not
except_clause -> except test : suite maybe_except_clause
2476
lambda
except_clause -> except test : suite maybe_except_clause
2476
else
except_clause -> except test : suite maybe_except_clause
2476
@
except_clause -> except test : suite maybe_except_clause
2476
NUMBER
except_clause -> except test : suite maybe_except_clause
2476
begsim
except_clause -> except test : suite maybe_except_clause
2476
assert
except_clause -> except test : suite maybe_except_clause
2476
nonlocal
except_clause -> except test : suite maybe_except_clause
2476
endsim
except_clause -> except test : suite maybe_except_clause
2476
(
except_clause -> except test : suite maybe_except_clause
2477
DEDENT
2554
2478
//
trailer -> [ subscriptlist ]
2478
/
trailer -> [ subscriptlist ]
2478
^
trailer -> [ subscriptlist ]
2478
.
trailer -> [ subscriptlist ]
2478
<
trailer -> [ subscriptlist ]
2478
<<
trailer -> [ subscriptlist ]
2478
in
trailer -> [ subscriptlist ]
2478
@
trailer -> [ subscriptlist ]
2478
>
trailer -> [ subscriptlist ]
2478
:
trailer -> [ subscriptlist ]
2478
*
trailer -> [ subscriptlist ]
2478
as
trailer -> [ subscriptlist ]
2478
and
trailer -> [ subscriptlist ]
2478
+
trailer -> [ subscriptlist ]
2478
(
trailer -> [ subscriptlist ]
2478
is
trailer -> [ subscriptlist ]
2478
or
trailer -> [ subscriptlist ]
2478
<=
trailer -> [ subscriptlist ]
2478
if
trailer -> [ subscriptlist ]
2478
|
trailer -> [ subscriptlist ]
2478
==
trailer -> [ subscriptlist ]
2478
not
trailer -> [ subscriptlist ]
2478
-
trailer -> [ subscriptlist ]
2478
!=
trailer -> [ subscriptlist ]
2478
&
trailer -> [ subscriptlist ]
2478
[
trailer -> [ subscriptlist ]
2478
>>
trailer -> [ subscriptlist ]
2478
%
trailer -> [ subscriptlist ]
2478
>=
trailer -> [ subscriptlist ]
2478
**
trailer -> [ subscriptlist ]
2479
>=
trailer -> ( arglist )
2479
//
trailer -> ( arglist )
2479
%
trailer -> ( arglist )
2479
in
trailer -> ( arglist )
2479
&
trailer -> ( arglist )
2479
>>
trailer -> ( arglist )
2479
-
trailer -> ( arglist )
2479
:
trailer -> ( arglist )
2479
^
trailer -> ( arglist )
2479
>
trailer -> ( arglist )
2479
<<
trailer -> ( arglist )
2479
==
trailer -> ( arglist )
2479
<=
trailer -> ( arglist )
2479
*
trailer -> ( arglist )
2479
and
trailer -> ( arglist )
2479
/
trailer -> ( arglist )
2479
[
trailer -> ( arglist )
2479
(
trailer -> ( arglist )
2479
<
trailer -> ( arglist )
2479
|
trailer -> ( arglist )
2479
+
trailer -> ( arglist )
2479
not
trailer -> ( arglist )
2479
or
trailer -> ( arglist )
2479
if
trailer -> ( arglist )
2479
is
trailer -> ( arglist )
2479
.
trailer -> ( arglist )
2479
!=
trailer -> ( arglist )
2479
@
trailer -> ( arglist )
2479
**
trailer -> ( arglist )
2479
as
trailer -> ( arglist )
2480
as
lambdef -> lambda varargslist : test
2480
:
lambdef -> lambda varargslist : test
2481
~
1630
2481
factor
1631
2481
STRING
1634
2481
shift_expr
1633
2481
expr
1635
2481
term
1636
2481
NUMBER
1637
2481
{
1639
2481
and_test
1640
2481
atom_expr
1641
2481
[
1642
2481
-
1643
2481
None
1644
2481
+
1645
2481
(
1646
2481
arith_expr
1647
2481
atom
1648
2481
and_expr
1649
2481
NAME
1650
2481
power
1651
2481
True
1652
2481
comparison
1653
2481
xor_expr
1654
2481
lambda
1655
2481
False
1656
2481
not_test
1657
2481
or_test
1658
2481
lambdef
1659
2481
test
2555
2481
not
1660
2482
INDENT
2556
2483
NEWLINE
2557
2484
False
suite -> simple_stmt
2484
-
suite -> simple_stmt
2484
break
suite -> simple_stmt
2484
@
suite -> simple_stmt
2484
endsim
suite -> simple_stmt
2484
+
suite -> simple_stmt
2484
STRING
suite -> simple_stmt
2484
if
suite -> simple_stmt
2484
else
suite -> simple_stmt
2484
return
suite -> simple_stmt
2484
~
suite -> simple_stmt
2484
for
suite -> simple_stmt
2484
pass
suite -> simple_stmt
2484
with
suite -> simple_stmt
2484
while
suite -> simple_stmt
2484
NAME
suite -> simple_stmt
2484
del
suite -> simple_stmt
2484
(
suite -> simple_stmt
2484
class
suite -> simple_stmt
2484
[
suite -> simple_stmt
2484
resetstats
suite -> simple_stmt
2484
def
suite -> simple_stmt
2484
continue
suite -> simple_stmt
2484
DEDENT
suite -> simple_stmt
2484
begsim
suite -> simple_stmt
2484
raise
suite -> simple_stmt
2484
yield
suite -> simple_stmt
2484
nonlocal
suite -> simple_stmt
2484
None
suite -> simple_stmt
2484
not
suite -> simple_stmt
2484
{
suite -> simple_stmt
2484
lambda
suite -> simple_stmt
2484
NUMBER
suite -> simple_stmt
2484
try
suite -> simple_stmt
2484
assert
suite -> simple_stmt
2484
global
suite -> simple_stmt
2484
True
suite -> simple_stmt
2484
conf
suite -> simple_stmt
2485
STRING
while_stmt -> while test : suite
2485
else
2558
2485
def
while_stmt -> while test : suite
2485
try
while_stmt -> while test : suite
2485
break
while_stmt -> while test : suite
2485
raise
while_stmt -> while test : suite
2485
{
while_stmt -> while test : suite
2485
None
while_stmt -> while test : suite
2485
continue
while_stmt -> while test : suite
2485
conf
while_stmt -> while test : suite
2485
assert
while_stmt -> while test : suite
2485
resetstats
while_stmt -> while test : suite
2485
for
while_stmt -> while test : suite
2485
global
while_stmt -> while test : suite
2485
del
while_stmt -> while test : suite
2485
if
while_stmt -> while test : suite
2485
nonlocal
while_stmt -> while test : suite
2485
yield
while_stmt -> while test : suite
2485
(
while_stmt -> while test : suite
2485
return
while_stmt -> while test : suite
2485
+
while_stmt -> while test : suite
2485
with
while_stmt -> while test : suite
2485
pass
while_stmt -> while test : suite
2485
[
while_stmt -> while test : suite
2485
-
while_stmt -> while test : suite
2485
endsim
while_stmt -> while test : suite
2485
@
while_stmt -> while test : suite
2485
while
while_stmt -> while test : suite
2485
~
while_stmt -> while test : suite
2485
NUMBER
while_stmt -> while test : suite
2485
not
while_stmt -> while test : suite
2485
class
while_stmt -> while test : suite
2485
begsim
while_stmt -> while test : suite
2485
DEDENT
while_stmt -> while test : suite
2485
lambda
while_stmt -> while test : suite
2485
True
while_stmt -> while test : suite
2485
False
while_stmt -> while test : suite
2485
NAME
while_stmt -> while test : suite
2486
INDENT
2559
2487
NEWLINE
2560
2488
False
suite -> simple_stmt
2488
-
suite -> simple_stmt
2488
break
suite -> simple_stmt
2488
@
suite -> simple_stmt
2488
endsim
suite -> simple_stmt
2488
+
suite -> simple_stmt
2488
STRING
suite -> simple_stmt
2488
if
suite -> simple_stmt
2488
else
suite -> simple_stmt
2488
return
suite -> simple_stmt
2488
~
suite -> simple_stmt
2488
for
suite -> simple_stmt
2488
elif
suite -> simple_stmt
2488
pass
suite -> simple_stmt
2488
with
suite -> simple_stmt
2488
while
suite -> simple_stmt
2488
NAME
suite -> simple_stmt
2488
del
suite -> simple_stmt
2488
(
suite -> simple_stmt
2488
class
suite -> simple_stmt
2488
[
suite -> simple_stmt
2488
resetstats
suite -> simple_stmt
2488
def
suite -> simple_stmt
2488
continue
suite -> simple_stmt
2488
DEDENT
suite -> simple_stmt
2488
begsim
suite -> simple_stmt
2488
raise
suite -> simple_stmt
2488
yield
suite -> simple_stmt
2488
nonlocal
suite -> simple_stmt
2488
None
suite -> simple_stmt
2488
not
suite -> simple_stmt
2488
{
suite -> simple_stmt
2488
lambda
suite -> simple_stmt
2488
NUMBER
suite -> simple_stmt
2488
try
suite -> simple_stmt
2488
assert
suite -> simple_stmt
2488
global
suite -> simple_stmt
2488
True
suite -> simple_stmt
2488
conf
suite -> simple_stmt
2489
INDENT
2561
2490
elif_clause
2562
2490
global
elif_clause -> 
2490
conf
elif_clause -> 
2490
with
elif_clause -> 
2490
elif
2563
2490
continue
elif_clause -> 
2490
{
elif_clause -> 
2490
class
elif_clause -> 
2490
STRING
elif_clause -> 
2490
pass
elif_clause -> 
2490
NAME
elif_clause -> 
2490
for
elif_clause -> 
2490
not
elif_clause -> 
2490
assert
elif_clause -> 
2490
raise
elif_clause -> 
2490
yield
elif_clause -> 
2490
else
elif_clause -> 
2490
NUMBER
elif_clause -> 
2490
DEDENT
elif_clause -> 
2490
try
elif_clause -> 
2490
~
elif_clause -> 
2490
[
elif_clause -> 
2490
(
elif_clause -> 
2490
endsim
elif_clause -> 
2490
while
elif_clause -> 
2490
return
elif_clause -> 
2490
del
elif_clause -> 
2490
True
elif_clause -> 
2490
def
elif_clause -> 
2490
if
elif_clause -> 
2490
break
elif_clause -> 
2490
-
elif_clause -> 
2490
None
elif_clause -> 
2490
begsim
elif_clause -> 
2490
lambda
elif_clause -> 
2490
@
elif_clause -> 
2490
resetstats
elif_clause -> 
2490
nonlocal
elif_clause -> 
2490
False
elif_clause -> 
2490
+
elif_clause -> 
2491
False
suite -> simple_stmt
2491
-
suite -> simple_stmt
2491
break
suite -> simple_stmt
2491
@
suite -> simple_stmt
2491
endsim
suite -> simple_stmt
2491
+
suite -> simple_stmt
2491
STRING
suite -> simple_stmt
2491
if
suite -> simple_stmt
2491
return
suite -> simple_stmt
2491
~
suite -> simple_stmt
2491
for
suite -> simple_stmt
2491
pass
suite -> simple_stmt
2491
with
suite -> simple_stmt
2491
while
suite -> simple_stmt
2491
NAME
suite -> simple_stmt
2491
del
suite -> simple_stmt
2491
(
suite -> simple_stmt
2491
class
suite -> simple_stmt
2491
[
suite -> simple_stmt
2491
resetstats
suite -> simple_stmt
2491
def
suite -> simple_stmt
2491
continue
suite -> simple_stmt
2491
DEDENT
suite -> simple_stmt
2491
begsim
suite -> simple_stmt
2491
raise
suite -> simple_stmt
2491
yield
suite -> simple_stmt
2491
nonlocal
suite -> simple_stmt
2491
None
suite -> simple_stmt
2491
not
suite -> simple_stmt
2491
{
suite -> simple_stmt
2491
lambda
suite -> simple_stmt
2491
NUMBER
suite -> simple_stmt
2491
try
suite -> simple_stmt
2491
assert
suite -> simple_stmt
2491
global
suite -> simple_stmt
2491
True
suite -> simple_stmt
2491
conf
suite -> simple_stmt
2492
False
classdef -> class NAME : suite
2492
if
classdef -> class NAME : suite
2492
+
classdef -> class NAME : suite
2492
None
classdef -> class NAME : suite
2492
def
classdef -> class NAME : suite
2492
endsim
classdef -> class NAME : suite
2492
-
classdef -> class NAME : suite
2492
lambda
classdef -> class NAME : suite
2492
del
classdef -> class NAME : suite
2492
True
classdef -> class NAME : suite
2492
resetstats
classdef -> class NAME : suite
2492
[
classdef -> class NAME : suite
2492
not
classdef -> class NAME : suite
2492
global
classdef -> class NAME : suite
2492
{
classdef -> class NAME : suite
2492
pass
classdef -> class NAME : suite
2492
while
classdef -> class NAME : suite
2492
DEDENT
classdef -> class NAME : suite
2492
class
classdef -> class NAME : suite
2492
raise
classdef -> class NAME : suite
2492
with
classdef -> class NAME : suite
2492
yield
classdef -> class NAME : suite
2492
NAME
classdef -> class NAME : suite
2492
continue
classdef -> class NAME : suite
2492
conf
classdef -> class NAME : suite
2492
assert
classdef -> class NAME : suite
2492
return
classdef -> class NAME : suite
2492
try
classdef -> class NAME : suite
2492
~
classdef -> class NAME : suite
2492
STRING
classdef -> class NAME : suite
2492
NUMBER
classdef -> class NAME : suite
2492
(
classdef -> class NAME : suite
2492
begsim
classdef -> class NAME : suite
2492
@
classdef -> class NAME : suite
2492
nonlocal
classdef -> class NAME : suite
2492
break
classdef -> class NAME : suite
2492
for
classdef -> class NAME : suite
2493
INDENT
2564
2494
)
2565
2495
:
2566
2496
:
2567
2497
)
2568
2498
finally
2569
2498
continue
try_stmt -> try : suite except_clause
2498
yield
try_stmt -> try : suite except_clause
2498
else
2570
2498
not
try_stmt -> try : suite except_clause
2498
if
try_stmt -> try : suite except_clause
2498
+
try_stmt -> try : suite except_clause
2498
del
try_stmt -> try : suite except_clause
2498
NUMBER
try_stmt -> try : suite except_clause
2498
[
try_stmt -> try : suite except_clause
2498
begsim
try_stmt -> try : suite except_clause
2498
DEDENT
try_stmt -> try : suite except_clause
2498
conf
try_stmt -> try : suite except_clause
2498
True
try_stmt -> try : suite except_clause
2498
def
try_stmt -> try : suite except_clause
2498
resetstats
try_stmt -> try : suite except_clause
2498
break
try_stmt -> try : suite except_clause
2498
class
try_stmt -> try : suite except_clause
2498
@
try_stmt -> try : suite except_clause
2498
try
try_stmt -> try : suite except_clause
2498
pass
try_stmt -> try : suite except_clause
2498
NAME
try_stmt -> try : suite except_clause
2498
~
try_stmt -> try : suite except_clause
2498
lambda
try_stmt -> try : suite except_clause
2498
raise
try_stmt -> try : suite except_clause
2498
for
try_stmt -> try : suite except_clause
2498
global
try_stmt -> try : suite except_clause
2498
while
try_stmt -> try : suite except_clause
2498
assert
try_stmt -> try : suite except_clause
2498
(
try_stmt -> try : suite except_clause
2498
STRING
try_stmt -> try : suite except_clause
2498
-
try_stmt -> try : suite except_clause
2498
None
try_stmt -> try : suite except_clause
2498
return
try_stmt -> try : suite except_clause
2498
with
try_stmt -> try : suite except_clause
2498
nonlocal
try_stmt -> try : suite except_clause
2498
{
try_stmt -> try : suite except_clause
2498
endsim
try_stmt -> try : suite except_clause
2498
False
try_stmt -> try : suite except_clause
2499
~
1630
2499
factor
1631
2499
test
2571
2499
shift_expr
1633
2499
STRING
1634
2499
expr
1635
2499
term
1636
2499
NUMBER
1637
2499
:
2572
2499
{
1639
2499
and_test
1640
2499
atom_expr
1641
2499
[
1642
2499
-
1643
2499
None
1644
2499
+
1645
2499
(
1646
2499
arith_expr
1647
2499
atom
1648
2499
and_expr
1649
2499
NAME
1650
2499
power
1651
2499
True
1652
2499
comparison
1653
2499
xor_expr
1654
2499
lambda
1655
2499
False
1656
2499
not_test
1657
2499
or_test
1658
2499
lambdef
1659
2499
not
1660
2500
:
2573
2501
with
with_stmt -> with with_items : suite
2501
False
with_stmt -> with with_items : suite
2501
try
with_stmt -> with with_items : suite
2501
pass
with_stmt -> with with_items : suite
2501
STRING
with_stmt -> with with_items : suite
2501
DEDENT
with_stmt -> with with_items : suite
2501
return
with_stmt -> with with_items : suite
2501
for
with_stmt -> with with_items : suite
2501
resetstats
with_stmt -> with with_items : suite
2501
None
with_stmt -> with with_items : suite
2501
continue
with_stmt -> with with_items : suite
2501
@
with_stmt -> with with_items : suite
2501
class
with_stmt -> with with_items : suite
2501
True
with_stmt -> with with_items : suite
2501
conf
with_stmt -> with with_items : suite
2501
+
with_stmt -> with with_items : suite
2501
assert
with_stmt -> with with_items : suite
2501
lambda
with_stmt -> with with_items : suite
2501
~
with_stmt -> with with_items : suite
2501
-
with_stmt -> with with_items : suite
2501
yield
with_stmt -> with with_items : suite
2501
if
with_stmt -> with with_items : suite
2501
def
with_stmt -> with with_items : suite
2501
NAME
with_stmt -> with with_items : suite
2501
while
with_stmt -> with with_items : suite
2501
{
with_stmt -> with with_items : suite
2501
not
with_stmt -> with with_items : suite
2501
[
with_stmt -> with with_items : suite
2501
begsim
with_stmt -> with with_items : suite
2501
endsim
with_stmt -> with with_items : suite
2501
global
with_stmt -> with with_items : suite
2501
del
with_stmt -> with with_items : suite
2501
(
with_stmt -> with with_items : suite
2501
nonlocal
with_stmt -> with with_items : suite
2501
raise
with_stmt -> with with_items : suite
2501
NUMBER
with_stmt -> with with_items : suite
2501
break
with_stmt -> with with_items : suite
2502
<=
term -> factor / term
2502
!=
term -> factor / term
2502
and
term -> factor / term
2502
or
term -> factor / term
2502
for
term -> factor / term
2502
|
term -> factor / term
2502
^
term -> factor / term
2502
>>
term -> factor / term
2502
==
term -> factor / term
2502
>
term -> factor / term
2502
if
term -> factor / term
2502
&
term -> factor / term
2502
]
term -> factor / term
2502
<<
term -> factor / term
2502
+
term -> factor / term
2502
-
term -> factor / term
2502
not
term -> factor / term
2502
in
term -> factor / term
2502
<
term -> factor / term
2502
is
term -> factor / term
2502
>=
term -> factor / term
2503
is
term -> factor @ term
2503
for
term -> factor @ term
2503
and
term -> factor @ term
2503
>
term -> factor @ term
2503
not
term -> factor @ term
2503
in
term -> factor @ term
2503
==
term -> factor @ term
2503
<
term -> factor @ term
2503
]
term -> factor @ term
2503
or
term -> factor @ term
2503
!=
term -> factor @ term
2503
<<
term -> factor @ term
2503
<=
term -> factor @ term
2503
if
term -> factor @ term
2503
|
term -> factor @ term
2503
+
term -> factor @ term
2503
-
term -> factor @ term
2503
&
term -> factor @ term
2503
>=
term -> factor @ term
2503
>>
term -> factor @ term
2503
^
term -> factor @ term
2504
&
term -> factor * term
2504
-
term -> factor * term
2504
for
term -> factor * term
2504
in
term -> factor * term
2504
]
term -> factor * term
2504
or
term -> factor * term
2504
<=
term -> factor * term
2504
|
term -> factor * term
2504
and
term -> factor * term
2504
not
term -> factor * term
2504
<<
term -> factor * term
2504
==
term -> factor * term
2504
if
term -> factor * term
2504
>
term -> factor * term
2504
>>
term -> factor * term
2504
<
term -> factor * term
2504
!=
term -> factor * term
2504
>=
term -> factor * term
2504
^
term -> factor * term
2504
+
term -> factor * term
2504
is
term -> factor * term
2505
>
term -> factor % term
2505
!=
term -> factor % term
2505
&
term -> factor % term
2505
>=
term -> factor % term
2505
or
term -> factor % term
2505
==
term -> factor % term
2505
^
term -> factor % term
2505
in
term -> factor % term
2505
for
term -> factor % term
2505
|
term -> factor % term
2505
and
term -> factor % term
2505
if
term -> factor % term
2505
not
term -> factor % term
2505
is
term -> factor % term
2505
<
term -> factor % term
2505
>>
term -> factor % term
2505
-
term -> factor % term
2505
<=
term -> factor % term
2505
]
term -> factor % term
2505
<<
term -> factor % term
2505
+
term -> factor % term
2506
+
term -> factor // term
2506
==
term -> factor // term
2506
for
term -> factor // term
2506
]
term -> factor // term
2506
<<
term -> factor // term
2506
<
term -> factor // term
2506
if
term -> factor // term
2506
in
term -> factor // term
2506
!=
term -> factor // term
2506
>
term -> factor // term
2506
not
term -> factor // term
2506
>=
term -> factor // term
2506
and
term -> factor // term
2506
is
term -> factor // term
2506
-
term -> factor // term
2506
&
term -> factor // term
2506
|
term -> factor // term
2506
^
term -> factor // term
2506
<=
term -> factor // term
2506
or
term -> factor // term
2506
>>
term -> factor // term
2507
for
and_expr -> shift_expr & and_expr
2507
|
and_expr -> shift_expr & and_expr
2507
!=
and_expr -> shift_expr & and_expr
2507
and
and_expr -> shift_expr & and_expr
2507
>=
and_expr -> shift_expr & and_expr
2507
not
and_expr -> shift_expr & and_expr
2507
in
and_expr -> shift_expr & and_expr
2507
is
and_expr -> shift_expr & and_expr
2507
or
and_expr -> shift_expr & and_expr
2507
==
and_expr -> shift_expr & and_expr
2507
^
and_expr -> shift_expr & and_expr
2507
<
and_expr -> shift_expr & and_expr
2507
>
and_expr -> shift_expr & and_expr
2507
]
and_expr -> shift_expr & and_expr
2507
if
and_expr -> shift_expr & and_expr
2507
<=
and_expr -> shift_expr & and_expr
2508
for
arith_expr -> term + arith_expr
2508
>>
arith_expr -> term + arith_expr
2508
^
arith_expr -> term + arith_expr
2508
<
arith_expr -> term + arith_expr
2508
|
arith_expr -> term + arith_expr
2508
and
arith_expr -> term + arith_expr
2508
!=
arith_expr -> term + arith_expr
2508
or
arith_expr -> term + arith_expr
2508
not
arith_expr -> term + arith_expr
2508
<=
arith_expr -> term + arith_expr
2508
>
arith_expr -> term + arith_expr
2508
is
arith_expr -> term + arith_expr
2508
if
arith_expr -> term + arith_expr
2508
]
arith_expr -> term + arith_expr
2508
==
arith_expr -> term + arith_expr
2508
&
arith_expr -> term + arith_expr
2508
>=
arith_expr -> term + arith_expr
2508
in
arith_expr -> term + arith_expr
2508
<<
arith_expr -> term + arith_expr
2509
==
arith_expr -> term - arith_expr
2509
is
arith_expr -> term - arith_expr
2509
<=
arith_expr -> term - arith_expr
2509
not
arith_expr -> term - arith_expr
2509
<<
arith_expr -> term - arith_expr
2509
&
arith_expr -> term - arith_expr
2509
|
arith_expr -> term - arith_expr
2509
and
arith_expr -> term - arith_expr
2509
or
arith_expr -> term - arith_expr
2509
for
arith_expr -> term - arith_expr
2509
]
arith_expr -> term - arith_expr
2509
>>
arith_expr -> term - arith_expr
2509
if
arith_expr -> term - arith_expr
2509
>=
arith_expr -> term - arith_expr
2509
<
arith_expr -> term - arith_expr
2509
^
arith_expr -> term - arith_expr
2509
>
arith_expr -> term - arith_expr
2509
!=
arith_expr -> term - arith_expr
2509
in
arith_expr -> term - arith_expr
2510
@
power -> atom_expr ** factor
2510
==
power -> atom_expr ** factor
2510
&
power -> atom_expr ** factor
2510
-
power -> atom_expr ** factor
2510
>
power -> atom_expr ** factor
2510
and
power -> atom_expr ** factor
2510
|
power -> atom_expr ** factor
2510
<=
power -> atom_expr ** factor
2510
%
power -> atom_expr ** factor
2510
or
power -> atom_expr ** factor
2510
*
power -> atom_expr ** factor
2510
not
power -> atom_expr ** factor
2510
]
power -> atom_expr ** factor
2510
in
power -> atom_expr ** factor
2510
<<
power -> atom_expr ** factor
2510
//
power -> atom_expr ** factor
2510
/
power -> atom_expr ** factor
2510
>>
power -> atom_expr ** factor
2510
^
power -> atom_expr ** factor
2510
if
power -> atom_expr ** factor
2510
!=
power -> atom_expr ** factor
2510
for
power -> atom_expr ** factor
2510
is
power -> atom_expr ** factor
2510
<
power -> atom_expr ** factor
2510
+
power -> atom_expr ** factor
2510
>=
power -> atom_expr ** factor
2511
==
xor_expr -> and_expr ^ xor_expr
2511
!=
xor_expr -> and_expr ^ xor_expr
2511
>
xor_expr -> and_expr ^ xor_expr
2511
not
xor_expr -> and_expr ^ xor_expr
2511
if
xor_expr -> and_expr ^ xor_expr
2511
is
xor_expr -> and_expr ^ xor_expr
2511
<=
xor_expr -> and_expr ^ xor_expr
2511
for
xor_expr -> and_expr ^ xor_expr
2511
|
xor_expr -> and_expr ^ xor_expr
2511
>=
xor_expr -> and_expr ^ xor_expr
2511
and
xor_expr -> and_expr ^ xor_expr
2511
]
xor_expr -> and_expr ^ xor_expr
2511
in
xor_expr -> and_expr ^ xor_expr
2511
<
xor_expr -> and_expr ^ xor_expr
2511
or
xor_expr -> and_expr ^ xor_expr
2512
/
atom -> [ test_list_comp ]
2512
*
atom -> [ test_list_comp ]
2512
or
atom -> [ test_list_comp ]
2512
|
atom -> [ test_list_comp ]
2512
==
atom -> [ test_list_comp ]
2512
is
atom -> [ test_list_comp ]
2512
-
atom -> [ test_list_comp ]
2512
**
atom -> [ test_list_comp ]
2512
&
atom -> [ test_list_comp ]
2512
(
atom -> [ test_list_comp ]
2512
<
atom -> [ test_list_comp ]
2512
@
atom -> [ test_list_comp ]
2512
//
atom -> [ test_list_comp ]
2512
>
atom -> [ test_list_comp ]
2512
if
atom -> [ test_list_comp ]
2512
in
atom -> [ test_list_comp ]
2512
^
atom -> [ test_list_comp ]
2512
<<
atom -> [ test_list_comp ]
2512
for
atom -> [ test_list_comp ]
2512
[
atom -> [ test_list_comp ]
2512
!=
atom -> [ test_list_comp ]
2512
<=
atom -> [ test_list_comp ]
2512
and
atom -> [ test_list_comp ]
2512
%
atom -> [ test_list_comp ]
2512
not
atom -> [ test_list_comp ]
2512
+
atom -> [ test_list_comp ]
2512
>=
atom -> [ test_list_comp ]
2512
>>
atom -> [ test_list_comp ]
2512
.
atom -> [ test_list_comp ]
2512
]
atom -> [ test_list_comp ]
2513
@
atom -> ( test_list_comp )
2513
>>
atom -> ( test_list_comp )
2513
<<
atom -> ( test_list_comp )
2513
==
atom -> ( test_list_comp )
2513
is
atom -> ( test_list_comp )
2513
or
atom -> ( test_list_comp )
2513
<=
atom -> ( test_list_comp )
2513
[
atom -> ( test_list_comp )
2513
if
atom -> ( test_list_comp )
2513
^
atom -> ( test_list_comp )
2513
<
atom -> ( test_list_comp )
2513
and
atom -> ( test_list_comp )
2513
.
atom -> ( test_list_comp )
2513
+
atom -> ( test_list_comp )
2513
&
atom -> ( test_list_comp )
2513
!=
atom -> ( test_list_comp )
2513
in
atom -> ( test_list_comp )
2513
]
atom -> ( test_list_comp )
2513
**
atom -> ( test_list_comp )
2513
not
atom -> ( test_list_comp )
2513
-
atom -> ( test_list_comp )
2513
(
atom -> ( test_list_comp )
2513
*
atom -> ( test_list_comp )
2513
|
atom -> ( test_list_comp )
2513
//
atom -> ( test_list_comp )
2513
>
atom -> ( test_list_comp )
2513
for
atom -> ( test_list_comp )
2513
>=
atom -> ( test_list_comp )
2513
%
atom -> ( test_list_comp )
2513
/
atom -> ( test_list_comp )
2514
>=
shift_expr -> arith_expr >> shift_expr
2514
not
shift_expr -> arith_expr >> shift_expr
2514
>
shift_expr -> arith_expr >> shift_expr
2514
^
shift_expr -> arith_expr >> shift_expr
2514
for
shift_expr -> arith_expr >> shift_expr
2514
is
shift_expr -> arith_expr >> shift_expr
2514
&
shift_expr -> arith_expr >> shift_expr
2514
if
shift_expr -> arith_expr >> shift_expr
2514
!=
shift_expr -> arith_expr >> shift_expr
2514
<=
shift_expr -> arith_expr >> shift_expr
2514
and
shift_expr -> arith_expr >> shift_expr
2514
==
shift_expr -> arith_expr >> shift_expr
2514
or
shift_expr -> arith_expr >> shift_expr
2514
in
shift_expr -> arith_expr >> shift_expr
2514
|
shift_expr -> arith_expr >> shift_expr
2514
]
shift_expr -> arith_expr >> shift_expr
2514
<
shift_expr -> arith_expr >> shift_expr
2515
>=
shift_expr -> arith_expr << shift_expr
2515
in
shift_expr -> arith_expr << shift_expr
2515
>
shift_expr -> arith_expr << shift_expr
2515
|
shift_expr -> arith_expr << shift_expr
2515
!=
shift_expr -> arith_expr << shift_expr
2515
<=
shift_expr -> arith_expr << shift_expr
2515
]
shift_expr -> arith_expr << shift_expr
2515
&
shift_expr -> arith_expr << shift_expr
2515
not
shift_expr -> arith_expr << shift_expr
2515
^
shift_expr -> arith_expr << shift_expr
2515
<
shift_expr -> arith_expr << shift_expr
2515
==
shift_expr -> arith_expr << shift_expr
2515
if
shift_expr -> arith_expr << shift_expr
2515
or
shift_expr -> arith_expr << shift_expr
2515
for
shift_expr -> arith_expr << shift_expr
2515
is
shift_expr -> arith_expr << shift_expr
2515
and
shift_expr -> arith_expr << shift_expr
2516
]
2574
2517
/
trailer -> ( )
2517
[
trailer -> ( )
2517
(
trailer -> ( )
2517
|
trailer -> ( )
2517
<=
trailer -> ( )
2517
in
trailer -> ( )
2517
not
trailer -> ( )
2517
>>
trailer -> ( )
2517
^
trailer -> ( )
2517
.
trailer -> ( )
2517
**
trailer -> ( )
2517
if
trailer -> ( )
2517
+
trailer -> ( )
2517
is
trailer -> ( )
2517
<
trailer -> ( )
2517
>
trailer -> ( )
2517
==
trailer -> ( )
2517
//
trailer -> ( )
2517
<<
trailer -> ( )
2517
*
trailer -> ( )
2517
for
trailer -> ( )
2517
-
trailer -> ( )
2517
]
trailer -> ( )
2517
>=
trailer -> ( )
2517
%
trailer -> ( )
2517
and
trailer -> ( )
2517
@
trailer -> ( )
2517
&
trailer -> ( )
2517
!=
trailer -> ( )
2517
or
trailer -> ( )
2518
)
2575
2519
<=
trailer -> . NAME
2519
if
trailer -> . NAME
2519
<
trailer -> . NAME
2519
%
trailer -> . NAME
2519
.
trailer -> . NAME
2519
//
trailer -> . NAME
2519
]
trailer -> . NAME
2519
for
trailer -> . NAME
2519
|
trailer -> . NAME
2519
==
trailer -> . NAME
2519
>=
trailer -> . NAME
2519
[
trailer -> . NAME
2519
^
trailer -> . NAME
2519
<<
trailer -> . NAME
2519
in
trailer -> . NAME
2519
&
trailer -> . NAME
2519
or
trailer -> . NAME
2519
*
trailer -> . NAME
2519
(
trailer -> . NAME
2519
and
trailer -> . NAME
2519
-
trailer -> . NAME
2519
+
trailer -> . NAME
2519
!=
trailer -> . NAME
2519
not
trailer -> . NAME
2519
**
trailer -> . NAME
2519
>>
trailer -> . NAME
2519
@
trailer -> . NAME
2519
/
trailer -> . NAME
2519
is
trailer -> . NAME
2519
>
trailer -> . NAME
2520
is
trailer_expr -> trailer trailer_expr
2520
!=
trailer_expr -> trailer trailer_expr
2520
<<
trailer_expr -> trailer trailer_expr
2520
and
trailer_expr -> trailer trailer_expr
2520
&
trailer_expr -> trailer trailer_expr
2520
//
trailer_expr -> trailer trailer_expr
2520
|
trailer_expr -> trailer trailer_expr
2520
==
trailer_expr -> trailer trailer_expr
2520
<
trailer_expr -> trailer trailer_expr
2520
or
trailer_expr -> trailer trailer_expr
2520
^
trailer_expr -> trailer trailer_expr
2520
<=
trailer_expr -> trailer trailer_expr
2520
@
trailer_expr -> trailer trailer_expr
2520
in
trailer_expr -> trailer trailer_expr
2520
not
trailer_expr -> trailer trailer_expr
2520
for
trailer_expr -> trailer trailer_expr
2520
*
trailer_expr -> trailer trailer_expr
2520
+
trailer_expr -> trailer trailer_expr
2520
if
trailer_expr -> trailer trailer_expr
2520
**
trailer_expr -> trailer trailer_expr
2520
>>
trailer_expr -> trailer trailer_expr
2520
>=
trailer_expr -> trailer trailer_expr
2520
%
trailer_expr -> trailer trailer_expr
2520
]
trailer_expr -> trailer trailer_expr
2520
-
trailer_expr -> trailer trailer_expr
2520
>
trailer_expr -> trailer trailer_expr
2520
/
trailer_expr -> trailer trailer_expr
2521
and
expr -> xor_expr | expr
2521
in
expr -> xor_expr | expr
2521
>=
expr -> xor_expr | expr
2521
for
expr -> xor_expr | expr
2521
!=
expr -> xor_expr | expr
2521
is
expr -> xor_expr | expr
2521
==
expr -> xor_expr | expr
2521
or
expr -> xor_expr | expr
2521
<
expr -> xor_expr | expr
2521
if
expr -> xor_expr | expr
2521
not
expr -> xor_expr | expr
2521
]
expr -> xor_expr | expr
2521
<=
expr -> xor_expr | expr
2521
>
expr -> xor_expr | expr
2522
if
and_test -> not_test and and_test
2522
]
and_test -> not_test and and_test
2522
for
and_test -> not_test and and_test
2522
or
and_test -> not_test and and_test
2523
if
or_test -> and_test or or_test
2523
]
or_test -> and_test or or_test
2523
for
or_test -> and_test or or_test
2524
for
test_nocond -> or_test
2524
if
test_nocond -> or_test
2524
]
test_nocond -> or_test
2525
]
test_nocond -> lambdef_nocond
2525
for
test_nocond -> lambdef_nocond
2525
if
test_nocond -> lambdef_nocond
2526
:
2576
2526
NAME
251
2526
vfpdef
253
2526
varargslist
2577
2527
]
comp_iter -> 
2527
comp_iter
2578
2527
comp_for
2367
2527
for
632
2527
comp_if
2368
2527
if
2369
2528
or
comparison -> expr comp_op comparison
2528
if
comparison -> expr comp_op comparison
2528
for
comparison -> expr comp_op comparison
2528
and
comparison -> expr comp_op comparison
2528
]
comparison -> expr comp_op comparison
2529
]
test -> or_test if or_test else test
2529
,
test -> or_test if or_test else test
2530
suite
2579
2530
expr
5
2530
factor
1
2530
(
3
2530
STRING
4
2530
term
6
2530
not
8
2530
or_test
10
2530
~
12
2530
atom_expr
13
2530
comparison
14
2530
shift_expr
29
2530
None
15
2530
power
43
2530
+
19
2530
small_stmt
42
2530
xor_expr
17
2530
arith_expr
18
2530
[
32
2530
simple_stmt
1050
2530
atom
22
2530
NUMBER
26
2530
and_test
39
2530
NAME
27
2530
-
36
2530
False
28
2530
lambda
46
2530
test
47
2530
NEWLINE
1051
2530
not_test
34
2530
{
35
2530
and_expr
33
2530
lambdef
45
2530
True
48
2530
endsim
75
2530
flow_stmt
53
2530
pass
76
2530
break
54
2530
raise
55
2530
yield
56
2530
assert
57
2530
global_stmt
77
2530
continue_stmt
58
2530
del_stmt
78
2530
stat_stmt
59
2530
global
79
2530
return_stmt
60
2530
test_list
61
2530
continue
62
2530
yield_stmt
63
2530
return
68
2530
sim_stmt
65
2530
resetstats
66
2530
break_stmt
82
2530
del
67
2530
raise_stmt
69
2530
nonlocal
70
2530
pass_stmt
71
2530
begsim
83
2530
expr_stmt
72
2530
nonlocal_stmt
84
2530
assert_stmt
74
2531
:
test -> or_test if or_test else test
2531
,
test -> or_test if or_test else test
2532
//
trailer -> [ subscriptlist ]
2532
/
trailer -> [ subscriptlist ]
2532
^
trailer -> [ subscriptlist ]
2532
.
trailer -> [ subscriptlist ]
2532
<
trailer -> [ subscriptlist ]
2532
<<
trailer -> [ subscriptlist ]
2532
in
trailer -> [ subscriptlist ]
2532
NEWLINE
trailer -> [ subscriptlist ]
2532
@
trailer -> [ subscriptlist ]
2532
>
trailer -> [ subscriptlist ]
2532
*
trailer -> [ subscriptlist ]
2532
and
trailer -> [ subscriptlist ]
2532
+
trailer -> [ subscriptlist ]
2532
(
trailer -> [ subscriptlist ]
2532
=
trailer -> [ subscriptlist ]
2532
is
trailer -> [ subscriptlist ]
2532
or
trailer -> [ subscriptlist ]
2532
<=
trailer -> [ subscriptlist ]
2532
if
trailer -> [ subscriptlist ]
2532
|
trailer -> [ subscriptlist ]
2532
==
trailer -> [ subscriptlist ]
2532
not
trailer -> [ subscriptlist ]
2532
-
trailer -> [ subscriptlist ]
2532
!=
trailer -> [ subscriptlist ]
2532
&
trailer -> [ subscriptlist ]
2532
[
trailer -> [ subscriptlist ]
2532
>>
trailer -> [ subscriptlist ]
2532
%
trailer -> [ subscriptlist ]
2532
>=
trailer -> [ subscriptlist ]
2532
**
trailer -> [ subscriptlist ]
2533
>=
trailer -> ( arglist )
2533
//
trailer -> ( arglist )
2533
%
trailer -> ( arglist )
2533
in
trailer -> ( arglist )
2533
&
trailer -> ( arglist )
2533
>>
trailer -> ( arglist )
2533
-
trailer -> ( arglist )
2533
^
trailer -> ( arglist )
2533
>
trailer -> ( arglist )
2533
<<
trailer -> ( arglist )
2533
==
trailer -> ( arglist )
2533
<=
trailer -> ( arglist )
2533
*
trailer -> ( arglist )
2533
and
trailer -> ( arglist )
2533
=
trailer -> ( arglist )
2533
/
trailer -> ( arglist )
2533
[
trailer -> ( arglist )
2533
(
trailer -> ( arglist )
2533
<
trailer -> ( arglist )
2533
NEWLINE
trailer -> ( arglist )
2533
|
trailer -> ( arglist )
2533
+
trailer -> ( arglist )
2533
not
trailer -> ( arglist )
2533
or
trailer -> ( arglist )
2533
is
trailer -> ( arglist )
2533
.
trailer -> ( arglist )
2533
!=
trailer -> ( arglist )
2533
@
trailer -> ( arglist )
2533
**
trailer -> ( arglist )
2533
if
trailer -> ( arglist )
2534
=
lambdef -> lambda varargslist : test
2534
NEWLINE
lambdef -> lambda varargslist : test
2535
~
1828
2535
factor
1829
2535
STRING
1830
2535
shift_expr
1831
2535
term
1832
2535
NUMBER
1833
2535
{
1834
2535
atom_expr
1835
2535
[
1836
2535
-
1837
2535
None
1838
2535
(
1839
2535
arith_expr
1840
2535
atom
1841
2535
and_expr
1842
2535
+
1843
2535
not_test
1844
2535
NAME
1845
2535
power
1846
2535
True
1847
2535
comparison
1848
2535
xor_expr
1849
2535
lambda
1850
2535
False
1851
2535
and_test
1852
2535
lambdef
1854
2535
expr
1855
2535
not
1856
2535
or_test
1857
2535
test
2580
2536
//
trailer -> [ subscriptlist ]
2536
/
trailer -> [ subscriptlist ]
2536
^
trailer -> [ subscriptlist ]
2536
)
trailer -> [ subscriptlist ]
2536
.
trailer -> [ subscriptlist ]
2536
<
trailer -> [ subscriptlist ]
2536
<<
trailer -> [ subscriptlist ]
2536
in
trailer -> [ subscriptlist ]
2536
@
trailer -> [ subscriptlist ]
2536
>
trailer -> [ subscriptlist ]
2536
for
trailer -> [ subscriptlist ]
2536
*
trailer -> [ subscriptlist ]
2536
and
trailer -> [ subscriptlist ]
2536
+
trailer -> [ subscriptlist ]
2536
(
trailer -> [ subscriptlist ]
2536
is
trailer -> [ subscriptlist ]
2536
or
trailer -> [ subscriptlist ]
2536
<=
trailer -> [ subscriptlist ]
2536
if
trailer -> [ subscriptlist ]
2536
|
trailer -> [ subscriptlist ]
2536
==
trailer -> [ subscriptlist ]
2536
not
trailer -> [ subscriptlist ]
2536
-
trailer -> [ subscriptlist ]
2536
!=
trailer -> [ subscriptlist ]
2536
&
trailer -> [ subscriptlist ]
2536
[
trailer -> [ subscriptlist ]
2536
>>
trailer -> [ subscriptlist ]
2536
%
trailer -> [ subscriptlist ]
2536
>=
trailer -> [ subscriptlist ]
2536
**
trailer -> [ subscriptlist ]
2537
>=
trailer -> ( arglist )
2537
//
trailer -> ( arglist )
2537
%
trailer -> ( arglist )
2537
in
trailer -> ( arglist )
2537
&
trailer -> ( arglist )
2537
for
trailer -> ( arglist )
2537
>>
trailer -> ( arglist )
2537
-
trailer -> ( arglist )
2537
^
trailer -> ( arglist )
2537
>
trailer -> ( arglist )
2537
<<
trailer -> ( arglist )
2537
==
trailer -> ( arglist )
2537
<=
trailer -> ( arglist )
2537
*
trailer -> ( arglist )
2537
and
trailer -> ( arglist )
2537
/
trailer -> ( arglist )
2537
[
trailer -> ( arglist )
2537
(
trailer -> ( arglist )
2537
<
trailer -> ( arglist )
2537
|
trailer -> ( arglist )
2537
+
trailer -> ( arglist )
2537
not
trailer -> ( arglist )
2537
or
trailer -> ( arglist )
2537
)
trailer -> ( arglist )
2537
is
trailer -> ( arglist )
2537
.
trailer -> ( arglist )
2537
!=
trailer -> ( arglist )
2537
@
trailer -> ( arglist )
2537
**
trailer -> ( arglist )
2537
if
trailer -> ( arglist )
2538
)
comp_if -> if test_nocond comp_iter
2539
~
1917
2539
factor
1918
2539
STRING
1919
2539
shift_expr
1920
2539
term
1921
2539
NUMBER
1922
2539
and_expr
1923
2539
{
1924
2539
atom_expr
1925
2539
[
1926
2539
-
1927
2539
None
1928
2539
test_nocond
2581
2539
(
1929
2539
arith_expr
1930
2539
atom
1931
2539
or_test
2435
2539
+
1932
2539
NAME
1933
2539
power
1934
2539
True
1935
2539
comparison
1936
2539
xor_expr
1937
2539
False
1938
2539
lambdef_nocond
2437
2539
not_test
1939
2539
lambda
2438
2539
and_test
1940
2539
not
1941
2539
expr
1942
2540
:
2582
2541
DEDENT
confbody -> NAME test NEWLINE confbody
2542
return
elif_clause -> elif test : suite elif_clause
2542
conf
elif_clause -> elif test : suite elif_clause
2542
$
elif_clause -> elif test : suite elif_clause
2542
resetstats
elif_clause -> elif test : suite elif_clause
2542
NUMBER
elif_clause -> elif test : suite elif_clause
2542
try
elif_clause -> elif test : suite elif_clause
2542
~
elif_clause -> elif test : suite elif_clause
2542
def
elif_clause -> elif test : suite elif_clause
2542
lambda
elif_clause -> elif test : suite elif_clause
2542
nonlocal
elif_clause -> elif test : suite elif_clause
2542
yield
elif_clause -> elif test : suite elif_clause
2542
{
elif_clause -> elif test : suite elif_clause
2542
pass
elif_clause -> elif test : suite elif_clause
2542
raise
elif_clause -> elif test : suite elif_clause
2542
-
elif_clause -> elif test : suite elif_clause
2542
with
elif_clause -> elif test : suite elif_clause
2542
True
elif_clause -> elif test : suite elif_clause
2542
break
elif_clause -> elif test : suite elif_clause
2542
[
elif_clause -> elif test : suite elif_clause
2542
+
elif_clause -> elif test : suite elif_clause
2542
None
elif_clause -> elif test : suite elif_clause
2542
not
elif_clause -> elif test : suite elif_clause
2542
NAME
elif_clause -> elif test : suite elif_clause
2542
for
elif_clause -> elif test : suite elif_clause
2542
continue
elif_clause -> elif test : suite elif_clause
2542
(
elif_clause -> elif test : suite elif_clause
2542
False
elif_clause -> elif test : suite elif_clause
2542
del
elif_clause -> elif test : suite elif_clause
2542
begsim
elif_clause -> elif test : suite elif_clause
2542
assert
elif_clause -> elif test : suite elif_clause
2542
NEWLINE
elif_clause -> elif test : suite elif_clause
2542
@
elif_clause -> elif test : suite elif_clause
2542
while
elif_clause -> elif test : suite elif_clause
2542
else
elif_clause -> elif test : suite elif_clause
2542
class
elif_clause -> elif test : suite elif_clause
2542
if
elif_clause -> elif test : suite elif_clause
2542
global
elif_clause -> elif test : suite elif_clause
2542
endsim
elif_clause -> elif test : suite elif_clause
2542
STRING
elif_clause -> elif test : suite elif_clause
2543
for
test_nocond -> or_test
2543
)
test_nocond -> or_test
2543
if
test_nocond -> or_test
2543
,
test_nocond -> or_test
2544
comp_if
2442
2544
,
comp_iter -> 
2544
)
comp_iter -> 
2544
for
1119
2544
comp_for
2444
2544
if
2445
2544
comp_iter
2583
2545
for
test_nocond -> lambdef_nocond
2545
)
test_nocond -> lambdef_nocond
2545
,
test_nocond -> lambdef_nocond
2545
if
test_nocond -> lambdef_nocond
2546
:
2584
2546
NAME
251
2546
vfpdef
253
2546
varargslist
2585
2547
,
trailer -> [ subscriptlist ]
2547
//
trailer -> [ subscriptlist ]
2547
/
trailer -> [ subscriptlist ]
2547
^
trailer -> [ subscriptlist ]
2547
)
trailer -> [ subscriptlist ]
2547
.
trailer -> [ subscriptlist ]
2547
<
trailer -> [ subscriptlist ]
2547
<<
trailer -> [ subscriptlist ]
2547
in
trailer -> [ subscriptlist ]
2547
@
trailer -> [ subscriptlist ]
2547
>
trailer -> [ subscriptlist ]
2547
*
trailer -> [ subscriptlist ]
2547
and
trailer -> [ subscriptlist ]
2547
+
trailer -> [ subscriptlist ]
2547
(
trailer -> [ subscriptlist ]
2547
=
trailer -> [ subscriptlist ]
2547
is
trailer -> [ subscriptlist ]
2547
or
trailer -> [ subscriptlist ]
2547
<=
trailer -> [ subscriptlist ]
2547
if
trailer -> [ subscriptlist ]
2547
|
trailer -> [ subscriptlist ]
2547
==
trailer -> [ subscriptlist ]
2547
not
trailer -> [ subscriptlist ]
2547
-
trailer -> [ subscriptlist ]
2547
!=
trailer -> [ subscriptlist ]
2547
&
trailer -> [ subscriptlist ]
2547
[
trailer -> [ subscriptlist ]
2547
>>
trailer -> [ subscriptlist ]
2547
%
trailer -> [ subscriptlist ]
2547
>=
trailer -> [ subscriptlist ]
2547
**
trailer -> [ subscriptlist ]
2548
>=
trailer -> ( arglist )
2548
//
trailer -> ( arglist )
2548
%
trailer -> ( arglist )
2548
in
trailer -> ( arglist )
2548
&
trailer -> ( arglist )
2548
,
trailer -> ( arglist )
2548
>>
trailer -> ( arglist )
2548
-
trailer -> ( arglist )
2548
^
trailer -> ( arglist )
2548
>
trailer -> ( arglist )
2548
<<
trailer -> ( arglist )
2548
==
trailer -> ( arglist )
2548
<=
trailer -> ( arglist )
2548
*
trailer -> ( arglist )
2548
and
trailer -> ( arglist )
2548
=
trailer -> ( arglist )
2548
/
trailer -> ( arglist )
2548
[
trailer -> ( arglist )
2548
(
trailer -> ( arglist )
2548
<
trailer -> ( arglist )
2548
|
trailer -> ( arglist )
2548
+
trailer -> ( arglist )
2548
not
trailer -> ( arglist )
2548
or
trailer -> ( arglist )
2548
)
trailer -> ( arglist )
2548
is
trailer -> ( arglist )
2548
.
trailer -> ( arglist )
2548
!=
trailer -> ( arglist )
2548
@
trailer -> ( arglist )
2548
**
trailer -> ( arglist )
2548
if
trailer -> ( arglist )
2549
,
lambdef -> lambda varargslist : test
2549
)
lambdef -> lambda varargslist : test
2549
=
lambdef -> lambda varargslist : test
2550
~
1971
2550
factor
1972
2550
STRING
1973
2550
shift_expr
1974
2550
arith_expr
1975
2550
term
1976
2550
NUMBER
1977
2550
{
1978
2550
atom_expr
1979
2550
[
1980
2550
-
1981
2550
None
1982
2550
(
1983
2550
atom
1984
2550
and_expr
1985
2550
+
1986
2550
not_test
1987
2550
NAME
1988
2550
power
1989
2550
True
1990
2550
test
2586
2550
comparison
1991
2550
xor_expr
1992
2550
False
1993
2550
and_test
1994
2550
lambda
1995
2550
lambdef
1996
2550
expr
1997
2550
not
1998
2550
or_test
1999
2551
expr
5
2551
factor
1
2551
(
3
2551
STRING
4
2551
term
6
2551
not
8
2551
or_test
10
2551
~
12
2551
atom_expr
13
2551
comparison
14
2551
shift_expr
29
2551
None
15
2551
power
43
2551
+
19
2551
small_stmt
42
2551
xor_expr
17
2551
arith_expr
18
2551
suite
2587
2551
[
32
2551
simple_stmt
1050
2551
atom
22
2551
NUMBER
26
2551
and_test
39
2551
NAME
27
2551
-
36
2551
False
28
2551
lambda
46
2551
test
47
2551
NEWLINE
1051
2551
not_test
34
2551
{
35
2551
and_expr
33
2551
lambdef
45
2551
True
48
2551
endsim
75
2551
flow_stmt
53
2551
pass
76
2551
break
54
2551
raise
55
2551
yield
56
2551
assert
57
2551
global_stmt
77
2551
continue_stmt
58
2551
del_stmt
78
2551
stat_stmt
59
2551
global
79
2551
return_stmt
60
2551
test_list
61
2551
continue
62
2551
yield_stmt
63
2551
return
68
2551
sim_stmt
65
2551
resetstats
66
2551
break_stmt
82
2551
del
67
2551
raise_stmt
69
2551
nonlocal
70
2551
pass_stmt
71
2551
begsim
83
2551
expr_stmt
72
2551
nonlocal_stmt
84
2551
assert_stmt
74
2552
DEDENT
2588
2553
maybe_except_clause
2589
2553
except_clause
2310
2553
except
1139
2553
@
maybe_except_clause -> 
2553
pass
maybe_except_clause -> 
2553
if
maybe_except_clause -> 
2553
NUMBER
maybe_except_clause -> 
2553
NEWLINE
maybe_except_clause -> 
2553
class
maybe_except_clause -> 
2553
del
maybe_except_clause -> 
2553
raise
maybe_except_clause -> 
2553
conf
maybe_except_clause -> 
2553
for
maybe_except_clause -> 
2553
assert
maybe_except_clause -> 
2553
$
maybe_except_clause -> 
2553
STRING
maybe_except_clause -> 
2553
[
maybe_except_clause -> 
2553
None
maybe_except_clause -> 
2553
return
maybe_except_clause -> 
2553
not
maybe_except_clause -> 
2553
yield
maybe_except_clause -> 
2553
nonlocal
maybe_except_clause -> 
2553
-
maybe_except_clause -> 
2553
try
maybe_except_clause -> 
2553
while
maybe_except_clause -> 
2553
begsim
maybe_except_clause -> 
2553
lambda
maybe_except_clause -> 
2553
(
maybe_except_clause -> 
2553
~
maybe_except_clause -> 
2553
global
maybe_except_clause -> 
2553
NAME
maybe_except_clause -> 
2553
else
maybe_except_clause -> 
2553
def
maybe_except_clause -> 
2553
resetstats
maybe_except_clause -> 
2553
False
maybe_except_clause -> 
2553
break
maybe_except_clause -> 
2553
with
maybe_except_clause -> 
2553
+
maybe_except_clause -> 
2553
endsim
maybe_except_clause -> 
2553
continue
maybe_except_clause -> 
2553
{
maybe_except_clause -> 
2553
True
maybe_except_clause -> 
2553
finally
maybe_except_clause -> 
2554
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2554
return
suite -> NEWLINE INDENT stmt_list DEDENT
2554
if
suite -> NEWLINE INDENT stmt_list DEDENT
2554
not
suite -> NEWLINE INDENT stmt_list DEDENT
2554
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2554
{
suite -> NEWLINE INDENT stmt_list DEDENT
2554
break
suite -> NEWLINE INDENT stmt_list DEDENT
2554
False
suite -> NEWLINE INDENT stmt_list DEDENT
2554
+
suite -> NEWLINE INDENT stmt_list DEDENT
2554
class
suite -> NEWLINE INDENT stmt_list DEDENT
2554
with
suite -> NEWLINE INDENT stmt_list DEDENT
2554
(
suite -> NEWLINE INDENT stmt_list DEDENT
2554
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2554
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2554
global
suite -> NEWLINE INDENT stmt_list DEDENT
2554
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2554
$
suite -> NEWLINE INDENT stmt_list DEDENT
2554
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2554
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2554
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2554
try
suite -> NEWLINE INDENT stmt_list DEDENT
2554
while
suite -> NEWLINE INDENT stmt_list DEDENT
2554
except
suite -> NEWLINE INDENT stmt_list DEDENT
2554
del
suite -> NEWLINE INDENT stmt_list DEDENT
2554
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2554
True
suite -> NEWLINE INDENT stmt_list DEDENT
2554
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2554
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2554
for
suite -> NEWLINE INDENT stmt_list DEDENT
2554
~
suite -> NEWLINE INDENT stmt_list DEDENT
2554
else
suite -> NEWLINE INDENT stmt_list DEDENT
2554
-
suite -> NEWLINE INDENT stmt_list DEDENT
2554
@
suite -> NEWLINE INDENT stmt_list DEDENT
2554
None
suite -> NEWLINE INDENT stmt_list DEDENT
2554
[
suite -> NEWLINE INDENT stmt_list DEDENT
2554
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2554
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2554
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2554
def
suite -> NEWLINE INDENT stmt_list DEDENT
2554
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2554
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2555
:
test -> or_test if or_test else test
2555
as
test -> or_test if or_test else test
2556
confbody
2590
2556
NAME
1945
2557
~
simple_stmt -> small_stmt NEWLINE
2557
begsim
simple_stmt -> small_stmt NEWLINE
2557
endsim
simple_stmt -> small_stmt NEWLINE
2557
if
simple_stmt -> small_stmt NEWLINE
2557
break
simple_stmt -> small_stmt NEWLINE
2557
False
simple_stmt -> small_stmt NEWLINE
2557
def
simple_stmt -> small_stmt NEWLINE
2557
STRING
simple_stmt -> small_stmt NEWLINE
2557
else
simple_stmt -> small_stmt NEWLINE
2557
assert
simple_stmt -> small_stmt NEWLINE
2557
lambda
simple_stmt -> small_stmt NEWLINE
2557
yield
simple_stmt -> small_stmt NEWLINE
2557
True
simple_stmt -> small_stmt NEWLINE
2557
+
simple_stmt -> small_stmt NEWLINE
2557
try
simple_stmt -> small_stmt NEWLINE
2557
for
simple_stmt -> small_stmt NEWLINE
2557
conf
simple_stmt -> small_stmt NEWLINE
2557
nonlocal
simple_stmt -> small_stmt NEWLINE
2557
continue
simple_stmt -> small_stmt NEWLINE
2557
-
simple_stmt -> small_stmt NEWLINE
2557
resetstats
simple_stmt -> small_stmt NEWLINE
2557
raise
simple_stmt -> small_stmt NEWLINE
2557
(
simple_stmt -> small_stmt NEWLINE
2557
None
simple_stmt -> small_stmt NEWLINE
2557
while
simple_stmt -> small_stmt NEWLINE
2557
not
simple_stmt -> small_stmt NEWLINE
2557
DEDENT
simple_stmt -> small_stmt NEWLINE
2557
NAME
simple_stmt -> small_stmt NEWLINE
2557
del
simple_stmt -> small_stmt NEWLINE
2557
with
simple_stmt -> small_stmt NEWLINE
2557
global
simple_stmt -> small_stmt NEWLINE
2557
@
simple_stmt -> small_stmt NEWLINE
2557
class
simple_stmt -> small_stmt NEWLINE
2557
{
simple_stmt -> small_stmt NEWLINE
2557
NUMBER
simple_stmt -> small_stmt NEWLINE
2557
[
simple_stmt -> small_stmt NEWLINE
2557
pass
simple_stmt -> small_stmt NEWLINE
2557
return
simple_stmt -> small_stmt NEWLINE
2558
:
2591
2559
factor
1
2559
decorators
1661
2559
(
3
2559
STRING
4
2559
expr
5
2559
term
6
2559
conf
1662
2559
not
8
2559
while
1663
2559
or_test
10
2559
if
1664
2559
~
12
2559
atom_expr
13
2559
comparison
14
2559
None
15
2559
class
1665
2559
xor_expr
17
2559
arith_expr
18
2559
+
19
2559
stmt_list
2592
2559
confdef
1666
2559
decorated
1667
2559
atom
22
2559
try_stmt
1668
2559
def
1669
2559
compound_stmt
1670
2559
try
1671
2559
NUMBER
26
2559
NAME
27
2559
False
28
2559
shift_expr
29
2559
while_stmt
1672
2559
[
32
2559
and_expr
33
2559
not_test
34
2559
{
35
2559
-
36
2559
simple_stmt
1673
2559
for
1674
2559
and_test
39
2559
@
40
2559
with_stmt
1675
2559
funcdef
1676
2559
small_stmt
1677
2559
power
43
2559
classdef
1678
2559
lambdef
45
2559
lambda
46
2559
test
47
2559
True
48
2559
if_stmt
1679
2559
for_stmt
1680
2559
with
1681
2559
flow_stmt
53
2559
break
54
2559
raise
55
2559
yield
56
2559
assert
57
2559
continue_stmt
58
2559
stat_stmt
59
2559
return_stmt
60
2559
test_list
61
2559
stmt
1682
2559
continue
62
2559
yield_stmt
63
2559
decorator
64
2559
sim_stmt
65
2559
resetstats
66
2559
del
67
2559
return
68
2559
raise_stmt
69
2559
nonlocal
70
2559
pass_stmt
71
2559
expr_stmt
72
2559
assert_stmt
74
2559
endsim
75
2559
pass
76
2559
global_stmt
77
2559
del_stmt
78
2559
global
79
2559
break_stmt
82
2559
begsim
83
2559
nonlocal_stmt
84
2560
~
simple_stmt -> small_stmt NEWLINE
2560
begsim
simple_stmt -> small_stmt NEWLINE
2560
endsim
simple_stmt -> small_stmt NEWLINE
2560
if
simple_stmt -> small_stmt NEWLINE
2560
break
simple_stmt -> small_stmt NEWLINE
2560
False
simple_stmt -> small_stmt NEWLINE
2560
def
simple_stmt -> small_stmt NEWLINE
2560
STRING
simple_stmt -> small_stmt NEWLINE
2560
else
simple_stmt -> small_stmt NEWLINE
2560
assert
simple_stmt -> small_stmt NEWLINE
2560
lambda
simple_stmt -> small_stmt NEWLINE
2560
yield
simple_stmt -> small_stmt NEWLINE
2560
True
simple_stmt -> small_stmt NEWLINE
2560
+
simple_stmt -> small_stmt NEWLINE
2560
try
simple_stmt -> small_stmt NEWLINE
2560
for
simple_stmt -> small_stmt NEWLINE
2560
conf
simple_stmt -> small_stmt NEWLINE
2560
nonlocal
simple_stmt -> small_stmt NEWLINE
2560
elif
simple_stmt -> small_stmt NEWLINE
2560
continue
simple_stmt -> small_stmt NEWLINE
2560
-
simple_stmt -> small_stmt NEWLINE
2560
resetstats
simple_stmt -> small_stmt NEWLINE
2560
raise
simple_stmt -> small_stmt NEWLINE
2560
(
simple_stmt -> small_stmt NEWLINE
2560
None
simple_stmt -> small_stmt NEWLINE
2560
while
simple_stmt -> small_stmt NEWLINE
2560
not
simple_stmt -> small_stmt NEWLINE
2560
DEDENT
simple_stmt -> small_stmt NEWLINE
2560
NAME
simple_stmt -> small_stmt NEWLINE
2560
del
simple_stmt -> small_stmt NEWLINE
2560
with
simple_stmt -> small_stmt NEWLINE
2560
global
simple_stmt -> small_stmt NEWLINE
2560
@
simple_stmt -> small_stmt NEWLINE
2560
class
simple_stmt -> small_stmt NEWLINE
2560
{
simple_stmt -> small_stmt NEWLINE
2560
NUMBER
simple_stmt -> small_stmt NEWLINE
2560
[
simple_stmt -> small_stmt NEWLINE
2560
pass
simple_stmt -> small_stmt NEWLINE
2560
return
simple_stmt -> small_stmt NEWLINE
2561
factor
1
2561
decorators
1661
2561
(
3
2561
STRING
4
2561
expr
5
2561
term
6
2561
conf
1662
2561
not
8
2561
while
1663
2561
or_test
10
2561
if
1664
2561
~
12
2561
atom_expr
13
2561
comparison
14
2561
None
15
2561
class
1665
2561
xor_expr
17
2561
arith_expr
18
2561
+
19
2561
stmt_list
2593
2561
confdef
1666
2561
decorated
1667
2561
atom
22
2561
try_stmt
1668
2561
def
1669
2561
compound_stmt
1670
2561
try
1671
2561
NUMBER
26
2561
NAME
27
2561
False
28
2561
shift_expr
29
2561
while_stmt
1672
2561
[
32
2561
and_expr
33
2561
not_test
34
2561
{
35
2561
-
36
2561
simple_stmt
1673
2561
for
1674
2561
and_test
39
2561
@
40
2561
with_stmt
1675
2561
funcdef
1676
2561
small_stmt
1677
2561
power
43
2561
classdef
1678
2561
lambdef
45
2561
lambda
46
2561
test
47
2561
True
48
2561
if_stmt
1679
2561
for_stmt
1680
2561
with
1681
2561
flow_stmt
53
2561
break
54
2561
raise
55
2561
yield
56
2561
assert
57
2561
continue_stmt
58
2561
stat_stmt
59
2561
return_stmt
60
2561
test_list
61
2561
stmt
1682
2561
continue
62
2561
yield_stmt
63
2561
decorator
64
2561
sim_stmt
65
2561
resetstats
66
2561
del
67
2561
return
68
2561
raise_stmt
69
2561
nonlocal
70
2561
pass_stmt
71
2561
expr_stmt
72
2561
assert_stmt
74
2561
endsim
75
2561
pass
76
2561
global_stmt
77
2561
del_stmt
78
2561
global
79
2561
break_stmt
82
2561
begsim
83
2561
nonlocal_stmt
84
2562
lambda
if_stmt -> if test : suite elif_clause
2562
global
if_stmt -> if test : suite elif_clause
2562
else
2594
2562
True
if_stmt -> if test : suite elif_clause
2562
DEDENT
if_stmt -> if test : suite elif_clause
2562
NUMBER
if_stmt -> if test : suite elif_clause
2562
~
if_stmt -> if test : suite elif_clause
2562
resetstats
if_stmt -> if test : suite elif_clause
2562
break
if_stmt -> if test : suite elif_clause
2562
@
if_stmt -> if test : suite elif_clause
2562
def
if_stmt -> if test : suite elif_clause
2562
not
if_stmt -> if test : suite elif_clause
2562
+
if_stmt -> if test : suite elif_clause
2562
endsim
if_stmt -> if test : suite elif_clause
2562
NAME
if_stmt -> if test : suite elif_clause
2562
yield
if_stmt -> if test : suite elif_clause
2562
del
if_stmt -> if test : suite elif_clause
2562
begsim
if_stmt -> if test : suite elif_clause
2562
False
if_stmt -> if test : suite elif_clause
2562
while
if_stmt -> if test : suite elif_clause
2562
STRING
if_stmt -> if test : suite elif_clause
2562
{
if_stmt -> if test : suite elif_clause
2562
if
if_stmt -> if test : suite elif_clause
2562
with
if_stmt -> if test : suite elif_clause
2562
pass
if_stmt -> if test : suite elif_clause
2562
nonlocal
if_stmt -> if test : suite elif_clause
2562
conf
if_stmt -> if test : suite elif_clause
2562
-
if_stmt -> if test : suite elif_clause
2562
assert
if_stmt -> if test : suite elif_clause
2562
return
if_stmt -> if test : suite elif_clause
2562
try
if_stmt -> if test : suite elif_clause
2562
[
if_stmt -> if test : suite elif_clause
2562
continue
if_stmt -> if test : suite elif_clause
2562
None
if_stmt -> if test : suite elif_clause
2562
(
if_stmt -> if test : suite elif_clause
2562
class
if_stmt -> if test : suite elif_clause
2562
for
if_stmt -> if test : suite elif_clause
2562
raise
if_stmt -> if test : suite elif_clause
2563
test
2595
2563
factor
140
2563
~
139
2563
shift_expr
142
2563
STRING
143
2563
expr
144
2563
term
145
2563
NUMBER
146
2563
{
147
2563
atom_expr
148
2563
-
150
2563
[
149
2563
None
151
2563
+
152
2563
(
153
2563
arith_expr
154
2563
atom
155
2563
and_expr
156
2563
NAME
157
2563
power
158
2563
True
159
2563
comparison
160
2563
xor_expr
161
2563
lambda
162
2563
False
163
2563
not_test
164
2563
and_test
165
2563
not
166
2563
or_test
167
2563
lambdef
168
2564
factor
1
2564
decorators
1661
2564
(
3
2564
STRING
4
2564
expr
5
2564
term
6
2564
conf
1662
2564
not
8
2564
while
1663
2564
or_test
10
2564
if
1664
2564
~
12
2564
atom_expr
13
2564
comparison
14
2564
None
15
2564
class
1665
2564
xor_expr
17
2564
arith_expr
18
2564
+
19
2564
stmt_list
2596
2564
confdef
1666
2564
decorated
1667
2564
atom
22
2564
try_stmt
1668
2564
def
1669
2564
compound_stmt
1670
2564
try
1671
2564
NUMBER
26
2564
NAME
27
2564
False
28
2564
shift_expr
29
2564
while_stmt
1672
2564
[
32
2564
and_expr
33
2564
not_test
34
2564
{
35
2564
-
36
2564
simple_stmt
1673
2564
for
1674
2564
and_test
39
2564
@
40
2564
with_stmt
1675
2564
funcdef
1676
2564
small_stmt
1677
2564
power
43
2564
classdef
1678
2564
lambdef
45
2564
lambda
46
2564
test
47
2564
True
48
2564
if_stmt
1679
2564
for_stmt
1680
2564
with
1681
2564
flow_stmt
53
2564
break
54
2564
raise
55
2564
yield
56
2564
assert
57
2564
continue_stmt
58
2564
stat_stmt
59
2564
return_stmt
60
2564
test_list
61
2564
stmt
1682
2564
continue
62
2564
yield_stmt
63
2564
decorator
64
2564
sim_stmt
65
2564
resetstats
66
2564
del
67
2564
return
68
2564
raise_stmt
69
2564
nonlocal
70
2564
pass_stmt
71
2564
expr_stmt
72
2564
assert_stmt
74
2564
endsim
75
2564
pass
76
2564
global_stmt
77
2564
del_stmt
78
2564
global
79
2564
break_stmt
82
2564
begsim
83
2564
nonlocal_stmt
84
2565
:
2597
2566
expr
5
2566
factor
1
2566
(
3
2566
STRING
4
2566
term
6
2566
not
8
2566
or_test
10
2566
~
12
2566
atom_expr
13
2566
comparison
14
2566
shift_expr
29
2566
None
15
2566
power
43
2566
+
19
2566
small_stmt
1677
2566
xor_expr
17
2566
arith_expr
18
2566
[
32
2566
simple_stmt
2491
2566
atom
22
2566
NUMBER
26
2566
and_test
39
2566
suite
2598
2566
NAME
27
2566
-
36
2566
False
28
2566
lambda
46
2566
test
47
2566
not_test
34
2566
{
35
2566
and_expr
33
2566
lambdef
45
2566
True
48
2566
NEWLINE
2493
2566
endsim
75
2566
flow_stmt
53
2566
pass
76
2566
break
54
2566
raise
55
2566
yield
56
2566
assert
57
2566
global_stmt
77
2566
continue_stmt
58
2566
del_stmt
78
2566
stat_stmt
59
2566
global
79
2566
return_stmt
60
2566
test_list
61
2566
continue
62
2566
yield_stmt
63
2566
return
68
2566
sim_stmt
65
2566
resetstats
66
2566
break_stmt
82
2566
del
67
2566
raise_stmt
69
2566
nonlocal
70
2566
pass_stmt
71
2566
begsim
83
2566
expr_stmt
72
2566
nonlocal_stmt
84
2566
assert_stmt
74
2567
expr
5
2567
factor
1
2567
(
3
2567
STRING
4
2567
term
6
2567
not
8
2567
or_test
10
2567
~
12
2567
atom_expr
13
2567
comparison
14
2567
shift_expr
29
2567
None
15
2567
power
43
2567
+
19
2567
small_stmt
1677
2567
xor_expr
17
2567
arith_expr
18
2567
[
32
2567
simple_stmt
2491
2567
atom
22
2567
NUMBER
26
2567
and_test
39
2567
NAME
27
2567
-
36
2567
False
28
2567
lambda
46
2567
test
47
2567
not_test
34
2567
{
35
2567
and_expr
33
2567
lambdef
45
2567
True
48
2567
suite
2599
2567
NEWLINE
2493
2567
endsim
75
2567
flow_stmt
53
2567
pass
76
2567
break
54
2567
raise
55
2567
yield
56
2567
assert
57
2567
global_stmt
77
2567
continue_stmt
58
2567
del_stmt
78
2567
stat_stmt
59
2567
global
79
2567
return_stmt
60
2567
test_list
61
2567
continue
62
2567
yield_stmt
63
2567
return
68
2567
sim_stmt
65
2567
resetstats
66
2567
break_stmt
82
2567
del
67
2567
raise_stmt
69
2567
nonlocal
70
2567
pass_stmt
71
2567
begsim
83
2567
expr_stmt
72
2567
nonlocal_stmt
84
2567
assert_stmt
74
2568
:
2600
2569
:
2601
2570
:
2602
2571
as
2603
2571
:
2604
2572
expr
5
2572
factor
1
2572
(
3
2572
STRING
4
2572
term
6
2572
not
8
2572
or_test
10
2572
~
12
2572
atom_expr
13
2572
comparison
14
2572
shift_expr
29
2572
None
15
2572
power
43
2572
+
19
2572
small_stmt
2605
2572
xor_expr
17
2572
arith_expr
18
2572
[
32
2572
simple_stmt
2606
2572
atom
22
2572
NUMBER
26
2572
and_test
39
2572
NAME
27
2572
-
36
2572
False
28
2572
lambda
46
2572
test
47
2572
NEWLINE
2607
2572
not_test
34
2572
{
35
2572
and_expr
33
2572
lambdef
45
2572
True
48
2572
suite
2608
2572
endsim
75
2572
flow_stmt
53
2572
pass
76
2572
break
54
2572
raise
55
2572
yield
56
2572
assert
57
2572
global_stmt
77
2572
continue_stmt
58
2572
del_stmt
78
2572
stat_stmt
59
2572
global
79
2572
return_stmt
60
2572
test_list
61
2572
continue
62
2572
yield_stmt
63
2572
return
68
2572
sim_stmt
65
2572
resetstats
66
2572
break_stmt
82
2572
del
67
2572
raise_stmt
69
2572
nonlocal
70
2572
pass_stmt
71
2572
begsim
83
2572
expr_stmt
72
2572
nonlocal_stmt
84
2572
assert_stmt
74
2573
expr
5
2573
factor
1
2573
(
3
2573
STRING
4
2573
term
6
2573
not
8
2573
or_test
10
2573
~
12
2573
atom_expr
13
2573
comparison
14
2573
shift_expr
29
2573
None
15
2573
power
43
2573
+
19
2573
small_stmt
2483
2573
xor_expr
17
2573
arith_expr
18
2573
suite
2609
2573
[
32
2573
simple_stmt
2484
2573
atom
22
2573
NUMBER
26
2573
and_test
39
2573
NAME
27
2573
-
36
2573
False
28
2573
lambda
46
2573
test
47
2573
NEWLINE
2486
2573
not_test
34
2573
{
35
2573
and_expr
33
2573
lambdef
45
2573
True
48
2573
endsim
75
2573
flow_stmt
53
2573
pass
76
2573
break
54
2573
raise
55
2573
yield
56
2573
assert
57
2573
global_stmt
77
2573
continue_stmt
58
2573
del_stmt
78
2573
stat_stmt
59
2573
global
79
2573
return_stmt
60
2573
test_list
61
2573
continue
62
2573
yield_stmt
63
2573
return
68
2573
sim_stmt
65
2573
resetstats
66
2573
break_stmt
82
2573
del
67
2573
raise_stmt
69
2573
nonlocal
70
2573
pass_stmt
71
2573
begsim
83
2573
expr_stmt
72
2573
nonlocal_stmt
84
2573
assert_stmt
74
2574
//
trailer -> [ subscriptlist ]
2574
/
trailer -> [ subscriptlist ]
2574
^
trailer -> [ subscriptlist ]
2574
.
trailer -> [ subscriptlist ]
2574
<
trailer -> [ subscriptlist ]
2574
<<
trailer -> [ subscriptlist ]
2574
in
trailer -> [ subscriptlist ]
2574
@
trailer -> [ subscriptlist ]
2574
>
trailer -> [ subscriptlist ]
2574
for
trailer -> [ subscriptlist ]
2574
*
trailer -> [ subscriptlist ]
2574
and
trailer -> [ subscriptlist ]
2574
+
trailer -> [ subscriptlist ]
2574
(
trailer -> [ subscriptlist ]
2574
is
trailer -> [ subscriptlist ]
2574
or
trailer -> [ subscriptlist ]
2574
<=
trailer -> [ subscriptlist ]
2574
if
trailer -> [ subscriptlist ]
2574
|
trailer -> [ subscriptlist ]
2574
==
trailer -> [ subscriptlist ]
2574
not
trailer -> [ subscriptlist ]
2574
-
trailer -> [ subscriptlist ]
2574
!=
trailer -> [ subscriptlist ]
2574
&
trailer -> [ subscriptlist ]
2574
[
trailer -> [ subscriptlist ]
2574
>>
trailer -> [ subscriptlist ]
2574
%
trailer -> [ subscriptlist ]
2574
>=
trailer -> [ subscriptlist ]
2574
**
trailer -> [ subscriptlist ]
2574
]
trailer -> [ subscriptlist ]
2575
>=
trailer -> ( arglist )
2575
//
trailer -> ( arglist )
2575
%
trailer -> ( arglist )
2575
in
trailer -> ( arglist )
2575
&
trailer -> ( arglist )
2575
for
trailer -> ( arglist )
2575
>>
trailer -> ( arglist )
2575
-
trailer -> ( arglist )
2575
^
trailer -> ( arglist )
2575
>
trailer -> ( arglist )
2575
<<
trailer -> ( arglist )
2575
==
trailer -> ( arglist )
2575
<=
trailer -> ( arglist )
2575
]
trailer -> ( arglist )
2575
*
trailer -> ( arglist )
2575
and
trailer -> ( arglist )
2575
/
trailer -> ( arglist )
2575
[
trailer -> ( arglist )
2575
(
trailer -> ( arglist )
2575
<
trailer -> ( arglist )
2575
|
trailer -> ( arglist )
2575
+
trailer -> ( arglist )
2575
not
trailer -> ( arglist )
2575
or
trailer -> ( arglist )
2575
is
trailer -> ( arglist )
2575
.
trailer -> ( arglist )
2575
!=
trailer -> ( arglist )
2575
@
trailer -> ( arglist )
2575
**
trailer -> ( arglist )
2575
if
trailer -> ( arglist )
2576
~
2057
2576
factor
2058
2576
STRING
2059
2576
shift_expr
2060
2576
term
2061
2576
atom_expr
2062
2576
NUMBER
2063
2576
and_expr
2064
2576
{
2065
2576
[
2066
2576
-
2067
2576
None
2068
2576
(
2069
2576
arith_expr
2070
2576
atom
2071
2576
or_test
2524
2576
+
2072
2576
NAME
2073
2576
power
2074
2576
True
2075
2576
comparison
2076
2576
xor_expr
2077
2576
False
2078
2576
lambdef_nocond
2525
2576
not_test
2079
2576
and_test
2080
2576
test_nocond
2610
2576
lambda
2526
2576
not
2082
2576
expr
2083
2577
:
2611
2578
]
comp_if -> if test_nocond comp_iter
2579
if
for_stmt -> for expr_list in test_list : suite else : suite
2579
$
for_stmt -> for expr_list in test_list : suite else : suite
2579
class
for_stmt -> for expr_list in test_list : suite else : suite
2579
while
for_stmt -> for expr_list in test_list : suite else : suite
2579
nonlocal
for_stmt -> for expr_list in test_list : suite else : suite
2579
(
for_stmt -> for expr_list in test_list : suite else : suite
2579
+
for_stmt -> for expr_list in test_list : suite else : suite
2579
def
for_stmt -> for expr_list in test_list : suite else : suite
2579
continue
for_stmt -> for expr_list in test_list : suite else : suite
2579
True
for_stmt -> for expr_list in test_list : suite else : suite
2579
assert
for_stmt -> for expr_list in test_list : suite else : suite
2579
global
for_stmt -> for expr_list in test_list : suite else : suite
2579
begsim
for_stmt -> for expr_list in test_list : suite else : suite
2579
resetstats
for_stmt -> for expr_list in test_list : suite else : suite
2579
STRING
for_stmt -> for expr_list in test_list : suite else : suite
2579
None
for_stmt -> for expr_list in test_list : suite else : suite
2579
not
for_stmt -> for expr_list in test_list : suite else : suite
2579
yield
for_stmt -> for expr_list in test_list : suite else : suite
2579
raise
for_stmt -> for expr_list in test_list : suite else : suite
2579
~
for_stmt -> for expr_list in test_list : suite else : suite
2579
return
for_stmt -> for expr_list in test_list : suite else : suite
2579
del
for_stmt -> for expr_list in test_list : suite else : suite
2579
NUMBER
for_stmt -> for expr_list in test_list : suite else : suite
2579
lambda
for_stmt -> for expr_list in test_list : suite else : suite
2579
endsim
for_stmt -> for expr_list in test_list : suite else : suite
2579
pass
for_stmt -> for expr_list in test_list : suite else : suite
2579
{
for_stmt -> for expr_list in test_list : suite else : suite
2579
with
for_stmt -> for expr_list in test_list : suite else : suite
2579
-
for_stmt -> for expr_list in test_list : suite else : suite
2579
@
for_stmt -> for expr_list in test_list : suite else : suite
2579
try
for_stmt -> for expr_list in test_list : suite else : suite
2579
for
for_stmt -> for expr_list in test_list : suite else : suite
2579
[
for_stmt -> for expr_list in test_list : suite else : suite
2579
False
for_stmt -> for expr_list in test_list : suite else : suite
2579
NEWLINE
for_stmt -> for expr_list in test_list : suite else : suite
2579
break
for_stmt -> for expr_list in test_list : suite else : suite
2579
NAME
for_stmt -> for expr_list in test_list : suite else : suite
2579
conf
for_stmt -> for expr_list in test_list : suite else : suite
2580
=
test -> or_test if or_test else test
2580
NEWLINE
test -> or_test if or_test else test
2581
if
lambdef_nocond -> lambda : test_nocond
2581
for
lambdef_nocond -> lambda : test_nocond
2581
)
lambdef_nocond -> lambda : test_nocond
2582
~
1917
2582
factor
1918
2582
STRING
1919
2582
shift_expr
1920
2582
term
1921
2582
NUMBER
1922
2582
and_expr
1923
2582
{
1924
2582
atom_expr
1925
2582
[
1926
2582
-
1927
2582
None
1928
2582
(
1929
2582
arith_expr
1930
2582
atom
1931
2582
or_test
2435
2582
+
1932
2582
NAME
1933
2582
power
1934
2582
True
1935
2582
comparison
1936
2582
xor_expr
1937
2582
False
1938
2582
lambdef_nocond
2437
2582
not_test
1939
2582
lambda
2438
2582
and_test
1940
2582
not
1941
2582
test_nocond
2612
2582
expr
1942
2583
)
comp_if -> if test_nocond comp_iter
2583
,
comp_if -> if test_nocond comp_iter
2584
~
92
2584
factor
93
2584
STRING
94
2584
shift_expr
95
2584
arith_expr
96
2584
term
97
2584
NUMBER
98
2584
and_expr
99
2584
{
100
2584
atom_expr
101
2584
[
102
2584
-
103
2584
None
105
2584
test_nocond
2613
2584
(
106
2584
atom
107
2584
or_test
2543
2584
+
109
2584
NAME
110
2584
power
111
2584
True
113
2584
comparison
114
2584
xor_expr
115
2584
False
117
2584
lambdef_nocond
2545
2584
not_test
118
2584
lambda
2546
2584
and_test
122
2584
not
123
2584
expr
124
2585
:
2614
2586
)
test -> or_test if or_test else test
2586
=
test -> or_test if or_test else test
2586
,
test -> or_test if or_test else test
2587
lambda
try_stmt -> try : suite except_clause else : suite finally : suite
2587
False
try_stmt -> try : suite except_clause else : suite finally : suite
2587
$
try_stmt -> try : suite except_clause else : suite finally : suite
2587
not
try_stmt -> try : suite except_clause else : suite finally : suite
2587
+
try_stmt -> try : suite except_clause else : suite finally : suite
2587
global
try_stmt -> try : suite except_clause else : suite finally : suite
2587
continue
try_stmt -> try : suite except_clause else : suite finally : suite
2587
class
try_stmt -> try : suite except_clause else : suite finally : suite
2587
-
try_stmt -> try : suite except_clause else : suite finally : suite
2587
[
try_stmt -> try : suite except_clause else : suite finally : suite
2587
pass
try_stmt -> try : suite except_clause else : suite finally : suite
2587
with
try_stmt -> try : suite except_clause else : suite finally : suite
2587
True
try_stmt -> try : suite except_clause else : suite finally : suite
2587
if
try_stmt -> try : suite except_clause else : suite finally : suite
2587
return
try_stmt -> try : suite except_clause else : suite finally : suite
2587
(
try_stmt -> try : suite except_clause else : suite finally : suite
2587
None
try_stmt -> try : suite except_clause else : suite finally : suite
2587
NUMBER
try_stmt -> try : suite except_clause else : suite finally : suite
2587
break
try_stmt -> try : suite except_clause else : suite finally : suite
2587
del
try_stmt -> try : suite except_clause else : suite finally : suite
2587
assert
try_stmt -> try : suite except_clause else : suite finally : suite
2587
while
try_stmt -> try : suite except_clause else : suite finally : suite
2587
conf
try_stmt -> try : suite except_clause else : suite finally : suite
2587
endsim
try_stmt -> try : suite except_clause else : suite finally : suite
2587
yield
try_stmt -> try : suite except_clause else : suite finally : suite
2587
STRING
try_stmt -> try : suite except_clause else : suite finally : suite
2587
begsim
try_stmt -> try : suite except_clause else : suite finally : suite
2587
nonlocal
try_stmt -> try : suite except_clause else : suite finally : suite
2587
~
try_stmt -> try : suite except_clause else : suite finally : suite
2587
{
try_stmt -> try : suite except_clause else : suite finally : suite
2587
for
try_stmt -> try : suite except_clause else : suite finally : suite
2587
def
try_stmt -> try : suite except_clause else : suite finally : suite
2587
raise
try_stmt -> try : suite except_clause else : suite finally : suite
2587
resetstats
try_stmt -> try : suite except_clause else : suite finally : suite
2587
NEWLINE
try_stmt -> try : suite except_clause else : suite finally : suite
2587
try
try_stmt -> try : suite except_clause else : suite finally : suite
2587
NAME
try_stmt -> try : suite except_clause else : suite finally : suite
2587
@
try_stmt -> try : suite except_clause else : suite finally : suite
2588
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2588
return
suite -> NEWLINE INDENT stmt_list DEDENT
2588
if
suite -> NEWLINE INDENT stmt_list DEDENT
2588
not
suite -> NEWLINE INDENT stmt_list DEDENT
2588
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2588
{
suite -> NEWLINE INDENT stmt_list DEDENT
2588
break
suite -> NEWLINE INDENT stmt_list DEDENT
2588
False
suite -> NEWLINE INDENT stmt_list DEDENT
2588
+
suite -> NEWLINE INDENT stmt_list DEDENT
2588
class
suite -> NEWLINE INDENT stmt_list DEDENT
2588
with
suite -> NEWLINE INDENT stmt_list DEDENT
2588
(
suite -> NEWLINE INDENT stmt_list DEDENT
2588
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2588
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2588
global
suite -> NEWLINE INDENT stmt_list DEDENT
2588
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2588
$
suite -> NEWLINE INDENT stmt_list DEDENT
2588
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2588
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2588
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2588
try
suite -> NEWLINE INDENT stmt_list DEDENT
2588
while
suite -> NEWLINE INDENT stmt_list DEDENT
2588
del
suite -> NEWLINE INDENT stmt_list DEDENT
2588
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2588
True
suite -> NEWLINE INDENT stmt_list DEDENT
2588
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2588
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2588
for
suite -> NEWLINE INDENT stmt_list DEDENT
2588
~
suite -> NEWLINE INDENT stmt_list DEDENT
2588
-
suite -> NEWLINE INDENT stmt_list DEDENT
2588
@
suite -> NEWLINE INDENT stmt_list DEDENT
2588
None
suite -> NEWLINE INDENT stmt_list DEDENT
2588
[
suite -> NEWLINE INDENT stmt_list DEDENT
2588
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2588
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2588
NEWLINE
suite -> NEWLINE INDENT stmt_list DEDENT
2588
def
suite -> NEWLINE INDENT stmt_list DEDENT
2588
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2588
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2589
False
except_clause -> except test as NAME : suite maybe_except_clause
2589
~
except_clause -> except test as NAME : suite maybe_except_clause
2589
(
except_clause -> except test as NAME : suite maybe_except_clause
2589
global
except_clause -> except test as NAME : suite maybe_except_clause
2589
NUMBER
except_clause -> except test as NAME : suite maybe_except_clause
2589
begsim
except_clause -> except test as NAME : suite maybe_except_clause
2589
True
except_clause -> except test as NAME : suite maybe_except_clause
2589
endsim
except_clause -> except test as NAME : suite maybe_except_clause
2589
else
except_clause -> except test as NAME : suite maybe_except_clause
2589
conf
except_clause -> except test as NAME : suite maybe_except_clause
2589
[
except_clause -> except test as NAME : suite maybe_except_clause
2589
assert
except_clause -> except test as NAME : suite maybe_except_clause
2589
try
except_clause -> except test as NAME : suite maybe_except_clause
2589
with
except_clause -> except test as NAME : suite maybe_except_clause
2589
raise
except_clause -> except test as NAME : suite maybe_except_clause
2589
lambda
except_clause -> except test as NAME : suite maybe_except_clause
2589
NEWLINE
except_clause -> except test as NAME : suite maybe_except_clause
2589
break
except_clause -> except test as NAME : suite maybe_except_clause
2589
not
except_clause -> except test as NAME : suite maybe_except_clause
2589
finally
except_clause -> except test as NAME : suite maybe_except_clause
2589
while
except_clause -> except test as NAME : suite maybe_except_clause
2589
+
except_clause -> except test as NAME : suite maybe_except_clause
2589
return
except_clause -> except test as NAME : suite maybe_except_clause
2589
for
except_clause -> except test as NAME : suite maybe_except_clause
2589
STRING
except_clause -> except test as NAME : suite maybe_except_clause
2589
None
except_clause -> except test as NAME : suite maybe_except_clause
2589
yield
except_clause -> except test as NAME : suite maybe_except_clause
2589
NAME
except_clause -> except test as NAME : suite maybe_except_clause
2589
resetstats
except_clause -> except test as NAME : suite maybe_except_clause
2589
continue
except_clause -> except test as NAME : suite maybe_except_clause
2589
if
except_clause -> except test as NAME : suite maybe_except_clause
2589
-
except_clause -> except test as NAME : suite maybe_except_clause
2589
{
except_clause -> except test as NAME : suite maybe_except_clause
2589
$
except_clause -> except test as NAME : suite maybe_except_clause
2589
class
except_clause -> except test as NAME : suite maybe_except_clause
2589
nonlocal
except_clause -> except test as NAME : suite maybe_except_clause
2589
@
except_clause -> except test as NAME : suite maybe_except_clause
2589
def
except_clause -> except test as NAME : suite maybe_except_clause
2589
del
except_clause -> except test as NAME : suite maybe_except_clause
2589
pass
except_clause -> except test as NAME : suite maybe_except_clause
2590
DEDENT
2615
2591
expr
5
2591
factor
1
2591
(
3
2591
STRING
4
2591
term
6
2591
not
8
2591
or_test
10
2591
~
12
2591
suite
2616
2591
atom_expr
13
2591
comparison
14
2591
shift_expr
29
2591
None
15
2591
power
43
2591
+
19
2591
small_stmt
1677
2591
xor_expr
17
2591
arith_expr
18
2591
[
32
2591
simple_stmt
2491
2591
atom
22
2591
NUMBER
26
2591
and_test
39
2591
NAME
27
2591
-
36
2591
False
28
2591
lambda
46
2591
test
47
2591
not_test
34
2591
{
35
2591
and_expr
33
2591
lambdef
45
2591
True
48
2591
NEWLINE
2493
2591
endsim
75
2591
flow_stmt
53
2591
pass
76
2591
break
54
2591
raise
55
2591
yield
56
2591
assert
57
2591
global_stmt
77
2591
continue_stmt
58
2591
del_stmt
78
2591
stat_stmt
59
2591
global
79
2591
return_stmt
60
2591
test_list
61
2591
continue
62
2591
yield_stmt
63
2591
return
68
2591
sim_stmt
65
2591
resetstats
66
2591
break_stmt
82
2591
del
67
2591
raise_stmt
69
2591
nonlocal
70
2591
pass_stmt
71
2591
begsim
83
2591
expr_stmt
72
2591
nonlocal_stmt
84
2591
assert_stmt
74
2592
DEDENT
2617
2593
DEDENT
2618
2594
:
2619
2595
:
2620
2596
DEDENT
2621
2597
expr
5
2597
factor
1
2597
(
3
2597
STRING
4
2597
term
6
2597
suite
2622
2597
not
8
2597
or_test
10
2597
~
12
2597
atom_expr
13
2597
comparison
14
2597
shift_expr
29
2597
None
15
2597
power
43
2597
+
19
2597
small_stmt
1677
2597
xor_expr
17
2597
arith_expr
18
2597
[
32
2597
simple_stmt
2491
2597
atom
22
2597
NUMBER
26
2597
and_test
39
2597
NAME
27
2597
-
36
2597
False
28
2597
lambda
46
2597
test
47
2597
not_test
34
2597
{
35
2597
and_expr
33
2597
lambdef
45
2597
True
48
2597
NEWLINE
2493
2597
endsim
75
2597
flow_stmt
53
2597
pass
76
2597
break
54
2597
raise
55
2597
yield
56
2597
assert
57
2597
global_stmt
77
2597
continue_stmt
58
2597
del_stmt
78
2597
stat_stmt
59
2597
global
79
2597
return_stmt
60
2597
test_list
61
2597
continue
62
2597
yield_stmt
63
2597
return
68
2597
sim_stmt
65
2597
resetstats
66
2597
break_stmt
82
2597
del
67
2597
raise_stmt
69
2597
nonlocal
70
2597
pass_stmt
71
2597
begsim
83
2597
expr_stmt
72
2597
nonlocal_stmt
84
2597
assert_stmt
74
2598
conf
classdef -> class NAME ( ) : suite
2598
False
classdef -> class NAME ( ) : suite
2598
-
classdef -> class NAME ( ) : suite
2598
not
classdef -> class NAME ( ) : suite
2598
yield
classdef -> class NAME ( ) : suite
2598
NUMBER
classdef -> class NAME ( ) : suite
2598
if
classdef -> class NAME ( ) : suite
2598
endsim
classdef -> class NAME ( ) : suite
2598
+
classdef -> class NAME ( ) : suite
2598
(
classdef -> class NAME ( ) : suite
2598
nonlocal
classdef -> class NAME ( ) : suite
2598
assert
classdef -> class NAME ( ) : suite
2598
del
classdef -> class NAME ( ) : suite
2598
STRING
classdef -> class NAME ( ) : suite
2598
begsim
classdef -> class NAME ( ) : suite
2598
with
classdef -> class NAME ( ) : suite
2598
DEDENT
classdef -> class NAME ( ) : suite
2598
return
classdef -> class NAME ( ) : suite
2598
None
classdef -> class NAME ( ) : suite
2598
{
classdef -> class NAME ( ) : suite
2598
continue
classdef -> class NAME ( ) : suite
2598
def
classdef -> class NAME ( ) : suite
2598
for
classdef -> class NAME ( ) : suite
2598
~
classdef -> class NAME ( ) : suite
2598
lambda
classdef -> class NAME ( ) : suite
2598
[
classdef -> class NAME ( ) : suite
2598
global
classdef -> class NAME ( ) : suite
2598
while
classdef -> class NAME ( ) : suite
2598
try
classdef -> class NAME ( ) : suite
2598
break
classdef -> class NAME ( ) : suite
2598
class
classdef -> class NAME ( ) : suite
2598
resetstats
classdef -> class NAME ( ) : suite
2598
NAME
classdef -> class NAME ( ) : suite
2598
pass
classdef -> class NAME ( ) : suite
2598
raise
classdef -> class NAME ( ) : suite
2598
True
classdef -> class NAME ( ) : suite
2598
@
classdef -> class NAME ( ) : suite
2599
def
funcdef -> def NAME ( ) : suite
2599
conf
funcdef -> def NAME ( ) : suite
2599
(
funcdef -> def NAME ( ) : suite
2599
endsim
funcdef -> def NAME ( ) : suite
2599
resetstats
funcdef -> def NAME ( ) : suite
2599
try
funcdef -> def NAME ( ) : suite
2599
{
funcdef -> def NAME ( ) : suite
2599
raise
funcdef -> def NAME ( ) : suite
2599
class
funcdef -> def NAME ( ) : suite
2599
not
funcdef -> def NAME ( ) : suite
2599
DEDENT
funcdef -> def NAME ( ) : suite
2599
with
funcdef -> def NAME ( ) : suite
2599
[
funcdef -> def NAME ( ) : suite
2599
continue
funcdef -> def NAME ( ) : suite
2599
global
funcdef -> def NAME ( ) : suite
2599
-
funcdef -> def NAME ( ) : suite
2599
yield
funcdef -> def NAME ( ) : suite
2599
for
funcdef -> def NAME ( ) : suite
2599
@
funcdef -> def NAME ( ) : suite
2599
if
funcdef -> def NAME ( ) : suite
2599
break
funcdef -> def NAME ( ) : suite
2599
NAME
funcdef -> def NAME ( ) : suite
2599
assert
funcdef -> def NAME ( ) : suite
2599
begsim
funcdef -> def NAME ( ) : suite
2599
return
funcdef -> def NAME ( ) : suite
2599
None
funcdef -> def NAME ( ) : suite
2599
True
funcdef -> def NAME ( ) : suite
2599
STRING
funcdef -> def NAME ( ) : suite
2599
while
funcdef -> def NAME ( ) : suite
2599
pass
funcdef -> def NAME ( ) : suite
2599
del
funcdef -> def NAME ( ) : suite
2599
False
funcdef -> def NAME ( ) : suite
2599
+
funcdef -> def NAME ( ) : suite
2599
NUMBER
funcdef -> def NAME ( ) : suite
2599
~
funcdef -> def NAME ( ) : suite
2599
lambda
funcdef -> def NAME ( ) : suite
2599
nonlocal
funcdef -> def NAME ( ) : suite
2600
expr
5
2600
factor
1
2600
(
3
2600
STRING
4
2600
term
6
2600
not
8
2600
or_test
10
2600
~
12
2600
atom_expr
13
2600
comparison
14
2600
shift_expr
29
2600
None
15
2600
power
43
2600
+
19
2600
small_stmt
1677
2600
xor_expr
17
2600
arith_expr
18
2600
[
32
2600
simple_stmt
2491
2600
atom
22
2600
NUMBER
26
2600
and_test
39
2600
NAME
27
2600
-
36
2600
False
28
2600
lambda
46
2600
test
47
2600
not_test
34
2600
{
35
2600
suite
2623
2600
and_expr
33
2600
lambdef
45
2600
True
48
2600
NEWLINE
2493
2600
endsim
75
2600
flow_stmt
53
2600
pass
76
2600
break
54
2600
raise
55
2600
yield
56
2600
assert
57
2600
global_stmt
77
2600
continue_stmt
58
2600
del_stmt
78
2600
stat_stmt
59
2600
global
79
2600
return_stmt
60
2600
test_list
61
2600
continue
62
2600
yield_stmt
63
2600
return
68
2600
sim_stmt
65
2600
resetstats
66
2600
break_stmt
82
2600
del
67
2600
raise_stmt
69
2600
nonlocal
70
2600
pass_stmt
71
2600
begsim
83
2600
expr_stmt
72
2600
nonlocal_stmt
84
2600
assert_stmt
74
2601
expr
5
2601
factor
1
2601
(
3
2601
STRING
4
2601
term
6
2601
not
8
2601
suite
2624
2601
or_test
10
2601
~
12
2601
atom_expr
13
2601
comparison
14
2601
shift_expr
29
2601
None
15
2601
power
43
2601
+
19
2601
small_stmt
1677
2601
xor_expr
17
2601
arith_expr
18
2601
[
32
2601
simple_stmt
2491
2601
atom
22
2601
NUMBER
26
2601
and_test
39
2601
NAME
27
2601
-
36
2601
False
28
2601
lambda
46
2601
test
47
2601
not_test
34
2601
{
35
2601
and_expr
33
2601
lambdef
45
2601
True
48
2601
NEWLINE
2493
2601
endsim
75
2601
flow_stmt
53
2601
pass
76
2601
break
54
2601
raise
55
2601
yield
56
2601
assert
57
2601
global_stmt
77
2601
continue_stmt
58
2601
del_stmt
78
2601
stat_stmt
59
2601
global
79
2601
return_stmt
60
2601
test_list
61
2601
continue
62
2601
yield_stmt
63
2601
return
68
2601
sim_stmt
65
2601
resetstats
66
2601
break_stmt
82
2601
del
67
2601
raise_stmt
69
2601
nonlocal
70
2601
pass_stmt
71
2601
begsim
83
2601
expr_stmt
72
2601
nonlocal_stmt
84
2601
assert_stmt
74
2602
expr
5
2602
factor
1
2602
(
3
2602
STRING
4
2602
term
6
2602
not
8
2602
or_test
10
2602
~
12
2602
atom_expr
13
2602
comparison
14
2602
shift_expr
29
2602
None
15
2602
power
43
2602
+
19
2602
small_stmt
2625
2602
xor_expr
17
2602
arith_expr
18
2602
[
32
2602
simple_stmt
2626
2602
atom
22
2602
NUMBER
26
2602
suite
2627
2602
and_test
39
2602
NAME
27
2602
-
36
2602
False
28
2602
lambda
46
2602
test
47
2602
not_test
34
2602
{
35
2602
and_expr
33
2602
lambdef
45
2602
True
48
2602
NEWLINE
2628
2602
endsim
75
2602
flow_stmt
53
2602
pass
76
2602
break
54
2602
raise
55
2602
yield
56
2602
assert
57
2602
global_stmt
77
2602
continue_stmt
58
2602
del_stmt
78
2602
stat_stmt
59
2602
global
79
2602
return_stmt
60
2602
test_list
61
2602
continue
62
2602
yield_stmt
63
2602
return
68
2602
sim_stmt
65
2602
resetstats
66
2602
break_stmt
82
2602
del
67
2602
raise_stmt
69
2602
nonlocal
70
2602
pass_stmt
71
2602
begsim
83
2602
expr_stmt
72
2602
nonlocal_stmt
84
2602
assert_stmt
74
2603
NAME
2629
2604
expr
5
2604
factor
1
2604
(
3
2604
STRING
4
2604
term
6
2604
suite
2630
2604
not
8
2604
or_test
10
2604
~
12
2604
atom_expr
13
2604
comparison
14
2604
shift_expr
29
2604
None
15
2604
power
43
2604
+
19
2604
small_stmt
2605
2604
xor_expr
17
2604
arith_expr
18
2604
[
32
2604
simple_stmt
2606
2604
atom
22
2604
NUMBER
26
2604
and_test
39
2604
NAME
27
2604
-
36
2604
False
28
2604
lambda
46
2604
test
47
2604
NEWLINE
2607
2604
not_test
34
2604
{
35
2604
and_expr
33
2604
lambdef
45
2604
True
48
2604
endsim
75
2604
flow_stmt
53
2604
pass
76
2604
break
54
2604
raise
55
2604
yield
56
2604
assert
57
2604
global_stmt
77
2604
continue_stmt
58
2604
del_stmt
78
2604
stat_stmt
59
2604
global
79
2604
return_stmt
60
2604
test_list
61
2604
continue
62
2604
yield_stmt
63
2604
return
68
2604
sim_stmt
65
2604
resetstats
66
2604
break_stmt
82
2604
del
67
2604
raise_stmt
69
2604
nonlocal
70
2604
pass_stmt
71
2604
begsim
83
2604
expr_stmt
72
2604
nonlocal_stmt
84
2604
assert_stmt
74
2605
NEWLINE
2631
2606
False
suite -> simple_stmt
2606
-
suite -> simple_stmt
2606
break
suite -> simple_stmt
2606
@
suite -> simple_stmt
2606
endsim
suite -> simple_stmt
2606
+
suite -> simple_stmt
2606
STRING
suite -> simple_stmt
2606
finally
suite -> simple_stmt
2606
if
suite -> simple_stmt
2606
else
suite -> simple_stmt
2606
return
suite -> simple_stmt
2606
~
suite -> simple_stmt
2606
for
suite -> simple_stmt
2606
pass
suite -> simple_stmt
2606
with
suite -> simple_stmt
2606
while
suite -> simple_stmt
2606
NAME
suite -> simple_stmt
2606
del
suite -> simple_stmt
2606
(
suite -> simple_stmt
2606
class
suite -> simple_stmt
2606
[
suite -> simple_stmt
2606
resetstats
suite -> simple_stmt
2606
def
suite -> simple_stmt
2606
continue
suite -> simple_stmt
2606
DEDENT
suite -> simple_stmt
2606
begsim
suite -> simple_stmt
2606
raise
suite -> simple_stmt
2606
yield
suite -> simple_stmt
2606
nonlocal
suite -> simple_stmt
2606
except
suite -> simple_stmt
2606
None
suite -> simple_stmt
2606
not
suite -> simple_stmt
2606
{
suite -> simple_stmt
2606
lambda
suite -> simple_stmt
2606
NUMBER
suite -> simple_stmt
2606
try
suite -> simple_stmt
2606
assert
suite -> simple_stmt
2606
global
suite -> simple_stmt
2606
True
suite -> simple_stmt
2606
conf
suite -> simple_stmt
2607
INDENT
2632
2608
except_clause
2633
2608
maybe_except_clause
2634
2608
@
maybe_except_clause -> 
2608
except
2499
2608
pass
maybe_except_clause -> 
2608
if
maybe_except_clause -> 
2608
NUMBER
maybe_except_clause -> 
2608
class
maybe_except_clause -> 
2608
del
maybe_except_clause -> 
2608
raise
maybe_except_clause -> 
2608
conf
maybe_except_clause -> 
2608
for
maybe_except_clause -> 
2608
assert
maybe_except_clause -> 
2608
STRING
maybe_except_clause -> 
2608
[
maybe_except_clause -> 
2608
None
maybe_except_clause -> 
2608
return
maybe_except_clause -> 
2608
not
maybe_except_clause -> 
2608
yield
maybe_except_clause -> 
2608
nonlocal
maybe_except_clause -> 
2608
-
maybe_except_clause -> 
2608
try
maybe_except_clause -> 
2608
while
maybe_except_clause -> 
2608
begsim
maybe_except_clause -> 
2608
lambda
maybe_except_clause -> 
2608
(
maybe_except_clause -> 
2608
~
maybe_except_clause -> 
2608
global
maybe_except_clause -> 
2608
NAME
maybe_except_clause -> 
2608
else
maybe_except_clause -> 
2608
def
maybe_except_clause -> 
2608
resetstats
maybe_except_clause -> 
2608
False
maybe_except_clause -> 
2608
break
maybe_except_clause -> 
2608
with
maybe_except_clause -> 
2608
DEDENT
maybe_except_clause -> 
2608
+
maybe_except_clause -> 
2608
endsim
maybe_except_clause -> 
2608
continue
maybe_except_clause -> 
2608
{
maybe_except_clause -> 
2608
True
maybe_except_clause -> 
2608
finally
maybe_except_clause -> 
2609
else
2635
2609
(
for_stmt -> for expr_list in test_list : suite
2609
None
for_stmt -> for expr_list in test_list : suite
2609
del
for_stmt -> for expr_list in test_list : suite
2609
[
for_stmt -> for expr_list in test_list : suite
2609
not
for_stmt -> for expr_list in test_list : suite
2609
@
for_stmt -> for expr_list in test_list : suite
2609
conf
for_stmt -> for expr_list in test_list : suite
2609
assert
for_stmt -> for expr_list in test_list : suite
2609
endsim
for_stmt -> for expr_list in test_list : suite
2609
~
for_stmt -> for expr_list in test_list : suite
2609
+
for_stmt -> for expr_list in test_list : suite
2609
with
for_stmt -> for expr_list in test_list : suite
2609
continue
for_stmt -> for expr_list in test_list : suite
2609
global
for_stmt -> for expr_list in test_list : suite
2609
NUMBER
for_stmt -> for expr_list in test_list : suite
2609
nonlocal
for_stmt -> for expr_list in test_list : suite
2609
if
for_stmt -> for expr_list in test_list : suite
2609
{
for_stmt -> for expr_list in test_list : suite
2609
True
for_stmt -> for expr_list in test_list : suite
2609
return
for_stmt -> for expr_list in test_list : suite
2609
False
for_stmt -> for expr_list in test_list : suite
2609
class
for_stmt -> for expr_list in test_list : suite
2609
begsim
for_stmt -> for expr_list in test_list : suite
2609
yield
for_stmt -> for expr_list in test_list : suite
2609
def
for_stmt -> for expr_list in test_list : suite
2609
resetstats
for_stmt -> for expr_list in test_list : suite
2609
STRING
for_stmt -> for expr_list in test_list : suite
2609
lambda
for_stmt -> for expr_list in test_list : suite
2609
break
for_stmt -> for expr_list in test_list : suite
2609
for
for_stmt -> for expr_list in test_list : suite
2609
while
for_stmt -> for expr_list in test_list : suite
2609
raise
for_stmt -> for expr_list in test_list : suite
2609
pass
for_stmt -> for expr_list in test_list : suite
2609
-
for_stmt -> for expr_list in test_list : suite
2609
NAME
for_stmt -> for expr_list in test_list : suite
2609
DEDENT
for_stmt -> for expr_list in test_list : suite
2609
try
for_stmt -> for expr_list in test_list : suite
2610
if
lambdef_nocond -> lambda : test_nocond
2610
for
lambdef_nocond -> lambda : test_nocond
2610
]
lambdef_nocond -> lambda : test_nocond
2611
~
2057
2611
factor
2058
2611
STRING
2059
2611
shift_expr
2060
2611
term
2061
2611
atom_expr
2062
2611
NUMBER
2063
2611
and_expr
2064
2611
{
2065
2611
[
2066
2611
-
2067
2611
None
2068
2611
(
2069
2611
arith_expr
2070
2611
atom
2071
2611
or_test
2524
2611
+
2072
2611
NAME
2073
2611
power
2074
2611
True
2075
2611
comparison
2076
2611
xor_expr
2077
2611
False
2078
2611
lambdef_nocond
2525
2611
not_test
2079
2611
and_test
2080
2611
lambda
2526
2611
not
2082
2611
expr
2083
2611
test_nocond
2636
2612
if
lambdef_nocond -> lambda varargslist : test_nocond
2612
)
lambdef_nocond -> lambda varargslist : test_nocond
2612
for
lambdef_nocond -> lambda varargslist : test_nocond
2613
if
lambdef_nocond -> lambda : test_nocond
2613
for
lambdef_nocond -> lambda : test_nocond
2613
,
lambdef_nocond -> lambda : test_nocond
2613
)
lambdef_nocond -> lambda : test_nocond
2614
~
92
2614
factor
93
2614
STRING
94
2614
shift_expr
95
2614
arith_expr
96
2614
term
97
2614
NUMBER
98
2614
and_expr
99
2614
{
100
2614
atom_expr
101
2614
[
102
2614
-
103
2614
None
105
2614
(
106
2614
atom
107
2614
or_test
2543
2614
+
109
2614
NAME
110
2614
power
111
2614
True
113
2614
comparison
114
2614
xor_expr
115
2614
False
117
2614
lambdef_nocond
2545
2614
not_test
118
2614
lambda
2546
2614
and_test
122
2614
not
123
2614
test_nocond
2637
2614
expr
124
2615
-
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
pass
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
DEDENT
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
def
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
endsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
None
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
begsim
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
raise
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
continue
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
try
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
@
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
(
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
+
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
STRING
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
~
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
[
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
return
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
while
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
lambda
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
True
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
if
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
del
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
resetstats
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
nonlocal
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
NUMBER
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
class
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
global
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
conf
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
for
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
assert
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
not
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
False
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
{
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
yield
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
break
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
NAME
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2615
with
confdef -> conf NAME : NEWLINE INDENT confbody DEDENT
2616
class
while_stmt -> while test : suite else : suite
2616
NAME
while_stmt -> while test : suite else : suite
2616
try
while_stmt -> while test : suite else : suite
2616
with
while_stmt -> while test : suite else : suite
2616
break
while_stmt -> while test : suite else : suite
2616
NUMBER
while_stmt -> while test : suite else : suite
2616
pass
while_stmt -> while test : suite else : suite
2616
False
while_stmt -> while test : suite else : suite
2616
del
while_stmt -> while test : suite else : suite
2616
nonlocal
while_stmt -> while test : suite else : suite
2616
return
while_stmt -> while test : suite else : suite
2616
STRING
while_stmt -> while test : suite else : suite
2616
while
while_stmt -> while test : suite else : suite
2616
[
while_stmt -> while test : suite else : suite
2616
for
while_stmt -> while test : suite else : suite
2616
if
while_stmt -> while test : suite else : suite
2616
-
while_stmt -> while test : suite else : suite
2616
global
while_stmt -> while test : suite else : suite
2616
lambda
while_stmt -> while test : suite else : suite
2616
yield
while_stmt -> while test : suite else : suite
2616
raise
while_stmt -> while test : suite else : suite
2616
None
while_stmt -> while test : suite else : suite
2616
DEDENT
while_stmt -> while test : suite else : suite
2616
True
while_stmt -> while test : suite else : suite
2616
resetstats
while_stmt -> while test : suite else : suite
2616
assert
while_stmt -> while test : suite else : suite
2616
+
while_stmt -> while test : suite else : suite
2616
def
while_stmt -> while test : suite else : suite
2616
conf
while_stmt -> while test : suite else : suite
2616
(
while_stmt -> while test : suite else : suite
2616
continue
while_stmt -> while test : suite else : suite
2616
not
while_stmt -> while test : suite else : suite
2616
endsim
while_stmt -> while test : suite else : suite
2616
begsim
while_stmt -> while test : suite else : suite
2616
@
while_stmt -> while test : suite else : suite
2616
{
while_stmt -> while test : suite else : suite
2616
~
while_stmt -> while test : suite else : suite
2617
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2617
return
suite -> NEWLINE INDENT stmt_list DEDENT
2617
if
suite -> NEWLINE INDENT stmt_list DEDENT
2617
not
suite -> NEWLINE INDENT stmt_list DEDENT
2617
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2617
{
suite -> NEWLINE INDENT stmt_list DEDENT
2617
break
suite -> NEWLINE INDENT stmt_list DEDENT
2617
False
suite -> NEWLINE INDENT stmt_list DEDENT
2617
+
suite -> NEWLINE INDENT stmt_list DEDENT
2617
class
suite -> NEWLINE INDENT stmt_list DEDENT
2617
with
suite -> NEWLINE INDENT stmt_list DEDENT
2617
(
suite -> NEWLINE INDENT stmt_list DEDENT
2617
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2617
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2617
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2617
global
suite -> NEWLINE INDENT stmt_list DEDENT
2617
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2617
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2617
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2617
try
suite -> NEWLINE INDENT stmt_list DEDENT
2617
while
suite -> NEWLINE INDENT stmt_list DEDENT
2617
del
suite -> NEWLINE INDENT stmt_list DEDENT
2617
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2617
True
suite -> NEWLINE INDENT stmt_list DEDENT
2617
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2617
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2617
for
suite -> NEWLINE INDENT stmt_list DEDENT
2617
~
suite -> NEWLINE INDENT stmt_list DEDENT
2617
else
suite -> NEWLINE INDENT stmt_list DEDENT
2617
-
suite -> NEWLINE INDENT stmt_list DEDENT
2617
@
suite -> NEWLINE INDENT stmt_list DEDENT
2617
None
suite -> NEWLINE INDENT stmt_list DEDENT
2617
[
suite -> NEWLINE INDENT stmt_list DEDENT
2617
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2617
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2617
def
suite -> NEWLINE INDENT stmt_list DEDENT
2617
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2617
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2618
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2618
return
suite -> NEWLINE INDENT stmt_list DEDENT
2618
if
suite -> NEWLINE INDENT stmt_list DEDENT
2618
not
suite -> NEWLINE INDENT stmt_list DEDENT
2618
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2618
{
suite -> NEWLINE INDENT stmt_list DEDENT
2618
break
suite -> NEWLINE INDENT stmt_list DEDENT
2618
False
suite -> NEWLINE INDENT stmt_list DEDENT
2618
+
suite -> NEWLINE INDENT stmt_list DEDENT
2618
class
suite -> NEWLINE INDENT stmt_list DEDENT
2618
with
suite -> NEWLINE INDENT stmt_list DEDENT
2618
(
suite -> NEWLINE INDENT stmt_list DEDENT
2618
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2618
elif
suite -> NEWLINE INDENT stmt_list DEDENT
2618
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2618
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2618
global
suite -> NEWLINE INDENT stmt_list DEDENT
2618
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2618
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2618
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2618
try
suite -> NEWLINE INDENT stmt_list DEDENT
2618
while
suite -> NEWLINE INDENT stmt_list DEDENT
2618
del
suite -> NEWLINE INDENT stmt_list DEDENT
2618
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2618
True
suite -> NEWLINE INDENT stmt_list DEDENT
2618
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2618
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2618
for
suite -> NEWLINE INDENT stmt_list DEDENT
2618
~
suite -> NEWLINE INDENT stmt_list DEDENT
2618
else
suite -> NEWLINE INDENT stmt_list DEDENT
2618
-
suite -> NEWLINE INDENT stmt_list DEDENT
2618
@
suite -> NEWLINE INDENT stmt_list DEDENT
2618
None
suite -> NEWLINE INDENT stmt_list DEDENT
2618
[
suite -> NEWLINE INDENT stmt_list DEDENT
2618
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2618
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2618
def
suite -> NEWLINE INDENT stmt_list DEDENT
2618
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2618
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2619
expr
5
2619
factor
1
2619
(
3
2619
STRING
4
2619
term
6
2619
not
8
2619
or_test
10
2619
~
12
2619
atom_expr
13
2619
comparison
14
2619
shift_expr
29
2619
None
15
2619
power
43
2619
+
19
2619
small_stmt
1677
2619
xor_expr
17
2619
arith_expr
18
2619
[
32
2619
simple_stmt
2491
2619
atom
22
2619
NUMBER
26
2619
and_test
39
2619
NAME
27
2619
-
36
2619
False
28
2619
lambda
46
2619
test
47
2619
not_test
34
2619
{
35
2619
and_expr
33
2619
lambdef
45
2619
True
48
2619
suite
2638
2619
NEWLINE
2493
2619
endsim
75
2619
flow_stmt
53
2619
pass
76
2619
break
54
2619
raise
55
2619
yield
56
2619
assert
57
2619
global_stmt
77
2619
continue_stmt
58
2619
del_stmt
78
2619
stat_stmt
59
2619
global
79
2619
return_stmt
60
2619
test_list
61
2619
continue
62
2619
yield_stmt
63
2619
return
68
2619
sim_stmt
65
2619
resetstats
66
2619
break_stmt
82
2619
del
67
2619
raise_stmt
69
2619
nonlocal
70
2619
pass_stmt
71
2619
begsim
83
2619
expr_stmt
72
2619
nonlocal_stmt
84
2619
assert_stmt
74
2620
expr
5
2620
factor
1
2620
(
3
2620
STRING
4
2620
term
6
2620
not
8
2620
or_test
10
2620
~
12
2620
atom_expr
13
2620
comparison
14
2620
shift_expr
29
2620
None
15
2620
power
43
2620
+
19
2620
small_stmt
2487
2620
xor_expr
17
2620
arith_expr
18
2620
[
32
2620
simple_stmt
2488
2620
atom
22
2620
NUMBER
26
2620
and_test
39
2620
suite
2639
2620
NAME
27
2620
-
36
2620
False
28
2620
lambda
46
2620
test
47
2620
NEWLINE
2489
2620
not_test
34
2620
{
35
2620
and_expr
33
2620
lambdef
45
2620
True
48
2620
endsim
75
2620
flow_stmt
53
2620
pass
76
2620
break
54
2620
raise
55
2620
yield
56
2620
assert
57
2620
global_stmt
77
2620
continue_stmt
58
2620
del_stmt
78
2620
stat_stmt
59
2620
global
79
2620
return_stmt
60
2620
test_list
61
2620
continue
62
2620
yield_stmt
63
2620
return
68
2620
sim_stmt
65
2620
resetstats
66
2620
break_stmt
82
2620
del
67
2620
raise_stmt
69
2620
nonlocal
70
2620
pass_stmt
71
2620
begsim
83
2620
expr_stmt
72
2620
nonlocal_stmt
84
2620
assert_stmt
74
2621
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2621
return
suite -> NEWLINE INDENT stmt_list DEDENT
2621
if
suite -> NEWLINE INDENT stmt_list DEDENT
2621
not
suite -> NEWLINE INDENT stmt_list DEDENT
2621
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2621
{
suite -> NEWLINE INDENT stmt_list DEDENT
2621
break
suite -> NEWLINE INDENT stmt_list DEDENT
2621
False
suite -> NEWLINE INDENT stmt_list DEDENT
2621
+
suite -> NEWLINE INDENT stmt_list DEDENT
2621
class
suite -> NEWLINE INDENT stmt_list DEDENT
2621
with
suite -> NEWLINE INDENT stmt_list DEDENT
2621
(
suite -> NEWLINE INDENT stmt_list DEDENT
2621
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2621
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2621
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2621
global
suite -> NEWLINE INDENT stmt_list DEDENT
2621
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2621
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2621
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2621
try
suite -> NEWLINE INDENT stmt_list DEDENT
2621
while
suite -> NEWLINE INDENT stmt_list DEDENT
2621
del
suite -> NEWLINE INDENT stmt_list DEDENT
2621
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2621
True
suite -> NEWLINE INDENT stmt_list DEDENT
2621
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2621
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2621
for
suite -> NEWLINE INDENT stmt_list DEDENT
2621
~
suite -> NEWLINE INDENT stmt_list DEDENT
2621
-
suite -> NEWLINE INDENT stmt_list DEDENT
2621
@
suite -> NEWLINE INDENT stmt_list DEDENT
2621
None
suite -> NEWLINE INDENT stmt_list DEDENT
2621
[
suite -> NEWLINE INDENT stmt_list DEDENT
2621
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2621
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2621
def
suite -> NEWLINE INDENT stmt_list DEDENT
2621
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2621
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2622
break
classdef -> class NAME ( arglist ) : suite
2622
for
classdef -> class NAME ( arglist ) : suite
2622
conf
classdef -> class NAME ( arglist ) : suite
2622
assert
classdef -> class NAME ( arglist ) : suite
2622
None
classdef -> class NAME ( arglist ) : suite
2622
lambda
classdef -> class NAME ( arglist ) : suite
2622
+
classdef -> class NAME ( arglist ) : suite
2622
raise
classdef -> class NAME ( arglist ) : suite
2622
STRING
classdef -> class NAME ( arglist ) : suite
2622
with
classdef -> class NAME ( arglist ) : suite
2622
def
classdef -> class NAME ( arglist ) : suite
2622
True
classdef -> class NAME ( arglist ) : suite
2622
False
classdef -> class NAME ( arglist ) : suite
2622
del
classdef -> class NAME ( arglist ) : suite
2622
not
classdef -> class NAME ( arglist ) : suite
2622
NUMBER
classdef -> class NAME ( arglist ) : suite
2622
global
classdef -> class NAME ( arglist ) : suite
2622
nonlocal
classdef -> class NAME ( arglist ) : suite
2622
return
classdef -> class NAME ( arglist ) : suite
2622
resetstats
classdef -> class NAME ( arglist ) : suite
2622
[
classdef -> class NAME ( arglist ) : suite
2622
continue
classdef -> class NAME ( arglist ) : suite
2622
-
classdef -> class NAME ( arglist ) : suite
2622
NAME
classdef -> class NAME ( arglist ) : suite
2622
~
classdef -> class NAME ( arglist ) : suite
2622
endsim
classdef -> class NAME ( arglist ) : suite
2622
begsim
classdef -> class NAME ( arglist ) : suite
2622
pass
classdef -> class NAME ( arglist ) : suite
2622
yield
classdef -> class NAME ( arglist ) : suite
2622
class
classdef -> class NAME ( arglist ) : suite
2622
if
classdef -> class NAME ( arglist ) : suite
2622
{
classdef -> class NAME ( arglist ) : suite
2622
while
classdef -> class NAME ( arglist ) : suite
2622
DEDENT
classdef -> class NAME ( arglist ) : suite
2622
try
classdef -> class NAME ( arglist ) : suite
2622
(
classdef -> class NAME ( arglist ) : suite
2622
@
classdef -> class NAME ( arglist ) : suite
2623
while
funcdef -> def NAME ( parameters ) : suite
2623
for
funcdef -> def NAME ( parameters ) : suite
2623
begsim
funcdef -> def NAME ( parameters ) : suite
2623
False
funcdef -> def NAME ( parameters ) : suite
2623
resetstats
funcdef -> def NAME ( parameters ) : suite
2623
-
funcdef -> def NAME ( parameters ) : suite
2623
None
funcdef -> def NAME ( parameters ) : suite
2623
endsim
funcdef -> def NAME ( parameters ) : suite
2623
(
funcdef -> def NAME ( parameters ) : suite
2623
DEDENT
funcdef -> def NAME ( parameters ) : suite
2623
not
funcdef -> def NAME ( parameters ) : suite
2623
[
funcdef -> def NAME ( parameters ) : suite
2623
{
funcdef -> def NAME ( parameters ) : suite
2623
global
funcdef -> def NAME ( parameters ) : suite
2623
continue
funcdef -> def NAME ( parameters ) : suite
2623
del
funcdef -> def NAME ( parameters ) : suite
2623
~
funcdef -> def NAME ( parameters ) : suite
2623
return
funcdef -> def NAME ( parameters ) : suite
2623
nonlocal
funcdef -> def NAME ( parameters ) : suite
2623
pass
funcdef -> def NAME ( parameters ) : suite
2623
lambda
funcdef -> def NAME ( parameters ) : suite
2623
assert
funcdef -> def NAME ( parameters ) : suite
2623
NAME
funcdef -> def NAME ( parameters ) : suite
2623
break
funcdef -> def NAME ( parameters ) : suite
2623
try
funcdef -> def NAME ( parameters ) : suite
2623
STRING
funcdef -> def NAME ( parameters ) : suite
2623
yield
funcdef -> def NAME ( parameters ) : suite
2623
def
funcdef -> def NAME ( parameters ) : suite
2623
if
funcdef -> def NAME ( parameters ) : suite
2623
@
funcdef -> def NAME ( parameters ) : suite
2623
raise
funcdef -> def NAME ( parameters ) : suite
2623
conf
funcdef -> def NAME ( parameters ) : suite
2623
class
funcdef -> def NAME ( parameters ) : suite
2623
with
funcdef -> def NAME ( parameters ) : suite
2623
+
funcdef -> def NAME ( parameters ) : suite
2623
NUMBER
funcdef -> def NAME ( parameters ) : suite
2623
True
funcdef -> def NAME ( parameters ) : suite
2624
[
try_stmt -> try : suite except_clause finally : suite
2624
yield
try_stmt -> try : suite except_clause finally : suite
2624
return
try_stmt -> try : suite except_clause finally : suite
2624
~
try_stmt -> try : suite except_clause finally : suite
2624
raise
try_stmt -> try : suite except_clause finally : suite
2624
False
try_stmt -> try : suite except_clause finally : suite
2624
global
try_stmt -> try : suite except_clause finally : suite
2624
begsim
try_stmt -> try : suite except_clause finally : suite
2624
class
try_stmt -> try : suite except_clause finally : suite
2624
endsim
try_stmt -> try : suite except_clause finally : suite
2624
lambda
try_stmt -> try : suite except_clause finally : suite
2624
-
try_stmt -> try : suite except_clause finally : suite
2624
del
try_stmt -> try : suite except_clause finally : suite
2624
True
try_stmt -> try : suite except_clause finally : suite
2624
@
try_stmt -> try : suite except_clause finally : suite
2624
{
try_stmt -> try : suite except_clause finally : suite
2624
with
try_stmt -> try : suite except_clause finally : suite
2624
pass
try_stmt -> try : suite except_clause finally : suite
2624
NAME
try_stmt -> try : suite except_clause finally : suite
2624
conf
try_stmt -> try : suite except_clause finally : suite
2624
STRING
try_stmt -> try : suite except_clause finally : suite
2624
for
try_stmt -> try : suite except_clause finally : suite
2624
DEDENT
try_stmt -> try : suite except_clause finally : suite
2624
while
try_stmt -> try : suite except_clause finally : suite
2624
+
try_stmt -> try : suite except_clause finally : suite
2624
(
try_stmt -> try : suite except_clause finally : suite
2624
nonlocal
try_stmt -> try : suite except_clause finally : suite
2624
resetstats
try_stmt -> try : suite except_clause finally : suite
2624
def
try_stmt -> try : suite except_clause finally : suite
2624
break
try_stmt -> try : suite except_clause finally : suite
2624
not
try_stmt -> try : suite except_clause finally : suite
2624
continue
try_stmt -> try : suite except_clause finally : suite
2624
try
try_stmt -> try : suite except_clause finally : suite
2624
assert
try_stmt -> try : suite except_clause finally : suite
2624
None
try_stmt -> try : suite except_clause finally : suite
2624
if
try_stmt -> try : suite except_clause finally : suite
2624
NUMBER
try_stmt -> try : suite except_clause finally : suite
2625
NEWLINE
2640
2626
False
suite -> simple_stmt
2626
-
suite -> simple_stmt
2626
break
suite -> simple_stmt
2626
@
suite -> simple_stmt
2626
endsim
suite -> simple_stmt
2626
+
suite -> simple_stmt
2626
STRING
suite -> simple_stmt
2626
finally
suite -> simple_stmt
2626
if
suite -> simple_stmt
2626
return
suite -> simple_stmt
2626
~
suite -> simple_stmt
2626
for
suite -> simple_stmt
2626
pass
suite -> simple_stmt
2626
with
suite -> simple_stmt
2626
while
suite -> simple_stmt
2626
NAME
suite -> simple_stmt
2626
del
suite -> simple_stmt
2626
(
suite -> simple_stmt
2626
class
suite -> simple_stmt
2626
[
suite -> simple_stmt
2626
resetstats
suite -> simple_stmt
2626
def
suite -> simple_stmt
2626
continue
suite -> simple_stmt
2626
DEDENT
suite -> simple_stmt
2626
begsim
suite -> simple_stmt
2626
raise
suite -> simple_stmt
2626
yield
suite -> simple_stmt
2626
nonlocal
suite -> simple_stmt
2626
None
suite -> simple_stmt
2626
not
suite -> simple_stmt
2626
{
suite -> simple_stmt
2626
lambda
suite -> simple_stmt
2626
NUMBER
suite -> simple_stmt
2626
try
suite -> simple_stmt
2626
assert
suite -> simple_stmt
2626
global
suite -> simple_stmt
2626
True
suite -> simple_stmt
2626
conf
suite -> simple_stmt
2627
del
try_stmt -> try : suite except_clause else : suite
2627
DEDENT
try_stmt -> try : suite except_clause else : suite
2627
+
try_stmt -> try : suite except_clause else : suite
2627
finally
2641
2627
True
try_stmt -> try : suite except_clause else : suite
2627
nonlocal
try_stmt -> try : suite except_clause else : suite
2627
-
try_stmt -> try : suite except_clause else : suite
2627
break
try_stmt -> try : suite except_clause else : suite
2627
class
try_stmt -> try : suite except_clause else : suite
2627
lambda
try_stmt -> try : suite except_clause else : suite
2627
@
try_stmt -> try : suite except_clause else : suite
2627
(
try_stmt -> try : suite except_clause else : suite
2627
{
try_stmt -> try : suite except_clause else : suite
2627
False
try_stmt -> try : suite except_clause else : suite
2627
conf
try_stmt -> try : suite except_clause else : suite
2627
with
try_stmt -> try : suite except_clause else : suite
2627
raise
try_stmt -> try : suite except_clause else : suite
2627
continue
try_stmt -> try : suite except_clause else : suite
2627
return
try_stmt -> try : suite except_clause else : suite
2627
endsim
try_stmt -> try : suite except_clause else : suite
2627
[
try_stmt -> try : suite except_clause else : suite
2627
global
try_stmt -> try : suite except_clause else : suite
2627
STRING
try_stmt -> try : suite except_clause else : suite
2627
assert
try_stmt -> try : suite except_clause else : suite
2627
~
try_stmt -> try : suite except_clause else : suite
2627
NAME
try_stmt -> try : suite except_clause else : suite
2627
NUMBER
try_stmt -> try : suite except_clause else : suite
2627
while
try_stmt -> try : suite except_clause else : suite
2627
yield
try_stmt -> try : suite except_clause else : suite
2627
def
try_stmt -> try : suite except_clause else : suite
2627
resetstats
try_stmt -> try : suite except_clause else : suite
2627
None
try_stmt -> try : suite except_clause else : suite
2627
for
try_stmt -> try : suite except_clause else : suite
2627
pass
try_stmt -> try : suite except_clause else : suite
2627
if
try_stmt -> try : suite except_clause else : suite
2627
try
try_stmt -> try : suite except_clause else : suite
2627
not
try_stmt -> try : suite except_clause else : suite
2627
begsim
try_stmt -> try : suite except_clause else : suite
2628
INDENT
2642
2629
:
2643
2630
except_clause
2633
2630
maybe_except_clause
2644
2630
except
2499
2630
@
maybe_except_clause -> 
2630
pass
maybe_except_clause -> 
2630
if
maybe_except_clause -> 
2630
NUMBER
maybe_except_clause -> 
2630
class
maybe_except_clause -> 
2630
del
maybe_except_clause -> 
2630
raise
maybe_except_clause -> 
2630
conf
maybe_except_clause -> 
2630
for
maybe_except_clause -> 
2630
assert
maybe_except_clause -> 
2630
STRING
maybe_except_clause -> 
2630
[
maybe_except_clause -> 
2630
None
maybe_except_clause -> 
2630
return
maybe_except_clause -> 
2630
not
maybe_except_clause -> 
2630
yield
maybe_except_clause -> 
2630
nonlocal
maybe_except_clause -> 
2630
-
maybe_except_clause -> 
2630
try
maybe_except_clause -> 
2630
while
maybe_except_clause -> 
2630
begsim
maybe_except_clause -> 
2630
lambda
maybe_except_clause -> 
2630
(
maybe_except_clause -> 
2630
~
maybe_except_clause -> 
2630
global
maybe_except_clause -> 
2630
NAME
maybe_except_clause -> 
2630
else
maybe_except_clause -> 
2630
def
maybe_except_clause -> 
2630
resetstats
maybe_except_clause -> 
2630
False
maybe_except_clause -> 
2630
break
maybe_except_clause -> 
2630
with
maybe_except_clause -> 
2630
DEDENT
maybe_except_clause -> 
2630
+
maybe_except_clause -> 
2630
endsim
maybe_except_clause -> 
2630
continue
maybe_except_clause -> 
2630
{
maybe_except_clause -> 
2630
True
maybe_except_clause -> 
2630
finally
maybe_except_clause -> 
2631
~
simple_stmt -> small_stmt NEWLINE
2631
begsim
simple_stmt -> small_stmt NEWLINE
2631
endsim
simple_stmt -> small_stmt NEWLINE
2631
if
simple_stmt -> small_stmt NEWLINE
2631
break
simple_stmt -> small_stmt NEWLINE
2631
False
simple_stmt -> small_stmt NEWLINE
2631
def
simple_stmt -> small_stmt NEWLINE
2631
STRING
simple_stmt -> small_stmt NEWLINE
2631
finally
simple_stmt -> small_stmt NEWLINE
2631
else
simple_stmt -> small_stmt NEWLINE
2631
assert
simple_stmt -> small_stmt NEWLINE
2631
lambda
simple_stmt -> small_stmt NEWLINE
2631
yield
simple_stmt -> small_stmt NEWLINE
2631
True
simple_stmt -> small_stmt NEWLINE
2631
+
simple_stmt -> small_stmt NEWLINE
2631
try
simple_stmt -> small_stmt NEWLINE
2631
for
simple_stmt -> small_stmt NEWLINE
2631
conf
simple_stmt -> small_stmt NEWLINE
2631
nonlocal
simple_stmt -> small_stmt NEWLINE
2631
continue
simple_stmt -> small_stmt NEWLINE
2631
-
simple_stmt -> small_stmt NEWLINE
2631
resetstats
simple_stmt -> small_stmt NEWLINE
2631
raise
simple_stmt -> small_stmt NEWLINE
2631
(
simple_stmt -> small_stmt NEWLINE
2631
None
simple_stmt -> small_stmt NEWLINE
2631
while
simple_stmt -> small_stmt NEWLINE
2631
not
simple_stmt -> small_stmt NEWLINE
2631
DEDENT
simple_stmt -> small_stmt NEWLINE
2631
except
simple_stmt -> small_stmt NEWLINE
2631
NAME
simple_stmt -> small_stmt NEWLINE
2631
del
simple_stmt -> small_stmt NEWLINE
2631
with
simple_stmt -> small_stmt NEWLINE
2631
global
simple_stmt -> small_stmt NEWLINE
2631
@
simple_stmt -> small_stmt NEWLINE
2631
class
simple_stmt -> small_stmt NEWLINE
2631
{
simple_stmt -> small_stmt NEWLINE
2631
NUMBER
simple_stmt -> small_stmt NEWLINE
2631
[
simple_stmt -> small_stmt NEWLINE
2631
pass
simple_stmt -> small_stmt NEWLINE
2631
return
simple_stmt -> small_stmt NEWLINE
2632
factor
1
2632
decorators
1661
2632
(
3
2632
STRING
4
2632
expr
5
2632
term
6
2632
conf
1662
2632
not
8
2632
while
1663
2632
or_test
10
2632
if
1664
2632
~
12
2632
atom_expr
13
2632
comparison
14
2632
None
15
2632
class
1665
2632
xor_expr
17
2632
arith_expr
18
2632
+
19
2632
stmt_list
2645
2632
confdef
1666
2632
decorated
1667
2632
atom
22
2632
try_stmt
1668
2632
def
1669
2632
compound_stmt
1670
2632
try
1671
2632
NUMBER
26
2632
NAME
27
2632
False
28
2632
shift_expr
29
2632
while_stmt
1672
2632
[
32
2632
and_expr
33
2632
not_test
34
2632
{
35
2632
-
36
2632
simple_stmt
1673
2632
for
1674
2632
and_test
39
2632
@
40
2632
with_stmt
1675
2632
funcdef
1676
2632
small_stmt
1677
2632
power
43
2632
classdef
1678
2632
lambdef
45
2632
lambda
46
2632
test
47
2632
True
48
2632
if_stmt
1679
2632
for_stmt
1680
2632
with
1681
2632
flow_stmt
53
2632
break
54
2632
raise
55
2632
yield
56
2632
assert
57
2632
continue_stmt
58
2632
stat_stmt
59
2632
return_stmt
60
2632
test_list
61
2632
stmt
1682
2632
continue
62
2632
yield_stmt
63
2632
decorator
64
2632
sim_stmt
65
2632
resetstats
66
2632
del
67
2632
return
68
2632
raise_stmt
69
2632
nonlocal
70
2632
pass_stmt
71
2632
expr_stmt
72
2632
assert_stmt
74
2632
endsim
75
2632
pass
76
2632
global_stmt
77
2632
del_stmt
78
2632
global
79
2632
break_stmt
82
2632
begsim
83
2632
nonlocal_stmt
84
2633
try
maybe_except_clause -> except_clause
2633
return
maybe_except_clause -> except_clause
2633
for
maybe_except_clause -> except_clause
2633
-
maybe_except_clause -> except_clause
2633
del
maybe_except_clause -> except_clause
2633
DEDENT
maybe_except_clause -> except_clause
2633
assert
maybe_except_clause -> except_clause
2633
None
maybe_except_clause -> except_clause
2633
conf
maybe_except_clause -> except_clause
2633
raise
maybe_except_clause -> except_clause
2633
(
maybe_except_clause -> except_clause
2633
True
maybe_except_clause -> except_clause
2633
nonlocal
maybe_except_clause -> except_clause
2633
else
maybe_except_clause -> except_clause
2633
def
maybe_except_clause -> except_clause
2633
STRING
maybe_except_clause -> except_clause
2633
+
maybe_except_clause -> except_clause
2633
[
maybe_except_clause -> except_clause
2633
yield
maybe_except_clause -> except_clause
2633
with
maybe_except_clause -> except_clause
2633
False
maybe_except_clause -> except_clause
2633
resetstats
maybe_except_clause -> except_clause
2633
while
maybe_except_clause -> except_clause
2633
global
maybe_except_clause -> except_clause
2633
not
maybe_except_clause -> except_clause
2633
begsim
maybe_except_clause -> except_clause
2633
lambda
maybe_except_clause -> except_clause
2633
@
maybe_except_clause -> except_clause
2633
NUMBER
maybe_except_clause -> except_clause
2633
NAME
maybe_except_clause -> except_clause
2633
{
maybe_except_clause -> except_clause
2633
~
maybe_except_clause -> except_clause
2633
finally
maybe_except_clause -> except_clause
2633
pass
maybe_except_clause -> except_clause
2633
endsim
maybe_except_clause -> except_clause
2633
continue
maybe_except_clause -> except_clause
2633
class
maybe_except_clause -> except_clause
2633
if
maybe_except_clause -> except_clause
2633
break
maybe_except_clause -> except_clause
2634
raise
except_clause -> except : suite maybe_except_clause
2634
finally
except_clause -> except : suite maybe_except_clause
2634
True
except_clause -> except : suite maybe_except_clause
2634
not
except_clause -> except : suite maybe_except_clause
2634
False
except_clause -> except : suite maybe_except_clause
2634
[
except_clause -> except : suite maybe_except_clause
2634
None
except_clause -> except : suite maybe_except_clause
2634
pass
except_clause -> except : suite maybe_except_clause
2634
del
except_clause -> except : suite maybe_except_clause
2634
nonlocal
except_clause -> except : suite maybe_except_clause
2634
begsim
except_clause -> except : suite maybe_except_clause
2634
@
except_clause -> except : suite maybe_except_clause
2634
try
except_clause -> except : suite maybe_except_clause
2634
STRING
except_clause -> except : suite maybe_except_clause
2634
global
except_clause -> except : suite maybe_except_clause
2634
NUMBER
except_clause -> except : suite maybe_except_clause
2634
lambda
except_clause -> except : suite maybe_except_clause
2634
while
except_clause -> except : suite maybe_except_clause
2634
conf
except_clause -> except : suite maybe_except_clause
2634
NAME
except_clause -> except : suite maybe_except_clause
2634
for
except_clause -> except : suite maybe_except_clause
2634
+
except_clause -> except : suite maybe_except_clause
2634
else
except_clause -> except : suite maybe_except_clause
2634
if
except_clause -> except : suite maybe_except_clause
2634
assert
except_clause -> except : suite maybe_except_clause
2634
DEDENT
except_clause -> except : suite maybe_except_clause
2634
def
except_clause -> except : suite maybe_except_clause
2634
break
except_clause -> except : suite maybe_except_clause
2634
return
except_clause -> except : suite maybe_except_clause
2634
class
except_clause -> except : suite maybe_except_clause
2634
continue
except_clause -> except : suite maybe_except_clause
2634
(
except_clause -> except : suite maybe_except_clause
2634
with
except_clause -> except : suite maybe_except_clause
2634
-
except_clause -> except : suite maybe_except_clause
2634
{
except_clause -> except : suite maybe_except_clause
2634
~
except_clause -> except : suite maybe_except_clause
2634
yield
except_clause -> except : suite maybe_except_clause
2634
resetstats
except_clause -> except : suite maybe_except_clause
2634
endsim
except_clause -> except : suite maybe_except_clause
2635
:
2646
2636
]
lambdef_nocond -> lambda varargslist : test_nocond
2636
if
lambdef_nocond -> lambda varargslist : test_nocond
2636
for
lambdef_nocond -> lambda varargslist : test_nocond
2637
for
lambdef_nocond -> lambda varargslist : test_nocond
2637
if
lambdef_nocond -> lambda varargslist : test_nocond
2637
)
lambdef_nocond -> lambda varargslist : test_nocond
2637
,
lambdef_nocond -> lambda varargslist : test_nocond
2638
NAME
if_stmt -> if test : suite elif_clause else : suite
2638
DEDENT
if_stmt -> if test : suite elif_clause else : suite
2638
endsim
if_stmt -> if test : suite elif_clause else : suite
2638
not
if_stmt -> if test : suite elif_clause else : suite
2638
begsim
if_stmt -> if test : suite elif_clause else : suite
2638
pass
if_stmt -> if test : suite elif_clause else : suite
2638
try
if_stmt -> if test : suite elif_clause else : suite
2638
def
if_stmt -> if test : suite elif_clause else : suite
2638
(
if_stmt -> if test : suite elif_clause else : suite
2638
nonlocal
if_stmt -> if test : suite elif_clause else : suite
2638
None
if_stmt -> if test : suite elif_clause else : suite
2638
conf
if_stmt -> if test : suite elif_clause else : suite
2638
break
if_stmt -> if test : suite elif_clause else : suite
2638
while
if_stmt -> if test : suite elif_clause else : suite
2638
~
if_stmt -> if test : suite elif_clause else : suite
2638
{
if_stmt -> if test : suite elif_clause else : suite
2638
raise
if_stmt -> if test : suite elif_clause else : suite
2638
resetstats
if_stmt -> if test : suite elif_clause else : suite
2638
global
if_stmt -> if test : suite elif_clause else : suite
2638
False
if_stmt -> if test : suite elif_clause else : suite
2638
[
if_stmt -> if test : suite elif_clause else : suite
2638
assert
if_stmt -> if test : suite elif_clause else : suite
2638
continue
if_stmt -> if test : suite elif_clause else : suite
2638
with
if_stmt -> if test : suite elif_clause else : suite
2638
for
if_stmt -> if test : suite elif_clause else : suite
2638
True
if_stmt -> if test : suite elif_clause else : suite
2638
@
if_stmt -> if test : suite elif_clause else : suite
2638
return
if_stmt -> if test : suite elif_clause else : suite
2638
if
if_stmt -> if test : suite elif_clause else : suite
2638
yield
if_stmt -> if test : suite elif_clause else : suite
2638
del
if_stmt -> if test : suite elif_clause else : suite
2638
NUMBER
if_stmt -> if test : suite elif_clause else : suite
2638
class
if_stmt -> if test : suite elif_clause else : suite
2638
+
if_stmt -> if test : suite elif_clause else : suite
2638
-
if_stmt -> if test : suite elif_clause else : suite
2638
STRING
if_stmt -> if test : suite elif_clause else : suite
2638
lambda
if_stmt -> if test : suite elif_clause else : suite
2639
elif
2563
2639
global
elif_clause -> 
2639
elif_clause
2647
2639
conf
elif_clause -> 
2639
with
elif_clause -> 
2639
while
elif_clause -> 
2639
continue
elif_clause -> 
2639
class
elif_clause -> 
2639
{
elif_clause -> 
2639
STRING
elif_clause -> 
2639
return
elif_clause -> 
2639
pass
elif_clause -> 
2639
del
elif_clause -> 
2639
True
elif_clause -> 
2639
NAME
elif_clause -> 
2639
not
elif_clause -> 
2639
assert
elif_clause -> 
2639
def
elif_clause -> 
2639
for
elif_clause -> 
2639
raise
elif_clause -> 
2639
if
elif_clause -> 
2639
yield
elif_clause -> 
2639
else
elif_clause -> 
2639
break
elif_clause -> 
2639
DEDENT
elif_clause -> 
2639
NUMBER
elif_clause -> 
2639
-
elif_clause -> 
2639
None
elif_clause -> 
2639
begsim
elif_clause -> 
2639
try
elif_clause -> 
2639
~
elif_clause -> 
2639
lambda
elif_clause -> 
2639
@
elif_clause -> 
2639
[
elif_clause -> 
2639
(
elif_clause -> 
2639
resetstats
elif_clause -> 
2639
nonlocal
elif_clause -> 
2639
endsim
elif_clause -> 
2639
False
elif_clause -> 
2639
+
elif_clause -> 
2640
~
simple_stmt -> small_stmt NEWLINE
2640
begsim
simple_stmt -> small_stmt NEWLINE
2640
endsim
simple_stmt -> small_stmt NEWLINE
2640
if
simple_stmt -> small_stmt NEWLINE
2640
break
simple_stmt -> small_stmt NEWLINE
2640
False
simple_stmt -> small_stmt NEWLINE
2640
def
simple_stmt -> small_stmt NEWLINE
2640
STRING
simple_stmt -> small_stmt NEWLINE
2640
finally
simple_stmt -> small_stmt NEWLINE
2640
assert
simple_stmt -> small_stmt NEWLINE
2640
lambda
simple_stmt -> small_stmt NEWLINE
2640
yield
simple_stmt -> small_stmt NEWLINE
2640
True
simple_stmt -> small_stmt NEWLINE
2640
+
simple_stmt -> small_stmt NEWLINE
2640
try
simple_stmt -> small_stmt NEWLINE
2640
for
simple_stmt -> small_stmt NEWLINE
2640
conf
simple_stmt -> small_stmt NEWLINE
2640
nonlocal
simple_stmt -> small_stmt NEWLINE
2640
continue
simple_stmt -> small_stmt NEWLINE
2640
-
simple_stmt -> small_stmt NEWLINE
2640
resetstats
simple_stmt -> small_stmt NEWLINE
2640
raise
simple_stmt -> small_stmt NEWLINE
2640
(
simple_stmt -> small_stmt NEWLINE
2640
None
simple_stmt -> small_stmt NEWLINE
2640
while
simple_stmt -> small_stmt NEWLINE
2640
not
simple_stmt -> small_stmt NEWLINE
2640
DEDENT
simple_stmt -> small_stmt NEWLINE
2640
NAME
simple_stmt -> small_stmt NEWLINE
2640
del
simple_stmt -> small_stmt NEWLINE
2640
with
simple_stmt -> small_stmt NEWLINE
2640
global
simple_stmt -> small_stmt NEWLINE
2640
@
simple_stmt -> small_stmt NEWLINE
2640
class
simple_stmt -> small_stmt NEWLINE
2640
{
simple_stmt -> small_stmt NEWLINE
2640
NUMBER
simple_stmt -> small_stmt NEWLINE
2640
[
simple_stmt -> small_stmt NEWLINE
2640
pass
simple_stmt -> small_stmt NEWLINE
2640
return
simple_stmt -> small_stmt NEWLINE
2641
:
2648
2642
factor
1
2642
decorators
1661
2642
(
3
2642
STRING
4
2642
expr
5
2642
term
6
2642
conf
1662
2642
not
8
2642
while
1663
2642
or_test
10
2642
if
1664
2642
~
12
2642
atom_expr
13
2642
comparison
14
2642
None
15
2642
class
1665
2642
xor_expr
17
2642
arith_expr
18
2642
+
19
2642
stmt_list
2649
2642
confdef
1666
2642
decorated
1667
2642
atom
22
2642
try_stmt
1668
2642
def
1669
2642
compound_stmt
1670
2642
try
1671
2642
NUMBER
26
2642
NAME
27
2642
False
28
2642
shift_expr
29
2642
while_stmt
1672
2642
[
32
2642
and_expr
33
2642
not_test
34
2642
{
35
2642
-
36
2642
simple_stmt
1673
2642
for
1674
2642
and_test
39
2642
@
40
2642
with_stmt
1675
2642
funcdef
1676
2642
small_stmt
1677
2642
power
43
2642
classdef
1678
2642
lambdef
45
2642
lambda
46
2642
test
47
2642
True
48
2642
if_stmt
1679
2642
for_stmt
1680
2642
with
1681
2642
flow_stmt
53
2642
break
54
2642
raise
55
2642
yield
56
2642
assert
57
2642
continue_stmt
58
2642
stat_stmt
59
2642
return_stmt
60
2642
test_list
61
2642
stmt
1682
2642
continue
62
2642
yield_stmt
63
2642
decorator
64
2642
sim_stmt
65
2642
resetstats
66
2642
del
67
2642
return
68
2642
raise_stmt
69
2642
nonlocal
70
2642
pass_stmt
71
2642
expr_stmt
72
2642
assert_stmt
74
2642
endsim
75
2642
pass
76
2642
global_stmt
77
2642
del_stmt
78
2642
global
79
2642
break_stmt
82
2642
begsim
83
2642
nonlocal_stmt
84
2643
expr
5
2643
factor
1
2643
(
3
2643
STRING
4
2643
term
6
2643
not
8
2643
or_test
10
2643
~
12
2643
atom_expr
13
2643
comparison
14
2643
shift_expr
29
2643
None
15
2643
power
43
2643
+
19
2643
small_stmt
2605
2643
xor_expr
17
2643
arith_expr
18
2643
[
32
2643
simple_stmt
2606
2643
atom
22
2643
NUMBER
26
2643
and_test
39
2643
NAME
27
2643
-
36
2643
False
28
2643
lambda
46
2643
test
47
2643
NEWLINE
2607
2643
not_test
34
2643
{
35
2643
and_expr
33
2643
lambdef
45
2643
suite
2650
2643
True
48
2643
endsim
75
2643
flow_stmt
53
2643
pass
76
2643
break
54
2643
raise
55
2643
yield
56
2643
assert
57
2643
global_stmt
77
2643
continue_stmt
58
2643
del_stmt
78
2643
stat_stmt
59
2643
global
79
2643
return_stmt
60
2643
test_list
61
2643
continue
62
2643
yield_stmt
63
2643
return
68
2643
sim_stmt
65
2643
resetstats
66
2643
break_stmt
82
2643
del
67
2643
raise_stmt
69
2643
nonlocal
70
2643
pass_stmt
71
2643
begsim
83
2643
expr_stmt
72
2643
nonlocal_stmt
84
2643
assert_stmt
74
2644
with
except_clause -> except test : suite maybe_except_clause
2644
def
except_clause -> except test : suite maybe_except_clause
2644
global
except_clause -> except test : suite maybe_except_clause
2644
True
except_clause -> except test : suite maybe_except_clause
2644
DEDENT
except_clause -> except test : suite maybe_except_clause
2644
NAME
except_clause -> except test : suite maybe_except_clause
2644
-
except_clause -> except test : suite maybe_except_clause
2644
return
except_clause -> except test : suite maybe_except_clause
2644
pass
except_clause -> except test : suite maybe_except_clause
2644
del
except_clause -> except test : suite maybe_except_clause
2644
conf
except_clause -> except test : suite maybe_except_clause
2644
raise
except_clause -> except test : suite maybe_except_clause
2644
[
except_clause -> except test : suite maybe_except_clause
2644
None
except_clause -> except test : suite maybe_except_clause
2644
class
except_clause -> except test : suite maybe_except_clause
2644
continue
except_clause -> except test : suite maybe_except_clause
2644
~
except_clause -> except test : suite maybe_except_clause
2644
for
except_clause -> except test : suite maybe_except_clause
2644
while
except_clause -> except test : suite maybe_except_clause
2644
finally
except_clause -> except test : suite maybe_except_clause
2644
break
except_clause -> except test : suite maybe_except_clause
2644
yield
except_clause -> except test : suite maybe_except_clause
2644
if
except_clause -> except test : suite maybe_except_clause
2644
try
except_clause -> except test : suite maybe_except_clause
2644
+
except_clause -> except test : suite maybe_except_clause
2644
False
except_clause -> except test : suite maybe_except_clause
2644
resetstats
except_clause -> except test : suite maybe_except_clause
2644
{
except_clause -> except test : suite maybe_except_clause
2644
STRING
except_clause -> except test : suite maybe_except_clause
2644
not
except_clause -> except test : suite maybe_except_clause
2644
lambda
except_clause -> except test : suite maybe_except_clause
2644
else
except_clause -> except test : suite maybe_except_clause
2644
@
except_clause -> except test : suite maybe_except_clause
2644
NUMBER
except_clause -> except test : suite maybe_except_clause
2644
begsim
except_clause -> except test : suite maybe_except_clause
2644
assert
except_clause -> except test : suite maybe_except_clause
2644
nonlocal
except_clause -> except test : suite maybe_except_clause
2644
endsim
except_clause -> except test : suite maybe_except_clause
2644
(
except_clause -> except test : suite maybe_except_clause
2645
DEDENT
2651
2646
suite
2652
2646
expr
5
2646
factor
1
2646
(
3
2646
STRING
4
2646
term
6
2646
not
8
2646
or_test
10
2646
~
12
2646
atom_expr
13
2646
comparison
14
2646
shift_expr
29
2646
None
15
2646
power
43
2646
+
19
2646
small_stmt
1677
2646
xor_expr
17
2646
arith_expr
18
2646
[
32
2646
simple_stmt
2491
2646
atom
22
2646
NUMBER
26
2646
and_test
39
2646
NAME
27
2646
-
36
2646
False
28
2646
lambda
46
2646
test
47
2646
not_test
34
2646
{
35
2646
and_expr
33
2646
lambdef
45
2646
True
48
2646
NEWLINE
2493
2646
endsim
75
2646
flow_stmt
53
2646
pass
76
2646
break
54
2646
raise
55
2646
yield
56
2646
assert
57
2646
global_stmt
77
2646
continue_stmt
58
2646
del_stmt
78
2646
stat_stmt
59
2646
global
79
2646
return_stmt
60
2646
test_list
61
2646
continue
62
2646
yield_stmt
63
2646
return
68
2646
sim_stmt
65
2646
resetstats
66
2646
break_stmt
82
2646
del
67
2646
raise_stmt
69
2646
nonlocal
70
2646
pass_stmt
71
2646
begsim
83
2646
expr_stmt
72
2646
nonlocal_stmt
84
2646
assert_stmt
74
2647
return
elif_clause -> elif test : suite elif_clause
2647
conf
elif_clause -> elif test : suite elif_clause
2647
resetstats
elif_clause -> elif test : suite elif_clause
2647
NUMBER
elif_clause -> elif test : suite elif_clause
2647
try
elif_clause -> elif test : suite elif_clause
2647
~
elif_clause -> elif test : suite elif_clause
2647
def
elif_clause -> elif test : suite elif_clause
2647
lambda
elif_clause -> elif test : suite elif_clause
2647
nonlocal
elif_clause -> elif test : suite elif_clause
2647
yield
elif_clause -> elif test : suite elif_clause
2647
{
elif_clause -> elif test : suite elif_clause
2647
pass
elif_clause -> elif test : suite elif_clause
2647
raise
elif_clause -> elif test : suite elif_clause
2647
-
elif_clause -> elif test : suite elif_clause
2647
with
elif_clause -> elif test : suite elif_clause
2647
True
elif_clause -> elif test : suite elif_clause
2647
break
elif_clause -> elif test : suite elif_clause
2647
[
elif_clause -> elif test : suite elif_clause
2647
+
elif_clause -> elif test : suite elif_clause
2647
None
elif_clause -> elif test : suite elif_clause
2647
not
elif_clause -> elif test : suite elif_clause
2647
NAME
elif_clause -> elif test : suite elif_clause
2647
for
elif_clause -> elif test : suite elif_clause
2647
continue
elif_clause -> elif test : suite elif_clause
2647
(
elif_clause -> elif test : suite elif_clause
2647
False
elif_clause -> elif test : suite elif_clause
2647
del
elif_clause -> elif test : suite elif_clause
2647
begsim
elif_clause -> elif test : suite elif_clause
2647
assert
elif_clause -> elif test : suite elif_clause
2647
@
elif_clause -> elif test : suite elif_clause
2647
while
elif_clause -> elif test : suite elif_clause
2647
else
elif_clause -> elif test : suite elif_clause
2647
class
elif_clause -> elif test : suite elif_clause
2647
if
elif_clause -> elif test : suite elif_clause
2647
global
elif_clause -> elif test : suite elif_clause
2647
DEDENT
elif_clause -> elif test : suite elif_clause
2647
endsim
elif_clause -> elif test : suite elif_clause
2647
STRING
elif_clause -> elif test : suite elif_clause
2648
expr
5
2648
factor
1
2648
(
3
2648
STRING
4
2648
term
6
2648
not
8
2648
or_test
10
2648
~
12
2648
atom_expr
13
2648
comparison
14
2648
shift_expr
29
2648
None
15
2648
power
43
2648
+
19
2648
small_stmt
1677
2648
xor_expr
17
2648
arith_expr
18
2648
suite
2653
2648
[
32
2648
simple_stmt
2491
2648
atom
22
2648
NUMBER
26
2648
and_test
39
2648
NAME
27
2648
-
36
2648
False
28
2648
lambda
46
2648
test
47
2648
not_test
34
2648
{
35
2648
and_expr
33
2648
lambdef
45
2648
True
48
2648
NEWLINE
2493
2648
endsim
75
2648
flow_stmt
53
2648
pass
76
2648
break
54
2648
raise
55
2648
yield
56
2648
assert
57
2648
global_stmt
77
2648
continue_stmt
58
2648
del_stmt
78
2648
stat_stmt
59
2648
global
79
2648
return_stmt
60
2648
test_list
61
2648
continue
62
2648
yield_stmt
63
2648
return
68
2648
sim_stmt
65
2648
resetstats
66
2648
break_stmt
82
2648
del
67
2648
raise_stmt
69
2648
nonlocal
70
2648
pass_stmt
71
2648
begsim
83
2648
expr_stmt
72
2648
nonlocal_stmt
84
2648
assert_stmt
74
2649
DEDENT
2654
2650
maybe_except_clause
2655
2650
except_clause
2633
2650
except
2499
2650
@
maybe_except_clause -> 
2650
pass
maybe_except_clause -> 
2650
if
maybe_except_clause -> 
2650
NUMBER
maybe_except_clause -> 
2650
class
maybe_except_clause -> 
2650
del
maybe_except_clause -> 
2650
raise
maybe_except_clause -> 
2650
conf
maybe_except_clause -> 
2650
for
maybe_except_clause -> 
2650
assert
maybe_except_clause -> 
2650
STRING
maybe_except_clause -> 
2650
[
maybe_except_clause -> 
2650
None
maybe_except_clause -> 
2650
return
maybe_except_clause -> 
2650
not
maybe_except_clause -> 
2650
yield
maybe_except_clause -> 
2650
nonlocal
maybe_except_clause -> 
2650
-
maybe_except_clause -> 
2650
try
maybe_except_clause -> 
2650
while
maybe_except_clause -> 
2650
begsim
maybe_except_clause -> 
2650
lambda
maybe_except_clause -> 
2650
(
maybe_except_clause -> 
2650
~
maybe_except_clause -> 
2650
global
maybe_except_clause -> 
2650
NAME
maybe_except_clause -> 
2650
else
maybe_except_clause -> 
2650
def
maybe_except_clause -> 
2650
resetstats
maybe_except_clause -> 
2650
False
maybe_except_clause -> 
2650
break
maybe_except_clause -> 
2650
with
maybe_except_clause -> 
2650
DEDENT
maybe_except_clause -> 
2650
+
maybe_except_clause -> 
2650
endsim
maybe_except_clause -> 
2650
continue
maybe_except_clause -> 
2650
{
maybe_except_clause -> 
2650
True
maybe_except_clause -> 
2650
finally
maybe_except_clause -> 
2651
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2651
return
suite -> NEWLINE INDENT stmt_list DEDENT
2651
if
suite -> NEWLINE INDENT stmt_list DEDENT
2651
not
suite -> NEWLINE INDENT stmt_list DEDENT
2651
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2651
{
suite -> NEWLINE INDENT stmt_list DEDENT
2651
break
suite -> NEWLINE INDENT stmt_list DEDENT
2651
False
suite -> NEWLINE INDENT stmt_list DEDENT
2651
+
suite -> NEWLINE INDENT stmt_list DEDENT
2651
class
suite -> NEWLINE INDENT stmt_list DEDENT
2651
with
suite -> NEWLINE INDENT stmt_list DEDENT
2651
(
suite -> NEWLINE INDENT stmt_list DEDENT
2651
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2651
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2651
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2651
global
suite -> NEWLINE INDENT stmt_list DEDENT
2651
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2651
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2651
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2651
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2651
try
suite -> NEWLINE INDENT stmt_list DEDENT
2651
while
suite -> NEWLINE INDENT stmt_list DEDENT
2651
except
suite -> NEWLINE INDENT stmt_list DEDENT
2651
del
suite -> NEWLINE INDENT stmt_list DEDENT
2651
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2651
True
suite -> NEWLINE INDENT stmt_list DEDENT
2651
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2651
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2651
for
suite -> NEWLINE INDENT stmt_list DEDENT
2651
~
suite -> NEWLINE INDENT stmt_list DEDENT
2651
else
suite -> NEWLINE INDENT stmt_list DEDENT
2651
-
suite -> NEWLINE INDENT stmt_list DEDENT
2651
@
suite -> NEWLINE INDENT stmt_list DEDENT
2651
None
suite -> NEWLINE INDENT stmt_list DEDENT
2651
[
suite -> NEWLINE INDENT stmt_list DEDENT
2651
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2651
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2651
def
suite -> NEWLINE INDENT stmt_list DEDENT
2651
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2651
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2652
if
for_stmt -> for expr_list in test_list : suite else : suite
2652
class
for_stmt -> for expr_list in test_list : suite else : suite
2652
while
for_stmt -> for expr_list in test_list : suite else : suite
2652
nonlocal
for_stmt -> for expr_list in test_list : suite else : suite
2652
(
for_stmt -> for expr_list in test_list : suite else : suite
2652
+
for_stmt -> for expr_list in test_list : suite else : suite
2652
def
for_stmt -> for expr_list in test_list : suite else : suite
2652
continue
for_stmt -> for expr_list in test_list : suite else : suite
2652
DEDENT
for_stmt -> for expr_list in test_list : suite else : suite
2652
True
for_stmt -> for expr_list in test_list : suite else : suite
2652
assert
for_stmt -> for expr_list in test_list : suite else : suite
2652
global
for_stmt -> for expr_list in test_list : suite else : suite
2652
begsim
for_stmt -> for expr_list in test_list : suite else : suite
2652
resetstats
for_stmt -> for expr_list in test_list : suite else : suite
2652
STRING
for_stmt -> for expr_list in test_list : suite else : suite
2652
None
for_stmt -> for expr_list in test_list : suite else : suite
2652
not
for_stmt -> for expr_list in test_list : suite else : suite
2652
yield
for_stmt -> for expr_list in test_list : suite else : suite
2652
raise
for_stmt -> for expr_list in test_list : suite else : suite
2652
~
for_stmt -> for expr_list in test_list : suite else : suite
2652
return
for_stmt -> for expr_list in test_list : suite else : suite
2652
del
for_stmt -> for expr_list in test_list : suite else : suite
2652
NUMBER
for_stmt -> for expr_list in test_list : suite else : suite
2652
lambda
for_stmt -> for expr_list in test_list : suite else : suite
2652
endsim
for_stmt -> for expr_list in test_list : suite else : suite
2652
pass
for_stmt -> for expr_list in test_list : suite else : suite
2652
{
for_stmt -> for expr_list in test_list : suite else : suite
2652
with
for_stmt -> for expr_list in test_list : suite else : suite
2652
-
for_stmt -> for expr_list in test_list : suite else : suite
2652
@
for_stmt -> for expr_list in test_list : suite else : suite
2652
try
for_stmt -> for expr_list in test_list : suite else : suite
2652
for
for_stmt -> for expr_list in test_list : suite else : suite
2652
[
for_stmt -> for expr_list in test_list : suite else : suite
2652
False
for_stmt -> for expr_list in test_list : suite else : suite
2652
break
for_stmt -> for expr_list in test_list : suite else : suite
2652
NAME
for_stmt -> for expr_list in test_list : suite else : suite
2652
conf
for_stmt -> for expr_list in test_list : suite else : suite
2653
lambda
try_stmt -> try : suite except_clause else : suite finally : suite
2653
False
try_stmt -> try : suite except_clause else : suite finally : suite
2653
not
try_stmt -> try : suite except_clause else : suite finally : suite
2653
+
try_stmt -> try : suite except_clause else : suite finally : suite
2653
global
try_stmt -> try : suite except_clause else : suite finally : suite
2653
continue
try_stmt -> try : suite except_clause else : suite finally : suite
2653
class
try_stmt -> try : suite except_clause else : suite finally : suite
2653
-
try_stmt -> try : suite except_clause else : suite finally : suite
2653
[
try_stmt -> try : suite except_clause else : suite finally : suite
2653
pass
try_stmt -> try : suite except_clause else : suite finally : suite
2653
with
try_stmt -> try : suite except_clause else : suite finally : suite
2653
True
try_stmt -> try : suite except_clause else : suite finally : suite
2653
if
try_stmt -> try : suite except_clause else : suite finally : suite
2653
return
try_stmt -> try : suite except_clause else : suite finally : suite
2653
(
try_stmt -> try : suite except_clause else : suite finally : suite
2653
None
try_stmt -> try : suite except_clause else : suite finally : suite
2653
NUMBER
try_stmt -> try : suite except_clause else : suite finally : suite
2653
break
try_stmt -> try : suite except_clause else : suite finally : suite
2653
del
try_stmt -> try : suite except_clause else : suite finally : suite
2653
assert
try_stmt -> try : suite except_clause else : suite finally : suite
2653
while
try_stmt -> try : suite except_clause else : suite finally : suite
2653
conf
try_stmt -> try : suite except_clause else : suite finally : suite
2653
endsim
try_stmt -> try : suite except_clause else : suite finally : suite
2653
yield
try_stmt -> try : suite except_clause else : suite finally : suite
2653
STRING
try_stmt -> try : suite except_clause else : suite finally : suite
2653
begsim
try_stmt -> try : suite except_clause else : suite finally : suite
2653
nonlocal
try_stmt -> try : suite except_clause else : suite finally : suite
2653
~
try_stmt -> try : suite except_clause else : suite finally : suite
2653
{
try_stmt -> try : suite except_clause else : suite finally : suite
2653
for
try_stmt -> try : suite except_clause else : suite finally : suite
2653
def
try_stmt -> try : suite except_clause else : suite finally : suite
2653
raise
try_stmt -> try : suite except_clause else : suite finally : suite
2653
resetstats
try_stmt -> try : suite except_clause else : suite finally : suite
2653
try
try_stmt -> try : suite except_clause else : suite finally : suite
2653
DEDENT
try_stmt -> try : suite except_clause else : suite finally : suite
2653
NAME
try_stmt -> try : suite except_clause else : suite finally : suite
2653
@
try_stmt -> try : suite except_clause else : suite finally : suite
2654
STRING
suite -> NEWLINE INDENT stmt_list DEDENT
2654
return
suite -> NEWLINE INDENT stmt_list DEDENT
2654
if
suite -> NEWLINE INDENT stmt_list DEDENT
2654
not
suite -> NEWLINE INDENT stmt_list DEDENT
2654
lambda
suite -> NEWLINE INDENT stmt_list DEDENT
2654
{
suite -> NEWLINE INDENT stmt_list DEDENT
2654
break
suite -> NEWLINE INDENT stmt_list DEDENT
2654
False
suite -> NEWLINE INDENT stmt_list DEDENT
2654
+
suite -> NEWLINE INDENT stmt_list DEDENT
2654
class
suite -> NEWLINE INDENT stmt_list DEDENT
2654
with
suite -> NEWLINE INDENT stmt_list DEDENT
2654
(
suite -> NEWLINE INDENT stmt_list DEDENT
2654
NAME
suite -> NEWLINE INDENT stmt_list DEDENT
2654
DEDENT
suite -> NEWLINE INDENT stmt_list DEDENT
2654
nonlocal
suite -> NEWLINE INDENT stmt_list DEDENT
2654
global
suite -> NEWLINE INDENT stmt_list DEDENT
2654
raise
suite -> NEWLINE INDENT stmt_list DEDENT
2654
finally
suite -> NEWLINE INDENT stmt_list DEDENT
2654
pass
suite -> NEWLINE INDENT stmt_list DEDENT
2654
NUMBER
suite -> NEWLINE INDENT stmt_list DEDENT
2654
try
suite -> NEWLINE INDENT stmt_list DEDENT
2654
while
suite -> NEWLINE INDENT stmt_list DEDENT
2654
del
suite -> NEWLINE INDENT stmt_list DEDENT
2654
begsim
suite -> NEWLINE INDENT stmt_list DEDENT
2654
True
suite -> NEWLINE INDENT stmt_list DEDENT
2654
yield
suite -> NEWLINE INDENT stmt_list DEDENT
2654
continue
suite -> NEWLINE INDENT stmt_list DEDENT
2654
for
suite -> NEWLINE INDENT stmt_list DEDENT
2654
~
suite -> NEWLINE INDENT stmt_list DEDENT
2654
-
suite -> NEWLINE INDENT stmt_list DEDENT
2654
@
suite -> NEWLINE INDENT stmt_list DEDENT
2654
None
suite -> NEWLINE INDENT stmt_list DEDENT
2654
[
suite -> NEWLINE INDENT stmt_list DEDENT
2654
endsim
suite -> NEWLINE INDENT stmt_list DEDENT
2654
assert
suite -> NEWLINE INDENT stmt_list DEDENT
2654
def
suite -> NEWLINE INDENT stmt_list DEDENT
2654
conf
suite -> NEWLINE INDENT stmt_list DEDENT
2654
resetstats
suite -> NEWLINE INDENT stmt_list DEDENT
2655
False
except_clause -> except test as NAME : suite maybe_except_clause
2655
~
except_clause -> except test as NAME : suite maybe_except_clause
2655
(
except_clause -> except test as NAME : suite maybe_except_clause
2655
global
except_clause -> except test as NAME : suite maybe_except_clause
2655
NUMBER
except_clause -> except test as NAME : suite maybe_except_clause
2655
begsim
except_clause -> except test as NAME : suite maybe_except_clause
2655
True
except_clause -> except test as NAME : suite maybe_except_clause
2655
endsim
except_clause -> except test as NAME : suite maybe_except_clause
2655
else
except_clause -> except test as NAME : suite maybe_except_clause
2655
conf
except_clause -> except test as NAME : suite maybe_except_clause
2655
[
except_clause -> except test as NAME : suite maybe_except_clause
2655
assert
except_clause -> except test as NAME : suite maybe_except_clause
2655
try
except_clause -> except test as NAME : suite maybe_except_clause
2655
with
except_clause -> except test as NAME : suite maybe_except_clause
2655
raise
except_clause -> except test as NAME : suite maybe_except_clause
2655
lambda
except_clause -> except test as NAME : suite maybe_except_clause
2655
break
except_clause -> except test as NAME : suite maybe_except_clause
2655
not
except_clause -> except test as NAME : suite maybe_except_clause
2655
finally
except_clause -> except test as NAME : suite maybe_except_clause
2655
while
except_clause -> except test as NAME : suite maybe_except_clause
2655
+
except_clause -> except test as NAME : suite maybe_except_clause
2655
return
except_clause -> except test as NAME : suite maybe_except_clause
2655
for
except_clause -> except test as NAME : suite maybe_except_clause
2655
STRING
except_clause -> except test as NAME : suite maybe_except_clause
2655
None
except_clause -> except test as NAME : suite maybe_except_clause
2655
yield
except_clause -> except test as NAME : suite maybe_except_clause
2655
NAME
except_clause -> except test as NAME : suite maybe_except_clause
2655
resetstats
except_clause -> except test as NAME : suite maybe_except_clause
2655
continue
except_clause -> except test as NAME : suite maybe_except_clause
2655
if
except_clause -> except test as NAME : suite maybe_except_clause
2655
-
except_clause -> except test as NAME : suite maybe_except_clause
2655
{
except_clause -> except test as NAME : suite maybe_except_clause
2655
DEDENT
except_clause -> except test as NAME : suite maybe_except_clause
2655
class
except_clause -> except test as NAME : suite maybe_except_clause
2655
nonlocal
except_clause -> except test as NAME : suite maybe_except_clause
2655
@
except_clause -> except test as NAME : suite maybe_except_clause
2655
def
except_clause -> except test as NAME : suite maybe_except_clause
2655
del
except_clause -> except test as NAME : suite maybe_except_clause
2655
pass
except_clause -> except test as NAME : suite maybe_except_clause
